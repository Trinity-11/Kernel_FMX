
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Mon Jul 27 20:58:03 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 c3 12 38	jsl $3812c3	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 09 07 39	jmp $390709	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104
=$af0105				BM0_Y_OFFSET        = $AF0105
=$af0106				BM0_PRIORITY        = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C
=$af010d				BM1_Y_OFFSET        = $AF010D
=$af010e				BM1_PRIORITY        = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$30					SPRITE_DEPTH2             = $30
=$40					SPRITE_DEPTH3             = $40
=$50					SPRITE_DEPTH4             = $50
=$60					SPRITE_DEPTH5             = $60
=$af0800				SP00_CONTROL_REG        = $AF0800
=$af0801				SP00_ADDY_PTR_L         = $AF0801
=$af0802				SP00_ADDY_PTR_M         = $AF0802
=$af0803				SP00_ADDY_PTR_H         = $AF0803
=$af0804				SP00_X_POS_L            = $AF0804
=$af0805				SP00_X_POS_H            = $AF0805
=$af0806				SP00_Y_POS_L            = $AF0806
=$af0807				SP00_Y_POS_H            = $AF0807
=$af0808				SP01_CONTROL_REG        = $AF0808
=$af0809				SP01_ADDY_PTR_L         = $AF0809
=$af080a				SP01_ADDY_PTR_M         = $AF080A
=$af080b				SP01_ADDY_PTR_H         = $AF080B
=$af080c				SP01_X_POS_L            = $AF080C
=$af080d				SP01_X_POS_H            = $AF080D
=$af080e				SP01_Y_POS_L            = $AF080E
=$af080f				SP01_Y_POS_H            = $AF080F
=$af0810				SP02_CONTROL_REG        = $AF0810
=$af0811				SP02_ADDY_PTR_L         = $AF0811
=$af0812				SP02_ADDY_PTR_M         = $AF0812
=$af0813				SP02_ADDY_PTR_H         = $AF0813
=$af0814				SP02_X_POS_L            = $AF0814
=$af0815				SP02_X_POS_H            = $AF0815
=$af0816				SP02_Y_POS_L            = $AF0816
=$af0817				SP02_Y_POS_H            = $AF0817
=$af0818				SP03_CONTROL_REG        = $AF0818
=$af0819				SP03_ADDY_PTR_L         = $AF0819
=$af081a				SP03_ADDY_PTR_M         = $AF081A
=$af081b				SP03_ADDY_PTR_H         = $AF081B
=$af081c				SP03_X_POS_L            = $AF081C
=$af081d				SP03_X_POS_H            = $AF081D
=$af081e				SP03_Y_POS_L            = $AF081E
=$af081f				SP03_Y_POS_H            = $AF081F
=$af0820				SP04_CONTROL_REG        = $AF0820
=$af0821				SP04_ADDY_PTR_L         = $AF0821
=$af0822				SP04_ADDY_PTR_M         = $AF0822
=$af0823				SP04_ADDY_PTR_H         = $AF0823
=$af0824				SP04_X_POS_L            = $AF0824
=$af0825				SP04_X_POS_H            = $AF0825
=$af0826				SP04_Y_POS_L            = $AF0826
=$af0827				SP04_Y_POS_H            = $AF0827
=$af0828				SP05_CONTROL_REG        = $AF0828
=$af0829				SP05_ADDY_PTR_L         = $AF0829
=$af082a				SP05_ADDY_PTR_M         = $AF082A
=$af082b				SP05_ADDY_PTR_H         = $AF082B
=$af082c				SP05_X_POS_L            = $AF082C
=$af082d				SP05_X_POS_H            = $AF082D
=$af082e				SP05_Y_POS_L            = $AF082E
=$af082f				SP05_Y_POS_H            = $AF082F
=$af0830				SP06_CONTROL_REG        = $AF0830
=$af0831				SP06_ADDY_PTR_L         = $AF0831
=$af0832				SP06_ADDY_PTR_M         = $AF0832
=$af0833				SP06_ADDY_PTR_H         = $AF0833
=$af0834				SP06_X_POS_L            = $AF0834
=$af0835				SP06_X_POS_H            = $AF0835
=$af0836				SP06_Y_POS_L            = $AF0836
=$af0837				SP06_Y_POS_H            = $AF0837
=$af0838				SP07_CONTROL_REG        = $AF0838
=$af0839				SP07_ADDY_PTR_L         = $AF0839
=$af083a				SP07_ADDY_PTR_M         = $AF083A
=$af083b				SP07_ADDY_PTR_H         = $AF083B
=$af083c				SP07_X_POS_L            = $AF083C
=$af083d				SP07_X_POS_H            = $AF083D
=$af083e				SP07_Y_POS_L            = $AF083E
=$af083f				SP07_Y_POS_H            = $AF083F
=$af0840				SP08_CONTROL_REG        = $AF0840
=$af0841				SP08_ADDY_PTR_L         = $AF0841
=$af0842				SP08_ADDY_PTR_M         = $AF0842
=$af0843				SP08_ADDY_PTR_H         = $AF0843
=$af0844				SP08_X_POS_L            = $AF0844
=$af0845				SP08_X_POS_H            = $AF0845
=$af0846				SP08_Y_POS_L            = $AF0846
=$af0847				SP08_Y_POS_H            = $AF0847
=$af0848				SP09_CONTROL_REG        = $AF0848
=$af0849				SP09_ADDY_PTR_L         = $AF0849
=$af084a				SP09_ADDY_PTR_M         = $AF084A
=$af084b				SP09_ADDY_PTR_H         = $AF084B
=$af084c				SP09_X_POS_L            = $AF084C
=$af084d				SP09_X_POS_H            = $AF084D
=$af084e				SP09_Y_POS_L            = $AF084E
=$af084f				SP09_Y_POS_H            = $AF084F
=$af0850				SP10_CONTROL_REG        = $AF0850
=$af0851				SP10_ADDY_PTR_L         = $AF0851
=$af0852				SP10_ADDY_PTR_M         = $AF0852
=$af0853				SP10_ADDY_PTR_H         = $AF0853
=$af0854				SP10_X_POS_L            = $AF0854
=$af0855				SP10_X_POS_H            = $AF0855
=$af0856				SP10_Y_POS_L            = $AF0856
=$af0857				SP10_Y_POS_H            = $AF0857
=$af0858				SP11_CONTROL_REG        = $AF0858
=$af0859				SP11_ADDY_PTR_L         = $AF0859
=$af085a				SP11_ADDY_PTR_M         = $AF085A
=$af085b				SP11_ADDY_PTR_H         = $AF085B
=$af085c				SP11_X_POS_L            = $AF085C
=$af085d				SP11_X_POS_H            = $AF085D
=$af085e				SP11_Y_POS_L            = $AF085E
=$af085f				SP11_Y_POS_H            = $AF085F
=$af0860				SP12_CONTROL_REG        = $AF0860
=$af0861				SP12_ADDY_PTR_L         = $AF0861
=$af0862				SP12_ADDY_PTR_M         = $AF0862
=$af0863				SP12_ADDY_PTR_H         = $AF0863
=$af0864				SP12_X_POS_L            = $AF0864
=$af0865				SP12_X_POS_H            = $AF0865
=$af0866				SP12_Y_POS_L            = $AF0866
=$af0867				SP12_Y_POS_H            = $AF0867
=$af0868				SP13_CONTROL_REG        = $AF0868
=$af0869				SP13_ADDY_PTR_L         = $AF0869
=$af086a				SP13_ADDY_PTR_M         = $AF086A
=$af086b				SP13_ADDY_PTR_H         = $AF086B
=$af086c				SP13_X_POS_L            = $AF086C
=$af086d				SP13_X_POS_H            = $AF086D
=$af086e				SP13_Y_POS_L            = $AF086E
=$af086f				SP13_Y_POS_H            = $AF086F
=$af0870				SP14_CONTROL_REG        = $AF0870
=$af0871				SP14_ADDY_PTR_L         = $AF0871
=$af0872				SP14_ADDY_PTR_M         = $AF0872
=$af0873				SP14_ADDY_PTR_H         = $AF0873
=$af0874				SP14_X_POS_L            = $AF0874
=$af0875				SP14_X_POS_H            = $AF0875
=$af0876				SP14_Y_POS_L            = $AF0876
=$af0877				SP14_Y_POS_H            = $AF0877
=$af0878				SP15_CONTROL_REG        = $AF0878
=$af0879				SP15_ADDY_PTR_L         = $AF0879
=$af087a				SP15_ADDY_PTR_M         = $AF087A
=$af087b				SP15_ADDY_PTR_H         = $AF087B
=$af087c				SP15_X_POS_L            = $AF087C
=$af087d				SP15_X_POS_H            = $AF087D
=$af087e				SP15_Y_POS_L            = $AF087E
=$af087f				SP15_Y_POS_H            = $AF087F
=$af0880				SP16_CONTROL_REG        = $AF0880
=$af0881				SP16_ADDY_PTR_L         = $AF0881
=$af0882				SP16_ADDY_PTR_M         = $AF0882
=$af0883				SP16_ADDY_PTR_H         = $AF0883
=$af0884				SP16_X_POS_L            = $AF0884
=$af0885				SP16_X_POS_H            = $AF0885
=$af0886				SP16_Y_POS_L            = $AF0886
=$af0887				SP16_Y_POS_H            = $AF0887
=$af0888				SP17_CONTROL_REG        = $AF0888
=$af0889				SP17_ADDY_PTR_L         = $AF0889
=$af088a				SP17_ADDY_PTR_M         = $AF088A
=$af088b				SP17_ADDY_PTR_H         = $AF088B
=$af088c				SP17_X_POS_L            = $AF088C
=$af088d				SP17_X_POS_H            = $AF088D
=$af088e				SP17_Y_POS_L            = $AF088E
=$af088f				SP17_Y_POS_H            = $AF088F
=$af0890				SP18_CONTROL_REG        = $AF0890
=$af0891				SP18_ADDY_PTR_L         = $AF0891
=$af0892				SP18_ADDY_PTR_M         = $AF0892
=$af0893				SP18_ADDY_PTR_H         = $AF0893
=$af0894				SP18_X_POS_L            = $AF0894
=$af0895				SP18_X_POS_H            = $AF0895
=$af0896				SP18_Y_POS_L            = $AF0896
=$af0897				SP18_Y_POS_H            = $AF0897
=$af0898				SP19_CONTROL_REG        = $AF0898
=$af0899				SP19_ADDY_PTR_L         = $AF0899
=$af089a				SP19_ADDY_PTR_M         = $AF089A
=$af089b				SP19_ADDY_PTR_H         = $AF089B
=$af089c				SP19_X_POS_L            = $AF089C
=$af089d				SP19_X_POS_H            = $AF089D
=$af089e				SP19_Y_POS_L            = $AF089E
=$af089f				SP19_Y_POS_H            = $AF089F
=$af08a0				SP20_CONTROL_REG        = $AF08A0
=$af08a1				SP20_ADDY_PTR_L         = $AF08A1
=$af08a2				SP20_ADDY_PTR_M         = $AF08A2
=$af08a3				SP20_ADDY_PTR_H         = $AF08A3
=$af08a4				SP20_X_POS_L            = $AF08A4
=$af08a5				SP20_X_POS_H            = $AF08A5
=$af08a6				SP20_Y_POS_L            = $AF08A6
=$af08a7				SP20_Y_POS_H            = $AF08A7
=$af08a8				SP21_CONTROL_REG        = $AF08A8
=$af08a9				SP21_ADDY_PTR_L         = $AF08A9
=$af08aa				SP21_ADDY_PTR_M         = $AF08AA
=$af08ab				SP21_ADDY_PTR_H         = $AF08AB
=$af08ac				SP21_X_POS_L            = $AF08AC
=$af08ad				SP21_X_POS_H            = $AF08AD
=$af08ae				SP21_Y_POS_L            = $AF08AE
=$af08af				SP21_Y_POS_H            = $AF08AF
=$af08b0				SP22_CONTROL_REG        = $AF08B0
=$af08b1				SP22_ADDY_PTR_L         = $AF08B1
=$af08b2				SP22_ADDY_PTR_M         = $AF08B2
=$af08b3				SP22_ADDY_PTR_H         = $AF08B3
=$af08b4				SP22_X_POS_L            = $AF08B4
=$af08b5				SP22_X_POS_H            = $AF08B5
=$af08b6				SP22_Y_POS_L            = $AF08B6
=$af08b7				SP22_Y_POS_H            = $AF08B7
=$af08b8				SP23_CONTROL_REG        = $AF08B8
=$af08b9				SP23_ADDY_PTR_L         = $AF08B9
=$af08ba				SP23_ADDY_PTR_M         = $AF08BA
=$af08bb				SP23_ADDY_PTR_H         = $AF08BB
=$af08bc				SP23_X_POS_L            = $AF08BC
=$af08bd				SP23_X_POS_H            = $AF08BD
=$af08be				SP23_Y_POS_L            = $AF08BE
=$af08bf				SP23_Y_POS_H            = $AF08BF
=$af08c0				SP24_CONTROL_REG        = $AF08C0
=$af08c1				SP24_ADDY_PTR_L         = $AF08C1
=$af08c2				SP24_ADDY_PTR_M         = $AF08C2
=$af08c3				SP24_ADDY_PTR_H         = $AF08C3
=$af08c4				SP24_X_POS_L            = $AF08C4
=$af08c5				SP24_X_POS_H            = $AF08C5
=$af08c6				SP24_Y_POS_L            = $AF08C6
=$af08c7				SP24_Y_POS_H            = $AF08C7
=$af08c8				SP25_CONTROL_REG        = $AF08C8
=$af08c9				SP25_ADDY_PTR_L         = $AF08C9
=$af08ca				SP25_ADDY_PTR_M         = $AF08CA
=$af08cb				SP25_ADDY_PTR_H         = $AF08CB
=$af08cc				SP25_X_POS_L            = $AF08CC
=$af08cd				SP25_X_POS_H            = $AF08CD
=$af08ce				SP25_Y_POS_L            = $AF08CE
=$af08cf				SP25_Y_POS_H            = $AF08CF
=$af08d0				SP26_CONTROL_REG        = $AF08D0
=$af08d1				SP26_ADDY_PTR_L         = $AF08D1
=$af08d2				SP26_ADDY_PTR_M         = $AF08D2
=$af08d3				SP26_ADDY_PTR_H         = $AF08D3
=$af08d4				SP26_X_POS_L            = $AF08D4
=$af08d5				SP26_X_POS_H            = $AF08D5
=$af08d6				SP26_Y_POS_L            = $AF08D6
=$af08d7				SP26_Y_POS_H            = $AF08D7
=$af08d8				SP27_CONTROL_REG        = $AF08D8
=$af08d9				SP27_ADDY_PTR_L         = $AF08D9
=$af08da				SP27_ADDY_PTR_M         = $AF08DA
=$af08db				SP27_ADDY_PTR_H         = $AF08DB
=$af08dc				SP27_X_POS_L            = $AF08DC
=$af08dd				SP27_X_POS_H            = $AF08DD
=$af08de				SP27_Y_POS_L            = $AF08DE
=$af08df				SP27_Y_POS_H            = $AF08DF
=$af08e0				SP28_CONTROL_REG        = $AF08E0
=$af08e1				SP28_ADDY_PTR_L         = $AF08E1
=$af08e2				SP28_ADDY_PTR_M         = $AF08E2
=$af08e3				SP28_ADDY_PTR_H         = $AF08E3
=$af08e4				SP28_X_POS_L            = $AF08E4
=$af08e5				SP28_X_POS_H            = $AF08E5
=$af08e6				SP28_Y_POS_L            = $AF08E6
=$af08e7				SP28_Y_POS_H            = $AF08E7
=$af08e8				SP29_CONTROL_REG        = $AF08E8
=$af08e9				SP29_ADDY_PTR_L         = $AF08E9
=$af08ea				SP29_ADDY_PTR_M         = $AF08EA
=$af08eb				SP29_ADDY_PTR_H         = $AF08EB
=$af08ec				SP29_X_POS_L            = $AF08EC
=$af08ed				SP29_X_POS_H            = $AF08ED
=$af08ee				SP29_Y_POS_L            = $AF08EE
=$af08ef				SP29_Y_POS_H            = $AF08EF
=$af08f0				SP30_CONTROL_REG        = $AF08F0
=$af08f1				SP30_ADDY_PTR_L         = $AF08F1
=$af08f2				SP30_ADDY_PTR_M         = $AF08F2
=$af08f3				SP30_ADDY_PTR_H         = $AF08F3
=$af08f4				SP30_X_POS_L            = $AF08F4
=$af08f5				SP30_X_POS_H            = $AF08F5
=$af08f6				SP30_Y_POS_L            = $AF08F6
=$af08f7				SP30_Y_POS_H            = $AF08F7
=$af08f8				SP31_CONTROL_REG        = $AF08F8
=$af08f9				SP31_ADDY_PTR_L         = $AF08F9
=$af08fa				SP31_ADDY_PTR_M         = $AF08FA
=$af08fb				SP31_ADDY_PTR_H         = $AF08FB
=$af08fc				SP31_X_POS_L            = $AF08FC
=$af08fd				SP31_X_POS_H            = $AF08FD
=$af08fe				SP31_Y_POS_L            = $AF08FE
=$af08ff				SP31_Y_POS_H            = $AF08FF
=$af0900				SP32_CONTROL_REG        = $AF0900
=$af0901				SP32_ADDY_PTR_L         = $AF0901
=$af0902				SP32_ADDY_PTR_M         = $AF0902
=$af0903				SP32_ADDY_PTR_H         = $AF0903
=$af0904				SP32_X_POS_L            = $AF0904
=$af0905				SP32_X_POS_H            = $AF0905
=$af0906				SP32_Y_POS_L            = $AF0906
=$af0907				SP32_Y_POS_H            = $AF0907
=$af0908				SP33_CONTROL_REG        = $AF0908
=$af0909				SP33_ADDY_PTR_L         = $AF0909
=$af090a				SP33_ADDY_PTR_M         = $AF090A
=$af090b				SP33_ADDY_PTR_H         = $AF090B
=$af090c				SP33_X_POS_L            = $AF090C
=$af090d				SP33_X_POS_H            = $AF090D
=$af090e				SP33_Y_POS_L            = $AF090E
=$af090f				SP33_Y_POS_H            = $AF090F
=$af0910				SP34_CONTROL_REG        = $AF0910
=$af0911				SP34_ADDY_PTR_L         = $AF0911
=$af0912				SP34_ADDY_PTR_M         = $AF0912
=$af0913				SP34_ADDY_PTR_H         = $AF0913
=$af0914				SP34_X_POS_L            = $AF0914
=$af0915				SP34_X_POS_H            = $AF0915
=$af0916				SP34_Y_POS_L            = $AF0916
=$af0917				SP34_Y_POS_H            = $AF0917
=$af0918				SP35_CONTROL_REG        = $AF0918
=$af0919				SP35_ADDY_PTR_L         = $AF0919
=$af091a				SP35_ADDY_PTR_M         = $AF091A
=$af091b				SP35_ADDY_PTR_H         = $AF091B
=$af091c				SP35_X_POS_L            = $AF091C
=$af091d				SP35_X_POS_H            = $AF091D
=$af091e				SP35_Y_POS_L            = $AF091E
=$af091f				SP35_Y_POS_H            = $AF091F
=$af0920				SP36_CONTROL_REG        = $AF0920
=$af0921				SP36_ADDY_PTR_L         = $AF0921
=$af0922				SP36_ADDY_PTR_M         = $AF0922
=$af0923				SP36_ADDY_PTR_H         = $AF0923
=$af0924				SP36_X_POS_L            = $AF0924
=$af0925				SP36_X_POS_H            = $AF0925
=$af0926				SP36_Y_POS_L            = $AF0926
=$af0927				SP36_Y_POS_H            = $AF0927
=$af0928				SP37_CONTROL_REG        = $AF0928
=$af0929				SP37_ADDY_PTR_L         = $AF0929
=$af092a				SP37_ADDY_PTR_M         = $AF092A
=$af092b				SP37_ADDY_PTR_H         = $AF092B
=$af092c				SP37_X_POS_L            = $AF092C
=$af092d				SP37_X_POS_H            = $AF092D
=$af092e				SP37_Y_POS_L            = $AF092E
=$af092f				SP37_Y_POS_H            = $AF092F
=$af0930				SP38_CONTROL_REG        = $AF0930
=$af0931				SP38_ADDY_PTR_L         = $AF0931
=$af0932				SP38_ADDY_PTR_M         = $AF0932
=$af0933				SP38_ADDY_PTR_H         = $AF0933
=$af0934				SP38_X_POS_L            = $AF0934
=$af0935				SP38_X_POS_H            = $AF0935
=$af0936				SP38_Y_POS_L            = $AF0936
=$af0937				SP38_Y_POS_H            = $AF0937
=$af0938				SP39_CONTROL_REG        = $AF0938
=$af0939				SP39_ADDY_PTR_L         = $AF0939
=$af093a				SP39_ADDY_PTR_M         = $AF093A
=$af093b				SP39_ADDY_PTR_H         = $AF093B
=$af093c				SP39_X_POS_L            = $AF093C
=$af093d				SP39_X_POS_H            = $AF093D
=$af093e				SP39_Y_POS_L            = $AF093E
=$af093f				SP39_Y_POS_H            = $AF093F
=$af0940				SP40_CONTROL_REG        = $AF0940
=$af0941				SP40_ADDY_PTR_L         = $AF0941
=$af0942				SP40_ADDY_PTR_M         = $AF0942
=$af0943				SP40_ADDY_PTR_H         = $AF0943
=$af0944				SP40_X_POS_L            = $AF0944
=$af0945				SP40_X_POS_H            = $AF0945
=$af0946				SP40_Y_POS_L            = $AF0946
=$af0947				SP40_Y_POS_H            = $AF0947
=$af0948				SP41_CONTROL_REG        = $AF0948
=$af0949				SP41_ADDY_PTR_L         = $AF0949
=$af094a				SP41_ADDY_PTR_M         = $AF094A
=$af094b				SP41_ADDY_PTR_H         = $AF094B
=$af094c				SP41_X_POS_L            = $AF094C
=$af094d				SP41_X_POS_H            = $AF094D
=$af094e				SP41_Y_POS_L            = $AF094E
=$af094f				SP41_Y_POS_H            = $AF094F
=$af0950				SP42_CONTROL_REG        = $AF0950
=$af0951				SP42_ADDY_PTR_L         = $AF0951
=$af0952				SP42_ADDY_PTR_M         = $AF0952
=$af0953				SP42_ADDY_PTR_H         = $AF0953
=$af0954				SP42_X_POS_L            = $AF0954
=$af0955				SP42_X_POS_H            = $AF0955
=$af0956				SP42_Y_POS_L            = $AF0956
=$af0957				SP42_Y_POS_H            = $AF0957
=$af0958				SP43_CONTROL_REG        = $AF0958
=$af0959				SP43_ADDY_PTR_L         = $AF0959
=$af095a				SP43_ADDY_PTR_M         = $AF095A
=$af095b				SP43_ADDY_PTR_H         = $AF095B
=$af095c				SP43_X_POS_L            = $AF095C
=$af095d				SP43_X_POS_H            = $AF095D
=$af095e				SP43_Y_POS_L            = $AF095E
=$af095f				SP43_Y_POS_H            = $AF095F
=$af0960				SP44_CONTROL_REG        = $AF0960
=$af0961				SP44_ADDY_PTR_L         = $AF0961
=$af0962				SP44_ADDY_PTR_M         = $AF0962
=$af0963				SP44_ADDY_PTR_H         = $AF0963
=$af0964				SP44_X_POS_L            = $AF0964
=$af0965				SP44_X_POS_H            = $AF0965
=$af0966				SP44_Y_POS_L            = $AF0966
=$af0967				SP44_Y_POS_H            = $AF0967
=$af0968				SP45_CONTROL_REG        = $AF0968
=$af0969				SP45_ADDY_PTR_L         = $AF0969
=$af096a				SP45_ADDY_PTR_M         = $AF096A
=$af096b				SP45_ADDY_PTR_H         = $AF096B
=$af096c				SP45_X_POS_L            = $AF096C
=$af096d				SP45_X_POS_H            = $AF096D
=$af096e				SP45_Y_POS_L            = $AF096E
=$af096f				SP45_Y_POS_H            = $AF096F
=$af0970				SP46_CONTROL_REG        = $AF0970
=$af0971				SP46_ADDY_PTR_L         = $AF0971
=$af0972				SP46_ADDY_PTR_M         = $AF0972
=$af0973				SP46_ADDY_PTR_H         = $AF0973
=$af0974				SP46_X_POS_L            = $AF0974
=$af0975				SP46_X_POS_H            = $AF0975
=$af0976				SP46_Y_POS_L            = $AF0976
=$af0977				SP46_Y_POS_H            = $AF0977
=$af0978				SP47_CONTROL_REG        = $AF0978
=$af0979				SP47_ADDY_PTR_L         = $AF0979
=$af097a				SP47_ADDY_PTR_M         = $AF097A
=$af097b				SP47_ADDY_PTR_H         = $AF097B
=$af097c				SP47_X_POS_L            = $AF097C
=$af097d				SP47_X_POS_H            = $AF097D
=$af097e				SP47_Y_POS_L            = $AF097E
=$af097f				SP47_Y_POS_H            = $AF097F
=$af0980				SP48_CONTROL_REG        = $AF0980
=$af0981				SP48_ADDY_PTR_L         = $AF0981
=$af0982				SP48_ADDY_PTR_M         = $AF0982
=$af0983				SP48_ADDY_PTR_H         = $AF0983
=$af0984				SP48_X_POS_L            = $AF0984
=$af0985				SP48_X_POS_H            = $AF0985
=$af0986				SP48_Y_POS_L            = $AF0986
=$af0987				SP48_Y_POS_H            = $AF0987
=$af0988				SP49_CONTROL_REG        = $AF0988
=$af0989				SP49_ADDY_PTR_L         = $AF0989
=$af098a				SP49_ADDY_PTR_M         = $AF098A
=$af098b				SP49_ADDY_PTR_H         = $AF098B
=$af098c				SP49_X_POS_L            = $AF098C
=$af098d				SP49_X_POS_H            = $AF098D
=$af098e				SP49_Y_POS_L            = $AF098E
=$af098f				SP49_Y_POS_H            = $AF098F
=$af0990				SP50_CONTROL_REG        = $AF0990
=$af0991				SP50_ADDY_PTR_L         = $AF0991
=$af0992				SP50_ADDY_PTR_M         = $AF0992
=$af0993				SP50_ADDY_PTR_H         = $AF0993
=$af0994				SP50_X_POS_L            = $AF0994
=$af0995				SP50_X_POS_H            = $AF0995
=$af0996				SP50_Y_POS_L            = $AF0996
=$af0997				SP50_Y_POS_H            = $AF0997
=$af0998				SP51_CONTROL_REG        = $AF0998
=$af0999				SP51_ADDY_PTR_L         = $AF0999
=$af099a				SP51_ADDY_PTR_M         = $AF099A
=$af099b				SP51_ADDY_PTR_H         = $AF099B
=$af099c				SP51_X_POS_L            = $AF099C
=$af099d				SP51_X_POS_H            = $AF099D
=$af099e				SP51_Y_POS_L            = $AF099E
=$af099f				SP51_Y_POS_H            = $AF099F
=$af09a0				SP52_CONTROL_REG        = $AF09A0
=$af09a1				SP52_ADDY_PTR_L         = $AF09A1
=$af09a2				SP52_ADDY_PTR_M         = $AF09A2
=$af09a3				SP52_ADDY_PTR_H         = $AF09A3
=$af09a4				SP52_X_POS_L            = $AF09A4
=$af09a5				SP52_X_POS_H            = $AF09A5
=$af09a6				SP52_Y_POS_L            = $AF09A6
=$af09a7				SP52_Y_POS_H            = $AF09A7
=$af09a8				SP53_CONTROL_REG        = $AF09A8
=$af09a9				SP53_ADDY_PTR_L         = $AF09A9
=$af09aa				SP53_ADDY_PTR_M         = $AF09AA
=$af09ab				SP53_ADDY_PTR_H         = $AF09AB
=$af09ac				SP53_X_POS_L            = $AF09AC
=$af09ad				SP53_X_POS_H            = $AF09AD
=$af09ae				SP53_Y_POS_L            = $AF09AE
=$af09af				SP53_Y_POS_H            = $AF09AF
=$af09b0				SP54_CONTROL_REG        = $AF09B0
=$af09b1				SP54_ADDY_PTR_L         = $AF09B1
=$af09b2				SP54_ADDY_PTR_M         = $AF09B2
=$af09b3				SP54_ADDY_PTR_H         = $AF09B3
=$af09b4				SP54_X_POS_L            = $AF09B4
=$af09b5				SP54_X_POS_H            = $AF09B5
=$af09b6				SP54_Y_POS_L            = $AF09B6
=$af09b7				SP54_Y_POS_H            = $AF09B7
=$af09b8				SP55_CONTROL_REG        = $AF09B8
=$af09b9				SP55_ADDY_PTR_L         = $AF09B9
=$af09ba				SP55_ADDY_PTR_M         = $AF09BA
=$af09bb				SP55_ADDY_PTR_H         = $AF09BB
=$af09bc				SP55_X_POS_L            = $AF09BC
=$af09bd				SP55_X_POS_H            = $AF09BD
=$af09be				SP55_Y_POS_L            = $AF09BE
=$af09bf				SP55_Y_POS_H            = $AF09BF
=$af09c0				SP56_CONTROL_REG        = $AF09C0
=$af09c1				SP56_ADDY_PTR_L         = $AF09C1
=$af09c2				SP56_ADDY_PTR_M         = $AF09C2
=$af09c3				SP56_ADDY_PTR_H         = $AF09C3
=$af09c4				SP56_X_POS_L            = $AF09C4
=$af09c5				SP56_X_POS_H            = $AF09C5
=$af09c6				SP56_Y_POS_L            = $AF09C6
=$af09c7				SP56_Y_POS_H            = $AF09C7
=$af09c8				SP57_CONTROL_REG        = $AF09C8
=$af09c9				SP57_ADDY_PTR_L         = $AF09C9
=$af09ca				SP57_ADDY_PTR_M         = $AF09CA
=$af09cb				SP57_ADDY_PTR_H         = $AF09CB
=$af09cc				SP57_X_POS_L            = $AF09CC
=$af09cd				SP57_X_POS_H            = $AF09CD
=$af09ce				SP57_Y_POS_L            = $AF09CE
=$af09cf				SP57_Y_POS_H            = $AF09CF
=$af09d0				SP58_CONTROL_REG        = $AF09D0
=$af09d1				SP58_ADDY_PTR_L         = $AF09D1
=$af09d2				SP58_ADDY_PTR_M         = $AF09D2
=$af09d3				SP58_ADDY_PTR_H         = $AF09D3
=$af09d4				SP58_X_POS_L            = $AF09D4
=$af09d5				SP58_X_POS_H            = $AF09D5
=$af09d6				SP58_Y_POS_L            = $AF09D6
=$af09d7				SP58_Y_POS_H            = $AF09D7
=$af09d8				SP59_CONTROL_REG        = $AF09D8
=$af09d9				SP59_ADDY_PTR_L         = $AF09D9
=$af09da				SP59_ADDY_PTR_M         = $AF09DA
=$af09db				SP59_ADDY_PTR_H         = $AF09DB
=$af09dc				SP59_X_POS_L            = $AF09DC
=$af09dd				SP59_X_POS_H            = $AF09DD
=$af09de				SP59_Y_POS_L            = $AF09DE
=$af09df				SP59_Y_POS_H            = $AF09DF
=$af09e0				SP60_CONTROL_REG        = $AF09E0
=$af09e1				SP60_ADDY_PTR_L         = $AF09E1
=$af09e2				SP60_ADDY_PTR_M         = $AF09E2
=$af09e3				SP60_ADDY_PTR_H         = $AF09E3
=$af09e4				SP60_X_POS_L            = $AF09E4
=$af09e5				SP60_X_POS_H            = $AF09E5
=$af09e6				SP60_Y_POS_L            = $AF09E6
=$af09e7				SP60_Y_POS_H            = $AF09E7
=$af09e8				SP61_CONTROL_REG        = $AF09E8
=$af09e9				SP61_ADDY_PTR_L         = $AF09E9
=$af09ea				SP61_ADDY_PTR_M         = $AF09EA
=$af09eb				SP61_ADDY_PTR_H         = $AF09EB
=$af09ec				SP61_X_POS_L            = $AF09EC
=$af09ed				SP61_X_POS_H            = $AF09ED
=$af09ee				SP61_Y_POS_L            = $AF09EE
=$af09ef				SP61_Y_POS_H            = $AF09EF
=$af09f0				SP62_CONTROL_REG        = $AF09F0
=$af09f1				SP62_ADDY_PTR_L         = $AF09F1
=$af09f2				SP62_ADDY_PTR_M         = $AF09F2
=$af09f3				SP62_ADDY_PTR_H         = $AF09F3
=$af09f4				SP62_X_POS_L            = $AF09F4
=$af09f5				SP62_X_POS_H            = $AF09F5
=$af09f6				SP62_Y_POS_L            = $AF09F6
=$af09f7				SP62_Y_POS_H            = $AF09F7
=$af09f8				SP63_CONTROL_REG        = $AF09F8
=$af09f9				SP63_ADDY_PTR_L         = $AF09F9
=$af09fa				SP63_ADDY_PTR_M         = $AF09FA
=$af09fb				SP63_ADDY_PTR_H         = $AF09FB
=$af09fc				SP63_X_POS_L            = $AF09FC
=$af09fd				SP63_X_POS_H            = $AF09FD
=$af09fe				SP63_Y_POS_L            = $AF09FE
=$af09ff				SP63_Y_POS_H            = $AF09FF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 99 16 39	jmp $391699	RESTORE         JML IRESTORE
.381008	5c a8 06 39	jmp $3906a8	BREAK           JML IBREAK
.38100c	5c ef 06 39	jmp $3906ef	READY           JML IREADY
.381010	5c 9a 16 39	jmp $39169a	SCINIT          JML ISCINIT
.381014	5c 9b 16 39	jmp $39169b	IOINIT          JML IIOINIT
.381018	5c a2 07 39	jmp $3907a2	PUTC            JML IPUTC
.38101c	5c 8b 07 39	jmp $39078b	PUTS            JML IPUTS
.381020	5c d3 08 39	jmp $3908d3	PUTB            JML IPUTB
.381024	5c 6e 41 39	jmp $39416e	PUTBLOCK        JML IPUTBLOCK
.381028	5c 9c 16 39	jmp $39169c	SETLFS          JML ISETLFS
.38102c	5c 9d 16 39	jmp $39169d	SETNAM          JML ISETNAM
.381030	5c 9e 16 39	jmp $39169e	OPEN            JML IOPEN
.381034	5c 9f 16 39	jmp $39169f	CLOSE           JML ICLOSE
.381038	5c 0a 07 39	jmp $39070a	SETIN           JML ISETIN
.38103c	5c 13 07 39	jmp $390713	SETOUT          JML ISETOUT
.381040	5c a0 16 39	jmp $3916a0	GETB            JML IGETB
.381044	5c 1b 41 39	jmp $39411b	GETBLOCK        JML IGETBLOCK
.381048	5c 4c 07 39	jmp $39074c	GETCH           JML IGETCH
.38104c	5c 25 07 39	jmp $390725	GETCHW          JML IGETCHW
.381050	5c 1c 07 39	jmp $39071c	GETCHE          JML IGETCHE
.381054	5c a1 16 39	jmp $3916a1	GETS            JML IGETS
.381058	5c a2 16 39	jmp $3916a2	GETLINE         JML IGETLINE
.38105c	5c a3 16 39	jmp $3916a3	GETFIELD        JML IGETFIELD
.381060	5c a4 16 39	jmp $3916a4	TRIM            JML ITRIM
.381064	5c a5 16 39	jmp $3916a5	PRINTC          JML IPRINTC
.381068	5c a6 16 39	jmp $3916a6	PRINTS          JML IPRINTS
.38106c	5c d4 08 39	jmp $3908d4	PRINTCR         JML IPRINTCR
.381070	5c a7 16 39	jmp $3916a7	PRINTF          JML IPRINTF
.381074	5c a8 16 39	jmp $3916a8	PRINTI          JML IPRINTI
.381078	5c 94 0a 39	jmp $390a94	PRINTH          JML IPRINTH
.38107c	5c a9 16 39	jmp $3916a9	PRINTAI         JML IPRINTAI
.381080	5c b1 0a 39	jmp $390ab1	PRINTAH         JML IPRINTAH
.381084	5c d8 09 39	jmp $3909d8	LOCATE          JML ILOCATE
.381088	5c aa 16 39	jmp $3916aa	PUSHKEY         JML IPUSHKEY
.38108c	5c ab 16 39	jmp $3916ab	PUSHKEYS        JML IPUSHKEYS
.381090	5c 34 09 39	jmp $390934	CSRRIGHT        JML ICSRRIGHT
.381094	5c 67 09 39	jmp $390967	CSRLEFT         JML ICSRLEFT
.381098	5c 8d 09 39	jmp $39098d	CSRUP           JML ICSRUP
.38109c	5c b3 09 39	jmp $3909b3	CSRDOWN         JML ICSRDOWN
.3810a0	5c 23 09 39	jmp $390923	CSRHOME         JML ICSRHOME
.3810a4	5c 24 0a 39	jmp $390a24	SCROLLUP        JML ISCROLLUP
.3810a8	5c ff 0a 39	jmp $390aff	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c ca 0b 39	jmp $390bca	INITCHLUT	    JML IINITCHLUT
.3810b0	5c c1 0f 39	jmp $390fc1	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c c0 10 39	jmp $3910c0	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 2b 12 39	jmp $39122b	TESTSID         JML ITESTSID
.3810bc	5c a0 0f 39	jmp $390fa0	INITCURSOR      JML IINITCURSOR
.3810c0	5c 56 0f 39	jmp $390f56	INITFONTSET     JML IINITFONTSET
.3810c4	5c f9 0b 39	jmp $390bf9	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 19 0c 39	jmp $390c19	INITALLLUT      JML IINITALLLUT
.3810cc	5c db 0c 39	jmp $390cdb	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c e1 0d 39	jmp $390de1	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 18 0e 39	jmp $390e18	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 19 0e 39	jmp $390e19	INITSPRITE      JML IINITSPRITE
.3810dc	5c fa 12 39	jmp $3912fa	INITCODEC       JML IINITCODEC
.3810e0	5c 76 13 39	jmp $391376	RESETCODEC      JML IRESETCODEC
.3810e4	5c e4 13 39	jmp $3913e4	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 99 13 39	jmp $391399	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 27 37 39	jmp $393727	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 67 53 39	jmp $395367	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c fa 53 39	jmp $3953fa	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 34 54 39	jmp $395434	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c cd 54 39	jmp $3954cd	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 68 54 39	jmp $395468	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 77 55 39	jmp $395577	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c 39 55 39	jmp $395539	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 73 55 39	jmp $395573	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 10 56 39	jmp $395610	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 37 56 39	jmp $395637	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 3b 56 39	jmp $39563b	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 1c 58 39	jmp $39581c	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c f1 40 39	jmp $3940f1	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c b5 58 39	jmp $3958b5	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c d4 44 39	jmp $3944d4	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 2e 0d 39	jmp $390d2e	SETSIZES        JML ISETSIZES
.381130	5c de 59 39	jmp $3959de	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 40 59 39	jmp $395940	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 94 59 39	jmp $395994	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 31 12	jsr $381231	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 8c 12	jsr $38128c	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 4b 12	jsr $38124b	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 c4 12	jsr $3812c4	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 97 12	jsr $381297	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 a2 12	jsr $3812a2	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 ad 12	jsr $3812ad	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 b8 12	jsr $3812b8	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.381200	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381204	c2 20		rep #$20	                REP #$20        ; set A long
.381206	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120a	f0 0b		beq $381217	                BEQ sof_timeout                 ; If it's zero, check for the watchdog timeout
.38120c	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.38120d	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.381211	d0 04		bne $381217	                BNE sof_timeout                 ; If it's not zero, check for the watchdog timeout
.381213	22 e9 61 39	jsl $3961e9	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381217					sof_timeout
.381217	e2 20		sep #$20	                SEP #$20        ; set A short
.381219	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.38121d	f0 11		beq $381230	                BEQ sof_int_done                ; If it's 0, we don't do anything
.38121f	3a		dec a		                DEC A                           ; Count down one tick
.381220	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.381224	d0 0a		bne $381230	                BNE sof_int_done                ; If not 0, we're done
.381226	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.38122a	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.38122c	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381230	60		rts		sof_int_done    RTS
.381231					TIMER0_INTERRUPT
.381231	e2 20		sep #$20	                SEP #$20        ; set A short
.381233	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381237	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381239	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38123d	60		rts		                RTS
.38123e					TIMER2_INTERRUPT
.38123e	e2 20		sep #$20	                SEP #$20        ; set A short
.381240	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381244	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381246	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38124a	60		rts		                RTS
.38124b					MOUSE_INTERRUPT
.38124b	e2 20		sep #$20	                SEP #$20        ; set A short
.38124d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381251	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381253	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381257	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38125b	a2 00 00	ldx #$0000	                LDX #$0000
.38125e	e2 10		sep #$10	                SEP #$10        ; set X short
.381260	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381262	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381266	e8		inx		                INX
.381267	e0 03		cpx #$03	                CPX #$03
.381269	d0 1c		bne $381287	                BNE EXIT_FOR_NEXT_VALUE
.38126b	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.38126f	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381271	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381275	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381277	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38127b	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.38127d	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381281	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381283	e2 20		sep #$20	                SEP #$20        ; set A short
.381285	a2 00		ldx #$00	                LDX #$00
.381287					EXIT_FOR_NEXT_VALUE
.381287	86 e0		stx $e0		                STX MOUSE_PTR
.381289	c2 10		rep #$10	                REP #$10        ; set X long
.38128b	60		rts		                RTS
.38128c					FDC_INTERRUPT
.38128c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381290	29 40		and #$40	                AND #FNX0_INT06_FDC
.381292	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381296	60		rts		                RTS
.381297					COM2_INTERRUPT
.381297	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38129b	29 08		and #$08	                AND #FNX1_INT03_COM2
.38129d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812a1	60		rts		                RTS
.3812a2					COM1_INTERRUPT
.3812a2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812a6	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812a8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812ac	60		rts		                RTS
.3812ad					MPU401_INTERRUPT
.3812ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812b1	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812b3	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b7	60		rts		                RTS
.3812b8					LPT1_INTERRUPT
.3812b8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812bc	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812be	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c2	60		rts		                RTS
.3812c3					NMI_HANDLER
.3812c3	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812c4					KEYBOARD_INTERRUPT
.3812c4	48		pha		                PHA             ; begin setdp macro
.3812c5	08		php		                PHP
.3812c6	c2 20		rep #$20	                REP #$20        ; set A long
.3812c8	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812cb	5b		tcd		                TCD
.3812cc	28		plp		                PLP
.3812cd	68		pla		                PLA             ; end setdp macro
.3812ce	a2 00 00	ldx #$0000	                ldx #$0000
.3812d1	e2 10		sep #$10	                SEP #$10        ; set X short
.3812d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3812d5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d9	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812db	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812df					IRQ_HANDLER_FETCH
.3812df	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812e3	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812e5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812e7	29 80		and #$80	                AND #$80
.3812e9	c9 80		cmp #$80	                CMP #$80
.3812eb	d0 10		bne $3812fd	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812ed	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812ef	29 7f		and #$7f	                AND #$7F
.3812f1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812f3	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812f5	aa		tax		                TAX
.3812f6	bf 80 74 39	lda $397480,x	                LDA @lScanCode_Prefix_Set1, x
.3812fa	4c a0 13	jmp $3813a0	                JMP KB_WR_2_SCREEN      ; And save it
.3812fd	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812ff	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381301	d0 03		bne $381306	                BNE NOT_KB_SET_LSHIFT
.381303	82 ad 00	brl $3813b3	                BRL KB_SET_SHIFT
.381306					NOT_KB_SET_LSHIFT
.381306	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.381308	d0 03		bne $38130d	                BNE NOT_KB_CLR_LSHIFT
.38130a	82 af 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38130d					NOT_KB_CLR_LSHIFT
.38130d	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.38130f	d0 03		bne $381314	                BNE NOT_KB_SET_RSHIFT
.381311	82 9f 00	brl $3813b3	                BRL KB_SET_SHIFT
.381314					NOT_KB_SET_RSHIFT
.381314	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381316	d0 03		bne $38131b	                BNE NOT_KB_CLR_RSHIFT
.381318	82 a1 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38131b					NOT_KB_CLR_RSHIFT
.38131b	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38131d	d0 03		bne $381322	                BNE NOT_KB_SET_CTRL
.38131f	82 a3 00	brl $3813c5	                BRL KB_SET_CTRL
.381322					NOT_KB_SET_CTRL
.381322	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381324	d0 03		bne $381329	                BNE NOT_KB_CLR_CTRL
.381326	82 a5 00	brl $3813ce	                BRL KB_CLR_CTRL
.381329					NOT_KB_CLR_CTRL
.381329	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38132b	d0 03		bne $381330	                BNE NOT_KB_SET_ALT
.38132d	82 a7 00	brl $3813d7	                BRL KB_SET_ALT
.381330					NOT_KB_SET_ALT
.381330	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381332	d0 03		bne $381337	                BNE NOT_KB_CLR_ALT
.381334	82 a9 00	brl $3813e0	                BRL KB_CLR_ALT
.381337	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381339	d0 03		bne $38133e	                BNE NOT_PREFIXED
.38133b	82 ab 00	brl $3813e9	                BRL KB_SET_PREFIX
.38133e	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381340	d0 03		bne $381345	                BNE NOT_KB_SET_NUM
.381342	82 b6 00	brl $3813fb	                BRL KB_TOG_NUMLOCK
.381345	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381347	d0 03		bne $38134c	                BNE NOT_KB_SET_SCR
.381349	82 a6 00	brl $3813f2	                BRL KB_TOG_SCRLOCK
.38134c	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.38134e	d0 03		bne $381353	                BNE NOT_KB_CAPSLOCK
.381350	82 bc 00	brl $38140f	                BRL KB_TOG_CAPLOCK
.381353	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381355	d0 09		bne $381360	                BNE KB_UNPRESSED
.381357	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381359	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38135d	82 b5 00	brl $381415	                BRL KB_CHECK_B_DONE
.381360	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381362	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381364	d0 03		bne $381369	                BNE KB_NORM_SC
.381366	82 ac 00	brl $381415	                BRL KB_CHECK_B_DONE
.381369	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38136b	aa		tax		                TAX
.38136c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38136e	29 10		and #$10	                AND #$10
.381370	c9 10		cmp #$10	                CMP #$10
.381372	f0 17		beq $38138b	                BEQ SHIFT_KEY_ON
.381374	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381376	29 20		and #$20	                AND #$20
.381378	c9 20		cmp #$20	                CMP #$20
.38137a	f0 16		beq $381392	                BEQ CTRL_KEY_ON
.38137c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38137e	29 40		and #$40	                AND #$40
.381380	c9 40		cmp #$40	                CMP #$40
.381382	f0 15		beq $381399	                BEQ ALT_KEY_ON
.381384	bf 00 72 39	lda $397200,x	                LDA @lScanCode_Press_Set1, x
.381388	82 15 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.38138b	bf 80 72 39	lda $397280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.38138f	82 0e 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381392	bf 00 73 39	lda $397300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381396	82 07 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381399	bf 80 73 39	lda $397380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38139d	82 00 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.3813a0	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813a2	d0 03		bne $3813a7	                BNE savechar
.3813a4	4c 25 14	jmp $381425	                JMP programmerKey       ; Yes: trigger the programmer key
.3813a7	48		pha		savechar        PHA
.3813a8	c2 10		rep #$10	                REP #$10        ; set X long
.3813aa	20 31 14	jsr $381431	                JSR SAVEKEY
.3813ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3813af	68		pla		                PLA
.3813b0	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813b3	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813b5	09 10		ora #$10	                ORA #$10
.3813b7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b9	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813bc	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813be	29 ef		and #$ef	                AND #$EF
.3813c0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c2	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813c5	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813c7	09 20		ora #$20	                ORA #$20
.3813c9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813cb	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813ce	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813d0	29 df		and #$df	                AND #$DF
.3813d2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813d4	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813d7	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813d9	09 40		ora #$40	                ORA #$40
.3813db	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813dd	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e0	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813e2	29 bf		and #$bf	                AND #$BF
.3813e4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e6	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e9	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813eb	09 80		ora #$80	                ORA #$80
.3813ed	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813ef	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813f2	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813f4	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813f6	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813f8	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813fb	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813fd	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813ff	c9 60		cmp #$60	                CMP #$60
.381401	d0 03		bne $381406	                BNE KB_TOG_NUMLOC2
.381403	82 63 ff	brl $381369	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381406	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381408	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.38140a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38140c	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.38140f	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381411	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381413	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381415					KB_CHECK_B_DONE
.381415	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381419	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.38141b	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.38141d	d0 03		bne $381422	                BNE SET_LED
.38141f	4c df 12	jmp $3812df	                JMP IRQ_HANDLER_FETCH
.381422					SET_LED
.381422					KB_DONE
.381422	c2 30		rep #$30	                REP #$30        ; set A&X long
.381424	60		rts		                RTS
.381425					programmerKey
.381425	c2 30		rep #$30	                REP #$30        ; set A&X long
.381427	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381428	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381429	ab		plb		                PLB
.38142a	7a		ply		                PLY
.38142b	fa		plx		                PLX
.38142c	68		pla		                PLA
.38142d	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381431					SAVEKEY
.381431	e2 20		sep #$20	                SEP #$20        ; set A short
.381433	48		pha		                PHA                     ; Save the character
.381434	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381436	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381438	f0 0d		beq $381447	                BEQ no_caps             ; No... just use the character as-is
.38143a	68		pla		                PLA                     ; Get the character back
.38143b	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.38143d	90 09		bcc $381448	                BLT check_break         ; Yes: just use as-is
.38143f	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381441	b0 05		bcs $381448	                BGE check_break         ; Yes: just us as-is
.381443	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381445	80 01		bra $381448	                BRA check_break
.381447	68		pla		no_caps         PLA                     ; Restore the character
.381448	c9 00		cmp #$00	check_break     CMP #0
.38144a	f0 18		beq $381464	                BEQ done
.38144c	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.38144e	f0 15		beq $381465	                BEQ flag_break          ; Yes: flag a break
.381450	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381452	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381455	b0 0d		bcs $381464	                BCS done                ; Stop storing - An error should ensue here...
.381457	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38145b	e8		inx		                INX
.38145c	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.38145e	a9 00		lda #$00	                LDA #$00
.381460	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381464	60		rts		done            RTS
.381465					flag_break
.381465	e2 20		sep #$20	                SEP #$20        ; set A short
.381467	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381469	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38146b	60		rts		                RTS
.38146c					KBD_GETC
.38146c	da		phx		                PHX
.38146d	0b		phd		                PHD
.38146e	08		php		                PHP
.38146f	48		pha		                PHA             ; begin setdp macro
.381470	08		php		                PHP
.381471	c2 20		rep #$20	                REP #$20        ; set A long
.381473	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381476	5b		tcd		                TCD
.381477	28		plp		                PLP
.381478	68		pla		                PLA             ; end setdp macro
.381479	e2 20		sep #$20	                SEP #$20        ; set A short
.38147b	c2 10		rep #$10	                REP #$10        ; set X long
.38147d	58		cli		                CLI                     ; Make sure interrupts can happen
.38147e	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381482	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381484	c9 60		cmp #$60	                CMP #KB_CREDITS
.381486	d0 0a		bne $381492	                BNE check_buffer        ; No: check the key buffer
.381488	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.38148a	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38148e	22 53 16 39	jsl $391653	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381492	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381494	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381496	90 02		bcc $38149a	                BCC read_buff           ; Yes: a key is present, read it
.381498	80 e4		bra $38147e	                BRA get_wait            ; Otherwise, keep waiting
.38149a	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38149b	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38149d	e8		inx		                INX                     ; And move to the next key
.38149e	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814a0	f0 07		beq $3814a9	                BEQ reset_indexes       ; Yes: return to 0 position
.3814a2	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814a4	58		cli		                CLI
.3814a5	28		plp		done            PLP                     ; Restore status and interrupts
.3814a6	2b		pld		                PLD
.3814a7	fa		plx		                PLX
.3814a8	6b		rtl		                RTL
.3814a9	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814ab	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814ad	80 f6		bra $3814a5	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 10 12 39	jsl $391210	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 81 0f 39	jsl $390f81	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 56 0f 39	jsl $390f56	                JSL IINITFONTSET
.3904cd	22 ff 0a 39	jsl $390aff	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 f5 5a 39	jsl $395af5	                JSL UART_SELECT
.3904d8	22 61 5b 39	jsl $395b61	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 f5 5a 39	jsl $395af5	                JSL UART_SELECT
.3904e3	22 61 5b 39	jsl $395b61	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 dc 6c	ldx #$6cdc	                LDX #<>greet_msg
.39050d	22 82 07 39	jsl $390782	                JSL IPRINT       ; print the first line
.390511	22 4a 0b 39	jsl $390b4a	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 e1 15 39	jsl $3915e1	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 3a 44 39	jsl $39443a	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 3d 61 39	jsl $39613d	                JSL FDC_INIT
.390586	22 30 06 39	jsl $390630	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.39058a	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.39058c	f0 10		beq $39059e	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058e	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.390590	f0 1e		beq $3905b0	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390592	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390594	f0 54		beq $3905ea	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390596	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390598	f0 1d		beq $3905b7	                BEQ BOOTSDC           ; Yes: boot via the SDC
.39059a	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.39059c	f0 32		beq $3905d0	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059e	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905a2	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a4	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a6	f0 28		beq $3905d0	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a8	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905aa	f0 0b		beq $3905b7	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905ac	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905ae	f0 3a		beq $3905ea	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905b0	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b4	ea		nop		CREDIT_LOCK     NOP
.3905b5	80 fd		bra $3905b4	                BRA CREDIT_LOCK
.3905b7					BOOTSDC
.3905b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b9	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905bb	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bf	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT         ; Mount the SDC
.3905c3	90 06		bcc $3905cb	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c5	22 73 46 39	jsl $394673	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c9	80 e5		bra $3905b0	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905cb	a2 b9 70	ldx #$70b9	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ce	80 39		bra $390609	                BRA PR_BOOT_ERROR
.3905d0					BOOTIDE
.3905d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d2	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d4	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d8	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905dc	90 07		bcc $3905e5	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905de	22 73 46 39	jsl $394673	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905e2	82 cb ff	brl $3905b0	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e5	a2 d5 70	ldx #$70d5	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e8	80 1f		bra $390609	                BRA PR_BOOT_ERROR
.3905ea	a2 1e 71	ldx #$711e	BOOTFLOPPY      LDX #<>fdc_boot
.3905ed	22 82 07 39	jsl $390782	                JSL IPRINT
.3905f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f3	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f5	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f9	22 cb 66 39	jsl $3966cb	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905fd	90 07		bcc $390606	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905ff	22 73 46 39	jsl $394673	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390603	82 aa ff	brl $3905b0	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390606	a2 f8 70	ldx #$70f8	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390609	22 82 07 39	jsl $390782	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.39060d	a2 94 70	ldx #$7094	                LDX #<>boot_retry     ; Print the boot retry prompt
.390610	22 82 07 39	jsl $390782	                JSL IPRINT
.390614	22 25 07 39	jsl $390725	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390618	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39061a	d0 03		bne $39061f	                BNE chk_r_lc
.39061c	82 5f ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061f	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390621	d0 03		bne $390626	                BNE chk_b_lc
.390623	82 58 ff	brl $39057e	                BRL retry_boot
.390626	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390628	f0 86		beq $3905b0	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.39062a	c9 42		cmp #$42	                CMP #'B'
.39062c	f0 82		beq $3905b0	                BEQ BOOTBASIC
.39062e	80 e4		bra $390614	                BRA boot_wait_key     ; No: keep waiting
.390630					BOOT_MENU
.390630	8b		phb		                PHB
.390631	08		php		                PHP
.390632	e2 20		sep #$20	                SEP #$20        ; set A short
.390634	c2 10		rep #$10	                REP #$10        ; set X long
.390636	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390638	48		pha		                PHA
.390639	ab		plb		                PLB
.39063a	a2 73 06	ldx #$0673	                LDX #<>bootmenu
.39063d	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.390641	c2 10		rep #$10	                REP #$10        ; set X long
.390643	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of tenths of seconds we'll wait (approximately)
.390646	e2 20		sep #$20	                SEP #$20        ; set A short
.390648	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.39064b	22 e1 15 39	jsl $3915e1	                JSL ILOOP_MS            ; Wait 0.1 second (approximately)
.39064f	88		dey		                DEY                     ; Count down the tenths of seconds
.390650	f0 1c		beq $39066e	                BEQ timeout             ; If we've got to 0, we're done
.390652	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390656	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390658	f0 ee		beq $390648	                BEQ wait_key            ; No: keep waiting until timeout
.39065a	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.39065c	f0 12		beq $390670	                BEQ return              ; Yes: return it
.39065e	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.390660	f0 0e		beq $390670	                BEQ return              ; Yes: return it
.390662	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390664	f0 0a		beq $390670	                BEQ return              ; Yes: return it
.390666	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390668	f0 06		beq $390670	                BEQ return              ; Yes: return it
.39066a	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.39066c	d0 da		bne $390648	                BNE wait_key            ; No: keep waiting
.39066e	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.390670	28		plp		return          PLP
.390671	ab		plb		                PLB
.390672	6b		rtl		                RTL
>390673	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>39067b	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>39068b	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>39069b	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a8					IBREAK
.3906a8	48		pha		                PHA             ; begin setdp macro
.3906a9	08		php		                PHP
.3906aa	c2 20		rep #$20	                REP #$20        ; set A long
.3906ac	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906af	5b		tcd		                TCD
.3906b0	28		plp		                PLP
.3906b1	68		pla		                PLA             ; end setdp macro
.3906b2	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906b3	8f 48 02 00	sta $000248	                STA CPUY
.3906b7	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b8	8f 46 02 00	sta $000246	                STA CPUX
.3906bc	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906bd	8f 44 02 00	sta $000244	                STA CPUA
.3906c1	68		pla		                PLA
.3906c2	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c8	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c9	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906cd	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ce	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906d2	c2 20		rep #$20	                REP #$20        ; set A long
.3906d4	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d5	8f 40 02 00	sta $000240	                STA CPUPC
.3906d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906db	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906dc	8f 42 02 00	sta $000242	                STA CPUPBR
.3906e0	c2 20		rep #$20	                REP #$20        ; set A long
.3906e2	3b		tsc		                TSA             ; Get the stack
.3906e3	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e7	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906ea	1b		tcs		                TAS
.3906eb	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906ef					IREADY
.3906ef	48		pha		                PHA             ; begin setdbr macro
.3906f0	08		php		                PHP
.3906f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f3	a9 39		lda #$39	                LDA #`ready_msg
.3906f5	48		pha		                PHA
.3906f6	ab		plb		                PLB
.3906f7	28		plp		                PLP
.3906f8	68		pla		                PLA             ; end setdbr macro
.3906f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906fb	a2 35 71	ldx #$7135	                LDX #<>ready_msg
.3906fe	22 82 07 39	jsl $390782	                JSL IPRINT
.390702					IREADYWAIT
.390702	22 1c 07 39	jsl $39071c	                JSL IGETCHE
.390706	80 fa		bra $390702	                BRA IREADYWAIT
.390708	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390709	db		stp		IRETURN         STP
.39070a	08		php		ISETIN          PHP
.39070b	e2 20		sep #$20	                SEP #$20        ; set A short
.39070d	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390711	28		plp		                PLP
.390712	6b		rtl		                RTL
.390713	08		php		ISETOUT         PHP
.390714	e2 20		sep #$20	                SEP #$20        ; set A short
.390716	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39071a	28		plp		                PLP
.39071b	6b		rtl		                RTL
.39071c	22 25 07 39	jsl $390725	IGETCHE         JSL IGETCHW
.390720	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.390724	6b		rtl		                RTL
.390725					IGETCHW
.390725	08		php		                PHP
.390726	e2 20		sep #$20	                SEP #$20        ; set A short
.390728	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39072c	f0 17		beq $390745	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072e	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390730	f0 09		beq $39073b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390734	f0 05		beq $39073b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390736	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390738	28		plp		                PLP
.390739	38		sec		                SEC                 ; And return carry set
.39073a	6b		rtl		                RTL
.39073b	22 f5 5a 39	jsl $395af5	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073f	22 a9 5b 39	jsl $395ba9	                JSL UART_GETC       ; Get the charater from the COM port
.390743	80 04		bra $390749	                BRA done
.390745	22 6c 14 38	jsl $38146c	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390749	28		plp		done            PLP
.39074a	18		clc		                CLC                 ; Return carry clear for valid data
.39074b	6b		rtl		                RTL
.39074c					IGETCH
.39074c	da		phx		                PHX
.39074d	5a		phy		                PHY
.39074e	8b		phb		                PHB
.39074f	0b		phd		                PHD
.390750	08		php		                PHP
.390751	48		pha		                PHA             ; begin setdbr macro
.390752	08		php		                PHP
.390753	e2 20		sep #$20	                SEP #$20        ; set A short
.390755	a9 00		lda #$00	                LDA #0
.390757	48		pha		                PHA
.390758	ab		plb		                PLB
.390759	28		plp		                PLP
.39075a	68		pla		                PLA             ; end setdbr macro
.39075b	e2 20		sep #$20	                SEP #$20        ; set A short
.39075d	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.390760	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.390762	f0 03		beq $390767	                BEQ getch_console       ; Yes: dispatch on the console
.390764	82 10 00	brl $390777	                BRL ret_nothing         ; Unhandled device: return 0
.390767					getch_console
.390767	c2 20		rep #$20	                REP #$20        ; set A long
.390769	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.39076c	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076f	b0 06		bcs $390777	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.390771	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390775	80 05		bra $39077c	                BRA done                ; And return it
.390777					ret_nothing
.390777	c2 20		rep #$20	                REP #$20        ; set A long
.390779	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.39077c	28		plp		done            PLP
.39077d	2b		pld		                PLD
.39077e	ab		plb		                PLB
.39077f	7a		ply		                PLY
.390780	fa		plx		                PLX
.390781	6b		rtl		                RTL
.390782	22 8b 07 39	jsl $39078b	IPRINT          JSL IPUTS
.390786	22 d4 08 39	jsl $3908d4	                JSL IPRINTCR
.39078a	6b		rtl		                RTL
.39078b	48		pha		IPUTS           PHA
.39078c	08		php		                PHP
.39078d	e2 20		sep #$20	                SEP #$20        ; set A short
.39078f	c2 10		rep #$10	                REP #$10        ; set X long
.390791	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390794	f0 08		beq $39079e	                BEQ iputs_done
.390796	22 a2 07 39	jsl $3907a2	iputs2          JSL IPUTC
.39079a	e8		inx		iputs3          INX
.39079b	4c 91 07	jmp $390791	                JMP iputs1
.39079e	e8		inx		iputs_done      INX
.39079f	28		plp		                PLP
.3907a0	68		pla		                PLA
.3907a1	6b		rtl		                RTL
.3907a2					IPUTC
.3907a2	da		phx		                PHX
.3907a3	5a		phy		                PHY
.3907a4	0b		phd		                PHD
.3907a5	8b		phb		                PHB
.3907a6	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a7	48		pha		                PHA             ; begin setdp macro
.3907a8	08		php		                PHP
.3907a9	c2 20		rep #$20	                REP #$20        ; set A long
.3907ab	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ae	5b		tcd		                TCD
.3907af	28		plp		                PLP
.3907b0	68		pla		                PLA             ; end setdp macro
.3907b1	48		pha		                PHA             ; begin setdbr macro
.3907b2	08		php		                PHP
.3907b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b5	a9 00		lda #$00	                LDA #0
.3907b7	48		pha		                PHA
.3907b8	ab		plb		                PLB
.3907b9	28		plp		                PLP
.3907ba	68		pla		                PLA             ; end setdbr macro
.3907bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3907bd	c2 10		rep #$10	                REP #$10        ; set X long
.3907bf	48		pha		                PHA                 ; Save the character to print
.3907c0	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c4	f0 16		beq $3907dc	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c6	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c8	f0 07		beq $3907d1	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907cc	f0 03		beq $3907d1	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ce	68		pla		                PLA                 ; Otherwise, just exit
.3907cf	80 4f		bra $390820	                BRA done
.3907d1	22 f5 5a 39	jsl $395af5	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d5	68		pla		                PLA                 ; Recover the character to send
.3907d6	22 ca 5b 39	jsl $395bca	                JSL UART_PUTC       ; Send the character
.3907da	80 44		bra $390820	                BRA done
.3907dc	68		pla		putc_screen     PLA                 ; Get the character to print
.3907dd	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907df	f0 61		beq $390842	                BEQ go_down
.3907e1	c9 20		cmp #$20	                CMP #$20
.3907e3	90 19		bcc $3907fe	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e5	c9 7f		cmp #$7f	                CMP #$7F
.3907e7	f0 3d		beq $390826	                BEQ do_del
.3907e9	b0 02		bcs $3907ed	                BCS check_A0        ; [$20..$7E]: print it
.3907eb	80 29		bra $390816	                BRA printc
.3907ed	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907ef	90 02		bcc $3907f3	                BCC check_ctrl1
.3907f1	80 23		bra $390816	                BRA printc          ; [$A0..$FF]: print it
.3907f3	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f5	f0 4b		beq $390842	                BEQ go_down         ; ... move the cursor down one row
.3907f7	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f9	f0 59		beq $390854	                BEQ go_left         ; ... move the cursor left one column
.3907fb	4c 20 08	jmp $390820	                JMP done
.3907fe	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.390800	f0 58		beq $39085a	                BEQ do_TAB          ; ... move to the next TAB stop
.390802	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390804	f0 2c		beq $390832	                BEQ backspace       ; ... move the cursor back and replace with a space
.390806	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390808	f0 32		beq $39083c	                BEQ do_cr           ; ... move cursor down and to the first column
.39080a	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.39080c	f0 3a		beq $390848	                BEQ go_up           ; ... move the cursor up one row
.39080e	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.390810	f0 3c		beq $39084e	                BEQ go_right        ; ... move the cursor right one column
.390812	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390814	f0 16		beq $39082c	                BEQ do_ins          ; ... insert a space
.390816	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390818	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081a	87 1f		sta [$1f]	                STA [COLORPOS]
.39081c	22 34 09 39	jsl $390934	                JSL ICSRRIGHT       ; And advance the cursor
.390820	28		plp		done            PLP
.390821	ab		plb		                PLB
.390822	2b		pld		                PLD
.390823	7a		ply		                PLY
.390824	fa		plx		                PLX
.390825	6b		rtl		                RTL
.390826	22 81 08 39	jsl $390881	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082a	80 f4		bra $390820	                BRA done
.39082c	22 a5 08 39	jsl $3908a5	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390830	80 ee		bra $390820	                BRA done
.390832	22 67 09 39	jsl $390967	backspace       JSL ICSRLEFT
.390836	22 81 08 39	jsl $390881	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083a	80 e4		bra $390820	                BRA done
.39083c	22 d4 08 39	jsl $3908d4	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390840	80 de		bra $390820	                BRA done
.390842	22 b3 09 39	jsl $3909b3	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390846	80 d8		bra $390820	                BRA done
.390848	22 8d 09 39	jsl $39098d	go_up           JSL ICSRUP          ; Move the cursor up one line
.39084c	80 d2		bra $390820	                BRA done
.39084e	22 34 09 39	jsl $390934	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390852	80 cc		bra $390820	                BRA done
.390854	22 67 09 39	jsl $390967	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390858	80 c6		bra $390820	                BRA done
.39085a					do_TAB
.39085a	c2 20		rep #$20	                REP #$20        ; set A long
.39085c	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39085e	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390861	18		clc		                CLC
.390862	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390865	aa		tax		                TAX
.390866	a4 1c		ldy $1c		                LDY CURSORY
.390868	e2 20		sep #$20	                SEP #$20        ; set A short
.39086a	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39086c	90 04		bcc $390872	                BCC check_row       ; Yes: check the row
.39086e	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390871	c8		iny		                INY                 ; ... and the next row
.390872	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390874	90 05		bcc $39087b	                BCC do_locate       ; Yes: reposition the cursor
.390876	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP       ; No: scroll the screen
.39087a	88		dey		                DEY                 ; And set the row to the last one
.39087b	22 d8 09 39	jsl $3909d8	do_locate       JSL ILOCATE         ; Set the cursor position
.39087f	80 9f		bra $390820	                BRA done
.390881	da		phx		SCRSHIFTLL      PHX
.390882	5a		phy		                PHY
.390883	48		pha		                PHA
.390884	0b		phd		                PHD
.390885	08		php		                PHP
.390886	48		pha		                PHA             ; begin setdp macro
.390887	08		php		                PHP
.390888	c2 20		rep #$20	                REP #$20        ; set A long
.39088a	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39088d	5b		tcd		                TCD
.39088e	28		plp		                PLP
.39088f	68		pla		                PLA             ; end setdp macro
.390890	c2 30		rep #$30	                REP #$30        ; set A&X long
.390892	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390894	a8		tay		                TAY                 ; Set it as the destination
.390895	aa		tax		                TAX
.390896	e8		inx		                INX                 ; And set the next cell as the source
.390897	38		sec		                SEC                 ; Calculate the length of the block to move
.390898	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39089a	e5 1a		sbc $1a		                SBC CURSORX
.39089c	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39089f	28		plp		                PLP
.3908a0	2b		pld		                PLD
.3908a1	68		pla		                PLA
.3908a2	7a		ply		                PLY
.3908a3	fa		plx		                PLX
.3908a4	6b		rtl		                RTL
.3908a5	da		phx		SCRSHIFTLR      PHX
.3908a6	48		pha		                PHA
.3908a7	0b		phd		                PHD
.3908a8	08		php		                PHP
.3908a9	48		pha		                PHA             ; begin setdp macro
.3908aa	08		php		                PHP
.3908ab	c2 20		rep #$20	                REP #$20        ; set A long
.3908ad	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908b0	5b		tcd		                TCD
.3908b1	28		plp		                PLP
.3908b2	68		pla		                PLA             ; end setdp macro
.3908b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b5	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908b7	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3908ba	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3908bd	a8		tay		                TAY                 ; And set that as the destination address
.3908be	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3908bf	aa		tax		                TAX                 ; And make it the source
.3908c0	38		sec		                SEC                 ; Calculate the length of the block to move
.3908c1	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908c3	e5 1a		sbc $1a		                SBC CURSORX
.3908c5	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3908c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3908ca	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3908cc	87 17		sta [$17]	                STA [CURSORPOS]
.3908ce	28		plp		                PLP
.3908cf	2b		pld		                PLD
.3908d0	68		pla		                PLA
.3908d1	fa		plx		                PLX
.3908d2	6b		rtl		                RTL
.3908d3					IPUTB
.3908d3	6b		rtl		                RTL
.3908d4					IPRINTCR
.3908d4	da		phx		                PHX
.3908d5	5a		phy		                PHY
.3908d6	8b		phb		                PHB
.3908d7	0b		phd		                PHD
.3908d8	08		php		                PHP
.3908d9	48		pha		                PHA             ; begin setdbr macro
.3908da	08		php		                PHP
.3908db	e2 20		sep #$20	                SEP #$20        ; set A short
.3908dd	a9 00		lda #$00	                LDA #0
.3908df	48		pha		                PHA
.3908e0	ab		plb		                PLB
.3908e1	28		plp		                PLP
.3908e2	68		pla		                PLA             ; end setdbr macro
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3908ef	c2 10		rep #$10	                REP #$10        ; set X long
.3908f1	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3908f5	f0 1c		beq $390913	                BEQ scr_printcr
.3908f7	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3908f9	f0 06		beq $390901	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3908fb	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3908fd	f0 02		beq $390901	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3908ff	80 1c		bra $39091d	                BRA done
.390901	22 f5 5a 39	jsl $395af5	uart_printcr    JSL UART_SELECT
.390905	a9 0d		lda #$0d	                LDA #CHAR_CR
.390907	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.39090b	a9 0a		lda #$0a	                LDA #CHAR_LF
.39090d	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.390911	80 0a		bra $39091d	                BRA done
.390913	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390916	a4 1c		ldy $1c		                LDY CURSORY
.390918	c8		iny		                INY
.390919	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.39091d	28		plp		done            PLP
.39091e	2b		pld		                PLD
.39091f	ab		plb		                PLB
.390920	7a		ply		                PLY
.390921	fa		plx		                PLX
.390922	6b		rtl		                RTL
.390923	da		phx		ICSRHOME        PHX
.390924	5a		phy		                PHY
.390925	08		php		                PHP
.390926	a2 00 00	ldx #$0000	                LDX #0
.390929	a0 00 00	ldy #$0000	                LDY #0
.39092c	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.390930	28		plp		                PLP
.390931	7a		ply		                PLY
.390932	fa		plx		                PLX
.390933	6b		rtl		                RTL
.390934	da		phx		ICSRRIGHT       PHX
.390935	5a		phy		                PHY
.390936	48		pha		                PHA
.390937	0b		phd		                PHD
.390938	08		php		                PHP
.390939	c2 20		rep #$20	                REP #$20        ; set A long
.39093b	c2 10		rep #$10	                REP #$10        ; set X long
.39093d	48		pha		                PHA             ; begin setdp macro
.39093e	08		php		                PHP
.39093f	c2 20		rep #$20	                REP #$20        ; set A long
.390941	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390944	5b		tcd		                TCD
.390945	28		plp		                PLP
.390946	68		pla		                PLA             ; end setdp macro
.390947	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390949	e8		inx		                INX
.39094a	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39094c	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39094e	90 0d		bcc $39095d	                BCC icsrright_nowrap  ; No: just set the position
.390950	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390953	c8		iny		                INY                   ; And move to the next row
.390954	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390956	90 05		bcc $39095d	                BCC icsrright_nowrap  ; No: just set the position
.390958	88		dey		                DEY                   ; Yes: lock to the last row
.390959	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP         ; But scroll the screen up
.39095d					icsrright_nowrap
.39095d	22 d8 09 39	jsl $3909d8	                JSL ILOCATE           ; Set the cursor position
.390961	28		plp		                PLP
.390962	2b		pld		                PLD
.390963	68		pla		                PLA
.390964	7a		ply		                PLY
.390965	fa		plx		                PLX
.390966	6b		rtl		                RTL
.390967					ICSRLEFT
.390967	da		phx		                PHX
.390968	5a		phy		                PHY
.390969	48		pha		                PHA
.39096a	0b		phd		                PHD
.39096b	08		php		                PHP
.39096c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39096e	48		pha		                PHA             ; begin setdp macro
.39096f	08		php		                PHP
.390970	c2 20		rep #$20	                REP #$20        ; set A long
.390972	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390975	5b		tcd		                TCD
.390976	28		plp		                PLP
.390977	68		pla		                PLA             ; end setdp macro
.390978	a5 1a		lda $1a		                LDA CURSORX
.39097a	f0 0b		beq $390987	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39097c	a6 1a		ldx $1a		                LDX CURSORX
.39097e	ca		dex		                DEX
.39097f	86 1a		stx $1a		                STX CURSORX
.390981	a4 1c		ldy $1c		                LDY CURSORY
.390983	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.390987					icsrleft_done_already_zero
.390987	28		plp		                PLP
.390988	2b		pld		                PLD
.390989	68		pla		                PLA
.39098a	7a		ply		                PLY
.39098b	fa		plx		                PLX
.39098c	6b		rtl		                RTL
.39098d					ICSRUP
.39098d	da		phx		                PHX
.39098e	5a		phy		                PHY
.39098f	48		pha		                PHA
.390990	0b		phd		                PHD
.390991	08		php		                PHP
.390992	c2 30		rep #$30	                REP #$30        ; set A&X long
.390994	48		pha		                PHA             ; begin setdp macro
.390995	08		php		                PHP
.390996	c2 20		rep #$20	                REP #$20        ; set A long
.390998	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39099b	5b		tcd		                TCD
.39099c	28		plp		                PLP
.39099d	68		pla		                PLA             ; end setdp macro
.39099e	a5 1c		lda $1c		                LDA CURSORY
.3909a0	f0 0b		beq $3909ad	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909a2	a4 1c		ldy $1c		                LDY CURSORY
.3909a4	88		dey		                DEY
.3909a5	84 1c		sty $1c		                STY CURSORY
.3909a7	a6 1a		ldx $1a		                LDX CURSORX
.3909a9	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.3909ad					isrup_done_already_zero
.3909ad	28		plp		                PLP
.3909ae	2b		pld		                PLD
.3909af	68		pla		                PLA
.3909b0	7a		ply		                PLY
.3909b1	fa		plx		                PLX
.3909b2	6b		rtl		                RTL
.3909b3	da		phx		ICSRDOWN        PHX
.3909b4	5a		phy		                PHY
.3909b5	0b		phd		                PHD
.3909b6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b8	48		pha		                PHA             ; begin setdp macro
.3909b9	08		php		                PHP
.3909ba	c2 20		rep #$20	                REP #$20        ; set A long
.3909bc	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909bf	5b		tcd		                TCD
.3909c0	28		plp		                PLP
.3909c1	68		pla		                PLA             ; end setdp macro
.3909c2	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3909c4	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3909c6	c8		iny		                INY
.3909c7	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3909c9	90 05		bcc $3909d0	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3909cb	88		dey		                DEY                         ; Yes: go back to the last row
.3909cc	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP               ; But scroll the screen up
.3909d0					icsrdown_noscroll
.3909d0	22 d8 09 39	jsl $3909d8	                JSL ILOCATE                 ; And set the cursor position
.3909d4	2b		pld		                PLD
.3909d5	7a		ply		                PLY
.3909d6	fa		plx		                PLX
.3909d7	6b		rtl		                RTL
.3909d8	48		pha		ILOCATE         PHA
.3909d9	0b		phd		                PHD
.3909da	08		php		                PHP
.3909db	48		pha		                PHA             ; begin setdp macro
.3909dc	08		php		                PHP
.3909dd	c2 20		rep #$20	                REP #$20        ; set A long
.3909df	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3909e2	5b		tcd		                TCD
.3909e3	28		plp		                PLP
.3909e4	68		pla		                PLA             ; end setdp macro
.3909e5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909e7					ilocate_scroll
.3909e7	c4 13		cpy $13		                CPY LINES_VISIBLE
.3909e9	90 07		bcc $3909f2	                BCC ilocate_scrolldone
.3909eb	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP
.3909ef	88		dey		                DEY
.3909f0	80 f5		bra $3909e7	                BRA ilocate_scroll
.3909f2					ilocate_scrolldone
.3909f2	86 1a		stx $1a		                STX CURSORX
.3909f4	84 1c		sty $1c		                STY CURSORY
.3909f6	a5 0c		lda $0c		                LDA SCREENBEGIN
.3909f8					ilocate_row
.3909f8	c0 00 00	cpy #$0000	                CPY #$0
.3909fb	f0 08		beq $390a05	                BEQ ilocate_right
.3909fd	18		clc		ilocate_down    CLC
.3909fe	65 11		adc $11		                ADC COLS_PER_LINE
.390a00	88		dey		                DEY
.390a01	f0 02		beq $390a05	                BEQ ilocate_right
.390a03	80 f8		bra $3909fd	                BRA ilocate_down
.390a05	18		clc		ilocate_right   CLC
.390a06	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a08	85 17		sta $17		                STA CURSORPOS
.390a0a	a4 1c		ldy $1c		                LDY CURSORY
.390a0c	98		tya		                TYA
.390a0d	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a11	8a		txa		                TXA
.390a12	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a16	c2 20		rep #$20	                REP #$20        ; set A long
.390a18	18		clc		                CLC
.390a19	a5 17		lda $17		                LDA CURSORPOS
.390a1b	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a1e	85 1f		sta $1f		                STA COLORPOS
.390a20	28		plp		ilocate_done    PLP
.390a21	2b		pld		                PLD
.390a22	68		pla		                PLA
.390a23	6b		rtl		                RTL
.390a24					ISCROLLUP
.390a24	48		pha		                PHA
.390a25	da		phx		                PHX
.390a26	5a		phy		                PHY
.390a27	8b		phb		                PHB
.390a28	0b		phd		                PHD
.390a29	08		php		                PHP
.390a2a	48		pha		                PHA             ; begin setdp macro
.390a2b	08		php		                PHP
.390a2c	c2 20		rep #$20	                REP #$20        ; set A long
.390a2e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a31	5b		tcd		                TCD
.390a32	28		plp		                PLP
.390a33	68		pla		                PLA             ; end setdp macro
.390a34	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a36	a5 11		lda $11		                LDA COLS_PER_LINE
.390a38	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a3c	a5 13		lda $13		                LDA LINES_VISIBLE
.390a3e	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a42	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a46	85 00		sta $00		                STA TMPPTR1
.390a48	18		clc		                CLC
.390a49	a9 00 a0	lda #$a000	                LDA #$A000
.390a4c	a8		tay		                TAY
.390a4d	65 11		adc $11		                ADC COLS_PER_LINE
.390a4f	aa		tax		                TAX
.390a50	a5 00		lda $00		                LDA TMPPTR1
.390a52	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a55	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a57	18		clc		                CLC
.390a58	a9 00 c0	lda #$c000	                LDA #$C000
.390a5b	a8		tay		                TAY
.390a5c	65 11		adc $11		                ADC COLS_PER_LINE
.390a5e	aa		tax		                TAX
.390a5f	a5 00		lda $00		                LDA TMPPTR1
.390a61	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a64	a5 00		lda $00		                LDA TMPPTR1
.390a66	48		pha		                PHA
.390a67	18		clc		                CLC
.390a68	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390a6b	85 00		sta $00		                STA TMPPTR1
.390a6d	a0 00 00	ldy #$0000	                LDY #0
.390a70	a9 20 00	lda #$0020	                LDA #' '
.390a73	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390a75	c8		iny		                INY
.390a76	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390a78	d0 f9		bne $390a73	                BNE clr_text
.390a7a	68		pla		                PLA
.390a7b	18		clc		                CLC
.390a7c	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390a7f	85 00		sta $00		                STA TMPPTR1
.390a81	a0 00 00	ldy #$0000	                LDY #0
.390a84	a5 1e		lda $1e		                LDA CURCOLOR
.390a86	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390a88	c8		iny		                INY
.390a89	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390a8b	d0 f9		bne $390a86	                BNE clr_color
.390a8d	28		plp		                PLP
.390a8e	2b		pld		                PLD
.390a8f	ab		plb		                PLB
.390a90	7a		ply		                PLY
.390a91	fa		plx		                PLX
.390a92	68		pla		                PLA
.390a93	6b		rtl		                RTL
.390a94	08		php		IPRINTH         PHP
.390a95	48		pha		                PHA
.390a96					iprinth1
.390a96	e2 20		sep #$20	                SEP #$20        ; set A short
.390a98	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390a9b	4a		lsr a		                LSR
.390a9c	4a		lsr a		                LSR
.390a9d	4a		lsr a		                LSR
.390a9e	4a		lsr a		                LSR
.390a9f	22 ee 0a 39	jsl $390aee	                JSL iprint_digit
.390aa3	bd 00 00	lda $0000,x	                LDA #0,b,x
.390aa6	22 ee 0a 39	jsl $390aee	                JSL iprint_digit
.390aaa	ca		dex		                DEX
.390aab	88		dey		                DEY
.390aac	d0 e8		bne $390a96	                BNE iprinth1
.390aae	68		pla		                PLA
.390aaf	28		plp		                PLP
.390ab0	6b		rtl		                RTL
.390ab1					IPRINTAH
.390ab1	48		pha		                PHA
.390ab2	08		php		                PHP
.390ab3	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390ab7	08		php		                PHP                   ; Get the processor status into A
.390ab8	e2 20		sep #$20	                SEP #$20        ; set A short
.390aba	c2 10		rep #$10	                REP #$10        ; set X long
.390abc	68		pla		                PLA
.390abd	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390abf	c9 20		cmp #$20	                CMP #%00100000
.390ac1	f0 14		beq $390ad7	                BEQ eight_bit
.390ac3	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390ac7	4a		lsr a		                LSR A
.390ac8	4a		lsr a		                LSR A
.390ac9	4a		lsr a		                LSR A
.390aca	4a		lsr a		                LSR A
.390acb	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390acf	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390ad3	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390ad7	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390adb	4a		lsr a		                LSR A
.390adc	4a		lsr a		                LSR A
.390add	4a		lsr a		                LSR A
.390ade	4a		lsr a		                LSR A
.390adf	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390ae3	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390ae7	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390aeb	28		plp		                PLP
.390aec	68		pla		                PLA
.390aed	6b		rtl		                RTL
.390aee	da		phx		iprint_digit    PHX
.390aef	c2 20		rep #$20	                REP #$20        ; set A long
.390af1	29 0f 00	and #$000f	                AND #$0F
.390af4	aa		tax		                TAX
.390af5	bf 49 71 39	lda $397149,x	                LDA hex_digits,X
.390af9	22 a2 07 39	jsl $3907a2	                JSL IPUTC       ; Print the digit
.390afd	fa		plx		                PLX
.390afe	6b		rtl		                RTL
.390aff	48		pha		ICLRSCREEN	    PHA
.390b00	da		phx		                PHX
.390b01	08		php		                PHP
.390b02	e2 20		sep #$20	                SEP #$20        ; set A short
.390b04	c2 10		rep #$10	                REP #$10        ; set X long
.390b06	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b09	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b0b	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b0f	e8		inx		                inx
.390b10	e0 00 20	cpx #$2000	                cpx #$2000
.390b13	d0 f6		bne $390b0b	                bne iclearloop0
.390b15	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b18	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b1c	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b20	e8		inx		                inx
.390b21	e0 00 20	cpx #$2000	                cpx #$2000
.390b24	d0 f6		bne $390b1c	                bne iclearloop1
.390b26	28		plp		                PLP
.390b27	fa		plx		                PLX
.390b28	68		pla		                PLA
.390b29	6b		rtl		                RTL
.390b2a					COPYBYTES42
.390b2a	08		php		                PHP
.390b2b	0b		phd		                PHD
.390b2c	48		pha		                PHA             ; begin setdp macro
.390b2d	08		php		                PHP
.390b2e	c2 20		rep #$20	                REP #$20        ; set A long
.390b30	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b33	5b		tcd		                TCD
.390b34	28		plp		                PLP
.390b35	68		pla		                PLA             ; end setdp macro
.390b36	e2 20		sep #$20	                SEP #$20        ; set A short
.390b38	c2 10		rep #$10	                REP #$10        ; set X long
.390b3a	a0 00 00	ldy #$0000	                LDY #0
.390b3d	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b3f	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b41	c8		iny		                INY
.390b42	c0 2a 00	cpy #$002a	                CPY #42
.390b45	d0 f6		bne $390b3d	                BNE copy_loop
.390b47	2b		pld		                PLD
.390b48	28		plp		                PLP
.390b49	60		rts		                RTS
.390b4a					ICOLORFLAG
.390b4a	48		pha		                PHA
.390b4b	da		phx		                PHX
.390b4c	5a		phy		                PHY
.390b4d	08		php		                PHP
.390b4e	8b		phb		                PHB
.390b4f	0b		phd		                PHD
.390b50	48		pha		                PHA             ; begin setdp macro
.390b51	08		php		                PHP
.390b52	c2 20		rep #$20	                REP #$20        ; set A long
.390b54	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b57	5b		tcd		                TCD
.390b58	28		plp		                PLP
.390b59	68		pla		                PLA             ; end setdp macro
.390b5a	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b5c	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390b5f	85 04		sta $04		                STA TMPPTR2
.390b61	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390b64	85 06		sta $06		                STA TMPPTR2+2
.390b66	a9 20 6e	lda #$6e20	                LDA #<>greet_clr_line1
.390b69	85 00		sta $00		                STA TMPPTR1
.390b6b	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390b6e	85 02		sta $02		                STA TMPPTR1+2
.390b70	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b73	18		clc		                CLC
.390b74	a5 04		lda $04		                LDA TMPPTR2
.390b76	65 11		adc $11		                ADC COLS_PER_LINE
.390b78	85 04		sta $04		                STA TMPPTR2
.390b7a	a9 4a 6e	lda #$6e4a	                LDA #<>greet_clr_line2
.390b7d	85 00		sta $00		                STA TMPPTR1
.390b7f	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390b82	85 02		sta $02		                STA TMPPTR1+2
.390b84	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b87	18		clc		                CLC
.390b88	a5 04		lda $04		                LDA TMPPTR2
.390b8a	65 11		adc $11		                ADC COLS_PER_LINE
.390b8c	85 04		sta $04		                STA TMPPTR2
.390b8e	a9 74 6e	lda #$6e74	                LDA #<>greet_clr_line3
.390b91	85 00		sta $00		                STA TMPPTR1
.390b93	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390b96	85 02		sta $02		                STA TMPPTR1+2
.390b98	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b9b	18		clc		                CLC
.390b9c	a5 04		lda $04		                LDA TMPPTR2
.390b9e	65 11		adc $11		                ADC COLS_PER_LINE
.390ba0	85 04		sta $04		                STA TMPPTR2
.390ba2	a9 9e 6e	lda #$6e9e	                LDA #<>greet_clr_line4
.390ba5	85 00		sta $00		                STA TMPPTR1
.390ba7	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390baa	85 02		sta $02		                STA TMPPTR1+2
.390bac	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390baf	18		clc		                CLC
.390bb0	a5 04		lda $04		                LDA TMPPTR2
.390bb2	65 11		adc $11		                ADC COLS_PER_LINE
.390bb4	85 04		sta $04		                STA TMPPTR2
.390bb6	a9 c8 6e	lda #$6ec8	                LDA #<>greet_clr_line5
.390bb9	85 00		sta $00		                STA TMPPTR1
.390bbb	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390bbe	85 02		sta $02		                STA TMPPTR1+2
.390bc0	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390bc3	2b		pld		                PLD
.390bc4	ab		plb		                PLB
.390bc5	28		plp		                PLP
.390bc6	7a		ply		                PLY
.390bc7	fa		plx		                PLX
.390bc8	68		pla		                PLA
.390bc9	6b		rtl		                RTL
.390bca	0b		phd		IINITCHLUT		  PHD
.390bcb	08		php		                PHP
.390bcc	48		pha		                PHA
.390bcd	da		phx		                PHX
.390bce	e2 20		sep #$20	                SEP #$20        ; set A short
.390bd0	e2 10		sep #$10	                SEP #$10        ; set X short
.390bd2	a2 00		ldx #$00					        LDX	#$00
.390bd4	bf f2 6e 39	lda $396ef2,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390bd8	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390bdc	e8		inx		                inx
.390bdd	e0 40		cpx #$40	                cpx #$40
.390bdf	d0 f3		bne $390bd4	                bne lutinitloop0
.390be1	a2 00		ldx #$00	                LDX	#$00
.390be3	bf 32 6f 39	lda $396f32,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390be7	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390beb	e8		inx		                INX
.390bec	e0 40		cpx #$40	                CPX #$40
.390bee	d0 f3		bne $390be3	                bne lutinitloop1
.390bf0	c2 20		rep #$20	                REP #$20        ; set A long
.390bf2	c2 10		rep #$10	                REP #$10        ; set X long
.390bf4	fa		plx		                PLX
.390bf5	68		pla		                PLA
.390bf6	28		plp		                PLP
.390bf7	2b		pld		                PLD
.390bf8	6b		rtl		                RTL
.390bf9					IINITGAMMATABLE
.390bf9	e2 20		sep #$20	                SEP #$20        ; set A short
.390bfb	c2 10		rep #$10	                REP #$10        ; set X long
.390bfd	a2 00 00	ldx #$0000	                ldx #$0000
.390c00	bf 00 76 39	lda $397600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c04	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c08	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c0c	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c10	e8		inx		                inx
.390c11	e0 00 01	cpx #$0100	                cpx #$0100
.390c14	d0 ea		bne $390c00	                bne initgammaloop
.390c16	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c18	6b		rtl		                RTL
.390c19	48		pha		IINITALLLUT     PHA
.390c1a	da		phx		                PHX
.390c1b	a2 00 00	ldx #$0000	                LDX #$0000
.390c1e	e2 20		sep #$20	                SEP #$20        ; set A short
.390c20	a9 00		lda #$00	                LDA #$00
.390c22	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c24					iinit_lut_loop
.390c24	86 02		stx $02		                STX $02
.390c26	a6 0a		ldx $0a		                LDX $0A
.390c28	bf 00 75 39	lda $397500,x	                LDA GAMMA_2_2_Tbl, x
.390c2c	49 55		eor #$55	                EOR  #$55
.390c2e	a6 02		ldx $02		                LDX $02
.390c30	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c34	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c38	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c3c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c40	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c44	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c48	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c4c	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c50	e8		inx		                inx
.390c51	86 02		stx $02		                STX $02
.390c53	a6 0a		ldx $0a		                LDX $0A
.390c55	bf 00 77 39	lda $397700,x	                LDA RANDOM_LUT_Tbl, x
.390c59	a6 02		ldx $02		                LDX $02
.390c5b	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c5f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c63	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c67	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c6b	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c6f	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c73	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c77	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c7b	e8		inx		                inx
.390c7c	86 02		stx $02		                STX $02
.390c7e	a6 0a		ldx $0a		                LDX $0A
.390c80	bf 00 76 39	lda $397600,x	                LDA GAMMA_1_8_Tbl, x
.390c84	49 aa		eor #$aa	                EOR  #$AA
.390c86	a6 02		ldx $02		                LDX $02
.390c88	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c8c	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c90	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c94	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c98	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c9c	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ca0	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ca4	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ca8	e8		inx		                inx
.390ca9	a9 ff		lda #$ff	                LDA #$FF
.390cab	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390caf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cb3	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cb7	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cbb	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cbf	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cc3	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cc7	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ccb	e6 0a		inc $0a		                inc $0A
.390ccd	e8		inx		                inx
.390cce	e0 00 04	cpx #$0400	                cpx #$0400
.390cd1	f0 03		beq $390cd6	                beq iinit_lut_exit
.390cd3	82 4e ff	brl $390c24	                brl iinit_lut_loop
.390cd6					iinit_lut_exit
.390cd6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cd8	fa		plx		                PLX
.390cd9	68		pla		                PLA
.390cda	6b		rtl		                RTL
.390cdb	48		pha		IINITVKYTXTMODE PHA
.390cdc	08		php		                PHP
.390cdd	e2 20		sep #$20	                SEP #$20        ; set A short
.390cdf	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Okay, this Enables the Text Mode (Video Display)
.390ce1	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390ce5	a9 00		lda #$00	                LDA #0                            ; 640x480 mode (80 columns max)
.390ce7	8f 01 00 af	sta $af0001	                STA @lMASTER_CTRL_REG_H
.390ceb	af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390cef	29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390cf1	f0 12		beq $390d05	                BEQ INITVICKYBORDER             ; Already 0, so set the border
.390cf3	a9 00		lda #$00	                LDA #0                          ; Set it to 640x480
.390cf5	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390cf9	a9 01		lda #$01	                LDA #Mstr_Ctrl_Video_Mode0      ; Temporarily go 800x600
.390cfb	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390cff	a9 00		lda #$00	                LDA #0                          ; Set it to 640x480 for real
.390d01	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d05					INITVICKYBORDER
.390d05	a9 20		lda #$20	                LDA #$20
.390d07	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d0b	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d0f	a9 00		lda #$00	                LDA #$00
.390d11	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d15	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d17	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d1b	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d1d	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d21	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d25	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d27	22 2e 0d 39	jsl $390d2e	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d2b	28		plp		                PLP
.390d2c	68		pla		                PLA
.390d2d	6b		rtl		                RTL
.390d2e					ISETSIZES
.390d2e	48		pha		                PHA
.390d2f	da		phx		                PHX
.390d30	5a		phy		                PHY
.390d31	8b		phb		                PHB
.390d32	0b		phd		                PHD
.390d33	08		php		                PHP
.390d34	48		pha		                PHA             ; begin setdp macro
.390d35	08		php		                PHP
.390d36	c2 20		rep #$20	                REP #$20        ; set A long
.390d38	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d3b	5b		tcd		                TCD
.390d3c	28		plp		                PLP
.390d3d	68		pla		                PLA             ; end setdp macro
.390d3e	48		pha		                PHA             ; begin setdbr macro
.390d3f	08		php		                PHP
.390d40	e2 20		sep #$20	                SEP #$20        ; set A short
.390d42	a9 00		lda #$00	                LDA #0
.390d44	48		pha		                PHA
.390d45	ab		plb		                PLB
.390d46	28		plp		                PLP
.390d47	68		pla		                PLA             ; end setdbr macro
.390d48	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d4a	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d4e	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d50	0a		asl a		                ASL A
.390d51	aa		tax		                TAX                         ; Index to the col/line count in X
.390d52	c2 20		rep #$20	                REP #$20        ; set A long
.390d54	bf d1 0d 39	lda $390dd1,x	                LDA cols_by_res,X           ; Get the number of columns
.390d58	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390d5a	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390d5c	bf d9 0d 39	lda $390dd9,x	                LDA lines_by_res,X          ; Get the number of lines
.390d60	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390d62	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390d64	e2 20		sep #$20	                SEP #$20        ; set A short
.390d66	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390d6a	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390d6c	f0 5c		beq $390dca	                BEQ done                    ; No border... the sizes are correct now
.390d6e	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390d72	29 3f		and #$3f	                AND #$3F
.390d74	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390d76	d0 04		bne $390d7c	                BNE frac_width
.390d78	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390d79	4a		lsr a		                LSR A
.390d7a	80 03		bra $390d7f	                BRA store_width
.390d7c	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390d7d	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390d7e	1a		inc a		                INC A
.390d7f	85 00		sta $00		store_width     STA TMPPTR1
.390d81	64 01		stz $01		                STZ TMPPTR1+1
.390d83	e2 20		sep #$20	                SEP #$20        ; set A short
.390d85	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390d89	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390d8b	f0 04		beq $390d91	                BEQ adjust_width            ; No... just adjust the width of the screen
.390d8d	c2 20		rep #$20	                REP #$20        ; set A long
.390d8f	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390d91					adjust_width
.390d91	c2 20		rep #$20	                REP #$20        ; set A long
.390d93	38		sec		                SEC
.390d94	a5 11		lda $11		                LDA COLS_PER_LINE
.390d96	e5 00		sbc $00		                SBC TMPPTR1
.390d98	85 0f		sta $0f		                STA COLS_VISIBLE
.390d9a	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390d9e	29 3f 00	and #$003f	                AND #$3F
.390da1	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390da4	d0 04		bne $390daa	                BNE frac_height
.390da6	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390da7	4a		lsr a		                LSR A
.390da8	80 03		bra $390dad	                BRA store_height
.390daa	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dab	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dac	1a		inc a		                INC A
.390dad	85 00		sta $00		store_height    STA TMPPTR1
.390daf	64 01		stz $01		                STZ TMPPTR1+1
.390db1	e2 20		sep #$20	                SEP #$20        ; set A short
.390db3	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390db7	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390db9	f0 04		beq $390dbf	                BEQ adjust_height           ; No... just adjust the height of the screen
.390dbb	c2 20		rep #$20	                REP #$20        ; set A long
.390dbd	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390dbf					adjust_height
.390dbf	c2 20		rep #$20	                REP #$20        ; set A long
.390dc1	38		sec		                SEC
.390dc2	a5 15		lda $15		                LDA LINES_MAX
.390dc4	e5 00		sbc $00		                SBC TMPPTR1
.390dc6	85 13		sta $13		                STA LINES_VISIBLE
.390dc8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390dca	28		plp		done            PLP
.390dcb	2b		pld		                PLD
.390dcc	ab		plb		                PLB
.390dcd	7a		ply		                PLY
.390dce	fa		plx		                PLX
.390dcf	68		pla		                PLA
.390dd0	6b		rtl		                RTL
>390dd1	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390dd9	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390de1					IINITVKYGRPMODE
.390de1	48		pha		                PHA
.390de2	e2 20		sep #$20	                SEP #$20        ; set A short
.390de4	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390de6	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390dea	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390dec	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390df0	a9 c0		lda #$c0	                LDA #$C0
.390df2	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390df6	a9 00		lda #$00	                LDA #$00
.390df8	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390dfc	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390dfe	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e02	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e04	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e08	a9 c0		lda #$c0	                LDA #$C0
.390e0a	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e0e	a9 00		lda #$00	                LDA #$00
.390e10	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e14	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e16	68		pla		                PLA
.390e17	6b		rtl		                RTL
.390e18					IINITTILEMODE
.390e18	6b		rtl		                RTL
.390e19	48		pha		IINITSPRITE     PHA
.390e1a	e2 20		sep #$20	                SEP #$20        ; set A short
.390e1c	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e1e	8f 00 08 af	sta $af0800	                STA SP00_CONTROL_REG
.390e22	8f 08 08 af	sta $af0808	                STA SP01_CONTROL_REG
.390e26	8f 10 08 af	sta $af0810	                STA SP02_CONTROL_REG
.390e2a	8f 18 08 af	sta $af0818	                STA SP03_CONTROL_REG
.390e2e	8f 20 08 af	sta $af0820	                STA SP04_CONTROL_REG
.390e32	8f 28 08 af	sta $af0828	                STA SP05_CONTROL_REG
.390e36	8f 30 08 af	sta $af0830	                STA SP06_CONTROL_REG
.390e3a	8f 38 08 af	sta $af0838	                STA SP07_CONTROL_REG
.390e3e	8f 40 08 af	sta $af0840	                STA SP08_CONTROL_REG
.390e42	8f 48 08 af	sta $af0848	                STA SP09_CONTROL_REG
.390e46	8f 50 08 af	sta $af0850	                STA SP10_CONTROL_REG
.390e4a	8f 58 08 af	sta $af0858	                STA SP11_CONTROL_REG
.390e4e	8f 60 08 af	sta $af0860	                STA SP12_CONTROL_REG
.390e52	8f 68 08 af	sta $af0868	                STA SP13_CONTROL_REG
.390e56	8f 70 08 af	sta $af0870	                STA SP14_CONTROL_REG
.390e5a	8f 78 08 af	sta $af0878	                STA SP15_CONTROL_REG
.390e5e	8f 80 08 af	sta $af0880	                STA SP16_CONTROL_REG
.390e62	a9 09		lda #$09	                LDA #$09
.390e64	8f 03 08 af	sta $af0803	                STA SP00_ADDY_PTR_H
.390e68	8f 0b 08 af	sta $af080b	                STA SP01_ADDY_PTR_H
.390e6c	8f 13 08 af	sta $af0813	                STA SP02_ADDY_PTR_H
.390e70	8f 1b 08 af	sta $af081b	                STA SP03_ADDY_PTR_H
.390e74	8f 23 08 af	sta $af0823	                STA SP04_ADDY_PTR_H
.390e78	8f 2b 08 af	sta $af082b	                STA SP05_ADDY_PTR_H
.390e7c	8f 33 08 af	sta $af0833	                STA SP06_ADDY_PTR_H
.390e80	8f 3b 08 af	sta $af083b	                STA SP07_ADDY_PTR_H
.390e84	8f 43 08 af	sta $af0843	                STA SP08_ADDY_PTR_H
.390e88	8f 4b 08 af	sta $af084b	                STA SP09_ADDY_PTR_H
.390e8c	8f 53 08 af	sta $af0853	                STA SP10_ADDY_PTR_H
.390e90	8f 5b 08 af	sta $af085b	                STA SP11_ADDY_PTR_H
.390e94	8f 63 08 af	sta $af0863	                STA SP12_ADDY_PTR_H
.390e98	8f 6b 08 af	sta $af086b	                STA SP13_ADDY_PTR_H
.390e9c	8f 73 08 af	sta $af0873	                STA SP14_ADDY_PTR_H
.390ea0	8f 7b 08 af	sta $af087b	                STA SP15_ADDY_PTR_H
.390ea4	8f 83 08 af	sta $af0883	                STA SP16_ADDY_PTR_H
.390ea8	a9 00		lda #$00	                LDA #$00
.390eaa	8f 02 08 af	sta $af0802	                STA SP00_ADDY_PTR_M
.390eae	a9 04		lda #$04	                LDA #$04
.390eb0	8f 0a 08 af	sta $af080a	                STA SP01_ADDY_PTR_M
.390eb4	a9 08		lda #$08	                LDA #$08
.390eb6	8f 12 08 af	sta $af0812	                STA SP02_ADDY_PTR_M
.390eba	a9 0c		lda #$0c	                LDA #$0C
.390ebc	8f 1a 08 af	sta $af081a	                STA SP03_ADDY_PTR_M
.390ec0	a9 10		lda #$10	                LDA #$10
.390ec2	8f 22 08 af	sta $af0822	                STA SP04_ADDY_PTR_M
.390ec6	a9 14		lda #$14	                LDA #$14
.390ec8	8f 2a 08 af	sta $af082a	                STA SP05_ADDY_PTR_M
.390ecc	a9 18		lda #$18	                LDA #$18
.390ece	8f 32 08 af	sta $af0832	                STA SP06_ADDY_PTR_M
.390ed2	a9 1c		lda #$1c	                LDA #$1C
.390ed4	8f 3a 08 af	sta $af083a	                STA SP07_ADDY_PTR_M
.390ed8	a9 20		lda #$20	                LDA #$20
.390eda	8f 42 08 af	sta $af0842	                STA SP08_ADDY_PTR_M
.390ede	a9 24		lda #$24	                LDA #$24
.390ee0	8f 4a 08 af	sta $af084a	                STA SP09_ADDY_PTR_M
.390ee4	a9 28		lda #$28	                LDA #$28
.390ee6	8f 52 08 af	sta $af0852	                STA SP10_ADDY_PTR_M
.390eea	a9 2c		lda #$2c	                LDA #$2C
.390eec	8f 5a 08 af	sta $af085a	                STA SP11_ADDY_PTR_M
.390ef0	a9 30		lda #$30	                LDA #$30
.390ef2	8f 62 08 af	sta $af0862	                STA SP12_ADDY_PTR_M
.390ef6	a9 34		lda #$34	                LDA #$34
.390ef8	8f 6a 08 af	sta $af086a	                STA SP13_ADDY_PTR_M
.390efc	a9 38		lda #$38	                LDA #$38
.390efe	8f 72 08 af	sta $af0872	                STA SP14_ADDY_PTR_M
.390f02	a9 3c		lda #$3c	                LDA #$3C
.390f04	8f 7a 08 af	sta $af087a	                STA SP15_ADDY_PTR_M
.390f08	a9 40		lda #$40	                LDA #$40
.390f0a	8f 82 08 af	sta $af0882	                STA SP16_ADDY_PTR_M
.390f0e	a9 00		lda #$00	                LDA #$00
.390f10	8f 01 08 af	sta $af0801	                STA SP00_ADDY_PTR_L
.390f14	8f 09 08 af	sta $af0809	                STA SP01_ADDY_PTR_L
.390f18	8f 11 08 af	sta $af0811	                STA SP02_ADDY_PTR_L
.390f1c	8f 19 08 af	sta $af0819	                STA SP03_ADDY_PTR_L
.390f20	8f 21 08 af	sta $af0821	                STA SP04_ADDY_PTR_L
.390f24	8f 29 08 af	sta $af0829	                STA SP05_ADDY_PTR_L
.390f28	8f 31 08 af	sta $af0831	                STA SP06_ADDY_PTR_L
.390f2c	8f 39 08 af	sta $af0839	                STA SP07_ADDY_PTR_L
.390f30	8f 41 08 af	sta $af0841	                STA SP08_ADDY_PTR_L
.390f34	8f 49 08 af	sta $af0849	                STA SP09_ADDY_PTR_L
.390f38	8f 51 08 af	sta $af0851	                STA SP10_ADDY_PTR_L
.390f3c	8f 59 08 af	sta $af0859	                STA SP11_ADDY_PTR_L
.390f40	8f 61 08 af	sta $af0861	                STA SP12_ADDY_PTR_L
.390f44	8f 69 08 af	sta $af0869	                STA SP13_ADDY_PTR_L
.390f48	8f 71 08 af	sta $af0871	                STA SP14_ADDY_PTR_L
.390f4c	8f 79 08 af	sta $af0879	                STA SP15_ADDY_PTR_L
.390f50	8f 81 08 af	sta $af0881	                STA SP16_ADDY_PTR_L
.390f54	68		pla		                PLA
.390f55	6b		rtl		                RTL
.390f56					IINITFONTSET
.390f56	e2 20		sep #$20	                SEP #$20        ; set A short
.390f58	c2 10		rep #$10	                REP #$10        ; set X long
.390f5a	a2 00 00	ldx #$0000	                LDX #$0000
.390f5d					initFontsetbranch0
.390f5d	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390f61	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390f65	e8		inx		                INX
.390f66	e0 00 08	cpx #$0800	                CPX #$0800
.390f69	d0 f2		bne $390f5d	                BNE initFontsetbranch0
.390f6b	ea		nop		                NOP
.390f6c	a2 00 00	ldx #$0000	                LDX #$0000
.390f6f					initFontsetbranch1
.390f6f	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390f73	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390f77	e8		inx		                INX
.390f78	e0 00 08	cpx #$0800	                CPX #$0800
.390f7b	d0 f2		bne $390f6f	                BNE initFontsetbranch1
.390f7d	ea		nop		                NOP
.390f7e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f80	6b		rtl		                RTL
.390f81					INITMOUSEPOINTER
.390f81	e2 20		sep #$20	                SEP #$20        ; set A short
.390f83	c2 10		rep #$10	                REP #$10        ; set X long
.390f85	a2 00 00	ldx #$0000	                LDX #$0000
.390f88					FILL_MOUSE_MARKER
.390f88	bf 00 78 39	lda $397800,x	                LDA @lMOUSE_POINTER_PTR,X
.390f8c	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390f90	e8		inx		                INX
.390f91	e0 00 01	cpx #$0100	                CPX #$0100
.390f94	d0 f2		bne $390f88	                BNE FILL_MOUSE_MARKER
.390f96	ea		nop		                nop
.390f97	a9 01		lda #$01	                LDA #$01
.390f99	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390f9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f9f	6b		rtl		                RTL
.390fa0	48		pha		IINITCURSOR     PHA
.390fa1	e2 20		sep #$20	                SEP #$20        ; set A short
.390fa3	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fa5	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fa9	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fab	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390faf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fb1	a9 00 00	lda #$0000	                LDA #$0000;
.390fb4	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390fb8	a9 06 00	lda #$0006	                LDA #$0006;
.390fbb	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390fbf	68		pla		                PLA
.390fc0	6b		rtl		                RTL
.390fc1	0b		phd		IINITSUPERIO	  PHD
.390fc2	08		php		                PHP
.390fc3	48		pha		                PHA
.390fc4	e2 20		sep #$20	                SEP #$20        ; set A short
.390fc6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fc8	8f 23 11 af	sta $af1123	                STA GP10_REG
.390fcc	af 23 11 af	lda $af1123	                LDA GP10_REG
.390fd0	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fd2	8f 24 11 af	sta $af1124	                STA GP11_REG
.390fd6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fd8	8f 25 11 af	sta $af1125	                STA GP12_REG
.390fdc	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fde	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390fe2	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390fe4	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390fe8	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390fea	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390fee	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390ff0	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390ff4	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390ff6	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390ffa	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390ffc	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391000	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391002	8f 2f 11 af	sta $af112f					        STA GP24_REG
.391006	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.391008	8f 30 11 af	sta $af1130					        STA GP25_REG
.39100c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.39100e	8f 31 11 af	sta $af1131					        STA GP26_REG
.391012	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.391014	8f 33 11 af	sta $af1133					        STA GP30_REG
.391018	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.39101a	8f 34 11 af	sta $af1134					        STA GP31_REG
.39101e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391020	8f 35 11 af	sta $af1135					        STA GP32_REG
.391024	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.391026	8f 36 11 af	sta $af1136					        STA GP33_REG
.39102a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.39102c	8f 37 11 af	sta $af1137					        STA GP34_REG
.391030	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391032	8f 38 11 af	sta $af1138					        STA GP35_REG
.391036	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.391038	8f 39 11 af	sta $af1139					        STA GP36_REG
.39103c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.39103e	8f 3a 11 af	sta $af113a					        STA GP37_REG
.391042	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391044	8f 3d 11 af	sta $af113d					        STA GP42_REG
.391048	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.39104a	8f 3e 11 af	sta $af113e					        STA GP43_REG
.39104e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391050	8f 3f 11 af	sta $af113f					        STA GP50_REG
.391054	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.391056	8f 40 11 af	sta $af1140					        STA GP51_REG
.39105a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.39105c	8f 41 11 af	sta $af1141					        STA GP52_REG
.391060	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391062	8f 42 11 af	sta $af1142					        STA GP53_REG
.391066	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.391068	8f 43 11 af	sta $af1143					        STA GP54_REG
.39106c	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.39106e	8f 44 11 af	sta $af1144					        STA GP55_REG
.391072	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.391074	8f 45 11 af	sta $af1145					        STA GP56_REG
.391078	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.39107a	8f 46 11 af	sta $af1146					        STA GP57_REG
.39107e	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.391080	8f 47 11 af	sta $af1147					        STA GP60_REG
.391084	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.391086	8f 48 11 af	sta $af1148					        STA GP61_REG
.39108a	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.39108c	8f 4b 11 af	sta $af114b					        STA GP1_REG
.391090	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.391092	8f 4c 11 af	sta $af114c					        STA GP2_REG
.391096	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.391098	8f 4d 11 af	sta $af114d					        STA GP3_REG
.39109c	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.39109e	8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910a2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910a4	8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910a8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910aa	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910ae	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910b0	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910b4	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910b6	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910ba	c2 20		rep #$20	                REP #$20        ; set A long
.3910bc	68		pla		                PLA
.3910bd	28		plp						        PLP
.3910be	2b		pld					        	PLD
.3910bf	6b		rtl		                RTL
.3910c0	0b		phd		IINITKEYBOARD	  PHD
.3910c1	08		php						        PHP
.3910c2	48		pha						        PHA
.3910c3	da		phx						        PHX
.3910c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3910c6	c2 10		rep #$10	                REP #$10        ; set X long
.3910c8	18		clc		                CLC
.3910c9	20 79 11	jsr $391179	                JSR Poll_Inbuf ;
.3910cc	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.3910ce	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.3910d2	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.3910d5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.3910d9	c9 55		cmp #$55					        CMP #$55
.3910db	f0 03		beq $3910e0					        BEQ	passAAtest
.3910dd	82 89 00	brl $391169	                BRL initkb_loop_out
.3910e0					passAAtest
.3910e0	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.3910e2	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.3910e6	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.3910e9	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.3910ed	c9 00		cmp #$00					        CMP #$00			;Should be 00
.3910ef	f0 03		beq $3910f4					        BEQ	passABtest
.3910f1	82 75 00	brl $391169	                BRL initkb_loop_out
.3910f4					passABtest
.3910f4	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.3910f6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910fa	20 79 11	jsr $391179	                JSR Poll_Inbuf ;
.3910fd	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.3910ff	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391103	20 79 11	jsr $391179	                JSR Poll_Inbuf ;
.391106	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391108	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39110c	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39110f	ca		dex		DLY_LOOP1       DEX
.391110	ea		nop		                NOP
.391111	ea		nop		                NOP
.391112	ea		nop		                NOP
.391113	ea		nop		                NOP
.391114	ea		nop		                NOP
.391115	ea		nop		                NOP
.391116	ea		nop		                NOP
.391117	ea		nop		                NOP
.391118	e0 00 00	cpx #$0000	                CPX #$0000
.39111b	d0 f2		bne $39110f	                BNE DLY_LOOP1
.39111d	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.391120	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391124					DO_CMD_F4_AGAIN
.391124	20 79 11	jsr $391179	                JSR Poll_Inbuf ;
.391127	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391129	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39112d	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.391130	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391134	c9 fa		cmp #$fa	                CMP #$FA
.391136	d0 ec		bne $391124	                BNE DO_CMD_F4_AGAIN
.391138	20 8f 11	jsr $39118f	                JSR INIT_MOUSE
.39113b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39113f	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391141	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391145	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391149	29 01		and #$01	                AND #FNX1_INT00_KBD
.39114b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.39114f	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391153	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391155	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391159	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39115d	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.39115f	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391163	a2 ee 6f	ldx #$6fee	                LDX #<>Success_kb_init
.391166	38		sec		                SEC
.391167	b0 03		bcs $39116c	                BCS InitSuccess
.391169	a2 00 70	ldx #$7000	initkb_loop_out LDX #<>Failed_kb_init
.39116c	22 82 07 39	jsl $390782	InitSuccess     JSL IPRINT       ; print Message
.391170	c2 20		rep #$20	                REP #$20        ; set A long
.391172	c2 10		rep #$10	                REP #$10        ; set X long
.391174	fa		plx		                PLX
.391175	68		pla		                PLA
.391176	28		plp						        PLP
.391177	2b		pld						        PLD
.391178	6b		rtl		                RTL
.391179					Poll_Inbuf
.391179	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.39117d	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.39117f	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391181	f0 f6		beq $391179					        BEQ Poll_Inbuf
.391183	60		rts		                RTS
.391184					Poll_Outbuf
.391184	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.391188	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39118a	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39118c	d0 f6		bne $391184	                BNE Poll_Outbuf
.39118e	60		rts		                RTS
.39118f					INIT_MOUSE
.39118f	20 79 11	jsr $391179	                JSR Poll_Inbuf
.391192	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.391194	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391198					DO_CMD_A9_AGAIN
.391198	20 79 11	jsr $391179	                JSR Poll_Inbuf
.39119b	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.39119d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911a1	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.3911a4	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911a8	c9 00		cmp #$00	                CMP #$00
.3911aa	d0 ec		bne $391198	                BNE DO_CMD_A9_AGAIN
.3911ac	20 79 11	jsr $391179	                JSR Poll_Inbuf
.3911af	a9 20		lda #$20	                LDA #$20
.3911b1	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911b5	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.3911b8	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911bc	09 02		ora #$02	                ORA #$02
.3911be	48		pha		                PHA
.3911bf	20 79 11	jsr $391179	                JSR Poll_Inbuf
.3911c2	a9 60		lda #$60	                LDA #$60
.3911c4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911c8	20 79 11	jsr $391179	                JSR Poll_Inbuf ;
.3911cb	68		pla		                PLA
.3911cc	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3911d0	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3911d2	20 f5 11	jsr $3911f5	                JSR MOUSE_WRITE
.3911d5	20 08 12	jsr $391208	                JSR MOUSE_READ
.3911d8	a9 e8		lda #$e8	                LDA #$E8
.3911da	20 f5 11	jsr $3911f5	                JSR MOUSE_WRITE
.3911dd	20 08 12	jsr $391208	                JSR MOUSE_READ
.3911e0	a9 00		lda #$00	                LDA #$00
.3911e2	20 f5 11	jsr $3911f5	                JSR MOUSE_WRITE
.3911e5	20 08 12	jsr $391208	                JSR MOUSE_READ
.3911e8	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.3911ea	20 f5 11	jsr $3911f5	                JSR MOUSE_WRITE
.3911ed	20 08 12	jsr $391208	                JSR MOUSE_READ
.3911f0	a9 00		lda #$00	                LDA #$00
.3911f2	85 e0		sta $e0		                STA MOUSE_PTR
.3911f4	60		rts		                RTS
.3911f5					MOUSE_WRITE
.3911f5	48		pha		                PHA
.3911f6	20 79 11	jsr $391179	                JSR Poll_Inbuf
.3911f9	a9 d4		lda #$d4	                LDA #$D4
.3911fb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911ff	20 79 11	jsr $391179	                JSR Poll_Inbuf
.391202	68		pla		                PLA
.391203	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391207	60		rts		                RTS
.391208					MOUSE_READ
.391208	20 84 11	jsr $391184	                JSR Poll_Outbuf ;
.39120b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.39120f	60		rts		                RTS
.391210	48		pha		INITRTC         PHA
.391211	08		php		                PHP
.391212	e2 20		sep #$20	                SEP #$20        ; set A short
.391214	a9 00		lda #$00	                LDA #0
.391216	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39121a	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39121e	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391222	09 04		ora #$04	                ORA #%00000100
.391224	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391228	28		plp		                PLP
.391229	68		pla		                PLA
.39122a	6b		rtl		                RTL
.39122b					ITESTSID
.39122b	a9 0f		lda #$0f	                LDA #$0F
.39122d	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391231	a9 be		lda #$be	                LDA #$BE
.391233	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391237	a9 f8		lda #$f8	                LDA #$F8
.391239	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39123d	a9 11		lda #$11	                LDA #$11
.39123f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391243	a9 25		lda #$25	                LDA #$25
.391245	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391249	a9 11		lda #$11	                LDA #$11
.39124b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39124f	a9 08		lda #$08	                LDA #$08
.391251	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391255	a9 00		lda #$00	                LDA #$00
.391257	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39125b	a9 c6		lda #$c6	                LDA #$C6
.39125d	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391261	a9 08		lda #$08	                LDA #$08
.391263	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391267	a9 00		lda #$00	                LDA #$00
.391269	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.39126d	a9 08		lda #$08	                LDA #$08
.39126f	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391273	a9 c6		lda #$c6	                LDA #$C6
.391275	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.391279	a9 08		lda #$08	                LDA #$08
.39127b	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39127f	a9 00		lda #$00	                LDA #$00
.391281	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.391285	a9 08		lda #$08	                LDA #$08
.391287	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.39128b	a9 c6		lda #$c6	                LDA #$C6
.39128d	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391291	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.391293	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391297	a9 01		lda #$01	                LDA #$01
.391299	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.39129d	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.39129f	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912a3	a9 08		lda #$08	                LDA #$08
.3912a5	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912a9	a9 08		lda #$08	                LDA #$08
.3912ab	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912af	a9 0c		lda #$0c	                LDA #$0C
.3912b1	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912b5	a9 04		lda #$04	                LDA #$04
.3912b7	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912bb	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912bd	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912c1	a9 08		lda #$08	                LDA #$08
.3912c3	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912c7	a9 08		lda #$08	                LDA #$08
.3912c9	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3912cd	a9 00		lda #$00	                LDA #$00
.3912cf	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.3912d3	a9 08		lda #$08	                LDA #$08
.3912d5	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.3912d9	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912db	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.3912df	a9 08		lda #$08	                LDA #$08
.3912e1	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912e5	a9 08		lda #$08	                LDA #$08
.3912e7	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.3912eb	a9 10		lda #$10	                LDA #$10
.3912ed	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.3912f1	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.3912f5	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.3912f9	6b		rtl		                RTL
.3912fa	48		pha		IINITCODEC      PHA
.3912fb	c2 20		rep #$20	                REP #$20        ; set A long
.3912fd	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391300	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391304	a9 01 00	lda #$0001	                LDA #$0001
.391307	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39130b	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.39130e	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391311	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391315	a9 01 00	lda #$0001	                LDA #$0001
.391318	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39131c	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.39131f	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391322	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391326	a9 01 00	lda #$0001	                LDA #$0001
.391329	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39132d	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391330	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391333	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391337	a9 01 00	lda #$0001	                LDA #$0001
.39133a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39133e	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391341	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391344	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391348	a9 01 00	lda #$0001	                LDA #$0001
.39134b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39134f	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391352	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391355	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391359	a9 01 00	lda #$0001	                LDA #$0001
.39135c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391360	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391363	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391366	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39136a	a9 01 00	lda #$0001	                LDA #$0001
.39136d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391371	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391374	68		pla		                PLA
.391375	6b		rtl		                RTL
.391376					IRESETCODEC
.391376	c2 20		rep #$20	                REP #$20        ; set A long
.391378	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39137b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39137f	a9 01 00	lda #$0001	                LDA #$0001
.391382	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391386	20 8a 13	jsr $39138a	                JSR CODEC_TRF_FINISHED
.391389	6b		rtl		                RTL
.39138a					CODEC_TRF_FINISHED
.39138a	e2 20		sep #$20	                SEP #$20        ; set A short
.39138c	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391390	29 01		and #$01	                AND #$01
.391392	c9 01		cmp #$01	                CMP #$01
.391394	f0 f6		beq $39138c	                BEQ CODEC_LOOP
.391396	c2 20		rep #$20	                REP #$20        ; set A long
.391398	60		rts		                RTS
.391399					IBM_FILL_SCREEN
.391399	c2 30		rep #$30	                REP #$30        ; set A&X long
.39139b	a9 00 00	lda #$0000	                LDA #$0000
.39139e	a2 00 00	ldx #$0000	                LDX #$0000
.3913a1					BM_FILL_SCREEN_LOOPY
.3913a1	a0 00 00	ldy #$0000	                LDY #$0000
.3913a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3913a6					BM_FILL_SCREEN_LOOPX
.3913a6	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913a8	c8		iny		                INY
.3913a9	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913ab	d0 f9		bne $3913a6	                BNE BM_FILL_SCREEN_LOOPX
.3913ad	20 b8 13	jsr $3913b8	                JSR BM_FILL_COMPUTE_Y_DST
.3913b0	e8		inx		                INX
.3913b1	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913b3	d0 ec		bne $3913a1	                BNE BM_FILL_SCREEN_LOOPY
.3913b5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913b7	6b		rtl		                RTL
.3913b8					BM_FILL_COMPUTE_Y_DST
.3913b8	c2 20		rep #$20	                REP #$20        ; set A long
.3913ba	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913bc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913c0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913c2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913c6	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3913c9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913cd	a9 00 00	lda #$0000	                LDA #$0000
.3913d0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3913d4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913d8	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913da	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913de	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3913e0	a9 00 00	lda #$0000	                LDA #$0000
.3913e3	60		rts		                RTS
.3913e4					IBMP_PARSER
.3913e4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913e6	a0 00 00	ldy #$0000	                LDY #$0000
.3913e9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3913eb	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3913ee	f0 03		beq $3913f3	                BEQ IBMP_PARSER_CONT
.3913f0	82 04 01	brl $3914f7	                BRL BMP_PARSER_END_WITH_ERROR
.3913f3					IBMP_PARSER_CONT
.3913f3	a0 02 00	ldy #$0002	                LDY #$0002
.3913f6	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3913f8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3913fc	a0 04 00	ldy #$0004	                LDY #$0004
.3913ff	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391401	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391405	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391408	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39140c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391410	18		clc		                CLC
.391411	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391415	85 50		sta $50		                STA BMP_FILE_SIZE
.391417	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39141b	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39141d	a0 12 00	ldy #$0012	                LDY #$0012
.391420	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391422	85 40		sta $40		                STA BMP_X_SIZE
.391424	a0 16 00	ldy #$0016	                LDY #$0016
.391427	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391429	85 42		sta $42		                STA BMP_Y_SIZE
.39142b	a0 2e 00	ldy #$002e	                LDY #$002E
.39142e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391430	0a		asl a		                ASL A; Multiply by 2
.391431	0a		asl a		                ASL A; Multiply by 2
.391432	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391434	e0 00 00	cpx #$0000	                CPX #$0000
.391437	d0 05		bne $39143e	                BNE BMP_LUT1_PICK
.391439	20 ff 14	jsr $3914ff	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39143c	80 08		bra $391446	                BRA DONE_TRANSFER_LUT;
.39143e					  BMP_LUT1_PICK
.39143e	e0 01 00	cpx #$0001	                CPX #$0001
.391441	d0 03		bne $391446	                BNE BMP_LUT2_PICK
.391443	20 2f 15	jsr $39152f	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391446					  BMP_LUT2_PICK
.391446					  DONE_TRANSFER_LUT
.391446	a5 56		lda $56		                LDA BMP_POSITION_Y
.391448	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39144c	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39144e	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391452	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391456	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39145a	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39145e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391462	a5 54		lda $54		                LDA BMP_POSITION_X
.391464	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391468	a9 00 00	lda #$0000	                LDA #$0000
.39146b	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39146f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391473	85 f0		sta $f0		                STA USER_TEMP
.391475	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391479	85 f2		sta $f2		                STA USER_TEMP+2
.39147b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39147d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391481	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391483	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391487	a5 f0		lda $f0		                LDA USER_TEMP
.391489	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39148d	a5 f2		lda $f2		                LDA USER_TEMP+2
.39148f	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391493	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391497	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391499	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39149d	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39149f	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914a1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914a5	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914a7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914ab	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914ad	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914b1	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914b3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914b7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914bb	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914bd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914c1	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914c3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914c5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914c9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3914cb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914cf	18		clc		                CLC
.3914d0	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3914d2	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3914d5	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3914d8	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3914dc	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3914df	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3914e3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914e7	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914e9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914ed	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914ef	20 5f 15	jsr $39155f	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3914f2	a2 3c 70	ldx #$703c	                LDX #<>bmp_parser_msg0
.3914f5	80 03		bra $3914fa	                BRA BMP_PARSER_END_NO_ERROR
.3914f7					BMP_PARSER_END_WITH_ERROR
.3914f7	a2 28 70	ldx #$7028	                LDX #<>bmp_parser_err0
.3914fa					BMP_PARSER_END_NO_ERROR
.3914fa	22 82 07 39	jsl $390782	                JSL IPRINT       ; print the first line
.3914fe	6b		rtl		                RTL
.3914ff					BMP_PARSER_UPDATE_LUT0
.3914ff	38		sec		                SEC
.391500	a0 7a 00	ldy #$007a	                LDY #$007A
.391503	a2 00 00	ldx #$0000	                LDX #$0000
.391506	e2 20		sep #$20	                SEP #$20        ; set A short
.391508					BMP_PARSER_UPDATE_LOOP
.391508	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39150a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39150e	c8		iny		                INY
.39150f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391511	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391515	c8		iny		                INY
.391516	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391518	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39151c	c8		iny		                INY
.39151d	a9 80		lda #$80	                LDA #$80
.39151f	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391523	c8		iny		                INY ; For the Alpha Value, nobody cares
.391524	e8		inx		                INX
.391525	e8		inx		                INX
.391526	e8		inx		                INX
.391527	e8		inx		                INX
.391528	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39152a	d0 dc		bne $391508	                BNE BMP_PARSER_UPDATE_LOOP
.39152c	c2 20		rep #$20	                REP #$20        ; set A long
.39152e	60		rts		                RTS
.39152f					BMP_PARSER_UPDATE_LUT1
.39152f	38		sec		                SEC
.391530	a0 36 00	ldy #$0036	                LDY #$0036
.391533	a2 00 00	ldx #$0000	                LDX #$0000
.391536	e2 20		sep #$20	                SEP #$20        ; set A short
.391538					PALETTE_LUT1_LOOP
.391538	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39153a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39153e	c8		iny		                INY
.39153f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391541	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391545	c8		iny		                INY
.391546	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391548	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39154c	c8		iny		                INY
.39154d	a9 80		lda #$80	                LDA #$80
.39154f	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391553	c8		iny		                INY ; For the Alpha Value, nobody cares
.391554	e8		inx		                INX
.391555	e8		inx		                INX
.391556	e8		inx		                INX
.391557	e8		inx		                INX
.391558	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39155a	d0 dc		bne $391538	                BNE PALETTE_LUT1_LOOP
.39155c	c2 20		rep #$20	                REP #$20        ; set A long
.39155e	60		rts		                RTS
.39155f					BMP_PARSER_DMA_SHIT_OUT
.39155f	a2 00 00	ldx #$0000	                LDX #$0000
.391562					BMP_PARSER_LOOPY
.391562	a0 00 00	ldy #$0000	                LDY #$0000
.391565	e2 20		sep #$20	                SEP #$20        ; set A short
.391567					BMP_PARSER_LOOPX
.391567	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391569	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39156b	c8		iny		                INY
.39156c	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39156e	d0 f7		bne $391567	                BNE BMP_PARSER_LOOPX
.391570	20 7c 15	jsr $39157c	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391573	20 97 15	jsr $391597	                JSR BMP_PARSER_COMPUTE_Y_DST
.391576	e8		inx		                INX
.391577	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391579	d0 e7		bne $391562	                BNE BMP_PARSER_LOOPY
.39157b	60		rts		                RTS
.39157c					BMP_PARSER_COMPUTE_Y_SRC
.39157c	c2 20		rep #$20	                REP #$20        ; set A long
.39157e	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391580	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391584	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391586	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39158a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39158e	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391590	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391594	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391596	60		rts		                RTS
.391597					BMP_PARSER_COMPUTE_Y_DST
.391597	c2 20		rep #$20	                REP #$20        ; set A long
.391599	18		clc		                CLC
.39159a	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39159c	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39159e	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915a0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915a2	69 00 00	adc #$0000	                ADC #$0000
.3915a5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915a7	60		rts		                RTS
.3915a8	ea		nop		ILOOP           NOP
.3915a9	ea		nop		                NOP
.3915aa	ea		nop		                NOP
.3915ab	ea		nop		                NOP
.3915ac	ea		nop		                NOP
.3915ad	ea		nop		                NOP
.3915ae	ea		nop		                NOP
.3915af	ea		nop		                NOP
.3915b0	ea		nop		                NOP
.3915b1	ea		nop		                NOP
.3915b2	6b		rtl		                RTL
.3915b3	22 a8 15 39	jsl $3915a8	ILOOP_1         JSL ILOOP
.3915b7	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915bb	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915bf	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915c3	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915c7	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915cb	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915cf	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915d3	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915d7	22 a8 15 39	jsl $3915a8	                JSL ILOOP
.3915db	6b		rtl		                RTL
.3915dc	22 b3 15 39	jsl $3915b3	ILOOP_1MS       JSL ILOOP_1
.3915e0	6b		rtl		                RTL
.3915e1	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3915e4	f0 07		beq $3915ed	                BEQ LOOP_MS_END
.3915e6	22 dc 15 39	jsl $3915dc	                JSL ILOOP_1MS
.3915ea	ca		dex		                DEX
.3915eb	80 f4		bra $3915e1	                BRA ILOOP_MS
.3915ed	6b		rtl		LOOP_MS_END     RTL
.3915ee					IDELAY
.3915ee	8b		phb		                PHB
.3915ef	08		php		                PHP
.3915f0	48		pha		                PHA             ; begin setdbr macro
.3915f1	08		php		                PHP
.3915f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3915f4	a9 00		lda #$00	                LDA #0
.3915f6	48		pha		                PHA
.3915f7	ab		plb		                PLB
.3915f8	28		plp		                PLP
.3915f9	68		pla		                PLA             ; end setdbr macro
.3915fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3915fc	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.3915fe	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391602	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391606	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391608	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39160c	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39160e	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391611	a9 00		lda #$00	                LDA #0
.391613	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391617	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39161b	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39161f	c2 30		rep #$30	                REP #$30        ; set A&X long
.391621	8a		txa		                TXA
.391622	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391626	98		tya		                TYA
.391627	e2 20		sep #$20	                SEP #$20        ; set A short
.391629	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39162d	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39162f	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391633	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391635	cb		wai		loop            WAI                         ; Wait for an interrupt
.391636	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391639	f0 fa		beq $391635	                BEQ loop                    ; Keep checking until it's set
.39163b	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39163d	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391641	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391643	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391646	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39164a	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39164c	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391650	28		plp		                PLP
.391651	ab		plb		                PLB
.391652	6b		rtl		                RTL
.391653					SHOW_CREDITS
.391653	48		pha		                PHA
.391654	da		phx		                PHX
.391655	5a		phy		                PHY
.391656	08		php		                PHP
.391657	e2 20		sep #$20	                SEP #$20        ; set A short
.391659	c2 10		rep #$10	                REP #$10        ; set X long
.39165b	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39165f	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391661	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391665	a2 00 00	ldx #$0000	                LDX #0
.391668	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39166c	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391670	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391674	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391678	e8		inx		                INX
.391679	e0 00 20	cpx #$2000	                CPX #128 * 64
.39167c	d0 ea		bne $391668	                BNE credit_loop
.39167e	22 25 07 39	jsl $390725	                JSL IGETCHW                     ; Wait for a keypress
.391682	22 ff 0a 39	jsl $390aff	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391686	22 23 09 39	jsl $390923	                JSL ICSRHOME                    ; Move cursor to the home position
.39168a	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39168e	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391690	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391694	28		plp		                PLP
.391695	7a		ply		                PLY
.391696	fa		plx		                PLX
.391697	68		pla		                PLA
.391698	6b		rtl		                RTL
.391699	00		brk #		IRESTORE        BRK ; Warm boot routine
.39169a	00		brk #		ISCINIT         BRK ;
.39169b	00		brk #		IIOINIT         BRK ;
.39169c	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39169d	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39169e	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.39169f	00		brk #		ICLOSE          BRK ; Close a channel
.3916a0	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916a1	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916a2	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916a3	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916a4	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916a5	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916a6	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916a7	00		brk #		IPRINTF         BRK ; Print a float value
.3916a8	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916a9	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916aa	00		brk #		IPUSHKEY        BRK ;
.3916ab	00		brk #		IPUSHKEYS       BRK ;
.3916ac	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916ad	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916ae	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916b6	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3916c6	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3916ce	12
>3916cf	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3916d7	15
>3916d8	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3916de	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3916e3	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3916e9	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3916f1	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3916ff	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391707	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391715	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39171d	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39172b	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391733	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391741	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391749	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391757	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>39175f	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39176d	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391775	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391783	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39178b	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391799	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917a1	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917af	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917b7	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3917c5	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3917cd	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3917db	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3917e3	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3917f1	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3917f9	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391807	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>39180f	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39181d	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391825	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391833	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39183b	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391849	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391851	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>39185f	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391867	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391875	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39187d	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39188b	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391893	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918a1	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918a9	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918b7	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918bf	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3918cd	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3918d5	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3918e3	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3918eb	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3918f9	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391901	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>39190f	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391917	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391925	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39192d	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39193b	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391943	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391951	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391959	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391967	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>39196f	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39197d	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391985	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391993	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39199b	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919a9	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919b1	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919bf	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3919c7	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3919d5	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3919dd	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3919eb	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3919f3	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a01	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a09	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a17	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a1f	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a2d	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a35	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a43	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a4b	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a59	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a61	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391a6f	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391a77	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391a85	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391a8d	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391a9b	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391aa3	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391ab1	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391ab9	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391ac7	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391acf	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391add	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391ae5	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391af3	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391afb	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b09	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b11	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b1f	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b27	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b35	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b3d	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b4b	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b53	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b61	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391b69	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391b77	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391b7f	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391b8d	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391b95	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391ba3	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391bab	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bb9	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bc1	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391bcf	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391bd7	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391be5	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391bed	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391bfb	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c03	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c11	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c19	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c27	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c2f	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c3d	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c45	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c53	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c5b	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391c69	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391c71	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391c7f	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391c87	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391c95	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391c9d	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391cab	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391cb3	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cc1	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391cc9	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391cd7	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391cdf	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391ced	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391cf5	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d03	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d0b	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d19	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d21	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d2f	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d37	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d45	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d4d	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d5b	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d63	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391d71	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391d79	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391d87	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391d8f	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391d9d	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391da5	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391db3	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391dbb	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391dc9	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391dd1	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391ddf	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391de7	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391df5	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391dfd	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e0b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e13	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e21	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e29	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e37	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e3f	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e4d	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e55	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e63	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391e6b	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391e79	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391e81	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391e8f	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391e97	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391ea5	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391ead	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ebb	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391ec3	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391ed1	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391ed9	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391ee7	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391eef	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391efd	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f05	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f13	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f1b	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f29	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f31	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f3f	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f47	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f55	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f5d	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391f6b	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391f73	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391f81	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391f89	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391f97	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391f9f	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fad	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391fb5	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391fc3	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391fcb	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391fd9	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391fe1	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391fef	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391ff7	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>392005	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>39200d	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>39201b	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>392023	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>392031	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>392039	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>392047	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>39204f	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>39205d	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>392065	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>392073	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>39207b	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>392089	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>392091	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>39209f	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920a7	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920b5	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920bd	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3920cb	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3920d3	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3920e1	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>3920e9	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>3920f7	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>3920ff	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39210d	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392115	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392123	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39212b	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>392139	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392141	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>39214f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392157	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392165	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>39216d	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>39217b	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>392183	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>392191	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>392199	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921a7	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921af	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921bd	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3921c5	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3921d3	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3921db	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3921e9	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>3921f1	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>3921ff	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392207	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392215	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39221d	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39222b	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392233	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392241	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>392249	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392257	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>39225f	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>39226d	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>392275	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>392283	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>39228b	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>392299	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922a1	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922af	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922b7	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3922c5	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3922cd	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3922db	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3922e3	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>3922f1	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>3922f9	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392307	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>39230f	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39231d	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392325	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392333	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39233b	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>392349	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392351	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>39235f	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392367	00 87 fa 00
>39236b	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392373	00 88 98 03
>392377	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>39237f	00 88 98 03
>392383	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39238b	00 f9 69 00
>39238f	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>392397	80 e8 4a 00
>39239b	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923a3	00 f6 9a 00
>3923a7	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923af	1b f2 34 00
>3923b3	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923bb	00 f7 8a 00
>3923bf	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3923c7	00 f6 47 00
>3923cb	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923d3	00 f9 69 00
>3923d7	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3923df	00 f7 a9 00
>3923e3	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3923eb	00 87 fa 00
>3923ef	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3923f7	00 f7 a9 00
>3923fb	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392403	00 f5 f5 00
>392407	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39240f	06 b8 d8 03
>392413	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39241b	00 f5 f5 00
>39241f	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392427	06 b8 d8 03
>39242b	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392433	00 f5 f5 00
>392437	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>39243f	10 74 f8 03
>392443	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39244b	00 f5 f5 00
>39244f	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392457	00 f5 f5 00
>39245b	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392463	05 c5 d4 03
>392467	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39246f	00 f5 f5 00
>392473	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39247b	04 f9 44 03
>39247f	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392487	05 c5 d4 03
>39248b	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392493	04 f9 44 03
>392497	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>39249f	03 87 f7 03
>3924a3	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924ab	05 c5 d4 03
>3924af	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924b7	00 f6 28 00
>3924bb	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924c3	05 c5 d4 03
>3924c7	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3924cf	00 f5 f7 01
>3924d3	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924db	04 f9 44 03
>3924df	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3924e7	00 99 f9 00
>3924eb	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>3924f3	00 a8 f7 00
>3924f7	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3924ff	00 99 f9 00
>392503	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39250b	00 a6 f6 00
>39250f	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392517	00 a6 f6 00
>39251b	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392523	00 f6 36 02
>392527	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39252f	00 f6 36 02
>392533	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39253b	00 96 e8 01
>39253f	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392547	00 96 e8 01
>39254b	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392553	02 79 77 03
>392557	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39255f	02 79 77 03
>392563	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39256b	00 a5 2b 02
>39256f	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392577	00 93 3b 02
>39257b	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392583	01 89 3b 03
>392587	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>39258f	0a 53 2b 02
>392593	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39259b	00 f6 89 00
>39259f	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925a7	00 f6 9a 00
>3925ab	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925b3	00 f6 9a 00
>3925b7	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925bf	00 87 4b 01
>3925c3	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3925cb	00 78 67 01
>3925cf	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3925d7	02 f8 fc 00
>3925db	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3925e3	40 f5 f5 00
>3925e7	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3925ef	02 79 77 03
>3925f3	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3925fb	40 f5 f5 00
>3925ff	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392607	40 f5 f5 00
>39260b	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392613	00 f9 69 00
>392617	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39261f	00 f9 69 00
>392623	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39262b	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>39262f	5f 23 39 00 6b 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392637	77 23 39 00 83 23 39 00
>39263f	8f 23 39 00 9b 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392647	a7 23 39 00 b3 23 39 00
>39264f	bf 23 39 00 cb 23 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392657	d7 23 39 00 e3 23 39 00
>39265f	ef 23 39 00 fb 23 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392667	07 24 39 00 13 24 39 00
>39266f	1f 24 39 00 2b 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392677	37 24 39 00 43 24 39 00
>39267f	4f 24 39 00 5b 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392687	67 24 39 00 73 24 39 00
>39268f	7f 24 39 00 8b 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392697	97 24 39 00 a3 24 39 00
>39269f	af 24 39 00 bb 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926a7	c7 24 39 00 d3 24 39 00
>3926af	df 24 39 00 eb 24 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926b7	f7 24 39 00 03 25 39 00
>3926bf	0f 25 39 00 1b 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3926c7	27 25 39 00 33 25 39 00
>3926cf	3f 25 39 00 4b 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3926d7	57 25 39 00 63 25 39 00
>3926df	6f 25 39 00 7b 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3926e7	87 25 39 00 93 25 39 00
>3926ef	9f 25 39 00 ab 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3926f7	b7 25 39 00 c3 25 39 00
>3926ff	cf 25 39 00 db 25 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392707	e7 25 39 00 f3 25 39 00
>39270f	ff 25 39 00 0b 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392717	17 26 39 00 23 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>39271f	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392727	00 b1 f5 01
>39272b	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392733	03 f1 f5 00
>392737	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>39273f	03 c1 f5 00
>392743	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39274b	00 92 f5 01
>39274f	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392757	00 f1 f9 00
>39275b	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392763	00 f1 f5 00
>392767	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>39276f	02 81 f6 01
>392773	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39277b	00 c2 b9 01
>39277f	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392787	05 b2 35 00
>39278b	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392793	1b f2 34 00
>392797	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>39279f	01 f5 74 00
>3927a3	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927ab	00 61 e3 00
>3927af	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927b7	00 a4 64 00
>3927bb	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927c3	07 b5 f5 00
>3927c7	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3927cf	00 f3 74 00
>3927d3	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3927db	00 c3 94 01
>3927df	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3927e7	00 f4 0d 01
>3927eb	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3927f3	00 f5 0b 01
>3927f7	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3927ff	00 bf 07 00
>392803	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39280b	00 6d 08 01
>39280f	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392817	00 51 17 01
>39281b	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392823	00 51 17 01
>392827	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>39282f	00 53 08 01
>392833	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39283b	00 53 06 01
>39283f	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392847	00 d2 f8 00
>39284b	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392853	00 e2 c7 01
>392857	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>39285f	00 f1 9c 00
>392863	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39286b	02 f2 c9 01
>39286f	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392877	03 95 fb 00
>39287b	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392883	04 a1 59 00
>392887	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>39288f	03 91 fc 03
>392893	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39289b	02 b4 ec 00
>39289f	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928a7	00 93 f7 00
>3928ab	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928b3	04 c1 58 00
>3928b7	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928bf	02 c3 6a 00
>3928c3	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3928cb	00 62 87 00
>3928cf	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3928d7	00 f3 97 00
>3928db	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3928e3	00 b3 97 00
>3928e7	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3928ef	04 f3 cc 00
>3928f3	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3928fb	00 93 aa 00
>3928ff	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392907	00 78 08 01
>39290b	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392913	00 78 08 01
>392917	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>39291f	00 54 27 01
>392923	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39292b	00 61 56 00
>39292f	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392937	00 75 16 01
>39293b	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392943	00 f5 f6 01
>392947	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>39294f	80 f3 e3 00
>392953	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39295b	00 b5 f5 00
>39295f	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392967	80 71 16 00
>39296b	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392973	00 30 55 01
>392977	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>39297f	00 62 36 01
>392983	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39298b	02 51 07 00
>39298f	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392997	00 62 39 00
>39299b	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929a3	00 66 27 00
>3929a7	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929af	00 73 46 00
>3929b3	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929bb	00 74 76 01
>3929bf	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3929c7	81 92 38 00
>3929cb	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3929d3	02 71 19 00
>3929d7	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3929df	01 81 09 00
>3929e3	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3929eb	00 83 4b 02
>3929ef	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3929f7	05 71 59 00
>3929fb	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a03	03 82 39 00
>392a07	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a0f	82 84 17 00
>392a13	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a1b	02 72 16 00
>392a1f	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a27	00 7b 0a 00
>392a2b	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a33	00 85 0c 01
>392a37	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a3f	00 7b 0a 01
>392a43	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a4b	00 79 18 01
>392a4f	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a57	01 73 08 00
>392a5b	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a63	04 77 0a 00
>392a67	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392a6f	00 51 19 00
>392a73	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392a7b	01 74 09 00
>392a7f	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392a87	01 63 28 00
>392a8b	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392a93	00 65 0a 00
>392a97	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392a9f	00 67 29 00
>392aa3	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392aab	00 67 09 00
>392aaf	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392ab7	01 6a 28 00
>392abb	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392ac3	00 55 27 00
>392ac7	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392acf	00 6f 08 00
>392ad3	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392adb	00 7a 07 00
>392adf	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392ae7	06 a2 0d 00
>392aeb	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392af3	00 a3 5f 00
>392af7	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392aff	00 42 27 00
>392b03	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b0b	05 b2 49 00
>392b0f	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b17	00 b2 79 01
>392b1b	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b23	00 7a 1a 00
>392b27	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b2f	00 82 28 01
>392b33	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b3b	02 c3 5f 00
>392b3f	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b47	86 c4 95 01
>392b4b	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b53	00 44 15 00
>392b57	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b5f	00 d1 06 00
>392b63	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392b6b	00 82 37 00
>392b6f	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392b77	00 41 35 00
>392b7b	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392b83	02 32 f5 01
>392b87	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392b8f	00 61 26 00
>392b93	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392b9b	84 3f 05 01
>392b9f	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392ba7	01 d1 f6 00
>392bab	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392bb3	00 41 05 01
>392bb7	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bbf	05 f3 e4 00
>392bc3	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392bcb	00 92 f5 01
>392bcf	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392bd7	04 f2 e4 01
>392bdb	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392be3	00 45 25 00
>392be7	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392bef	01 a3 36 00
>392bf3	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392bfb	01 98 05 01
>392bff	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c07	02 a3 f6 01
>392c0b	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c13	00 f6 f8 00
>392c17	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c1f	00 f3 f5 00
>392c23	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c2b	00 94 e5 01
>392c2f	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c37	00 84 44 00
>392c3b	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c43	03 83 18 01
>392c47	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c4f	01 78 08 01
>392c53	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c5b	03 8e 08 01
>392c5f	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392c67	09 f2 46 00
>392c6b	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392c73	00 96 e8 01
>392c77	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392c7f	00 f6 f6 01
>392c83	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392c8b	00 f6 9a 00
>392c8f	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392c97	00 c6 45 00
>392c9b	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392ca3	00 f4 b4 00
>392ca7	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392caf	00 d5 25 00
>392cb3	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cbb	0e 21 2d 00
>392cbf	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392cc7	00 55 87 02
>392ccb	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392cd3	08 98 87 01
>392cd7	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392cdf	04 17 04 03
>392ce3	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392ceb	05 77 f9 02
>392cef	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392cf7	02 f4 08 00
>392cfb	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d03	00 36 05 01
>392d07	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d0f	05 32 55 03
>392d13	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d1b	00 f3 df 00
>392d1f	1f 27 39 00 2b 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d27	37 27 39 00 43 27 39 00 4f 27 39 00 5b 27 39 00
>392d37	67 27 39 00 73 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d3f	7f 27 39 00 8b 27 39 00 97 27 39 00 a3 27 39 00
>392d4f	af 27 39 00 bb 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d57	c7 27 39 00 d3 27 39 00 df 27 39 00 eb 27 39 00
>392d67	f7 27 39 00 03 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392d6f	0f 28 39 00 1b 28 39 00 27 28 39 00 33 28 39 00
>392d7f	3f 28 39 00 4b 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392d87	57 28 39 00 63 28 39 00 6f 28 39 00 7b 28 39 00
>392d97	87 28 39 00 93 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392d9f	9f 28 39 00 ab 28 39 00 b7 28 39 00 c3 28 39 00
>392daf	cf 28 39 00 db 28 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392db7	e7 28 39 00 f3 28 39 00 ff 28 39 00 0b 29 39 00
>392dc7	17 29 39 00 23 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392dcf	2f 29 39 00 3b 29 39 00 47 29 39 00 53 29 39 00
>392ddf	5f 29 39 00 6b 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392de7	77 29 39 00 83 29 39 00 8f 29 39 00 9b 29 39 00
>392df7	a7 29 39 00 b3 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392dff	bf 29 39 00 cb 29 39 00 d7 29 39 00 e3 29 39 00
>392e0f	ef 29 39 00 fb 29 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e17	07 2a 39 00 13 2a 39 00 1f 2a 39 00 2b 2a 39 00
>392e27	37 2a 39 00 43 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e2f	4f 2a 39 00 5b 2a 39 00 67 2a 39 00 73 2a 39 00
>392e3f	7f 2a 39 00 8b 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e47	97 2a 39 00 a3 2a 39 00 af 2a 39 00 bb 2a 39 00
>392e57	c7 2a 39 00 d3 2a 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e5f	df 2a 39 00 eb 2a 39 00 f7 2a 39 00 03 2b 39 00
>392e6f	0f 2b 39 00 1b 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392e77	27 2b 39 00 33 2b 39 00 3f 2b 39 00 4b 2b 39 00
>392e87	57 2b 39 00 63 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392e8f	6f 2b 39 00 7b 2b 39 00 87 2b 39 00 93 2b 39 00
>392e9f	9f 2b 39 00 ab 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392ea7	b7 2b 39 00 c3 2b 39 00 cf 2b 39 00 db 2b 39 00
>392eb7	e7 2b 39 00 f3 2b 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392ebf	ff 2b 39 00 0b 2c 39 00 17 2c 39 00 23 2c 39 00
>392ecf	2f 2c 39 00 3b 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392ed7	47 2c 39 00 53 2c 39 00 5f 2c 39 00 6b 2c 39 00
>392ee7	77 2c 39 00 83 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392eef	8f 2c 39 00 9b 2c 39 00 a7 2c 39 00 b3 2c 39 00
>392eff	bf 2c 39 00 cb 2c 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f07	d7 2c 39 00 e3 2c 39 00 ef 2c 39 00 fb 2c 39 00
>392f17	07 2d 39 00 13 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f1f	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f27	0d f2 f7 00
>392f2b	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f33	07 f2 f7 00
>392f37	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f3f	07 f2 f6 00
>392f43	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f4b	07 f2 f7 00
>392f4f	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f57	07 f2 f7 00
>392f5b	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f63	07 f2 f7 00
>392f67	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f6f	00 00 00 00
>392f73	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f7b	00 00 00 00
>392f7f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f87	00 00 00 00
>392f8b	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392f93	87 f2 f1 00
>392f97	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392f9f	07 f4 f4 00
>392fa3	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fab	07 f2 f6 00
>392faf	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392fb7	07 e7 f7 00
>392fbb	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392fc3	07 f6 f6 00
>392fc7	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392fcf	87 a3 f3 00
>392fd3	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fdb	00 00 00 00
>392fdf	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe7	00 00 00 00
>392feb	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff3	00 00 00 00
>392ff7	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392fff	07 8a 08 00
>393003	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>39300b	07 55 14 00
>39300f	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>393017	87 55 04 00
>39301b	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>393023	07 46 1a 00
>393027	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>39302f	07 61 07 00
>393033	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>39303b	90 61 07 00
>39303f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393047	00 00 00 00
>39304b	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393053	00 00 00 00
>393057	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39305f	00 00 00 00
>393063	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>39306b	87 f3 f8 00
>39306f	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>393077	07 f6 3a 00
>39307b	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>393083	0c 84 19 00
>393087	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>39308f	07 94 19 00
>393093	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>39309b	87 d1 f8 00
>39309f	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930a7	07 c3 a6 00
>3930ab	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930b3	00 00 00 00
>3930b7	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930bf	00 00 00 00
>3930c3	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930cb	00 00 00 00
>3930cf	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3930d7	47 f2 df 00
>3930db	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3930e3	0f a1 df 00
>3930e7	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>3930ef	07 f1 78 00
>3930f3	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>3930fb	07 f1 18 00
>3930ff	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393107	07 56 26 00
>39310b	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393113	07 66 06 00
>393117	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39311f	00 00 00 00
>393123	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39312b	00 00 00 00
>39312f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393137	00 00 00 00
>39313b	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393143	87 85 35 00
>393147	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>39314f	87 f3 f4 00
>393153	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39315b	07 f2 c3 00
>39315f	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>393167	08 72 08 00
>39316b	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>393173	07 3f 07 01
>393177	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>39317f	07 4f 05 00
>393183	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39318b	00 00 00 00
>39318f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393197	00 00 00 00
>39319b	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a3	00 00 00 00
>3931a7	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931af	07 7a 05 00
>3931b3	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931bb	07 a5 45 00
>3931bf	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3931c7	08 8f 09 00
>3931cb	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3931d3	0c 8f 09 00
>3931d7	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3931df	07 82 37 00
>3931e3	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>3931eb	07 62 2c 01
>3931ef	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931f7	00 00 00 00
>3931fb	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393203	00 00 00 00
>393207	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39320f	00 00 00 00
>393213	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39321b	07 a6 1c 00
>39321f	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393227	07 72 0b 00
>39322b	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393233	07 72 09 00
>393237	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>39323f	07 82 09 00
>393243	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39324b	07 72 0f 00
>39324f	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393257	07 8f 0a 00
>39325b	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393263	00 00 00 00
>393267	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39326f	00 00 00 00
>393273	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39327b	00 00 00 00
>39327f	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393287	07 65 1a 00
>39328b	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393293	07 65 1a 00
>393297	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>39329f	07 75 0a 00
>3932a3	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932ab	07 65 1a 00
>3932af	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932b7	07 65 26 00
>3932bb	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932c3	07 55 36 00
>3932c7	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932cf	00 00 00 00
>3932d3	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932db	00 00 00 00
>3932df	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932e7	00 00 00 00
>3932eb	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>3932f3	07 ff 0f 01
>3932f7	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>3932ff	87 64 18 00
>393303	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39330b	07 96 0a 00
>39330f	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393317	07 91 2a 00
>39331b	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393323	47 6f 07 00
>393327	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>39332f	07 8f 06 02
>393333	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39333b	00 00 00 00
>39333f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393347	00 00 00 00
>39334b	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393353	00 00 00 00
>393357	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>39335f	07 55 16 00
>393363	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39336b	07 6a 03 00
>39336f	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>393377	07 42 35 00
>39337b	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393383	07 31 47 01
>393387	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>39338f	0a 42 25 00
>393393	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>39339b	07 cf 07 00
>39339f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933a7	00 00 00 00
>3933ab	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933b3	00 00 00 00
>3933b7	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933bf	00 00 00 00
>3933c3	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3933cb	8a f2 26 00
>3933cf	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3933d7	07 f2 f5 00
>3933db	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3933e3	87 11 13 00
>3933e7	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>3933ef	87 1d 03 00
>3933f3	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>3933fb	07 81 23 00
>3933ff	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393407	0a f2 f6 01
>39340b	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393413	00 00 00 00
>393417	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39341f	00 00 00 00
>393423	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39342b	00 00 00 00
>39342f	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393437	07 c2 05 00
>39343b	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393443	07 6f 0c 01
>393447	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>39344f	07 56 16 00
>393453	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39345b	88 8f 0b 00
>39345f	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>393467	87 c3 e5 00
>39346b	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393473	07 f8 16 00
>393477	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39347f	00 00 00 00
>393483	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39348b	00 00 00 00
>39348f	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393497	00 00 00 00
>39349b	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934a3	0a f3 03 00
>3934a7	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934af	07 f3 02 00
>3934b3	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934bb	07 1f ff 03
>3934bf	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3934c7	8f 56 84 02
>3934cb	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3934d3	0c 34 04 03
>3934d7	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3934df	07 1f 02 03
>3934e3	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934eb	00 00 00 00
>3934ef	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934f7	00 00 00 00
>3934fb	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393503	00 00 00 00
>393507	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>39350f	07 12 16 01
>393513	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39351b	07 f6 c9 02
>39351f	1f 2f 39 00 2b 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393527	37 2f 39 00 43 2f 39 00 4f 2f 39 00 5b 2f 39 00
>393537	67 2f 39 00 73 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>39353f	7f 2f 39 00 8b 2f 39 00 97 2f 39 00 a3 2f 39 00
>39354f	af 2f 39 00 bb 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393557	c7 2f 39 00 d3 2f 39 00 df 2f 39 00 eb 2f 39 00
>393567	f7 2f 39 00 03 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>39356f	0f 30 39 00 1b 30 39 00 27 30 39 00 33 30 39 00
>39357f	3f 30 39 00 4b 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>393587	57 30 39 00 63 30 39 00 6f 30 39 00 7b 30 39 00
>393597	87 30 39 00 93 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>39359f	9f 30 39 00 ab 30 39 00 b7 30 39 00 c3 30 39 00
>3935af	cf 30 39 00 db 30 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935b7	e7 30 39 00 f3 30 39 00 ff 30 39 00 0b 31 39 00
>3935c7	17 31 39 00 23 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3935cf	2f 31 39 00 3b 31 39 00 47 31 39 00 53 31 39 00
>3935df	5f 31 39 00 6b 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3935e7	77 31 39 00 83 31 39 00 8f 31 39 00 9b 31 39 00
>3935f7	a7 31 39 00 b3 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>3935ff	bf 31 39 00 cb 31 39 00 d7 31 39 00 e3 31 39 00
>39360f	ef 31 39 00 fb 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393617	07 32 39 00 13 32 39 00 1f 32 39 00 2b 32 39 00
>393627	37 32 39 00 43 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>39362f	4f 32 39 00 5b 32 39 00 67 32 39 00 73 32 39 00
>39363f	7f 32 39 00 8b 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393647	97 32 39 00 a3 32 39 00 af 32 39 00 bb 32 39 00
>393657	c7 32 39 00 d3 32 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39365f	df 32 39 00 eb 32 39 00 f7 32 39 00 03 33 39 00
>39366f	0f 33 39 00 1b 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393677	27 33 39 00 33 33 39 00 3f 33 39 00 4b 33 39 00
>393687	57 33 39 00 63 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>39368f	6f 33 39 00 7b 33 39 00 87 33 39 00 93 33 39 00
>39369f	9f 33 39 00 ab 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936a7	b7 33 39 00 c3 33 39 00 cf 33 39 00 db 33 39 00
>3936b7	e7 33 39 00 f3 33 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936bf	ff 33 39 00 0b 34 39 00 17 34 39 00 23 34 39 00
>3936cf	2f 34 39 00 3b 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3936d7	47 34 39 00 53 34 39 00 5f 34 39 00 6b 34 39 00
>3936e7	77 34 39 00 83 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3936ef	8f 34 39 00 9b 34 39 00 a7 34 39 00 b3 34 39 00
>3936ff	bf 34 39 00 cb 34 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393707	d7 34 39 00 e3 34 39 00 ef 34 39 00 fb 34 39 00
>393717	07 35 39 00 13 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>39371f	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393727					IOPL2_TONE_TEST
.393727	e2 20		sep #$20	                SEP #$20        ; set A short
.393729	c2 10		rep #$10	                REP #$10        ; set X long
.39372b	a2 00 00	ldx #$0000	                LDX #0
.39372e					OPL2_TONE_TESTING_L1
.39372e	bf 1f 37 39	lda $39371f,x	                LDA NOTE_INTRO, X
.393732	29 0f		and #$0f	                AND #$F
.393734	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393736	bf 1f 37 39	lda $39371f,x	                LDA NOTE_INTRO, X
.39373a	29 70		and #$70	                AND #$70
.39373c	4a		lsr a		                LSR A
.39373d	4a		lsr a		                LSR A
.39373e	4a		lsr a		                LSR A
.39373f	4a		lsr a		                LSR A
.393740	85 31		sta $31		                STA OPL2_OCTAVE
.393742	8a		txa		                TXA
.393743	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393745	85 27		sta $27		                STA OPL2_CHANNEL
.393747	22 17 39 39	jsl $393917	                JSL OPL2_PLAYNOTE
.39374b	a0 00 00	ldy #$0000	                LDY #$0000
.39374e					OPL2_TONE_TESTING_L2
.39374e	ea		nop		                NOP
.39374f	ea		nop		                NOP
.393750	ea		nop		                NOP
.393751	ea		nop		                NOP
.393752	c8		iny		                INY
.393753	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393756	d0 f6		bne $39374e	                BNE OPL2_TONE_TESTING_L2
.393758	e8		inx		                INX
.393759	e0 08 00	cpx #$0008	                CPX #8
.39375c	d0 d0		bne $39372e	                BNE OPL2_TONE_TESTING_L1
.39375e	6b		rtl		                RTL
.39375f					OPL2_INIT
.39375f	c2 20		rep #$20	                REP #$20        ; set A long
.393761	a9 00 00	lda #$0000	                LDA #$0000
.393764	85 28		sta $28		                STA OPL2_REG_REGION
.393766	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393768	85 30		sta $30		                STA OPL2_NOTE
.39376a	85 32		sta $32		                STA OPL2_PARAMETER0
.39376c	85 34		sta $34		                STA OPL2_PARAMETER2
.39376e	a9 e9 16	lda #$16e9	                LDA #<>INSTRUMENT_ACCORDN
.393771	85 50		sta $50		                STA RAD_ADDR
.393773	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393776	85 52		sta $52		                STA RAD_ADDR + 2
.393778	e2 20		sep #$20	                SEP #$20        ; set A short
.39377a	6b		rtl		                RTL
.39377b					OPL2_Reset
.39377b	6b		rtl		                RTL
.39377c					OPL2_Get_FrequencyBlock
.39377c	6b		rtl		                RTL
.39377d					OPL2_GET_REGISTER
.39377d	48		pha		                PHA             ; begin setdp macro
.39377e	08		php		                PHP
.39377f	c2 20		rep #$20	                REP #$20        ; set A long
.393781	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393784	5b		tcd		                TCD
.393785	28		plp		                PLP
.393786	68		pla		                PLA             ; end setdp macro
.393787	c2 20		rep #$20	                REP #$20        ; set A long
.393789	18		clc		              CLC
.39378a	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39378d	65 32		adc $32		              ADC OPL2_PARAMETER0
.39378f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393791	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393794	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393796	e2 20		sep #$20	                SEP #$20        ; set A short
.393798	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39379a	6b		rtl		              RTL
.39379b					OPL2_GET_WAVEFORM_SELECT
.39379b	48		pha		                PHA             ; begin setdp macro
.39379c	08		php		                PHP
.39379d	c2 20		rep #$20	                REP #$20        ; set A long
.39379f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937a2	5b		tcd		                TCD
.3937a3	28		plp		                PLP
.3937a4	68		pla		                PLA             ; end setdp macro
.3937a5	c2 20		rep #$20	                REP #$20        ; set A long
.3937a7	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937aa	69 01 00	adc #$0001	              ADC #$0001
.3937ad	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937af	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937b2	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937b8	29 20		and #$20	              AND #$20
.3937ba	6b		rtl		              RTL
.3937bb					OPL2_GET_SCALINGLEVEL
.3937bb	48		pha		                PHA             ; begin setdp macro
.3937bc	08		php		                PHP
.3937bd	c2 20		rep #$20	                REP #$20        ; set A long
.3937bf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c2	5b		tcd		                TCD
.3937c3	28		plp		                PLP
.3937c4	68		pla		                PLA             ; end setdp macro
.3937c5	c2 20		rep #$20	                REP #$20        ; set A long
.3937c7	a9 40 00	lda #$0040	              LDA #$0040  ;
.3937ca	85 28		sta $28		              STA OPL2_REG_REGION
.3937cc	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3937cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d3	29 c0		and #$c0	              AND #$C0
.3937d5	4a		lsr a		              LSR A
.3937d6	4a		lsr a		              LSR A
.3937d7	4a		lsr a		              LSR A
.3937d8	4a		lsr a		              LSR A
.3937d9	4a		lsr a		              LSR A
.3937da	4a		lsr a		              LSR A
.3937db	6b		rtl		              RTL
.3937dc					OPL2_GET_BLOCK
.3937dc	48		pha		                PHA             ; begin setdp macro
.3937dd	08		php		                PHP
.3937de	c2 20		rep #$20	                REP #$20        ; set A long
.3937e0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937e3	5b		tcd		                TCD
.3937e4	28		plp		                PLP
.3937e5	68		pla		                PLA             ; end setdp macro
.3937e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3937e8	18		clc		              CLC
.3937e9	a5 27		lda $27		              LDA OPL2_CHANNEL
.3937eb	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937ed	69 b0		adc #$b0	              ADC #$B0
.3937ef	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3937f1	a9 00		lda #$00	              LDA #$00
.3937f3	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3937f5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3937f7	18		clc		              CLC
.3937f8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937fb	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3937fd	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937ff	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393802	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393804	e2 20		sep #$20	                SEP #$20        ; set A short
.393806	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393808	29 1c		and #$1c	              AND #$1C
.39380a	4a		lsr a		              LSR A
.39380b	4a		lsr a		              LSR A
.39380c	6b		rtl		              RTL
.39380d					OPL2_GET_KEYON
.39380d	48		pha		                PHA             ; begin setdp macro
.39380e	08		php		                PHP
.39380f	c2 20		rep #$20	                REP #$20        ; set A long
.393811	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393814	5b		tcd		                TCD
.393815	28		plp		                PLP
.393816	68		pla		                PLA             ; end setdp macro
.393817	e2 20		sep #$20	                SEP #$20        ; set A short
.393819	18		clc		              CLC
.39381a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39381c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39381e	69 b0		adc #$b0	              ADC #$B0
.393820	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393822	a9 00		lda #$00	              LDA #$00
.393824	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393826	c2 30		rep #$30	                REP #$30        ; set A&X long
.393828	18		clc		              CLC
.393829	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39382c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39382e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393830	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393833	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393835	e2 20		sep #$20	                SEP #$20        ; set A short
.393837	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393839	29 20		and #$20	              AND #$20
.39383b	6b		rtl		              RTL
.39383c					OPL2_GET_FEEDBACK
.39383c	48		pha		                PHA             ; begin setdp macro
.39383d	08		php		                PHP
.39383e	c2 20		rep #$20	                REP #$20        ; set A long
.393840	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393843	5b		tcd		                TCD
.393844	28		plp		                PLP
.393845	68		pla		                PLA             ; end setdp macro
.393846	e2 20		sep #$20	                SEP #$20        ; set A short
.393848	18		clc		              CLC
.393849	a5 27		lda $27		              LDA OPL2_CHANNEL
.39384b	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39384d	69 c0		adc #$c0	              ADC #$C0
.39384f	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393851	a9 00		lda #$00	              LDA #$00
.393853	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393855	c2 30		rep #$30	                REP #$30        ; set A&X long
.393857	18		clc		              CLC
.393858	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39385b	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39385d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39385f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393862	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393864	e2 20		sep #$20	                SEP #$20        ; set A short
.393866	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393868	29 e0		and #$e0	              AND #$E0
.39386a	4a		lsr a		              LSR
.39386b	6b		rtl		              RTL
.39386c					OPL2_GET_SYNTHMODE
.39386c	48		pha		                PHA             ; begin setdp macro
.39386d	08		php		                PHP
.39386e	c2 20		rep #$20	                REP #$20        ; set A long
.393870	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393873	5b		tcd		                TCD
.393874	28		plp		                PLP
.393875	68		pla		                PLA             ; end setdp macro
.393876	e2 20		sep #$20	                SEP #$20        ; set A short
.393878	18		clc		              CLC
.393879	a5 27		lda $27		              LDA OPL2_CHANNEL
.39387b	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39387d	69 c0		adc #$c0	              ADC #$C0
.39387f	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393881	a9 00		lda #$00	              LDA #$00
.393883	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393885	c2 30		rep #$30	                REP #$30        ; set A&X long
.393887	18		clc		              CLC
.393888	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39388b	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39388d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39388f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393892	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393894	e2 20		sep #$20	                SEP #$20        ; set A short
.393896	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393898	29 01		and #$01	              AND #$01
.39389a	6b		rtl		              RTL
.39389b					OPL2_GET_DEEPTREMOLO
.39389b	48		pha		                PHA             ; begin setdp macro
.39389c	08		php		                PHP
.39389d	c2 20		rep #$20	                REP #$20        ; set A long
.39389f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938a2	5b		tcd		                TCD
.3938a3	28		plp		                PLP
.3938a4	68		pla		                PLA             ; end setdp macro
.3938a5	c2 20		rep #$20	                REP #$20        ; set A long
.3938a7	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938aa	85 28		sta $28		              STA OPL2_REG_REGION
.3938ac	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3938af	e2 20		sep #$20	                SEP #$20        ; set A short
.3938b1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938b3	29 80		and #$80	              AND #$80
.3938b5	6b		rtl		              RTL
.3938b6					OPL2_GET_DEEPVIBRATO
.3938b6	48		pha		                PHA             ; begin setdp macro
.3938b7	08		php		                PHP
.3938b8	c2 20		rep #$20	                REP #$20        ; set A long
.3938ba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938bd	5b		tcd		                TCD
.3938be	28		plp		                PLP
.3938bf	68		pla		                PLA             ; end setdp macro
.3938c0	c2 20		rep #$20	                REP #$20        ; set A long
.3938c2	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938c5	69 bd 00	adc #$00bd	              ADC #$00BD
.3938c8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ca	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938cd	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938d3	29 40		and #$40	              AND #$40
.3938d5	6b		rtl		              RTL
.3938d6					OPL2_GET_PERCUSSION
.3938d6	48		pha		                PHA             ; begin setdp macro
.3938d7	08		php		                PHP
.3938d8	c2 20		rep #$20	                REP #$20        ; set A long
.3938da	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938dd	5b		tcd		                TCD
.3938de	28		plp		                PLP
.3938df	68		pla		                PLA             ; end setdp macro
.3938e0	c2 20		rep #$20	                REP #$20        ; set A long
.3938e2	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938e5	69 bd 00	adc #$00bd	              ADC #$00BD
.3938e8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ea	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938ed	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3938f1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938f3	29 20		and #$20	              AND #$20
.3938f5	6b		rtl		              RTL
.3938f6					OPL2_GET_DRUMS
.3938f6	48		pha		                PHA             ; begin setdp macro
.3938f7	08		php		                PHP
.3938f8	c2 20		rep #$20	                REP #$20        ; set A long
.3938fa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938fd	5b		tcd		                TCD
.3938fe	28		plp		                PLP
.3938ff	68		pla		                PLA             ; end setdp macro
.393900	c2 20		rep #$20	                REP #$20        ; set A long
.393902	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393905	69 bd 00	adc #$00bd	              ADC #$00BD
.393908	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39390a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39390d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39390f	e2 20		sep #$20	                SEP #$20        ; set A short
.393911	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393913	29 1f		and #$1f	              AND #$1F
.393915	6b		rtl		              RTL
.393916					OPL2_Get_WaveForm
.393916	6b		rtl		                RTL
.393917					OPL2_PLAYNOTE
.393917	48		pha		                PHA             ; begin setdp macro
.393918	08		php		                PHP
.393919	c2 20		rep #$20	                REP #$20        ; set A long
.39391b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39391e	5b		tcd		                TCD
.39391f	28		plp		                PLP
.393920	68		pla		                PLA             ; end setdp macro
.393921	e2 20		sep #$20	                SEP #$20        ; set A short
.393923	da		phx		                PHX
.393924	a9 00		lda #$00	                LDA #$00
.393926	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393928	20 ff 3e	jsr $393eff	                JSR OPL2_SET_KEYON
.39392b	20 c4 3e	jsr $393ec4	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39392e	e2 10		sep #$10	                SEP #$10        ; set X short
.393930	a5 30		lda $30		                LDA OPL2_NOTE
.393932	3a		dec a		                DEC A
.393933	0a		asl a		                ASL A
.393934	aa		tax		                TAX
.393935	bf ae 16 39	lda $3916ae,x	                LDA @lnoteFNumbers,X
.393939	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39393b	e8		inx		                INX
.39393c	bf ae 16 39	lda $3916ae,x	                LDA @lnoteFNumbers,X
.393940	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393942	22 42 3e 39	jsl $393e42	                JSL OPL2_SET_FNUMBER
.393946	a9 01		lda #$01	                LDA #$01
.393948	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39394a	20 ff 3e	jsr $393eff	                JSR OPL2_SET_KEYON
.39394d	c2 10		rep #$10	                REP #$10        ; set X long
.39394f	fa		plx		                PLX
.393950	6b		rtl		                RTL
.393951					OPL2_PLAYDRUM
.393951	6b		rtl		                RTL
.393952					OPL2_SET_INSTRUMENT
.393952	48		pha		                PHA             ; begin setdp macro
.393953	08		php		                PHP
.393954	c2 20		rep #$20	                REP #$20        ; set A long
.393956	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393959	5b		tcd		                TCD
.39395a	28		plp		                PLP
.39395b	68		pla		                PLA             ; end setdp macro
.39395c	38		sec		              SEC ; Set the WaveFormSelect to True
.39395d	22 40 3b 39	jsl $393b40	              JSL OPL2_SET_WAVEFORMSELECT;
.393961	e2 20		sep #$20	                SEP #$20        ; set A short
.393963	c2 10		rep #$10	                REP #$10        ; set X long
.393965	a0 00 00	ldy #$0000	              LDY #$0000
.393968	a2 00 00	ldx #$0000	              LDX #$0000
.39396b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39396d	85 35		sta $35		              STA OPL2_PARAMETER3
.39396f	c8		iny		              INY
.393970	c9 06		cmp #$06	              CMP #$06
.393972	d0 03		bne $393977	              BNE PERCUSSION_NEXT07
.393974	82 70 01	brl $393ae7	              BRL Percussion_6
.393977					PERCUSSION_NEXT07
.393977	c9 07		cmp #$07	              CMP #$07
.393979	d0 03		bne $39397e	              BNE PERCUSSION_NEXT08
.39397b	82 44 01	brl $393ac2	              BRL Percussion_7
.39397e					PERCUSSION_NEXT08
.39397e	c9 08		cmp #$08	              CMP #$08
.393980	d0 03		bne $393985	              BNE PERCUSSION_NEXT09
.393982	82 18 01	brl $393a9d	              BRL Percussion_8
.393985					PERCUSSION_NEXT09
.393985	c9 09		cmp #$09	              CMP #$09
.393987	d0 03		bne $39398c	              BNE PERCUSSION_NEXT0A
.393989	82 ec 00	brl $393a78	              BRL Percussion_9
.39398c					PERCUSSION_NEXT0A
.39398c	c9 0a		cmp #$0a	              CMP #$0A
.39398e	d0 03		bne $393993	              BNE Percussion_Default
.393990	82 c0 00	brl $393a53	              BRL Percussion_A
.393993					Percussion_Default
.393993	a9 00		lda #$00	              LDA #$00
.393995	85 26		sta $26		              STA OPL2_OPERATOR
.393997	c2 20		rep #$20	                REP #$20        ; set A long
.393999	a9 20 00	lda #$0020	              LDA #$0020;
.39399c	85 28		sta $28		              STA OPL2_REG_REGION
.39399e	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3939a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3939a3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939a5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939a7	c8		iny		              INY
.3939a8	c2 20		rep #$20	                REP #$20        ; set A long
.3939aa	a9 40 00	lda #$0040	              LDA #$0040;
.3939ad	85 28		sta $28		              STA OPL2_REG_REGION
.3939af	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3939b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3939b4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939b6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939b8	c8		iny		              INY
.3939b9	c2 20		rep #$20	                REP #$20        ; set A long
.3939bb	a9 60 00	lda #$0060	              LDA #$0060;
.3939be	85 28		sta $28		              STA OPL2_REG_REGION
.3939c0	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3939c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3939c5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939c7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939c9	c8		iny		              INY
.3939ca	c2 20		rep #$20	                REP #$20        ; set A long
.3939cc	a9 80 00	lda #$0080	              LDA #$0080;
.3939cf	85 28		sta $28		              STA OPL2_REG_REGION
.3939d1	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3939d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3939d6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939d8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939da	c8		iny		              INY
.3939db	c2 20		rep #$20	                REP #$20        ; set A long
.3939dd	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3939e0	85 28		sta $28		              STA OPL2_REG_REGION
.3939e2	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.3939e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3939e7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939e9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939eb	c8		iny		              INY
.3939ec	e2 10		sep #$10	                SEP #$10        ; set X short
.3939ee	a5 27		lda $27		              LDA OPL2_CHANNEL
.3939f0	29 0f		and #$0f	              AND #$0F
.3939f2	aa		tax		              TAX
.3939f3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.3939f5	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.3939f9	c8		iny		              INY
.3939fa	a9 01		lda #$01	              LDA #$01
.3939fc	85 26		sta $26		              STA OPL2_OPERATOR
.3939fe	c2 20		rep #$20	                REP #$20        ; set A long
.393a00	a9 20 00	lda #$0020	              LDA #$0020;
.393a03	85 28		sta $28		              STA OPL2_REG_REGION
.393a05	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393a08	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a0c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a0e	c8		iny		              INY
.393a0f	c2 20		rep #$20	                REP #$20        ; set A long
.393a11	a9 40 00	lda #$0040	              LDA #$0040;
.393a14	85 28		sta $28		              STA OPL2_REG_REGION
.393a16	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393a19	e2 20		sep #$20	                SEP #$20        ; set A short
.393a1b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a1d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a1f	c8		iny		              INY
.393a20	c2 20		rep #$20	                REP #$20        ; set A long
.393a22	a9 60 00	lda #$0060	              LDA #$0060;
.393a25	85 28		sta $28		              STA OPL2_REG_REGION
.393a27	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393a2a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a2c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a2e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a30	c8		iny		              INY
.393a31	c2 20		rep #$20	                REP #$20        ; set A long
.393a33	a9 80 00	lda #$0080	              LDA #$0080;
.393a36	85 28		sta $28		              STA OPL2_REG_REGION
.393a38	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393a3b	e2 20		sep #$20	                SEP #$20        ; set A short
.393a3d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a3f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a41	c8		iny		              INY
.393a42	c2 20		rep #$20	                REP #$20        ; set A long
.393a44	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a47	85 28		sta $28		              STA OPL2_REG_REGION
.393a49	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393a4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a4e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a50	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a52	6b		rtl		                RTL
.393a53					Percussion_A
.393a53	e2 20		sep #$20	                SEP #$20        ; set A short
.393a55	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a57	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a5b	c8		iny		              INY
.393a5c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a5e	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a62	c8		iny		              INY
.393a63	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a65	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393a69	c8		iny		              INY
.393a6a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a6c	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393a70	c8		iny		              INY
.393a71	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a73	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393a77	6b		rtl		                RTL
.393a78					Percussion_9
.393a78	e2 20		sep #$20	                SEP #$20        ; set A short
.393a7a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a7c	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393a80	c8		iny		              INY
.393a81	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a83	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393a87	c8		iny		              INY
.393a88	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a8a	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393a8e	c8		iny		              INY
.393a8f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a91	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393a95	c8		iny		              INY
.393a96	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a98	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393a9c	6b		rtl		              RTL
.393a9d					Percussion_8
.393a9d	e2 20		sep #$20	                SEP #$20        ; set A short
.393a9f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393aa1	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393aa5	c8		iny		              INY
.393aa6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393aa8	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393aac	c8		iny		              INY
.393aad	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aaf	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393ab3	c8		iny		              INY
.393ab4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ab6	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393aba	c8		iny		              INY
.393abb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393abd	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393ac1	6b		rtl		              RTL
.393ac2					Percussion_7
.393ac2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ac4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ac6	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393aca	c8		iny		              INY
.393acb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393acd	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393ad1	c8		iny		              INY
.393ad2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ad4	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393ad8	c8		iny		              INY
.393ad9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393adb	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393adf	c8		iny		              INY
.393ae0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ae2	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393ae6	6b		rtl		              RTL
.393ae7					Percussion_6
.393ae7	e2 20		sep #$20	                SEP #$20        ; set A short
.393ae9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393aeb	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393aef	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393af3	c8		iny		              INY
.393af4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393af6	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393afa	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393afe	c8		iny		              INY
.393aff	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b01	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b05	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b09	c8		iny		              INY
.393b0a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b0c	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b10	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b14	c8		iny		              INY
.393b15	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b17	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b1b	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b1f	6b		rtl		              RTL
.393b20					OPL2_SET_REGISTER
.393b20	48		pha		                PHA             ; begin setdp macro
.393b21	08		php		                PHP
.393b22	c2 20		rep #$20	                REP #$20        ; set A long
.393b24	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b27	5b		tcd		                TCD
.393b28	28		plp		                PLP
.393b29	68		pla		                PLA             ; end setdp macro
.393b2a	c2 20		rep #$20	                REP #$20        ; set A long
.393b2c	18		clc		              CLC
.393b2d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b30	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b32	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b34	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b37	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b39	e2 20		sep #$20	                SEP #$20        ; set A short
.393b3b	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b3d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b3f	6b		rtl		              RTL
.393b40					OPL2_SET_WAVEFORMSELECT
.393b40	48		pha		                PHA             ; begin setdp macro
.393b41	08		php		                PHP
.393b42	c2 20		rep #$20	                REP #$20        ; set A long
.393b44	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b47	5b		tcd		                TCD
.393b48	28		plp		                PLP
.393b49	68		pla		                PLA             ; end setdp macro
.393b4a	c2 20		rep #$20	                REP #$20        ; set A long
.393b4c	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b4f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b51	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b54	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b56	e2 20		sep #$20	                SEP #$20        ; set A short
.393b58	b0 07		bcs $393b61	              BCS OPL2_Set_WaveFormSelect_set
.393b5a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b5c	29 df		and #$df	              AND #$DF
.393b5e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b60	6b		rtl		              RTL
.393b61					OPL2_Set_WaveFormSelect_set
.393b61	48		pha		                PHA             ; begin setdp macro
.393b62	08		php		                PHP
.393b63	c2 20		rep #$20	                REP #$20        ; set A long
.393b65	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b68	5b		tcd		                TCD
.393b69	28		plp		                PLP
.393b6a	68		pla		                PLA             ; end setdp macro
.393b6b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b6d	09 20 00	ora #$0020	              ORA #$20
.393b70	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b72	6b		rtl		                RTL
.393b73					OPL2_SET_TREMOLO
.393b73	48		pha		                PHA             ; begin setdp macro
.393b74	08		php		                PHP
.393b75	c2 20		rep #$20	                REP #$20        ; set A long
.393b77	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b7a	5b		tcd		                TCD
.393b7b	28		plp		                PLP
.393b7c	68		pla		                PLA             ; end setdp macro
.393b7d	08		php		                PHP ; Push the Carry
.393b7e	c2 20		rep #$20	                REP #$20        ; set A long
.393b80	18		clc		                CLC
.393b81	a9 20 00	lda #$0020	                LDA #$0020 ;
.393b84	85 28		sta $28		                STA OPL2_REG_REGION
.393b86	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393b89	28		plp		                PLP ; Pull the Carry out
.393b8a	e2 20		sep #$20	                SEP #$20        ; set A short
.393b8c	b0 08		bcs $393b96	                BCS OPL2_Set_Tremolo_Set;
.393b8e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b90	29 7f		and #$7f	                AND #$7F
.393b92	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b94	80 06		bra $393b9c	                BRA OPL2_Set_Tremolo_Exit
.393b96					OPL2_Set_Tremolo_Set
.393b96	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b98	09 80		ora #$80	                ORA #$80
.393b9a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b9c					OPL2_Set_Tremolo_Exit
.393b9c	6b		rtl		                RTL
.393b9d					OPL2_GET_TREMOLO
.393b9d	48		pha		                PHA             ; begin setdp macro
.393b9e	08		php		                PHP
.393b9f	c2 20		rep #$20	                REP #$20        ; set A long
.393ba1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba4	5b		tcd		                TCD
.393ba5	28		plp		                PLP
.393ba6	68		pla		                PLA             ; end setdp macro
.393ba7	c2 20		rep #$20	                REP #$20        ; set A long
.393ba9	a9 20 00	lda #$0020	                LDA #$0020;
.393bac	85 28		sta $28		                STA OPL2_REG_REGION
.393bae	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393bb1	e2 20		sep #$20	                SEP #$20        ; set A short
.393bb3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bb5	29 80		and #$80	                AND #$80
.393bb7	6b		rtl		                RTL
.393bb8					OPL2_SET_VIBRATO
.393bb8	48		pha		                PHA             ; begin setdp macro
.393bb9	08		php		                PHP
.393bba	c2 20		rep #$20	                REP #$20        ; set A long
.393bbc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bbf	5b		tcd		                TCD
.393bc0	28		plp		                PLP
.393bc1	68		pla		                PLA             ; end setdp macro
.393bc2	08		php		                PHP ; Push the Carry
.393bc3	c2 20		rep #$20	                REP #$20        ; set A long
.393bc5	18		clc		                CLC
.393bc6	a9 20 00	lda #$0020	                LDA #$0020;
.393bc9	85 28		sta $28		                STA OPL2_REG_REGION
.393bcb	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393bce	28		plp		                PLP ; Pull the Carry out
.393bcf	e2 20		sep #$20	                SEP #$20        ; set A short
.393bd1	b0 08		bcs $393bdb	                BCS OPL2_Set_Vibrato_Set;
.393bd3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd5	29 bf		and #$bf	                AND #$BF
.393bd7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd9	80 06		bra $393be1	                BRA OPL2_Set_Vibrato_Exit
.393bdb					OPL2_Set_Vibrato_Set
.393bdb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bdd	09 40		ora #$40	                ORA #$40
.393bdf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393be1					OPL2_Set_Vibrato_Exit
.393be1	6b		rtl		                RTL
.393be2					OPL2_GET_VIBRATO
.393be2	48		pha		                PHA             ; begin setdp macro
.393be3	08		php		                PHP
.393be4	c2 20		rep #$20	                REP #$20        ; set A long
.393be6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393be9	5b		tcd		                TCD
.393bea	28		plp		                PLP
.393beb	68		pla		                PLA             ; end setdp macro
.393bec	c2 20		rep #$20	                REP #$20        ; set A long
.393bee	a9 20 00	lda #$0020	                LDA #$0020;
.393bf1	85 28		sta $28		                STA OPL2_REG_REGION
.393bf3	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393bf6	e2 20		sep #$20	                SEP #$20        ; set A short
.393bf8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bfa	29 40		and #$40	                AND #$40
.393bfc	6b		rtl		                RTL
.393bfd					OPL2_SET_MAINTAINSUSTAIN
.393bfd	48		pha		                PHA             ; begin setdp macro
.393bfe	08		php		                PHP
.393bff	c2 20		rep #$20	                REP #$20        ; set A long
.393c01	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c04	5b		tcd		                TCD
.393c05	28		plp		                PLP
.393c06	68		pla		                PLA             ; end setdp macro
.393c07	08		php		              PHP ; Push the Carry
.393c08	c2 20		rep #$20	                REP #$20        ; set A long
.393c0a	18		clc		              CLC
.393c0b	a9 20 00	lda #$0020	              LDA #$0020;
.393c0e	85 28		sta $28		              STA OPL2_REG_REGION
.393c10	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393c13	28		plp		              PLP ; Pull the Carry out
.393c14	e2 20		sep #$20	                SEP #$20        ; set A short
.393c16	b0 08		bcs $393c20	              BCS OPL2_Set_MaintainSustain_Set;
.393c18	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c1a	29 df		and #$df	              AND #$DF
.393c1c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c1e	80 06		bra $393c26	              BRA OPL2_Set_MaintainSustain_Exit
.393c20					OPL2_Set_MaintainSustain_Set
.393c20	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c22	09 20		ora #$20	              ORA #$20
.393c24	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c26					OPL2_Set_MaintainSustain_Exit
.393c26	6b		rtl		                RTL
.393c27					OPL2_GET_MAINTAINSUSTAIN
.393c27	48		pha		                PHA             ; begin setdp macro
.393c28	08		php		                PHP
.393c29	c2 20		rep #$20	                REP #$20        ; set A long
.393c2b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c2e	5b		tcd		                TCD
.393c2f	28		plp		                PLP
.393c30	68		pla		                PLA             ; end setdp macro
.393c31	c2 20		rep #$20	                REP #$20        ; set A long
.393c33	a9 20 00	lda #$0020	              LDA #$0020;
.393c36	85 28		sta $28		              STA OPL2_REG_REGION
.393c38	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393c3b	e2 20		sep #$20	                SEP #$20        ; set A short
.393c3d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c3f	29 20		and #$20	              AND #$20
.393c41	6b		rtl		                RTL
.393c42					OPL2_SET_ENVELOPESCALING
.393c42	48		pha		                PHA             ; begin setdp macro
.393c43	08		php		                PHP
.393c44	c2 20		rep #$20	                REP #$20        ; set A long
.393c46	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c49	5b		tcd		                TCD
.393c4a	28		plp		                PLP
.393c4b	68		pla		                PLA             ; end setdp macro
.393c4c	08		php		              PHP ; Push the Carry
.393c4d	c2 20		rep #$20	                REP #$20        ; set A long
.393c4f	18		clc		              CLC
.393c50	a9 20 00	lda #$0020	              LDA #$0020;
.393c53	85 28		sta $28		              STA OPL2_REG_REGION
.393c55	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393c58	28		plp		              PLP ; Pull the Carry out
.393c59	e2 20		sep #$20	                SEP #$20        ; set A short
.393c5b	b0 08		bcs $393c65	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c5d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c5f	29 ef		and #$ef	              AND #$EF
.393c61	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c63	80 06		bra $393c6b	              BRA OPL2_Set_EnvelopeScaling_Exit
.393c65					OPL2_Set_EnvelopeScaling_Set
.393c65	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c67	09 10		ora #$10	              ORA #$10
.393c69	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c6b					OPL2_Set_EnvelopeScaling_Exit
.393c6b	6b		rtl		                RTL
.393c6c					OPL2_GET_ENVELOPESCALING
.393c6c	48		pha		                PHA             ; begin setdp macro
.393c6d	08		php		                PHP
.393c6e	c2 20		rep #$20	                REP #$20        ; set A long
.393c70	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c73	5b		tcd		                TCD
.393c74	28		plp		                PLP
.393c75	68		pla		                PLA             ; end setdp macro
.393c76	c2 20		rep #$20	                REP #$20        ; set A long
.393c78	a9 20 00	lda #$0020	              LDA #$0020;
.393c7b	85 28		sta $28		              STA OPL2_REG_REGION
.393c7d	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393c80	e2 20		sep #$20	                SEP #$20        ; set A short
.393c82	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c84	29 10		and #$10	              AND #$10
.393c86	6b		rtl		                RTL
.393c87					OPL2_GET_MODFREQMULTIPLE
.393c87	48		pha		                PHA             ; begin setdp macro
.393c88	08		php		                PHP
.393c89	c2 20		rep #$20	                REP #$20        ; set A long
.393c8b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c8e	5b		tcd		                TCD
.393c8f	28		plp		                PLP
.393c90	68		pla		                PLA             ; end setdp macro
.393c91	c2 20		rep #$20	                REP #$20        ; set A long
.393c93	a9 20 00	lda #$0020	              LDA #$0020;
.393c96	85 28		sta $28		              STA OPL2_REG_REGION
.393c98	20 7e 40	jsr $39407e	              JSR OPL2_GET_REG_OFFSET
.393c9b	e2 20		sep #$20	                SEP #$20        ; set A short
.393c9d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c9f	29 0f		and #$0f	              AND #$0F
.393ca1	6b		rtl		              RTL
.393ca2					OPL2_SET_MODFREQMULTIPLE
.393ca2	48		pha		                PHA             ; begin setdp macro
.393ca3	08		php		                PHP
.393ca4	c2 20		rep #$20	                REP #$20        ; set A long
.393ca6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca9	5b		tcd		                TCD
.393caa	28		plp		                PLP
.393cab	68		pla		                PLA             ; end setdp macro
.393cac	c2 20		rep #$20	                REP #$20        ; set A long
.393cae	a9 20 00	lda #$0020	                LDA #$0020;
.393cb1	85 28		sta $28		                STA OPL2_REG_REGION
.393cb3	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393cb6	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb8	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cba	29 0f		and #$0f	                AND #$0F
.393cbc	85 32		sta $32		                STA OPL2_PARAMETER0
.393cbe	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cc0	29 f0		and #$f0	                AND #$F0
.393cc2	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cc4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cc6	6b		rtl		                RTL
.393cc7					OPL2_SET_SCALINGLEVEL
.393cc7	48		pha		                PHA             ; begin setdp macro
.393cc8	08		php		                PHP
.393cc9	c2 20		rep #$20	                REP #$20        ; set A long
.393ccb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cce	5b		tcd		                TCD
.393ccf	28		plp		                PLP
.393cd0	68		pla		                PLA             ; end setdp macro
.393cd1	c2 20		rep #$20	                REP #$20        ; set A long
.393cd3	a9 40 00	lda #$0040	                LDA #$0040;
.393cd6	85 28		sta $28		                STA OPL2_REG_REGION
.393cd8	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393cdb	e2 20		sep #$20	                SEP #$20        ; set A short
.393cdd	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cdf	29 03		and #$03	                AND #$03
.393ce1	0a		asl a		                ASL
.393ce2	0a		asl a		                ASL
.393ce3	0a		asl a		                ASL
.393ce4	0a		asl a		                ASL
.393ce5	0a		asl a		                ASL
.393ce6	0a		asl a		                ASL
.393ce7	85 32		sta $32		                STA OPL2_PARAMETER0
.393ce9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ceb	29 3f		and #$3f	                AND #$3F
.393ced	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cef	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cf1	6b		rtl		                RTL
.393cf2					OPL2_SET_VOLUME
.393cf2	48		pha		                PHA             ; begin setdp macro
.393cf3	08		php		                PHP
.393cf4	c2 20		rep #$20	                REP #$20        ; set A long
.393cf6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cf9	5b		tcd		                TCD
.393cfa	28		plp		                PLP
.393cfb	68		pla		                PLA             ; end setdp macro
.393cfc	c2 20		rep #$20	                REP #$20        ; set A long
.393cfe	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d01	85 28		sta $28		                STA OPL2_REG_REGION
.393d03	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393d06	e2 20		sep #$20	                SEP #$20        ; set A short
.393d08	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d0a	29 3f		and #$3f	                AND #$3F
.393d0c	85 32		sta $32		                STA OPL2_PARAMETER0
.393d0e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d10	29 c0		and #$c0	                AND #$C0
.393d12	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d14	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d16	6b		rtl		                RTL
.393d17					OPL2_GET_VOLUME
.393d17	48		pha		                PHA             ; begin setdp macro
.393d18	08		php		                PHP
.393d19	c2 20		rep #$20	                REP #$20        ; set A long
.393d1b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d1e	5b		tcd		                TCD
.393d1f	28		plp		                PLP
.393d20	68		pla		                PLA             ; end setdp macro
.393d21	c2 20		rep #$20	                REP #$20        ; set A long
.393d23	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d26	85 28		sta $28		                STA OPL2_REG_REGION
.393d28	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393d2b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d2d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d2f	29 3f		and #$3f	                AND #$3F
.393d31	6b		rtl		                RTL
.393d32					OPL2_SET_ATTACK
.393d32	48		pha		                PHA             ; begin setdp macro
.393d33	08		php		                PHP
.393d34	c2 20		rep #$20	                REP #$20        ; set A long
.393d36	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d39	5b		tcd		                TCD
.393d3a	28		plp		                PLP
.393d3b	68		pla		                PLA             ; end setdp macro
.393d3c	c2 20		rep #$20	                REP #$20        ; set A long
.393d3e	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d41	85 28		sta $28		                STA OPL2_REG_REGION
.393d43	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393d46	e2 20		sep #$20	                SEP #$20        ; set A short
.393d48	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d4a	29 0f		and #$0f	                AND #$0F
.393d4c	0a		asl a		                ASL
.393d4d	0a		asl a		                ASL
.393d4e	0a		asl a		                ASL
.393d4f	0a		asl a		                ASL
.393d50	85 32		sta $32		                STA OPL2_PARAMETER0
.393d52	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d54	29 0f		and #$0f	                AND #$0F
.393d56	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d58	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d5a	6b		rtl		                RTL
.393d5b					OPL2_GET_ATTACK
.393d5b	48		pha		                PHA             ; begin setdp macro
.393d5c	08		php		                PHP
.393d5d	c2 20		rep #$20	                REP #$20        ; set A long
.393d5f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d62	5b		tcd		                TCD
.393d63	28		plp		                PLP
.393d64	68		pla		                PLA             ; end setdp macro
.393d65	c2 20		rep #$20	                REP #$20        ; set A long
.393d67	a9 60 00	lda #$0060	                LDA #$0060
.393d6a	85 28		sta $28		                STA OPL2_REG_REGION
.393d6c	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393d6f	e2 20		sep #$20	                SEP #$20        ; set A short
.393d71	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d73	29 f0		and #$f0	                AND #$F0
.393d75	4a		lsr a		                LSR
.393d76	4a		lsr a		                LSR
.393d77	4a		lsr a		                LSR
.393d78	4a		lsr a		                LSR
.393d79	6b		rtl		                RTL
.393d7a					OPL2_SET_DECAY
.393d7a	48		pha		                PHA             ; begin setdp macro
.393d7b	08		php		                PHP
.393d7c	c2 20		rep #$20	                REP #$20        ; set A long
.393d7e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d81	5b		tcd		                TCD
.393d82	28		plp		                PLP
.393d83	68		pla		                PLA             ; end setdp macro
.393d84	c2 20		rep #$20	                REP #$20        ; set A long
.393d86	a9 60 00	lda #$0060	                LDA #$0060;
.393d89	85 28		sta $28		                STA OPL2_REG_REGION
.393d8b	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393d8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393d90	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d92	29 0f		and #$0f	                AND #$0F
.393d94	85 32		sta $32		                STA OPL2_PARAMETER0
.393d96	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d98	29 f0		and #$f0	                AND #$F0
.393d9a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d9c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d9e	6b		rtl		                RTL
.393d9f					OPL2_GET_DECAY
.393d9f	48		pha		                PHA             ; begin setdp macro
.393da0	08		php		                PHP
.393da1	c2 20		rep #$20	                REP #$20        ; set A long
.393da3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393da6	5b		tcd		                TCD
.393da7	28		plp		                PLP
.393da8	68		pla		                PLA             ; end setdp macro
.393da9	c2 20		rep #$20	                REP #$20        ; set A long
.393dab	a9 60 00	lda #$0060	                LDA #$0060
.393dae	85 28		sta $28		                STA OPL2_REG_REGION
.393db0	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393db3	e2 20		sep #$20	                SEP #$20        ; set A short
.393db5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393db7	29 0f		and #$0f	                AND #$0F
.393db9	6b		rtl		                RTL
.393dba					OPL2_SET_SUSTAIN
.393dba	48		pha		                PHA             ; begin setdp macro
.393dbb	08		php		                PHP
.393dbc	c2 20		rep #$20	                REP #$20        ; set A long
.393dbe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dc1	5b		tcd		                TCD
.393dc2	28		plp		                PLP
.393dc3	68		pla		                PLA             ; end setdp macro
.393dc4	c2 20		rep #$20	                REP #$20        ; set A long
.393dc6	a9 80 00	lda #$0080	                LDA #$0080;
.393dc9	85 28		sta $28		                STA OPL2_REG_REGION
.393dcb	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393dce	e2 20		sep #$20	                SEP #$20        ; set A short
.393dd0	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dd2	29 0f		and #$0f	                AND #$0F
.393dd4	0a		asl a		                ASL
.393dd5	0a		asl a		                ASL
.393dd6	0a		asl a		                ASL
.393dd7	0a		asl a		                ASL
.393dd8	85 32		sta $32		                STA OPL2_PARAMETER0
.393dda	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ddc	29 0f		and #$0f	                AND #$0F
.393dde	05 32		ora $32		                ORA OPL2_PARAMETER0
.393de0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393de2	6b		rtl		                RTL
.393de3					OPL2_GET_SUSTAIN
.393de3	48		pha		                PHA             ; begin setdp macro
.393de4	08		php		                PHP
.393de5	c2 20		rep #$20	                REP #$20        ; set A long
.393de7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dea	5b		tcd		                TCD
.393deb	28		plp		                PLP
.393dec	68		pla		                PLA             ; end setdp macro
.393ded	c2 20		rep #$20	                REP #$20        ; set A long
.393def	a9 80 00	lda #$0080	                LDA #$0080
.393df2	85 28		sta $28		                STA OPL2_REG_REGION
.393df4	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393df7	e2 20		sep #$20	                SEP #$20        ; set A short
.393df9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dfb	29 f0		and #$f0	                AND #$F0
.393dfd	4a		lsr a		                LSR
.393dfe	4a		lsr a		                LSR
.393dff	4a		lsr a		                LSR
.393e00	4a		lsr a		                LSR
.393e01	6b		rtl		                RTL
.393e02					OPL2_SET_RELEASE
.393e02	48		pha		                PHA             ; begin setdp macro
.393e03	08		php		                PHP
.393e04	c2 20		rep #$20	                REP #$20        ; set A long
.393e06	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e09	5b		tcd		                TCD
.393e0a	28		plp		                PLP
.393e0b	68		pla		                PLA             ; end setdp macro
.393e0c	c2 20		rep #$20	                REP #$20        ; set A long
.393e0e	a9 80 00	lda #$0080	                LDA #$0080;
.393e11	85 28		sta $28		                STA OPL2_REG_REGION
.393e13	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393e16	e2 20		sep #$20	                SEP #$20        ; set A short
.393e18	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e1a	29 0f		and #$0f	                AND #$0F
.393e1c	85 32		sta $32		                STA OPL2_PARAMETER0
.393e1e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e20	29 f0		and #$f0	                AND #$F0
.393e22	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e24	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e26	6b		rtl		                RTL
.393e27					OPL2_GET_RELEASE
.393e27	48		pha		                PHA             ; begin setdp macro
.393e28	08		php		                PHP
.393e29	c2 20		rep #$20	                REP #$20        ; set A long
.393e2b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e2e	5b		tcd		                TCD
.393e2f	28		plp		                PLP
.393e30	68		pla		                PLA             ; end setdp macro
.393e31	c2 20		rep #$20	                REP #$20        ; set A long
.393e33	a9 80 00	lda #$0080	                LDA #$0080
.393e36	85 28		sta $28		                STA OPL2_REG_REGION
.393e38	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.393e3b	e2 20		sep #$20	                SEP #$20        ; set A short
.393e3d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e3f	29 0f		and #$0f	                AND #$0F
.393e41	6b		rtl		                RTL
.393e42					OPL2_SET_FNUMBER
.393e42	48		pha		                PHA             ; begin setdp macro
.393e43	08		php		                PHP
.393e44	c2 20		rep #$20	                REP #$20        ; set A long
.393e46	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e49	5b		tcd		                TCD
.393e4a	28		plp		                PLP
.393e4b	68		pla		                PLA             ; end setdp macro
.393e4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4e	18		clc		                CLC
.393e4f	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e51	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e53	69 a0		adc #$a0	                ADC #$A0
.393e55	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e57	a9 00		lda #$00	                LDA #$00
.393e59	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e5b	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e5d	18		clc		                CLC
.393e5e	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e61	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e63	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e65	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e68	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e6a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e6c	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393e6e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393e70	18		clc		                CLC
.393e71	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393e73	69 10		adc #$10	                ADC #$10
.393e75	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e77	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393e79	29 03		and #$03	                AND #$03
.393e7b	85 33		sta $33		                STA OPL2_PARAMETER1
.393e7d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e7f	29 fc		and #$fc	                AND #$FC
.393e81	05 33		ora $33		                ORA OPL2_PARAMETER1
.393e83	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e85	6b		rtl		                RTL
.393e86					OPL2_GET_FNUMBER
.393e86	48		pha		                PHA             ; begin setdp macro
.393e87	08		php		                PHP
.393e88	c2 20		rep #$20	                REP #$20        ; set A long
.393e8a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e8d	5b		tcd		                TCD
.393e8e	28		plp		                PLP
.393e8f	68		pla		                PLA             ; end setdp macro
.393e90	e2 20		sep #$20	                SEP #$20        ; set A short
.393e92	18		clc		                CLC
.393e93	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e95	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e97	69 a0		adc #$a0	                ADC #$A0
.393e99	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e9b	a9 00		lda #$00	                LDA #$00
.393e9d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e9f	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ea1	18		clc		                CLC
.393ea2	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ea5	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ea7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ea9	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393eac	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393eae	e2 20		sep #$20	                SEP #$20        ; set A short
.393eb0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eb2	85 32		sta $32		                STA OPL2_PARAMETER0
.393eb4	18		clc		                CLC
.393eb5	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eb7	69 10		adc #$10	                ADC #$10
.393eb9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ebb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ebd	29 03		and #$03	                AND #$03
.393ebf	85 33		sta $33		                STA OPL2_PARAMETER1
.393ec1	6b		rtl		                RTL
.393ec2					OPL2_Set_Frequency
.393ec2	6b		rtl		                RTL
.393ec3					OPL2_Get_Frequency
.393ec3	6b		rtl		                RTL
.393ec4					OPL2_SET_BLOCK
.393ec4	48		pha		                PHA             ; begin setdp macro
.393ec5	08		php		                PHP
.393ec6	c2 20		rep #$20	                REP #$20        ; set A long
.393ec8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ecb	5b		tcd		                TCD
.393ecc	28		plp		                PLP
.393ecd	68		pla		                PLA             ; end setdp macro
.393ece	e2 20		sep #$20	                SEP #$20        ; set A short
.393ed0	18		clc		                CLC
.393ed1	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ed3	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ed5	69 b0		adc #$b0	                ADC #$B0
.393ed7	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ed9	a9 00		lda #$00	                LDA #$00
.393edb	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393edd	c2 30		rep #$30	                REP #$30        ; set A&X long
.393edf	18		clc		                CLC
.393ee0	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ee3	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ee5	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ee7	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393eea	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393eec	e2 20		sep #$20	                SEP #$20        ; set A short
.393eee	a5 31		lda $31		                LDA OPL2_OCTAVE
.393ef0	29 07		and #$07	                AND #$07
.393ef2	0a		asl a		                ASL
.393ef3	0a		asl a		                ASL
.393ef4	85 31		sta $31		                STA OPL2_OCTAVE
.393ef6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ef8	29 e3		and #$e3	                AND #$E3
.393efa	05 31		ora $31		                ORA OPL2_OCTAVE
.393efc	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393efe	60		rts		                RTS
.393eff					OPL2_SET_KEYON
.393eff	48		pha		                PHA             ; begin setdp macro
.393f00	08		php		                PHP
.393f01	c2 20		rep #$20	                REP #$20        ; set A long
.393f03	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f06	5b		tcd		                TCD
.393f07	28		plp		                PLP
.393f08	68		pla		                PLA             ; end setdp macro
.393f09	e2 20		sep #$20	                SEP #$20        ; set A short
.393f0b	18		clc		                CLC
.393f0c	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f0e	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f10	69 b0		adc #$b0	                ADC #$B0
.393f12	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f14	a9 00		lda #$00	                LDA #$00
.393f16	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f18	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f1a	18		clc		                CLC
.393f1b	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f1e	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f20	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f22	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f25	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f27	e2 20		sep #$20	                SEP #$20        ; set A short
.393f29	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f2b	29 01		and #$01	                AND #$01
.393f2d	f0 02		beq $393f31	                BEQ SET_KEYON_OFF
.393f2f	a9 20		lda #$20	                LDA #$20
.393f31					    SET_KEYON_OFF
.393f31	85 32		sta $32		                STA OPL2_PARAMETER0
.393f33	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f35	29 df		and #$df	                AND #$DF
.393f37	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f39	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f3b	60		rts		                RTS
.393f3c					OPL2_SET_FEEDBACK
.393f3c	48		pha		                PHA             ; begin setdp macro
.393f3d	08		php		                PHP
.393f3e	c2 20		rep #$20	                REP #$20        ; set A long
.393f40	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f43	5b		tcd		                TCD
.393f44	28		plp		                PLP
.393f45	68		pla		                PLA             ; end setdp macro
.393f46	e2 20		sep #$20	                SEP #$20        ; set A short
.393f48	18		clc		              CLC
.393f49	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f4b	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f4d	69 c0		adc #$c0	              ADC #$C0
.393f4f	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f51	a9 00		lda #$00	              LDA #$00
.393f53	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f55	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f57	18		clc		              CLC
.393f58	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f5b	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f5d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f5f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f62	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f64	e2 20		sep #$20	                SEP #$20        ; set A short
.393f66	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393f68	29 07		and #$07	              AND #$07
.393f6a	0a		asl a		              ASL
.393f6b	85 32		sta $32		              STA OPL2_PARAMETER0
.393f6d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f6f	29 01		and #$01	              AND #$01
.393f71	05 32		ora $32		              ORA OPL2_PARAMETER0
.393f73	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f75	6b		rtl		                RTL
.393f76					OPL2_SET_SYNTHMODE
.393f76	48		pha		                PHA             ; begin setdp macro
.393f77	08		php		                PHP
.393f78	c2 20		rep #$20	                REP #$20        ; set A long
.393f7a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f7d	5b		tcd		                TCD
.393f7e	28		plp		                PLP
.393f7f	68		pla		                PLA             ; end setdp macro
.393f80	08		php		              PHP ; Push the Carry
.393f81	e2 20		sep #$20	                SEP #$20        ; set A short
.393f83	18		clc		              CLC
.393f84	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f86	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f88	69 c0		adc #$c0	              ADC #$C0
.393f8a	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f8c	a9 00		lda #$00	              LDA #$00
.393f8e	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f90	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f92	18		clc		              CLC
.393f93	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f96	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f98	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f9a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f9d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f9f	28		plp		              PLP ; Pull the Carry out
.393fa0	e2 20		sep #$20	                SEP #$20        ; set A short
.393fa2	b0 08		bcs $393fac	              BCS OPL2_Set_Synthmode_Set;
.393fa4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fa6	29 fe		and #$fe	              AND #$FE
.393fa8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393faa	80 06		bra $393fb2	              BRA OPL2_Set_Synthmode_Exit
.393fac					OPL2_Set_Synthmode_Set
.393fac	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fae	09 01		ora #$01	              ORA #$01
.393fb0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fb2					OPL2_Set_Synthmode_Exit
.393fb2	6b		rtl		                RTL
.393fb3					OPL2_SET_DEEPTREMOLO
.393fb3	48		pha		                PHA             ; begin setdp macro
.393fb4	08		php		                PHP
.393fb5	c2 20		rep #$20	                REP #$20        ; set A long
.393fb7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fba	5b		tcd		                TCD
.393fbb	28		plp		                PLP
.393fbc	68		pla		                PLA             ; end setdp macro
.393fbd	c2 20		rep #$20	                REP #$20        ; set A long
.393fbf	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393fc2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fc4	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fc7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fc9	e2 20		sep #$20	                SEP #$20        ; set A short
.393fcb	b0 08		bcs $393fd5	              BCS OPL2_Set_DeepTremolo_Set;
.393fcd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fcf	29 7f		and #$7f	              AND #$7F
.393fd1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fd3	80 06		bra $393fdb	              BRA OPL2_Set_DeepTremolo_Exit
.393fd5					OPL2_Set_DeepTremolo_Set
.393fd5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fd7	09 80		ora #$80	              ORA #$80
.393fd9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fdb					OPL2_Set_DeepTremolo_Exit
.393fdb	6b		rtl		                RTL
.393fdc					OPL2_SET_DEEPVIBRATO
.393fdc	48		pha		                PHA             ; begin setdp macro
.393fdd	08		php		                PHP
.393fde	c2 20		rep #$20	                REP #$20        ; set A long
.393fe0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fe3	5b		tcd		                TCD
.393fe4	28		plp		                PLP
.393fe5	68		pla		                PLA             ; end setdp macro
.393fe6	c2 20		rep #$20	                REP #$20        ; set A long
.393fe8	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393feb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fed	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ff0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ff2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff4	b0 08		bcs $393ffe	              BCS OPL2_Set_DeepVibrato_Set;
.393ff6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ff8	29 bf		and #$bf	              AND #$BF
.393ffa	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ffc	80 06		bra $394004	              BRA OPL2_Set_DeepVibrato_Exit
.393ffe					OPL2_Set_DeepVibrato_Set
.393ffe	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394000	09 40		ora #$40	              ORA #$40
.394002	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394004					OPL2_Set_DeepVibrato_Exit
.394004	6b		rtl		                RTL
.394005					OPL2_SET_PERCUSSION
.394005	48		pha		                PHA             ; begin setdp macro
.394006	08		php		                PHP
.394007	c2 20		rep #$20	                REP #$20        ; set A long
.394009	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39400c	5b		tcd		                TCD
.39400d	28		plp		                PLP
.39400e	68		pla		                PLA             ; end setdp macro
.39400f	c2 20		rep #$20	                REP #$20        ; set A long
.394011	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394014	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394016	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394019	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39401b	e2 20		sep #$20	                SEP #$20        ; set A short
.39401d	b0 08		bcs $394027	                BCS OPL2_Set_Percussion_Set;
.39401f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394021	29 df		and #$df	                AND #$DF
.394023	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394025	80 06		bra $39402d	                BRA OPL2_Set_Percussion_Exit
.394027					OPL2_Set_Percussion_Set
.394027	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394029	09 20		ora #$20	                ORA #$20
.39402b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39402d					OPL2_Set_Percussion_Exit
.39402d	6b		rtl		                RTL
.39402e					OPL2_SET_DRUMS
.39402e	48		pha		                PHA             ; begin setdp macro
.39402f	08		php		                PHP
.394030	c2 20		rep #$20	                REP #$20        ; set A long
.394032	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394035	5b		tcd		                TCD
.394036	28		plp		                PLP
.394037	68		pla		                PLA             ; end setdp macro
.394038	c2 20		rep #$20	                REP #$20        ; set A long
.39403a	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39403d	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39403f	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394042	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394044	e2 20		sep #$20	                SEP #$20        ; set A short
.394046	a5 32		lda $32		                LDA OPL2_PARAMETER0
.394048	29 1f		and #$1f	                AND #$1F
.39404a	85 32		sta $32		                STA OPL2_PARAMETER0
.39404c	49 ff		eor #$ff	                EOR #$FF
.39404e	85 33		sta $33		                STA OPL2_PARAMETER1
.394050	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394052	25 33		and $33		                AND OPL2_PARAMETER1
.394054	05 32		ora $32		                ORA OPL2_PARAMETER0
.394056	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394058	6b		rtl		                RTL
.394059					OPL2_SET_WAVEFORM
.394059	48		pha		                PHA             ; begin setdp macro
.39405a	08		php		                PHP
.39405b	c2 20		rep #$20	                REP #$20        ; set A long
.39405d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394060	5b		tcd		                TCD
.394061	28		plp		                PLP
.394062	68		pla		                PLA             ; end setdp macro
.394063	c2 20		rep #$20	                REP #$20        ; set A long
.394065	a9 e0 00	lda #$00e0	                LDA #$00E0;
.394068	85 28		sta $28		                STA OPL2_REG_REGION
.39406a	20 7e 40	jsr $39407e	                JSR OPL2_GET_REG_OFFSET
.39406d	e2 20		sep #$20	                SEP #$20        ; set A short
.39406f	a5 32		lda $32		                LDA OPL2_PARAMETER0
.394071	29 03		and #$03	                AND #$03
.394073	85 32		sta $32		                STA OPL2_PARAMETER0
.394075	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394077	29 fc		and #$fc	                AND #$FC
.394079	05 32		ora $32		                ORA OPL2_PARAMETER0
.39407b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39407d	6b		rtl		                RTL
.39407e					OPL2_GET_REG_OFFSET
.39407e	e2 30		sep #$30	                SEP #$30        ; set A&X short
.394080	a5 27		lda $27		                LDA OPL2_CHANNEL
.394082	29 0f		and #$0f	                AND #$0F
.394084	aa		tax		                TAX
.394085	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.394087	d0 06		bne $39408f	                BNE OPL2_Get_Register_Offset_l0
.394089	bf c6 16 39	lda $3916c6,x	                LDA @lregisterOffsets_operator0, X
.39408d	80 04		bra $394093	                BRA OPL2_Get_Register_Offset_exit
.39408f					OPL2_Get_Register_Offset_l0
.39408f	bf cf 16 39	lda $3916cf,x	                LDA @lregisterOffsets_operator1, X
.394093					OPL2_Get_Register_Offset_exit
.394093	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.394095	a9 00		lda #$00	                LDA #$00
.394097	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.394099	c2 30		rep #$30	                REP #$30        ; set A&X long
.39409b	18		clc		                CLC
.39409c	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.39409f	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940a1	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940a3	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940a5	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940a8	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940aa	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940ab					ITRACE
.3940ab	08		php		                PHP
.3940ac	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940ae	8b		phb		                PHB                 ; Print the text
.3940af	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940b1	aa		tax		                TAX                 ; ... into X
.3940b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3940b4	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940b6	48		pha		                PHA
.3940b7	ab		plb		                PLB                 ; ... into B
.3940b8	22 8b 07 39	jsl $39078b	                JSL IPUTS           ; Print the string
.3940bc	c2 20		rep #$20	                REP #$20        ; set A long
.3940be	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940c0	83 08		sta $08,s	                STA #8,S
.3940c2	a3 02		lda $02,s	                LDA #2,S
.3940c4	83 06		sta $06,s	                STA #6,S
.3940c6	ab		plb		                PLB
.3940c7	68		pla		                PLA                 ; Clean up the stack
.3940c8	68		pla		                PLA
.3940c9	28		plp		                PLP
.3940ca	6b		rtl		                RTL
.3940cb					ISETTIMEOUT
.3940cb	8b		phb		                PHB
.3940cc	0b		phd		                PHD
.3940cd	08		php		                PHP
.3940ce	48		pha		                PHA             ; begin setdbr macro
.3940cf	08		php		                PHP
.3940d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3940d2	a9 00		lda #$00	                LDA #0
.3940d4	48		pha		                PHA
.3940d5	ab		plb		                PLB
.3940d6	28		plp		                PLP
.3940d7	68		pla		                PLA             ; end setdbr macro
.3940d8	48		pha		                PHA             ; begin setdp macro
.3940d9	08		php		                PHP
.3940da	c2 20		rep #$20	                REP #$20        ; set A long
.3940dc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940df	5b		tcd		                TCD
.3940e0	28		plp		                PLP
.3940e1	68		pla		                PLA             ; end setdp macro
.3940e2	78		sei		                SEI                             ; We don't want to be interrupted
.3940e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3940e5	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.3940e7	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.3940e9	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.3940eb	85 0c		sta $032c	                STA @b BIOS_FLAGS
.3940ed	28		plp		done            PLP
.3940ee	2b		pld		                PLD
.3940ef	ab		plb		                PLB
.3940f0	6b		rtl		                RTL
.3940f1					ICMDBLOCK
.3940f1	0b		phd		                PHD
.3940f2	08		php		                PHP
.3940f3	48		pha		                PHA             ; begin setdp macro
.3940f4	08		php		                PHP
.3940f5	c2 20		rep #$20	                REP #$20        ; set A long
.3940f7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940fa	5b		tcd		                TCD
.3940fb	28		plp		                PLP
.3940fc	68		pla		                PLA             ; end setdp macro
.3940fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3940ff	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394101	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394103	d0 06		bne $39410b	                BNE ret_success             ; No: just return
.394105	22 f1 67 39	jsl $3967f1	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.394109	90 0c		bcc $394117	                BCC pass_failure
.39410b					ret_success
.39410b	e2 20		sep #$20	                SEP #$20        ; set A short
.39410d	64 00		stz $0320	                STZ BIOS_STATUS
.39410f	28		plp		                PLP
.394110	2b		pld		                PLD
.394111	38		sec		                SEC
.394112	6b		rtl		                RTL
.394113					ret_failure
.394113	e2 20		sep #$20	                SEP #$20        ; set A short
.394115	85 00		sta $0320	                STA BIOS_STATUS
.394117	28		plp		pass_failure    PLP
.394118	2b		pld		                PLD
.394119	18		clc		                CLC
.39411a	6b		rtl		                RTL
.39411b					IGETBLOCK
.39411b	0b		phd		                PHD
.39411c	8b		phb		                PHB
.39411d	08		php		                PHP
.39411e	48		pha		                PHA             ; begin setdbr macro
.39411f	08		php		                PHP
.394120	e2 20		sep #$20	                SEP #$20        ; set A short
.394122	a9 00		lda #$00	                LDA #0
.394124	48		pha		                PHA
.394125	ab		plb		                PLB
.394126	28		plp		                PLP
.394127	68		pla		                PLA             ; end setdbr macro
.394128	48		pha		                PHA             ; begin setdp macro
.394129	08		php		                PHP
.39412a	c2 20		rep #$20	                REP #$20        ; set A long
.39412c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39412f	5b		tcd		                TCD
.394130	28		plp		                PLP
.394131	68		pla		                PLA             ; end setdp macro
.394132	e2 20		sep #$20	                SEP #$20        ; set A short
.394134	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394136	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394138	f0 13		beq $39414d	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.39413a	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39413c	f0 17		beq $394155	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.39413e	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394140	f0 1b		beq $39415d	                BEQ hd_getblock
.394142	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394144					ret_failure
.394144	e2 20		sep #$20	                SEP #$20        ; set A short
.394146	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394148	28		plp		                PLP
.394149	ab		plb		                PLB
.39414a	2b		pld		                PLD
.39414b	38		sec		                SEC                                 ; Return failure
.39414c	6b		rtl		                RTL
.39414d	22 1b 5d 39	jsl $395d1b	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394151	b0 12		bcs $394165	                BCS ret_success
.394153	80 ef		bra $394144	                BRA ret_failure
.394155	22 fa 65 39	jsl $3965fa	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.394159	b0 0a		bcs $394165	                BCS ret_success
.39415b	80 e7		bra $394144	                BRA ret_failure
.39415d	22 b2 6b 39	jsl $396bb2	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394161	b0 02		bcs $394165	                BCS ret_success
.394163	80 df		bra $394144	                BRA ret_failure
.394165					ret_success
.394165	e2 20		sep #$20	                SEP #$20        ; set A short
.394167	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394169	28		plp		                PLP
.39416a	ab		plb		                PLB
.39416b	2b		pld		                PLD
.39416c	38		sec		                SEC                                 ; Return success
.39416d	6b		rtl		                RTL
.39416e					IPUTBLOCK
.39416e	0b		phd		                PHD
.39416f	8b		phb		                PHB
.394170	08		php		                PHP
.394171	48		pha		                PHA             ; begin setdbr macro
.394172	08		php		                PHP
.394173	e2 20		sep #$20	                SEP #$20        ; set A short
.394175	a9 00		lda #$00	                LDA #0
.394177	48		pha		                PHA
.394178	ab		plb		                PLB
.394179	28		plp		                PLP
.39417a	68		pla		                PLA             ; end setdbr macro
.39417b	48		pha		                PHA             ; begin setdp macro
.39417c	08		php		                PHP
.39417d	c2 20		rep #$20	                REP #$20        ; set A long
.39417f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394182	5b		tcd		                TCD
.394183	28		plp		                PLP
.394184	68		pla		                PLA             ; end setdp macro
.394185	e2 20		sep #$20	                SEP #$20        ; set A short
.394187	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394189	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.39418b	f0 13		beq $3941a0	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.39418d	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.39418f	f0 17		beq $3941a8	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.394191	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394193	f0 1b		beq $3941b0	                BEQ hd_putblock
.394195	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394197					ret_failure
.394197	e2 20		sep #$20	                SEP #$20        ; set A short
.394199	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.39419b	28		plp		                PLP
.39419c	ab		plb		                PLB
.39419d	2b		pld		                PLD
.39419e	18		clc		                CLC                                 ; Return failure
.39419f	6b		rtl		                RTL
.3941a0	22 bb 5d 39	jsl $395dbb	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941a4	90 f1		bcc $394197	                BCC ret_failure
.3941a6	80 10		bra $3941b8	                BRA ret_success
.3941a8	22 5f 66 39	jsl $39665f	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941ac	90 e9		bcc $394197	                BCC ret_failure
.3941ae	80 08		bra $3941b8	                BRA ret_success
.3941b0	22 43 6c 39	jsl $396c43	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941b4	90 e1		bcc $394197	                BCC ret_failure
.3941b6	80 00		bra $3941b8	                BRA ret_success
.3941b8					ret_success
.3941b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ba	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941bc	28		plp		                PLP
.3941bd	ab		plb		                PLB
.3941be	2b		pld		                PLD
.3941bf	38		sec		                SEC                                 ; Return success
.3941c0	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941c1					DOS_DIROPEN
.3941c1	da		phx		                PHX
.3941c2	5a		phy		                PHY
.3941c3	0b		phd		                PHD
.3941c4	8b		phb		                PHB
.3941c5	08		php		                PHP
.3941c6	48		pha		                PHA             ; begin setdbr macro
.3941c7	08		php		                PHP
.3941c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ca	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941cc	48		pha		                PHA
.3941cd	ab		plb		                PLB
.3941ce	28		plp		                PLP
.3941cf	68		pla		                PLA             ; end setdbr macro
.3941d0	48		pha		                PHA             ; begin setdp macro
.3941d1	08		php		                PHP
.3941d2	c2 20		rep #$20	                REP #$20        ; set A long
.3941d4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941d7	5b		tcd		                TCD
.3941d8	28		plp		                PLP
.3941d9	68		pla		                PLA             ; end setdp macro
.3941da	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.3941dd	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.3941e0	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3941e3	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3941e6	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.3941e9	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3941eb	85 18		sta $0338	                STA DOS_DIR_PTR
.3941ed	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941f0	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3941f2	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f6	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.3941f9	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.3941fb	d0 24		bne $394221	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.3941fd					fetch_fat12
.3941fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ff	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394201	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394204	c2 20		rep #$20	                REP #$20        ; set A long
.394206	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394208	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39420a	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39420c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39420e	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394211	85 02		sta $0322	                STA BIOS_LBA
.394213	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394216	85 04		sta $0324	                STA BIOS_LBA+2
.394218	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39421c	b0 1f		bcs $39423d	                BCS do_success              ; If sucessful, set the directory cursor
.39421e	82 80 16	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394221					fetch_fat32
.394221	e2 20		sep #$20	                SEP #$20        ; set A short
.394223	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394225	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394228	c2 20		rep #$20	                REP #$20        ; set A long
.39422a	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39422d	85 10		sta $0330	                STA DOS_CLUS_ID
.39422f	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394232	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394234	22 50 47 39	jsl $394750	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394238	b0 03		bcs $39423d	                BCS do_success              ; If successful: set the directory cursor
.39423a	82 64 16	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39423d	82 68 16	brl $3958a8	do_success      BRL IF_SUCCESS
.394240					DOS_DIRFIRST
.394240	0b		phd		                PHD
.394241	08		php		                PHP
.394242	48		pha		                PHA             ; begin setdp macro
.394243	08		php		                PHP
.394244	c2 20		rep #$20	                REP #$20        ; set A long
.394246	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394249	5b		tcd		                TCD
.39424a	28		plp		                PLP
.39424b	68		pla		                PLA             ; end setdp macro
.39424c	c2 20		rep #$20	                REP #$20        ; set A long
.39424e	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394251	85 18		sta $0338	                STA DOS_DIR_PTR
.394253	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394256	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394258	28		plp		                PLP
.394259	2b		pld		                PLD
.39425a	6b		rtl		                RTL
.39425b					DOS_DIRNEXT
.39425b	da		phx		                PHX
.39425c	5a		phy		                PHY
.39425d	0b		phd		                PHD
.39425e	8b		phb		                PHB
.39425f	08		php		                PHP
.394260	48		pha		                PHA             ; begin setdbr macro
.394261	08		php		                PHP
.394262	e2 20		sep #$20	                SEP #$20        ; set A short
.394264	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394266	48		pha		                PHA
.394267	ab		plb		                PLB
.394268	28		plp		                PLP
.394269	68		pla		                PLA             ; end setdbr macro
.39426a	48		pha		                PHA             ; begin setdp macro
.39426b	08		php		                PHP
.39426c	c2 20		rep #$20	                REP #$20        ; set A long
.39426e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394271	5b		tcd		                TCD
.394272	28		plp		                PLP
.394273	68		pla		                PLA             ; end setdp macro
.394274	c2 20		rep #$20	                REP #$20        ; set A long
.394276	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.394277	a5 18		lda $0338	                LDA DOS_DIR_PTR
.394279	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.39427c	85 18		sta $0338	                STA DOS_DIR_PTR
.39427e	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394280	69 00 00	adc #$0000	                ADC #0
.394283	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394285	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.394286	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.394289	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.39428b	85 28		sta $0348	                STA DOS_TEMP
.39428d	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.394290	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.394292	85 2a		sta $034a	                STA DOS_TEMP+2
.394294	30 0c		bmi $3942a2	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.394296	f0 03		beq $39429b	                BEQ check_lower
.394298	82 0d 16	brl $3958a8	                BRL IF_SUCCESS
.39429b	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.39429d	f0 03		beq $3942a2	                BEQ get_next_block
.39429f	82 06 16	brl $3958a8	                BRL IF_SUCCESS
.3942a2					get_next_block
.3942a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3942a4	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942a7	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942a9	f0 38		beq $3942e3	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942ab					next_sector
.3942ab	c2 20		rep #$20	                REP #$20        ; set A long
.3942ad	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942b0	1a		inc a		                INC A
.3942b1	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942b4	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942b7	d0 07		bne $3942c0	                BNE read_sector
.3942b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3942bb	a9 00		lda #$00	                LDA #0
.3942bd	82 dd 15	brl $39589d	                BRL IF_FAILURE
.3942c0					read_sector
.3942c0	c2 20		rep #$20	                REP #$20        ; set A long
.3942c2	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3942c5	85 02		sta $0322	                STA BIOS_LBA
.3942c7	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942ca	85 04		sta $0324	                STA BIOS_LBA+2
.3942cc	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3942cf	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942d1	85 18		sta $0338	                STA DOS_DIR_PTR
.3942d3	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942d6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942d8	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942da	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.3942de	b0 39		bcs $394319	                BCS do_success              ; If successful: set the directory cursor
.3942e0	82 be 15	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3942e3					next_cluster
.3942e3	c2 20		rep #$20	                REP #$20        ; set A long
.3942e5	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.3942e8	85 10		sta $0330	                STA DOS_CLUS_ID
.3942ea	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942ed	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942ef	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3942f2	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942f4	85 18		sta $0338	                STA DOS_DIR_PTR
.3942f6	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942f9	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942fb	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942fd	22 5b 4b 39	jsl $394b5b	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394301	b0 03		bcs $394306	                BCS set_next
.394303	82 9b 15	brl $3958a1	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394306	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394308	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.39430b	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39430d	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394310	22 50 47 39	jsl $394750	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394314	b0 03		bcs $394319	                BCS do_success              ; If successful: set the directory cursor
.394316	82 88 15	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394319	82 8c 15	brl $3958a8	do_success      BRL IF_SUCCESS
.39431c					DOS_DIRFINDFREE
.39431c	da		phx		                PHX
.39431d	5a		phy		                PHY
.39431e	0b		phd		                PHD
.39431f	8b		phb		                PHB
.394320	08		php		                PHP
.394321	48		pha		                PHA             ; begin setdbr macro
.394322	08		php		                PHP
.394323	e2 20		sep #$20	                SEP #$20        ; set A short
.394325	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394327	48		pha		                PHA
.394328	ab		plb		                PLB
.394329	28		plp		                PLP
.39432a	68		pla		                PLA             ; end setdbr macro
.39432b	48		pha		                PHA             ; begin setdp macro
.39432c	08		php		                PHP
.39432d	c2 20		rep #$20	                REP #$20        ; set A long
.39432f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394332	5b		tcd		                TCD
.394333	28		plp		                PLP
.394334	68		pla		                PLA             ; end setdp macro
.394335	22 39 55 39	jsl $395539	                JSL IF_DIROPEN
.394339	b0 06		bcs $394341	                BCS start_walk
.39433b	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.39433e	82 28 00	brl $394369	                BRL ret_failure
.394341	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394344					chk_entry
.394344	e2 20		sep #$20	                SEP #$20        ; set A short
.394346	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394348	f0 1c		beq $394366	                BEQ ret_success             ; If 0: we have a blank... return it
.39434a	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39434c	f0 18		beq $394366	                BEQ ret_success             ; Yes: return it
.39434e	22 73 55 39	jsl $395573	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394352	b0 ed		bcs $394341	                BCS start_walk              ; If we got one, start walking it
.394354	22 6c 43 39	jsl $39436c	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.394358	90 0f		bcc $394369	                BCC ret_failure             ; If that didn't work, return the failure
.39435a	c2 20		rep #$20	                REP #$20        ; set A long
.39435c	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.39435f	85 18		sta $0338	                STA DOS_DIR_PTR
.394361	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394364	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394366	82 3f 15	brl $3958a8	ret_success     BRL IF_SUCCESS
.394369	82 31 15	brl $39589d	ret_failure     BRL IF_FAILURE
.39436c					DOS_DIRAPPEND
.39436c	da		phx		                PHX
.39436d	8b		phb		                PHB
.39436e	0b		phd		                PHD
.39436f	08		php		                PHP
.394370	48		pha		                PHA             ; begin setdbr macro
.394371	08		php		                PHP
.394372	e2 20		sep #$20	                SEP #$20        ; set A short
.394374	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394376	48		pha		                PHA
.394377	ab		plb		                PLB
.394378	28		plp		                PLP
.394379	68		pla		                PLA             ; end setdbr macro
.39437a	48		pha		                PHA             ; begin setdp macro
.39437b	08		php		                PHP
.39437c	c2 20		rep #$20	                REP #$20        ; set A long
.39437e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394381	5b		tcd		                TCD
.394382	28		plp		                PLP
.394383	68		pla		                PLA             ; end setdp macro
.394384	e2 20		sep #$20	                SEP #$20        ; set A short
.394386	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.394389	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.39438b	f0 09		beq $394396	                BEQ clr_sector                  ; Yes: clear out the directory data
.39438d					ret_failure
.39438d	e2 20		sep #$20	                SEP #$20        ; set A short
.39438f	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.394391	85 0e		sta $032e	                STA DOS_STATUS
.394393	82 3e 00	brl $3943d4	                BRL pass_failure
.394396					clr_sector
.394396	c2 20		rep #$20	                REP #$20        ; set A long
.394398	a9 00 00	lda #$0000	                LDA #0
.39439b	a2 00 00	ldx #$0000	                LDX #0
.39439e	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943a1	e8		inx		                INX
.3943a2	e8		inx		                INX
.3943a3	e0 00 02	cpx #$0200	                CPX #512
.3943a6	d0 f6		bne $39439e	                BNE clr_loop
.3943a8	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943ab	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943ad	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943b0	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943b2	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943b5	85 10		sta $0330	                STA DOS_CLUS_ID
.3943b7	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943ba	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943bc	22 4f 4f 39	jsl $394f4f	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943c0	90 12		bcc $3943d4	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943c2	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3943c5	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943c8	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3943cb	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3943ce	28		plp		ret_success     PLP
.3943cf	2b		pld		                PLD
.3943d0	ab		plb		                PLB
.3943d1	fa		plx		                PLX
.3943d2	38		sec		                SEC
.3943d3	6b		rtl		                RTL
.3943d4	28		plp		pass_failure    PLP
.3943d5	2b		pld		                PLD
.3943d6	ab		plb		                PLB
.3943d7	fa		plx		                PLX
.3943d8	18		clc		                CLC
.3943d9	6b		rtl		                RTL
.3943da					DOS_DIRWRITE
.3943da	da		phx		                PHX
.3943db	5a		phy		                PHY
.3943dc	0b		phd		                PHD
.3943dd	8b		phb		                PHB
.3943de	08		php		                PHP
.3943df	48		pha		                PHA             ; begin setdbr macro
.3943e0	08		php		                PHP
.3943e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3943e3	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943e5	48		pha		                PHA
.3943e6	ab		plb		                PLB
.3943e7	28		plp		                PLP
.3943e8	68		pla		                PLA             ; end setdbr macro
.3943e9	48		pha		                PHA             ; begin setdp macro
.3943ea	08		php		                PHP
.3943eb	c2 20		rep #$20	                REP #$20        ; set A long
.3943ed	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943f0	5b		tcd		                TCD
.3943f1	28		plp		                PLP
.3943f2	68		pla		                PLA             ; end setdp macro
.3943f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3943f5	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3943f8	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.3943fa	f0 1f		beq $39441b	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.3943fc					write_sector
.3943fc	c2 20		rep #$20	                REP #$20        ; set A long
.3943fe	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394401	85 02		sta $0322	                STA BIOS_LBA
.394403	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394406	85 04		sta $0324	                STA BIOS_LBA+2
.394408	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39440b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39440d	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394410	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394412	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394416	b0 1f		bcs $394437	                BCS ret_success
.394418	82 82 14	brl $39589d	ret_failure     BRL IF_FAILURE
.39441b					write_cluster
.39441b	c2 20		rep #$20	                REP #$20        ; set A long
.39441d	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394420	85 10		sta $0330	                STA DOS_CLUS_ID
.394422	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394425	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394427	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39442a	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39442c	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39442f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394431	22 8d 47 39	jsl $39478d	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394435	90 e1		bcc $394418	                BCC ret_failure
.394437	82 6e 14	brl $3958a8	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.39443a					DOS_INIT
.39443a	8b		phb		                PHB
.39443b	0b		phd		                PHD
.39443c	08		php		                PHP
.39443d	48		pha		                PHA             ; begin setdbr macro
.39443e	08		php		                PHP
.39443f	e2 20		sep #$20	                SEP #$20        ; set A short
.394441	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394443	48		pha		                PHA
.394444	ab		plb		                PLB
.394445	28		plp		                PLP
.394446	68		pla		                PLA             ; end setdbr macro
.394447	48		pha		                PHA             ; begin setdp macro
.394448	08		php		                PHP
.394449	c2 20		rep #$20	                REP #$20        ; set A long
.39444b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39444e	5b		tcd		                TCD
.39444f	28		plp		                PLP
.394450	68		pla		                PLA             ; end setdp macro
.394451	c2 20		rep #$20	                REP #$20        ; set A long
.394453	a9 e5 47	lda #$47e5	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394456	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39445a	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.39445d	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394461	e2 20		sep #$20	                SEP #$20        ; set A short
.394463	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394465	85 01		sta $0321	                STA BIOS_DEV
.394467	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.394469	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39446d	a9 00		lda #$00	                LDA #0
.39446f	a2 00 00	ldx #$0000	                LDX #0
.394472	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394475	e8		inx		                INX
.394476	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.394479	d0 f7		bne $394472	                BNE fd_zero_loop
.39447b	a9 00		lda #$00	                LDA #0
.39447d	a2 00 00	ldx #$0000	                LDX #0
.394480	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.394483	e8		inx		                INX
.394484	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394487	d0 f7		bne $394480	                BNE sect_zero_loop
.394489	c2 20		rep #$20	                REP #$20        ; set A long
.39448b	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.39448e	85 20		sta $0340	                STA @b DOS_FD_PTR
.394490	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394493	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394495	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394498	85 28		sta $0348	                STA @b DOS_TEMP
.39449a	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39449d	85 2a		sta $034a	                STA @b DOS_TEMP+2
.39449f	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.3944a2	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.3944a5	a5 28		lda $0348	                LDA @b DOS_TEMP
.3944a7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3944a9	c8		iny		                INY
.3944aa	c8		iny		                INY
.3944ab	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3944ad	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3944af	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.3944b0	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.3944b2	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3944b5	85 20		sta $0340	                STA @b DOS_FD_PTR
.3944b7	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3944b9	69 00 00	adc #$0000	                ADC #0
.3944bc	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3944be	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.3944bf	a5 28		lda $0348	                LDA @b DOS_TEMP
.3944c1	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.3944c4	85 28		sta $0348	                STA @b DOS_TEMP
.3944c6	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3944c8	69 00 00	adc #$0000	                ADC #0
.3944cb	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3944cd	ca		dex		                DEX                     ; Count down the descriptors...
.3944ce	d0 d2		bne $3944a2	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.3944d0	28		plp		                PLP
.3944d1	2b		pld		                PLD
.3944d2	ab		plb		                PLB
.3944d3	6b		rtl		                RTL
.3944d4					DOS_MOUNT
.3944d4	8b		phb		                PHB
.3944d5	0b		phd		                PHD
.3944d6	08		php		                PHP
.3944d7	48		pha		                PHA             ; begin setdbr macro
.3944d8	08		php		                PHP
.3944d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3944db	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944dd	48		pha		                PHA
.3944de	ab		plb		                PLB
.3944df	28		plp		                PLP
.3944e0	68		pla		                PLA             ; end setdbr macro
.3944e1	48		pha		                PHA             ; begin setdp macro
.3944e2	08		php		                PHP
.3944e3	c2 20		rep #$20	                REP #$20        ; set A long
.3944e5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944e8	5b		tcd		                TCD
.3944e9	28		plp		                PLP
.3944ea	68		pla		                PLA             ; end setdp macro
.3944eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3944ed	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.3944ef	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.3944f3	d0 03		bne $3944f8	                BNE try_mount           ; No: try to moount it
.3944f5	82 69 01	brl $394661	                BRL ret_success         ; Yes: just return success
.3944f8	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.3944fc	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3944fe	f0 1f		beq $39451f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394500	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394502	f0 26		beq $39452a	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394504	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394506	f0 0b		beq $394513	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394508	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39450a	85 0e		sta $032e	                STA DOS_STATUS
.39450c	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39450e	85 00		sta $0320	                STA BIOS_STATUS
.394510	82 57 01	brl $39466a	                BRL ret_failure
.394513	22 cb 66 39	jsl $3966cb	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394517	b0 03		bcs $39451c	                BCS fdc_success
.394519	82 4e 01	brl $39466a	                BRL ret_failure
.39451c	82 42 01	brl $394661	fdc_success     BRL ret_success
.39451f	22 d9 5c 39	jsl $395cd9	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394523	b0 10		bcs $394535	                BCS get_mbr             ; Continue if success
.394525	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394527	82 40 01	brl $39466a	                BRL ret_failure
.39452a	22 bd 6a 39	jsl $396abd	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.39452e	b0 05		bcs $394535	                BCS get_mbr             ; Continue if success
.394530	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394532	82 35 01	brl $39466a	                BRL ret_failure
.394535					get_mbr
.394535	c2 30		rep #$30	                REP #$30        ; set A&X long
.394537	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.394539	64 04		stz $0324	                STZ BIOS_LBA+2
.39453b	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.39453e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394540	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394543	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394545	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.394549	b0 07		bcs $394552	                BCS chk_signature       ; If success, check the signature bytes
.39454b	e2 20		sep #$20	                SEP #$20        ; set A short
.39454d	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.39454f	82 18 01	brl $39466a	                BRL ret_failure
.394552					chk_signature
.394552	e2 20		sep #$20	                SEP #$20        ; set A short
.394554	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394557	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394559	d0 07		bne $394562	                BNE not_mbr             ; No: signal we could find the MBR
.39455b	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39455e	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394560	f0 05		beq $394567	                BEQ chk_part_type       ; Yes: we have an MBR
.394562	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394564	82 03 01	brl $39466a	                BRL ret_failure
.394567	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39456a	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39456c	f0 05		beq $394573	                BEQ get_LBA             ; Is FAT32 with LBA?
.39456e	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394570	82 f7 00	brl $39466a	                BRL ret_failure
.394573	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394576	c2 20		rep #$20	                REP #$20        ; set A long
.394578	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39457b	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.39457e	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394581	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.394584	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394587	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.39458a	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39458d	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394590	e2 20		sep #$20	                SEP #$20        ; set A short
.394592	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394594	8d 00 a0	sta $38a000	                STA DEVICE
.394597	a9 00		lda #$00	                LDA #0
.394599	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39459c	c2 20		rep #$20	                REP #$20        ; set A long
.39459e	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3945a1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945a3	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945a6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945a8	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3945ab	85 02		sta $0322	                STA BIOS_LBA
.3945ad	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3945b0	85 04		sta $0324	                STA BIOS_LBA+2
.3945b2	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3945b6	b0 1c		bcs $3945d4	                BCS get_first_sec       ; Got it? Start parsing it
.3945b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ba	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3945bc	82 ab 00	brl $39466a	                BRL ret_failure
.3945bf					chk_bpb_sig
.3945bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3945c1	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3945c4	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945c6	d0 07		bne $3945cf	                BNE not_bpb             ; No: signal we could find the volume ID
.3945c8	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3945cb	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945cd	f0 05		beq $3945d4	                BEQ get_first_sec       ; Yes: we have an volume ID
.3945cf	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3945d1	82 96 00	brl $39466a	                BRL ret_failure
.3945d4					get_first_sec
.3945d4	c2 20		rep #$20	                REP #$20        ; set A long
.3945d6	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3945d9	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3945dc	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.3945df	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3945e2	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3945e5	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.3945e8	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3945e9	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3945ec	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.3945ef	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.3945f2	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3945f5	69 00 00	adc #$0000	                ADC #0
.3945f8	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3945fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3945fd	a2 00 00	ldx #$0000	                LDX #0
.394600	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394604	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394608	e8		inx		                INX
.394609	e0 04 00	cpx #$0004	                CPX #4
.39460c	d0 f2		bne $394600	                BNE cpy_secperfat
.39460e	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394611	0a		asl a		                ASL A
.394612	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394615	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394618	2a		rol a		                ROL A
.394619	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39461c	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.39461f	2a		rol a		                ROL A
.394620	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394623	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394626	2a		rol a		                ROL A
.394627	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39462a	18		clc		                CLC
.39462b	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.39462e	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394631	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394634	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.394637	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.39463a	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39463d	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394640	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394643	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394646	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.394649	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39464c	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39464f	e2 20		sep #$20	                SEP #$20        ; set A short
.394651	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394654	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394657	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.394659	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.39465c	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.39465e	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394661					ret_success
.394661	e2 20		sep #$20	                SEP #$20        ; set A short
.394663	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394665	28		plp		                PLP
.394666	2b		pld		                PLD
.394667	ab		plb		                PLB
.394668	38		sec		                SEC
.394669	6b		rtl		                RTL
.39466a					ret_failure
.39466a	e2 20		sep #$20	                SEP #$20        ; set A short
.39466c	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39466e	28		plp		                PLP
.39466f	2b		pld		                PLD
.394670	ab		plb		                PLB
.394671	18		clc		                CLC
.394672	6b		rtl		                RTL
.394673					DOS_TESTBOOT
.394673	8b		phb		                PHB
.394674	0b		phd		                PHD
.394675	da		phx		                PHX
.394676	08		php		                PHP
.394677	48		pha		                PHA             ; begin setdbr macro
.394678	08		php		                PHP
.394679	e2 20		sep #$20	                SEP #$20        ; set A short
.39467b	a9 00		lda #$00	                LDA #0
.39467d	48		pha		                PHA
.39467e	ab		plb		                PLB
.39467f	28		plp		                PLP
.394680	68		pla		                PLA             ; end setdbr macro
.394681	48		pha		                PHA             ; begin setdp macro
.394682	08		php		                PHP
.394683	c2 20		rep #$20	                REP #$20        ; set A long
.394685	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394688	5b		tcd		                TCD
.394689	28		plp		                PLP
.39468a	68		pla		                PLA             ; end setdp macro
.39468b	c2 10		rep #$10	                REP #$10        ; set X long
.39468d					chk_dev
.39468d	e2 20		sep #$20	                SEP #$20        ; set A short
.39468f	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394691	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394693	f0 24		beq $3946b9	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394695	c2 30		rep #$30	                REP #$30        ; set A&X long
.394697	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.39469a	85 02		sta $0322	                STA @b BIOS_LBA
.39469c	85 04		sta $0324	                STA @b BIOS_LBA+2
.39469e	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.3946a1	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.3946a3	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3946a6	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.3946a8	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.3946ac	b0 03		bcs $3946b1	                BCS chk_mbr_brl
.3946ae	82 47 00	brl $3946f8	                BRL done                    ; If failed... just return
.3946b1					chk_mbr_brl
.3946b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3946b3	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3946b7	80 04		bra $3946bd	                BRA chk_brl
.3946b9	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3946bd	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3946bf	f0 06		beq $3946c7	                BEQ chk_magic               ; Yes: check for the magic text
.3946c1	c9 82		cmp #$82	                CMP #$82
.3946c3	f0 02		beq $3946c7	                BEQ chk_magic
.3946c5	80 31		bra $3946f8	                BRA done                    ; No: just return
.3946c7	a2 00 00	ldx #$0000	chk_magic       LDX #0
.3946ca	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3946ce	df fd 46 39	cmp $3946fd,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3946d2	d0 24		bne $3946f8	                BNE done                    ; If it's not equal, just return
.3946d4	e8		inx		                INX                         ; Otherwise, check the next one
.3946d5	e0 08 00	cpx #$0008	                CPX #8
.3946d8	d0 f0		bne $3946ca	                BNE magic_loop              ; Until we've checked all 8 bytes
.3946da	c2 30		rep #$30	                REP #$30        ; set A&X long
.3946dc	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3946df	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3946e2	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3946e5	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3946e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3946ea	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3946ec	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3946ee	f0 04		beq $3946f4	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3946f0	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3946f4	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3946f8	28		plp		done            PLP
.3946f9	2b		pld		                PLD
.3946fa	ab		plb		                PLB
.3946fb	fa		plx		                PLX
.3946fc	6b		rtl		                RTL
>3946fd	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394705					DOS_CALC_LBA
.394705	8b		phb		                PHB
.394706	0b		phd		                PHD
.394707	08		php		                PHP
.394708	48		pha		                PHA             ; begin setdbr macro
.394709	08		php		                PHP
.39470a	e2 20		sep #$20	                SEP #$20        ; set A short
.39470c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39470e	48		pha		                PHA
.39470f	ab		plb		                PLB
.394710	28		plp		                PLP
.394711	68		pla		                PLA             ; end setdbr macro
.394712	48		pha		                PHA             ; begin setdp macro
.394713	08		php		                PHP
.394714	c2 20		rep #$20	                REP #$20        ; set A long
.394716	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394719	5b		tcd		                TCD
.39471a	28		plp		                PLP
.39471b	68		pla		                PLA             ; end setdp macro
.39471c	c2 20		rep #$20	                REP #$20        ; set A long
.39471e	38		sec		                SEC
.39471f	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394721	e9 02 00	sbc #$0002	                SBC #2
.394724	85 28		sta $0348	                STA DOS_TEMP
.394726	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394728	e9 00 00	sbc #$0000	                SBC #0
.39472b	85 2a		sta $034a	                STA DOS_TEMP+2
.39472d	e2 10		sep #$10	                SEP #$10        ; set X short
.39472f	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394732	e0 01		cpx #$01	mult_loop       CPX #1
.394734	f0 07		beq $39473d	                BEQ add_offset
.394736	06 28		asl $0348	                ASL DOS_TEMP
.394738	26 28		rol $0348	                ROL DOS_TEMP
.39473a	ca		dex		                DEX
.39473b	80 f5		bra $394732	                BRA mult_loop
.39473d	18		clc		add_offset      CLC
.39473e	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394740	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394743	85 02		sta $0322	                STA BIOS_LBA
.394745	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394747	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.39474a	85 04		sta $0324	                STA BIOS_LBA+2
.39474c	28		plp		                PLP
.39474d	2b		pld		                PLD
.39474e	ab		plb		                PLB
.39474f	6b		rtl		                RTL
.394750					DOS_GETCLUSTER
.394750	8b		phb		                PHB
.394751	0b		phd		                PHD
.394752	08		php		                PHP
.394753	48		pha		                PHA             ; begin setdbr macro
.394754	08		php		                PHP
.394755	e2 20		sep #$20	                SEP #$20        ; set A short
.394757	a9 00		lda #$00	                LDA #0
.394759	48		pha		                PHA
.39475a	ab		plb		                PLB
.39475b	28		plp		                PLP
.39475c	68		pla		                PLA             ; end setdbr macro
.39475d	48		pha		                PHA             ; begin setdp macro
.39475e	08		php		                PHP
.39475f	c2 20		rep #$20	                REP #$20        ; set A long
.394761	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394764	5b		tcd		                TCD
.394765	28		plp		                PLP
.394766	68		pla		                PLA             ; end setdp macro
.394767	c2 20		rep #$20	                REP #$20        ; set A long
.394769	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39476b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39476d	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39476f	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394771	22 05 47 39	jsl $394705	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394775	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394779	90 09		bcc $394784	                BCC ret_failure
.39477b					ret_success
.39477b	e2 20		sep #$20	                SEP #$20        ; set A short
.39477d	64 0e		stz $032e	                STZ DOS_STATUS
.39477f	28		plp		                PLP
.394780	2b		pld		                PLD
.394781	ab		plb		                PLB
.394782	38		sec		                SEC
.394783	6b		rtl		                RTL
.394784					ret_failure
.394784	e2 20		sep #$20	                SEP #$20        ; set A short
.394786	85 0e		sta $032e	                STA DOS_STATUS
.394788	28		plp		                PLP
.394789	2b		pld		                PLD
.39478a	ab		plb		                PLB
.39478b	18		clc		                CLC
.39478c	6b		rtl		                RTL
.39478d					DOS_PUTCLUSTER
.39478d	8b		phb		                PHB
.39478e	0b		phd		                PHD
.39478f	08		php		                PHP
.394790	48		pha		                PHA             ; begin setdbr macro
.394791	08		php		                PHP
.394792	e2 20		sep #$20	                SEP #$20        ; set A short
.394794	a9 00		lda #$00	                LDA #0
.394796	48		pha		                PHA
.394797	ab		plb		                PLB
.394798	28		plp		                PLP
.394799	68		pla		                PLA             ; end setdbr macro
.39479a	48		pha		                PHA             ; begin setdp macro
.39479b	08		php		                PHP
.39479c	c2 20		rep #$20	                REP #$20        ; set A long
.39479e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947a1	5b		tcd		                TCD
.3947a2	28		plp		                PLP
.3947a3	68		pla		                PLA             ; end setdp macro
.3947a4	c2 20		rep #$20	                REP #$20        ; set A long
.3947a6	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3947a8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947aa	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947ac	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947ae	22 05 47 39	jsl $394705	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3947b2	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3947b6	90 09		bcc $3947c1	                BCC ret_failure
.3947b8					ret_success
.3947b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3947ba	64 0e		stz $032e	                STZ DOS_STATUS
.3947bc	28		plp		                PLP
.3947bd	2b		pld		                PLD
.3947be	ab		plb		                PLB
.3947bf	38		sec		                SEC
.3947c0	6b		rtl		                RTL
.3947c1					ret_failure
.3947c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3947c3	85 0e		sta $032e	                STA DOS_STATUS
.3947c5	28		plp		                PLP
.3947c6	2b		pld		                PLD
.3947c7	ab		plb		                PLB
.3947c8	18		clc		                CLC
.3947c9	6b		rtl		                RTL
>3947ca	40 46 00			DOS_FDC_NAME    .null "@F"
.3947cd					DOS_FDC_DESC
>3947cd	ca 47 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947d1	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3947d2	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3947d6	40 53 00			DOS_SDC_NAME    .null "@S"
.3947d9					DOS_SDC_DESC
>3947d9	d6 47 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947dd	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3947de	cd 47 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3947e2	40 48 00			DOS_HDC_NAME    .null "@H"
.3947e5					DOS_HD_DESC
>3947e5	e2 47 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947e9	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3947ea	d9 47 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3947ee					DOS_PARSE_DEV
.3947ee	8b		phb		                PHB
.3947ef	0b		phd		                PHD
.3947f0	08		php		                PHP
.3947f1	48		pha		                PHA             ; begin setdbr macro
.3947f2	08		php		                PHP
.3947f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3947f5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947f7	48		pha		                PHA
.3947f8	ab		plb		                PLB
.3947f9	28		plp		                PLP
.3947fa	68		pla		                PLA             ; end setdbr macro
.3947fb	48		pha		                PHA             ; begin setdp macro
.3947fc	08		php		                PHP
.3947fd	c2 20		rep #$20	                REP #$20        ; set A long
.3947ff	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394802	5b		tcd		                TCD
.394803	28		plp		                PLP
.394804	68		pla		                PLA             ; end setdp macro
.394805	c2 30		rep #$30	                REP #$30        ; set A&X long
.394807	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39480b	85 28		sta $0348	                STA DOS_TEMP
.39480d	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394811	85 2a		sta $034a	                STA DOS_TEMP+2
.394813	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394816	85 48		sta $0368	                STA DOS_STR2_PTR
.394818	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39481b	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39481d	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394820	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394822	85 44		sta $0364	                STA DOS_STR1_PTR
.394824	c8		iny		                INY
.394825	c8		iny		                INY
.394826	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394828	85 46		sta $0366	                STA DOS_STR1_PTR+2
.39482a	e2 20		sep #$20	                SEP #$20        ; set A short
.39482c	a0 00 00	ldy #$0000	                LDY #0
.39482f	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394831	f0 24		beq $394857	                BEQ found                   ; If it's NULL, we found a match
.394833	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394835	d0 03		bne $39483a	                BNE next_device             ; If no match, try to load the next device
.394837	c8		iny		                INY                         ; Go to the next character
.394838	80 f5		bra $39482f	                BRA cmp_loop
.39483a					next_device
.39483a	c2 20		rep #$20	                REP #$20        ; set A long
.39483c	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.39483f	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394841	48		pha		                PHA
.394842	c8		iny		                INY
.394843	c8		iny		                INY
.394844	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394846	85 2a		sta $034a	                STA DOS_TEMP+2
.394848	68		pla		                PLA
.394849	85 28		sta $0348	                STA DOS_TEMP
.39484b	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39484d	d0 ce		bne $39481d	                BNE dev_loop                ; No: check this device
.39484f	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394851	d0 ca		bne $39481d	                BNE dev_loop
.394853	28		plp		done            PLP                         ; Otherwise, return having not found a match
.394854	2b		pld		                PLD
.394855	ab		plb		                PLB
.394856	6b		rtl		                RTL
.394857	22 68 48 39	jsl $394868	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.39485b	e2 20		sep #$20	                SEP #$20        ; set A short
.39485d	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394860	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394862	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394866	80 eb		bra $394853	                BRA done
.394868					DOS_ADJUSTPATH
.394868	da		phx		                PHX
.394869	5a		phy		                PHY
.39486a	8b		phb		                PHB
.39486b	0b		phd		                PHD
.39486c	08		php		                PHP
.39486d	48		pha		                PHA             ; begin setdbr macro
.39486e	08		php		                PHP
.39486f	e2 20		sep #$20	                SEP #$20        ; set A short
.394871	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394873	48		pha		                PHA
.394874	ab		plb		                PLB
.394875	28		plp		                PLP
.394876	68		pla		                PLA             ; end setdbr macro
.394877	48		pha		                PHA             ; begin setdp macro
.394878	08		php		                PHP
.394879	c2 20		rep #$20	                REP #$20        ; set A long
.39487b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39487e	5b		tcd		                TCD
.39487f	28		plp		                PLP
.394880	68		pla		                PLA             ; end setdp macro
.394881	c2 30		rep #$30	                REP #$30        ; set A&X long
.394883	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394885	98		tya		                TYA                             ; Compute the address of the first source byte
.394886	18		clc		                CLC
.394887	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39488a	aa		tax		                TAX
.39488b	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39488e	a8		tay		                TAY
.39488f	38		sec		                SEC                             ; Compute the number of bytes to copy
.394890	a9 00 01	lda #$0100	                LDA #256
.394893	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394895	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394898	28		plp		                PLP
.394899	2b		pld		                PLD
.39489a	ab		plb		                PLB
.39489b	7a		ply		                PLY
.39489c	fa		plx		                PLX
.39489d	6b		rtl		                RTL
.39489e					DOS_PARSE_PATH
.39489e	8b		phb		                PHB
.39489f	0b		phd		                PHD
.3948a0	08		php		                PHP
.3948a1	48		pha		                PHA             ; begin setdbr macro
.3948a2	08		php		                PHP
.3948a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3948a5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3948a7	48		pha		                PHA
.3948a8	ab		plb		                PLB
.3948a9	28		plp		                PLP
.3948aa	68		pla		                PLA             ; end setdbr macro
.3948ab	48		pha		                PHA             ; begin setdp macro
.3948ac	08		php		                PHP
.3948ad	c2 20		rep #$20	                REP #$20        ; set A long
.3948af	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948b2	5b		tcd		                TCD
.3948b3	28		plp		                PLP
.3948b4	68		pla		                PLA             ; end setdp macro
.3948b5	c2 10		rep #$10	                REP #$10        ; set X long
.3948b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3948b9	a2 00 00	ldx #$0000	                LDX #0
.3948bc	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3948be	f0 1b		beq $3948db	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3948c0	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3948c2	b0 05		bcs $3948c9	                BGE check_case          ; No: check the case
.3948c4	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3948c6	82 64 00	brl $39492d	                BRL ret_failure
.3948c9	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3948cb	90 08		bcc $3948d5	                BLT next_char
.3948cd	c9 7b		cmp #$7b	                CMP #'z'+1
.3948cf	b0 04		bcs $3948d5	                BGE next_char
.3948d1	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3948d3	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3948d5	e8		inx		next_char       INX                     ; Move to the next character
.3948d6	e0 00 01	cpx #$0100	                CPX #$100
.3948d9	d0 e1		bne $3948bc	                BNE upcase_loop
.3948db	22 ee 47 39	jsl $3947ee	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3948df	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3948e1	c9 3a		cmp #$3a	                CMP #':'
.3948e3	d0 07		bne $3948ec	                BNE clr_name            ; If not colon, treat it as a file name
.3948e5	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3948e8	22 68 48 39	jsl $394868	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3948ec	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3948ef	a9 20		lda #$20	                LDA #' '
.3948f1	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3948f4	c8		iny		                INY
.3948f5	c0 0b 00	cpy #$000b	                CPY #11
.3948f8	d0 f7		bne $3948f1	                BNE clr_loop
.3948fa	a2 00 00	ldx #$0000	                LDX #0
.3948fd	a0 00 00	ldy #$0000	                LDY #0
.394900	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394902	f0 20		beq $394924	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394904	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394906	f0 0a		beq $394912	                BEQ cpy_ext             ; And move to the extension
.394908	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39490b	e8		inx		                INX
.39490c	c8		iny		                INY                     ; Move to the next character
.39490d	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394910	d0 ee		bne $394900	                BNE cpy_name_loop       ; No: process this one
.394912	e8		inx		cpy_ext         INX                     ; Skip the dot
.394913	a0 08 00	ldy #$0008	                LDY #8
.394916	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394918	f0 0a		beq $394924	                BEQ ret_success         ; If it's NULL, we've finished
.39491a	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.39491d	e8		inx		                INX
.39491e	c8		iny		                INY                     ; Move to the next character
.39491f	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394922	d0 f2		bne $394916	                BNE cpy_ext_loop        ; No: process this one
.394924					ret_success
.394924	e2 20		sep #$20	                SEP #$20        ; set A short
.394926	64 0e		stz $032e	                STZ DOS_STATUS
.394928	28		plp		                PLP
.394929	2b		pld		                PLD
.39492a	ab		plb		                PLB
.39492b	38		sec		                SEC
.39492c	6b		rtl		                RTL
.39492d					ret_failure
.39492d	e2 20		sep #$20	                SEP #$20        ; set A short
.39492f	85 0e		sta $032e	                STA DOS_STATUS
.394931	28		plp		                PLP
.394932	2b		pld		                PLD
.394933	ab		plb		                PLB
.394934	18		clc		                CLC
.394935	6b		rtl		                RTL
.394936					DOS_FINDFILE
.394936	8b		phb		                PHB
.394937	0b		phd		                PHD
.394938	08		php		                PHP
.394939	48		pha		                PHA             ; begin setdbr macro
.39493a	08		php		                PHP
.39493b	e2 20		sep #$20	                SEP #$20        ; set A short
.39493d	a9 00		lda #$00	                LDA #0
.39493f	48		pha		                PHA
.394940	ab		plb		                PLB
.394941	28		plp		                PLP
.394942	68		pla		                PLA             ; end setdbr macro
.394943	48		pha		                PHA             ; begin setdp macro
.394944	08		php		                PHP
.394945	c2 20		rep #$20	                REP #$20        ; set A long
.394947	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39494a	5b		tcd		                TCD
.39494b	28		plp		                PLP
.39494c	68		pla		                PLA             ; end setdp macro
.39494d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39494f	22 9e 48 39	jsl $39489e	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394953	b0 05		bcs $39495a	                BCS mount                       ; If success: try to open the directory
.394955	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394956	2b		pld		                PLD
.394957	ab		plb		                PLB
.394958	18		clc		                CLC
.394959	6b		rtl		                RTL
.39495a	22 d4 44 39	jsl $3944d4	mount           JSL DOS_MOUNT
.39495e					get_directory
.39495e	c2 20		rep #$20	                REP #$20        ; set A long
.394960	22 c1 41 39	jsl $3941c1	                JSL DOS_DIROPEN                 ; Get the directory
.394964	b0 07		bcs $39496d	                BCS scan_entries                ; If success: start scanning the directory entries
.394966	e2 20		sep #$20	                SEP #$20        ; set A short
.394968	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39496a	82 47 00	brl $3949b4	                BRL ret_failure
.39496d	22 40 42 39	jsl $394240	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394971					scan_loop
.394971	e2 20		sep #$20	                SEP #$20        ; set A short
.394973	a0 00 00	ldy #$0000	                LDY #0
.394976	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394978	d0 05		bne $39497f	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39497a	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39497c	82 35 00	brl $3949b4	                BRL ret_failure
.39497f	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394981	f0 26		beq $3949a9	                BEQ next_entry                  ; Go to the next entry
.394983	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394986	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394988	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39498a	d0 1d		bne $3949a9	                BNE next_entry                  ; Yes: skip it!
.39498c	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.39498e	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394990	f0 17		beq $3949a9	                BEQ next_entry                  ; Yes: skip it!
.394992	a2 00 00	ldx #$0000	                LDX #0
.394995	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394998	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.39499a	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.39499e	d0 09		bne $3949a9	                BNE next_entry                  ; If not equal: try the next entry
.3949a0	c8		iny		                INY                             ; Advance to the next character
.3949a1	e8		inx		                INX
.3949a2	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3949a5	f0 16		beq $3949bd	                BEQ match                       ; Yes: we have a match!
.3949a7	80 ef		bra $394998	                BRA scan_cmp_loop               ; No: keep checking
.3949a9	22 5b 42 39	jsl $39425b	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3949ad	90 05		bcc $3949b4	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3949af	82 bf ff	brl $394971	                BRL scan_loop                   ; If found: keep scanning
.3949b2	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3949b4					ret_failure
.3949b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3949b6	85 0e		sta $032e	                STA DOS_STATUS
.3949b8	28		plp		                PLP
.3949b9	2b		pld		                PLD
.3949ba	ab		plb		                PLB
.3949bb	18		clc		                CLC
.3949bc	6b		rtl		                RTL
.3949bd					match
.3949bd	c2 20		rep #$20	                REP #$20        ; set A long
.3949bf	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3949c2	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949c4	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3949c6	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3949c9	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949cb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949cd					ret_success
.3949cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3949cf	64 0e		stz $032e	                STZ DOS_STATUS
.3949d1	28		plp		                PLP
.3949d2	2b		pld		                PLD
.3949d3	ab		plb		                PLB
.3949d4	38		sec		                SEC
.3949d5	6b		rtl		                RTL
.3949d6					DOS_READFILE
.3949d6	8b		phb		                PHB
.3949d7	0b		phd		                PHD
.3949d8	08		php		                PHP
.3949d9	48		pha		                PHA             ; begin setdbr macro
.3949da	08		php		                PHP
.3949db	e2 20		sep #$20	                SEP #$20        ; set A short
.3949dd	a9 00		lda #$00	                LDA #0
.3949df	48		pha		                PHA
.3949e0	ab		plb		                PLB
.3949e1	28		plp		                PLP
.3949e2	68		pla		                PLA             ; end setdbr macro
.3949e3	48		pha		                PHA             ; begin setdp macro
.3949e4	08		php		                PHP
.3949e5	c2 20		rep #$20	                REP #$20        ; set A long
.3949e7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949ea	5b		tcd		                TCD
.3949eb	28		plp		                PLP
.3949ec	68		pla		                PLA             ; end setdp macro
.3949ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949ef	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3949f1	48		pha		                PHA
.3949f2	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3949f4	48		pha		                PHA
.3949f5	22 36 49 39	jsl $394936	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3949f9	68		pla		                PLA
.3949fa	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3949fc	68		pla		                PLA
.3949fd	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3949ff	90 0f		bcc $394a10	                BCC pass_failure                    ; If found: try to load the cluster
.394a01	22 50 47 39	jsl $394750	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394a05	90 09		bcc $394a10	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394a07					ret_success
.394a07	e2 20		sep #$20	                SEP #$20        ; set A short
.394a09	64 0e		stz $032e	                STZ DOS_STATUS
.394a0b	28		plp		                PLP
.394a0c	2b		pld		                PLD
.394a0d	ab		plb		                PLB
.394a0e	38		sec		                SEC
.394a0f	6b		rtl		                RTL
.394a10	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394a11	2b		pld		                PLD
.394a12	ab		plb		                PLB
.394a13	18		clc		                CLC
.394a14	6b		rtl		                RTL
.394a15					ENTRYFORCLUS12
.394a15	8b		phb		                PHB
.394a16	0b		phd		                PHD
.394a17	08		php		                PHP
.394a18	48		pha		                PHA             ; begin setdbr macro
.394a19	08		php		                PHP
.394a1a	e2 20		sep #$20	                SEP #$20        ; set A short
.394a1c	a9 00		lda #$00	                LDA #0
.394a1e	48		pha		                PHA
.394a1f	ab		plb		                PLB
.394a20	28		plp		                PLP
.394a21	68		pla		                PLA             ; end setdbr macro
.394a22	48		pha		                PHA             ; begin setdp macro
.394a23	08		php		                PHP
.394a24	c2 20		rep #$20	                REP #$20        ; set A long
.394a26	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a29	5b		tcd		                TCD
.394a2a	28		plp		                PLP
.394a2b	68		pla		                PLA             ; end setdp macro
.394a2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a2e	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394a30	0a		asl a		                ASL A
.394a31	85 28		sta $0348	                STA DOS_TEMP
.394a33	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a35	2a		rol a		                ROL A
.394a36	85 2a		sta $034a	                STA DOS_TEMP+2
.394a38	18		clc		                CLC
.394a39	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a3b	65 28		adc $0348	                ADC DOS_TEMP
.394a3d	85 28		sta $0348	                STA DOS_TEMP
.394a3f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a41	65 2a		adc $034a	                ADC DOS_TEMP+2
.394a43	85 2a		sta $034a	                STA DOS_TEMP+2
.394a45	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394a47	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394a49	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394a4b	29 ff 03	and #$03ff	                AND #$003FF
.394a4e	aa		tax		                TAX
.394a4f	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a51	66 28		ror $0348	                ROR DOS_TEMP
.394a53	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a55	66 28		ror $0348	                ROR DOS_TEMP
.394a57	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a59	66 28		ror $0348	                ROR DOS_TEMP
.394a5b	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a5d	66 28		ror $0348	                ROR DOS_TEMP
.394a5f	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a61	66 28		ror $0348	                ROR DOS_TEMP
.394a63	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a65	66 28		ror $0348	                ROR DOS_TEMP
.394a67	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a69	66 28		ror $0348	                ROR DOS_TEMP
.394a6b	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a6d	66 28		ror $0348	                ROR DOS_TEMP
.394a6f	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a71	66 28		ror $0348	                ROR DOS_TEMP
.394a73	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394a74	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394a78	65 28		adc $0348	                ADC DOS_TEMP
.394a7a	85 24		sta $0344	                STA DOS_FAT_LBA
.394a7c	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394a80	65 2a		adc $034a	                ADC DOS_TEMP+2
.394a82	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a84	28		plp		                PLP
.394a85	2b		pld		                PLD
.394a86	ab		plb		                PLB
.394a87	6b		rtl		                RTL
.394a88					FATFORCLUSTER12
.394a88	8b		phb		                PHB
.394a89	0b		phd		                PHD
.394a8a	08		php		                PHP
.394a8b	48		pha		                PHA             ; begin setdbr macro
.394a8c	08		php		                PHP
.394a8d	e2 20		sep #$20	                SEP #$20        ; set A short
.394a8f	a9 00		lda #$00	                LDA #0
.394a91	48		pha		                PHA
.394a92	ab		plb		                PLB
.394a93	28		plp		                PLP
.394a94	68		pla		                PLA             ; end setdbr macro
.394a95	48		pha		                PHA             ; begin setdp macro
.394a96	08		php		                PHP
.394a97	c2 20		rep #$20	                REP #$20        ; set A long
.394a99	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a9c	5b		tcd		                TCD
.394a9d	28		plp		                PLP
.394a9e	68		pla		                PLA             ; end setdp macro
.394a9f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394aa1	a2 00 00	ldx #$0000	                LDX #0
.394aa4	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394aa7	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394aab	e8		inx		                INX
.394aac	e8		inx		                INX
.394aad	e0 00 04	cpx #$0400	                CPX #1024
.394ab0	d0 f5		bne $394aa7	                BNE clr_loop
.394ab2	22 15 4a 39	jsl $394a15	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394ab6	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394ab8	85 02		sta $0322	                STA BIOS_LBA
.394aba	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394abc	85 04		sta $0324	                STA BIOS_LBA+2
.394abe	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394ac1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ac3	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394ac6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ac8	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394acc	90 17		bcc $394ae5	                BCC error
.394ace	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394ad0	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394ad3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ad5	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394ad8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ada	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394ade	90 05		bcc $394ae5	                BCC error
.394ae0	28		plp		                PLP
.394ae1	2b		pld		                PLD
.394ae2	ab		plb		                PLB
.394ae3	38		sec		                SEC
.394ae4	6b		rtl		                RTL
.394ae5					error
.394ae5	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae7	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ae9	85 0e		sta $032e	                STA DOS_STATUS
.394aeb	28		plp		                PLP
.394aec	2b		pld		                PLD
.394aed	ab		plb		                PLB
.394aee	18		clc		                CLC
.394aef	6b		rtl		                RTL
.394af0					FATFORCLUSTER32
.394af0	8b		phb		                PHB
.394af1	0b		phd		                PHD
.394af2	48		pha		                PHA             ; begin setdbr macro
.394af3	08		php		                PHP
.394af4	e2 20		sep #$20	                SEP #$20        ; set A short
.394af6	a9 00		lda #$00	                LDA #0
.394af8	48		pha		                PHA
.394af9	ab		plb		                PLB
.394afa	28		plp		                PLP
.394afb	68		pla		                PLA             ; end setdbr macro
.394afc	48		pha		                PHA             ; begin setdp macro
.394afd	08		php		                PHP
.394afe	c2 20		rep #$20	                REP #$20        ; set A long
.394b00	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b03	5b		tcd		                TCD
.394b04	28		plp		                PLP
.394b05	68		pla		                PLA             ; end setdp macro
.394b06	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b08	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b0a	85 24		sta $0344	                STA DOS_FAT_LBA
.394b0c	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b0e	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b10	a2 07 00	ldx #$0007	                LDX #7
.394b13	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394b15	66 24		ror $0344	                ROR DOS_FAT_LBA
.394b17	ca		dex		                DEX
.394b18	d0 f9		bne $394b13	                BNE div_loop
.394b1a	18		clc		                CLC
.394b1b	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394b1d	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394b21	85 24		sta $0344	                STA DOS_FAT_LBA
.394b23	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b25	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394b29	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b2b	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394b2d	85 02		sta $0322	                STA BIOS_LBA
.394b2f	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b31	85 04		sta $0324	                STA BIOS_LBA+2
.394b33	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394b36	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b38	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b3b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b3d	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394b41	b0 06		bcs $394b49	                BCS find_entry
.394b43	e2 20		sep #$20	                SEP #$20        ; set A short
.394b45	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b47	80 0e		bra $394b57	                BRA ret_failure
.394b49					find_entry
.394b49	c2 20		rep #$20	                REP #$20        ; set A long
.394b4b	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b4d	0a		asl a		                ASL A
.394b4e	0a		asl a		                ASL A                           ; * 4
.394b4f	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394b52	aa		tax		                TAX                             ; X should be the offset within the sector
.394b53	2b		pld		ret_success     PLD
.394b54	ab		plb		                PLB
.394b55	38		sec		                SEC                             ; return success
.394b56	6b		rtl		                RTL
.394b57	2b		pld		ret_failure     PLD
.394b58	ab		plb		                PLB
.394b59	18		clc		                CLC                             ; Return failure
.394b5a	6b		rtl		                RTL
.394b5b					NEXTCLUSTER
.394b5b	08		php		                PHP
.394b5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394b5e	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b62	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b64	d0 08		bne $394b6e	                BNE fat32                       ; No: assume it's FAT32
.394b66	22 7c 4b 39	jsl $394b7c	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394b6a	90 0d		bcc $394b79	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b6c	80 06		bra $394b74	                BRA ret_success
.394b6e	22 e4 4b 39	jsl $394be4	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394b72	90 05		bcc $394b79	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b74	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b76	28		plp		                PLP
.394b77	38		sec		                SEC
.394b78	6b		rtl		                RTL
.394b79	28		plp		pass_failure    PLP
.394b7a	18		clc		                CLC
.394b7b	6b		rtl		                RTL
.394b7c					NEXTCLUSTER12
.394b7c	8b		phb		                    PHB
.394b7d	0b		phd		                    PHD
.394b7e	08		php		                    PHP
.394b7f	48		pha		                PHA             ; begin setdbr macro
.394b80	08		php		                PHP
.394b81	e2 20		sep #$20	                SEP #$20        ; set A short
.394b83	a9 00		lda #$00	                LDA #0
.394b85	48		pha		                PHA
.394b86	ab		plb		                PLB
.394b87	28		plp		                PLP
.394b88	68		pla		                PLA             ; end setdbr macro
.394b89	48		pha		                PHA             ; begin setdp macro
.394b8a	08		php		                PHP
.394b8b	c2 20		rep #$20	                REP #$20        ; set A long
.394b8d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b90	5b		tcd		                TCD
.394b91	28		plp		                PLP
.394b92	68		pla		                PLA             ; end setdp macro
.394b93	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b95	22 88 4a 39	jsl $394a88	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394b99	b0 03		bcs $394b9e	                    BCS chk_clus_id
.394b9b	82 41 00	brl $394bdf	                    BRL pass_failure
.394b9e	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394ba0	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394ba3	d0 0d		bne $394bb2	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394ba5					is_even
.394ba5	c2 20		rep #$20	                REP #$20        ; set A long
.394ba7	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394bab	29 ff 0f	and #$0fff	                    AND #$0FFF
.394bae	85 28		sta $0348	                    STA DOS_TEMP
.394bb0	80 0c		bra $394bbe	                    BRA check_id
.394bb2					is_odd
.394bb2	c2 20		rep #$20	                REP #$20        ; set A long
.394bb4	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394bb8	4a		lsr a		                    LSR A
.394bb9	4a		lsr a		                    LSR A
.394bba	4a		lsr a		                    LSR A
.394bbb	4a		lsr a		                    LSR A
.394bbc	85 28		sta $0348	                    STA DOS_TEMP
.394bbe					check_id
.394bbe	c2 20		rep #$20	                REP #$20        ; set A long
.394bc0	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394bc2	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394bc5	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394bc8	f0 0f		beq $394bd9	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394bca	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394bcc	85 10		sta $0330	                    STA DOS_CLUS_ID
.394bce	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394bd0					ret_success
.394bd0	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd2	64 0e		stz $032e	                    STZ DOS_STATUS
.394bd4	28		plp		                    PLP
.394bd5	2b		pld		                    PLD
.394bd6	ab		plb		                    PLB
.394bd7	38		sec		                    SEC
.394bd8	6b		rtl		                    RTL
.394bd9					no_more
.394bd9	e2 20		sep #$20	                SEP #$20        ; set A short
.394bdb	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394bdd	85 0e		sta $032e	                    STA DOS_STATUS
.394bdf	28		plp		pass_failure        PLP
.394be0	2b		pld		                    PLD
.394be1	ab		plb		                    PLB
.394be2	18		clc		                    CLC
.394be3	6b		rtl		                    RTL
.394be4					NEXTCLUSTER32
.394be4	8b		phb		                PHB
.394be5	0b		phd		                PHD
.394be6	08		php		                PHP
.394be7	48		pha		                PHA             ; begin setdbr macro
.394be8	08		php		                PHP
.394be9	e2 20		sep #$20	                SEP #$20        ; set A short
.394beb	a9 00		lda #$00	                LDA #0
.394bed	48		pha		                PHA
.394bee	ab		plb		                PLB
.394bef	28		plp		                PLP
.394bf0	68		pla		                PLA             ; end setdbr macro
.394bf1	48		pha		                PHA             ; begin setdp macro
.394bf2	08		php		                PHP
.394bf3	c2 20		rep #$20	                REP #$20        ; set A long
.394bf5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bf8	5b		tcd		                TCD
.394bf9	28		plp		                PLP
.394bfa	68		pla		                PLA             ; end setdp macro
.394bfb	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bfd	22 f0 4a 39	jsl $394af0	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394c01	90 33		bcc $394c36	                BCC ret_failure                 ; If it did not work, return the error
.394c03	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394c07	85 28		sta $0348	                STA DOS_TEMP
.394c09	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394c0d	85 2a		sta $034a	                STA DOS_TEMP+2
.394c0f	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394c11	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394c14	d0 0d		bne $394c23	                BNE found_next
.394c16	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c18	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394c1b	d0 06		bne $394c23	                BNE found_next                  ; No: return this cluster as the next
.394c1d	e2 20		sep #$20	                SEP #$20        ; set A short
.394c1f	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394c21	80 13		bra $394c36	                BRA ret_failure
.394c23					found_next
.394c23	c2 20		rep #$20	                REP #$20        ; set A long
.394c25	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394c27	85 10		sta $0330	                STA DOS_CLUS_ID
.394c29	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c2b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c2d					ret_success
.394c2d	e2 20		sep #$20	                SEP #$20        ; set A short
.394c2f	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394c31	28		plp		                PLP
.394c32	2b		pld		                PLD
.394c33	ab		plb		                PLB
.394c34	38		sec		                SEC
.394c35	6b		rtl		                RTL
.394c36					ret_failure
.394c36	e2 20		sep #$20	                SEP #$20        ; set A short
.394c38	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394c3a	28		plp		                PLP
.394c3b	2b		pld		                PLD
.394c3c	ab		plb		                PLB
.394c3d	18		clc		                CLC
.394c3e	6b		rtl		                RTL
.394c3f					DOS_READNEXT
.394c3f	08		php		                PHP
.394c40	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c42	22 5b 4b 39	jsl $394b5b	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394c46	90 09		bcc $394c51	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394c48	22 50 47 39	jsl $394750	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394c4c	90 03		bcc $394c51	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394c4e	28		plp		ret_success     PLP
.394c4f	38		sec		                SEC
.394c50	6b		rtl		                RTL
.394c51	28		plp		pass_failure    PLP
.394c52	18		clc		                CLC
.394c53	6b		rtl		                RTL
.394c54					DOS_FREECLUS
.394c54	08		php		                PHP
.394c55	48		pha		                PHA             ; begin setdp macro
.394c56	08		php		                PHP
.394c57	c2 20		rep #$20	                REP #$20        ; set A long
.394c59	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c5c	5b		tcd		                TCD
.394c5d	28		plp		                PLP
.394c5e	68		pla		                PLA             ; end setdp macro
.394c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.394c61	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c65	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c67	d0 08		bne $394c71	                BNE fat32                       ; No: assume it's FAT32
.394c69	22 e5 4c 39	jsl $394ce5	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394c6d	90 0d		bcc $394c7c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c6f	80 06		bra $394c77	                BRA ret_success
.394c71	22 bd 4d 39	jsl $394dbd	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394c75	90 05		bcc $394c7c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c77	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c79	28		plp		                PLP
.394c7a	38		sec		                SEC
.394c7b	6b		rtl		                RTL
.394c7c	28		plp		pass_failure    PLP
.394c7d	18		clc		                CLC
.394c7e	6b		rtl		                RTL
.394c7f					FDC_READ2FAT12
.394c7f	8b		phb		                    PHB
.394c80	0b		phd		                    PHD
.394c81	08		php		                    PHP
.394c82	48		pha		                PHA             ; begin setdbr macro
.394c83	08		php		                PHP
.394c84	e2 20		sep #$20	                SEP #$20        ; set A short
.394c86	a9 00		lda #$00	                LDA #0
.394c88	48		pha		                PHA
.394c89	ab		plb		                PLB
.394c8a	28		plp		                PLP
.394c8b	68		pla		                PLA             ; end setdbr macro
.394c8c	48		pha		                PHA             ; begin setdp macro
.394c8d	08		php		                PHP
.394c8e	c2 20		rep #$20	                REP #$20        ; set A long
.394c90	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c93	5b		tcd		                TCD
.394c94	28		plp		                PLP
.394c95	68		pla		                PLA             ; end setdp macro
.394c96	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c98	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394c9b	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394c9d	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394ca0	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394ca2	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394ca4	85 02		sta $0322	                    STA BIOS_LBA
.394ca6	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394ca8	85 04		sta $0324	                    STA BIOS_LBA+2
.394caa	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394cae	b0 07		bcs $394cb7	                    BCS inc_sect2                   ; If success: start getting the second sector
.394cb0	e2 20		sep #$20	                SEP #$20        ; set A short
.394cb2	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394cb4	82 1c 00	brl $394cd3	                    BRL ret_failure
.394cb7					inc_sect2
.394cb7	c2 20		rep #$20	                REP #$20        ; set A long
.394cb9	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394cbb	d0 02		bne $394cbf	                    BNE inc_buff_ptr
.394cbd	e6 04		inc $0324	                    INC BIOS_LBA+2
.394cbf	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394cc2	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394cc4	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394cc7	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394cc9	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394ccd	b0 0d		bcs $394cdc	                    BCS ret_success                 ; If success, return success
.394ccf	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd1	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394cd3					ret_failure
.394cd3	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd5	85 00		sta $0320	                    STA BIOS_STATUS
.394cd7	28		plp		                    PLP
.394cd8	2b		pld		                    PLD
.394cd9	ab		plb		                    PLB
.394cda	18		clc		                    CLC
.394cdb	6b		rtl		                    RTL
.394cdc					ret_success
.394cdc	e2 20		sep #$20	                SEP #$20        ; set A short
.394cde	64 00		stz $0320	                    STZ BIOS_STATUS
.394ce0	28		plp		                    PLP
.394ce1	2b		pld		                    PLD
.394ce2	ab		plb		                    PLB
.394ce3	38		sec		                    SEC
.394ce4	6b		rtl		                    RTL
.394ce5					DOS_FREECLUS12
.394ce5	da		phx		                PHX
.394ce6	8b		phb		                PHB
.394ce7	0b		phd		                PHD
.394ce8	08		php		                PHP
.394ce9	48		pha		                PHA             ; begin setdbr macro
.394cea	08		php		                PHP
.394ceb	e2 20		sep #$20	                SEP #$20        ; set A short
.394ced	a9 00		lda #$00	                LDA #0
.394cef	48		pha		                PHA
.394cf0	ab		plb		                PLB
.394cf1	28		plp		                PLP
.394cf2	68		pla		                PLA             ; end setdbr macro
.394cf3	48		pha		                PHA             ; begin setdp macro
.394cf4	08		php		                PHP
.394cf5	c2 20		rep #$20	                REP #$20        ; set A long
.394cf7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cfa	5b		tcd		                TCD
.394cfb	28		plp		                PLP
.394cfc	68		pla		                PLA             ; end setdp macro
.394cfd	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cff	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394d02	85 10		sta $0330	                STA DOS_CLUS_ID
.394d04	a9 00 00	lda #$0000	                LDA #0
.394d07	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d09	22 15 4a 39	jsl $394a15	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394d0d	22 7f 4c 39	jsl $394c7f	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394d11	b0 07		bcs $394d1a	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394d13	e2 20		sep #$20	                SEP #$20        ; set A short
.394d15	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d17	82 99 00	brl $394db3	                BRL ret_failure
.394d1a					start_of_fat
.394d1a	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d1c	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d1e	89 01 00	bit #$0001	                BIT #1
.394d21	d0 09		bne $394d2c	                BNE is_odd
.394d23	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394d27	29 ff 0f	and #$0fff	                AND #$0FFF
.394d2a	80 08		bra $394d34	                BRA chk_available
.394d2c	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394d30	4a		lsr a		                LSR A
.394d31	4a		lsr a		                LSR A
.394d32	4a		lsr a		                LSR A
.394d33	4a		lsr a		                LSR A
.394d34					chk_available
.394d34	85 28		sta $0348	                STA DOS_TEMP
.394d36	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394d39	f0 03		beq $394d3e	                BEQ chk_found
.394d3b	82 39 00	brl $394d77	                BRL next_cluster                ; No: advance to the next cluster
.394d3e	8a		txa		chk_found       TXA
.394d3f	85 2a		sta $034a	                STA DOS_TEMP+2
.394d41	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d43	89 01 00	bit #$0001	                BIT #1
.394d46	d0 0d		bne $394d55	                BNE is_odd2
.394d48					is_even2
.394d48	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394d4c	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394d4f	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394d53	80 0b		bra $394d60	                BRA write_fat
.394d55					is_odd2
.394d55	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394d59	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394d5c	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394d60	22 7a 4e 39	jsl $394e7a	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394d64	b0 07		bcs $394d6d	                BCS ret_success                 ; If success: return success
.394d66	e2 20		sep #$20	                SEP #$20        ; set A short
.394d68	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394d6a	82 46 00	brl $394db3	                BRL ret_failure
.394d6d					ret_success
.394d6d	e2 20		sep #$20	                SEP #$20        ; set A short
.394d6f	64 0e		stz $032e	                STZ DOS_STATUS
.394d71	28		plp		                PLP
.394d72	2b		pld		                PLD
.394d73	ab		plb		                PLB
.394d74	fa		plx		                PLX
.394d75	38		sec		                SEC
.394d76	6b		rtl		                RTL
.394d77					next_cluster
.394d77	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394d79	d0 02		bne $394d7d	                BNE calc_entry
.394d7b	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d7d	22 15 4a 39	jsl $394a15	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394d81	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394d84	f0 03		beq $394d89	                BEQ chk_end_of_fat
.394d86	82 93 ff	brl $394d1c	                BRL chk_cluster                 ; No: go back and check it too
.394d89					chk_end_of_fat
.394d89	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394d8b	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394d8f	d0 0f		bne $394da0	                BNE next_2
.394d91	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394d93	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394d97	d0 07		bne $394da0	                BNE next_2                      ; No: get the next to sectors
.394d99	e2 20		sep #$20	                SEP #$20        ; set A short
.394d9b	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394d9d	82 13 00	brl $394db3	                BRL ret_failure
.394da0					next_2
.394da0	22 7f 4c 39	jsl $394c7f	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394da4	90 06		bcc $394dac	                BCC fat_fail                    ; If failed: return error
.394da6	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394da9	82 70 ff	brl $394d1c	                BRL chk_cluster                 ; And start checking from there
.394dac					fat_fail
.394dac	e2 20		sep #$20	                SEP #$20        ; set A short
.394dae	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394db0	82 00 00	brl $394db3	                BRL ret_failure
.394db3					ret_failure
.394db3	e2 20		sep #$20	                SEP #$20        ; set A short
.394db5	85 0e		sta $032e	                STA DOS_STATUS
.394db7	28		plp		                PLP
.394db8	2b		pld		                PLD
.394db9	ab		plb		                PLB
.394dba	fa		plx		                PLX
.394dbb	18		clc		                CLC
.394dbc	6b		rtl		                RTL
.394dbd					DOS_FREECLUS32
.394dbd	8b		phb		                PHB
.394dbe	0b		phd		                PHD
.394dbf	08		php		                PHP
.394dc0	48		pha		                PHA             ; begin setdbr macro
.394dc1	08		php		                PHP
.394dc2	e2 20		sep #$20	                SEP #$20        ; set A short
.394dc4	a9 00		lda #$00	                LDA #0
.394dc6	48		pha		                PHA
.394dc7	ab		plb		                PLB
.394dc8	28		plp		                PLP
.394dc9	68		pla		                PLA             ; end setdbr macro
.394dca	48		pha		                PHA             ; begin setdp macro
.394dcb	08		php		                PHP
.394dcc	c2 20		rep #$20	                REP #$20        ; set A long
.394dce	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dd1	5b		tcd		                TCD
.394dd2	28		plp		                PLP
.394dd3	68		pla		                PLA             ; end setdp macro
.394dd4	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dd6	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394dd9	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ddb	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394dde	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394de0	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394de4	85 02		sta $0322	                STA BIOS_LBA
.394de6	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394dea	85 04		sta $0324	                STA BIOS_LBA+2
.394dec	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394df0	b0 07		bcs $394df9	                BCS initial_entry               ; If OK: set the initial entry to check
.394df2	e2 20		sep #$20	                SEP #$20        ; set A short
.394df4	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394df6	82 5e 00	brl $394e57	                BRL ret_failure
.394df9					initial_entry
.394df9	c2 20		rep #$20	                REP #$20        ; set A long
.394dfb	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394dfe	85 10		sta $0330	                STA DOS_CLUS_ID
.394e00	a9 00 00	lda #$0000	                LDA #0
.394e03	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e05	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394e08	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394e0c	d0 06		bne $394e14	                BNE next_entry                  ; No: move to the next entry
.394e0e	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394e12	f0 29		beq $394e3d	                BEQ found_free                  ; Yes: go to allocate and return it
.394e14	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394e16	d0 02		bne $394e1a	                BNE inc_ptr
.394e18	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e1a	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394e1b	e8		inx		                INX
.394e1c	e8		inx		                INX
.394e1d	e8		inx		                INX
.394e1e	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394e21	90 e5		bcc $394e08	                BLT chk_entry                   ; No: check this entry
.394e23	18		clc		                CLC                             ; Point to the next sector in the FAT
.394e24	a5 02		lda $0322	                LDA BIOS_LBA
.394e26	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394e29	85 02		sta $0322	                STA BIOS_LBA
.394e2b	a5 04		lda $0324	                LDA BIOS_LBA+2
.394e2d	69 00 00	adc #$0000	                ADC #0
.394e30	85 04		sta $0324	                STA BIOS_LBA+2
.394e32	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394e36	b0 00		bcs $394e38	                BCS set_ptr                     ; If OK: set the pointer and check it
.394e38	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394e3b	80 cb		bra $394e08	                BRA chk_entry                   ; Check this entry
.394e3d					found_free
.394e3d	c2 20		rep #$20	                REP #$20        ; set A long
.394e3f	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394e42	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394e46	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394e49	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394e4d	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e51	b0 0d		bcs $394e60	                BCS ret_success                 ; If OK: return success
.394e53	e2 20		sep #$20	                SEP #$20        ; set A short
.394e55	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394e57					ret_failure
.394e57	e2 20		sep #$20	                SEP #$20        ; set A short
.394e59	85 0e		sta $032e	                STA DOS_STATUS
.394e5b	28		plp		                PLP
.394e5c	2b		pld		                PLD
.394e5d	ab		plb		                PLB
.394e5e	18		clc		                CLC
.394e5f	6b		rtl		                RTL
.394e60					ret_success
.394e60	e2 20		sep #$20	                SEP #$20        ; set A short
.394e62	64 0e		stz $032e	                STZ DOS_STATUS
.394e64	28		plp		                PLP
.394e65	2b		pld		                PLD
.394e66	ab		plb		                PLB
.394e67	38		sec		                SEC
.394e68	6b		rtl		                RTL
.394e69					DELCLUSTER
.394e69	e2 20		sep #$20	                SEP #$20        ; set A short
.394e6b	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394e6f	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394e71	d0 04		bne $394e77	                BNE fat32                       ; No: assume it's FAT32
.394e73	5c c1 4e 39	jmp $394ec1	fat12           JML DELCLUSTER12
.394e77	4c 0f 4f	jmp $394f0f	fat32           JMP DELCLUSTER32
.394e7a					WRITEFAT12
.394e7a	8b		phb		                PHB
.394e7b	0b		phd		                PHD
.394e7c	48		pha		                PHA             ; begin setdbr macro
.394e7d	08		php		                PHP
.394e7e	e2 20		sep #$20	                SEP #$20        ; set A short
.394e80	a9 00		lda #$00	                LDA #0
.394e82	48		pha		                PHA
.394e83	ab		plb		                PLB
.394e84	28		plp		                PLP
.394e85	68		pla		                PLA             ; end setdbr macro
.394e86	48		pha		                PHA             ; begin setdp macro
.394e87	08		php		                PHP
.394e88	c2 20		rep #$20	                REP #$20        ; set A long
.394e8a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e8d	5b		tcd		                TCD
.394e8e	28		plp		                PLP
.394e8f	68		pla		                PLA             ; end setdp macro
.394e90	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e92	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394e95	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e97	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394e9a	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e9c	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394e9e	85 02		sta $0322	                STA BIOS_LBA
.394ea0	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394ea2	85 04		sta $0324	                STA BIOS_LBA+2
.394ea4	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394ea8	90 14		bcc $394ebe	                BCC done
.394eaa	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ead	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394eaf	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394eb2	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394eb4	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394eb6	d0 02		bne $394eba	                BNE put_second
.394eb8	e6 04		inc $0324	                INC BIOS_LBA+2
.394eba	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394ebe	2b		pld		done            PLD
.394ebf	ab		plb		                PLB
.394ec0	6b		rtl		                RTL
.394ec1					DELCLUSTER12
.394ec1	8b		phb		                PHB
.394ec2	0b		phd		                PHD
.394ec3	08		php		                PHP
.394ec4	48		pha		                PHA             ; begin setdbr macro
.394ec5	08		php		                PHP
.394ec6	e2 20		sep #$20	                SEP #$20        ; set A short
.394ec8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394eca	48		pha		                PHA
.394ecb	ab		plb		                PLB
.394ecc	28		plp		                PLP
.394ecd	68		pla		                PLA             ; end setdbr macro
.394ece	48		pha		                PHA             ; begin setdp macro
.394ecf	08		php		                PHP
.394ed0	c2 20		rep #$20	                REP #$20        ; set A long
.394ed2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ed5	5b		tcd		                TCD
.394ed6	28		plp		                PLP
.394ed7	68		pla		                PLA             ; end setdp macro
.394ed8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394eda	22 88 4a 39	jsl $394a88	                JSL FATFORCLUSTER12
.394ede	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394edf	89 01 00	bit #$0001	                BIT #1
.394ee2	d0 08		bne $394eec	                BNE is_odd
.394ee4	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394ee7	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394eea	80 06		bra $394ef2	                BRA save_update
.394eec	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394eef	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394ef2	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394ef5	22 7a 4e 39	jsl $394e7a	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394ef9	b0 0b		bcs $394f06	                BCS ret_success
.394efb					ret_failure
.394efb	e2 20		sep #$20	                SEP #$20        ; set A short
.394efd	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394eff	85 0e		sta $032e	                STA DOS_STATUS
.394f01	28		plp		                PLP
.394f02	2b		pld		                PLD
.394f03	ab		plb		                PLB
.394f04	18		clc		                CLC
.394f05	6b		rtl		                RTL
.394f06					ret_success
.394f06	e2 20		sep #$20	                SEP #$20        ; set A short
.394f08	64 0e		stz $032e	                STZ DOS_STATUS
.394f0a	28		plp		                PLP
.394f0b	2b		pld		                PLD
.394f0c	ab		plb		                PLB
.394f0d	38		sec		                SEC
.394f0e	6b		rtl		                RTL
.394f0f					DELCLUSTER32
.394f0f	8b		phb		                PHB
.394f10	0b		phd		                PHD
.394f11	08		php		                PHP
.394f12	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f14	48		pha		                PHA             ; begin setdbr macro
.394f15	08		php		                PHP
.394f16	e2 20		sep #$20	                SEP #$20        ; set A short
.394f18	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f1a	48		pha		                PHA
.394f1b	ab		plb		                PLB
.394f1c	28		plp		                PLP
.394f1d	68		pla		                PLA             ; end setdbr macro
.394f1e	48		pha		                PHA             ; begin setdp macro
.394f1f	08		php		                PHP
.394f20	c2 20		rep #$20	                REP #$20        ; set A long
.394f22	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f25	5b		tcd		                TCD
.394f26	28		plp		                PLP
.394f27	68		pla		                PLA             ; end setdp macro
.394f28	22 f0 4a 39	jsl $394af0	                JSL FATFORCLUSTER32
.394f2c	a9 00 00	lda #$0000	                LDA #0
.394f2f	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394f32	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394f35	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f39	b0 0b		bcs $394f46	                BCS ret_success
.394f3b					ret_failure
.394f3b	e2 20		sep #$20	                SEP #$20        ; set A short
.394f3d	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394f3f	85 0e		sta $032e	                STA DOS_STATUS
.394f41	28		plp		                PLP
.394f42	2b		pld		                PLD
.394f43	ab		plb		                PLB
.394f44	18		clc		                CLC
.394f45	6b		rtl		                RTL
.394f46					ret_success
.394f46	e2 20		sep #$20	                SEP #$20        ; set A short
.394f48	64 0e		stz $032e	                STZ DOS_STATUS
.394f4a	28		plp		                PLP
.394f4b	2b		pld		                PLD
.394f4c	ab		plb		                PLB
.394f4d	38		sec		                SEC
.394f4e	6b		rtl		                RTL
.394f4f					DOS_APPENDCLUS
.394f4f	8b		phb		                PHB
.394f50	0b		phd		                PHD
.394f51	08		php		                PHP
.394f52	48		pha		                PHA             ; begin setdbr macro
.394f53	08		php		                PHP
.394f54	e2 20		sep #$20	                SEP #$20        ; set A short
.394f56	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f58	48		pha		                PHA
.394f59	ab		plb		                PLB
.394f5a	28		plp		                PLP
.394f5b	68		pla		                PLA             ; end setdbr macro
.394f5c	48		pha		                PHA             ; begin setdp macro
.394f5d	08		php		                PHP
.394f5e	c2 20		rep #$20	                REP #$20        ; set A long
.394f60	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f63	5b		tcd		                TCD
.394f64	28		plp		                PLP
.394f65	68		pla		                PLA             ; end setdp macro
.394f66	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f68	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394f6a	48		pha		                PHA
.394f6b	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394f6d	48		pha		                PHA
.394f6e	22 54 4c 39	jsl $394c54	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394f72	b0 09		bcs $394f7d	                BCS save_cluster                ; If we got a cluster, write the data to it
.394f74	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394f75	85 10		sta $0330	                STA DOS_CLUS_ID
.394f77	68		pla		                PLA
.394f78	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f7a	82 7d 00	brl $394ffa	                BRL pass_failure                ; Pass the failure back up the chain
.394f7d	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394f7f	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394f82	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f84	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394f87	22 8d 47 39	jsl $39478d	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394f8b	90 e7		bcc $394f74	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394f8d	68		pla		                PLA                             ; Restore the cluster of the file
.394f8e	85 10		sta $0330	                STA DOS_CLUS_ID
.394f90	68		pla		                PLA
.394f91	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f93	22 5b 4b 39	jsl $394b5b	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394f97	b0 fa		bcs $394f93	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394f99	e2 20		sep #$20	                SEP #$20        ; set A short
.394f9b	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f9f	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394fa1	d0 3d		bne $394fe0	                BNE fat32                       ; No: assume it's FAT32
.394fa3					fat12
.394fa3	c2 20		rep #$20	                REP #$20        ; set A long
.394fa5	22 15 4a 39	jsl $394a15	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394fa9	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394fab	89 01 00	bit #$0001	                BIT #1
.394fae	d0 11		bne $394fc1	                BNE is_odd
.394fb0	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394fb3	29 ff 0f	and #$0fff	                AND #$0FFF
.394fb6	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394fb9	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394fbc	29 00 f0	and #$f000	                AND #$F000
.394fbf	80 10		bra $394fd1	                BRA update_fat12
.394fc1	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394fc4	0a		asl a		                ASL A
.394fc5	0a		asl a		                ASL A
.394fc6	0a		asl a		                ASL A
.394fc7	0a		asl a		                ASL A
.394fc8	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394fcb	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394fce	29 0f 00	and #$000f	                AND #$000F
.394fd1	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394fd4	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394fd7	22 7a 4e 39	jsl $394e7a	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394fdb	b0 22		bcs $394fff	                BCS ret_success
.394fdd	82 1a 00	brl $394ffa	                BRL pass_failure
.394fe0					fat32
.394fe0	c2 20		rep #$20	                REP #$20        ; set A long
.394fe2	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394fe5	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394fe8	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394feb	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394fee	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394ff2	b0 0b		bcs $394fff	                BCS ret_success
.394ff4	e2 20		sep #$20	                SEP #$20        ; set A short
.394ff6	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394ff8	85 0e		sta $032e	                STA DOS_STATUS
.394ffa	28		plp		pass_failure    PLP
.394ffb	2b		pld		                PLD
.394ffc	ab		plb		                PLB
.394ffd	18		clc		                CLC
.394ffe	6b		rtl		                RTL
.394fff					ret_success
.394fff	e2 20		sep #$20	                SEP #$20        ; set A short
.395001	64 0e		stz $032e	                STZ DOS_STATUS
.395003	28		plp		                PLP
.395004	2b		pld		                PLD
.395005	ab		plb		                PLB
.395006	38		sec		                SEC
.395007	6b		rtl		                RTL
.395008					BCD2BIN
.395008	8b		phb		                PHB
.395009	0b		phd		                PHD
.39500a	08		php		                PHP
.39500b	48		pha		                PHA             ; begin setdbr macro
.39500c	08		php		                PHP
.39500d	e2 20		sep #$20	                SEP #$20        ; set A short
.39500f	a9 00		lda #$00	                LDA #0
.395011	48		pha		                PHA
.395012	ab		plb		                PLB
.395013	28		plp		                PLP
.395014	68		pla		                PLA             ; end setdbr macro
.395015	48		pha		                PHA             ; begin setdp macro
.395016	08		php		                PHP
.395017	c2 20		rep #$20	                REP #$20        ; set A long
.395019	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39501c	5b		tcd		                TCD
.39501d	28		plp		                PLP
.39501e	68		pla		                PLA             ; end setdp macro
.39501f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395021	85 28		sta $0348	                STA DOS_TEMP
.395023	29 0f 00	and #$000f	                AND #$000F
.395026	85 2a		sta $034a	                STA DOS_TEMP+2
.395028	a5 28		lda $0348	                LDA DOS_TEMP
.39502a	4a		lsr a		                LSR A
.39502b	4a		lsr a		                LSR A
.39502c	4a		lsr a		                LSR A
.39502d	4a		lsr a		                LSR A
.39502e	85 28		sta $0348	                STA DOS_TEMP
.395030	29 0f 00	and #$000f	                AND #$000F
.395033	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395037	a9 0a 00	lda #$000a	                LDA #10
.39503a	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39503e	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395042	18		clc		                CLC
.395043	65 2a		adc $034a	                ADC DOS_TEMP+2
.395045	85 2a		sta $034a	                STA DOS_TEMP+2
.395047	a5 28		lda $0348	                LDA DOS_TEMP
.395049	4a		lsr a		                LSR A
.39504a	4a		lsr a		                LSR A
.39504b	4a		lsr a		                LSR A
.39504c	4a		lsr a		                LSR A
.39504d	85 28		sta $0348	                STA DOS_TEMP
.39504f	29 0f 00	and #$000f	                AND #$000F
.395052	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395056	a9 64 00	lda #$0064	                LDA #100
.395059	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39505d	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395061	18		clc		                CLC
.395062	65 2a		adc $034a	                ADC DOS_TEMP+2
.395064	85 2a		sta $034a	                STA DOS_TEMP+2
.395066	a5 28		lda $0348	                LDA DOS_TEMP
.395068	4a		lsr a		                LSR A
.395069	4a		lsr a		                LSR A
.39506a	4a		lsr a		                LSR A
.39506b	4a		lsr a		                LSR A
.39506c	29 0f 00	and #$000f	                AND #$000F
.39506f	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395073	a9 e8 03	lda #$03e8	                LDA #1000
.395076	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39507a	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39507e	18		clc		                CLC
.39507f	65 2a		adc $034a	                ADC DOS_TEMP+2
.395081	28		plp		                PLP
.395082	2b		pld		                PLD
.395083	ab		plb		                PLB
.395084	6b		rtl		                RTL
.395085					DOS_RTCCREATE
.395085	8b		phb		                PHB
.395086	0b		phd		                PHD
.395087	08		php		                PHP
.395088	48		pha		                PHA             ; begin setdbr macro
.395089	08		php		                PHP
.39508a	e2 20		sep #$20	                SEP #$20        ; set A short
.39508c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39508e	48		pha		                PHA
.39508f	ab		plb		                PLB
.395090	28		plp		                PLP
.395091	68		pla		                PLA             ; end setdbr macro
.395092	48		pha		                PHA             ; begin setdp macro
.395093	08		php		                PHP
.395094	c2 20		rep #$20	                REP #$20        ; set A long
.395096	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395099	5b		tcd		                TCD
.39509a	28		plp		                PLP
.39509b	68		pla		                PLA             ; end setdp macro
.39509c	c2 10		rep #$10	                REP #$10        ; set X long
.39509e	e2 20		sep #$20	                SEP #$20        ; set A short
.3950a0	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.3950a4	09 08		ora #$08	                ORA #%00001000
.3950a6	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.3950aa	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.3950ae	85 29		sta $0349	                STA DOS_TEMP+1
.3950b0	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.3950b4	85 28		sta $0348	                STA DOS_TEMP
.3950b6	c2 20		rep #$20	                REP #$20        ; set A long
.3950b8	a5 28		lda $0348	                LDA DOS_TEMP
.3950ba	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.3950be	85 28		sta $0348	                STA DOS_TEMP
.3950c0	38		sec		                SEC                         ; Year is relative to 1980
.3950c1	e9 bc 07	sbc #$07bc	                SBC #1980
.3950c4	c2 20		rep #$20	                REP #$20        ; set A long
.3950c6	0a		asl a		                ASL A
.3950c7	0a		asl a		                ASL A
.3950c8	0a		asl a		                ASL A
.3950c9	0a		asl a		                ASL A
.3950ca	0a		asl a		                ASL A
.3950cb	0a		asl a		                ASL A
.3950cc	0a		asl a		                ASL A
.3950cd	0a		asl a		                ASL A
.3950ce	0a		asl a		                ASL A
.3950cf	29 00 fe	and #$fe00	                AND #$FE00
.3950d2	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3950d5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3950d9	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3950dd	c2 20		rep #$20	                REP #$20        ; set A long
.3950df	29 ff 00	and #$00ff	                AND #$00FF
.3950e2	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.3950e6	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3950e9	0a		asl a		                ASL A
.3950ea	0a		asl a		                ASL A
.3950eb	0a		asl a		                ASL A
.3950ec	0a		asl a		                ASL A
.3950ed	0a		asl a		                ASL A
.3950ee	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3950f1	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3950f4	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3950f6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3950fa	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3950fe	c2 20		rep #$20	                REP #$20        ; set A long
.395100	29 ff 00	and #$00ff	                AND #$00FF
.395103	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.395107	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39510a	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39510d	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39510f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395111	e2 20		sep #$20	                SEP #$20        ; set A short
.395113	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395117	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.395119	c2 20		rep #$20	                REP #$20        ; set A long
.39511b	29 ff 00	and #$00ff	                AND #$00FF
.39511e	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.395122	c2 20		rep #$20	                REP #$20        ; set A long
.395124	0a		asl a		                ASL A
.395125	0a		asl a		                ASL A
.395126	0a		asl a		                ASL A
.395127	0a		asl a		                ASL A
.395128	0a		asl a		                ASL A
.395129	0a		asl a		                ASL A
.39512a	0a		asl a		                ASL A
.39512b	0a		asl a		                ASL A
.39512c	0a		asl a		                ASL A
.39512d	0a		asl a		                ASL A
.39512e	0a		asl a		                ASL A
.39512f	29 00 f8	and #$f800	                AND #$F800
.395132	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395135	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395137	e2 20		sep #$20	                SEP #$20        ; set A short
.395139	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.39513d	c2 20		rep #$20	                REP #$20        ; set A long
.39513f	29 ff 00	and #$00ff	                AND #$00FF
.395142	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.395146	c2 20		rep #$20	                REP #$20        ; set A long
.395148	0a		asl a		                ASL A
.395149	0a		asl a		                ASL A
.39514a	0a		asl a		                ASL A
.39514b	0a		asl a		                ASL A
.39514c	0a		asl a		                ASL A
.39514d	29 e0 07	and #$07e0	                AND #$07E0
.395150	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395153	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395155	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395157	e2 20		sep #$20	                SEP #$20        ; set A short
.395159	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39515d	c2 20		rep #$20	                REP #$20        ; set A long
.39515f	29 ff 00	and #$00ff	                AND #$00FF
.395162	22 08 50 39	jsl $395008	                JSL BCD2BIN                 ; Convert it to binary
.395166	c2 20		rep #$20	                REP #$20        ; set A long
.395168	29 1f 00	and #$001f	                AND #$001F
.39516b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39516e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395170	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395172	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395176	29 f7 00	and #$00f7	                AND #%11110111
.395179	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39517d	28		plp		                PLP
.39517e	2b		pld		                PLD
.39517f	ab		plb		                PLB
.395180	6b		rtl		                RTL
.395181					DOS_CREATE
.395181	8b		phb		                PHB
.395182	0b		phd		                PHD
.395183	08		php		                PHP
.395184	48		pha		                PHA             ; begin setdbr macro
.395185	08		php		                PHP
.395186	e2 20		sep #$20	                SEP #$20        ; set A short
.395188	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39518a	48		pha		                PHA
.39518b	ab		plb		                PLB
.39518c	28		plp		                PLP
.39518d	68		pla		                PLA             ; end setdbr macro
.39518e	48		pha		                PHA             ; begin setdp macro
.39518f	08		php		                PHP
.395190	c2 20		rep #$20	                REP #$20        ; set A long
.395192	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395195	5b		tcd		                TCD
.395196	28		plp		                PLP
.395197	68		pla		                PLA             ; end setdp macro
.395198	c2 30		rep #$30	                REP #$30        ; set A&X long
.39519a	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.39519d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39519f	85 28		sta $0348	                STA DOS_TEMP
.3951a1	c8		iny		                INY
.3951a2	c8		iny		                INY
.3951a3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951a5	85 2a		sta $034a	                STA DOS_TEMP+2
.3951a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3951a9	a0 00 00	ldy #$0000	                LDY #0
.3951ac	a2 00 00	ldx #$0000	                LDX #0
.3951af	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3951b1	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3951b3	f0 04		beq $3951b9	                BEQ find_file                   ; If it's NULL, we're done
.3951b5	e8		inx		                INX
.3951b6	c8		iny		                INY
.3951b7	80 f6		bra $3951af	                BRA path_loop
.3951b9	22 9e 48 39	jsl $39489e	find_file       JSL DOS_PARSE_PATH
.3951bd	22 36 49 39	jsl $394936	                JSL DOS_FINDFILE
.3951c1	90 07		bcc $3951ca	                BCC set_device
.3951c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3951c5	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3951c7	82 d2 00	brl $39529c	                BRL ret_failure
.3951ca					set_device
.3951ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3951cc	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3951cf	a5 01		lda $0321	                LDA BIOS_DEV
.3951d1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951d3					validate_name
.3951d3	22 54 4c 39	jsl $394c54	                JSL DOS_FREECLUS
.3951d7	b0 03		bcs $3951dc	                BCS save_data
.3951d9	82 c4 00	brl $3952a0	                BRL pass_failure
.3951dc					save_data
.3951dc	c2 20		rep #$20	                REP #$20        ; set A long
.3951de	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3951e1	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3951e3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951e5	c8		iny		                INY
.3951e6	c8		iny		                INY
.3951e7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3951e9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951eb	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3951ee	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951f0	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3951f2	c8		iny		                INY
.3951f3	c8		iny		                INY
.3951f4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951f6	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3951f8	22 8d 47 39	jsl $39478d	                JSL DOS_PUTCLUSTER
.3951fc	b0 00		bcs $3951fe	                BCS find_dir
.3951fe					find_dir
.3951fe	c2 20		rep #$20	                REP #$20        ; set A long
.395200	22 1c 43 39	jsl $39431c	                JSL DOS_DIRFINDFREE
.395204	b0 1a		bcs $395220	                BCS set_entry
.395206	c2 20		rep #$20	                REP #$20        ; set A long
.395208	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39520b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39520d	85 10		sta $0330	                STA DOS_CLUS_ID
.39520f	c8		iny		                INY
.395210	c8		iny		                INY
.395211	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395213	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395215	22 0f 4f 39	jsl $394f0f	                JSL DELCLUSTER32                ; Delete the cluster
.395219	e2 20		sep #$20	                SEP #$20        ; set A short
.39521b	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39521d	82 7c 00	brl $39529c	                BRL ret_failure
.395220					set_entry
.395220	e2 20		sep #$20	                SEP #$20        ; set A short
.395222	a0 00 00	ldy #$0000	                LDY #0
.395225	a9 00		lda #$00	                LDA #0                          ; NULL
.395227	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.395229	c8		iny		                INY
.39522a	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39522d	d0 f8		bne $395227	                BNE copy_dir_loop
.39522f	a0 00 00	ldy #$0000	                LDY #0
.395232	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395235	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395237	c8		iny		                INY
.395238	c0 0b 00	cpy #$000b	                CPY #11
.39523b	d0 f5		bne $395232	                BNE name_loop
.39523d	c2 20		rep #$20	                REP #$20        ; set A long
.39523f	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395242	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395244	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395247	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395249	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39524c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39524e	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395251	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395253	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395256	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395258	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39525b	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39525d	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395260	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395262	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395265	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395267	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39526a	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.39526d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39526f	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395272	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395274	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395277	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395279	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39527c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39527e	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395281	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395283	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395286	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395288	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.39528b	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39528d	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395290	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395292	c2 20		rep #$20	                REP #$20        ; set A long
.395294	22 da 43 39	jsl $3943da	                JSL DOS_DIRWRITE
.395298	b0 0b		bcs $3952a5	                BCS ret_success
.39529a	80 04		bra $3952a0	                BRA pass_failure
.39529c					ret_failure
.39529c	e2 20		sep #$20	                SEP #$20        ; set A short
.39529e	85 0e		sta $032e	                STA DOS_STATUS
.3952a0	28		plp		pass_failure    PLP
.3952a1	2b		pld		                PLD
.3952a2	ab		plb		                PLB
.3952a3	18		clc		                CLC
.3952a4	6b		rtl		                RTL
.3952a5					ret_success
.3952a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3952a7	64 0e		stz $032e	                STZ DOS_STATUS
.3952a9	28		plp		                PLP
.3952aa	2b		pld		                PLD
.3952ab	ab		plb		                PLB
.3952ac	38		sec		                SEC
.3952ad	6b		rtl		                RTL
.3952ae					DOS_COPYPATH
.3952ae	da		phx		                PHX
.3952af	5a		phy		                PHY
.3952b0	8b		phb		                PHB
.3952b1	0b		phd		                PHD
.3952b2	08		php		                PHP
.3952b3	48		pha		                PHA             ; begin setdbr macro
.3952b4	08		php		                PHP
.3952b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3952b7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952b9	48		pha		                PHA
.3952ba	ab		plb		                PLB
.3952bb	28		plp		                PLP
.3952bc	68		pla		                PLA             ; end setdbr macro
.3952bd	48		pha		                PHA             ; begin setdp macro
.3952be	08		php		                PHP
.3952bf	c2 20		rep #$20	                REP #$20        ; set A long
.3952c1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952c4	5b		tcd		                TCD
.3952c5	28		plp		                PLP
.3952c6	68		pla		                PLA             ; end setdp macro
.3952c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3952c9	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3952cc	a2 00 00	ldx #$0000	                LDX #0
.3952cf	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3952d1	e8		inx		                INX
.3952d2	e8		inx		                INX
.3952d3	e0 00 01	cpx #$0100	                CPX #256
.3952d6	d0 f7		bne $3952cf	                BNE clr_loop
.3952d8	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3952da	d0 04		bne $3952e0	                BNE get_path            ; No: attempt to fetch the path
.3952dc	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3952de	f0 27		beq $395307	                BEQ done                ; Yes: return an empty buffer
.3952e0	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3952e3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952e5	85 28		sta $0348	                STA DOS_TEMP
.3952e7	c8		iny		                INY
.3952e8	c8		iny		                INY
.3952e9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952eb	85 2a		sta $034a	                STA DOS_TEMP+2
.3952ed	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3952ef	d0 04		bne $3952f5	                BNE start_copy          ; No: start copying it
.3952f1	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3952f3	f0 12		beq $395307	                BEQ done                ; Yes: return an empty buffer
.3952f5					start_copy
.3952f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3952f7	a2 00 00	ldx #$0000	                LDX #0
.3952fa	a0 00 00	ldy #$0000	                LDY #0
.3952fd	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3952ff	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.395301	f0 04		beq $395307	                BEQ done
.395303	e8		inx		                INX
.395304	c8		iny		                INY
.395305	d0 f6		bne $3952fd	                BNE loop
.395307	28		plp		done            PLP
.395308	2b		pld		                PLD
.395309	ab		plb		                PLB
.39530a	7a		ply		                PLY
.39530b	fa		plx		                PLX
.39530c	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.39530d					DOS_TEST
.39530d	8b		phb		                PHB
.39530e	0b		phd		                PHD
.39530f	08		php		                PHP
.395310	48		pha		                PHA             ; begin setdbr macro
.395311	08		php		                PHP
.395312	e2 20		sep #$20	                SEP #$20        ; set A short
.395314	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395316	48		pha		                PHA
.395317	ab		plb		                PLB
.395318	28		plp		                PLP
.395319	68		pla		                PLA             ; end setdbr macro
.39531a	48		pha		                PHA             ; begin setdp macro
.39531b	08		php		                PHP
.39531c	c2 20		rep #$20	                REP #$20        ; set A long
.39531e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395321	5b		tcd		                TCD
.395322	28		plp		                PLP
.395323	68		pla		                PLA             ; end setdp macro
.395324	c2 30		rep #$30	                REP #$30        ; set A&X long
.395326	a9 4c 53	lda #$534c	                LDA #<>src_file
.395329	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.39532d	a9 39 00	lda #$0039	                LDA #`src_file
.395330	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395334	a9 59 53	lda #$5359	                LDA #<>dst_file
.395337	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39533b	a9 39 00	lda #$0039	                LDA #`dst_file
.39533e	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395342	22 de 59 39	jsl $3959de	                JSL IF_COPY
.395346	b0 00		bcs $395348	                BCS done
.395348	28		plp		done            PLP
.395349	2b		pld		                PLD
.39534a	ab		plb		                PLB
.39534b	6b		rtl		                RTL
>39534c	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395354	2e 62 61 73 00
>395359	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395361	32 2e 62 61 73 00
.395367					IF_OPEN
.395367	da		phx		                PHX
.395368	5a		phy		                PHY
.395369	0b		phd		                PHD
.39536a	8b		phb		                PHB
.39536b	08		php		                PHP
.39536c	48		pha		                PHA             ; begin setdbr macro
.39536d	08		php		                PHP
.39536e	e2 20		sep #$20	                SEP #$20        ; set A short
.395370	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395372	48		pha		                PHA
.395373	ab		plb		                PLB
.395374	28		plp		                PLP
.395375	68		pla		                PLA             ; end setdbr macro
.395376	48		pha		                PHA             ; begin setdp macro
.395377	08		php		                PHP
.395378	c2 20		rep #$20	                REP #$20        ; set A long
.39537a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39537d	5b		tcd		                TCD
.39537e	28		plp		                PLP
.39537f	68		pla		                PLA             ; end setdp macro
.395380	e2 20		sep #$20	                SEP #$20        ; set A short
.395382	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395385	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395387	89 38		bit #$38	                BIT #FD_STAT_OPEN
.395389	f0 05		beq $395390	                BEQ ok_to_open
.39538b	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.39538d	82 0d 05	brl $39589d	                BRL IF_FAILURE
.395390	22 ae 52 39	jsl $3952ae	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395394	22 36 49 39	jsl $394936	                JSL DOS_FINDFILE                ; Attempt to find the file
.395398	b0 03		bcs $39539d	                BCS is_found                    ; If OK: we found the file
.39539a	82 04 05	brl $3958a1	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.39539d					is_found
.39539d	e2 20		sep #$20	                SEP #$20        ; set A short
.39539f	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3953a2	a5 01		lda $0321	                LDA BIOS_DEV
.3953a4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953a6	c2 20		rep #$20	                REP #$20        ; set A long
.3953a8	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3953ab	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953ad	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953af	c8		iny		                INY
.3953b0	c8		iny		                INY
.3953b1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953b3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953b5	22 50 47 39	jsl $394750	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3953b9	b0 03		bcs $3953be	                BCS read_cluster
.3953bb	82 e3 04	brl $3958a1	                BRL IF_PASSFAILURE
.3953be	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3953c1	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953c3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953c5	c8		iny		                INY
.3953c6	c8		iny		                INY
.3953c7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953c9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953cb	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3953ce	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953d0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953d2	c8		iny		                INY
.3953d3	c8		iny		                INY
.3953d4	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953d6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953d8	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3953db	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3953dd	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3953e0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953e2	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3953e5	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3953e7	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3953ea	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3953ee	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3953f1	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3953f3	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3953f5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953f7	82 ae 04	brl $3958a8	                BRL IF_SUCCESS
.3953fa					IF_CREATE
.3953fa	da		phx		                PHX
.3953fb	5a		phy		                PHY
.3953fc	0b		phd		                PHD
.3953fd	8b		phb		                PHB
.3953fe	08		php		                PHP
.3953ff	48		pha		                PHA             ; begin setdbr macro
.395400	08		php		                PHP
.395401	e2 20		sep #$20	                SEP #$20        ; set A short
.395403	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395405	48		pha		                PHA
.395406	ab		plb		                PLB
.395407	28		plp		                PLP
.395408	68		pla		                PLA             ; end setdbr macro
.395409	48		pha		                PHA             ; begin setdp macro
.39540a	08		php		                PHP
.39540b	c2 20		rep #$20	                REP #$20        ; set A long
.39540d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395410	5b		tcd		                TCD
.395411	28		plp		                PLP
.395412	68		pla		                PLA             ; end setdp macro
.395413	22 81 51 39	jsl $395181	                JSL DOS_CREATE                  ; Attempt to create the file
.395417	90 18		bcc $395431	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395419	c2 30		rep #$30	                REP #$30        ; set A&X long
.39541b	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.39541e	a9 00 00	lda #$0000	                LDA #0
.395421	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395423	c8		iny		                INY
.395424	c8		iny		                INY
.395425	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395427	e2 20		sep #$20	                SEP #$20        ; set A short
.395429	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39542c	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.39542e	82 77 04	brl $3958a8	                BRL IF_SUCCESS
.395431	82 69 04	brl $39589d	pass_failure    BRL IF_FAILURE
.395434					IF_CLOSE
.395434	da		phx		                PHX
.395435	5a		phy		                PHY
.395436	0b		phd		                PHD
.395437	8b		phb		                PHB
.395438	08		php		                PHP
.395439	48		pha		                PHA             ; begin setdbr macro
.39543a	08		php		                PHP
.39543b	e2 20		sep #$20	                SEP #$20        ; set A short
.39543d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39543f	48		pha		                PHA
.395440	ab		plb		                PLB
.395441	28		plp		                PLP
.395442	68		pla		                PLA             ; end setdbr macro
.395443	48		pha		                PHA             ; begin setdp macro
.395444	08		php		                PHP
.395445	c2 20		rep #$20	                REP #$20        ; set A long
.395447	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39544a	5b		tcd		                TCD
.39544b	28		plp		                PLP
.39544c	68		pla		                PLA             ; end setdp macro
.39544d	e2 20		sep #$20	                SEP #$20        ; set A short
.39544f	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395452	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395454	89 02		bit #$02	                BIT #FD_STAT_WRITE
.395456	f0 09		beq $395461	                BEQ set_flag                    ; No, just mark it closed
.395458	22 cd 54 39	jsl $3954cd	                JSL IF_WRITE                    ; Attempt to write the cluster
.39545c	b0 03		bcs $395461	                BCS set_flag
.39545e	82 40 04	brl $3958a1	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395461	22 94 59 39	jsl $395994	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395465	82 40 04	brl $3958a8	                BRL IF_SUCCESS
.395468					IF_READ
.395468	da		phx		                PHX
.395469	5a		phy		                PHY
.39546a	0b		phd		                PHD
.39546b	8b		phb		                PHB
.39546c	08		php		                PHP
.39546d	48		pha		                PHA             ; begin setdbr macro
.39546e	08		php		                PHP
.39546f	e2 20		sep #$20	                SEP #$20        ; set A short
.395471	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395473	48		pha		                PHA
.395474	ab		plb		                PLB
.395475	28		plp		                PLP
.395476	68		pla		                PLA             ; end setdbr macro
.395477	48		pha		                PHA             ; begin setdp macro
.395478	08		php		                PHP
.395479	c2 20		rep #$20	                REP #$20        ; set A long
.39547b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39547e	5b		tcd		                TCD
.39547f	28		plp		                PLP
.395480	68		pla		                PLA             ; end setdp macro
.395481	c2 10		rep #$10	                REP #$10        ; set X long
.395483	e2 20		sep #$20	                SEP #$20        ; set A short
.395485					get_dev
.395485	e2 20		sep #$20	                SEP #$20        ; set A short
.395487	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39548a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39548c	85 01		sta $0321	                STA BIOS_DEV
.39548e	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395492	c2 20		rep #$20	                REP #$20        ; set A long
.395494	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395497	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395499	85 10		sta $0330	                STA DOS_CLUS_ID
.39549b	c8		iny		                INY
.39549c	c8		iny		                INY
.39549d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39549f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954a1	22 5b 4b 39	jsl $394b5b	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3954a5	90 13		bcc $3954ba	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3954a7	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3954aa	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954ac	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3954ae	c8		iny		                INY
.3954af	c8		iny		                INY
.3954b0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954b2	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3954b4	22 50 47 39	jsl $394750	                JSL DOS_GETCLUSTER              ; Get the cluster
.3954b8	b0 03		bcs $3954bd	                BCS ret_success                 ; If ok: return success
.3954ba					pass_failure
.3954ba	82 e4 03	brl $3958a1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3954bd	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3954c0	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954c2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954c4	c8		iny		                INY
.3954c5	c8		iny		                INY
.3954c6	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954c8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954ca	82 db 03	brl $3958a8	                BRL IF_SUCCESS
.3954cd					IF_WRITE
.3954cd	da		phx		                PHX
.3954ce	5a		phy		                PHY
.3954cf	0b		phd		                PHD
.3954d0	8b		phb		                PHB
.3954d1	08		php		                PHP
.3954d2	48		pha		                PHA             ; begin setdbr macro
.3954d3	08		php		                PHP
.3954d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3954d6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954d8	48		pha		                PHA
.3954d9	ab		plb		                PLB
.3954da	28		plp		                PLP
.3954db	68		pla		                PLA             ; end setdbr macro
.3954dc	48		pha		                PHA             ; begin setdp macro
.3954dd	08		php		                PHP
.3954de	c2 20		rep #$20	                REP #$20        ; set A long
.3954e0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954e3	5b		tcd		                TCD
.3954e4	28		plp		                PLP
.3954e5	68		pla		                PLA             ; end setdp macro
.3954e6	c2 10		rep #$10	                REP #$10        ; set X long
.3954e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3954ea	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3954ed	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954ef	85 01		sta $0321	                STA BIOS_DEV
.3954f1	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3954f5	c2 20		rep #$20	                REP #$20        ; set A long
.3954f7	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3954fa	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954fc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3954fe	c8		iny		                INY
.3954ff	c8		iny		                INY
.395500	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395502	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395504	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395507	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395509	85 10		sta $0330	                STA DOS_CLUS_ID
.39550b	c8		iny		                INY
.39550c	c8		iny		                INY
.39550d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39550f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395511	d0 1a		bne $39552d	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395513	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395515	d0 16		bne $39552d	                BNE rewrite_cluster
.395517	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39551a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39551c	85 10		sta $0330	                STA DOS_CLUS_ID
.39551e	c8		iny		                INY
.39551f	c8		iny		                INY
.395520	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395522	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395524	22 4f 4f 39	jsl $394f4f	                JSL DOS_APPENDCLUS              ; Append the cluster
.395528	b0 0c		bcs $395536	                BCS ret_success                 ; If OK: return success
.39552a	82 74 03	brl $3958a1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39552d	22 8d 47 39	jsl $39478d	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395531	b0 03		bcs $395536	                BCS ret_success                 ; If ok: return success
.395533	82 6b 03	brl $3958a1	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395536	82 6f 03	brl $3958a8	ret_success     BRL IF_SUCCESS
.395539					IF_DIROPEN
.395539	da		phx		                PHX
.39553a	5a		phy		                PHY
.39553b	0b		phd		                PHD
.39553c	8b		phb		                PHB
.39553d	08		php		                PHP
.39553e	48		pha		                PHA             ; begin setdbr macro
.39553f	08		php		                PHP
.395540	e2 20		sep #$20	                SEP #$20        ; set A short
.395542	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395544	48		pha		                PHA
.395545	ab		plb		                PLB
.395546	28		plp		                PLP
.395547	68		pla		                PLA             ; end setdbr macro
.395548	48		pha		                PHA             ; begin setdp macro
.395549	08		php		                PHP
.39554a	c2 20		rep #$20	                REP #$20        ; set A long
.39554c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39554f	5b		tcd		                TCD
.395550	28		plp		                PLP
.395551	68		pla		                PLA             ; end setdp macro
.395552	c2 30		rep #$30	                REP #$30        ; set A&X long
.395554	22 ae 52 39	jsl $3952ae	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395558	22 9e 48 39	jsl $39489e	                JSL DOS_PARSE_PATH          ; Parse the path
.39555c	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395560	b0 03		bcs $395565	                BCS get_root_dir            ; If successful: get the root directory
.395562	82 3c 03	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395565					get_root_dir
.395565	c2 30		rep #$30	                REP #$30        ; set A&X long
.395567	22 c1 41 39	jsl $3941c1	                JSL DOS_DIROPEN
.39556b	b0 03		bcs $395570	                BCS success
.39556d	82 31 03	brl $3958a1	                BRL IF_PASSFAILURE
.395570	82 35 03	brl $3958a8	success         BRL IF_SUCCESS
.395573					IF_DIRNEXT
.395573	5c 5b 42 39	jmp $39425b	                JML DOS_DIRNEXT
.395577					IF_DELETE
.395577	da		phx		                PHX
.395578	5a		phy		                PHY
.395579	0b		phd		                PHD
.39557a	8b		phb		                PHB
.39557b	08		php		                PHP
.39557c	48		pha		                PHA             ; begin setdbr macro
.39557d	08		php		                PHP
.39557e	e2 20		sep #$20	                SEP #$20        ; set A short
.395580	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395582	48		pha		                PHA
.395583	ab		plb		                PLB
.395584	28		plp		                PLP
.395585	68		pla		                PLA             ; end setdbr macro
.395586	48		pha		                PHA             ; begin setdp macro
.395587	08		php		                PHP
.395588	c2 20		rep #$20	                REP #$20        ; set A long
.39558a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39558d	5b		tcd		                TCD
.39558e	28		plp		                PLP
.39558f	68		pla		                PLA             ; end setdp macro
.395590	c2 30		rep #$30	                REP #$30        ; set A&X long
.395592	22 36 49 39	jsl $394936	                JSL DOS_FINDFILE
.395596	b0 03		bcs $39559b	                BCS get_first_clus
.395598	82 06 03	brl $3958a1	                BRL IF_PASSFAILURE
.39559b					get_first_clus
.39559b	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39559e	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3955a0	85 10		sta $0330	                STA DOS_CLUS_ID
.3955a2	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3955a5	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3955a7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955a9	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955ab	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3955ae	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3955b0	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3955b3	22 5b 4b 39	jsl $394b5b	del_loop        JSL NEXTCLUSTER
.3955b7	90 2f		bcc $3955e8	                BCC del_one
.3955b9	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955bb	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3955be	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3955c0	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3955c3	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3955c6	85 10		sta $0330	                STA DOS_CLUS_ID
.3955c8	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3955cb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955cd	22 0f 4f 39	jsl $394f0f	                JSL DELCLUSTER32
.3955d1	b0 03		bcs $3955d6	                BCS go_next
.3955d3	82 cb 02	brl $3958a1	                BRL IF_PASSFAILURE
.3955d6					go_next
.3955d6	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3955d9	85 10		sta $0330	                STA DOS_CLUS_ID
.3955db	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3955de	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3955e1	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955e3	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3955e6	80 cb		bra $3955b3	                BRA del_loop
.3955e8					del_one
.3955e8	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3955eb	85 10		sta $0330	                STA DOS_CLUS_ID
.3955ed	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3955f0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955f2	22 69 4e 39	jsl $394e69	                JSL DELCLUSTER
.3955f6	b0 03		bcs $3955fb	                BCS free_dir_entry
.3955f8	82 a6 02	brl $3958a1	                BRL IF_PASSFAILURE
.3955fb					free_dir_entry
.3955fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3955fd	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395600	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395602	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395604	22 da 43 39	jsl $3943da	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395608	b0 03		bcs $39560d	                BCS ret_success
.39560a	82 94 02	brl $3958a1	                BRL IF_PASSFAILURE
.39560d	82 98 02	brl $3958a8	ret_success     BRL IF_SUCCESS
.395610					IF_DIRREAD
.395610	da		phx		                PHX
.395611	5a		phy		                PHY
.395612	0b		phd		                PHD
.395613	8b		phb		                PHB
.395614	08		php		                PHP
.395615	48		pha		                PHA             ; begin setdbr macro
.395616	08		php		                PHP
.395617	e2 20		sep #$20	                SEP #$20        ; set A short
.395619	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39561b	48		pha		                PHA
.39561c	ab		plb		                PLB
.39561d	28		plp		                PLP
.39561e	68		pla		                PLA             ; end setdbr macro
.39561f	48		pha		                PHA             ; begin setdp macro
.395620	08		php		                PHP
.395621	c2 20		rep #$20	                REP #$20        ; set A long
.395623	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395626	5b		tcd		                TCD
.395627	28		plp		                PLP
.395628	68		pla		                PLA             ; end setdp macro
.395629	c2 30		rep #$30	                REP #$30        ; set A&X long
.39562b	22 36 49 39	jsl $394936	                JSL DOS_FINDFILE
.39562f	b0 03		bcs $395634	                BCS success
.395631	82 69 02	brl $39589d	                BRL IF_FAILURE
.395634	82 71 02	brl $3958a8	success         BRL IF_SUCCESS
.395637					IF_DIRWRITE
.395637	5c da 43 39	jmp $3943da	                JML DOS_DIRWRITE
.39563b					IF_LOAD
.39563b	da		phx		                PHX
.39563c	5a		phy		                PHY
.39563d	0b		phd		                PHD
.39563e	8b		phb		                PHB
.39563f	08		php		                PHP
.395640	48		pha		                PHA             ; begin setdbr macro
.395641	08		php		                PHP
.395642	e2 20		sep #$20	                SEP #$20        ; set A short
.395644	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395646	48		pha		                PHA
.395647	ab		plb		                PLB
.395648	28		plp		                PLP
.395649	68		pla		                PLA             ; end setdbr macro
.39564a	48		pha		                PHA             ; begin setdp macro
.39564b	08		php		                PHP
.39564c	c2 20		rep #$20	                REP #$20        ; set A long
.39564e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395651	5b		tcd		                TCD
.395652	28		plp		                PLP
.395653	68		pla		                PLA             ; end setdp macro
.395654	c2 30		rep #$30	                REP #$30        ; set A&X long
.395656	22 67 53 39	jsl $395367	                JSL IF_OPEN
.39565a	b0 03		bcs $39565f	                BCS setup                   ; If success: start setting things up
.39565c	82 42 02	brl $3958a1	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.39565f					setup
.39565f	c2 20		rep #$20	                REP #$20        ; set A long
.395661	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395664	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395666	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395668	c8		iny		                INY
.395669	c8		iny		                INY
.39566a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39566c	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39566e	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395671	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395673	85 30		sta $0350	                STA DOS_SRC_PTR
.395675	c8		iny		                INY
.395676	c8		iny		                INY
.395677	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395679	85 32		sta $0352	                STA DOS_SRC_PTR+2
.39567b	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.39567d	c9 40 00	cmp #$0040	                CMP #$0040
.395680	b0 04		bcs $395686	                BGE load_by_type            ; No: try to load it by type
.395682	5c 50 57 39	jmp $395750	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395686	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395689	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.39568c					type_loop
.39568c	e2 20		sep #$20	                SEP #$20        ; set A short
.39568e	bf d2 56 39	lda $3956d2,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395692	f0 37		beq $3956cb	                BEQ no_match                ; If NULL... we didn't get a match
.395694	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395697	d0 28		bne $3956c1	                BNE next_entry              ; If they don't match, try the next entry
.395699	bf d3 56 39	lda $3956d3,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.39569d	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3956a0	d0 1f		bne $3956c1	                BNE next_entry              ; If they don't match, try the next entry
.3956a2	bf d4 56 39	lda $3956d4,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3956a6	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3956a9	d0 16		bne $3956c1	                BNE next_entry              ; If they don't match, try the next entry
.3956ab	c2 20		rep #$20	                REP #$20        ; set A long
.3956ad	bf d5 56 39	lda $3956d5,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3956b1	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3956b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b5	bf d7 56 39	lda $3956d7,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3956b9	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3956bb	a2 00 00	ldx #$0000	                LDX #0
.3956be	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3956c1					next_entry
.3956c1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956c3	8a		txa		                TXA
.3956c4	18		clc		                CLC
.3956c5	69 06 00	adc #$0006	                ADC #6
.3956c8	aa		tax		                TAX
.3956c9	80 c1		bra $39568c	                BRA type_loop               ; And check it against the file
.3956cb					no_match
.3956cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3956cd	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3956cf	82 cb 01	brl $39589d	                BRL IF_FAILURE
>3956d2	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3956d5	d9 56				                .word <>IF_LOADPGX
>3956d7	39				                .byte `IF_LOADPGX
>3956d8	00				                .byte 0
.3956d9					IF_LOADPGX
.3956d9	c2 10		rep #$10	                REP #$10        ; set X long
.3956db	e2 20		sep #$20	                SEP #$20        ; set A short
.3956dd	a0 00 00	ldy #$0000	                LDY #0
.3956e0	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3956e2	c9 50		cmp #$50	                CMP #'P'
.3956e4	d0 15		bne $3956fb	                BNE fail_sig                        ; If not found, fail
.3956e6	c8		iny		                INY
.3956e7	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956e9	c9 47		cmp #$47	                CMP #'G'
.3956eb	d0 0e		bne $3956fb	                BNE fail_sig
.3956ed	c8		iny		                INY
.3956ee	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956f0	c9 58		cmp #$58	                CMP #'X'
.3956f2	d0 07		bne $3956fb	                BNE fail_sig
.3956f4	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3956f5	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956f7	c9 01		cmp #$01	                CMP #$01
.3956f9	f0 06		beq $395701	                BEQ get_dest                        ; All passes: go to get the destination address
.3956fb	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3956fd	22 9d 58 39	jsl $39589d	                JSL IF_FAILURE
.395701					get_dest
.395701	c2 20		rep #$20	                REP #$20        ; set A long
.395703	c8		iny		                INY
.395704	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395706	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395708	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39570a	c8		iny		                INY
.39570b	c8		iny		                INY
.39570c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.39570e	85 36		sta $0356	                STA DOS_DST_PTR+2
.395710	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395712	c8		iny		                INY                                 ; Point to the first data byte
.395713	c8		iny		                INY
.395714					copy_loop
.395714	e2 20		sep #$20	                SEP #$20        ; set A short
.395716	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395718	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39571a	c2 20		rep #$20	                REP #$20        ; set A long
.39571c	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.39571e	d0 02		bne $395722	                BNE dec_file_size
.395720	e6 34		inc $0354	                INC DOS_DST_PTR
.395722	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395723	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395725	e9 01 00	sbc #$0001	                SBC #1
.395728	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39572a	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39572c	e9 00 00	sbc #$0000	                SBC #0
.39572f	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395731	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395733	d0 04		bne $395739	                BNE next_byte
.395735	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395737	f0 14		beq $39574d	                BEQ done                            ; Yes: we're done
.395739	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39573a	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.39573d	d0 d5		bne $395714	                BNE copy_loop                       ; No: keep copying
.39573f	22 3f 4c 39	jsl $394c3f	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395743	b0 03		bcs $395748	                BCS next_cluster
.395745	82 59 01	brl $3958a1	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395748	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.39574b	80 c7		bra $395714	                BRA copy_loop                       ; Go back to copying
.39574d	82 58 01	brl $3958a8	done            BRL IF_SUCCESS
.395750					IF_LOADRAW
.395750	c2 30		rep #$30	                REP #$30        ; set A&X long
.395752	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395755					copy_loop
.395755	e2 20		sep #$20	                SEP #$20        ; set A short
.395757	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395759	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39575b	c2 20		rep #$20	                REP #$20        ; set A long
.39575d	38		sec		                SEC                         ; Count down the number of bytes left
.39575e	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395760	e9 01 00	sbc #$0001	                SBC #1
.395763	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395765	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395767	e9 00 00	sbc #$0000	                SBC #0
.39576a	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39576c	d0 04		bne $395772	                BNE continue
.39576e	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395770	f0 1b		beq $39578d	                BEQ close_file              ; If not: we're done
.395772	c8		iny		continue        INY
.395773	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395776	d0 dd		bne $395755	                BNE copy_loop               ; No: keep processing the bytes
.395778	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395779	a5 34		lda $0354	                LDA DOS_DST_PTR
.39577b	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.39577e	85 34		sta $0354	                STA DOS_DST_PTR
.395780	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395782	69 00 00	adc #$0000	                ADC #0
.395785	85 36		sta $0356	                STA DOS_DST_PTR+2
.395787	22 68 54 39	jsl $395468	                JSL IF_READ                 ; Yes: load the next cluster
.39578b	b0 c5		bcs $395752	                BCS copy_cluster            ; And start copying it
.39578d					close_file
.39578d	82 18 01	brl $3958a8	ret_success     BRL IF_SUCCESS
.395790					IF_NULLBUFFER
.395790	5a		phy		                PHY
.395791	8b		phb		                PHB
.395792	0b		phd		                PHD
.395793	08		php		                PHP
.395794	48		pha		                PHA             ; begin setdbr macro
.395795	08		php		                PHP
.395796	e2 20		sep #$20	                SEP #$20        ; set A short
.395798	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39579a	48		pha		                PHA
.39579b	ab		plb		                PLB
.39579c	28		plp		                PLP
.39579d	68		pla		                PLA             ; end setdbr macro
.39579e	48		pha		                PHA             ; begin setdp macro
.39579f	08		php		                PHP
.3957a0	c2 20		rep #$20	                REP #$20        ; set A long
.3957a2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957a5	5b		tcd		                TCD
.3957a6	28		plp		                PLP
.3957a7	68		pla		                PLA             ; end setdp macro
.3957a8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957aa	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3957ad	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957af	85 28		sta $0348	                STA DOS_TEMP
.3957b1	c8		iny		                INY
.3957b2	c8		iny		                INY
.3957b3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957b5	85 2a		sta $034a	                STA DOS_TEMP+2
.3957b7	a0 00 00	ldy #$0000	                LDY #0
.3957ba	a9 00 00	lda #$0000	                LDA #0
.3957bd	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3957bf	c8		iny		                INY
.3957c0	c8		iny		                INY
.3957c1	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3957c4	d0 f7		bne $3957bd	                BNE loop
.3957c6	28		plp		                PLP
.3957c7	2b		pld		                PLD
.3957c8	ab		plb		                PLB
.3957c9	7a		ply		                PLY
.3957ca	6b		rtl		                RTL
.3957cb					IF_COPY2BUFF
.3957cb	5a		phy		                PHY
.3957cc	8b		phb		                PHB
.3957cd	0b		phd		                PHD
.3957ce	08		php		                PHP
.3957cf	48		pha		                PHA             ; begin setdbr macro
.3957d0	08		php		                PHP
.3957d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3957d3	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3957d5	48		pha		                PHA
.3957d6	ab		plb		                PLB
.3957d7	28		plp		                PLP
.3957d8	68		pla		                PLA             ; end setdbr macro
.3957d9	48		pha		                PHA             ; begin setdp macro
.3957da	08		php		                PHP
.3957db	c2 20		rep #$20	                REP #$20        ; set A long
.3957dd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957e0	5b		tcd		                TCD
.3957e1	28		plp		                PLP
.3957e2	68		pla		                PLA             ; end setdp macro
.3957e3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957e5	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3957e8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957ea	85 28		sta $0348	                STA DOS_TEMP
.3957ec	c8		iny		                INY
.3957ed	c8		iny		                INY
.3957ee	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957f0	85 2a		sta $034a	                STA DOS_TEMP+2
.3957f2	a0 00 00	ldy #$0000	                LDY #0
.3957f5					copy_loop
.3957f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3957f7	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3957f9	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3957fb	c2 20		rep #$20	                REP #$20        ; set A long
.3957fd	c8		iny		                INY                         ; Count it
.3957fe	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395801	f0 14		beq $395817	                BEQ done                    ; Yes: we're done
.395803	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395805	c5 38		cmp $0358	                CMP DOS_END_PTR
.395807	d0 06		bne $39580f	                BNE next_byte
.395809	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39580b	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39580d	f0 08		beq $395817	                BEQ done                    ; Yes: we're done
.39580f	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.395811	d0 e2		bne $3957f5	                BNE copy_loop
.395813	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395815	80 de		bra $3957f5	                BRA copy_loop               ; And try this next byte
.395817	28		plp		done            PLP
.395818	2b		pld		                PLD
.395819	ab		plb		                PLB
.39581a	7a		ply		                PLY
.39581b	6b		rtl		                RTL
.39581c					IF_SAVE
.39581c	da		phx		                PHX
.39581d	5a		phy		                PHY
.39581e	0b		phd		                PHD
.39581f	8b		phb		                PHB
.395820	08		php		                PHP
.395821	48		pha		                PHA             ; begin setdbr macro
.395822	08		php		                PHP
.395823	e2 20		sep #$20	                SEP #$20        ; set A short
.395825	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395827	48		pha		                PHA
.395828	ab		plb		                PLB
.395829	28		plp		                PLP
.39582a	68		pla		                PLA             ; end setdbr macro
.39582b	48		pha		                PHA             ; begin setdp macro
.39582c	08		php		                PHP
.39582d	c2 20		rep #$20	                REP #$20        ; set A long
.39582f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395832	5b		tcd		                TCD
.395833	28		plp		                PLP
.395834	68		pla		                PLA             ; end setdp macro
.395835	c2 30		rep #$30	                REP #$30        ; set A&X long
.395837	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39583a	38		sec		                SEC
.39583b	a5 38		lda $0358	                LDA DOS_END_PTR
.39583d	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.39583f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395841	c8		iny		                INY
.395842	c8		iny		                INY
.395843	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395845	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395847	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395849	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39584c	18		clc		                CLC
.39584d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39584f	69 01 00	adc #$0001	                ADC #1
.395852	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395854	90 09		bcc $39585f	                BCC first_block
.395856	c8		iny		                INY
.395857	c8		iny		                INY
.395858	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39585a	69 00 00	adc #$0000	                ADC #0
.39585d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39585f	22 90 57 39	jsl $395790	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395863	22 cb 57 39	jsl $3957cb	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395867	22 fa 53 39	jsl $3953fa	                JSL IF_CREATE           ; Create file.
.39586b	b0 03		bcs $395870	                BCS check_for_end
.39586d	82 31 00	brl $3958a1	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395870	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395872	c5 38		cmp $0358	                CMP DOS_END_PTR
.395874	d0 06		bne $39587c	                BNE next_block
.395876	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395878	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39587a	f0 1d		beq $395899	                BEQ done                ; Yes: we're done
.39587c	22 90 57 39	jsl $395790	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395880	22 cb 57 39	jsl $3957cb	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395884	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395887	a9 00 00	lda #$0000	                LDA #0
.39588a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39588c	c8		iny		                INY
.39588d	c8		iny		                INY
.39588e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395890	22 cd 54 39	jsl $3954cd	                JSL IF_WRITE            ; Append to the file
.395894	b0 da		bcs $395870	                BCS check_for_end       ; And try again
.395896	82 08 00	brl $3958a1	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395899	5c a8 58 39	jmp $3958a8	done            JML IF_SUCCESS
.39589d					IF_FAILURE
.39589d	e2 20		sep #$20	                SEP #$20        ; set A short
.39589f	85 0e		sta $032e	                STA DOS_STATUS
.3958a1	28		plp		IF_PASSFAILURE  PLP
.3958a2	18		clc		                CLC
.3958a3	ab		plb		                PLB
.3958a4	2b		pld		                PLD
.3958a5	7a		ply		                PLY
.3958a6	fa		plx		                PLX
.3958a7	6b		rtl		                RTL
.3958a8					IF_SUCCESS
.3958a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3958aa	64 00		stz $0320	                STZ BIOS_STATUS
.3958ac	64 0e		stz $032e	                STZ DOS_STATUS
.3958ae	28		plp		                PLP
.3958af	38		sec		                SEC
.3958b0	ab		plb		                PLB
.3958b1	2b		pld		                PLD
.3958b2	7a		ply		                PLY
.3958b3	fa		plx		                PLX
.3958b4	6b		rtl		                RTL
.3958b5					IF_RUN
.3958b5	da		phx		                PHX
.3958b6	5a		phy		                PHY
.3958b7	0b		phd		                PHD
.3958b8	8b		phb		                PHB
.3958b9	08		php		                PHP
.3958ba	48		pha		                PHA             ; begin setdbr macro
.3958bb	08		php		                PHP
.3958bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3958be	a9 00		lda #$00	                LDA #0
.3958c0	48		pha		                PHA
.3958c1	ab		plb		                PLB
.3958c2	28		plp		                PLP
.3958c3	68		pla		                PLA             ; end setdbr macro
.3958c4	48		pha		                PHA             ; begin setdp macro
.3958c5	08		php		                PHP
.3958c6	c2 20		rep #$20	                REP #$20        ; set A long
.3958c8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958cb	5b		tcd		                TCD
.3958cc	28		plp		                PLP
.3958cd	68		pla		                PLA             ; end setdp macro
.3958ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3958d0	c2 10		rep #$10	                REP #$10        ; set X long
.3958d2	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3958d4	a2 00 00	ldx #$0000	                LDX #0
.3958d7	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3958db	e8		inx		                INX
.3958dc	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3958df	d0 f6		bne $3958d7	                BNE clr_fd_loop
.3958e1	c2 20		rep #$20	                REP #$20        ; set A long
.3958e3	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3958e6	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3958ea	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3958ed	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3958f1	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3958f3	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3958f7	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3958f9	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3958fd	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395900	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395902	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395904	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395907	85 20		sta $0340	                STA DOS_FD_PTR
.395909	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.39590c	85 22		sta $0342	                STA DOS_FD_PTR+2
.39590e	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395911	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395915	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395919	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.39591d	b0 14		bcs $395933	                BCS try_execute
.39591f	82 7f ff	brl $3958a1	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395922					chk_execute
.395922	c2 20		rep #$20	                REP #$20        ; set A long
.395924	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395926	d0 0b		bne $395933	                BNE try_execute                         ; If so: call it
.395928	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39592a	d0 07		bne $395933	                BNE try_execute
.39592c	e2 20		sep #$20	                SEP #$20        ; set A short
.39592e	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395930	82 6a ff	brl $39589d	                BRL IF_FAILURE
.395933					try_execute
.395933	e2 20		sep #$20	                SEP #$20        ; set A short
.395935	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395937	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395939	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.39593d	82 68 ff	brl $3958a8	                BRL IF_SUCCESS                          ; Return success
.395940					IF_ALLOCFD
.395940	da		phx		                PHX
.395941	5a		phy		                PHY
.395942	0b		phd		                PHD
.395943	8b		phb		                PHB
.395944	08		php		                PHP
.395945	48		pha		                PHA             ; begin setdbr macro
.395946	08		php		                PHP
.395947	e2 20		sep #$20	                SEP #$20        ; set A short
.395949	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39594b	48		pha		                PHA
.39594c	ab		plb		                PLB
.39594d	28		plp		                PLP
.39594e	68		pla		                PLA             ; end setdbr macro
.39594f	48		pha		                PHA             ; begin setdp macro
.395950	08		php		                PHP
.395951	c2 20		rep #$20	                REP #$20        ; set A long
.395953	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395956	5b		tcd		                TCD
.395957	28		plp		                PLP
.395958	68		pla		                PLA             ; end setdp macro
.395959	c2 10		rep #$10	                REP #$10        ; set X long
.39595b	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.39595e					chk_fd
.39595e	e2 20		sep #$20	                SEP #$20        ; set A short
.395960	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395963	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395965	f0 14		beq $39597b	                BEQ found                           ; No: flag and return the found descriptor
.395967					next_fd
.395967	c2 20		rep #$20	                REP #$20        ; set A long
.395969	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39596a	18		clc		                CLC
.39596b	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39596e	aa		tax		                TAX
.39596f	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395972	90 ea		bcc $39595e	                BLT chk_fd                          ; No: check this new file descriptor
.395974	e2 20		sep #$20	                SEP #$20        ; set A short
.395976	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395978	82 22 ff	brl $39589d	                BRL IF_FAILURE
.39597b	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.39597d	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395980	c2 20		rep #$20	                REP #$20        ; set A long
.395982	8a		txa		                TXA
.395983	18		clc		                CLC
.395984	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395987	85 20		sta $0340	                STA @b DOS_FD_PTR
.395989	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.39598c	69 00 00	adc #$0000	                ADC #0
.39598f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395991	82 14 ff	brl $3958a8	                BRL IF_SUCCESS                      ; Return this file descriptor
.395994					IF_FREEFD
.395994	da		phx		                PHX
.395995	5a		phy		                PHY
.395996	0b		phd		                PHD
.395997	8b		phb		                PHB
.395998	08		php		                PHP
.395999	48		pha		                PHA             ; begin setdbr macro
.39599a	08		php		                PHP
.39599b	e2 20		sep #$20	                SEP #$20        ; set A short
.39599d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39599f	48		pha		                PHA
.3959a0	ab		plb		                PLB
.3959a1	28		plp		                PLP
.3959a2	68		pla		                PLA             ; end setdbr macro
.3959a3	48		pha		                PHA             ; begin setdp macro
.3959a4	08		php		                PHP
.3959a5	c2 20		rep #$20	                REP #$20        ; set A long
.3959a7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959aa	5b		tcd		                TCD
.3959ab	28		plp		                PLP
.3959ac	68		pla		                PLA             ; end setdp macro
.3959ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3959af	c2 10		rep #$10	                REP #$10        ; set X long
.3959b1	a9 00		lda #$00	                LDA #0
.3959b3	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3959b5	82 f0 fe	brl $3958a8	                BRL IF_SUCCESS
.3959b8					DOS_SRC2DST
.3959b8	da		phx		                PHX
.3959b9	5a		phy		                PHY
.3959ba	0b		phd		                PHD
.3959bb	8b		phb		                PHB
.3959bc	08		php		                PHP
.3959bd	48		pha		                PHA             ; begin setdp macro
.3959be	08		php		                PHP
.3959bf	c2 20		rep #$20	                REP #$20        ; set A long
.3959c1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959c4	5b		tcd		                TCD
.3959c5	28		plp		                PLP
.3959c6	68		pla		                PLA             ; end setdp macro
.3959c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3959c9	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3959cc	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3959ce	aa		tax		                TAX                                     ; X := source buffer address
.3959cf	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3959d1	a8		tay		                TAY                                     ; Y := destination buffer address
.3959d2	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3959d5	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.3959d8	28		plp		                PLP
.3959d9	ab		plb		                PLB
.3959da	2b		pld		                PLD
.3959db	7a		ply		                PLY
.3959dc	fa		plx		                PLX
.3959dd	6b		rtl		                RTL
.3959de					IF_COPY
.3959de	da		phx		                PHX
.3959df	5a		phy		                PHY
.3959e0	0b		phd		                PHD
.3959e1	8b		phb		                PHB
.3959e2	08		php		                PHP
.3959e3	48		pha		                PHA             ; begin setdbr macro
.3959e4	08		php		                PHP
.3959e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3959e7	a9 00		lda #$00	                LDA #0
.3959e9	48		pha		                PHA
.3959ea	ab		plb		                PLB
.3959eb	28		plp		                PLP
.3959ec	68		pla		                PLA             ; end setdbr macro
.3959ed	48		pha		                PHA             ; begin setdp macro
.3959ee	08		php		                PHP
.3959ef	c2 20		rep #$20	                REP #$20        ; set A long
.3959f1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959f4	5b		tcd		                TCD
.3959f5	28		plp		                PLP
.3959f6	68		pla		                PLA             ; end setdp macro
.3959f7	22 40 59 39	jsl $395940	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.3959fb	b0 03		bcs $395a00	                BCS set_src_path
.3959fd	82 a1 fe	brl $3958a1	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395a00					set_src_path
.395a00	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a02	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395a05	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395a07	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a09	c8		iny		                INY
.395a0a	c8		iny		                INY
.395a0b	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395a0d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a0f					alloc_dest
.395a0f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a11	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395a13	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395a15	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a17	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395a19	22 40 59 39	jsl $395940	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395a1d	b0 0f		bcs $395a2e	                BCS set_paths                   ; If everything is ok... start setting the paths
.395a1f	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a21	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a23	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a25	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a27	22 94 59 39	jsl $395994	                JSL IF_FREEFD                   ; And free it
.395a2b	82 73 fe	brl $3958a1	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395a2e					set_paths
.395a2e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a30	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395a32	85 34		sta $0354	                STA @b DOS_DST_PTR
.395a34	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a36	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395a38	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395a3b	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395a3d	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a3f	c8		iny		                INY
.395a40	c8		iny		                INY
.395a41	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395a43	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a45	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a47	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a49	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a4b	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a4d	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395a51	b0 0f		bcs $395a62	                BCS src_open                    ; If success, work with the openned file
.395a53	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a55	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a57	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a59	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a5b	22 94 59 39	jsl $395994	                JSL IF_FREEFD                   ; And free it
.395a5f	82 bd ff	brl $395a1f	                BRL err_free_src_fd             ; Free the source file descriptor
.395a62	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395a65	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a67	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a69	c8		iny		                INY
.395a6a	c8		iny		                INY
.395a6b	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a6d	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a6f	22 b8 59 39	jsl $3959b8	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395a73	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a75	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a77	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a79	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a7b	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395a7f	b0 0f		bcs $395a90	                BCS read_next                   ; If sucessful, try to get the next cluster
.395a81	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a83	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a85	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a87	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a89	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395a8d	82 c3 ff	brl $395a53	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395a90					read_next
.395a90	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a92	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a94	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a96	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a98	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395a9c	b0 19		bcs $395ab7	                BCS copy2dest                   ; If successful, copy the sector
.395a9e	e2 20		sep #$20	                SEP #$20        ; set A short
.395aa0	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395aa2	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395aa4	f0 32		beq $395ad8	                BEQ file_copied                 ; Yes: we're done copying
.395aa6					err_dest_close
.395aa6	c2 20		rep #$20	                REP #$20        ; set A long
.395aa8	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395aaa	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aac	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395aae	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ab0	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395ab4	82 ca ff	brl $395a81	                BRL err_src_close               ; Close the source and throw an error
.395ab7					copy2dest
.395ab7	22 b8 59 39	jsl $3959b8	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395abb	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395abe	a9 00 00	lda #$0000	                LDA #0
.395ac1	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ac3	c8		iny		                INY
.395ac4	c8		iny		                INY
.395ac5	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ac7	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ac9	85 20		sta $0340	                STA @b DOS_FD_PTR
.395acb	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395acd	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395acf	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395ad3	90 d1		bcc $395aa6	                BCC err_dest_close              ; If error: close all files and throw the error
.395ad5	82 b8 ff	brl $395a90	                BRL read_next                   ; Otherwise: repeat the loop
.395ad8					file_copied
.395ad8	c2 20		rep #$20	                REP #$20        ; set A long
.395ada	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395adc	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ade	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ae0	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ae2	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395ae6	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395ae8	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aea	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395aec	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395aee	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395af2	82 b3 fd	brl $3958a8	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395af5					UART_SELECT
.395af5	08		php		            PHP
.395af6	c2 20		rep #$20	                REP #$20        ; set A long
.395af8	c9 02 00	cmp #$0002	            CMP #2
.395afb	f0 07		beq $395b04	            BEQ is_COM2
.395afd	c2 20		rep #$20	                REP #$20        ; set A long
.395aff	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395b02	80 05		bra $395b09	            BRA setaddr
.395b04					is_COM2
.395b04	c2 20		rep #$20	                REP #$20        ; set A long
.395b06	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395b09	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395b0d	e2 20		sep #$20	                SEP #$20        ; set A short
.395b0f	a9 af		lda #$af	            LDA #`UART1_BASE
.395b11	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395b15	28		plp		            PLP
.395b16	6b		rtl		            RTL
.395b17					UART_SETBPS
.395b17	08		php		            PHP
.395b18	0b		phd		            PHD
.395b19	48		pha		                PHA             ; begin setdp macro
.395b1a	08		php		                PHP
.395b1b	c2 20		rep #$20	                REP #$20        ; set A long
.395b1d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b20	5b		tcd		                TCD
.395b21	28		plp		                PLP
.395b22	68		pla		                PLA             ; end setdp macro
.395b23	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b25	48		pha		            PHA
.395b26	e2 20		sep #$20	                SEP #$20        ; set A short
.395b28	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395b2b	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b2d	09 80		ora #$80	            ORA #LCR_DLB
.395b2f	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b31	c2 20		rep #$20	                REP #$20        ; set A long
.395b33	68		pla		            PLA
.395b34	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395b37	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395b39	e2 20		sep #$20	                SEP #$20        ; set A short
.395b3b	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395b3e	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b40	49 80		eor #$80	            EOR #LCR_DLB
.395b42	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b44	2b		pld		            PLD
.395b45	28		plp		            PLP
.395b46	6b		rtl		            RTL
.395b47					UART_SETLCR
.395b47	08		php		            PHP
.395b48	0b		phd		            PHD
.395b49	48		pha		                PHA             ; begin setdp macro
.395b4a	08		php		                PHP
.395b4b	c2 20		rep #$20	                REP #$20        ; set A long
.395b4d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b50	5b		tcd		                TCD
.395b51	28		plp		                PLP
.395b52	68		pla		                PLA             ; end setdp macro
.395b53	e2 20		sep #$20	                SEP #$20        ; set A short
.395b55	c2 10		rep #$10	                REP #$10        ; set X long
.395b57	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395b59	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395b5c	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b5e	2b		pld		            PLD
.395b5f	28		plp		            PLP
.395b60	6b		rtl		            RTL
.395b61					UART_INIT
.395b61	08		php		            PHP
.395b62	0b		phd		            PHD
.395b63	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b65	48		pha		                PHA             ; begin setdp macro
.395b66	08		php		                PHP
.395b67	c2 20		rep #$20	                REP #$20        ; set A long
.395b69	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b6c	5b		tcd		                TCD
.395b6d	28		plp		                PLP
.395b6e	68		pla		                PLA             ; end setdp macro
.395b6f	a9 01 00	lda #$0001	            LDA #UART_115200
.395b72	22 17 5b 39	jsl $395b17	            JSL UART_SETBPS
.395b76	e2 20		sep #$20	                SEP #$20        ; set A short
.395b78	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395b7a	22 47 5b 39	jsl $395b47	            JSL UART_SETLCR
.395b7e	a9 e1		lda #$e1	            LDA #%11100001
.395b80	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395b83	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b85	2b		pld		            PLD
.395b86	28		plp		            PLP
.395b87	6b		rtl		            RTL
.395b88					UART_HASBYT
.395b88	08		php		            PHP
.395b89	0b		phd		            PHD
.395b8a	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b8c	48		pha		                PHA             ; begin setdp macro
.395b8d	08		php		                PHP
.395b8e	c2 20		rep #$20	                REP #$20        ; set A long
.395b90	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b93	5b		tcd		                TCD
.395b94	28		plp		                PLP
.395b95	68		pla		                PLA             ; end setdp macro
.395b96	e2 20		sep #$20	                SEP #$20        ; set A short
.395b98	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395b9b	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395b9d	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395b9f	d0 04		bne $395ba5	            BNE ret_true            ; If flag is set, return true
.395ba1	2b		pld		ret_false   PLD                     ; Return false
.395ba2	28		plp		            PLP
.395ba3	18		clc		            CLC
.395ba4	6b		rtl		            RTL
.395ba5	2b		pld		ret_true    PLD                     ; Return true
.395ba6	28		plp		            PLP
.395ba7	38		sec		            SEC
.395ba8	6b		rtl		            RTL
.395ba9					UART_GETC
.395ba9	08		php		            PHP
.395baa	0b		phd		            PHD
.395bab	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bad	48		pha		                PHA             ; begin setdp macro
.395bae	08		php		                PHP
.395baf	c2 20		rep #$20	                REP #$20        ; set A long
.395bb1	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bb4	5b		tcd		                TCD
.395bb5	28		plp		                PLP
.395bb6	68		pla		                PLA             ; end setdp macro
.395bb7	e2 20		sep #$20	                SEP #$20        ; set A short
.395bb9	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395bbc	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395bbe	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395bc0	f0 fa		beq $395bbc	            BEQ wait_getc           ; If the flag is clear, wait
.395bc2	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395bc5	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bc7	2b		pld		            PLD
.395bc8	28		plp		            PLP
.395bc9	6b		rtl		            RTL
.395bca					UART_PUTC
.395bca	08		php		            PHP
.395bcb	0b		phd		            PHD
.395bcc	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bce	48		pha		                PHA             ; begin setdp macro
.395bcf	08		php		                PHP
.395bd0	c2 20		rep #$20	                REP #$20        ; set A long
.395bd2	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bd5	5b		tcd		                TCD
.395bd6	28		plp		                PLP
.395bd7	68		pla		                PLA             ; end setdp macro
.395bd8	e2 20		sep #$20	                SEP #$20        ; set A short
.395bda	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395bdb	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395bde	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395be0	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395be2	f0 fa		beq $395bde	            BEQ wait_putc
.395be4	68		pla		            PLA
.395be5	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395be8	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bea	2b		pld		            PLD
.395beb	28		plp		            PLP
.395bec	6b		rtl		            RTL
.395bed					UART_PUTS
.395bed	08		php		            PHP
.395bee	e2 20		sep #$20	                SEP #$20        ; set A short
.395bf0	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395bf3	f0 07		beq $395bfc	            BEQ done
.395bf5	22 ca 5b 39	jsl $395bca	            JSL UART_PUTC
.395bf9	e8		inx		            INX
.395bfa	80 f4		bra $395bf0	            BRA put_loop
.395bfc	28		plp		done        PLP
.395bfd	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395bfe					JOYSTICK_SET_NES_MODE
.395bfe	e2 20		sep #$20	                SEP #$20        ; set A short
.395c00	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c04	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395c06	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c0a	6b		rtl		          RTL
.395c0b					JOYSTICK_SET_SNES_MODE
.395c0b	e2 20		sep #$20	                SEP #$20        ; set A short
.395c0d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c11	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395c13	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395c15	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c19	6b		rtl		          RTL
.395c1a					JOYSTICK_ENABLE_NES_SNES_PORT0
.395c1a	e2 20		sep #$20	                SEP #$20        ; set A short
.395c1c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c20	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c22	09 01		ora #$01	          ORA #NES_SNES_EN0
.395c24	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c28	6b		rtl		          RTL
.395c29					JOYSTICK_ENABLE_NES_SNES_PORT1
.395c29	e2 20		sep #$20	                SEP #$20        ; set A short
.395c2b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c2f	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395c31	09 02		ora #$02	          ORA #NES_SNES_EN1
.395c33	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c37	6b		rtl		          RTL
.395c38					JOYSTICK_DISABLE_NES_SNES_PORT0
.395c38	e2 20		sep #$20	                SEP #$20        ; set A short
.395c3a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c3e	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c40	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c44	6b		rtl		          RTL
.395c45					JOYSTICK_DISABLE_NES_SNES_PORT1
.395c45	e2 20		sep #$20	                SEP #$20        ; set A short
.395c47	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c4b	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395c4d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c51	6b		rtl		          RTL
.395c52					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395c52	e2 20		sep #$20	                SEP #$20        ; set A short
.395c54	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c58	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395c5a	c9 00		cmp #$00	          CMP #$00
.395c5c	f0 14		beq $395c72	          BEQ END_OF_JOYSTICK_POLL
.395c5e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c62	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395c64	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c68					JOYSTICK_POLLING_ISNOTOVER
.395c68	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395c6c	29 40		and #$40	          AND #NES_SNES_DONE
.395c6e	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395c70	d0 f6		bne $395c68	          BNE JOYSTICK_POLLING_ISNOTOVER
.395c72					END_OF_JOYSTICK_POLL
.395c72	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395c73					SDC_TEST
.395c73	8b		phb		                PHB
.395c74	0b		phd		                PHD
.395c75	08		php		                PHP
.395c76	48		pha		                PHA             ; begin setdbr macro
.395c77	08		php		                PHP
.395c78	e2 20		sep #$20	                SEP #$20        ; set A short
.395c7a	a9 00		lda #$00	                LDA #0
.395c7c	48		pha		                PHA
.395c7d	ab		plb		                PLB
.395c7e	28		plp		                PLP
.395c7f	68		pla		                PLA             ; end setdbr macro
.395c80	48		pha		                PHA             ; begin setdp macro
.395c81	08		php		                PHP
.395c82	c2 20		rep #$20	                REP #$20        ; set A long
.395c84	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c87	5b		tcd		                TCD
.395c88	28		plp		                PLP
.395c89	68		pla		                PLA             ; end setdp macro
.395c8a	e2 20		sep #$20	                SEP #$20        ; set A short
.395c8c	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395c8e	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395c91	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395c95	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395c99	22 d9 5c 39	jsl $395cd9	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395c9d	b0 03		bcs $395ca2	                BCS init_ok
.395c9f	82 15 00	brl $395cb7	                BRL done
.395ca2	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395ca4	85 01		sta $0321	                STA BIOS_DEV
.395ca6	22 d4 44 39	jsl $3944d4	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395caa	b0 03		bcs $395caf	                BCS mount_ok
.395cac	82 08 00	brl $395cb7	                BRL done
.395caf	22 39 55 39	jsl $395539	mount_ok        JSL IF_DIROPEN
.395cb3	b0 02		bcs $395cb7	                BCS all_ok
.395cb5	80 00		bra $395cb7	                BRA done
.395cb7					all_ok
.395cb7	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395cbb	28		plp		                PLP
.395cbc	2b		pld		                PLD
.395cbd	ab		plb		                PLB
.395cbe	6b		rtl		                RTL
.395cbf					SDC_WAITBUSY
.395cbf	08		php		                PHP
.395cc0	e2 20		sep #$20	                SEP #$20        ; set A short
.395cc2	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395cc6	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395cc8	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395cca	f0 f6		beq $395cc2	                BEQ wait_xact
.395ccc	28		plp		                PLP
.395ccd	6b		rtl		                RTL
.395cce					SDC_RESET
.395cce	08		php		                PHP
.395ccf	e2 20		sep #$20	                SEP #$20        ; set A short
.395cd1	a9 01		lda #$01	                LDA #1
.395cd3	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395cd7	28		plp		                PLP
.395cd8	6b		rtl		                RTL
.395cd9	0b		phd		SDC_INIT        PHD
.395cda	8b		phb		                PHB
.395cdb	08		php		                PHP
.395cdc	48		pha		                PHA             ; begin setdbr macro
.395cdd	08		php		                PHP
.395cde	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce0	a9 00		lda #$00	                LDA #0
.395ce2	48		pha		                PHA
.395ce3	ab		plb		                PLB
.395ce4	28		plp		                PLP
.395ce5	68		pla		                PLA             ; end setdbr macro
.395ce6	48		pha		                PHA             ; begin setdp macro
.395ce7	08		php		                PHP
.395ce8	c2 20		rep #$20	                REP #$20        ; set A long
.395cea	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ced	5b		tcd		                TCD
.395cee	28		plp		                PLP
.395cef	68		pla		                PLA             ; end setdp macro
.395cf0	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf2	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395cf4	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395cf8	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395cfa	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395cfe	22 bf 5c 39	jsl $395cbf	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395d02	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d06	d0 07		bne $395d0f	                BNE ret_error                       ; Is there one? Process the error
.395d08	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395d0a	28		plp		                PLP
.395d0b	ab		plb		                PLB
.395d0c	2b		pld		                PLD
.395d0d	38		sec		                SEC
.395d0e	6b		rtl		                RTL
.395d0f	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d12	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395d14	85 00		sta $0320	                STA BIOS_STATUS
.395d16	28		plp		                PLP
.395d17	ab		plb		                PLB
.395d18	2b		pld		                PLD
.395d19	18		clc		                CLC
.395d1a	6b		rtl		                RTL
.395d1b					SDC_GETBLOCK
.395d1b	0b		phd		                PHD
.395d1c	8b		phb		                PHB
.395d1d	08		php		                PHP
.395d1e	48		pha		                PHA             ; begin setdbr macro
.395d1f	08		php		                PHP
.395d20	e2 20		sep #$20	                SEP #$20        ; set A short
.395d22	a9 00		lda #$00	                LDA #0
.395d24	48		pha		                PHA
.395d25	ab		plb		                PLB
.395d26	28		plp		                PLP
.395d27	68		pla		                PLA             ; end setdbr macro
.395d28	48		pha		                PHA             ; begin setdp macro
.395d29	08		php		                PHP
.395d2a	c2 20		rep #$20	                REP #$20        ; set A long
.395d2c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d2f	5b		tcd		                TCD
.395d30	28		plp		                PLP
.395d31	68		pla		                PLA             ; end setdp macro
.395d32	e2 20		sep #$20	                SEP #$20        ; set A short
.395d34	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395d38	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395d3a	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d3e	a9 00		lda #$00	                LDA #0
.395d40	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395d44	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395d46	0a		asl a		                ASL A
.395d47	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395d4b	a5 03		lda $0323	                LDA BIOS_LBA+1
.395d4d	2a		rol a		                ROL A
.395d4e	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395d52	a5 04		lda $0324	                LDA BIOS_LBA+2
.395d54	2a		rol a		                ROL A
.395d55	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395d59	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395d5b	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395d5f	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d61	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d65	22 bf 5c 39	jsl $395cbf	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395d69	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d6d	d0 36		bne $395da5	                BNE ret_error                       ; Is there one? Process the error
.395d6f	e2 20		sep #$20	                SEP #$20        ; set A short
.395d71	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395d75	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395d77	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395d7b	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395d7d	c2 10		rep #$10	                REP #$10        ; set X long
.395d7f	a0 00 00	ldy #$0000	                LDY #0
.395d82	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395d86	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395d88	c8		iny		                INY                                 ; Advance to the next byte
.395d89	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395d8c	d0 f4		bne $395d82	                BNE loop_rd                         ; No: keep reading
.395d8e	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d92	d0 11		bne $395da5	                BNE ret_error                       ; Is there one? Process the error
.395d94	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d96	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d9a	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d9c	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395da0	28		plp		                PLP
.395da1	ab		plb		                PLB
.395da2	2b		pld		                PLD
.395da3	38		sec		                SEC
.395da4	6b		rtl		                RTL
.395da5	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395da8	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395daa	85 00		sta $0320	                STA BIOS_STATUS
.395dac	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395db0	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395db2	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395db6	28		plp		                PLP
.395db7	ab		plb		                PLB
.395db8	2b		pld		                PLD
.395db9	18		clc		                CLC
.395dba	6b		rtl		                RTL
.395dbb					SDC_PUTBLOCK
.395dbb	0b		phd		                PHD
.395dbc	8b		phb		                PHB
.395dbd	08		php		                PHP
.395dbe	48		pha		                PHA             ; begin setdbr macro
.395dbf	08		php		                PHP
.395dc0	e2 20		sep #$20	                SEP #$20        ; set A short
.395dc2	a9 00		lda #$00	                LDA #0
.395dc4	48		pha		                PHA
.395dc5	ab		plb		                PLB
.395dc6	28		plp		                PLP
.395dc7	68		pla		                PLA             ; end setdbr macro
.395dc8	48		pha		                PHA             ; begin setdp macro
.395dc9	08		php		                PHP
.395dca	c2 20		rep #$20	                REP #$20        ; set A long
.395dcc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395dcf	5b		tcd		                TCD
.395dd0	28		plp		                PLP
.395dd1	68		pla		                PLA             ; end setdp macro
.395dd2	e2 20		sep #$20	                SEP #$20        ; set A short
.395dd4	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395dd8	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395dda	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395dde	c2 10		rep #$10	                REP #$10        ; set X long
.395de0	a0 00 00	ldy #$0000	                LDY #0
.395de3	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395de5	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395de9	c8		iny		                INY                                 ; Advance to the next byte
.395dea	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395ded	d0 f4		bne $395de3	                BNE loop_wr                         ; No: keep writing
.395def	a9 00		lda #$00	                LDA #0
.395df1	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395df5	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395df7	0a		asl a		                ASL A
.395df8	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395dfc	a5 03		lda $0323	                LDA BIOS_LBA+1
.395dfe	2a		rol a		                ROL A
.395dff	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e03	a5 04		lda $0324	                LDA BIOS_LBA+2
.395e05	2a		rol a		                ROL A
.395e06	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e0a	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395e0c	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e10	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e12	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e16	22 bf 5c 39	jsl $395cbf	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e1a	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e1e	d0 11		bne $395e31	                BNE ret_error                       ; Is there one? Process the error
.395e20	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e22	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e26	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e28	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e2c	28		plp		                PLP
.395e2d	ab		plb		                PLB
.395e2e	2b		pld		                PLD
.395e2f	38		sec		                SEC
.395e30	6b		rtl		                RTL
.395e31	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e34	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e36	85 00		sta $0320	                STA BIOS_STATUS
.395e38	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e3c	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e3e	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e42	28		plp		                PLP
.395e43	ab		plb		                PLB
.395e44	2b		pld		                PLD
.395e45	18		clc		                CLC
.395e46	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60 * 15     ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395e47					FDC_TEST
.395e47	8b		phb		                    PHB
.395e48	0b		phd		                    PHD
.395e49	08		php		                    PHP
.395e4a	48		pha		                PHA             ; begin setdbr macro
.395e4b	08		php		                PHP
.395e4c	e2 20		sep #$20	                SEP #$20        ; set A short
.395e4e	a9 00		lda #$00	                LDA #0
.395e50	48		pha		                PHA
.395e51	ab		plb		                PLB
.395e52	28		plp		                PLP
.395e53	68		pla		                PLA             ; end setdbr macro
.395e54	48		pha		                PHA             ; begin setdp macro
.395e55	08		php		                PHP
.395e56	c2 20		rep #$20	                REP #$20        ; set A long
.395e58	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e5b	5b		tcd		                TCD
.395e5c	28		plp		                PLP
.395e5d	68		pla		                PLA             ; end setdp macro
.395e5e	e2 20		sep #$20	                SEP #$20        ; set A short
.395e60	a9 f0		lda #$f0	                    LDA #$F0
.395e62	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395e65	22 ff 0a 39	jsl $390aff	                    JSL ICLRSCREEN
.395e69	22 23 09 39	jsl $390923	                    JSL ICSRHOME
.395e6d	c2 30		rep #$30	                REP #$30        ; set A&X long
.395e6f	22 3d 61 39	jsl $39613d	                    JSL FDC_Init
.395e73	b0 03		bcs $395e78	                    BCS init_ok
.395e75	82 20 00	brl $395e98	                    BRL motor_off
.395e78	22 34 68 39	jsl $396834	init_ok             JSL FDC_CHK_MEDIA
.395e7c	90 03		bcc $395e81	                    BCC no_media
.395e7e	82 03 00	brl $395e84	                    BRL is_ok1
.395e81					no_media
.395e81	82 14 00	brl $395e98	                    BRL motor_off
.395e84	22 cb 66 39	jsl $3966cb	is_ok1              JSL FDC_MOUNT
.395e88	90 03		bcc $395e8d	                    BCC mount_err
.395e8a	82 03 00	brl $395e90	                    BRL is_ok2
.395e8d					mount_err
.395e8d	82 08 00	brl $395e98	                    BRL motor_off
.395e90	22 a4 5e 39	jsl $395ea4	is_ok2              JSL FDC_TEST_PUTBLOCK
.395e94	b0 02		bcs $395e98	                    BCS all_ok
.395e96	80 00		bra $395e98	                    BRA motor_off
.395e98					all_ok
.395e98	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395e9c	22 e9 61 39	jsl $3961e9	                    JSL FDC_Motor_Off
.395ea0	28		plp		                    PLP
.395ea1	2b		pld		                    PLD
.395ea2	ab		plb		                    PLB
.395ea3	6b		rtl		                    RTL
.395ea4					FDC_TEST_PUTBLOCK
.395ea4	e2 20		sep #$20	                SEP #$20        ; set A short
.395ea6	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395ea8	a2 00 00	ldx #$0000	                    LDX #0
.395eab	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395eaf	1a		inc a		                    INC A
.395eb0	e8		inx		                    INX
.395eb1	e0 00 02	cpx #$0200	                    CPX #512
.395eb4	d0 f5		bne $395eab	                    BNE init_loop
.395eb6	c2 20		rep #$20	                REP #$20        ; set A long
.395eb8	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395ebb	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395ebf	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395ec2	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395ec6	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395ec9	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395ecd	a9 00 00	lda #$0000	                    LDA #0
.395ed0	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395ed4	22 5f 66 39	jsl $39665f	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395ed8	6b		rtl		                    RTL
>395ed9	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395ee1	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395ef1	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395ef5					FDC_Check_RQM
.395ef5	0b		phd		                    PHD
.395ef6	08		php		                    PHP
.395ef7	48		pha		                PHA             ; begin setdp macro
.395ef8	08		php		                PHP
.395ef9	c2 20		rep #$20	                REP #$20        ; set A long
.395efb	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395efe	5b		tcd		                TCD
.395eff	28		plp		                PLP
.395f00	68		pla		                PLA             ; end setdp macro
.395f01	e2 20		sep #$20	                SEP #$20        ; set A short
.395f03	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f05	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f09	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f0b	30 12		bmi $395f1f	                    BMI time_out            ; If so: signal a time out
.395f0d	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f11	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f13	f0 f4		beq $395f09	                    BEQ loop
.395f15	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f17	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f1b	28		plp		                    PLP
.395f1c	2b		pld		                    PLD
.395f1d	38		sec		                    SEC
.395f1e	60		rts		                    RTS
.395f1f	28		plp		time_out            PLP
.395f20	2b		pld		                    PLD
.395f21	18		clc		                    CLC
.395f22	60		rts		                    RTS
.395f23					FDC_Check_DRV0_BSY
.395f23	0b		phd		                    PHD
.395f24	08		php		                    PHP
.395f25	48		pha		                PHA             ; begin setdp macro
.395f26	08		php		                PHP
.395f27	c2 20		rep #$20	                REP #$20        ; set A long
.395f29	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f2c	5b		tcd		                TCD
.395f2d	28		plp		                PLP
.395f2e	68		pla		                PLA             ; end setdp macro
.395f2f	e2 20		sep #$20	                SEP #$20        ; set A short
.395f31	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f33	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f37	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f39	30 12		bmi $395f4d	                    BMI time_out            ; If so: signal a time out
.395f3b	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f3f	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395f41	d0 f4		bne $395f37	                    BNE loop
.395f43	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f45	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f49	28		plp		                    PLP
.395f4a	2b		pld		                    PLD
.395f4b	38		sec		                    SEC
.395f4c	60		rts		                    RTS
.395f4d	28		plp		time_out            PLP
.395f4e	2b		pld		                    PLD
.395f4f	18		clc		                    CLC
.395f50	60		rts		                    RTS
.395f51					FDC_Check_CMD_BSY
.395f51	0b		phd		                    PHD
.395f52	08		php		                    PHP
.395f53	48		pha		                PHA             ; begin setdp macro
.395f54	08		php		                PHP
.395f55	c2 20		rep #$20	                REP #$20        ; set A long
.395f57	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f5a	5b		tcd		                TCD
.395f5b	28		plp		                PLP
.395f5c	68		pla		                PLA             ; end setdp macro
.395f5d	e2 20		sep #$20	                SEP #$20        ; set A short
.395f5f	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f61	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f65	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f67	30 12		bmi $395f7b	                    BMI time_out            ; If so: signal a time out
.395f69	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f6d	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395f6f	d0 f4		bne $395f65	                    BNE loop
.395f71	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f73	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f77	28		plp		                    PLP
.395f78	2b		pld		                    PLD
.395f79	38		sec		                    SEC
.395f7a	60		rts		                    RTS
.395f7b	28		plp		time_out            PLP
.395f7c	2b		pld		                    PLD
.395f7d	18		clc		                    CLC
.395f7e	60		rts		                    RTS
.395f7f					FDC_Can_Read_Data
.395f7f	0b		phd		                    PHD
.395f80	08		php		                    PHP
.395f81	48		pha		                PHA             ; begin setdp macro
.395f82	08		php		                PHP
.395f83	c2 20		rep #$20	                REP #$20        ; set A long
.395f85	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f88	5b		tcd		                TCD
.395f89	28		plp		                PLP
.395f8a	68		pla		                PLA             ; end setdp macro
.395f8b	e2 20		sep #$20	                SEP #$20        ; set A short
.395f8d	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f8f	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395f93	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f95	30 14		bmi $395fab	                    BMI time_out            ; If so: signal a time out
.395f97	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f9b	29 40		and #$40	                    AND #FDC_MSR_DIO
.395f9d	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395f9f	d0 f2		bne $395f93	                    BNE loop
.395fa1	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fa3	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395fa7	28		plp		                    PLP
.395fa8	2b		pld		                    PLD
.395fa9	38		sec		                    SEC
.395faa	60		rts		                    RTS
.395fab	28		plp		time_out            PLP
.395fac	2b		pld		                    PLD
.395fad	18		clc		                    CLC
.395fae	60		rts		                    RTS
.395faf					FDC_CAN_WRITE
.395faf	0b		phd		                    PHD
.395fb0	08		php		                    PHP
.395fb1	48		pha		                PHA             ; begin setdp macro
.395fb2	08		php		                PHP
.395fb3	c2 20		rep #$20	                REP #$20        ; set A long
.395fb5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fb8	5b		tcd		                TCD
.395fb9	28		plp		                PLP
.395fba	68		pla		                PLA             ; end setdp macro
.395fbb	e2 20		sep #$20	                SEP #$20        ; set A short
.395fbd	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fbf	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395fc3	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fc5	30 14		bmi $395fdb	                    BMI time_out            ; If so: signal a time out
.395fc7	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fcb	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fcd	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395fcf	d0 f2		bne $395fc3	                    BNE loop
.395fd1	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fd3	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.395fd7	28		plp		                    PLP
.395fd8	2b		pld		                    PLD
.395fd9	38		sec		                    SEC
.395fda	60		rts		                    RTS
.395fdb	28		plp		time_out            PLP
.395fdc	2b		pld		                    PLD
.395fdd	18		clc		                    CLC
.395fde	60		rts		                    RTS
.395fdf					FDC_DELAY_10MS
.395fdf	da		phx		                    PHX
.395fe0	08		php		                    PHP
.395fe1	c2 10		rep #$10	                REP #$10        ; set X long
.395fe3	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395fe6	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395fe7	ca		dex		                    DEX
.395fe8	e0 00 00	cpx #$0000	                    CPX #0
.395feb	d0 f9		bne $395fe6	                    BNE loop
.395fed	28		plp		                    PLP
.395fee	fa		plx		                    PLX
.395fef	6b		rtl		                    RTL
.395ff0					FDC_COMMAND
.395ff0	da		phx		                    PHX
.395ff1	8b		phb		                    PHB
.395ff2	0b		phd		                    PHD
.395ff3	08		php		                    PHP
.395ff4	48		pha		                PHA             ; begin setdbr macro
.395ff5	08		php		                PHP
.395ff6	e2 20		sep #$20	                SEP #$20        ; set A short
.395ff8	a9 00		lda #$00	                LDA #0
.395ffa	48		pha		                PHA
.395ffb	ab		plb		                PLB
.395ffc	28		plp		                PLP
.395ffd	68		pla		                PLA             ; end setdbr macro
.395ffe	48		pha		                PHA             ; begin setdp macro
.395fff	08		php		                PHP
.396000	c2 20		rep #$20	                REP #$20        ; set A long
.396002	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396005	5b		tcd		                TCD
.396006	28		plp		                PLP
.396007	68		pla		                PLA             ; end setdp macro
.396008	22 df 5f 39	jsl $395fdf	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.39600c	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39600e	a2 00		ldx #$00	                    LDX #0
.396010	a9 00		lda #$00	                    LDA #0
.396012	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.396015	e8		inx		                    INX
.396016	e0 10		cpx #$10	                    CPX #16
.396018	d0 f8		bne $396012	                    BNE clr_results
.39601a	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.39601e	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396020	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396022	f0 04		beq $396028	                    BEQ start_send                          ; If so, start sending
.396024	22 3d 61 39	jsl $39613d	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.396028					start_send
.396028	e2 10		sep #$10	                SEP #$10        ; set X short
.39602a	a2 00		ldx #$00	                    LDX #0
.39602c	20 f5 5e	jsr $395ef5	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.39602f	b0 03		bcs $396034	                    BCS send_param
.396031	82 5e 00	brl $396092	                    BRL time_out                            ; If there was a timeout, flag the time out
.396034	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.396037	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.39603b	22 df 5f 39	jsl $395fdf	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.39603f	e8		inx		                    INX                                     ; Advance to the next byte
.396040	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.396043	d0 e7		bne $39602c	                    BNE send_loop                           ; Keep sending until we've sent them all
.396045	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.396048	d0 03		bne $39604d	                    BNE chk_data_dir
.39604a	82 80 00	brl $3960cd	                    BRL result_phase                        ; If 0: we just want a result
.39604d	10 3c		bpl $39608b	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.39604f					wr_data
.39604f	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396051	30 03		bmi $396056	                    BMI wr_chk_rqm
.396053	82 3c 00	brl $396092	                    BRL time_out                            ; If not, raise an error
.396056	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.39605a	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.39605c	f0 f1		beq $39604f	                    BEQ wr_data_rdy
.39605e	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.396060	d0 03		bne $396065	                    BNE wr_data_phase                       ; If so: transfer the data
.396062	82 68 00	brl $3960cd	                    BRL result_phase                          ; If not: it's an error
.396065					wr_data_phase
.396065	c2 10		rep #$10	                REP #$10        ; set X long
.396067	a0 00 00	ldy #$0000	                    LDY #0
.39606a	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39606c	30 03		bmi $396071	                    BMI wr_chk_nondma
.39606e	82 21 00	brl $396092	                    BRL time_out                            ; If not, raise an error
.396071	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396075	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396077	f0 54		beq $3960cd	                    BEQ result_phase                        ; If not: break out to result phase
.396079	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.39607b	f0 ed		beq $39606a	                    BEQ wr_data_loop                        ; No: keep waiting
.39607d	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.39607f	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.396083	c8		iny		                    INY                                     ; Move to the next position
.396084	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396087	d0 e1		bne $39606a	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.396089	80 42		bra $3960cd	                    BRA result_phase                        ; ready for the result phase
.39608b	20 7f 5f	jsr $395f7f	rd_data             JSR FDC_Can_Read_Data
.39608e	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396090	30 07		bmi $396099	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.396092					time_out
.396092	e2 20		sep #$20	                SEP #$20        ; set A short
.396094	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396096	82 9c 00	brl $396135	                    BRL pass_error
.396099	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.39609d	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39609f	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3960a1	d0 eb		bne $39608e	                    BNE rd_data_rdy
.3960a3	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3960a7	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3960a9	d0 03		bne $3960ae	                    BNE rd_data_phase                       ; If so: transfer the data
.3960ab	82 83 00	brl $396131	                    BRL error                               ; If not: it's an error
.3960ae					rd_data_phase
.3960ae	c2 10		rep #$10	                REP #$10        ; set X long
.3960b0	a0 00 00	ldy #$0000	                    LDY #0
.3960b3	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960b5	10 db		bpl $396092	                    BPL time_out                            ; If not: throw a timeout error
.3960b7	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.3960bb	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960bd	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3960bf	d0 f2		bne $3960b3	                    BNE rd_data_loop
.3960c1	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.3960c5	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.3960c7	c8		iny		                    INY                                     ; Move to the next position
.3960c8	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3960cb	d0 e6		bne $3960b3	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.3960cd	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.3960d0	f0 34		beq $396106	                    BEQ chk_busy                            ; Then we're done
.3960d2	e2 10		sep #$10	                SEP #$10        ; set X short
.3960d4	a2 00		ldx #$00	                    LDX #0
.3960d6	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3960d8	22 cb 40 39	jsl $3940cb	                    JSL ISETTIMEOUT
.3960dc	20 7f 5f	jsr $395f7f	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3960df	90 b1		bcc $396092	                    BCC time_out                            ; If there was a time out, raise an error
.3960e1	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3960e5	20 7f 5f	jsr $395f7f	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3960e8	90 a8		bcc $396092	                    BCC time_out                            ; If there was a time out, raise an error
.3960ea	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3960ee	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3960f1	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM
.3960f4	90 9c		bcc $396092	                    BCC time_out                            ; If there was a time out, flag the error
.3960f6	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3960fa	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3960fc	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3960fe	d0 06		bne $396106	                    BNE chk_busy
.396100	e8		inx		                    INX                                     ; Move to the next result positions
.396101	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.396104	d0 e4		bne $3960ea	                    BNE read_result                         ; And keep looping until we've read all
.396106					chk_busy
.396106	c2 10		rep #$10	                REP #$10        ; set X long
.396108	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.39610b	22 e1 15 39	jsl $3915e1	                    JSL ILOOP_MS
.39610f	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396113	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396115	f0 12		beq $396129	                    BEQ done                                ; If not set: we're done
.396117	20 7f 5f	jsr $395f7f	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39611a	b0 03		bcs $39611f	                    BCS get_result_byte
.39611c	82 73 ff	brl $396092	                    BRL time_out                            ; If there was a time out, flag the error
.39611f	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396123	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396126	e8		inx		                    INX
.396127	80 dd		bra $396106	                    BRA chk_busy                            ; And keep checking
.396129					done
.396129	64 20		stz $0320	                    STZ BIOS_STATUS
.39612b	28		plp		                    PLP
.39612c	2b		pld		                    PLD
.39612d	ab		plb		                    PLB
.39612e	fa		plx		                    PLX
.39612f	38		sec		                    SEC
.396130	6b		rtl		                    RTL
.396131					error
.396131	e2 20		sep #$20	                SEP #$20        ; set A short
.396133	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396135	85 20		sta $0320	pass_error          STA BIOS_STATUS
.396137	28		plp		                    PLP
.396138	2b		pld		                    PLD
.396139	ab		plb		                    PLB
.39613a	fa		plx		                    PLX
.39613b	18		clc		                    CLC
.39613c	6b		rtl		                    RTL
.39613d					FDC_Init
.39613d	08		php		                    PHP
.39613e	c2 10		rep #$10	                REP #$10        ; set X long
.396140	e2 20		sep #$20	                SEP #$20        ; set A short
.396142	a9 00		lda #$00	                    LDA #0
.396144	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396148	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.39614b	a0 00 00	ldy #$0000	                    LDY #0
.39614e	22 ee 15 39	jsl $3915ee	                    JSL IDELAY
.396152	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396154	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396158	ea		nop		                    NOP
.396159	ea		nop		                    NOP
.39615a	ea		nop		                    NOP
.39615b	ea		nop		                    NOP
.39615c	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.39615e	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396162	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.396164	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396168	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39616b	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.39616e	22 ee 15 39	jsl $3915ee	                    JSL IDELAY
.396172	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.396176	90 21		bcc $396199	                    BCC pass_failure
.396178	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.39617c	90 1b		bcc $396199	                    BCC pass_failure
.39617e	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.396182	90 15		bcc $396199	                    BCC pass_failure
.396184	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.396188	90 0f		bcc $396199	                    BCC pass_failure
.39618a	22 0b 63 39	jsl $39630b	                    JSL FDC_Configure_Command
.39618e	90 09		bcc $396199	                    BCC pass_failure
.396190	22 b2 62 39	jsl $3962b2	                    JSL FDC_Specify_Command
.396194	90 03		bcc $396199	                    BCC pass_failure
.396196	28		plp		                    PLP
.396197	38		sec		                    SEC
.396198	6b		rtl		                    RTL
.396199	28		plp		pass_failure        PLP
.39619a	18		clc		                    CLC
.39619b	6b		rtl		                    RTL
.39619c					FDC_MOTOR_NEEDED
.39619c	08		php		                    PHP
.39619d	c2 20		rep #$20	                REP #$20        ; set A long
.39619f	78		sei		                    SEI                         ; Turn off interrupts
.3961a0	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.3961a3	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3961a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3961a9	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3961ad	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3961af	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3961b3	28		plp		                    PLP
.3961b4	6b		rtl		                    RTL
.3961b5					FDC_Motor_On
.3961b5	08		php		                    PHP
.3961b6	22 9c 61 39	jsl $39619c	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3961ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3961bc	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3961c0	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3961c2	d0 1f		bne $3961e3	                    BNE done                    ; If so: skip
.3961c4	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3961c6	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961ca	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3961cd	90 17		bcc $3961e6	                    BCC time_out
.3961cf	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3961d2	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3961d5	22 ee 15 39	jsl $3915ee	                    JSL IDELAY
.3961d9	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3961dd	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3961df	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3961e3	28		plp		done                PLP
.3961e4	38		sec		                    SEC
.3961e5	6b		rtl		                    RTL
.3961e6	28		plp		time_out            PLP                         ; Return a timeout error
.3961e7	18		clc		                    CLC
.3961e8	6b		rtl		                    RTL
.3961e9					FDC_Motor_Off
.3961e9	08		php		                    PHP
.3961ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3961ec	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3961ee	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3961f2	c2 20		rep #$20	                REP #$20        ; set A long
.3961f4	78		sei		                    SEI                         ; Turn off interrupts
.3961f5	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3961f8	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3961fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3961fe	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396202	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396204	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396208	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39620c	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39620e	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396212	28		plp		                    PLP
.396213	6b		rtl		                    RTL
.396214					FDC_Recalibrate_Command
.396214	0b		phd		                    PHD
.396215	08		php		                    PHP
.396216	48		pha		                PHA             ; begin setdp macro
.396217	08		php		                PHP
.396218	c2 20		rep #$20	                REP #$20        ; set A long
.39621a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39621d	5b		tcd		                TCD
.39621e	28		plp		                PLP
.39621f	68		pla		                PLA             ; end setdp macro
.396220	22 9c 61 39	jsl $39619c	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396224	e2 20		sep #$20	                SEP #$20        ; set A short
.396226	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396228	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39622b	a5 00		lda $0300	                    LDA FDC_DRIVE
.39622d	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396230	a9 02		lda #$02	                    LDA #2
.396232	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396235	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396238	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39623b	22 f0 5f 39	jsl $395ff0	                    JSL FDC_COMMAND             ; Issue the command
.39623f	90 04		bcc $396245	                    BCC pass_failure            ; If failure, pass the failure up
.396241	28		plp		                    PLP
.396242	2b		pld		                    PLD
.396243	38		sec		                    SEC
.396244	6b		rtl		                    RTL
.396245	28		plp		pass_failure        PLP
.396246	2b		pld		                    PLD
.396247	18		clc		                    CLC
.396248	6b		rtl		                    RTL
.396249					FDC_Sense_Int_Status
.396249	8b		phb		                    PHB
.39624a	0b		phd		                    PHD
.39624b	08		php		                    PHP
.39624c	48		pha		                PHA             ; begin setdbr macro
.39624d	08		php		                PHP
.39624e	e2 20		sep #$20	                SEP #$20        ; set A short
.396250	a9 00		lda #$00	                LDA #0
.396252	48		pha		                PHA
.396253	ab		plb		                PLB
.396254	28		plp		                PLP
.396255	68		pla		                PLA             ; end setdbr macro
.396256	48		pha		                PHA             ; begin setdp macro
.396257	08		php		                PHP
.396258	c2 20		rep #$20	                REP #$20        ; set A long
.39625a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39625d	5b		tcd		                TCD
.39625e	28		plp		                PLP
.39625f	68		pla		                PLA             ; end setdp macro
.396260	c2 30		rep #$30	                REP #$30        ; set A&X long
.396262	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396265	22 e1 15 39	jsl $3915e1	                    JSL ILOOP_MS
.396269	e2 20		sep #$20	                SEP #$20        ; set A short
.39626b	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.39626d	a9 ff		lda #$ff	                    LDA #$FF
.39626f	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396271	20 51 5f	jsr $395f51	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396274	90 30		bcc $3962a6	                    BCC time_out                        ; If there was a time out, raise an error
.396276	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396279	90 2b		bcc $3962a6	                    BCC time_out                        ; If there was a time out, raise an error
.39627b	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.39627d	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396281	20 7f 5f	jsr $395f7f	                    JSR FDC_Can_Read_Data
.396284	90 20		bcc $3962a6	                    BCC time_out                        ; If there was a time out, raise an error
.396286	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396289	90 1b		bcc $3962a6	                    BCC time_out                        ; If there was a time out, raise an error
.39628b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39628f	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396291	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396294	90 10		bcc $3962a6	                    BCC time_out                        ; If there was a time out, raise an error
.396296	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39629a	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39629c	e2 20		sep #$20	                SEP #$20        ; set A short
.39629e	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.3962a1	28		plp		                    PLP
.3962a2	2b		pld		                    PLD
.3962a3	ab		plb		                    PLB
.3962a4	38		sec		                    SEC
.3962a5	6b		rtl		                    RTL
.3962a6					time_out
.3962a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3962a8	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.3962aa	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3962ad	28		plp		                    PLP
.3962ae	2b		pld		                    PLD
.3962af	ab		plb		                    PLB
.3962b0	18		clc		                    CLC
.3962b1	6b		rtl		                    RTL
.3962b2					FDC_Specify_Command
.3962b2	8b		phb		                    PHB
.3962b3	0b		phd		                    PHD
.3962b4	08		php		                    PHP
.3962b5	48		pha		                PHA             ; begin setdbr macro
.3962b6	08		php		                PHP
.3962b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3962b9	a9 00		lda #$00	                LDA #0
.3962bb	48		pha		                PHA
.3962bc	ab		plb		                PLB
.3962bd	28		plp		                PLP
.3962be	68		pla		                PLA             ; end setdbr macro
.3962bf	48		pha		                PHA             ; begin setdp macro
.3962c0	08		php		                PHP
.3962c1	c2 20		rep #$20	                REP #$20        ; set A long
.3962c3	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962c6	5b		tcd		                TCD
.3962c7	28		plp		                PLP
.3962c8	68		pla		                PLA             ; end setdp macro
.3962c9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3962cb	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3962ce	22 e1 15 39	jsl $3915e1	                    JSL ILOOP_MS
.3962d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3962d4	20 51 5f	jsr $395f51	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3962d7	90 26		bcc $3962ff	                    BCC time_out            ; If there was a time out, raise an error
.3962d9	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962dc	90 21		bcc $3962ff	                    BCC time_out            ; If there was a time out, raise an error
.3962de	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3962e0	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962e4	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962e7	90 16		bcc $3962ff	                    BCC time_out            ; If there was a time out, raise an error
.3962e9	a9 cf		lda #$cf	                    LDA #$CF
.3962eb	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962ef	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962f2	90 0b		bcc $3962ff	                    BCC time_out            ; If there was a time out, raise an error
.3962f4	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3962f6	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962fa	28		plp		                    PLP
.3962fb	2b		pld		                    PLD
.3962fc	ab		plb		                    PLB
.3962fd	38		sec		                    SEC
.3962fe	6b		rtl		                    RTL
.3962ff					time_out
.3962ff	e2 20		sep #$20	                SEP #$20        ; set A short
.396301	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396303	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396306	28		plp		                    PLP
.396307	2b		pld		                    PLD
.396308	ab		plb		                    PLB
.396309	18		clc		                    CLC
.39630a	6b		rtl		                    RTL
.39630b					FDC_Configure_Command
.39630b	8b		phb		                    PHB
.39630c	0b		phd		                    PHD
.39630d	08		php		                    PHP
.39630e	48		pha		                PHA             ; begin setdbr macro
.39630f	08		php		                PHP
.396310	e2 20		sep #$20	                SEP #$20        ; set A short
.396312	a9 00		lda #$00	                LDA #0
.396314	48		pha		                PHA
.396315	ab		plb		                PLB
.396316	28		plp		                PLP
.396317	68		pla		                PLA             ; end setdbr macro
.396318	48		pha		                PHA             ; begin setdp macro
.396319	08		php		                PHP
.39631a	c2 20		rep #$20	                REP #$20        ; set A long
.39631c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39631f	5b		tcd		                TCD
.396320	28		plp		                PLP
.396321	68		pla		                PLA             ; end setdp macro
.396322	c2 30		rep #$30	                REP #$30        ; set A&X long
.396324	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396327	22 e1 15 39	jsl $3915e1	                    JSL ILOOP_MS
.39632b	e2 20		sep #$20	                SEP #$20        ; set A short
.39632d	20 51 5f	jsr $395f51	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396330	90 36		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.396332	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396335	90 31		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.396337	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.396339	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39633d	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396340	90 26		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.396342	a9 00		lda #$00	                    LDA #$00
.396344	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396348	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39634b	90 1b		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.39634d	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.39634f	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396353	20 f5 5e	jsr $395ef5	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396356	90 10		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.396358	a9 00		lda #$00	                    LDA #$00
.39635a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39635e	20 51 5f	jsr $395f51	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396361	90 05		bcc $396368	                    BCC time_out            ; If there was a time out, raise an error
.396363	28		plp		                    PLP
.396364	2b		pld		                    PLD
.396365	ab		plb		                    PLB
.396366	38		sec		                    SEC
.396367	6b		rtl		                    RTL
.396368					time_out
.396368	e2 20		sep #$20	                SEP #$20        ; set A short
.39636a	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39636c	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39636f	28		plp		                    PLP
.396370	2b		pld		                    PLD
.396371	ab		plb		                    PLB
.396372	18		clc		                    CLC
.396373	6b		rtl		                    RTL
.396374					FDC_Read_ID_Command
.396374	8b		phb		                    PHB
.396375	0b		phd		                    PHD
.396376	08		php		                    PHP
.396377	48		pha		                PHA             ; begin setdbr macro
.396378	08		php		                PHP
.396379	e2 20		sep #$20	                SEP #$20        ; set A short
.39637b	a9 00		lda #$00	                LDA #0
.39637d	48		pha		                PHA
.39637e	ab		plb		                PLB
.39637f	28		plp		                PLP
.396380	68		pla		                PLA             ; end setdbr macro
.396381	48		pha		                PHA             ; begin setdp macro
.396382	08		php		                PHP
.396383	c2 20		rep #$20	                REP #$20        ; set A long
.396385	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396388	5b		tcd		                TCD
.396389	28		plp		                PLP
.39638a	68		pla		                PLA             ; end setdp macro
.39638b	e2 20		sep #$20	                SEP #$20        ; set A short
.39638d	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.39638f	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396392	a9 01		lda #$01	                    LDA #1
.396394	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396397	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39639a	a9 07		lda #$07	                    LDA #7
.39639c	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39639f	22 f0 5f 39	jsl $395ff0	                    JSL FDC_COMMAND                     ; Issue the command
.3963a3	90 27		bcc $3963cc	                    BCC pass_failure
.3963a5	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.3963a8	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.3963aa	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3963ad	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3963af	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3963b2	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3963b4	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3963b7	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3963b9	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3963bc	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3963be	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3963c1	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3963c3	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3963c6	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3963c8	28		plp		                    PLP
.3963c9	2b		pld		                    PLD
.3963ca	ab		plb		                    PLB
.3963cb	6b		rtl		                    RTL
.3963cc	28		plp		pass_failure        PLP
.3963cd	2b		pld		                    PLD
.3963ce	ab		plb		                    PLB
.3963cf	18		clc		                    CLC
.3963d0	6b		rtl		                    RTL
.3963d1					FDC_DumpReg_Command
.3963d1	0b		phd		                    PHD
.3963d2	08		php		                    PHP
.3963d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3963d5	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3963d7	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3963da	a9 01		lda #$01	                    LDA #1
.3963dc	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3963df	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3963e2	a9 0a		lda #$0a	                    LDA #10
.3963e4	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3963e7	22 f0 5f 39	jsl $395ff0	                    JSL FDC_COMMAND                     ; Issue the command
.3963eb	90 03		bcc $3963f0	                    BCC pass_failure
.3963ed	28		plp		                    PLP
.3963ee	2b		pld		                    PLD
.3963ef	6b		rtl		                    RTL
.3963f0	28		plp		pass_failure        PLP
.3963f1	2b		pld		                    PLD
.3963f2	18		clc		                    CLC
.3963f3	6b		rtl		                    RTL
.3963f4					FDC_Seek_Track
.3963f4	8b		phb		                    PHB
.3963f5	0b		phd		                    PHD
.3963f6	08		php		                    PHP
.3963f7	48		pha		                PHA             ; begin setdbr macro
.3963f8	08		php		                PHP
.3963f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3963fb	a9 00		lda #$00	                LDA #0
.3963fd	48		pha		                PHA
.3963fe	ab		plb		                PLB
.3963ff	28		plp		                PLP
.396400	68		pla		                PLA             ; end setdbr macro
.396401	48		pha		                PHA             ; begin setdp macro
.396402	08		php		                PHP
.396403	c2 20		rep #$20	                REP #$20        ; set A long
.396405	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396408	5b		tcd		                TCD
.396409	28		plp		                PLP
.39640a	68		pla		                PLA             ; end setdp macro
.39640b	22 9c 61 39	jsl $39619c	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39640f	e2 20		sep #$20	                SEP #$20        ; set A short
.396411	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396413	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396416	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396418	29 01		and #$01	                    AND #$01
.39641a	0a		asl a		                    ASL A
.39641b	0a		asl a		                    ASL A
.39641c	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39641e	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396421	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396423	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396426	a9 03		lda #$03	                    LDA #3
.396428	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39642b	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39642e	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396431	22 f0 5f 39	jsl $395ff0	                    JSL FDC_COMMAND                     ; Issue the command
.396435	90 05		bcc $39643c	                    BCC pass_failure
.396437	28		plp		                    PLP
.396438	2b		pld		                    PLD
.396439	ab		plb		                    PLB
.39643a	38		sec		                    SEC
.39643b	6b		rtl		                    RTL
.39643c	28		plp		pass_failure        PLP
.39643d	2b		pld		                    PLD
.39643e	ab		plb		                    PLB
.39643f	18		clc		                    CLC
.396440	6b		rtl		                    RTL
.396441					FDC_Read_Sector
.396441	8b		phb		                    PHB
.396442	0b		phd		                    PHD
.396443	08		php		                    PHP
.396444	48		pha		                PHA             ; begin setdbr macro
.396445	08		php		                PHP
.396446	e2 20		sep #$20	                SEP #$20        ; set A short
.396448	a9 00		lda #$00	                LDA #0
.39644a	48		pha		                PHA
.39644b	ab		plb		                PLB
.39644c	28		plp		                PLP
.39644d	68		pla		                PLA             ; end setdbr macro
.39644e	48		pha		                PHA             ; begin setdp macro
.39644f	08		php		                PHP
.396450	c2 20		rep #$20	                REP #$20        ; set A long
.396452	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396455	5b		tcd		                TCD
.396456	28		plp		                PLP
.396457	68		pla		                PLA             ; end setdp macro
.396458	22 9c 61 39	jsl $39619c	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39645c	e2 20		sep #$20	                SEP #$20        ; set A short
.39645e	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396460	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396462	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396465	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396467	29 01		and #$01	                    AND #$01
.396469	0a		asl a		                    ASL A
.39646a	0a		asl a		                    ASL A
.39646b	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39646d	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396470	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396472	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396475	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396477	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39647a	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39647c	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.39647f	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396481	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396484	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396486	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396489	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39648b	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.39648e	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396490	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396493	a9 09		lda #$09	                    LDA #9
.396495	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396498	a9 01		lda #$01	                    LDA #1
.39649a	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.39649d	a9 07		lda #$07	                    LDA #7
.39649f	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3964a2	22 f0 5f 39	jsl $395ff0	command             JSL FDC_COMMAND                     ; Issue the command
.3964a6	08		php		                    PHP
.3964a7	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3964aa	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3964ac	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3964af	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3964b1	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3964b4	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3964b6	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3964b9	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3964bb	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3964be	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3964c0	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3964c3	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3964c5	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3964c8	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3964ca	28		plp		                    PLP
.3964cb	90 04		bcc $3964d1	                    BCC pass_failure
.3964cd	28		plp		done                PLP
.3964ce	2b		pld		                    PLD
.3964cf	ab		plb		                    PLB
.3964d0	6b		rtl		                    RTL
.3964d1	28		plp		pass_failure        PLP
.3964d2	2b		pld		                    PLD
.3964d3	ab		plb		                    PLB
.3964d4	18		clc		                    CLC
.3964d5	6b		rtl		                    RTL
.3964d6					FDC_Write_Sector
.3964d6	8b		phb		                    PHB
.3964d7	0b		phd		                    PHD
.3964d8	08		php		                    PHP
.3964d9	48		pha		                PHA             ; begin setdbr macro
.3964da	08		php		                PHP
.3964db	e2 20		sep #$20	                SEP #$20        ; set A short
.3964dd	a9 00		lda #$00	                LDA #0
.3964df	48		pha		                PHA
.3964e0	ab		plb		                PLB
.3964e1	28		plp		                PLP
.3964e2	68		pla		                PLA             ; end setdbr macro
.3964e3	48		pha		                PHA             ; begin setdp macro
.3964e4	08		php		                PHP
.3964e5	c2 20		rep #$20	                REP #$20        ; set A long
.3964e7	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964ea	5b		tcd		                TCD
.3964eb	28		plp		                PLP
.3964ec	68		pla		                PLA             ; end setdp macro
.3964ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3964ef	22 9c 61 39	jsl $39619c	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964f3	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3964f5	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3964f7	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964fa	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964fc	29 01		and #$01	                    AND #$01
.3964fe	0a		asl a		                    ASL A
.3964ff	0a		asl a		                    ASL A
.396500	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396502	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396505	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396507	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39650a	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39650c	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39650f	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396511	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396514	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396516	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396519	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39651b	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39651e	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396520	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396523	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396525	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396528	a9 09		lda #$09	                    LDA #9
.39652a	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39652d	a9 ff		lda #$ff	                    LDA #$FF
.39652f	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396532	a9 07		lda #$07	                    LDA #7
.396534	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396537	22 f0 5f 39	jsl $395ff0	command             JSL FDC_COMMAND                     ; Issue the command
.39653b	08		php		                    PHP
.39653c	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39653f	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396541	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396544	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396546	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396549	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39654b	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39654e	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396550	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396553	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396555	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396558	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39655a	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39655d	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39655f	28		plp		check_status        PLP
.396560	90 04		bcc $396566	                    BCC pass_failure
.396562	28		plp		done                PLP
.396563	2b		pld		                    PLD
.396564	ab		plb		                    PLB
.396565	6b		rtl		                    RTL
.396566	28		plp		pass_failure        PLP
.396567	2b		pld		                    PLD
.396568	ab		plb		                    PLB
.396569	18		clc		                    CLC
.39656a	6b		rtl		                    RTL
.39656b					DIVIDE32
.39656b	da		phx		                    PHX
.39656c	5a		phy		                    PHY
.39656d	0b		phd		                    PHD
.39656e	08		php		                    PHP
.39656f	48		pha		                PHA             ; begin setdp macro
.396570	08		php		                PHP
.396571	c2 20		rep #$20	                REP #$20        ; set A long
.396573	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396576	5b		tcd		                TCD
.396577	28		plp		                PLP
.396578	68		pla		                PLA             ; end setdp macro
.396579	c2 30		rep #$30	                REP #$30        ; set A&X long
.39657b	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39657d	64 0a		stz $0316	                    STZ REMAINDER+2
.39657f	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396582	06 00		asl $030c	loop                ASL DIVIDEND
.396584	26 02		rol $030e	                    ROL DIVIDEND+2
.396586	26 08		rol $0314	                    ROL REMAINDER
.396588	26 0a		rol $0316	                    ROL REMAINDER+2
.39658a	a5 08		lda $0314	                    LDA REMAINDER
.39658c	38		sec		                    SEC
.39658d	e5 04		sbc $0310	                    SBC DIVISOR
.39658f	a8		tay		                    TAY
.396590	a5 0a		lda $0316	                    LDA REMAINDER+2
.396592	e5 06		sbc $0312	                    SBC DIVISOR+2
.396594	90 06		bcc $39659c	                    BCC skip
.396596	85 0a		sta $0316	                    STA REMAINDER+2
.396598	84 08		sty $0314	                    STY REMAINDER
.39659a	e6 00		inc $030c	                    INC DIVIDEND
.39659c	ca		dex		skip                DEX
.39659d	d0 e3		bne $396582	                    BNE loop
.39659f	28		plp		                    PLP
.3965a0	2b		pld		                    PLD
.3965a1	7a		ply		                    PLY
.3965a2	fa		plx		                    PLX
.3965a3	60		rts		                    RTS
.3965a4					LBA2CHS
.3965a4	8b		phb		                    PHB
.3965a5	0b		phd		                    PHD
.3965a6	08		php		                    PHP
.3965a7	48		pha		                PHA             ; begin setdbr macro
.3965a8	08		php		                PHP
.3965a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ab	a9 00		lda #$00	                LDA #0
.3965ad	48		pha		                PHA
.3965ae	ab		plb		                PLB
.3965af	28		plp		                PLP
.3965b0	68		pla		                PLA             ; end setdbr macro
.3965b1	48		pha		                PHA             ; begin setdp macro
.3965b2	08		php		                PHP
.3965b3	c2 20		rep #$20	                REP #$20        ; set A long
.3965b5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965b8	5b		tcd		                TCD
.3965b9	28		plp		                PLP
.3965ba	68		pla		                PLA             ; end setdp macro
.3965bb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3965bd	a5 22		lda $0322	                    LDA BIOS_LBA
.3965bf	85 0c		sta $030c	                    STA DIVIDEND
.3965c1	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3965c3	85 0e		sta $030e	                    STA DIVIDEND+2
.3965c5	a9 24 00	lda #$0024	                    LDA #36
.3965c8	85 10		sta $0310	                    STA DIVISOR
.3965ca	64 12		stz $0312	                    STZ DIVISOR+2
.3965cc	20 6b 65	jsr $39656b	                    JSR DIVIDE32
.3965cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3965d1	a5 0c		lda $030c	                    LDA DIVIDEND
.3965d3	85 02		sta $0302	                    STA FDC_CYLINDER
.3965d5	c2 20		rep #$20	                REP #$20        ; set A long
.3965d7	a5 14		lda $0314	                    LDA REMAINDER
.3965d9	85 0c		sta $030c	                    STA DIVIDEND
.3965db	a5 16		lda $0316	                    LDA REMAINDER+2
.3965dd	85 0e		sta $030e	                    STA DIVIDEND+2
.3965df	a9 12 00	lda #$0012	                    LDA #18
.3965e2	85 10		sta $0310	                    STA DIVISOR
.3965e4	64 12		stz $0312	                    STZ DIVISOR+2
.3965e6	20 6b 65	jsr $39656b	                    JSR DIVIDE32
.3965e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3965eb	a5 0c		lda $030c	                    LDA DIVIDEND
.3965ed	29 01		and #$01	                    AND #$01
.3965ef	85 01		sta $0301	                    STA FDC_HEAD
.3965f1	a5 14		lda $0314	                    LDA REMAINDER
.3965f3	1a		inc a		                    INC A
.3965f4	85 03		sta $0303	                    STA FDC_SECTOR
.3965f6	28		plp		                    PLP
.3965f7	2b		pld		                    PLD
.3965f8	ab		plb		                    PLB
.3965f9	6b		rtl		                    RTL
.3965fa					FDC_GETBLOCK
.3965fa	8b		phb		                    PHB
.3965fb	0b		phd		                    PHD
.3965fc	08		php		                    PHP
.3965fd	48		pha		                PHA             ; begin setdbr macro
.3965fe	08		php		                PHP
.3965ff	e2 20		sep #$20	                SEP #$20        ; set A short
.396601	a9 00		lda #$00	                LDA #0
.396603	48		pha		                PHA
.396604	ab		plb		                PLB
.396605	28		plp		                PLP
.396606	68		pla		                PLA             ; end setdbr macro
.396607	48		pha		                PHA             ; begin setdp macro
.396608	08		php		                PHP
.396609	c2 20		rep #$20	                REP #$20        ; set A long
.39660b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39660e	5b		tcd		                TCD
.39660f	28		plp		                PLP
.396610	68		pla		                PLA             ; end setdp macro
.396611	e2 20		sep #$20	                SEP #$20        ; set A short
.396613	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396615	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396618	c2 30		rep #$30	                REP #$30        ; set A&X long
.39661a	22 a4 65 39	jsl $3965a4	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39661e	e2 20		sep #$20	                SEP #$20        ; set A short
.396620	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396622	f0 29		beq $39664d	                    BEQ read_failure
.396624					try_read
.396624	c2 20		rep #$20	                REP #$20        ; set A long
.396626	22 41 64 39	jsl $396441	                    JSL FDC_Read_Sector         ; Read the sector
.39662a	90 14		bcc $396640	                    BCC retry
.39662c	e2 20		sep #$20	                SEP #$20        ; set A short
.39662e	a5 06		lda $0306	                    LDA FDC_ST0
.396630	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396632	d0 19		bne $39664d	                    BNE read_failure
.396634					ret_success
.396634	e2 20		sep #$20	                SEP #$20        ; set A short
.396636	a9 00		lda #$00	                    LDA #0
.396638	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39663b	28		plp		                    PLP
.39663c	2b		pld		                    PLD
.39663d	ab		plb		                    PLB
.39663e	38		sec		                    SEC
.39663f	6b		rtl		                    RTL
.396640					retry
.396640	e2 20		sep #$20	                SEP #$20        ; set A short
.396642	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396645	30 13		bmi $39665a	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396647	22 3d 61 39	jsl $39613d	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39664b	80 d7		bra $396624	                    BRA try_read                ; And try the read again
.39664d					read_failure
.39664d	e2 20		sep #$20	                SEP #$20        ; set A short
.39664f	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396651	80 04		bra $396657	                    BRA ret_failure
.396653					seek_failure
.396653	e2 20		sep #$20	                SEP #$20        ; set A short
.396655	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396657	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39665a	28		plp		pass_failure        PLP
.39665b	2b		pld		                    PLD
.39665c	ab		plb		                    PLB
.39665d	18		clc		                    CLC
.39665e	6b		rtl		                    RTL
.39665f					FDC_PUTBLOCK
.39665f	8b		phb		                    PHB
.396660	0b		phd		                    PHD
.396661	08		php		                    PHP
.396662	48		pha		                PHA             ; begin setdbr macro
.396663	08		php		                PHP
.396664	e2 20		sep #$20	                SEP #$20        ; set A short
.396666	a9 00		lda #$00	                LDA #0
.396668	48		pha		                PHA
.396669	ab		plb		                PLB
.39666a	28		plp		                PLP
.39666b	68		pla		                PLA             ; end setdbr macro
.39666c	48		pha		                PHA             ; begin setdp macro
.39666d	08		php		                PHP
.39666e	c2 20		rep #$20	                REP #$20        ; set A long
.396670	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396673	5b		tcd		                TCD
.396674	28		plp		                PLP
.396675	68		pla		                PLA             ; end setdp macro
.396676	e2 20		sep #$20	                SEP #$20        ; set A short
.396678	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39667a	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39667d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39667f	22 a4 65 39	jsl $3965a4	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396683	22 d6 64 39	jsl $3964d6	retry               JSL FDC_Write_Sector        ; Write the sector
.396687	b0 03		bcs $39668c	                    BCS chk_st0
.396689	82 28 00	brl $3966b4	                    BRL attempt_retry
.39668c					chk_st0
.39668c	e2 20		sep #$20	                SEP #$20        ; set A short
.39668e	a5 06		lda $0306	                    LDA FDC_ST0
.396690	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396692	d0 0c		bne $3966a0	                    BNE write_failure
.396694					ret_success
.396694	e2 20		sep #$20	                SEP #$20        ; set A short
.396696	a9 00		lda #$00	                    LDA #0
.396698	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39669b	28		plp		                    PLP
.39669c	2b		pld		                    PLD
.39669d	ab		plb		                    PLB
.39669e	38		sec		                    SEC
.39669f	6b		rtl		                    RTL
.3966a0					write_failure
.3966a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a2	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3966a4	89 02		bit #$02	                    BIT #FDC_ST1_NW
.3966a6	f0 04		beq $3966ac	                    BEQ generic_err
.3966a8	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3966aa	80 17		bra $3966c3	                    BRA ret_failure
.3966ac	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3966ae	d0 e4		bne $396694	                    BNE ret_success
.3966b0	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3966b2	d0 e0		bne $396694	                    BNE ret_success
.3966b4					attempt_retry
.3966b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b6	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3966b9	d0 c8		bne $396683	                    BNE retry                           ; And retry unless we have none left
.3966bb	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3966bd	80 04		bra $3966c3	                    BRA ret_failure
.3966bf					seek_failure
.3966bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c1	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3966c3					ret_failure
.3966c3	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3966c6	28		plp		pass_failure        PLP
.3966c7	2b		pld		                    PLD
.3966c8	ab		plb		                    PLB
.3966c9	18		clc		                    CLC
.3966ca	6b		rtl		                    RTL
.3966cb					FDC_MOUNT
.3966cb	8b		phb		                    PHB
.3966cc	0b		phd		                    PHD
.3966cd	08		php		                    PHP
.3966ce	48		pha		                PHA             ; begin setdbr macro
.3966cf	08		php		                PHP
.3966d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3966d2	a9 00		lda #$00	                LDA #0
.3966d4	48		pha		                PHA
.3966d5	ab		plb		                PLB
.3966d6	28		plp		                PLP
.3966d7	68		pla		                PLA             ; end setdbr macro
.3966d8	48		pha		                PHA             ; begin setdp macro
.3966d9	08		php		                PHP
.3966da	c2 20		rep #$20	                REP #$20        ; set A long
.3966dc	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966df	5b		tcd		                TCD
.3966e0	28		plp		                PLP
.3966e1	68		pla		                PLA             ; end setdp macro
.3966e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e4	c2 10		rep #$10	                REP #$10        ; set X long
.3966e6	a9 00		lda #$00	                    LDA #0
.3966e8	a2 00 00	ldx #$0000	                    LDX #0
.3966eb	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3966ef	e8		inx		                    INX
.3966f0	e0 00 02	cpx #$0200	                    CPX #512
.3966f3	d0 f6		bne $3966eb	                    BNE zero_loop
.3966f5	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3966f7	85 00		sta $0300	                    STA FDC_DRIVE
.3966f9	22 b5 61 39	jsl $3961b5	                    JSL FDC_Motor_On                        ; Turn the motor on
.3966fd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966ff	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396702	85 22		sta $0322	                    STA BIOS_LBA
.396704	85 24		sta $0324	                    STA BIOS_LBA+2
.396706	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396709	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39670b	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39670e	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396710	22 fa 65 39	jsl $3965fa	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396714	b0 03		bcs $396719	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396716	82 d3 00	brl $3967ec	                    BRL pass_failure                        ; Pass the error up the chain
.396719					parse_boot
.396719	e2 20		sep #$20	                SEP #$20        ; set A short
.39671b	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.39671d	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396721	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396723	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.396727	e2 20		sep #$20	                SEP #$20        ; set A short
.396729	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.39672d	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396731	c2 20		rep #$20	                REP #$20        ; set A long
.396733	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396736	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39673a	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.39673e	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396742	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396746	a9 00 00	lda #$0000	                    LDA #0
.396749	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.39674d	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396750	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396754	18		clc		                    CLC
.396755	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396759	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39675d	a9 00 00	lda #$0000	                    LDA #0
.396760	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396764	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.396768	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.396769	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.39676d	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396771	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396775	a9 00 00	lda #$0000	                    LDA #0
.396778	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39677c	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396780	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.396784	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396785	4a		lsr a		                    LSR A
.396786	4a		lsr a		                    LSR A
.396787	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396788	18		clc		                    CLC
.396789	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39678d	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396791	a9 00 00	lda #$0000	                    LDA #0
.396794	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.396798	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39679c	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.3967a0	a9 00 00	lda #$0000	                    LDA #0
.3967a3	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.3967a7	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3967ab	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3967af	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3967b2	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3967b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3967b8	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3967bc	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3967be	80 14		bra $3967d4	                    BRA no_volume_id                        ; No: there is no volume ID
.3967c0					is_extended
.3967c0	c2 20		rep #$20	                REP #$20        ; set A long
.3967c2	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3967c6	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3967ca	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3967ce	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3967d2	80 0d		bra $3967e1	                    BRA ret_success
.3967d4					no_volume_id
.3967d4	c2 20		rep #$20	                REP #$20        ; set A long
.3967d6	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3967d9	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3967dd	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3967e1					ret_success
.3967e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3967e3	a9 00		lda #$00	                    LDA #0
.3967e5	85 20		sta $0320	                    STA BIOS_STATUS
.3967e7	28		plp		                    PLP
.3967e8	2b		pld		                    PLD
.3967e9	ab		plb		                    PLB
.3967ea	38		sec		                    SEC
.3967eb	6b		rtl		                    RTL
.3967ec	28		plp		pass_failure        PLP
.3967ed	2b		pld		                    PLD
.3967ee	ab		plb		                    PLB
.3967ef	18		clc		                    CLC
.3967f0	6b		rtl		                    RTL
.3967f1					FDC_CMDBLOCK
.3967f1	8b		phb		                    PHB
.3967f2	0b		phd		                    PHD
.3967f3	08		php		                    PHP
.3967f4	48		pha		                PHA             ; begin setdbr macro
.3967f5	08		php		                PHP
.3967f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3967f8	a9 00		lda #$00	                LDA #0
.3967fa	48		pha		                PHA
.3967fb	ab		plb		                PLB
.3967fc	28		plp		                PLP
.3967fd	68		pla		                PLA             ; end setdbr macro
.3967fe	48		pha		                PHA             ; begin setdp macro
.3967ff	08		php		                PHP
.396800	c2 20		rep #$20	                REP #$20        ; set A long
.396802	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396805	5b		tcd		                TCD
.396806	28		plp		                PLP
.396807	68		pla		                PLA             ; end setdp macro
.396808	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39680a	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.39680c	f0 0f		beq $39681d	                    BEQ motor_on
.39680e	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396810	f0 11		beq $396823	                    BEQ motor_off
.396812	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396814	f0 13		beq $396829	                    BEQ recalibrate
.396816	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396818	28		plp		                    PLP
.396819	2b		pld		                    PLD
.39681a	ab		plb		                    PLB
.39681b	38		sec		                    SEC
.39681c	6b		rtl		                    RTL
.39681d	22 b5 61 39	jsl $3961b5	motor_on            JSL FDC_Motor_On
.396821	80 f3		bra $396816	                    BRA ret_success
.396823	22 e9 61 39	jsl $3961e9	motor_off           JSL FDC_Motor_Off
.396827	80 ed		bra $396816	                    BRA ret_success
.396829	22 14 62 39	jsl $396214	recalibrate         JSL FDC_Recalibrate_Command
.39682d	b0 e7		bcs $396816	                    BCS ret_success
.39682f	28		plp		pass_failure        PLP
.396830	2b		pld		                    PLD
.396831	ab		plb		                    PLB
.396832	18		clc		                    CLC
.396833	6b		rtl		                    RTL
.396834					FDC_CHK_MEDIA
.396834	0b		phd		                    PHD
.396835	08		php		                    PHP
.396836	48		pha		                PHA             ; begin setdp macro
.396837	08		php		                PHP
.396838	c2 20		rep #$20	                REP #$20        ; set A long
.39683a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39683d	5b		tcd		                TCD
.39683e	28		plp		                PLP
.39683f	68		pla		                PLA             ; end setdp macro
.396840	22 b5 61 39	jsl $3961b5	                    JSL FDC_Motor_On                ; Turn on the motor
.396844	e2 20		sep #$20	                SEP #$20        ; set A short
.396846	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39684a	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39684c	f0 42		beq $396890	                    BEQ ret_true                    ; If not: assume the disk is present
.39684e	a9 00		lda #$00	                    LDA #0
.396850	85 00		sta $0300	                    STA FDC_DRIVE
.396852	a9 00		lda #$00	                    LDA #0
.396854	85 01		sta $0301	                    STA FDC_HEAD
.396856	a9 50		lda #$50	                    LDA #80
.396858	85 02		sta $0302	                    STA FDC_CYLINDER
.39685a	22 f4 63 39	jsl $3963f4	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.39685e	90 34		bcc $396894	                    BCC ret_false                   ; If fail: return false
.396860	c2 10		rep #$10	                REP #$10        ; set X long
.396862	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396865	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396868	22 ee 15 39	jsl $3915ee	                    JSL IDELAY
.39686c	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.396870	a5 06		lda $0306	                    LDA FDC_ST0
.396872	29 d0		and #$d0	                    AND #%11010000
.396874	d0 1e		bne $396894	                    BNE ret_false
.396876	22 14 62 39	jsl $396214	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39687a	90 18		bcc $396894	                    BCC ret_false                   ; If fail: return false
.39687c	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39687f	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396882	22 ee 15 39	jsl $3915ee	                    JSL IDELAY
.396886	22 49 62 39	jsl $396249	                    JSL FDC_Sense_Int_Status
.39688a	a5 06		lda $0306	                    LDA FDC_ST0
.39688c	29 d0		and #$d0	                    AND #%11010000
.39688e	d0 04		bne $396894	                    BNE ret_false
.396890					ret_true
.396890	28		plp		                    PLP
.396891	2b		pld		                    PLD
.396892	38		sec		                    SEC
.396893	6b		rtl		                    RTL
.396894					ret_false
.396894	28		plp		                    PLP
.396895	2b		pld		                    PLD
.396896	18		clc		                    CLC
.396897	6b		rtl		                    RTL
.396898					FDC_WRITEVBR
.396898	8b		phb		                    PHB
.396899	0b		phd		                    PHD
.39689a	08		php		                    PHP
.39689b	48		pha		                PHA             ; begin setdbr macro
.39689c	08		php		                PHP
.39689d	e2 20		sep #$20	                SEP #$20        ; set A short
.39689f	a9 00		lda #$00	                LDA #0
.3968a1	48		pha		                PHA
.3968a2	ab		plb		                PLB
.3968a3	28		plp		                PLP
.3968a4	68		pla		                PLA             ; end setdbr macro
.3968a5	48		pha		                PHA             ; begin setdp macro
.3968a6	08		php		                PHP
.3968a7	c2 20		rep #$20	                REP #$20        ; set A long
.3968a9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3968ac	5b		tcd		                TCD
.3968ad	28		plp		                PLP
.3968ae	68		pla		                PLA             ; end setdp macro
.3968af	22 cb 66 39	jsl $3966cb	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3968b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3968b5	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3968b8	a2 00 00	ldx #$0000	                    LDX #0
.3968bb	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3968bf	e8		inx		                    INX
.3968c0	e8		inx		                    INX
.3968c1	e0 00 02	cpx #$0200	                    CPX #512
.3968c4	d0 f5		bne $3968bb	                    BNE clr_loop
.3968c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3968c8	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3968cb	bf 2e 69 39	lda $39692e,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3968cf	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3968d3	e8		inx		                    INX
.3968d4	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3968d7	d0 f2		bne $3968cb	                    BNE copy_loop
.3968d9	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3968dc	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3968df	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3968e1	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3968e5	f0 07		beq $3968ee	                    BEQ path_copy_done
.3968e7	e8		inx		                    INX
.3968e8	c8		iny		                    INY
.3968e9	c0 80 00	cpy #$0080	                    CPY #128
.3968ec	d0 f1		bne $3968df	                    BNE path_copy_loop
.3968ee					path_copy_done
.3968ee	c2 20		rep #$20	                REP #$20        ; set A long
.3968f0	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3968f3	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3968f7	c2 20		rep #$20	                REP #$20        ; set A long
.3968f9	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3968fc	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3968fe	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396901	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396903	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.396906	85 02		sta $0322	                    STA BIOS_LBA
.396908	85 04		sta $0324	                    STA BIOS_LBA+2
.39690a	e2 20		sep #$20	                SEP #$20        ; set A short
.39690c	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.39690e	85 01		sta $0321	                    STA BIOS_DEV
.396910	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396914	b0 09		bcs $39691f	                    BCS ret_success
.396916	22 e9 61 39	jsl $3961e9	                    JSL FDC_Motor_Off
.39691a	28		plp		                    PLP                         ; Return the failure
.39691b	2b		pld		                    PLD
.39691c	ab		plb		                    PLB
.39691d	18		clc		                    CLC
.39691e	6b		rtl		                    RTL
.39691f	22 e9 61 39	jsl $3961e9	ret_success         JSL FDC_Motor_Off
.396923	e2 20		sep #$20	                SEP #$20        ; set A short
.396925	a9 00		lda #$00	                    LDA #0
.396927	85 00		sta $0320	                    STA BIOS_STATUS
.396929	28		plp		                    PLP
.39692a	2b		pld		                    PLD
.39692b	ab		plb		                    PLB
.39692c	38		sec		                    SEC
.39692d	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.39692e					FDC_VBR_BEGIN
>39692e	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396931	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396939	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39693b	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>39693c	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>39693e	02				num_fat             .byte 2                 ; Number of FATs
>39693f	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396941	40 0b				total_sectors       .word 2880              ; Total sectors
>396943	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396944	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396946	12 00				sec_per_track       .word 18                ; Sectors per track
>396948	02 00				num_head            .word 2                 ; Number of heads
>39694a	00 00 00 00			ignore2             .dword 0
>39694e	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396952	00 00				ignore3             .word 0
>396954	29				boot_signature      .byte $29
>396955	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396959	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396961	20 20 20
>396964	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.39696c	80 40		bra $3969ae	                    BRA vbr_start
>39696e					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3969ae					vbr_start
.3969ae	c2 20		rep #$20	                REP #$20        ; set A long
.3969b0	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3969b3	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3969b7	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3969ba	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3969be	22 b5 58 39	jsl $3958b5	                    JSL IF_RUN              ; And try to execute the binary file
.3969c2	b0 0c		bcs $3969d0	                    BCS lock                ; If it returned success... lock up... I guess?
.3969c4					error
.3969c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3969c6	4b		phk		                    PHK                     ; Otherwise, print an error message
.3969c7	ab		plb		                    PLB
.3969c8	62 08 00	per $3969d3	                    PER message
.3969cb	fa		plx		                    PLX
.3969cc	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3969d0	ea		nop		lock                NOP                     ; And lock up
.3969d1	80 fd		bra $3969d0	                    BRA lock
>3969d3	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3969db	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3969eb	65 20 62 69 6e 61 72 79 2e 0d 00
.3969f6					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3969f6					IDE_TEST
.3969f6	08		php		                PHP
.3969f7	c2 20		rep #$20	                REP #$20        ; set A long
.3969f9	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3969fc	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a00	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a03	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a07	22 24 6b 39	jsl $396b24	                JSL IDE_IDENTIFY
.396a0b	b0 03		bcs $396a10	                BCS id_ok
.396a0d	82 ab 00	brl $396abb	                BRL done
.396a10					id_ok
.396a10	c2 10		rep #$10	                REP #$10        ; set X long
.396a12	e2 20		sep #$20	                SEP #$20        ; set A short
.396a14	a0 28 00	ldy #$0028	                LDY #40
.396a17	a2 36 00	ldx #$0036	                LDX #27*2
.396a1a	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396a1e	22 18 10 38	jsl $381018	                JSL PUTC
.396a22	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a26	22 18 10 38	jsl $381018	                JSL PUTC
.396a2a	e8		inx		                INX
.396a2b	e8		inx		                INX
.396a2c	88		dey		                DEY
.396a2d	88		dey		                DEY
.396a2e	d0 ea		bne $396a1a	                BNE pr_model
.396a30	c2 10		rep #$10	                REP #$10        ; set X long
.396a32	e2 20		sep #$20	                SEP #$20        ; set A short
.396a34	a0 14 00	ldy #$0014	                LDY #20
.396a37	a2 14 00	ldx #$0014	                LDX #10*2
.396a3a	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396a3e	22 18 10 38	jsl $381018	                JSL PUTC
.396a42	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a46	22 18 10 38	jsl $381018	                JSL PUTC
.396a4a	e8		inx		                INX
.396a4b	e8		inx		                INX
.396a4c	88		dey		                DEY
.396a4d	88		dey		                DEY
.396a4e	d0 ea		bne $396a3a	                BNE pr_serial
.396a50	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396a54	c2 30		rep #$30	                REP #$30        ; set A&X long
.396a56	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396a59	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a5d	a9 00 00	lda #$0000	                LDA #0
.396a60	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a64	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396a67	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a6b	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a6e	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a72	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396a75	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396a78	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396a7c	e8		inx		                INX
.396a7d	e8		inx		                INX
.396a7e	e0 00 02	cpx #$0200	                CPX #512
.396a81	d0 f5		bne $396a78	                BNE init_loop
.396a83	22 43 6c 39	jsl $396c43	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396a87	b0 06		bcs $396a8f	                BCS read_sect1
.396a89	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396a8d	80 2c		bra $396abb	                BRA done
.396a8f	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396a92	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a96	a9 00 00	lda #$0000	                LDA #0
.396a99	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a9d	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396aa0	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396aa4	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396aa7	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396aab	22 b2 6b 39	jsl $396bb2	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396aaf	b0 06		bcs $396ab7	                BCS all_ok
.396ab1	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396ab5	80 04		bra $396abb	                BRA done
.396ab7					all_ok
.396ab7	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396abb	28		plp		done            PLP
.396abc	6b		rtl		                RTL
.396abd					IDE_INIT
.396abd	e2 20		sep #$20	                SEP #$20        ; set A short
.396abf	20 e0 6a	jsr $396ae0	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396ac2	a9 00		lda #$00	              LDA #$00
.396ac4	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396ac8	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396acc	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396ad0	a9 01		lda #$01	              LDA #$01
.396ad2	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396ad6	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396ad8	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396adc	20 fe 6a	jsr $396afe	              JSR IDE_DRV_READY_NOTBUSY
.396adf	6b		rtl		              RTL
.396ae0					IDE_DRIVE_BSY
.396ae0	08		php		                PHP
.396ae1	e2 20		sep #$20	                SEP #$20        ; set A short
.396ae3	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396ae7	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396ae9	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396aeb	f0 f6		beq $396ae3	                BEQ loop
.396aed	28		plp		                PLP
.396aee	60		rts		                RTS
.396aef					IDE_DRIVE_READY
.396aef	08		php		                PHP
.396af0	e2 20		sep #$20	                SEP #$20        ; set A short
.396af2	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396af6	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396af8	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396afa	d0 f6		bne $396af2	                BNE loop
.396afc	28		plp		                PLP
.396afd	60		rts		                RTS
.396afe					IDE_DRV_READY_NOTBUSY
.396afe	08		php		                PHP
.396aff	e2 20		sep #$20	                SEP #$20        ; set A short
.396b01	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396b05	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396b07	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396b09	d0 f6		bne $396b01	                BNE loop                            ; No: keep waiting
.396b0b	28		plp		ret_success     PLP                                 ; Return success
.396b0c	38		sec		                SEC
.396b0d	60		rts		                RTS
.396b0e	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396b12	28		plp		                PLP                                 ; Return failure
.396b13	18		clc		                CLC
.396b14	60		rts		                RTS
.396b15					IDE_NOT_DRQ
.396b15	08		php		                PHP
.396b16	e2 20		sep #$20	                SEP #$20        ; set A short
.396b18	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396b1c	29 08		and #$08	                AND #IDE_STAT_DRQ
.396b1e	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396b20	d0 f6		bne $396b18	                BNE loop                ; No: keep waiting
.396b22	28		plp		                PLP
.396b23	60		rts		                RTS
.396b24					IDE_IDENTIFY
.396b24	5a		phy		                PHY
.396b25	8b		phb		                PHB
.396b26	0b		phd		                PHD
.396b27	08		php		                PHP
.396b28	48		pha		                PHA             ; begin setdbr macro
.396b29	08		php		                PHP
.396b2a	e2 20		sep #$20	                SEP #$20        ; set A short
.396b2c	a9 00		lda #$00	                LDA #0
.396b2e	48		pha		                PHA
.396b2f	ab		plb		                PLB
.396b30	28		plp		                PLP
.396b31	68		pla		                PLA             ; end setdbr macro
.396b32	48		pha		                PHA             ; begin setdp macro
.396b33	08		php		                PHP
.396b34	c2 20		rep #$20	                REP #$20        ; set A long
.396b36	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b39	5b		tcd		                TCD
.396b3a	28		plp		                PLP
.396b3b	68		pla		                PLA             ; end setdp macro
.396b3c	e2 20		sep #$20	                SEP #$20        ; set A short
.396b3e	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b41	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b43	29 07		and #$07	                AND #$07
.396b45	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396b47	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b4b	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.396b50	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396b52	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b56	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b5a	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b5e	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b62	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396b64	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396b68	f0 29		beq $396b93	                BEQ no_media                    ; If 0: there is no drive
.396b6a	20 e0 6a	jsr $396ae0	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396b6d	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b70	90 2d		bcc $396b9f	                BCC ret_failure                 ; If an error occurred, return it
.396b72	c2 30		rep #$30	                REP #$30        ; set A&X long
.396b74	a0 00 00	ldy #$0000	                LDY #0
.396b77	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b7b	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b7d	c8		iny		                INY                             ; Move to the next position
.396b7e	c8		iny		                INY
.396b7f	c0 00 02	cpy #$0200	                CPY #512
.396b82	d0 f3		bne $396b77	                BNE read_loop
.396b84					ret_success
.396b84	e2 20		sep #$20	                SEP #$20        ; set A short
.396b86	a9 00		lda #$00	                LDA #0
.396b88	85 00		sta $0320	                STA BIOS_STATUS
.396b8a	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b8d	28		plp		                PLP                             ; Return success
.396b8e	2b		pld		                PLD
.396b8f	ab		plb		                PLB
.396b90	7a		ply		                PLY
.396b91	38		sec		                SEC
.396b92	6b		rtl		                RTL
.396b93					no_media
.396b93	e2 20		sep #$20	                SEP #$20        ; set A short
.396b95	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396b97	80 0a		bra $396ba3	                BRA pass_failure
.396b99					not_ata
.396b99	e2 20		sep #$20	                SEP #$20        ; set A short
.396b9b	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396b9d	80 04		bra $396ba3	                BRA pass_failure
.396b9f					ret_failure
.396b9f	e2 20		sep #$20	                SEP #$20        ; set A short
.396ba1	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396ba3	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396ba5	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396ba9	8d 06 03	sta $0306	                STA @w FDC_ST0
.396bac	28		plp		                PLP
.396bad	2b		pld		                PLD
.396bae	ab		plb		                PLB
.396baf	7a		ply		                PLY
.396bb0	18		clc		                CLC
.396bb1	6b		rtl		                RTL
.396bb2					IDE_GETBLOCK
.396bb2	5a		phy		                PHY
.396bb3	8b		phb		                PHB
.396bb4	0b		phd		                PHD
.396bb5	08		php		                PHP
.396bb6	48		pha		                PHA             ; begin setdbr macro
.396bb7	08		php		                PHP
.396bb8	e2 20		sep #$20	                SEP #$20        ; set A short
.396bba	a9 00		lda #$00	                LDA #0
.396bbc	48		pha		                PHA
.396bbd	ab		plb		                PLB
.396bbe	28		plp		                PLP
.396bbf	68		pla		                PLA             ; end setdbr macro
.396bc0	48		pha		                PHA             ; begin setdp macro
.396bc1	08		php		                PHP
.396bc2	c2 20		rep #$20	                REP #$20        ; set A long
.396bc4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396bc7	5b		tcd		                TCD
.396bc8	28		plp		                PLP
.396bc9	68		pla		                PLA             ; end setdp macro
.396bca	e2 20		sep #$20	                SEP #$20        ; set A short
.396bcc	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396bcf	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396bd1	29 07		and #$07	                AND #$07
.396bd3	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396bd5	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396bd9	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396bdc	e2 20		sep #$20	                SEP #$20        ; set A short
.396bde	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396be0	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396be4	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396be6	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396bea	a5 03		lda $0323	                LDA BIOS_LBA+1
.396bec	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396bf0	a5 04		lda $0324	                LDA BIOS_LBA+2
.396bf2	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396bf6	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396bf8	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396bfc	ea		nop		                NOP                             ; Wait about 500ns
.396bfd	ea		nop		                NOP
.396bfe	ea		nop		                NOP
.396bff	ea		nop		                NOP
.396c00	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c03	90 2b		bcc $396c30	                BCC ret_failure                 ; If an error occurred, return it
.396c05	e2 20		sep #$20	                SEP #$20        ; set A short
.396c07	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396c0b	a0 00 00	ldy #$0000	                LDY #0
.396c0e	c2 20		rep #$20	                REP #$20        ; set A long
.396c10	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c14	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c16	c8		iny		                INY                             ; Move to the next position
.396c17	c8		iny		                INY
.396c18	c0 00 02	cpy #$0200	                CPY #512
.396c1b	d0 f3		bne $396c10	                BNE read_loop
.396c1d	ea		nop		                NOP                             ; Wait about 500ns
.396c1e	ea		nop		                NOP
.396c1f	ea		nop		                NOP
.396c20	ea		nop		                NOP
.396c21					ret_success
.396c21	e2 20		sep #$20	                SEP #$20        ; set A short
.396c23	a9 00		lda #$00	                LDA #0
.396c25	85 00		sta $0320	                STA BIOS_STATUS
.396c27	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c2a	28		plp		                PLP                             ; Return success
.396c2b	2b		pld		                PLD
.396c2c	ab		plb		                PLB
.396c2d	7a		ply		                PLY
.396c2e	38		sec		                SEC
.396c2f	6b		rtl		                RTL
.396c30					ret_failure
.396c30	e2 20		sep #$20	                SEP #$20        ; set A short
.396c32	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c36	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c39	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c3b	85 00		sta $0320	                STA BIOS_STATUS
.396c3d	28		plp		                PLP
.396c3e	2b		pld		                PLD
.396c3f	ab		plb		                PLB
.396c40	7a		ply		                PLY
.396c41	18		clc		                CLC
.396c42	6b		rtl		                RTL
.396c43					IDE_PUTBLOCK
.396c43	5a		phy		                PHY
.396c44	8b		phb		                PHB
.396c45	0b		phd		                PHD
.396c46	08		php		                PHP
.396c47	48		pha		                PHA             ; begin setdbr macro
.396c48	08		php		                PHP
.396c49	e2 20		sep #$20	                SEP #$20        ; set A short
.396c4b	a9 00		lda #$00	                LDA #0
.396c4d	48		pha		                PHA
.396c4e	ab		plb		                PLB
.396c4f	28		plp		                PLP
.396c50	68		pla		                PLA             ; end setdbr macro
.396c51	48		pha		                PHA             ; begin setdp macro
.396c52	08		php		                PHP
.396c53	c2 20		rep #$20	                REP #$20        ; set A long
.396c55	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c58	5b		tcd		                TCD
.396c59	28		plp		                PLP
.396c5a	68		pla		                PLA             ; end setdp macro
.396c5b	e2 20		sep #$20	                SEP #$20        ; set A short
.396c5d	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c60	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c62	29 07		and #$07	                AND #$07
.396c64	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396c66	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c6a	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c6d	e2 20		sep #$20	                SEP #$20        ; set A short
.396c6f	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396c71	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c75	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396c77	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c7b	a5 03		lda $0323	                LDA BIOS_LBA+1
.396c7d	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c81	a5 04		lda $0324	                LDA BIOS_LBA+2
.396c83	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c87	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396c89	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396c8d	ea		nop		                NOP                             ; Wait about 500ns
.396c8e	ea		nop		                NOP
.396c8f	ea		nop		                NOP
.396c90	ea		nop		                NOP
.396c91	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c94	90 33		bcc $396cc9	                BCC ret_failure                 ; If an error occurred, return it
.396c96	c2 30		rep #$30	                REP #$30        ; set A&X long
.396c98	a0 00 00	ldy #$0000	                LDY #0
.396c9b	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396c9d	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396ca1	c8		iny		                INY                             ; Move to the next position
.396ca2	c8		iny		                INY
.396ca3	c0 00 02	cpy #$0200	                CPY #512
.396ca6	d0 f3		bne $396c9b	                BNE read_loop
.396ca8	ea		nop		                NOP                             ; Wait about 500ns
.396ca9	ea		nop		                NOP
.396caa	ea		nop		                NOP
.396cab	ea		nop		                NOP
.396cac	20 fe 6a	jsr $396afe	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396caf	90 18		bcc $396cc9	                BCC ret_failure                 ; If an error occurred, return it
.396cb1	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396cb5	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396cb8	d0 0f		bne $396cc9	                BNE ret_failure                 ; If error: return failure
.396cba					ret_success
.396cba	e2 20		sep #$20	                SEP #$20        ; set A short
.396cbc	a9 00		lda #$00	                LDA #0
.396cbe	85 00		sta $0320	                STA BIOS_STATUS
.396cc0	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cc3	28		plp		                PLP                             ; Return success
.396cc4	2b		pld		                PLD
.396cc5	ab		plb		                PLB
.396cc6	7a		ply		                PLY
.396cc7	38		sec		                SEC
.396cc8	6b		rtl		                RTL
.396cc9					ret_failure
.396cc9	e2 20		sep #$20	                SEP #$20        ; set A short
.396ccb	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396ccf	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cd2	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cd4	85 00		sta $0320	                STA BIOS_STATUS
.396cd6	28		plp		                PLP
.396cd7	2b		pld		                PLD
.396cd8	ab		plb		                PLB
.396cd9	7a		ply		                PLY
.396cda	18		clc		                CLC
.396cdb	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396cdc					KERNEL_DATA
>396cdc	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396ce4	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396cf4	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396d04	58 20 0d
>396d07	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396d0f	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396d1f	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396d2f	20 20 0d
>396d32	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396d3a	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396d4a	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396d5a	20 20 0d
>396d5d	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396d65	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396d75	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396d85	20 20 0d
>396d88	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396d90	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396da0	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396db0	20 20 0d
>396db3	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396dbb	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396dcb	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396ddb	0d
>396ddc	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396de4	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396df4	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396e01	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+791 (2020-07-27)"
>396e09	6c 70 68 61 2b 37 39 31 20 28 32 30 32 30 2d 30
>396e19	37 2d 32 37 29

;******  Return to file: src\kernel.asm

>396e1e	0d 00				                .text $0D,$00
.396e20					old_pc_style_stat
>396e20	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e28	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396e38	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e48	fd fd
>396e4a	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e52	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396e62	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e72	fd fd
>396e74	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e7c	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396e8c	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e9c	fd fd
>396e9e	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ea6	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396eb6	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ec6	fd fd
>396ec8	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ed0	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ee0	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ef0	fd fd
>396ef2	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396ef6	00 00 80 ff			                .text $00, $00, $80, $FF
>396efa	00 80 00 ff			                .text $00, $80, $00, $FF
>396efe	80 00 00 ff			                .text $80, $00, $00, $FF
>396f02	00 80 80 ff			                .text $00, $80, $80, $FF
>396f06	80 80 00 ff			                .text $80, $80, $00, $FF
>396f0a	80 00 80 ff			                .text $80, $00, $80, $FF
>396f0e	80 80 80 ff			                .text $80, $80, $80, $FF
>396f12	00 45 ff ff			                .text $00, $45, $FF, $FF
>396f16	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f1a	00 00 20 ff			                .text $00, $00, $20, $FF
>396f1e	00 20 00 ff			                .text $00, $20, $00, $FF
>396f22	20 00 00 ff			                .text $20, $00, $00, $FF
>396f26	20 20 20 ff			                .text $20, $20, $20, $FF
>396f2a	40 40 40 ff			                .text $40, $40, $40, $FF
>396f2e	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396f32	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396f36	00 00 80 ff			                .text $00, $00, $80, $FF
>396f3a	00 80 00 ff			                .text $00, $80, $00, $FF
>396f3e	80 00 00 ff			                .text $80, $00, $00, $FF
>396f42	00 20 20 ff			                .text $00, $20, $20, $FF
>396f46	20 20 00 ff			                .text $20, $20, $00, $FF
>396f4a	20 00 20 ff			                .text $20, $00, $20, $FF
>396f4e	20 20 20 ff			                .text $20, $20, $20, $FF
>396f52	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396f56	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f5a	00 00 20 ff			                .text $00, $00, $20, $FF
>396f5e	00 20 00 ff			                .text $00, $20, $00, $FF
>396f62	40 00 00 ff			                .text $40, $00, $00, $FF
>396f66	10 10 10 ff			                .text $10, $10, $10, $FF
>396f6a	40 40 40 ff			                .text $40, $40, $40, $FF
>396f6e	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396f72	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396f7a	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396f8a	00
>396f8b	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396f93	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396fa3	00
>396fa4	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396fac	20 45 78 65 63 75 74 65 64 2e 0d 00
>396fb8	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396fc0	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396fd0	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396fd8	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396fe8	64 2e 2e 2e 0d 00
>396fee	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396ff6	20 50 72 65 73 65 6e 74 0d 00
>397000	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397008	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>397018	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397028	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397030	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39703c	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397044	45 44 2e 00
>397048	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397050	47 20 42 4d 50 20 50 41 52 53 45 52 00
>39705d	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397065	50 72 65 73 65 6e 74 3a 00
>39706e	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397076	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397086	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397094	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39709c	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>3970ac	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>3970b9	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>3970c1	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3970d1	72 64 2e 00
>3970d5	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>3970dd	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3970ed	49 44 45 20 64 72 69 76 65 2e 00
>3970f8	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397100	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397110	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>39711e	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397126	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397135	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>39713d	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397145	52 4f 52 00
>397149	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397151	38 39 41 42 43 44 45 46 00
>39715a					.align 256
>397200	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397228	27 60 00 5c 7a 78 63 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397238	00 20 00 81 82 83 84 85
>397240	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397248	11 00 00 9d 00 1d 00 00
>397250	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	8c 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397288	26 2a 28 29 5f 2b 08 09
>397290	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397298	4f 50 7b 7d 0d 00 41 53
>3972a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3972a8	22 7e 00 5c 5a 58 43 56
>3972b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>397328	27 60 00 5c 7a 78 03 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397388	37 38 39 30 2d 3d 08 09
>397390	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397398	6f 70 5b 5d 0d 00 61 73
>3973a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3973a8	27 60 00 5c 7a 78 63 76
>3973b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397418	6f 70 5b 5d 0d 00 61 73
>397420	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397428	27 60 00 5c 7a 78 63 76
>397430	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397488	00 00 00 00 00 00 00 00
>397490	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397498	00 00 00 00 00 00 00 00
>3974a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3974a8	00 00 00 00 00 00 00 00
>3974b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 00 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3974c8	11 00 00 9d 00 1d 00 00
>3974d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500					.align 256
>397500	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397508	34 37 3a 3d 3f 41 44 46
>397510	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397518	57 58 5a 5b 5d 5e 60 61
>397520	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397528	6d 6f 70 71 72 73 75 76
>397530	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397538	80 81 82 83 84 85 86 87
>397540	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397548	8f 90 91 92 93 93 94 95
>397550	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397558	9d 9e 9e 9f a0 a1 a2 a2
>397560	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397568	a9 aa ab ab ac ad ae ae
>397570	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397578	b5 b5 b6 b7 b7 b8 b9 b9
>397580	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397588	bf c0 c0 c1 c2 c2 c3 c4
>397590	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397598	c9 ca ca cb cb cc cd cd
>3975a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3975a8	d2 d3 d4 d4 d5 d5 d6 d6
>3975b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3975b8	db dc dc dd de de df df
>3975c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3975c8	e4 e4 e5 e5 e6 e6 e7 e7
>3975d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3975d8	ec ec ed ed ee ee ef ef
>3975e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3975e8	f4 f4 f5 f5 f6 f6 f7 f7
>3975f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3975f8	fb fc fc fd fd fe fe ff
>397600					.align 256
>397600	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397608	25 27 2a 2c 2e 30 32 34
>397610	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397618	44 46 47 49 4a 4c 4d 4f
>397620	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397628	5b 5c 5d 5e 60 61 62 63
>397630	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397638	6d 6e 70 71 72 73 74 75
>397640	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397648	7e 7f 80 81 82 83 84 84
>397650	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397658	8d 8e 8e 8f 90 91 92 93
>397660	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397668	9a 9b 9c 9d 9e 9f 9f a0
>397670	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397678	a7 a8 a9 aa aa ab ac ad
>397680	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397688	b3 b4 b5 b6 b6 b7 b8 b8
>397690	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397698	bf bf c0 c1 c2 c2 c3 c4
>3976a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3976a8	ca ca cb cc cc cd ce ce
>3976b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3976b8	d4 d5 d6 d6 d7 d7 d8 d9
>3976c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3976c8	de df e0 e0 e1 e1 e2 e3
>3976d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3976d8	e8 e9 e9 ea ea eb ec ec
>3976e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3976e8	f1 f2 f3 f3 f4 f4 f5 f5
>3976f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3976f8	fb fb fc fc fd fd fe ff
>397700					.align 256
>397700	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397708	83 dd ce 39 cd c5 3b 15
>397710	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397718	87 12 31 65 89 27 88 42
>397720	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397728	94 ce 56 ec fe da 58 c9
>397730	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397738	d0 10 2c b2 4b ea 32 61
>397740	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397748	a1 e6 ca 2d b3 ce b0 79
>397750	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397758	5f e3 fb bd 15 2e be f5
>397760	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397768	8d 8f 2c 80 0a 5e 99 36
>397770	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397778	13 52 44 2f e3 ef 44 a2
>397780	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397788	be 23 02 58 0a 52 5e b4
>397790	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397798	d5 cf 3e df c4 9e da bb
>3977a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3977a8	77 7d b1 3b 4a 68 35 6e
>3977b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3977b8	b5 8f 44 63 55 6f e1 50
>3977c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3977c8	57 74 b9 bd 05 14 50 eb
>3977d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3977d8	44 bc ec db 22 58 fc be
>3977e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3977e8	24 aa 82 11 5c 9f 43 4d
>3977f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3977f8	3e 3d 66 7e 0a 1c 6b 74
>397800					.align 16
>397800	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397808	01 01 01 00 00 00 00 00
>397810	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397818	ff ff ff 01 00 00 00 00
>397820	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397828	01 55 ff ff 01 00 00 00
>397830	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397838	ff ff ff ff 01 00 00 00
>397840	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397848	ff ff 01 ff ff 01 00 00
>397850	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397858	01 ff ff 01 ff 01 00 00
>397860	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397868	ff 01 ff ff ff 01 00 00
>397870	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397878	ff ff ff ff ff 01 01 00
>397880	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397888	ff ff ff ff 01 ff ff 01
>397890	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397898	ff ff ff ff ff ff ff 01
>3978a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3978a8	55 55 01 ff ff 55 01 00
>3978b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3978b8	01 01 55 ff 55 01 00 00
>3978c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3978c8	01 55 55 55 01 00 00 00
>3978d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3978d8	01 55 55 01 00 00 00 00
>3978e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3978e8	00 01 01 00 00 00 00 00
>3978f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3978f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c d1 64 3a 5c e3 4a 3a		.binary "binaries/basic816.bin"
>3a0008	5c c6 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 59 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 10 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 60 08 e2 20 48 48 a9 00 22 3c 10 00 68 22
>3a01f8	18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 e2
>3a0208	20 48 48 a9 01 22 3c 10 00 68 22 18 10 00 af 89
>3a0218	0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9
>3a0228	0d 20 18 00 c2 20 68 28 60 08 22 78 10 00 28 60
>3a0238	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b4
>3a0248	1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4 2b 28
>3a0258	60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0268	20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0 07 af
>3a0278	b3 08 00 20 28 00 af b2 08 00 29 80 f0 07 af b3
>3a0288	08 00 20 eb 01 af b2 08 00 29 40 f0 14 af b3 08
>3a0298	00 20 06 02 af b3 08 00 c9 0d d0 05 a9 0a 20 06
>3a02a8	02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20 18
>3a02b8	00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a
>3a02c8	4a 4a 4a 20 d8 02 68 29 ff 00 20 d8 02 68 28 60
>3a02d8	08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 ef 02 68 20
>3a02e8	ef 02 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf
>3a02f8	00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da 5a 8b
>3a0308	0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a 48 ab
>3a0318	bd 00 00 f0 06 20 eb 01 e8 80 f5 c2 30 2b ab 7a
>3a0328	fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9
>3a0338	7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08 e2 20
>3a0348	c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60 08 e2
>3a0358	20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0
>3a0368	0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38 60 08
>3a0378	e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61
>3a0388	b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30 80
>3a0398	f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9
>3a03a8	61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00 00 f0
>3a03b8	09 20 a0 03 9d 00 00 e8 80 f2 28 60 08 0b 08 c2
>3a03c8	20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26 23 a5
>3a03d8	21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18
>3a03e8	a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b 28 60
>3a03f8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21
>3a0408	8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01 00 85
>3a0418	21 64 23 af 16 01 00 85 27 64 29 e2 20 a9 00 85
>3a0428	25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0438	68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f 10 01
>3a0448	00 af 14 01 00 85 21 64 23 af 16 01 00 85 27 64
>3a0458	29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5
>3a0468	21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08
>3a0478	e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9 00
>3a0488	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a0498	00 20 86 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 02
>3a04a8	d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04b8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a04c8	dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23
>3a04d8	d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04e8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a04f8	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0508	09 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a0518	d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0 29 a5
>3a0528	23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9 00 08
>3a0538	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0548	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a0558	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a0568	86 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08
>3a0578	5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00 c9
>3a0588	26 f0 44 e2 20 a7 00 20 45 03 90 76 20 c4 03 38
>3a0598	e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69 00
>3a05a8	00 85 23 20 2b 1b 80 db 08 c2 20 48 a9 00 08 5b
>3a05b8	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a05c8	86 18 e2 20 dc d2 08 20 2b 1b a7 00 c9 48 f0 04
>3a05d8	c9 68 d0 d4 20 2b 1b e2 20 a7 00 20 56 03 90 22
>3a05e8	20 77 03 c2 20 06 21 26 23 06 21 26 23 06 21 26
>3a05f8	23 06 21 26 23 29 ff 00 18 65 21 85 21 20 2b 1b
>3a0608	80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8 e2 20
>3a0618	b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0
>3a0628	ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08
>3a0638	5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85 02 20
>3a0648	4c 1b a7 00 20 45 03 90 0c 20 6f 05 c2 20 a5 21
>3a0658	85 d5 20 4c 1b c2 20 a5 00 85 18 e2 20 a5 02 85
>3a0668	1a 20 7d 06 e2 20 20 ee 06 c9 00 f0 05 20 77 08
>3a0678	80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a 85 02
>3a0688	a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0
>3a0698	53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52
>3a06a8	f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72
>3a06b8	d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8
>3a06c8	b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 2b 1b
>3a06d8	80 b3 a7 00 c9 3a d0 03 20 2b 1b a9 03 85 1c a9
>3a06e8	8e 20 77 08 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a06f8	68 28 e2 20 a9 7f 85 1c c2 10 20 2c 08 a5 1c d0
>3a0708	03 4c 91 07 c2 20 a5 18 85 00 e2 20 a5 1a 85 02
>3a0718	c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e
>3a0728	f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05 20
>3a0738	b3 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00 c5 18
>3a0748	d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04 20 ff
>3a0758	3d b0 09 e2 20 20 c3 07 c9 00 d0 11 c2 20 a5 00
>3a0768	85 04 e2 20 a5 02 85 06 20 2b 1b 80 a9 c9 81 d0
>3a0778	18 20 0d 06 c9 00 f0 14 89 80 10 0b 20 18 09 c9
>3a0788	30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48
>3a0798	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a07a8	29 ff 00 20 86 18 e2 20 dc d2 08 08 e2 20 20 2b
>3a07b8	1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da
>3a07c8	5a 08 c2 20 48 a9 00 08 5b 68 28 a9 42 09 85 08
>3a07d8	e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08
>3a07e8	f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2
>3a07f8	20 a9 3a 85 0e e2 10 a0 00 b7 00 20 a0 03 d7 0c
>3a0808	d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2
>3a0818	30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85
>3a0828	0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a0838	28 c2 30 a9 42 09 85 08 a9 3a 00 85 0a 64 0c e2
>3a0848	20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02
>3a0858	85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00
>3a0868	00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60 08
>3a0878	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2
>3a0888	20 18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a
>3a0898	e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18
>3a08a8	a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5
>3a08b8	2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 42 09
>3a08c8	aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a08d8	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 bb
>3a08e8	08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b
>3a08f8	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a
>3a0908	48 ab 68 28 c2 30 20 bb 08 bd 04 00 2b ab 28 60
>3a0918	08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0928	48 a9 3a 48 ab 68 28 e2 20 c2 10 20 bb 08 bd 00
>3a0938	00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0 59 21
>3a0948	00 00 03 01 12 d0 98 21 00 00 02 01 14 d0 a6 21
>3a0958	00 00 02 01 16 d0 bf 21 00 00 02 03 18 d0 d2 21
>3a0968	00 00 00 01 1c d0 00 00 00 00 04 01 1e d0 14 22
>3a0978	00 00 04 01 20 d0 4a 22 00 00 04 01 22 d0 2f 22
>3a0988	00 00 05 03 24 d0 03 22 00 00 06 03 28 d0 e5 21
>3a0998	00 00 07 02 2c d0 f4 21 00 00 ff 01 2f d0 00 00
>3a09a8	00 00 40 01 31 d0 00 00 00 00 20 03 33 d0 f8 2f
>3a09b8	00 00 20 05 37 d0 fd 33 00 00 20 03 3d d0 48 33
>3a09c8	00 00 20 04 41 d0 e8 32 00 00 20 03 46 d0 df 32
>3a09d8	00 00 20 02 4a d0 77 32 00 00 50 04 4d d0 00 00
>3a09e8	00 00 50 04 52 d0 00 00 00 00 20 05 57 d0 ba 31
>3a09f8	00 00 20 06 5d d0 33 32 00 00 20 03 64 d0 0f 30
>3a0a08	00 00 50 02 68 d0 00 00 00 00 50 04 6b d0 00 00
>3a0a18	00 00 20 04 70 d0 03 31 00 00 20 02 75 d0 09 30
>3a0a28	00 00 20 04 78 d0 0c 30 00 00 50 05 7d d0 00 00
>3a0a38	00 00 50 05 83 d0 00 00 00 00 20 04 89 d0 06 30
>3a0a48	00 00 20 03 8e d0 3e 33 00 00 20 04 92 d0 d9 2f
>3a0a58	00 00 20 04 97 d0 69 2f 00 00 20 05 9c d0 ff 2e
>3a0a68	00 00 20 05 a2 d0 8c 2e 00 00 20 03 a8 d0 88 2e
>3a0a78	00 00 20 04 ac d0 69 2d 00 00 20 04 b1 d0 7b 2e
>3a0a88	00 00 20 07 b6 d0 7f 2e 00 00 20 03 be d0 bc 2c
>3a0a98	00 00 20 04 c2 d0 25 2c 00 00 04 02 c7 d0 9d 22
>3a0aa8	00 00 04 02 ca d0 80 22 00 00 04 02 cd d0 65 22
>3a0ab8	00 00 30 01 d0 d0 97 35 00 00 30 03 d2 d0 b1 39
>3a0ac8	00 00 30 04 d6 d0 01 3a 00 00 30 05 db d0 92 3a
>3a0ad8	00 00 30 05 e1 d0 44 3a 00 00 30 04 e7 d0 d1 3a
>3a0ae8	00 00 30 03 ec d0 26 3b 00 00 30 03 f0 d0 6b 3b
>3a0af8	00 00 30 03 f4 d0 f4 3b 00 00 30 03 f8 d0 7d 3c
>3a0b08	00 00 30 03 fc d0 ad 3c 00 00 30 04 00 d1 20 39
>3a0b18	00 00 30 03 05 d1 bf 38 00 00 30 04 09 d1 6e 38
>3a0b28	00 00 30 03 0e d1 18 38 00 00 30 05 12 d1 4f 37
>3a0b38	00 00 30 06 18 d1 6e 36 00 00 30 04 1f d1 b9 35
>3a0b48	00 00 10 03 24 d1 3b 3d 00 00 10 03 28 d1 06 3d
>3a0b58	00 00 10 04 2c d1 c7 46 00 00 10 04 31 d1 52 3d
>3a0b68	00 00 10 03 36 d1 ee 43 00 00 20 05 3a d1 99 45
>3a0b78	00 00 10 04 40 d1 74 46 00 00 20 05 45 d1 7e 47
>3a0b88	00 00 20 03 4b d1 9d 48 00 00 10 04 4f d1 0a 48
>3a0b98	00 00 20 06 54 d1 13 49 00 00 20 04 5b d1 2e 4a
>3a0ba8	00 00 10 07 60 d1 03 3d 00 00 20 03 68 d1 b1 2b
>3a0bb8	00 00 20 05 6c d1 e3 2a 00 00 20 09 72 d1 1f 24
>3a0bc8	00 00 20 09 7c d1 ba 23 00 00 20 0a 86 d1 e8 23
>3a0bd8	00 00 20 07 91 d1 27 23 00 00 30 08 99 d1 c2 34
>3a0be8	00 00 20 07 a2 d1 bc 22 00 00 30 08 aa d1 2f 35
>3a0bf8	00 00 20 08 b3 d1 30 25 00 00 20 08 bc d1 8c 24
>3a0c08	00 00 20 06 c5 d1 e8 25 00 00 20 09 cc d1 9e 26
>3a0c18	00 00 20 04 d6 d1 31 28 00 00 20 04 db d1 77 28
>3a0c28	00 00 20 04 e0 d1 dd 28 00 00 20 06 e5 d1 83 29
>3a0c38	00 00 20 08 ec d1 10 2a 00 00 20 0a f5 d1 44 2a
>3a0c48	00 00 00 00 00 00 00 00 00 00 08 0b 08 c2 20 48
>3a0c58	a9 00 08 5b 68 28 c2 30 a9 ff ff 85 b8 e2 20 a9
>3a0c68	37 85 ba c2 20 64 b5 64 bb e2 20 64 b7 64 bd 2b
>3a0c78	28 60 5a 08 e2 20 85 e8 c2 10 86 8d c2 20 a5 0e
>3a0c88	48 a5 0c 48 a5 12 48 a5 10 48 20 2a 0d b0 03 20
>3a0c98	ae 0c 20 b6 0e c2 20 68 85 10 68 85 12 68 85 0c
>3a0ca8	68 85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0cb8	68 28 e2 20 a6 8d ca 86 0c e8 c2 30 38 a5 b8 e5
>3a0cc8	0c 85 be e2 20 a5 ba e9 00 85 c0 20 b6 0e e2 20
>3a0cd8	a5 e8 a0 00 00 97 c1 a9 00 a0 01 00 97 c1 a0 02
>3a0ce8	00 97 c1 c2 20 a9 00 00 97 c1 c2 20 18 a5 b8 69
>3a0cf8	01 00 a0 05 00 97 c1 e2 20 c8 c8 a5 ba 69 00 97
>3a0d08	c1 c2 20 a5 be 85 b5 e2 20 a5 c0 85 b7 c2 20 38
>3a0d18	a5 c1 e9 01 00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b
>3a0d28	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0d38	c2 20 a5 bb 85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17
>3a0d48	e2 20 a5 c9 d0 11 c2 20 a9 00 00 85 cd e2 20 a9
>3a0d58	00 85 cf 2b 28 18 60 c2 20 a0 05 00 b7 c7 85 ca
>3a0d68	e2 20 c8 c8 b7 c7 85 cc c2 20 18 a5 c7 65 8d 85
>3a0d78	0c e2 20 a5 c9 69 00 85 0e c2 20 18 a5 0c 69 08
>3a0d88	00 85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5
>3a0d98	ca d0 28 e2 20 a5 0e c5 cc d0 20 c2 20 a5 cd d0
>3a0da8	5d e2 20 a5 cf d0 57 c2 20 a0 02 00 b7 c7 85 bb
>3a0db8	e2 20 c8 c8 b7 c7 85 bd 4c 67 0e c2 20 a5 0c 69
>3a0dc8	08 00 85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c4
>3a0dd8	c5 10 b0 3e 90 08 c2 20 a5 c4 c5 10 b0 34 c2 20
>3a0de8	a5 c7 85 cd e2 20 a5 c9 85 cf c2 20 a0 02 00 b7
>3a0df8	cd 85 c7 e2 20 c8 c8 b7 cd 85 c9 4c 44 0d c2 20
>3a0e08	a0 02 00 b7 c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c
>3a0e18	67 0e c2 20 a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7
>3a0e28	c7 97 0c c2 20 a0 02 00 b7 c7 97 0c e2 20 c8 c8
>3a0e38	b7 c7 97 0c c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e
>3a0e48	c2 20 a5 0c 85 bb e2 20 a5 0e 85 bd 80 11 c2 20
>3a0e58	a0 02 00 a5 0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2
>3a0e68	20 a5 c7 85 c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85
>3a0e78	b5 e2 20 a5 c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1
>3a0e88	e2 20 c8 c8 a5 0e 97 c1 c2 20 a0 02 00 a9 00 00
>3a0e98	97 c1 e2 20 c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00
>3a0ea8	00 97 c1 a0 01 00 a9 00 97 c1 2b 28 38 60 08 c2
>3a0eb8	20 38 a5 be e9 08 00 85 c1 e2 20 a5 c0 e9 00 85
>3a0ec8	c3 28 60 08 e2 20 a5 c3 f0 04 c9 38 b0 12 c2 20
>3a0ed8	a5 c1 f0 0c e2 20 a0 01 00 b7 c1 1a 97 c1 28 60
>3a0ee8	00 ea 08 e2 20 a5 c3 f0 04 c9 38 b0 17 c2 20 a5
>3a0ef8	c1 f0 11 e2 20 a0 01 00 b7 c1 3a 97 c1 d0 03 20
>3a0f08	0e 0f 28 60 00 ea 08 c2 20 a5 bb d0 21 e2 20 a5
>3a0f18	bd d0 1b a5 c3 85 bd c2 20 a5 c1 85 bb a9 00 00
>3a0f28	a0 02 00 97 c1 c8 c8 e2 20 97 c1 4c f5 0f e2 20
>3a0f38	a5 bd c5 c3 90 28 c2 20 a5 bb c5 c1 90 20 c2 20
>3a0f48	a5 bb a0 02 00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2
>3a0f58	20 a5 c1 85 bb e2 20 a5 c3 85 bd 4c f5 0f c2 20
>3a0f68	a5 bb 85 08 e2 20 a5 bd 85 0a e2 20 a0 04 00 b7
>3a0f78	08 c5 c6 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c4
>3a0f88	90 25 c2 20 a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7
>3a0f98	08 97 c1 c2 20 a5 c1 a0 02 00 97 08 e2 20 a5 c3
>3a0fa8	c8 c8 97 08 4c f5 0f c2 20 a0 02 00 b7 08 d0 08
>3a0fb8	e2 20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85
>3a0fc8	0c e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80
>3a0fd8	99 c2 20 a5 c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3
>3a0fe8	97 08 a9 00 97 c1 c2 20 a0 02 00 97 c1 20 fa 0f
>3a0ff8	28 60 08 c2 20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2
>3a1008	20 a5 c1 d0 09 e2 20 a5 c3 d0 03 4c 9d 10 c2 20
>3a1018	a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2
>3a1028	20 a0 05 00 b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12
>3a1038	c2 20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f
>3a1048	c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85
>3a1058	0e c2 20 a5 0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2
>3a1068	20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a1078	c2 20 a0 02 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97
>3a1088	c1 c2 20 a0 05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c
>3a1098	97 c1 4c 16 10 28 60 08 c2 10 e2 20 64 14 a5 e0
>3a10a8	1a 1a 85 15 e2 20 a5 e1 85 16 c5 ba 90 29 f0 08
>3a10b8	c2 20 a5 14 c5 b8 90 1f 08 c2 20 48 a9 00 08 5b
>3a10c8	68 28 e2 20 a9 03 8f d1 08 00 c2 20 29 ff 00 20
>3a10d8	86 18 e2 20 dc d2 08 28 60 c9 00 d0 05 c0 01 00
>3a10e8	f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5 23 10
>3a10f8	1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23 49 ff
>3a1108	ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64 12 a2
>3a1118	1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5 12 65
>3a1128	12 85 12 ca 10 ed d8 e2 20 20 9f 10 a0 00 00 a5
>3a1138	0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03 00 b5
>3a1148	10 29 f0 4a 4a 4a 4a 20 e1 10 b5 10 29 0f 20 e1
>3a1158	10 ca 10 eb c0 01 00 d0 0c a9 20 87 14 a0 01 00
>3a1168	a9 30 97 14 c8 a9 00 97 14 28 60 00 ea 08 e2 20
>3a1178	c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60
>3a1188	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1198	10 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6
>3a11a8	21 20 75 11 84 0c 08 c2 20 48 e2 20 a5 29 48 ab
>3a11b8	c2 20 68 28 a6 27 20 75 11 c2 20 98 38 65 0c aa
>3a11c8	e2 20 a9 02 20 7a 0c c2 20 a5 b5 85 08 e2 20 a5
>3a11d8	b7 85 0a a0 00 00 08 c2 20 48 e2 20 a5 23 48 ab
>3a11e8	c2 20 68 28 a6 21 bd 00 00 f0 06 97 08 e8 c8 80
>3a11f8	f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab c2 20 68
>3a1208	28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20
>3a1218	a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85 25 ab 2b
>3a1228	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1238	30 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6
>3a1248	21 20 75 11 98 aa e8 e2 20 a9 02 20 7a 0c c2 20
>3a1258	a5 be 85 08 e2 20 a5 c0 85 0a a0 00 00 b7 21 97
>3a1268	08 f0 03 c8 80 f7 a5 08 85 21 a5 09 85 22 a5 0a
>3a1278	85 23 a9 00 85 24 ab 2b 28 60 08 e2 20 c2 10 a0
>3a1288	00 00 b7 21 f0 05 c8 80 f9 84 90 c2 30 c4 27 90
>3a1298	13 f0 11 a5 8d 30 0d f0 0b c4 8d b0 12 a5 27 d0
>3a12a8	0e 4c 03 13 20 9f 10 e2 20 a9 00 87 14 80 39 20
>3a12b8	9f 10 c2 30 18 a5 21 65 27 85 21 a5 23 69 00 00
>3a12c8	85 23 a0 00 00 e2 20 a7 21 97 14 f0 1b c2 20 18
>3a12d8	a5 21 69 01 00 85 21 a5 23 69 00 00 85 23 c8 c4
>3a12e8	8d d0 e2 a9 00 00 97 14 c2 20 a5 14 85 21 a5 16
>3a12f8	85 23 e2 20 a9 02 85 25 20 2a 12 28 60 48 5a 0b
>3a1308	08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00
>3a1318	85 00 85 18 a9 36 00 85 02 85 1a ad 8a 0f 30 20
>3a1328	a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57 f0 02 b0
>3a1338	05 20 67 13 80 e5 28 2b 7a 68 60 20 08 1c 80 db
>3a1348	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1
>3a1358	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a1368	c2 30 85 21 64 23 20 f0 10 a5 14 1a 85 21 a5 16
>3a1378	85 23 20 72 34 18 a5 18 69 04 00 85 00 a5 1a 69
>3a1388	00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20 a6 13
>3a1398	90 fb e2 20 a9 0d 20 18 00 20 08 1c 28 60 08 0b
>3a13a8	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a13b8	00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20
>3a13c8	18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69 42 09
>3a13d8	85 08 a9 3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a
>3a13e8	48 ab 68 28 a0 02 00 b7 08 aa 20 ae 02 c2 20 20
>3a13f8	2b 1b ab 2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9
>3a1408	ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21 85 23
>3a1418	85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b 8b 08
>3a1428	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1438	ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00 bd 02
>3a1448	00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20 38 98
>3a1458	e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08 c2 20
>3a1468	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1478	28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9 00 00
>3a1488	9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04
>3a1498	00 bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a14a8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a14b8	e2 20 c2 10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b
>3a14c8	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a14d8	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f
>3a14e8	c8 84 1f b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60
>3a14f8	08 e2 20 a9 01 20 a1 14 28 60 5a 08 8b 08 e2 20
>3a1508	48 a9 00 48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01
>3a1518	d0 08 c2 20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00
>3a1528	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a1538	00 20 86 18 e2 20 dc d2 08 08 0b 8b c2 20 48 08
>3a1548	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1558	ab 68 28 e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 cb
>3a1568	08 85 0c b9 01 00 20 cb 08 c5 0c f0 02 90 08 c2
>3a1578	20 68 ab 2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c
>3a1588	6f 05 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 34
>3a1598	17 20 cb 04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00
>3a15a8	4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 4c 1b e2 20
>3a15b8	a7 00 c9 8d f0 09 c9 2c d0 0a 20 2b 1b 80 cf 20
>3a15c8	2b 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a15d8	a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a15e8	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a15f8	0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a1608	d2 08 08 20 7d 40 90 23 e2 20 a5 e8 29 80 d0 06
>3a1618	20 d3 3e 4c 31 16 e2 20 a9 8c 20 38 1c 20 f8 14
>3a1628	20 8a 15 20 64 43 20 02 15 28 60 08 c2 20 48 a9
>3a1638	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1648	ff 00 20 86 18 e2 20 dc d2 08 08 0b 08 c2 20 48
>3a1658	a9 00 08 5b 68 28 e2 20 c2 10 20 2b 1b a0 00 00
>3a1668	b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9
>3a1678	02 a6 0c e8 20 7a 0c a0 00 00 c4 0c f0 29 a7 00
>3a1688	97 be c8 20 2b 1b 80 f2 08 c2 20 48 a9 00 08 5b
>3a1698	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a16a8	86 18 e2 20 dc d2 08 a9 00 97 be c2 20 a5 be 85
>3a16b8	21 e2 20 a5 c0 85 23 a9 02 85 25 20 2b 1b 2b 28
>3a16c8	60 08 e2 20 a7 00 c2 20 29 ff 00 20 f5 08 85 2d
>3a16d8	20 f8 14 08 e2 20 48 a9 00 48 ab 68 28 20 ed 16
>3a16e8	20 02 15 28 60 20 2b 1b 6c 2d 08 08 0b 8b c2 20
>3a16f8	48 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a2 27 08
>3a1708	20 62 14 a2 21 08 20 62 14 20 ca 14 20 f5 08 85
>3a1718	2d 08 e2 20 48 a9 00 48 ab 68 28 20 31 17 a2 21
>3a1728	08 20 24 14 68 ab 2b 28 60 6c 2d 08 08 08 c2 20
>3a1738	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1748	28 c2 10 da e2 20 a7 00 d0 03 4c f7 17 30 33 c9
>3a1758	20 d0 03 4c f1 17 c9 3a b0 04 c9 30 b0 56 c9 26
>3a1768	f0 52 c9 22 d0 03 4c 0a 18 c9 5b b0 07 c9 41 90
>3a1778	03 4c 16 18 c9 7b b0 07 c9 61 90 03 4c 16 18 4c
>3a1788	f7 17 c9 8c f0 40 c9 8d f0 41 20 18 09 c9 30 d0
>3a1798	0c 20 c9 16 a2 21 08 20 24 14 4c 4c 17 c9 00 d0
>3a17a8	4e a7 00 a6 1f e0 ff 7f f0 05 20 41 15 b0 12 20
>3a17b8	a1 14 80 35 c2 20 20 87 15 a2 21 08 20 24 14 80
>3a17c8	83 20 f3 16 80 dd 20 a1 14 80 1e e2 20 a4 1f c0
>3a17d8	ff 7f f0 46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0
>3a17e8	05 20 f3 16 80 ee 20 ca 14 20 2b 1b 4c 4c 17 a6
>3a17f8	1f e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20 f3 16
>3a1808	80 ed 20 52 16 a2 21 08 20 24 14 4c 4c 17 20 0a
>3a1818	16 a2 21 08 20 24 14 4c 4c 17 a2 21 08 20 62 14
>3a1828	fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28
>3a1838	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85
>3a1848	31 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1858	28 c2 30 92 31 c6 31 c6 31 2b 28 60 08 c2 30 29
>3a1868	ff 00 20 4d 18 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1878	5b 68 28 c2 30 e6 31 e6 31 b2 31 2b 28 60 8b 0b
>3a1888	08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1898	00 48 ab 68 28 c2 20 85 21 a9 00 00 85 23 e2 20
>3a18a8	a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 e0 18 85
>3a18b8	e5 20 1a 40 c2 20 a5 d5 85 21 a5 d7 85 23 e2 20
>3a18c8	a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 e4 18 85
>3a18d8	e5 20 1a 40 28 2b ab 60 45 52 52 00 45 52 4c 00
>3a18e8	e2 20 c2 10 20 21 02 af d1 08 00 0a c2 20 29 ff
>3a18f8	00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be 3a 19 20
>3a1908	ae 02 c2 20 a5 d5 f0 27 a2 68 19 20 ae 02 08 e2
>3a1918	20 48 a9 00 48 ab 68 28 c2 20 af d5 08 00 8f 21
>3a1928	08 00 a9 00 00 8f 23 08 00 20 92 34 20 21 02 4c
>3a1938	0e 21 6c 19 6f 19 75 19 82 19 90 19 9e 19 b1 19
>3a1948	c7 19 d7 19 e6 19 f3 19 04 1a 13 1a 20 1a 2e 1a
>3a1958	3d 1a 4e 1a 67 1a 7b 1a 8f 1a a5 1a b9 1a d4 1a
>3a1968	20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79 6e
>3a1978	74 61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f 66
>3a1988	20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69 73
>3a1998	6d 61 74 63 68 00 56 61 72 69 61 62 6c 65 20 6e
>3a19a8	6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75
>3a19b8	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00 53
>3a19c8	74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00 53
>3a19d8	74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75
>3a19e8	74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65 67
>3a19f8	61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c 65
>3a1a08	20 6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74 20 61
>3a1a18	20 6e 75 6d 62 65 72 00 4d 61 74 68 20 6f 76 65
>3a1a28	72 66 6c 6f 77 00 4d 61 74 68 20 75 6e 64 65 72
>3a1a38	66 6c 6f 77 00 44 69 76 69 73 69 6f 6e 20 62 79
>3a1a48	20 7a 65 72 6f 00 55 6e 61 62 6c 65 20 74 6f 20
>3a1a58	72 65 61 64 20 64 69 72 65 63 74 6f 72 79 00 55
>3a1a68	6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69
>3a1a78	6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76
>3a1a88	65 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f
>3a1a98	20 64 65 6c 65 74 65 20 66 69 6c 65 00 43 6f 75
>3a1aa8	6c 64 20 6e 6f 74 20 66 69 6e 64 20 66 69 6c 65
>3a1ab8	00 43 6f 75 6c 64 20 6e 6f 74 20 75 70 64 61 74
>3a1ac8	65 20 64 69 72 65 63 74 6f 72 79 00 43 6f 75 6c
>3a1ad8	64 20 6e 6f 74 20 63 6f 70 79 20 74 68 65 20 66
>3a1ae8	69 6c 65 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1af8	e2 20 a9 00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9
>3a1b08	00 08 5b 68 28 08 c2 20 a9 e8 18 8f d2 08 00 e2
>3a1b18	20 a9 3a 8f d4 08 00 28 20 3e 33 20 7f 2e 64 2f
>3a1b28	28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1b38	20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85
>3a1b48	02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1b58	e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05
>3a1b68	20 2b 1b 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9
>3a1b78	3a f0 05 20 2b 1b 80 f3 28 60 08 e2 20 64 34 a7
>3a1b88	00 f0 19 c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9
>3a1b98	9b f0 1a c9 9d f0 16 20 2b 1b 80 e3 20 08 1c c2
>3a1ba8	20 a5 d5 f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30
>3a1bb8	30 80 e4 a5 33 30 06 a5 34 f0 02 80 da 20 2b 1b
>3a1bc8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1bd8	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a1be8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1bf8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a1c08	08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18 65 0c 85
>3a1c18	18 a5 1a 69 00 00 85 1a a0 02 00 b7 18 85 d5 18
>3a1c28	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 28 60
>3a1c38	08 e2 20 48 20 4c 1b 68 e2 20 c7 00 d0 08 20 2b
>3a1c48	1b 20 4c 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1c58	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a1c68	e2 20 dc d2 08 08 e2 20 20 4c 1b e2 20 a7 00 f0
>3a1c78	10 c9 3a f0 0c c5 35 f0 05 20 2b 1b 80 ef 28 38
>3a1c88	60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9
>3a1c98	3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08
>3a1ca8	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 04 14 e2
>3a1cb8	20 a9 00 85 da ad 8a 0f 30 4b a7 00 c9 3a d0 03
>3a1cc8	20 2b 1b 20 4c 1b a7 00 d0 03 4c 57 1d 20 2c 03
>3a1cd8	b0 52 a7 00 10 10 20 18 09 85 0c c9 20 d0 03 4c
>3a1ce8	45 1d a5 d0 f0 51 08 c2 20 48 a9 00 08 5b 68 28
>3a1cf8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a1d08	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1d18	20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a1d28	20 dc d2 08 20 48 33 4c 57 1d 08 e2 20 48 a9 00
>3a1d38	48 ab 68 28 6c 2d 08 a5 0c c9 10 d0 a9 a7 00 20
>3a1d48	f5 08 c2 20 85 2d 20 04 14 20 2b 1b 20 32 1d ab
>3a1d58	2b 28 60 08 58 20 ec 1a 20 2b 18 e2 20 9c 8a 0f
>3a1d68	c2 20 a5 18 85 00 a5 1a 85 02 4c 99 1d 08 c2 20
>3a1d78	a0 02 00 b7 18 85 d5 e2 20 a5 da c9 03 f0 12 c2
>3a1d88	20 18 a5 18 69 04 00 85 00 e2 20 a5 1a 69 00 85
>3a1d98	02 c2 20 20 a7 1c e2 20 a5 da c9 03 f0 f3 c9 00
>3a1da8	d0 31 e2 20 20 4c 1b a7 00 f0 28 c9 3a f0 1f 08
>3a1db8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1dc8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 20 2b
>3a1dd8	1b 80 be 28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f
>3a1de8	20 2b 18 c2 30 64 2f a0 02 00 b7 18 f0 29 20 75
>3a1df8	1d e2 20 a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0
>3a1e08	e6 c2 20 a0 00 00 18 a5 18 77 18 85 18 e2 20 a5
>3a1e18	1a 69 00 85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08
>3a1e28	c2 30 c2 20 a9 00 00 85 08 a9 36 00 85 0a c2 20
>3a1e38	a0 02 00 b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0
>3a1e48	00 00 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>3a1e58	0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2
>3a1e68	20 a5 0a 85 1a 28 38 60 28 18 60 08 e2 20 a7 0c
>3a1e78	87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02
>3a1e88	f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e
>3a1e98	69 00 85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20
>3a1ea8	a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87
>3a1eb8	08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2
>3a1ec8	20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85
>3a1ed8	0e c2 20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9
>3a1ee8	00 85 0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08
>3a1ef8	77 08 85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5
>3a1f08	d7 69 04 00 85 00 e2 20 a5 d9 69 00 85 02 a0 00
>3a1f18	00 c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00
>3a1f28	85 d9 20 73 1e 20 3e 33 28 60 08 08 c2 20 48 a9
>3a1f38	00 08 5b 68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69
>3a1f48	04 00 85 08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00
>3a1f58	00 b7 18 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05
>3a1f68	00 85 0c c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5
>3a1f78	d7 65 0c 85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5
>3a1f88	0c 85 d7 c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05
>3a1f98	00 d0 f8 20 3e 33 28 60 0b 08 08 c2 20 48 a9 00
>3a1fa8	08 5b 68 28 c2 30 a9 00 00 85 08 a9 36 00 85 0a
>3a1fb8	a0 02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00
>3a1fc8	18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>3a1fd8	85 08 80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60
>3a1fe8	a9 02 00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00
>3a1ff8	00 e2 20 b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20
>3a2008	a5 08 85 00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c
>3a2018	a5 d9 69 00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9
>3a2028	69 00 00 85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69
>3a2038	00 00 85 0a 20 b2 1e c2 20 a5 10 a0 00 00 97 00
>3a2048	a5 d5 a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5
>3a2058	02 69 00 00 85 02 a0 00 00 e2 20 b7 18 97 00 f0
>3a2068	03 c8 80 f7 20 3e 33 28 60 08 c2 30 85 d5 20 a0
>3a2078	1f c9 00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48
>3a2088	a5 0a 48 20 ef 1e 68 85 0a 68 85 08 a5 18 85 00
>3a2098	a5 1a 85 02 20 4c 1b e2 20 a7 00 f0 0a 20 ee 1f
>3a20a8	80 05 a5 d5 20 32 1f 28 60 8b 08 08 e2 20 48 a9
>3a20b8	3a 48 ab 68 28 a2 00 d2 20 ae 02 28 ab 60 08 e2
>3a20c8	30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>3a20d8	f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a20e8	30 64 d5 a9 00 4f 85 18 a9 00 00 85 1a 20 2f 06
>3a20f8	c2 20 a5 d5 d0 05 20 5b 1d 80 07 20 71 20 28 2b
>3a2108	38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 b1 20 20
>3a2118	08 00 20 0c 00 a9 00 00 20 1c 00 20 db 20 b0 ef
>3a2128	80 ea e2 20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60
>3a2138	c2 20 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a2148	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a2158	08 20 2a 21 c2 20 c9 00 00 f0 27 c9 02 00 d0 03
>3a2168	4c 88 11 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2178	04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2188	d2 08 18 a5 21 65 27 85 21 a5 23 65 29 85 23 60
>3a2198	38 a5 21 e5 27 85 21 a5 23 e5 29 85 23 60 a5 21
>3a21a8	8f 08 01 00 a5 27 8f 0a 01 00 af 0c 01 00 85 21
>3a21b8	af 0e 01 00 85 23 60 a5 21 8f 12 01 00 a5 27 8f
>3a21c8	10 01 00 af 14 01 00 85 21 60 a5 21 8f 12 01 00
>3a21d8	a5 27 8f 10 01 00 af 16 01 00 85 21 60 c2 20 a5
>3a21e8	21 25 27 85 21 a5 23 25 29 85 23 60 c2 20 a5 21
>3a21f8	05 27 85 21 a5 23 05 29 85 23 60 c2 20 a5 21 49
>3a2208	ff ff 85 21 a5 23 49 ff ff 85 23 60 c2 20 a5 23
>3a2218	c5 29 90 0b a5 21 c5 27 90 05 64 21 64 23 60 a9
>3a2228	ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 90 0b a5
>3a2238	27 c5 21 90 05 64 21 64 23 60 a9 ff ff 85 21 85
>3a2248	23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08
>3a2258	a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5
>3a2268	29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21
>3a2278	85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90 10
>3a2288	d0 06 a5 21 c5 27 90 08 a9 ff ff 85 21 85 23 60
>3a2298	64 21 64 23 60 c2 20 a5 23 c5 29 90 0f f0 05 64
>3a22a8	21 64 23 60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85
>3a22b8	21 85 23 60 08 e2 20 20 34 17 20 1a 05 20 f8 03
>3a22c8	a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 38 1c 20 34
>3a22d8	17 20 1a 05 20 f8 03 a5 21 0a 0a 0a 0a 05 27 48
>3a22e8	a9 2c 20 38 1c 20 34 17 20 1a 05 20 f8 03 a5 21
>3a22f8	0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08
>3a2308	af 68 8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af
>3a2318	af 0e 08 af 29 f7 8f 0e 08 af 20 70 1b 28 60 08
>3a2328	e2 20 20 34 17 20 1a 05 20 f8 03 a5 21 0a 0a 0a
>3a2338	0a 05 27 48 a9 2c 20 38 1c 20 34 17 20 1a 05 20
>3a2348	f8 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 38 1c
>3a2358	20 34 17 20 77 04 20 2e 04 c2 20 a5 21 85 90 a5
>3a2368	27 85 21 20 f8 03 e2 20 a5 21 0a 0a 0a 0a 05 27
>3a2378	48 c2 20 a5 90 85 21 20 f8 03 e2 20 a5 21 0a 0a
>3a2388	0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>3a2398	8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f
>3a23a8	06 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 70 1b
>3a23b8	28 60 08 20 34 17 20 1a 05 e2 20 a5 21 29 0f 0a
>3a23c8	0a 0a 0a 8f 53 08 00 a9 2c 20 38 1c 20 34 17 20
>3a23d8	1a 05 a5 21 29 0f 0f 53 08 00 8f 1e 00 00 28 60
>3a23e8	08 e2 20 20 34 17 20 1a 05 a5 21 48 a9 2c 20 38
>3a23f8	1c 20 34 17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20
>3a2408	34 17 20 1a 05 a5 21 8f 0d 00 af 68 8f 0e 00 af
>3a2418	68 8f 0f 00 af 28 60 08 e2 20 20 34 17 20 77 04
>3a2428	a5 21 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af
>3a2438	8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af
>3a2448	22 2c 11 00 a9 2c 85 35 20 6d 1c 90 35 20 2b 1b
>3a2458	20 34 17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20 34
>3a2468	17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20 34 17 20
>3a2478	1a 05 a5 21 8f 05 00 af 68 8f 06 00 af 68 8f 07
>3a2488	00 af 28 60 08 c2 20 20 34 17 20 1a 05 a9 af 00
>3a2498	85 9e a5 21 c9 0a 00 b0 5c 0a aa bf 1c 25 3a 85
>3a24a8	9c a9 2c 00 20 38 1c 20 34 17 20 1a 05 a5 21 0a
>3a24b8	0a 18 65 9c 85 9c a9 2c 00 20 38 1c 20 34 17 20
>3a24c8	1a 05 a0 02 00 a5 21 e2 20 97 9c a9 2c 20 38 1c
>3a24d8	20 34 17 20 1a 05 a0 01 00 a5 21 e2 20 97 9c a9
>3a24e8	2c 20 38 1c 20 34 17 20 1a 05 a0 00 00 a5 21 e2
>3a24f8	20 97 9c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2508	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2518	20 dc d2 08 00 20 00 24 00 28 00 2c 00 30 00 34
>3a2528	00 38 00 3c 40 1f 80 1f da 5a 08 20 34 17 20 77
>3a2538	04 c2 20 a5 21 89 00 01 d0 19 af 00 00 af 89 00
>3a2548	01 d0 10 e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>3a2558	af c2 20 a5 21 8f 00 00 af 4a 4a 4a 4a 4a 4a 4a
>3a2568	29 ff 00 0a aa c2 20 bf b8 25 3a 8f 08 f0 3a bf
>3a2578	c0 25 3a 8f 0a f0 3a af 08 f0 3a 8f 08 01 00 af
>3a2588	0a f0 3a 8f 0a 01 00 af 0c 01 00 8f 0c f0 3a e2
>3a2598	20 af 0e 01 00 8f 0e f0 3a 22 2c 11 00 c2 20 af
>3a25a8	1a 00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60
>3a25b8	80 02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01
>3a25c8	50 00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00
>3a25d8	48 00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00
>3a25e8	08 c2 20 20 34 17 20 1a 05 c2 20 a5 21 85 53 a9
>3a25f8	2c 00 20 38 1c 20 34 17 20 1a 05 e2 20 a5 53 d0
>3a2608	05 a5 21 0a 80 04 a5 21 38 2a 8f 00 01 af c2 20
>3a2618	a9 2c 00 85 35 20 6d 1c b0 18 c2 20 08 c2 20 a9
>3a2628	00 00 85 21 a9 b0 00 85 23 e2 20 a9 00 85 25 28
>3a2638	80 08 c2 20 20 2b 1b 20 34 17 e2 20 38 a5 23 8f
>3a2648	02 f0 3a e9 b0 30 30 8f 03 01 af 8f 06 f0 3a a5
>3a2658	21 8f 00 f0 3a 8f 01 01 af 8f 04 f0 3a a5 22 8f
>3a2668	02 01 af 8f 05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0
>3a2678	3a 8f 03 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2688	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86
>3a2698	18 e2 20 dc d2 08 08 c2 20 af 04 f0 3a 8f 05 04
>3a26a8	af af 0c f0 3a 8f 08 04 af e2 20 af 06 f0 3a 8f
>3a26b8	07 04 af af 0e f0 3a 8f 0a 04 af a9 00 8f 01 04
>3a26c8	af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a26d8	00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af 08
>3a26e8	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c af
>3a26f8	0e 01 00 69 00 00 85 0e 18 a5 0c 6f 00 f0 3a 85
>3a2708	9c a5 0e 6f 02 f0 3a 85 9e e2 20 a5 53 87 9c 28
>3a2718	60 c2 20 a9 01 00 85 db 38 a5 5f e5 57 85 67 10
>3a2728	0b 49 ff ff 1a 85 67 a9 ff ff 85 db a9 01 00 85
>3a2738	dd 38 a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b
>3a2748	a9 ff ff 85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5
>3a2758	6b 49 ff ff 1a 48 0a 68 6a 85 6f 20 dd 26 a5 57
>3a2768	c5 5f d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67
>3a2778	49 ff ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85
>3a2788	6f 18 a5 57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb
>3a2798	18 a5 6f 65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb
>3a27a8	60 08 a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01
>3a27b8	00 af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57
>3a27c8	85 0c e2 20 af 0e 01 00 69 00 85 0e c2 20 18 af
>3a27d8	04 f0 3a 65 0c 8f 05 04 af e2 20 af 06 f0 3a 65
>3a27e8	0e 8f 07 04 af c2 20 38 a5 5f e5 57 85 0c 8f 08
>3a27f8	04 af 38 af 08 f0 3a 8f 0e 04 af 38 a5 63 e5 5b
>3a2808	8f 0a 04 af a9 01 00 8f 0c 04 af e2 20 af 53 08
>3a2818	00 8f 01 04 af a9 87 8f 00 04 af af 01 04 af 30
>3a2828	fa a9 00 8f 00 04 af 28 60 08 08 c2 20 48 a9 00
>3a2838	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a2848	20 34 17 20 77 04 a5 21 85 53 a9 2c 00 20 38 1c
>3a2858	20 34 17 20 77 04 a5 21 85 57 a9 2c 00 20 38 1c
>3a2868	20 34 17 20 1a 05 a5 21 85 5b 20 dd 26 28 60 08
>3a2878	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a2888	48 ab 68 28 c2 30 20 34 17 20 77 04 a5 21 85 57
>3a2898	a9 2c 00 20 38 1c 20 34 17 20 77 04 a5 21 85 5b
>3a28a8	a9 2c 00 20 38 1c 20 34 17 20 77 04 a5 21 85 5f
>3a28b8	a9 2c 00 20 38 1c 20 34 17 20 77 04 a5 21 85 63
>3a28c8	a9 2c 00 20 38 1c 20 34 17 20 1a 05 a5 21 85 53
>3a28d8	20 19 27 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a28e8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 34 17 20
>3a28f8	77 04 a5 21 85 57 a9 2c 00 20 38 1c 20 34 17 20
>3a2908	77 04 a5 21 85 5b a9 2c 00 20 38 1c 20 34 17 20
>3a2918	77 04 a5 21 85 5f a9 2c 00 20 38 1c 20 34 17 20
>3a2928	77 04 a5 21 85 63 a9 2c 00 20 38 1c 20 34 17 20
>3a2938	1a 05 a5 21 85 53 20 a9 27 28 60 08 e2 20 a5 21
>3a2948	c9 40 b0 18 0a 0a 0a 18 69 00 85 9c a9 08 69 00
>3a2958	85 9d a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48
>3a2968	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a2978	29 ff 00 20 86 18 e2 20 dc d2 08 08 e2 20 20 34
>3a2988	17 20 1a 05 20 43 29 a5 21 8f 0e f0 3a a9 2c 20
>3a2998	38 1c 20 34 17 20 1a 05 a5 21 c9 08 b0 4b 48 a9
>3a29a8	2c 20 38 1c 20 34 17 20 77 04 c2 20 38 a5 21 e9
>3a29b8	00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5
>3a29c8	21 a0 01 00 97 9c e2 20 a5 23 c8 c8 97 9c af 0e
>3a29d8	f0 3a aa bf 10 f0 3a 29 f1 85 0c 68 0a 29 0e 05
>3a29e8	0c 87 9c 9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08
>3a29f8	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2a08	20 86 18 e2 20 dc d2 08 08 c2 20 20 34 17 20 1a
>3a2a18	05 20 43 29 a9 2c 00 20 38 1c 20 34 17 20 77 04
>3a2a28	a5 21 a0 04 00 97 9c a9 2c 00 20 38 1c 20 34 17
>3a2a38	20 77 04 a5 21 a0 06 00 97 9c 28 60 08 c2 20 20
>3a2a48	34 17 20 1a 05 20 43 29 a5 21 8f 0e f0 3a a9 2c
>3a2a58	00 20 38 1c 20 34 17 20 77 04 a5 21 48 a9 2c 00
>3a2a68	85 35 20 6d 1c b0 1e af 0e f0 3a aa bf 10 f0 3a
>3a2a78	29 fe 00 85 0c 68 29 01 00 05 0c 9f 10 f0 3a e2
>3a2a88	20 87 9c 80 35 c2 20 20 2b 1b 20 34 17 20 1a 05
>3a2a98	a5 21 c9 08 00 b0 25 0a 0a 0a 0a 85 0c 68 29 01
>3a2aa8	00 05 0c 85 0c af 0e f0 3a aa e2 20 bf 10 f0 3a
>3a2ab8	29 8e 05 0c 87 9c 9f 10 f0 3a 28 60 08 c2 20 48
>3a2ac8	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a2ad8	29 ff 00 20 86 18 e2 20 dc d2 08 08 20 4c 1b e2
>3a2ae8	20 a7 00 d0 03 4c 8b 2b c9 3a d0 03 4c 8b 2b c9
>3a2af8	22 d0 0b 20 52 16 20 72 34 a9 3b 20 38 1c 20 2c
>3a2b08	03 90 41 20 7d 40 90 3c a9 3f 20 18 00 a9 20 20
>3a2b18	18 00 20 10 00 e2 20 a5 e8 c9 02 f0 46 c9 00 f0
>3a2b28	65 c9 01 f0 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2b38	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2b48	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2b58	a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a2b68	dc d2 08 c2 20 a9 00 4c 85 21 a9 00 00 85 23 e2
>3a2b78	20 a9 02 85 25 20 2a 12 c2 20 20 1a 40 a9 0d 00
>3a2b88	20 18 00 28 60 ea c2 20 a5 00 85 3e a5 02 85 40
>3a2b98	a9 00 4c 85 00 a9 00 00 85 02 20 6f 05 c2 20 a5
>3a2ba8	3e 85 00 a5 40 85 02 80 cf 08 20 4c 1b e2 20 a7
>3a2bb8	00 f0 49 c9 3a f0 45 20 2c 03 90 42 20 7d 40 90
>3a2bc8	3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e 00
>3a2bd8	c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2 20 a9 02
>3a2be8	85 25 20 2a 12 20 1a 40 20 4c 1b a7 00 f0 0d c9
>3a2bf8	3a f0 09 c9 2c d0 07 20 2b 1b 80 ae 28 60 08 c2
>3a2c08	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2c18	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 20 34
>3a2c28	17 20 77 04 e2 20 a9 5c 85 a0 c2 20 a5 21 85 a1
>3a2c38	e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 6d 1c 90
>3a2c48	41 20 2b 1b 20 34 17 20 cb 04 c2 20 a5 21 85 53
>3a2c58	e2 20 a9 2c 85 35 20 6d 1c 90 27 20 2b 1b 20 34
>3a2c68	17 20 cb 04 c2 20 a5 21 85 57 e2 20 a9 2c 85 35
>3a2c78	20 6d 1c 90 0d 20 2b 1b 20 34 17 20 cb 04 c2 20
>3a2c88	a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28 ab 2b
>3a2c98	20 70 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2ca8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2cb8	20 dc d2 08 08 e2 20 20 4c 1b 20 7d 40 90 64 a9
>3a2cc8	8c 20 38 1c a9 01 20 a1 14 a2 01 00 a9 00 8f 00
>3a2cd8	4d 00 20 34 17 20 cb 04 c2 20 a5 21 9f 00 4d 00
>3a2ce8	e2 20 af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20
>3a2cf8	4c 1b a7 00 c9 2c f0 25 c9 8d d0 27 20 2b 1b 20
>3a2d08	2b 41 c2 20 a5 be 85 21 e2 20 a5 c0 85 23 64 24
>3a2d18	a5 e8 09 80 85 e8 85 25 20 1a 40 28 60 20 2b 1b
>3a2d28	4c da 2c 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2d38	02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2d48	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a2d58	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a2d68	08 08 20 4c 1b e2 20 a7 00 f0 28 c9 3a f0 24 20
>3a2d78	2c 03 90 21 20 7d 40 90 1c 20 bc 2d 20 1a 40 20
>3a2d88	4c 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 2b
>3a2d98	1b 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2da8	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2db8	20 dc d2 08 08 a5 02 85 40 a5 00 85 3e a5 1a 85
>3a2dc8	44 a5 18 85 42 c2 20 a5 38 d0 04 a5 36 f0 4e a5
>3a2dd8	36 85 00 a5 38 85 02 a5 3a 85 18 a5 3c 85 1a e2
>3a2de8	20 a7 00 f0 53 c9 3a f0 4f c9 2c d0 03 20 2b 1b
>3a2df8	20 4c 1b a7 00 c9 22 f0 4e 20 45 03 b0 4e 08 c2
>3a2e08	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2e18	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 c2 20 a9
>3a2e28	00 00 85 18 a9 36 00 85 1a 18 a5 18 69 04 00 85
>3a2e38	00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33 a9 a8
>3a2e48	85 35 20 82 1b 80 a9 20 52 16 80 03 20 87 15 c2
>3a2e58	20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5 1a 85
>3a2e68	3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5 40 85
>3a2e78	02 28 60 20 70 1b 60 64 36 64 38 64 3a 64 3c 60
>3a2e88	20 24 00 60 20 34 17 c2 20 a5 23 48 a5 21 48 e2
>3a2e98	20 a7 00 c9 2c d0 22 20 2b 1b 20 34 17 c2 20 a5
>3a2ea8	24 d0 35 68 85 08 68 85 0a c2 20 a5 21 87 08 e2
>3a2eb8	20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9 00 08
>3a2ec8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a2ed8	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a2ee8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a2ef8	86 18 e2 20 dc d2 08 20 34 17 c2 20 a5 23 48 a5
>3a2f08	21 48 e2 20 a7 00 c9 2c d0 19 20 2b 1b 20 34 17
>3a2f18	c2 20 a5 23 d0 2c 68 85 08 68 85 0a c2 20 a5 21
>3a2f28	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f38	02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2f48	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2f58	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a2f68	08 20 34 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00
>3a2f78	c9 2c d0 1f 20 2b 1b 20 34 17 e2 20 a5 22 d0 32
>3a2f88	c2 20 a5 23 d0 2c 68 85 08 68 85 0a e2 20 a5 21
>3a2f98	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2fa8	02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2fb8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2fc8	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a2fd8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a2fe8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a2ff8	08 e2 20 a7 00 f0 05 20 2b 1b 80 f7 28 60 08 28
>3a3008	60 08 28 60 08 28 60 08 c2 20 a5 1a 20 4d 18 a5
>3a3018	18 20 4d 18 a5 02 48 a5 00 48 20 70 1b a5 02 20
>3a3028	4d 18 a5 00 20 4d 18 68 85 00 68 85 02 20 4c 1b
>3a3038	20 7d 40 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3048	20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a3058	20 dc d2 08 e2 20 a5 e8 20 64 18 a5 e7 20 64 18
>3a3068	c2 20 a5 e5 20 4d 18 20 4c 1b e2 20 a7 00 c9 87
>3a3078	d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 2b 1b 20
>3a3088	34 17 20 1a 40 e2 20 a9 99 20 38 1c 20 34 17 c2
>3a3098	20 a5 25 20 4d 18 a5 23 20 4d 18 a5 21 20 4d 18
>3a30a8	e2 20 a9 9a 85 35 20 6d 1c 90 1b 20 2b 1b 20 34
>3a30b8	17 e2 20 a5 25 20 4d 18 c2 20 a5 23 20 4d 18 a5
>3a30c8	21 20 4d 18 80 14 c2 20 a9 00 00 20 4d 18 a9 00
>3a30d8	00 20 4d 18 a9 01 00 20 4d 18 28 60 08 c2 20 48
>3a30e8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a30f8	29 ff 00 20 86 18 e2 20 dc d2 08 08 8b 08 e2 20
>3a3108	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a3118	28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5 b9 0e
>3a3128	00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20 d3 3e
>3a3138	7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2 20 b9
>3a3148	04 00 85 2b c2 20 5a 20 59 21 20 1a 40 7a c2 20
>3a3158	b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a 00 85
>3a3168	2b c2 20 b9 02 00 30 0a 20 9d 22 20 64 04 f0 28
>3a3178	80 08 20 80 22 20 64 04 f0 1e c2 20 b9 12 00 85
>3a3188	00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00 85 1a
>3a3198	e2 20 a9 03 85 da 80 17 a2 21 08 20 62 14 c2 20
>3a31a8	18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85 33 ab
>3a31b8	28 60 08 a5 18 48 a5 1a 48 20 4c 1b 20 6f 05 a5
>3a31c8	21 f0 26 20 27 1e 90 42 e2 20 a9 02 85 da 20 70
>3a31d8	1b c2 20 68 20 4d 18 68 20 4d 18 a5 02 20 4d 18
>3a31e8	a5 00 20 4d 18 e6 2f 28 60 68 68 08 c2 20 48 a9
>3a31f8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3208	ff 00 20 86 18 e2 20 dc d2 08 68 68 08 c2 20 48
>3a3218	a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20
>3a3228	29 ff 00 20 86 18 e2 20 dc d2 08 08 c2 30 a5 2f
>3a3238	f0 1e 20 6f 18 85 00 20 6f 18 85 02 20 6f 18 85
>3a3248	18 20 6f 18 85 1a c6 2f e2 20 a9 03 85 da 28 60
>3a3258	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d1
>3a3268	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a3278	20 34 17 20 64 04 f0 1c e2 20 a9 94 20 38 1c 20
>3a3288	6f 05 20 64 04 f0 12 20 27 1e 90 2c e2 20 a9 02
>3a3298	85 da 80 03 20 70 1b 28 60 08 c2 20 48 a9 00 08
>3a32a8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a32b8	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a32c8	68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20
>3a32d8	86 18 e2 20 dc d2 08 08 e2 20 a9 01 85 da 28 60
>3a32e8	08 20 4c 1b 20 6f 05 a5 21 f0 0d 20 27 1e 90 27
>3a32f8	e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a3308	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3318	86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3328	28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20 86
>3a3338	18 e2 20 dc d2 08 20 04 14 20 52 0c 20 d2 3d 60
>3a3348	08 a7 00 10 03 20 2b 1b 20 7d 40 b0 03 4c bf 33
>3a3358	e2 20 20 8c 1c c9 8c d0 0e a9 8c 20 38 1c a9 00
>3a3368	8f 00 4d 00 20 8a 15 20 4c 1b e2 20 a7 00 c9 87
>3a3378	f0 03 4c bf 33 20 2b 1b a5 e8 48 a5 e7 48 a5 e6
>3a3388	48 a5 e5 48 20 34 17 68 85 e5 68 85 e6 68 85 e7
>3a3398	68 85 e8 29 80 f0 1b 20 45 3e 90 3a c2 20 a0 09
>3a33a8	00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20 0c 43
>3a33b8	80 03 20 1a 40 28 60 08 c2 20 48 a9 00 08 5b 68
>3a33c8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86
>3a33d8	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a33e8	e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a33f8	e2 20 dc d2 08 08 e2 20 20 8c 1c c9 00 f0 66 20
>3a3408	34 17 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05 20 72
>3a3418	34 80 0b c9 00 d0 05 20 92 34 80 02 80 4a 20 4c
>3a3428	1b a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0
>3a3438	24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3448	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a3458	a9 09 20 18 00 20 2b 1b 20 4c 1b a7 00 f0 09 c9
>3a3468	3a f0 05 80 9a 20 21 02 28 60 08 8b 08 c2 20 48
>3a3478	a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7 21 f0
>3a3488	06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 f0 10
>3a3498	a5 14 85 21 a5 16 85 23 20 72 34 28 60 08 e2 20
>3a34a8	85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8 a5 b3
>3a34b8	29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c 20 38
>3a34c8	1c 08 20 34 17 e2 20 c2 10 af 0e 08 af 09 08 8f
>3a34d8	0e 08 af 20 9f 10 a0 00 00 af 06 08 af 20 a5 34
>3a34e8	a9 2f 97 14 c8 af 09 08 af 20 a5 34 a9 2f 97 14
>3a34f8	c8 af 0f 08 af 20 a5 34 af 0a 08 af 20 a5 34 a9
>3a3508	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a3518	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 2a 12
>3a3528	28 e2 20 20 2b 1b 60 e2 20 a9 8c 20 38 1c 08 20
>3a3538	34 17 e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af
>3a3548	20 9f 10 a0 00 00 af 04 08 af 29 7f 20 a5 34 a9
>3a3558	3a 97 14 c8 af 02 08 af 20 a5 34 a9 3a 97 14 c8
>3a3568	af 00 08 af 20 a5 34 a9 00 97 14 af 0e 08 af 29
>3a3578	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3588	20 a9 02 85 25 20 2a 12 28 e2 20 20 2b 1b 60 08
>3a3598	c2 20 20 34 17 20 77 04 c2 20 a5 21 49 ff ff 85
>3a35a8	21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23 00 28
>3a35b8	60 e2 20 a9 8c 20 38 1c 08 c2 30 20 34 17 20 a1
>3a35c8	04 c2 20 a5 23 48 a5 21 48 20 4c 1b e2 20 a7 00
>3a35d8	c9 2c f0 03 4c 30 36 20 2b 1b 20 34 17 20 cb 04
>3a35e8	c2 20 a5 21 48 20 4c 1b e2 20 a7 00 c9 2c f0 03
>3a35f8	4c 30 36 20 2b 1b 20 34 17 20 cb 04 c2 20 a5 21
>3a3608	85 8d e2 20 a5 23 85 8f c2 20 68 85 27 a9 00 00
>3a3618	85 29 68 85 21 68 85 23 e2 20 a9 02 85 25 20 82
>3a3628	12 e2 20 20 2b 1b 28 60 08 c2 20 48 a9 00 08 5b
>3a3638	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3648	86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3658	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 86
>3a3668	18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 08 c2 30
>3a3678	20 34 17 e2 20 a5 25 c9 02 f0 03 4c f2 36 c2 20
>3a3688	a5 23 48 a5 21 48 20 4c 1b e2 20 a7 00 c9 2c f0
>3a3698	03 4c 11 37 20 2b 1b 20 34 17 e2 20 a5 25 c9 00
>3a36a8	d0 48 c2 20 a5 21 85 8d c2 20 68 85 21 68 85 23
>3a36b8	e2 20 a9 02 85 25 e2 20 a0 00 00 b7 21 f0 03 c8
>3a36c8	80 f9 c2 20 98 38 e5 8d 30 09 85 27 a9 00 00 85
>3a36d8	29 80 07 a9 00 00 85 27 85 29 e2 20 a9 00 85 2b
>3a36e8	20 82 12 e2 20 20 2b 1b 28 60 08 c2 20 48 a9 00
>3a36f8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a3708	00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3718	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3728	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3738	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3748	86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 08 c2
>3a3758	30 20 34 17 e2 20 a5 25 c9 02 f0 03 4c bb 37 c2
>3a3768	20 a5 23 48 a5 21 48 20 4c 1b e2 20 a7 00 c9 2c
>3a3778	f0 03 4c da 37 20 2b 1b 20 34 17 e2 20 a5 25 c9
>3a3788	00 d0 30 c2 20 a5 21 85 8d c2 20 a9 00 00 85 27
>3a3798	a9 00 00 85 29 e2 20 a9 00 85 2b c2 20 68 85 21
>3a37a8	68 85 23 e2 20 a9 02 85 25 20 82 12 e2 20 20 2b
>3a37b8	1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a37c8	04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a37d8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a37e8	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a37f8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3808	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a3818	e2 20 a9 8c 20 38 1c 20 34 17 c2 10 e2 20 a5 25
>3a3828	c9 02 d0 23 c2 20 a5 00 85 3e a5 02 85 40 a5 21
>3a3838	85 00 a5 23 85 02 20 6f 05 a5 3e 85 00 a5 40 85
>3a3848	02 e2 20 20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a3858	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86
>3a3868	18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 08 20 34
>3a3878	17 c2 10 e2 20 a5 25 c9 00 d0 1d 20 f0 10 c2 20
>3a3888	a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 2a
>3a3898	12 28 e2 20 20 2b 1b 60 08 c2 20 48 a9 00 08 5b
>3a38a8	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a38b8	86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 08 20
>3a38c8	34 17 20 a1 04 c2 20 64 0c 64 0e e2 30 a0 00 b7
>3a38d8	21 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7 21 20 56
>3a38e8	03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26
>3a38f8	0e 06 0c 26 0e e2 20 20 77 03 05 0c 85 0c c8 80
>3a3908	db c2 20 a5 0c 85 21 a5 0e 85 23 e2 20 a9 00 85
>3a3918	25 28 e2 20 20 2b 1b 60 e2 20 a9 8c 20 38 1c 08
>3a3928	20 34 17 20 77 04 20 9f 10 e2 30 a0 ff a9 00 97
>3a3938	14 88 a5 21 29 0f aa bf 00 d0 3a 97 14 88 a5 21
>3a3948	29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 14 88 a5 22
>3a3958	85 21 a5 23 85 22 a5 24 85 23 a9 00 85 24 a5 21
>3a3968	d0 d0 a5 22 d0 cc a5 23 d0 c8 98 38 65 14 85 21
>3a3978	a5 15 85 22 a5 16 85 23 a5 17 85 24 a9 02 85 25
>3a3988	20 2a 12 28 e2 20 20 2b 1b 60 08 c2 20 48 a9 00
>3a3998	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a39a8	00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c
>3a39b8	20 34 17 e2 20 a5 25 c9 02 d0 1f 8b a5 23 48 ab
>3a39c8	c2 10 a6 21 20 75 11 ab 84 21 c2 20 64 23 e2 20
>3a39d8	a9 00 85 25 e2 20 20 2b 1b 60 08 c2 20 48 a9 00
>3a39e8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a39f8	00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c
>3a3a08	20 34 17 e2 20 a5 25 c9 00 d0 12 e2 20 a7 21 85
>3a3a18	21 64 22 64 23 64 2e e2 20 20 2b 1b 60 08 c2 20
>3a3a28	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3a38	20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c
>3a3a48	20 38 1c 20 34 17 e2 20 a5 25 c9 00 d0 1d c2 20
>3a3a58	a7 21 85 0c e2 20 a0 02 00 b7 21 85 23 64 24 c2
>3a3a68	20 a5 0c 85 21 e2 20 20 2b 1b 60 08 c2 20 48 a9
>3a3a78	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3a88	ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38
>3a3a98	1c 20 34 17 e2 20 a5 25 c9 00 d0 0e c2 20 a7 21
>3a3aa8	85 21 64 23 e2 20 20 2b 1b 60 08 c2 20 48 a9 00
>3a3ab8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a3ac8	00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c
>3a3ad8	20 34 17 e2 20 a5 25 c9 00 d0 24 20 9f 10 a5 21
>3a3ae8	87 14 a9 00 a0 01 00 97 14 c2 20 a5 14 85 21 a5
>3a3af8	16 85 23 e2 20 a9 02 85 25 e2 20 20 2b 1b 60 08
>3a3b08	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3b18	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20
>3a3b28	a9 8c 20 38 1c 20 34 17 e2 20 a5 25 c9 02 d0 14
>3a3b38	a7 21 85 21 64 22 64 23 64 24 a9 00 85 25 e2 20
>3a3b48	20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3b58	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a3b68	dc d2 08 e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5
>3a3b78	25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e a5
>3a3b88	22 d0 4a c2 10 20 9f 10 a4 21 e2 20 a9 00 97 14
>3a3b98	88 30 07 a9 20 97 14 88 10 fb a9 02 85 25 c2 20
>3a3ba8	a5 14 85 21 a5 16 85 23 e2 20 20 2b 1b 60 08 c2
>3a3bb8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3bc8	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 c2 20
>3a3bd8	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a3be8	20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c
>3a3bf8	20 38 1c 20 34 17 e2 20 a5 25 c9 00 d0 39 e2 20
>3a3c08	a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 9f
>3a3c18	10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09 97 14
>3a3c28	88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85
>3a3c38	23 e2 20 20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a3c48	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86
>3a3c58	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3c68	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a3c78	e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 20 34 17 20
>3a3c88	77 04 c2 20 a5 23 10 17 49 ff ff 85 23 a5 21 49
>3a3c98	ff ff 18 69 01 00 85 21 a5 23 69 00 00 85 23 e2
>3a3ca8	20 20 2b 1b 60 e2 20 a9 8c 20 38 1c 20 34 17 e2
>3a3cb8	20 a5 25 c9 00 d0 25 c2 20 a5 23 30 12 d0 04 a5
>3a3cc8	21 f0 13 a9 00 00 85 23 a9 01 00 85 21 80 07 a9
>3a3cd8	ff ff 85 23 85 21 e2 20 20 2b 1b 60 08 c2 20 48
>3a3ce8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3cf8	29 ff 00 20 86 18 e2 20 dc d2 08 00 ea 60 08 0b
>3a3d08	08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00
>3a3d18	00 85 d7 e2 20 a9 36 85 d9 c2 30 a9 00 00 a0 00
>3a3d28	00 97 d7 a0 02 00 97 d7 a0 04 00 97 d7 20 01 1b
>3a3d38	2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 36 00 85
>3a3d48	1a 20 01 1b 20 dd 1d 28 ab 60 08 c2 20 64 53 a9
>3a3d58	ff 7f 85 57 20 21 02 20 8c 1c 29 ff 00 c9 00 00
>3a3d68	f0 2c c9 81 00 f0 1a 20 4c 1b 20 6f 05 a5 21 85
>3a3d78	53 20 8c 1c 29 ff 00 c9 00 00 f0 12 c9 81 00 d0
>3a3d88	2a 20 38 1c 20 4c 1b 20 6f 05 a5 21 85 57 a5 1a
>3a3d98	48 a5 18 48 a5 02 48 a5 00 48 20 05 13 68 85 00
>3a3da8	68 85 02 68 85 18 68 85 1a 28 60 08 c2 20 48 a9
>3a3db8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3dc8	ff 00 20 86 18 e2 20 dc d2 08 08 08 c2 20 48 a9
>3a3dd8	00 08 5b 68 28 c2 20 64 e2 64 e5 e2 20 64 e4 64
>3a3de8	e7 64 e8 c2 20 38 a5 d7 69 04 00 85 df e2 20 a5
>3a3df8	d9 69 00 85 e1 28 60 c9 5f f0 1a c9 3a b0 04 c9
>3a3e08	30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9
>3a3e18	61 b0 02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7
>3a3e28	0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0 f2 b7 e5 20
>3a3e38	a0 03 20 ff 3d b0 03 28 38 60 28 18 60 08 e2 20
>3a3e48	c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b 20 a0 03 9f
>3a3e58	00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9
>3a3e68	00 4e 85 e5 e2 20 a9 00 85 e7 c2 20 a5 e2 85 08
>3a3e78	d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4 85 0a a5 e8
>3a3e88	a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85
>3a3e98	0c e2 20 a5 0a 69 00 85 0e 20 1f 3e b0 2a a0 0d
>3a3ea8	00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0
>3a3eb8	06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5
>3a3ec8	0e 85 0a 80 b9 28 18 60 28 38 60 08 20 45 3e b0
>3a3ed8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a3ee8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a3ef8	c2 30 a0 09 00 b7 08 85 21 c8 c8 b7 08 85 23 e2
>3a3f08	20 a0 00 00 b7 08 85 25 28 60 08 c2 20 18 a5 df
>3a3f18	69 10 00 85 08 e2 20 a5 e1 69 00 85 0a c5 ba 90
>3a3f28	27 c2 20 a5 08 c5 b8 90 1f 08 c2 20 48 a9 00 08
>3a3f38	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a3f48	20 86 18 e2 20 dc d2 08 c2 20 a5 df 85 be e2 20
>3a3f58	a5 e1 85 c0 c2 20 a5 08 85 df e2 20 a5 0a 85 e1
>3a3f68	28 60 08 e2 20 a5 25 c5 e8 f0 1f 08 c2 20 48 a9
>3a3f78	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3f88	ff 00 20 86 18 e2 20 dc d2 08 c2 10 20 12 3f c2
>3a3f98	30 18 a5 be 69 01 00 85 08 e2 20 a5 c0 69 00 85
>3a3fa8	0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00
>3a3fb8	00 b7 e5 f0 10 20 a0 03 20 ff 3d 90 08 97 08 c8
>3a3fc8	c0 08 00 d0 ec c2 20 a0 09 00 a5 21 97 be a5 23
>3a3fd8	c8 c8 97 be a5 e2 a0 0d 00 97 be c8 c8 e2 20 a5
>3a3fe8	e4 97 be c2 20 a5 be 85 e2 e2 20 a5 c0 85 e4 e2
>3a3ff8	20 a0 00 00 a5 25 97 be c9 02 f0 02 28 60 c2 20
>3a4008	a5 21 85 be e2 20 a5 23 85 c0 20 b6 0e 20 cb 0e
>3a4018	80 ea 08 c2 30 a5 e2 d0 06 e2 20 a5 e4 f0 05 20
>3a4028	45 3e b0 05 20 6a 3f 80 17 e2 20 a5 25 c9 02 f0
>3a4038	11 c2 30 a0 09 00 a5 21 97 08 c8 c8 a5 23 97 08
>3a4048	28 60 a0 09 00 b7 08 85 be c8 c8 e2 20 b7 08 85
>3a4058	c0 20 b6 0e 20 ea 0e e2 20 a5 25 c9 02 f0 02 80
>3a4068	d0 c2 20 a5 21 85 be e2 20 a5 23 85 c0 20 b6 0e
>3a4078	20 cb 0e 80 bc 08 20 4c 1b e2 20 a7 00 20 2c 03
>3a4088	90 42 c2 20 a5 00 85 e5 e2 20 a5 02 85 e7 20 2b
>3a4098	1b a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20 ff 3d
>3a40a8	b0 ec a9 00 80 0c 20 2b 1b a9 00 80 05 20 2b 1b
>3a40b8	a9 02 85 e8 20 8c 1c c9 8c d0 06 a5 e8 09 80 85
>3a40c8	e8 28 38 60 28 18 60 08 c2 20 48 a9 00 08 5b 68
>3a40d8	28 c2 20 a5 21 85 0c a5 23 64 0e 64 21 64 23 e2
>3a40e8	20 64 26 a9 01 85 25 c2 20 a5 0c f0 35 10 0e e2
>3a40f8	20 a9 80 85 26 c2 20 49 ff ff 1a 85 0c e2 20 e6
>3a4108	24 c2 20 46 0e 66 0c e2 20 66 23 66 22 66 21 c2
>3a4118	20 a5 0c c9 01 00 d0 e5 e2 20 06 26 66 23 66 22
>3a4128	66 21 60 08 20 b6 0e c2 20 a9 01 00 85 21 a9 00
>3a4138	00 85 23 e2 20 af 00 4d 00 c2 20 29 ff 00 85 8d
>3a4148	a8 a2 01 00 c2 20 bf 00 4d 00 85 27 a9 00 00 85
>3a4158	29 20 a6 21 e8 e8 88 d0 eb c2 20 a9 04 00 85 27
>3a4168	a9 00 00 85 29 20 a6 21 e2 20 af 00 4d 00 85 0c
>3a4178	a9 00 85 0d c2 20 06 0c 38 a5 21 65 0c 85 21 a5
>3a4188	23 69 00 00 85 23 d0 29 e2 20 a5 e8 09 80 a6 21
>3a4198	20 7a 0c e2 20 af 00 4d 00 87 be a0 01 00 a2 00
>3a41a8	00 e2 20 bf 01 4d 00 97 be e4 8d f0 23 e8 c8 80
>3a41b8	f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a41c8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a41d8	e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85 09 a5
>3a41e8	c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1 85 0c
>3a41f8	e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00 87 08
>3a4208	c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a4218	0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a4228	64 08 64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01
>3a4238	00 e2 20 a7 be c5 8d f0 1f 08 c2 20 48 a9 00 08
>3a4248	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a4258	20 86 18 e2 20 dc d2 08 c9 01 f0 3a a0 01 00 e2
>3a4268	20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7 be 85
>3a4278	27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20 a6 21
>3a4288	c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85 0a e8
>3a4298	e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85 8e 65
>3a42a8	08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>3a42b8	85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5
>3a42c8	08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a42d8	00 00 85 0a 18 a5 08 65 be 85 08 e2 20 a5 0a 65
>3a42e8	c0 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a42f8	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a4308	20 dc d2 08 08 20 b6 0e e2 20 a0 00 00 b7 c1 29
>3a4318	7f c5 25 d0 28 a5 25 48 c2 20 a5 23 48 a5 21 48
>3a4328	20 25 42 68 85 21 68 85 23 e2 20 68 85 25 c2 20
>3a4338	a5 21 87 08 a0 02 00 a5 23 97 08 28 60 08 c2 20
>3a4348	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a4358	20 29 ff 00 20 86 18 e2 20 dc d2 08 08 20 b6 0e
>3a4368	f4 00 00 f4 00 00 e2 20 48 20 25 42 e2 20 68 c2
>3a4378	20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08 85 23
>3a4388	e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60 da 0b 08
>3a4398	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 23 89 f0
>3a43a8	ff d0 29 89 0f 00 d0 0c a5 21 89 00 fc d0 05 20
>3a43b8	92 34 80 2e a2 0a 00 46 23 66 21 ca d0 f9 20 92
>3a43c8	34 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46
>3a43d8	23 66 21 ca d0 f9 20 92 34 e2 20 a9 4d 20 18 00
>3a43e8	c2 20 28 2b fa 60 0b 08 c2 30 a9 00 00 8f b4 08
>3a43f8	00 8f b6 08 00 e2 20 20 8c 1c c9 00 f0 08 20 34
>3a4408	17 20 a1 04 80 11 c2 20 a9 00 00 85 21 85 23 e2
>3a4418	20 a9 02 85 25 c2 20 20 4f 45 22 08 11 00 b0 22
>3a4428	20 00 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4438	10 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a4448	d2 08 20 21 02 08 c2 20 48 a9 20 03 5b 68 28 e2
>3a4458	20 a0 00 00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82
>3a4468	96 00 a0 0b 00 b7 18 89 08 f0 03 82 a9 00 89 02
>3a4478	f0 03 82 83 00 29 0f c9 0f d0 03 82 7a 00 a0 00
>3a4488	00 b7 18 20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18
>3a4498	00 a0 08 00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9
>3a44a8	09 20 18 00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0
>3a44b8	1c 00 b7 18 8f 21 08 00 c8 c8 b7 18 8f 23 08 00
>3a44c8	e2 20 a9 00 8f 25 08 00 20 95 43 a9 09 20 18 00
>3a44d8	a0 0b 00 b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20
>3a44e8	18 00 89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9
>3a44f8	44 20 18 00 ea 20 21 02 20 38 02 22 0c 11 00 90
>3a4508	03 82 41 ff 20 00 46 08 c2 20 48 a9 00 08 5b 68
>3a4518	28 20 70 1b 28 2b 60 08 c2 20 48 a9 20 03 5b 68
>3a4528	28 e2 20 29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00
>3a4538	00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1
>3a4548	a9 5d 20 18 00 80 ae 0b 08 08 c2 20 48 a9 20 03
>3a4558	5b 68 28 c2 30 a9 50 f2 85 20 a9 3a 00 85 22 a0
>3a4568	00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20
>3a4578	a9 50 f0 8f 5e f2 3a a9 3a 00 8f 60 f2 3a af 21
>3a4588	08 00 8f 52 f2 3a af 23 08 00 8f 54 f2 3a 28 2b
>3a4598	60 08 c2 30 20 4c 1b 20 34 17 20 a1 04 20 4f 45
>3a45a8	e2 20 a9 2c 85 35 20 6d 1c b0 0f c2 20 a9 ff ff
>3a45b8	8f 54 03 00 8f 56 03 00 80 17 20 2b 1b 20 34 17
>3a45c8	20 77 04 c2 20 a5 21 8f 54 03 00 a5 23 8f 56 03
>3a45d8	00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a45e8	28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00 20 86
>3a45f8	18 e2 20 dc d2 08 28 60 8b 0b 08 08 c2 20 48 a9
>3a4608	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a4618	20 af 2e 03 00 85 21 a9 00 85 22 85 23 85 24 a9
>3a4628	00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 63 46 85 e5
>3a4638	20 1a 40 e2 20 af 20 03 00 85 21 a9 00 85 22 85
>3a4648	23 85 24 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9
>3a4658	6b 46 85 e5 20 1a 40 28 2b ab 60 44 4f 53 53 54
>3a4668	41 54 00 42 49 4f 53 53 54 41 54 00 08 c2 30 20
>3a4678	4c 1b 20 34 17 20 a1 04 a5 21 8f 60 03 00 a5 23
>3a4688	8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03 00 22
>3a4698	24 11 00 b0 25 20 86 18 20 00 46 08 c2 20 48 a9
>3a46a8	00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29
>3a46b8	ff 00 20 86 18 e2 20 dc d2 08 20 86 18 28 60 08
>3a46c8	c2 30 20 4c 1b 20 34 17 20 a1 04 20 4f 45 a9 00
>3a46d8	00 8f 54 03 00 a9 01 00 8f 56 03 00 20 06 3d 22
>3a46e8	18 11 00 b0 22 20 00 46 08 c2 20 48 a9 00 08 5b
>3a46f8	68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00 20
>3a4708	86 18 e2 20 dc d2 08 20 00 46 c2 20 a2 12 00 18
>3a4718	bf 50 f2 3a 69 00 00 85 90 bf 52 f2 3a 69 01 00
>3a4728	85 92 e2 20 a9 00 87 90 c2 20 a9 00 00 85 78 a9
>3a4738	01 00 85 7a a2 00 00 e2 20 a7 78 f0 28 c9 0d f0
>3a4748	12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 78 d0 e8 e6
>3a4758	7a 80 e4 e2 20 a9 00 9d 00 4f 20 db 20 e6 78 d0
>3a4768	d3 e6 7a 80 cf e0 00 00 f0 0a e2 20 a9 00 9d 00
>3a4778	4f 20 db 20 28 60 08 c2 30 20 4c 1b 20 34 17 20
>3a4788	a1 04 20 4f 45 e2 20 a9 2c 20 38 1c c2 20 20 34
>3a4798	17 20 77 04 a5 21 8f 50 03 00 a5 23 8f 52 03 00
>3a47a8	e2 20 a9 2c c2 20 20 38 1c 20 34 17 20 77 04 a5
>3a47b8	21 8f 58 03 00 a5 23 8f 5a 03 00 22 1c 11 00 b0
>3a47c8	22 20 00 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a47d8	a9 12 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a47e8	dc d2 08 20 00 46 28 60 da 5a 08 a2 00 00 a0 00
>3a47f8	00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80 f5 28 7a
>3a4808	fa 60 08 c2 30 20 4c 1b 20 34 17 20 a1 04 20 4f
>3a4818	45 a9 00 00 85 a4 e2 20 a9 01 85 a6 a9 20 85 b2
>3a4828	c2 20 a9 00 00 85 a9 a9 ff ff 85 a7 c2 20 a9 00
>3a4838	00 85 53 85 55 a9 ff ff 85 57 a9 ff 7f 85 59 20
>3a4848	05 13 e2 20 a9 80 85 b2 c2 20 c6 a9 18 a9 00 00
>3a4858	8f 50 03 00 65 a9 8f 58 03 00 a9 01 00 8f 52 03
>3a4868	00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22 20 00
>3a4878	46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a4888	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a4898	20 00 46 28 60 08 c2 30 20 4c 1b 20 34 17 20 a1
>3a48a8	04 20 f0 47 22 04 11 00 b0 22 20 00 46 08 c2 20
>3a48b8	48 a9 00 08 5b 68 28 e2 20 a9 13 8f d1 08 00 c2
>3a48c8	20 29 ff 00 20 86 18 e2 20 dc d2 08 20 00 46 28
>3a48d8	60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29 df 80
>3a48e8	13 c9 20 90 13 a2 00 00 df 04 49 3a f0 0a e8 e0
>3a48f8	0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f
>3a4908	3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48
>3a4918	a9 00 08 5b 68 28 c2 30 20 34 17 20 a1 04 20 f0
>3a4928	47 22 10 11 00 b0 22 20 00 46 08 c2 20 48 a9 00
>3a4938	08 5b 68 28 e2 20 a9 14 8f d1 08 00 c2 20 29 ff
>3a4948	00 20 86 18 e2 20 dc d2 08 e2 20 a9 2c 20 38 1c
>3a4958	c2 20 20 34 17 20 a1 04 ad 38 03 85 08 ad 3a 03
>3a4968	85 0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b 00 d0
>3a4978	f8 a2 00 00 a0 00 00 b7 21 f0 6d c9 2e f0 30 22
>3a4988	d9 48 3a b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4998	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a49a8	20 dc d2 08 95 7c c8 e8 c0 08 00 d0 ca 80 01 c8
>3a49b8	a2 08 00 b7 21 f0 31 22 d9 48 3a b0 22 20 00 46
>3a49c8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1
>3a49d8	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 95
>3a49e8	7c c8 e8 c0 0b 00 d0 cb a2 00 00 a0 00 00 b5 7c
>3a49f8	97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20
>3a4a08	00 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15
>3a4a18	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a4a28	08 20 00 46 28 60 08 08 c2 20 48 a9 00 08 5b 68
>3a4a38	28 c2 30 20 34 17 20 a1 04 a5 21 8f 64 03 00 a5
>3a4a48	23 8f 66 03 00 e2 20 a9 2c 20 38 1c c2 20 20 34
>3a4a58	17 20 a1 04 a5 21 8f 68 03 00 a5 23 8f 6a 03 00
>3a4a68	22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a4a78	e2 20 a9 16 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a4a88	e2 20 dc d2 08 28 60 5c 4c 64 3a 5c 9d 62 3a 5c
>3a4a98	4d 64 3a 5c c9 53 3a 5c 26 54 3a 5c 59 53 3a 5c
>3a4aa8	df 52 3a 5c 5c 58 3a 5c 4a 4f 3a 5c 77 52 3a 5c
>3a4ab8	32 52 3a 5c bc 51 3a 5c 5b 63 3a 5c 58 50 3a 5c
>3a4ac8	ae 4e 3a 5c d6 63 3a 5c 86 4f 3a 5c 4f 64 3a 5c
>3a4ad8	48 64 3a 5c 75 51 3a 5c 50 64 3a 18 fb c2 20 a9
>3a4ae8	ff fe 1b 58 5c f0 4a 3a c2 30 22 ae 4e 3a 20 08
>3a4af8	00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 af
>3a4b08	03 ab 22 93 4a 3a 22 9b 4a 3a 80 e2 08 8b e2 20
>3a4b18	a9 3a 48 ab c2 10 a2 27 4b 20 ae 02 ab 28 6b 41
>3a4b28	20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a4b38	6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a4b48	20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a4b58	72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a4b68	65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a4b78	0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a4b88	63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a4b98	0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a4ba8	5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a4bb8	61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a4bc8	61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a4bd8	3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a4be8	20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a4bf8	61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a4c08	73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a4c18	75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a4c28	69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a4c38	20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a4c48	61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4c58	20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a4c68	74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a4c78	48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a4c88	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a4c98	20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a4ca8	73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a4cb8	20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a4cc8	22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a4cd8	69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a4ce8	65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a4cf8	76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4d08	0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a4d18	20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a4d28	65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a4d38	20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a4d48	3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a4d58	4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a4d68	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a4d78	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a4d88	53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a4d98	20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a4da8	3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a4db8	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a4dc8	74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a4dd8	20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a4de8	68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a4df8	79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a4e08	65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a4e18	61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a4e28	73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a4e38	74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a4e48	20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a4e58	5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a4e68	20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4e78	0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a4e88	68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a4e98	0d 0d 00 08 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4ea8	a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a 48 ab 68 28
>3a4eb8	a2 8d 64 20 ae 02 e2 20 a9 3b 20 18 00 a9 20 20
>3a4ec8	18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03
>3a4ed8	00 a2 42 02 20 31 02 c2 20 a9 20 00 20 18 00 af
>3a4ee8	44 02 00 20 be 02 a9 20 00 20 18 00 af 46 02 00
>3a4ef8	20 be 02 a9 20 00 20 18 00 af 48 02 00 20 be 02
>3a4f08	a9 20 00 20 18 00 af 4a 02 00 20 be 02 a9 20 00
>3a4f18	20 18 00 af 4e 02 00 20 d8 02 a9 20 00 20 18 00
>3a4f28	20 18 00 af 4c 02 00 20 be 02 a9 20 00 20 18 00
>3a4f38	08 e2 20 ad 4f 02 22 a6 61 3a 28 20 21 02 20 21
>3a4f48	02 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4f58	a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5 0d
>3a4f68	c5 11 d0 06 20 21 02 2b 28 6b c2 20 18 a5 0d 69
>3a4f78	01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08 0b
>3a4f88	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 0f c5 17
>3a4f98	90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87 15
>3a4fa8	a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c 3d
>3a4fb8	50 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a4fc8	00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20 a5
>3a4fd8	16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85 19
>3a4fe8	e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15 85
>3a4ff8	15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15 a5
>3a5008	13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26 c2
>3a5018	20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00 85
>3a5028	12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16 e9
>3a5038	00 85 16 80 c4 20 21 02 2b 28 6b 08 e2 20 c9 21
>3a5048	90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18 6b
>3a5058	08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9
>3a5068	00 8f b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2
>3a5078	20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85
>3a5088	13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2
>3a5098	20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85
>3a50a8	13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34
>3a50b8	85 1b e2 20 a7 19 22 43 50 3a b0 02 a9 3f 99 7c
>3a50c8	08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69
>3a50d8	00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9 3e
>3a50e8	20 18 00 a9 20 20 18 00 e2 20 a5 34 20 d8 02 a9
>3a50f8	3a 20 18 00 c2 20 a5 32 20 be 02 c2 20 a9 08 00
>3a5108	85 47 e2 20 a9 20 20 18 00 a7 32 20 d8 02 22 85
>3a5118	61 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20
>3a5128	18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08 20
>3a5138	ae 02 20 21 02 20 38 02 a5 34 c5 13 90 0f c2 20
>3a5148	a5 32 c5 11 90 07 20 21 02 2b ab 28 6b 4c a9 50
>3a5158	08 8d 90 08 e2 20 bd 00 00 99 00 00 ad 90 08 f0
>3a5168	0a c8 e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b 8b
>3a5178	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00
>3a5188	48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20
>3a5198	a5 31 3a 85 47 a2 57 08 a0 7c 08 22 58 51 3a a0
>3a51a8	00 00 b9 7c 08 87 32 22 85 61 3a c8 c4 47 d0 f2
>3a51b8	ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a51c8	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5
>3a51d8	31 3a 3a 85 47 a2 5b 08 a0 7c 08 22 58 51 3a c2
>3a51e8	20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0
>3a51f8	06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7c
>3a5208	08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34
>3a5218	85 4c 22 2f 5c 3a e2 20 a9 20 20 18 00 22 85 61
>3a5228	3a 80 c6 20 21 02 ab 2b 28 6b 08 c2 20 48 a9 46
>3a5238	08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40
>3a5248	02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02
>3a5258	00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a
>3a5268	48 a9 52 48 a9 72 48 4c a9 52 ea 5c 04 00 3a 08
>3a5278	c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9 c2
>3a5288	30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02
>3a5298	00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00
>3a52a8	5b e2 20 af 4e 02 00 48 ab a9 5c 8f a0 08 00 af
>3a52b8	42 02 00 8f a3 08 00 af 41 02 00 8f a2 08 00 af
>3a52c8	40 02 00 8f a1 08 00 af 4f 02 00 48 c2 20 af 44
>3a52d8	02 00 28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9 3a
>3a52e8	48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 c2 10
>3a52f8	e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15
>3a5308	85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 51 64
>3a5318	20 ae 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00
>3a5328	e2 20 a7 4a d7 11 f0 09 22 2f 5c 3a a9 20 20 18
>3a5338	00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00
>3a5348	85 4c c8 c4 47 d0 d9 20 21 02 20 21 02 ab 2b 28
>3a5358	6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a5368	20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d
>3a5378	8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44
>3a5388	02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19
>3a5398	8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d
>3a53a8	e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e
>3a53b8	4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28
>3a53c8	6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a53d8	c2 10 a2 00 00 bf be 64 3a f0 18 c7 08 f0 03 e8
>3a53e8	80 f3 c2 20 8a 0a aa bf ff 53 3a 8f 2d 08 00 22
>3a53f8	23 54 3a ab 2b 28 6b 9f 4a a7 4a ab 4a af 4a b3
>3a5408	4a b7 4a bb 4a bf 4a c3 4a c7 4a a3 4a cb 4a cf
>3a5418	4a d3 4a 9b 4e d7 4a db 4a 14 4b 6c 2d 08 08 8b
>3a5428	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 c9
>3a5438	02 b0 03 4c cc 55 c2 20 a5 0d 85 32 a5 0f 85 34
>3a5448	c2 20 22 ce 57 3a c9 ff ff f0 10 85 54 e2 20 a5
>3a5458	31 c9 03 f0 36 a9 13 85 4f 80 4c 20 21 02 08 e2
>3a5468	20 48 a9 3a 48 ab 68 28 c2 10 a2 03 56 20 ae 02
>3a5478	4c cc 55 20 21 02 08 e2 20 48 a9 3a 48 ab 68 28
>3a5488	c2 10 a2 12 56 20 ae 02 4c cc 55 e2 20 22 04 58
>3a5498	3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9
>3a54a8	13 f0 04 c9 08 f0 00 22 fc 56 3a b0 03 4c 95 55
>3a54b8	87 32 22 85 61 3a 08 e2 20 48 a9 00 48 ab 68 28
>3a54c8	c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12
>3a54d8	f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03
>3a54e8	4c c3 55 c2 20 29 ff 00 aa e2 20 bf cb 60 3a c9
>3a54f8	03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5
>3a5508	54 c9 43 5d f0 26 c9 a7 5d f0 2a c9 27 5d f0 1c
>3a5518	c9 2b 5d f0 17 c9 33 5d f0 12 c9 1b 5d f0 0d c9
>3a5528	2f 5d f0 08 c9 17 5d f0 03 4c af 54 e2 20 a9 12
>3a5538	85 4f 4c af 54 e2 20 a9 16 85 4f 4c af 54 22 3f
>3a5548	56 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96 08
>3a5558	97 56 22 85 61 3a a0 01 00 b9 96 08 97 56 22 85
>3a5568	61 3a a0 00 00 b9 96 08 97 56 22 85 61 3a e2 20
>3a5578	a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34
>3a5588	86 4c 22 2f 5c 3a a9 20 20 18 00 80 37 20 21 02
>3a5598	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 d0 55 20
>3a55a8	ae 02 80 20 20 21 02 08 e2 20 48 a9 3a 48 ab 68
>3a55b8	28 c2 10 a2 20 56 20 ae 02 80 09 a5 4f 29 c0 d0
>3a55c8	95 4c 6a 55 2b ab 28 6b 41 64 64 72 65 73 73 69
>3a55d8	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a55e8	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a55f8	74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d
>3a5608	6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70
>3a5618	65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65
>3a5628	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a5638	61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46 08
>3a5648	5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32
>3a5658	69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5
>3a5668	34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5
>3a5678	4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5
>3a5688	51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0
>3a5698	1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0
>3a56a8	0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18
>3a56b8	6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 46
>3a56c8	08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08 e8
>3a56d8	e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26
>3a56e8	52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85 50
>3a56f8	fa 2b 28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68 28
>3a5708	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f
>3a5718	85 4a c2 30 a2 00 00 a0 00 00 bd c9 5d f0 1b c5
>3a5728	54 d0 0d e2 20 b9 cb 5f 29 3f c5 4a f0 07 c2 20
>3a5738	e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b
>3a5748	08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0 00
>3a5758	00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36
>3a5768	85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28
>3a5778	38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30
>3a5788	b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61
>3a5798	b0 02 80 de 29 df 22 bd 56 3a 80 cb 0b 08 c2 20
>3a57a8	48 a9 46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03
>3a57b8	c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69
>3a57c8	00 00 85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b 68
>3a57d8	28 c2 20 a5 11 85 36 a5 13 85 38 a9 57 5c 85 03
>3a57e8	a9 3a 00 85 05 22 46 57 3a b0 0d 22 a4 57 3a a7
>3a57f8	03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2
>3a5808	20 48 a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5 17
>3a5818	85 38 a9 e3 60 85 03 a9 3a 00 85 05 22 46 57 3a
>3a5828	b0 22 22 a4 57 3a c2 20 18 a5 03 69 01 00 85 03
>3a5838	a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9
>3a5848	ff ff 80 0d 22 a4 57 3a e2 20 a7 03 c2 20 29 ff
>3a5858	00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68
>3a5868	28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02 b0 16 c9
>3a5878	01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5
>3a5888	0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85
>3a5898	34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5
>3a58a8	34 69 00 85 13 22 c8 58 3a e2 20 a5 34 c5 13 90
>3a58b8	f4 c2 20 a5 32 c5 11 90 ec 20 21 02 2b ab 28 6b
>3a58c8	08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08 c2
>3a58d8	20 48 a9 78 08 5b 68 28 c2 20 a5 00 85 18 e2 20
>3a58e8	a5 02 85 1a 22 2f 5c 3a a9 20 20 18 00 c2 20 18
>3a58f8	a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a e2
>3a5908	20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f 94
>3a5918	08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 94 08 00 8f
>3a5928	94 08 00 68 c2 20 29 ff 00 0a aa bf c9 5d 3a aa
>3a5938	22 a9 5b 3a e2 20 a7 00 aa bf cb 5f 3a 22 85 61
>3a5948	3a 22 56 59 3a 20 21 02 20 38 02 2b 28 6b 08 e2
>3a5958	20 48 29 3f 0a c2 10 aa 68 7c 64 59 94 59 af 59
>3a5968	b6 59 db 59 e2 59 fd 59 1f 5a 30 5a 6d 5a 75 5a
>3a5978	86 5a 97 5a 9e 5a c3 5a f0 5a 5c 5a 41 5a 0e 5a
>3a5988	e3 5a ed 5a 01 5b 30 5b de 5a 41 5b a9 28 20 18
>3a5998	00 22 58 5b 3a a9 2c 20 18 00 a9 58 20 18 00 a9
>3a59a8	29 20 18 00 4c 52 5b 22 58 5b 3a 4c 52 5b e2 20
>3a59b8	48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a 2f
>3a59c8	94 08 00 d0 07 22 62 5b 3a 4c 52 5b 22 58 5b 3a
>3a59d8	4c 52 5b 22 62 5b 3a 4c 52 5b a9 28 20 18 00 22
>3a59e8	58 5b 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59 20
>3a59f8	18 00 4c 52 5b 22 58 5b 3a a9 2c 20 18 00 a9 58
>3a5a08	20 18 00 4c 52 5b 22 58 5b 3a a9 2c 20 18 00 a9
>3a5a18	59 20 18 00 4c 52 5b 22 62 5b 3a a9 2c 20 18 00
>3a5a28	a9 59 20 18 00 4c 52 5b 22 62 5b 3a a9 2c 20 18
>3a5a38	00 a9 58 20 18 00 4c 52 5b a9 28 20 18 00 22 62
>3a5a48	5b 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20 18
>3a5a58	00 4c 52 5b a9 28 20 18 00 22 58 5b 3a a9 29 20
>3a5a68	18 00 4c 52 5b a9 41 20 18 00 4c 56 5b 22 58 5b
>3a5a78	3a a9 2c 20 18 00 a9 53 20 18 00 4c 52 5b a9 5b
>3a5a88	20 18 00 22 58 5b 3a a9 5d 20 18 00 4c 52 5b 22
>3a5a98	70 5b 3a 4c 56 5b a9 28 20 18 00 22 58 5b 3a a9
>3a5aa8	2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9 2c
>3a5ab8	20 18 00 a9 59 20 18 00 4c 52 5b a9 5b 20 18 00
>3a5ac8	22 58 5b 3a a9 5d 20 18 00 a9 2c 20 18 00 a9 59
>3a5ad8	20 18 00 4c 52 5b a0 02 00 80 03 a0 01 00 22 d6
>3a5ae8	5b 3a 4c 56 5b 4c 56 5b 22 70 5b 3a a9 2c 20 18
>3a5af8	00 a9 58 20 18 00 4c 56 5b a9 23 20 18 00 8b a5
>3a5b08	02 48 ab a6 00 e8 a0 01 00 22 31 02 3a a9 2c 20
>3a5b18	18 00 a9 23 20 18 00 a6 00 a0 01 00 22 31 02 3a
>3a5b28	ab 22 85 61 3a 4c 52 5b a9 28 20 18 00 22 62 5b
>3a5b38	3a a9 29 20 18 00 4c 52 5b a9 5b 20 18 00 22 62
>3a5b48	5b 3a a9 5d 20 18 00 4c 52 5b 22 85 61 3a 28 6b
>3a5b58	08 e2 20 a7 00 20 d8 02 28 6b 08 c2 30 a7 00 20
>3a5b68	be 02 22 85 61 3a 28 6b 08 8b 0b c2 30 5a 08 c2
>3a5b78	20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a5b88	68 28 e2 20 a0 00 00 a7 00 99 90 08 22 85 61 3a
>3a5b98	c8 c0 03 00 d0 f1 22 2f 5c 3a c2 30 7a 2b ab 28
>3a5ba8	6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab 68
>3a5bb8	28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 bd
>3a5bc8	00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08 0b
>3a5bd8	08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02 00 f0
>3a5be8	14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff 85
>3a5bf8	19 85 1a 80 16 a7 00 85 18 22 85 61 3a a7 00 85
>3a5c08	19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5 00
>3a5c18	65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 2f 5c 3a
>3a5c28	22 85 61 3a 2b 28 6b 08 0b c2 20 48 08 c2 20 48
>3a5c38	a9 46 08 5b 68 28 e2 20 a5 4c 20 d8 02 e2 20 a9
>3a5c48	3a 20 18 00 c2 20 a5 4a 20 be 02 68 2b 28 6b 4f
>3a5c58	52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00 53
>3a5c68	54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00 41
>3a5c78	53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00 53
>3a5c88	54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00 42
>3a5c98	49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00 43
>3a5ca8	50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00 52
>3a5cb8	54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00 50
>3a5cc8	48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00 49
>3a5cd8	4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00 43
>3a5ce8	4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00 43
>3a5cf8	4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00 54
>3a5d08	41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00 42
>3a5d18	50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00 42
>3a5d28	43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00 54
>3a5d38	53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00 50
>3a5d48	48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00 50
>3a5d58	48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00 50
>3a5d68	48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00 54
>3a5d78	43 53 00 54 53 43 00 54 43 44 00 54 44 43 00 54
>3a5d88	58 59 00 54 59 58 00 53 54 50 00 58 43 45 00 43
>3a5d98	4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00 42
>3a5da8	52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00 4d
>3a5db8	56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00 00
>3a5dc8	00 af 5c 57 5c 97 5d 57 5c 37 5d 57 5c 77 5c 57
>3a5dd8	5c bf 5c 57 5c 77 5c 57 5d 37 5d 57 5c 77 5c 57
>3a5de8	5c 17 5d 57 5c 57 5c 57 5c 3b 5d 57 5c 77 5c 57
>3a5df8	5c df 5c 57 5c 93 5c 77 5d 3b 5d 57 5c 77 5c 57
>3a5e08	5c b3 5c 5b 5c 9b 5d 5b 5c 97 5c 5b 5c 7b 5c 5b
>3a5e18	5c c3 5c 5b 5c 7b 5c 5b 5d 97 5c 5b 5c 7b 5c 5b
>3a5e28	5c 1b 5d 5b 5c 5b 5c 5b 5c 97 5c 5b 5c 7b 5c 5b
>3a5e38	5c e3 5c 5b 5c 8f 5c 7b 5d 97 5c 5b 5c 7b 5c 5b
>3a5e48	5c b7 5c 5f 5c 9f 5d 5f 5c b3 5d 5f 5c 7f 5c 5f
>3a5e58	5c c7 5c 5f 5c 7f 5c 5f 5d 9b 5c 5f 5c 7f 5c 5f
>3a5e68	5c 1f 5d 5f 5c 5f 5c 5f 5c b7 5d 5f 5c 7f 5c 5f
>3a5e78	5c e7 5c 5f 5c 47 5d 7f 5d c3 5d 5f 5c 7f 5c 5f
>3a5e88	5c bb 5c 63 5c a3 5d 63 5c 3f 5d 63 5c 83 5c 63
>3a5e98	5c cb 5c 63 5c 83 5c 63 5d 9b 5c 63 5c 83 5c 63
>3a5ea8	5c 23 5d 63 5c 63 5c 63 5c 3f 5d 63 5c 83 5c 63
>3a5eb8	5c eb 5c 63 5c 4b 5d 83 5d 9b 5c 63 5c 83 5c 63
>3a5ec8	5c 43 5d 67 5c a7 5d 67 5c 9f 5c 67 5c 87 5c 67
>3a5ed8	5c cf 5c 97 5c ff 5c 67 5d 9f 5c 67 5c 87 5c 67
>3a5ee8	5c 27 5d 67 5c 67 5c 67 5c 9f 5c 67 5c 87 5c 67
>3a5ef8	5c ef 5c 67 5c 03 5d 87 5d 3f 5d 67 5c 3f 5d 67
>3a5f08	5c a3 5c 6b 5c 8b 5c 6b 5c a3 5c 6b 5c 8b 5c 6b
>3a5f18	5c d3 5c 6b 5c 07 5d 6b 5d a3 5c 6b 5c 8b 5c 6b
>3a5f28	5c 2b 5d 6b 5c 6b 5c 6b 5c a3 5c 6b 5c 8b 5c 6b
>3a5f38	5c f3 5c 6b 5c 0b 5d 8b 5d a3 5c 6b 5c 8b 5c 6b
>3a5f48	5c a7 5c 6f 5c ab 5d 6f 5c a7 5c 6f 5c 8f 5c 6f
>3a5f58	5c d7 5c 6f 5c 0f 5d 6f 5d a7 5c 6f 5c 8f 5c 6f
>3a5f68	5c 2f 5d 6f 5c 6f 5c 6f 5c bb 5d 6f 5c 8f 5c 6f
>3a5f78	5c f7 5c 6f 5c 4f 5d 8f 5d c3 5d 6f 5c 8f 5c 6f
>3a5f88	5c ab 5c 73 5c af 5d 73 5c ab 5c 73 5c 93 5c 73
>3a5f98	5c db 5c 73 5c 13 5d 73 5d ab 5c 73 5c 93 5c 73
>3a5fa8	5c 33 5d 73 5c 73 5c 73 5c bf 5d 73 5c 93 5c 73
>3a5fb8	5c fb 5c 73 5c 53 5d 93 5d b3 5c 73 5c 93 5c 73
>3a5fc8	5c 00 00 13 00 02 09 01 01 01 0a 13 82 08 13 03
>3a5fd8	03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13 03
>3a5fe8	07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13 03
>3a5ff8	03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13 07
>3a6008	07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13 03
>3a6018	03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13 0b
>3a6028	07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13 15
>3a6038	03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13 10
>3a6048	07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13 03
>3a6058	03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 03
>3a6068	07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13 03
>3a6078	03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 07
>3a6088	07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13 03
>3a6098	03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13 17
>3a60a8	07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13 03
>3a60b8	03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13 10
>3a60c8	07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03 01
>3a60d8	01 03 01 02 01 01 00 02 02 02 02 41 00 08 64 64
>3a60e8	3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64 64
>3a60f8	00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c 59
>3a6108	00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64 64
>3a6118	2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23 64
>3a6128	64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23 64
>3a6138	64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64 64
>3a6148	64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10 28
>3a6158	64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04 28
>3a6168	64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64 64
>3a6178	5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2 20
>3a6188	48 18 af 78 08 00 69 01 00 8f 78 08 00 e2 20 af
>3a6198	7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b 08 c2
>3a61a8	10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18 00
>3a61b8	80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b 08
>3a61c8	c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0 0a c9
>3a61d8	20 d0 06 22 85 61 3a 80 f2 6b 08 08 c2 20 48 a9
>3a61e8	46 08 5b 68 28 22 85 61 3a 22 c7 61 3a c2 30 a5
>3a61f8	31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34 95
>3a6208	0f e2 20 a7 32 f0 14 c9 22 f0 06 22 85 61 3a 80
>3a6218	f2 a9 00 87 32 22 85 61 3a e6 31 28 6b 08 c2 20
>3a6228	48 a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50 64
>3a6238	52 e2 20 a7 32 c9 3a f0 0d 20 56 03 90 0e 22 bd
>3a6248	56 3a a9 01 85 4a 22 85 61 3a 80 e5 a5 4a f0 16
>3a6258	a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52
>3a6268	95 0f e2 20 e6 31 6b e2 20 64 31 22 c7 61 3a a7
>3a6278	32 f0 21 c9 22 d0 06 22 e2 61 3a 80 0a 22 25 62
>3a6288	3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc 20
>3a6298	56 03 b0 d7 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a62a8	28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00 85
>3a62b8	02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22 c7
>3a62c8	61 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5 34
>3a62d8	85 0a a2 01 00 22 85 61 3a a7 32 d0 06 86 0b 64
>3a62e8	31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87 32
>3a62f8	22 85 61 3a a7 08 c9 41 f0 07 22 6f 62 3a 2b 28
>3a6308	6b 22 c7 61 3a a7 32 f0 f5 22 25 62 3a 22 c7 61
>3a6318	3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34 85
>3a6328	13 22 85 61 3a a7 32 f0 26 c9 20 d0 f4 a9 00 87
>3a6338	32 e6 31 22 85 61 3a 22 c7 61 3a a7 32 f0 bf c2
>3a6348	20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af e6
>3a6358	31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 51 64 a9
>3a6368	3a 48 ab 20 ae 02 20 21 02 80 61 c2 20 a5 0d 8f
>3a6378	21 08 00 a5 0f 8f 23 08 00 20 4f 45 e2 20 a5 31
>3a6388	c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03
>3a6398	00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56 03
>3a63a8	00 22 18 11 00 b0 25 e2 20 a2 77 64 a9 3a 48 ab
>3a63b8	20 ae 02 af 2e 03 00 20 d8 02 a9 20 20 18 00 af
>3a63c8	20 03 00 20 d8 02 20 21 02 20 21 02 28 6b 8b 08
>3a63d8	c2 10 e2 20 a5 31 c9 03 f0 0f a2 51 64 a9 3a 48
>3a63e8	ab 20 ae 02 20 21 02 80 54 c2 20 a5 0d 8f 21 08
>3a63f8	00 a5 0f 8f 23 08 00 20 4f 45 a5 11 8f 50 03 00
>3a6408	a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f 5a
>3a6418	03 00 22 1c 11 00 b0 25 e2 20 a2 61 64 a9 3a 48
>3a6428	ab 20 ae 02 af 2e 03 00 20 d8 02 a9 20 20 18 00
>3a6438	af 20 03 00 20 d8 02 20 21 02 20 21 02 28 ab 6b
>3a6448	5c 0e 21 3a 6b 00 00 00 00 42 61 64 20 61 72 67
>3a6458	75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65 20
>3a6468	74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00 55
>3a6478	6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69
>3a6488	6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20 41
>3a6498	20 20 20 20 58 20 20 20 20 59 20 20 20 20 53 50
>3a64a8	20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d 58
>3a64b8	44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d 52
>3a64c8	3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9
>3a64d8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a64e8	30 20 10 65 a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab
>3a64f8	68 28 a2 08 d2 20 ae 02 08 e2 20 48 a9 00 48 ab
>3a6508	68 28 4c 0e 21 4c 0d 65 08 20 b5 01 20 06 3d 28
>3a6518	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a6528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1708 times (27328 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 50 49 58
>3ad1c8	4d 41 50 00 43 4c 52 50 49 58 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 0d 52 45 41 44 59 0d 00
>3ad208	43 32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49
>3ad218	43 38 31 36 20 76 30 2e 31 2e 30 2d 61 6c 70 68
>3ad228	61 2b 37 39 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
