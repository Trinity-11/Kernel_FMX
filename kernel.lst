
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Sun Jan 05 14:10:01 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000337				SDOS_FILE_REC_PTR= $000337 ; 3 byte pointer to a simple file struct
=$00033a				SDOS_LOOP        = $00033A ; variable to count file length
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 1e 12 38	jsl $38121e	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 f0 10 38	jsl $3810f0	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 23 06 39	jmp $390623	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe820				GABE_MSTR_CTRL      = $AFE820
=$01					GABE_CTRL_PWR_LED   = $01 ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02 ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10 ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80 ; Warm Reset (needs to Setup other registers)
=$afe821				GABE_NOTUSED        = $AFE821 ; Reserved for future use
=$afe822				GABE_RST_AUTH0      = $AFE822 ; Must Contain the BYTE $AD for Reset to Activate
=$afe823				GABE_RST_AUTH1      = $AFE823 ; Must Contain the BYTE $DE for Reset to Activate
=$afe824				GABE_RNG_DAT_LO     = $AFE824 ; Low Part of 16Bit RNG Generator
=$afe825				GABE_RNG_DAT_HI     = $AFE825 ; Hi Part of 16Bit RNG Generator
=$afe824				GABE_RNG_SEED_LO    = $AFE824 ; Low Part of 16Bit RNG Generator
=$afe825				GABE_RNG_SEED_HI    = $AFE825 ; Hi Part of 16Bit RNG Generator
=$afe826				GABE_RNG_STAT       = $AFE826 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe826				GABE_RNG_CTRL       = $AFE826 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe827				GABE_SYS_STAT       = $AFE827 ;
=$01					GABE_SYS_STAT_MID0  = $01   ;
=$02					GABE_SYS_STAT_MID1  = $02   ;
=$08					GABE_SYS_STAT_EXP   = $08   ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40   ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80   ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 69 13 39	jmp $391369	RESTORE         JML IRESTORE
.381008	5c c2 05 39	jmp $3905c2	BREAK           JML IBREAK
.38100c	5c 09 06 39	jmp $390609	READY           JML IREADY
.381010	5c 6a 13 39	jmp $39136a	SCINIT          JML ISCINIT
.381014	5c 6b 13 39	jmp $39136b	IOINIT          JML IIOINIT
.381018	5c 86 06 39	jmp $390686	PUTC            JML IPUTC
.38101c	5c 6f 06 39	jmp $39066f	PUTS            JML IPUTS
.381020	5c a7 07 39	jmp $3907a7	PUTB            JML IPUTB
.381024	5c 6c 13 39	jmp $39136c	PUTBLOCK        JML IPUTBLOCK
.381028	5c 6d 13 39	jmp $39136d	SETLFS          JML ISETLFS
.38102c	5c 6e 13 39	jmp $39136e	SETNAM          JML ISETNAM
.381030	5c 6f 13 39	jmp $39136f	OPEN            JML IOPEN
.381034	5c 70 13 39	jmp $391370	CLOSE           JML ICLOSE
.381038	5c 24 06 39	jmp $390624	SETIN           JML ISETIN
.38103c	5c 2d 06 39	jmp $39062d	SETOUT          JML ISETOUT
.381040	5c 71 13 39	jmp $391371	GETB            JML IGETB
.381044	5c 72 13 39	jmp $391372	GETBLOCK        JML IGETBLOCK
.381048	5c 73 13 39	jmp $391373	GETCH           JML IGETCH
.38104c	5c 3f 06 39	jmp $39063f	GETCHW          JML IGETCHW
.381050	5c 36 06 39	jmp $390636	GETCHE          JML IGETCHE
.381054	5c 74 13 39	jmp $391374	GETS            JML IGETS
.381058	5c 75 13 39	jmp $391375	GETLINE         JML IGETLINE
.38105c	5c 76 13 39	jmp $391376	GETFIELD        JML IGETFIELD
.381060	5c 77 13 39	jmp $391377	TRIM            JML ITRIM
.381064	5c 78 13 39	jmp $391378	PRINTC          JML IPRINTC
.381068	5c 79 13 39	jmp $391379	PRINTS          JML IPRINTS
.38106c	5c a8 07 39	jmp $3907a8	PRINTCR         JML IPRINTCR
.381070	5c 7a 13 39	jmp $39137a	PRINTF          JML IPRINTF
.381074	5c 7b 13 39	jmp $39137b	PRINTI          JML IPRINTI
.381078	5c fc 08 39	jmp $3908fc	PRINTH          JML IPRINTH
.38107c	5c 7c 13 39	jmp $39137c	PRINTAI         JML IPRINTAI
.381080	5c 19 09 39	jmp $390919	PRINTAH         JML IPRINTAH
.381084	5c 92 08 39	jmp $390892	LOCATE          JML ILOCATE
.381088	5c 7d 13 39	jmp $39137d	PUSHKEY         JML IPUSHKEY
.38108c	5c 7e 13 39	jmp $39137e	PUSHKEYS        JML IPUSHKEYS
.381090	5c ee 07 39	jmp $3907ee	CSRRIGHT        JML ICSRRIGHT
.381094	5c 21 08 39	jmp $390821	CSRLEFT         JML ICSRLEFT
.381098	5c 47 08 39	jmp $390847	CSRUP           JML ICSRUP
.38109c	5c 6d 08 39	jmp $39086d	CSRDOWN         JML ICSRDOWN
.3810a0	5c dd 07 39	jmp $3907dd	CSRHOME         JML ICSRHOME
.3810a4	5c d4 08 39	jmp $3908d4	SCROLLUP        JML ISCROLLUP
.3810a8	5c 67 09 39	jmp $390967	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c ca 09 39	jmp $3909ca	INITCHLUT	    JML IINITCHLUT
.3810b0	5c e4 0c 39	jmp $390ce4	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c e3 0d 39	jmp $390de3	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 3f 0f 39	jmp $390f3f	TESTSID         JML ITESTSID
.3810bc	5c c3 0c 39	jmp $390cc3	INITCURSOR      JML IINITCURSOR
.3810c0	5c 79 0c 39	jmp $390c79	INITFONTSET     JML IINITFONTSET
.3810c4	5c f9 09 39	jmp $3909f9	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 19 0a 39	jmp $390a19	INITALLLUT      JML IINITALLLUT
.3810cc	5c db 0a 39	jmp $390adb	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 04 0b 39	jmp $390b04	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 3b 0b 39	jmp $390b3b	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 3c 0b 39	jmp $390b3c	INITSPRITE      JML IINITSPRITE
.3810dc	5c 2f 10 39	jmp $39102f	INITCODEC       JML IINITCODEC
.3810e0	5c ab 10 39	jmp $3910ab	RESETCODEC      JML IRESETCODEC
.3810e4	5c 19 11 39	jmp $391119	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c ce 10 39	jmp $3910ce	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 3d 37 38	jmp $38373d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.3810f0					IRQ_HANDLER
.3810f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3810f2	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3810f6	c9 00		cmp #$00	                CMP #$00
.3810f8	f0 37		beq $381131	                BEQ CHECK_PENDING_REG1
.3810fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3810fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.381100	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381102	d0 09		bne $38110d	                BNE SERVICE_NEXT_IRQ6
.381104	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381108	20 9b 11	jsr $38119b	                JSR SOF_INTERRUPT
.38110b	e2 20		sep #$20	                SEP #$20        ; set A short
.38110d					SERVICE_NEXT_IRQ6
.38110d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381111	29 40		and #$40	                AND #FNX0_INT06_FDC
.381113	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381115	d0 09		bne $381120	                BNE SERVICE_NEXT_IRQ7
.381117	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38111b	20 e7 11	jsr $3811e7	                JSR FDC_INTERRUPT
.38111e	e2 20		sep #$20	                SEP #$20        ; set A short
.381120					SERVICE_NEXT_IRQ7
.381120	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381124	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381126	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381128	d0 07		bne $381131	                BNE CHECK_PENDING_REG1
.38112a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38112e	20 a6 11	jsr $3811a6	                JSR MOUSE_INTERRUPT
.381131					CHECK_PENDING_REG1
.381131	e2 20		sep #$20	                SEP #$20        ; set A short
.381133	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381137	c9 00		cmp #$00	                CMP #$00
.381139	f0 5d		beq $381198	                BEQ EXIT_IRQ_HANDLE
.38113b					SERVICE_NEXT_IRQ8
.38113b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38113f	29 01		and #$01	                AND #FNX1_INT00_KBD
.381141	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381143	d0 09		bne $38114e	                BNE SERVICE_NEXT_IRQ11
.381145	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381149	20 65 41	jsr $384165	                JSR KEYBOARD_INTERRUPT
.38114c	e2 20		sep #$20	                SEP #$20        ; set A short
.38114e					SERVICE_NEXT_IRQ11
.38114e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381152	29 08		and #$08	                AND #FNX1_INT03_COM2
.381154	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.381156	d0 09		bne $381161	                BNE SERVICE_NEXT_IRQ12
.381158	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38115c	20 f2 11	jsr $3811f2	                JSR COM2_INTERRUPT
.38115f	e2 20		sep #$20	                SEP #$20        ; set A short
.381161					SERVICE_NEXT_IRQ12
.381161	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381165	29 10		and #$10	                AND #FNX1_INT04_COM1
.381167	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.381169	d0 09		bne $381174	                BNE SERVICE_NEXT_IRQ13
.38116b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38116f	20 fd 11	jsr $3811fd	                JSR COM1_INTERRUPT
.381172	e2 20		sep #$20	                SEP #$20        ; set A short
.381174					SERVICE_NEXT_IRQ13
.381174	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381178	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38117a	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.38117c	d0 09		bne $381187	                BNE SERVICE_NEXT_IRQ14
.38117e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381182	20 08 12	jsr $381208	                JSR MPU401_INTERRUPT
.381185	e2 20		sep #$20	                SEP #$20        ; set A short
.381187					SERVICE_NEXT_IRQ14
.381187	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118b	29 40		and #$40	                AND #FNX1_INT06_LPT
.38118d	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.38118f	d0 07		bne $381198	                BNE EXIT_IRQ_HANDLE
.381191	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381195	20 13 12	jsr $381213	                JSR LPT1_INTERRUPT
.381198					EXIT_IRQ_HANDLE
.381198	c2 30		rep #$30	                REP #$30        ; set A&X long
.38119a	6b		rtl		                RTL
.38119b					SOF_INTERRUPT
.38119b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38119f	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811a1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811a5	60		rts		                RTS
.3811a6					MOUSE_INTERRUPT
.3811a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3811a8	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ac	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811ae	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811b2	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3811b6	a2 00 00	ldx #$0000	                LDX #$0000
.3811b9	e2 10		sep #$10	                SEP #$10        ; set X short
.3811bb	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3811bd	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3811c1	e8		inx		                INX
.3811c2	e0 03		cpx #$03	                CPX #$03
.3811c4	d0 1c		bne $3811e2	                BNE EXIT_FOR_NEXT_VALUE
.3811c6	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3811ca	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3811cc	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3811d0	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3811d2	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3811d6	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3811d8	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3811dc	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3811de	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e0	a2 00		ldx #$00	                LDX #$00
.3811e2					EXIT_FOR_NEXT_VALUE
.3811e2	86 e0		stx $e0		                STX MOUSE_PTR
.3811e4	c2 10		rep #$10	                REP #$10        ; set X long
.3811e6	60		rts		                RTS
.3811e7					FDC_INTERRUPT
.3811e7	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811eb	29 40		and #$40	                AND #FNX0_INT06_FDC
.3811ed	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f1	60		rts		                RTS
.3811f2					COM2_INTERRUPT
.3811f2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811f6	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811f8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811fc	60		rts		                RTS
.3811fd					COM1_INTERRUPT
.3811fd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381201	29 10		and #$10	                AND #FNX1_INT04_COM1
.381203	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381207	60		rts		                RTS
.381208					MPU401_INTERRUPT
.381208	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38120c	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38120e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381212	60		rts		                RTS
.381213					LPT1_INTERRUPT
.381213	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381217	29 40		and #$40	                AND #FNX1_INT06_LPT
.381219	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38121d	60		rts		                RTS
.38121e					NMI_HANDLER
.38121e	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR           = $00
=$2a					DEF_WILDCARD_CHAR       = $2A
=$5c					DEF_SEPAR_CHAR1         = $5C
=$2f					DEF_SEPAR_CHAR2         = $2F
=$06					CH_CMD_CHECK_EXIST      = $06
=$0c					CH_CMD_GET_FILE_SIZE    = $0C
=$15					CH_CMD_SET_MODE         = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS       = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0         = $27     ;
=$2c					CH_CMD_WR_DATA          = $2C
=$2f					CH_CMD_SET_FILENAME     = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT       = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN        = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO     = $33
=$36					CH_CMD_FILE_CLOSE       = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE      = $39
=$3a					CH_CMD_BYTE_READ        = $3A
=$3b					CH_CMD_BYTE_RD_GO       = $3B
=$3c					CH_CMD_BYTE_WRITE       = $3C
=$3d					CH_CMD_BYTE_WR_GO       = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS     = $14
=$17					CH376S_STAT_BUF_OVF     = $17
=$1d					CH376S_STAT_DSK_RD      = $1D
=$1e					CH376S_STAT_DSK_WR      = $1E
=$41					CH376S_ERR_OPEN_DIR     = $41
=$42					CH376S_ERR_MISS_FIL     = $42
=$43					CH376S_ERR_FOUND_NAME   = $43
=$82					CH376S_ERR_DISK_DSC     = $82
=$84					CH376S_ERR_LRG_SEC      = $84
=$92					CH376S_ERR_PARTTION     = $92
=$a1					CH376S_ERR_NOT_FORM     = $A1
=$b1					CH376S_ERR_DSK_FULL     = $B1
=$b2					CH376S_FDT_OVER         = $B2
=$b4					CH376S_FILE_CLOSED      = $B4
=$51					CH376S_CMD_RET_SUCCESS  = $51
=$5f					CH376S_CMD_RET_ABORT    = $5F
=$00					SDCARD_PRSNT_NO_CARD    = $00
=$01					SDCARD_PRSNT_CD         = $01
=$02					SDCARD_PRSNT_WP         = $02
=$04					SDCARD_PRSNT_MNTED      = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.0000					fatrec
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c					  reserved  .fill 16
>001c	00 00				  size_l    .word 0
>001e	00 00				  size_h    .word 0
.0000					simplefilestruct
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c	00 00				  size_l    .word 0
>000e	00 00				  size_h    .word 0
.38121f	5c 36 14 38	jmp $381436	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.381223	5c 45 14 38	jmp $381445	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.381227	5c 3f 12 38	jmp $38123f	SDOS_INIT     JML ISDOS_INIT
.38122b	5c cf 12 38	jmp $3812cf	SDOS_DIR      JML ISDOS_DIR
.38122f	5c 4c 13 38	jmp $38134c	SDOS_CHDIR    JML ISDOS_CHDIR
.381233	5c 52 14 38	jmp $381452	SDOS_LOAD     JML ISDOS_READ_FILE
.381237	5c 4d 13 38	jmp $38134d	SDOS_SAVE     JML ISDOS_SAVE
.38123b	5c 4e 13 38	jmp $38134e	SDOS_EXEC     JML ISDOS_EXEC
.38123f	48		pha		ISDOS_INIT    PHA
.381240	da		phx		              PHX
.381241	5a		phy		              PHY
.381242	08		php		              PHP
.381243	0b		phd		              PHD
.381244	48		pha		                PHA             ; begin setdp macro
.381245	08		php		                PHP
.381246	c2 20		rep #$20	                REP #$20        ; set A long
.381248	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.38124b	5b		tcd		                TCD
.38124c	28		plp		                PLP
.38124d	68		pla		                PLA             ; end setdp macro
.38124e	e2 20		sep #$20	                SEP #$20        ; set A short
.381250	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1    ; Read the Pending Register &
.381254	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.381256	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.38125a	a9 06		lda #$06	              LDA #CH_CMD_CHECK_EXIST
.38125c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381260	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381263	a9 a8		lda #$a8	              LDA #$A8
.381265	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381269					    CHK_LOOP
.381269	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38126c	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38126f	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381272	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA  ; the data returned must be the complement
.381276	c9 57		cmp #$57	              CMP #~$A8;  $57
.381278	d0 ef		bne $381269	              BNE CHK_LOOP
.38127a	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.38127d	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.38127f	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381283	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381286	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.381289	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.38128b	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.38128f					    ISDOS_WAIT_FOR_MODE_SW
.38128f	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA ; Wait 0.6us
.381292	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381296	c9 51		cmp #$51	              CMP #$51         ; CMD_RET_SUCCESS = 051H, CMD_RET_ABORT = 05FH
.381298	f0 06		beq $3812a0	              BEQ CHK_SET_OK
.38129a	c9 5f		cmp #$5f	              CMP #$5F
.38129c	f0 09		beq $3812a7	              BEQ CHK_SET_NOK
.38129e	d0 ef		bne $38128f	              BNE ISDOS_WAIT_FOR_MODE_SW
.3812a0					    CHK_SET_OK
.3812a0	a9 01		lda #$01	              LDA #SDCARD_PRSNT_CD
.3812a2	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812a5	80 07		bra $3812ae	              BRA SD_INIT_DONE
.3812a7					    CHK_SET_NOK
.3812a7	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.3812a9	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812ac	80 00		bra $3812ae	              BRA SD_INIT_DONE
.3812ae					    SD_INIT_DONE
.3812ae	2b		pld		              PLD
.3812af	28		plp		              PLP
.3812b0	7a		ply		              PLY
.3812b1	fa		plx		              PLX
.3812b2	68		pla		              PLA
.3812b3	6b		rtl		              RTL
.3812b4					ISDOS_CLEAR_FAT_REC
.3812b4	0b		phd		              PHD
.3812b5	48		pha		                PHA             ; begin setdp macro
.3812b6	08		php		                PHP
.3812b7	c2 20		rep #$20	                REP #$20        ; set A long
.3812b9	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812bc	5b		tcd		                TCD
.3812bd	28		plp		                PLP
.3812be	68		pla		                PLA             ; end setdp macro
.3812bf	a0 00 00	ldy #$0000	              LDY #0
.3812c2	a9 00 00	lda #$0000	              LDA #0
.3812c5					    CLEAR_LOOP
.3812c5	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3812c7	c8		iny		              INY
.3812c8	c0 20 00	cpy #$0020	              CPY #32
.3812cb	d0 f8		bne $3812c5	              BNE CLEAR_LOOP
.3812cd	2b		pld		              PLD
.3812ce	60		rts		              RTS
.3812cf	48		pha		ISDOS_DIR     PHA
.3812d0	da		phx		              PHX
.3812d1	5a		phy		              PHY
.3812d2	0b		phd		              PHD
.3812d3	08		php		              PHP
.3812d4	48		pha		                PHA             ; begin setdp macro
.3812d5	08		php		                PHP
.3812d6	c2 20		rep #$20	                REP #$20        ; set A long
.3812d8	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812db	5b		tcd		                TCD
.3812dc	28		plp		                PLP
.3812dd	68		pla		                PLA             ; end setdp macro
.3812de	e2 20		sep #$20	                SEP #$20        ; set A short
.3812e0	c2 10		rep #$10	                REP #$10        ; set X long
.3812e2	20 4f 13	jsr $38134f	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.3812e5	20 b4 12	jsr $3812b4	              JSR ISDOS_CLEAR_FAT_REC
.3812e8	20 84 13	jsr $381384	              JSR SDOS_FILE_OPEN     ; Now that the file name is set, go open File
.3812eb	a2 00 00	ldx #$0000	              LDX #0 ; count the number of items displayed - limit to 38
.3812ee					    ISDOS_NEXT_ENTRY
.3812ee	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.3812f0	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3812f4	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.3812f7	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA        ;  Load Data Length - should be 32 - we don't care.
.3812fb	a0 00 00	ldy #$0000	              LDY #0
.3812fe					    FAT_REC_LOOP
.3812fe	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA       ; Wait 0.6us
.381301	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381305	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381307	c8		iny		              INY
.381308	c0 20 00	cpy #$0020	              CPY #32
.38130b	d0 f1		bne $3812fe	              BNE FAT_REC_LOOP
.38130d	c2 20		rep #$20	                REP #$20        ; set A long
.38130f	a0 1c 00	ldy #$001c	              LDY #28
.381312	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.381314	a0 0c 00	ldy #$000c	              LDY #12
.381317	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381319	a0 1e 00	ldy #$001e	              LDY #30
.38131c	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.38131e	a0 0e 00	ldy #$000e	              LDY #14
.381321	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381323	a5 17		lda $0337	              LDA SDOS_FILE_REC_PTR
.381325	18		clc		              CLC
.381326	69 10 00	adc #$0010	              ADC #$10
.381329	85 17		sta $0337	              STA SDOS_FILE_REC_PTR
.38132b	e2 20		sep #$20	                SEP #$20        ; set A short
.38132d	e8		inx		              INX
.38132e	e0 40 00	cpx #$0040	              CPX #64
.381331	f0 10		beq $381343	              BEQ ISDOS_DIR_DONE
.381333	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.381336	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.381338	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.38133c	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.38133f	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.381341	f0 ab		beq $3812ee	              BEQ ISDOS_NEXT_ENTRY
.381343					    ISDOS_DIR_DONE
.381343	20 d5 13	jsr $3813d5	              JSR SDOS_FILE_CLOSE
.381346	28		plp		              PLP
.381347	2b		pld		              PLD
.381348	7a		ply		              PLY
.381349	fa		plx		              PLX
.38134a	68		pla		              PLA
.38134b	6b		rtl		              RTL
.38134c	00		brk #		ISDOS_CHDIR   BRK;
.38134d	00		brk #		ISDOS_SAVE    BRK;
.38134e	00		brk #		ISDOS_EXEC    BRK;
.38134f					ISDOS_MOUNT_CARD
.38134f	e2 20		sep #$20	                SEP #$20        ; set A short
.381351	c2 10		rep #$10	                REP #$10        ; set X long
.381353	a0 00 00	ldy #$0000	              LDY #$0000
.381356	a9 01		lda #$01	              LDA #$01
.381358	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.38135b					    TRY_MOUNT_AGAIN
.38135b	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.38135d	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD              ;
.381361	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT       ;
.381364	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.381366	f0 09		beq $381371	              BEQ ISDOS_MOUNTED
.381368	c8		iny		              INY
.381369	c0 05 00	cpy #$0005	              CPY #$0005
.38136c	d0 ed		bne $38135b	              BNE TRY_MOUNT_AGAIN
.38136e	4c 79 13	jmp $381379	              JMP SDCARD_ERROR_MOUNT
.381371					    ISDOS_MOUNTED
.381371	ad 3f 00	lda $003f	              LDA SDCARD_PRSNT_MNT
.381374	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.381376	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.381378	60		rts		              RTS
.381379					    SDCARD_ERROR_MOUNT
.381379	a2 6d 16	ldx #$166d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.38137c	00		brk #		              BRK
.38137d	60		rts		              RTS
.38137e					    ISDOS_NO_CARD
.38137e	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.381380	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.381383	60		rts		              RTS
.381384					SDOS_FILE_OPEN
.381384	8b		phb		              PHB
.381385	a2 00 00	ldx #$0000	              LDX #0
.381388	a0 01 00	ldy #$0001	              LDY #1
.38138b	a9 2f		lda #$2f	              LDA #'/'
.38138d	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.381391	e8		inx		              INX
.381392	48		pha		                PHA             ; begin setdbr macro
.381393	08		php		                PHP
.381394	e2 20		sep #$20	                SEP #$20        ; set A short
.381396	a9 38		lda #$38	                LDA #`sd_card_dir_string
.381398	48		pha		                PHA
.381399	ab		plb		                PLB
.38139a	28		plp		                PLP
.38139b	68		pla		                PLA             ; end setdbr macro
.38139c					    ISDOS_DIR_TRF
.38139c	b9 8a 15	lda $38158a,y	              LDA sd_card_dir_string,Y
.38139f	c9 2f		cmp #$2f	              CMP #'/'
.3813a1	f0 0c		beq $3813af	              BEQ FO_READ_SLASH
.3813a3	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813a7	e8		inx		              INX
.3813a8	c8		iny		              INY
.3813a9	c9 00		cmp #$00	              CMP #0
.3813ab	f0 0c		beq $3813b9	              BEQ FO_READ_END_PATH
.3813ad	80 ed		bra $38139c	              BRA ISDOS_DIR_TRF  ; path string must be 0 terminated
.3813af					    FO_READ_SLASH
.3813af	a9 00		lda #$00	              LDA #0
.3813b1	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813b5	e8		inx		              INX
.3813b6	c8		iny		              INY
.3813b7	a9 2f		lda #$2f	              LDA #'/'
.3813b9					    FO_READ_END_PATH
.3813b9	48		pha		              PHA
.3813ba	20 e8 13	jsr $3813e8	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.3813bd	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813c0	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.3813c2	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813c6	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813c9	68		pla		              PLA
.3813ca	c9 00		cmp #$00	              CMP #0
.3813cc	f0 05		beq $3813d3	              BEQ FO_DONE
.3813ce	a2 00 00	ldx #$0000	              LDX #0
.3813d1	80 c9		bra $38139c	              BRA ISDOS_DIR_TRF
.3813d3					    FO_DONE
.3813d3	ab		plb		              PLB
.3813d4	60		rts		              RTS
.3813d5					SDOS_FILE_CLOSE
.3813d5	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.3813d7	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813db	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813de	a9 00		lda #$00	              LDA #$00                ; FALSE
.3813e0	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3813e4	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813e7	60		rts		              RTS
.3813e8					SDOS_SET_FILE_NAME
.3813e8	da		phx		              PHX
.3813e9	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.3813eb	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3813ef	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.3813f2	a2 00 00	ldx #$0000	              LDX #$0000
.3813f5					    SDOS_SET_FILE_LOOP
.3813f5	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.3813f9	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3813fd	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381400	e8		inx		              INX
.381401	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.381403	d0 f0		bne $3813f5	              BNE SDOS_SET_FILE_LOOP
.381405	fa		plx		              PLX
.381406	60		rts		              RTS
.381407					DLYCMD_2_DTA
.381407	ea		nop		              NOP
.381408	ea		nop		              NOP
.381409	ea		nop		              NOP
.38140a	ea		nop		              NOP
.38140b	ea		nop		              NOP
.38140c					DLYDTA_2_DTA
.38140c	ea		nop		              NOP
.38140d	ea		nop		              NOP
.38140e	ea		nop		              NOP
.38140f	ea		nop		              NOP
.381410	ea		nop		              NOP
.381411	60		rts		              RTS
.381412					SDCARD_WAIT_4_INT
.381412	e2 20		sep #$20	                SEP #$20        ; set A short
.381414					    SDCARD_BUSY_INT
.381414	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1   ; Check to See if the Pending Register for the SD_INT is Set
.381418	29 80		and #$80	              AND #FNX1_INT07_SDCARD   ;
.38141a	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.38141c	d0 f6		bne $381414	              BNE SDCARD_BUSY_INT      ; Go Check again to see if it is checked
.38141e	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1   ;Interrupt as occured, clear the Pending Register for next time.
.381422	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA ;
.381425	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA ;
.381428	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.38142a	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38142e	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.381431	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA;
.381435	60		rts		              RTS           ;
.381436					ISDOS_CHK_CD
.381436	e2 20		sep #$20	                SEP #$20        ; set A short
.381438	18		clc		              CLC
.381439	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.38143d	29 01		and #$01	              AND #$01
.38143f	c9 01		cmp #$01	              CMP #$01
.381441	f0 01		beq $381444	              BEQ SDCD_NOT_PRST;
.381443	38		sec		              SEC
.381444					    SDCD_NOT_PRST
.381444	60		rts		              RTS
.381445					ISDOS_CHK_WP
.381445	e2 20		sep #$20	                SEP #$20        ; set A short
.381447	18		clc		              CLC
.381448	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.38144c	29 02		and #$02	              AND #$02
.38144e	d0 01		bne $381451	              BNE SDCD_NOT_WP;
.381450	38		sec		              SEC
.381451					    SDCD_NOT_WP
.381451	60		rts		              RTS
.381452					ISDOS_READ_FILE
.381452	20 84 13	jsr $381384	              JSR SDOS_FILE_OPEN   ; open the file
.381455	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381459	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.38145b	f0 03		beq $381460	              BEQ SDOS_READ_FILE_KEEP_GOING
.38145d	82 80 00	brl $3814e0	              BRL SDOS_READ_DONE
.381460					    SDOS_READ_FILE_KEEP_GOING
.381460	c2 20		rep #$20	                REP #$20        ; set A long
.381462	20 4e 15	jsr $38154e	              JSR SDOS_SET_FILE_LENGTH;
.381465	a9 00 00	lda #$0000	              LDA #$0000
.381468	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.38146c	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.381470	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.381474	e2 20		sep #$20	                SEP #$20        ; set A short
.381476					    SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.381476	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.381478	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38147c	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.38147f	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.381483	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381487	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.38148a	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.38148e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381492	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.381495	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.381497	f0 03		beq $38149c	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.381499	82 44 00	brl $3814e0	              BRL SDOS_READ_DONE
.38149c					    SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.38149c	20 5b 15	jsr $38155b	              JSR SDOS_READ_BLOCK
.38149f	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.3814a1	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3814a5	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.3814a8	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.3814aa	d0 05		bne $3814b1	              BNE SDOS_READ_PROC_DONE
.3814ac	20 e3 14	jsr $3814e3	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.3814af	80 eb		bra $38149c	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.3814b1					    SDOS_READ_PROC_DONE
.3814b1	c2 20		rep #$20	                REP #$20        ; set A long
.3814b3	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.3814b7	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.3814ba	d0 24		bne $3814e0	              BNE SDOS_READ_DONE                  ; if it equal 64K, then the file is bigger than 64K
.3814bc	af 28 01 00	lda $000128	              LDA @lADDER_R
.3814c0	8f 20 01 00	sta $000120	              STA @lADDER_A
.3814c4	af 2a 01 00	lda $00012a	              LDA @lADDER_R+2
.3814c8	8f 22 01 00	sta $000122	              STA @lADDER_A+2
.3814cc	20 4e 15	jsr $38154e	              JSR SDOS_SET_FILE_LENGTH ;
.3814cf	20 34 15	jsr $381534	              JSR SDOS_COMPUTE_LOCATE_POINTER
.3814d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3814d4	20 ff 14	jsr $3814ff	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.3814d7	20 12 14	jsr $381412	              JSR SDCARD_WAIT_4_INT
.3814da	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.3814dc	d0 d3		bne $3814b1	              BNE SDOS_READ_PROC_DONE
.3814de	80 96		bra $381476	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.3814e0					    SDOS_READ_DONE
.3814e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814e2	6b		rtl		              RTL
.3814e3					SDOS_ADJUST_POINTER
.3814e3	c2 20		rep #$20	                REP #$20        ; set A long
.3814e5	18		clc		              CLC
.3814e6	af 38 00 00	lda $000038	              LDA SDCARD_FILE_PTR ;Load the Pointer
.3814ea	6f 3c 00 00	adc $00003c	              ADC SDCARD_BYTE_NUM
.3814ee	8f 38 00 00	sta $000038	              STA SDCARD_FILE_PTR;
.3814f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3814f4	af 3a 00 00	lda $00003a	              LDA SDCARD_FILE_PTR+2;
.3814f8	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.3814fa	8f 3a 00 00	sta $00003a	              STA SDCARD_FILE_PTR+2;
.3814fe					    SDOS_ADJ_DONE
.3814fe	60		rts		              RTS
.3814ff					SDOS_BYTE_LOCATE
.3814ff	e2 20		sep #$20	                SEP #$20        ; set A short
.381501	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.381503	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381507	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA
.38150a	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.38150e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381512	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381515	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.381519	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.38151d	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.381520	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.381524	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381528	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA
.38152b	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.38152f	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381533	60		rts		              RTS
.381534					SDOS_COMPUTE_LOCATE_POINTER
.381534	c2 20		rep #$20	                REP #$20        ; set A long
.381536	18		clc		              CLC
.381537	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.38153b	69 ff ff	adc #$ffff	              ADC #$FFFF
.38153e	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.381542	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.381546	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.381549	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.38154d	60		rts		              RTS
.38154e					SDOS_SET_FILE_LENGTH
.38154e	a5 0a		lda $032a	              LDA SDOS_FILE_SIZE + 2
.381550	f0 02		beq $381554	              BEQ SFL_DONE
.381552	7a		ply		              PLY ; deplete the stack to return back to the long jump
.381553	6b		rtl		              RTL
.381554					    SFL_DONE
.381554	a5 08		lda $0328	              LDA SDOS_FILE_SIZE
.381556	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.38155a	60		rts		              RTS
.38155b					SDOS_READ_BLOCK
.38155b	0b		phd		              PHD
.38155c	48		pha		                PHA             ; begin setdp macro
.38155d	08		php		                PHP
.38155e	c2 20		rep #$20	                REP #$20        ; set A long
.381560	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.381563	5b		tcd		                TCD
.381564	28		plp		                PLP
.381565	68		pla		                PLA             ; end setdp macro
.381566	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.381568	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.38156c	20 07 14	jsr $381407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.38156f	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.381573	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.381575	20 0c 14	jsr $38140c	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.381578	a0 00 00	ldy #$0000	              LDY #$0000
.38157b					    SDOS_READ_MORE
.38157b	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.38157f	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.381581	c8		iny		              INY
.381582	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.381584	d0 f5		bne $38157b	              BNE SDOS_READ_MORE
.381586	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.381588	2b		pld		              PLD
.381589	60		rts		              RTS
>38158a	2f 2a 00			sd_card_dir_string  .text '/*' ,$00
>38158d	00 00 00 00 00 00 00 00		                    .fill 128-3,0  ; leave space for the path
>381595	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>381605	00 00 00 00 00
>38160a	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>381612	44 20 50 52 45 53 45 4e 54 0d 00
>38161d	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>381625	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>381633	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>38163b	41 44 49 4e 47 20 46 49 4c 45 00
>381646	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>38164e	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>381656	45 54 45 43 54 45 44 00
>38165e	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>381666	4f 55 4e 54 45 44 00
>38166d	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>381675	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>381685	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>38168d	4e 45 44 0d 00
>381692	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>38169a	49 4e 45 2e 2e 2e 00
>3816a1	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>3816a9	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>3816b8	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>3816c0	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe700				OPL2_S_BASE                 = $AFE700
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3816c4	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3816cc	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3816dc	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3816e4	12
>3816e5	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3816ed	15
>3816ee	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3816f4	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3816f9	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3816ff	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>381707	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>381715	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>38171d	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>38172b	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>381733	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>381741	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>381749	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>381757	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>38175f	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>38176d	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>381775	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>381783	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>38178b	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>381799	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3817a1	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3817af	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3817b7	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3817c5	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3817cd	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3817db	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3817e3	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3817f1	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3817f9	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>381807	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>38180f	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>38181d	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>381825	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>381833	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>38183b	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>381849	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>381851	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>38185f	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>381867	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>381875	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>38187d	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>38188b	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>381893	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3818a1	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3818a9	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3818b7	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3818bf	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3818cd	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3818d5	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3818e3	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3818eb	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3818f9	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>381901	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>38190f	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>381917	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>381925	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>38192d	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>38193b	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>381943	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>381951	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>381959	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>381967	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>38196f	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>38197d	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>381985	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>381993	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>38199b	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3819a9	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3819b1	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3819bf	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3819c7	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3819d5	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3819dd	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3819eb	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3819f3	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>381a01	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>381a09	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>381a17	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>381a1f	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>381a2d	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>381a35	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>381a43	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>381a4b	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>381a59	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>381a61	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>381a6f	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>381a77	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>381a85	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>381a8d	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>381a9b	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>381aa3	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>381ab1	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>381ab9	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>381ac7	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>381acf	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>381add	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>381ae5	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>381af3	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>381afb	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>381b09	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>381b11	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>381b1f	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>381b27	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>381b35	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>381b3d	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>381b4b	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>381b53	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>381b61	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>381b69	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>381b77	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>381b7f	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>381b8d	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>381b95	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>381ba3	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>381bab	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>381bb9	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>381bc1	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>381bcf	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>381bd7	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>381be5	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>381bed	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>381bfb	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>381c03	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>381c11	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>381c19	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>381c27	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>381c2f	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>381c3d	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>381c45	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>381c53	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>381c5b	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>381c69	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>381c71	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>381c7f	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>381c87	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>381c95	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>381c9d	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>381cab	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>381cb3	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>381cc1	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>381cc9	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>381cd7	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>381cdf	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>381ced	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>381cf5	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>381d03	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>381d0b	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>381d19	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>381d21	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>381d2f	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>381d37	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>381d45	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>381d4d	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>381d5b	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>381d63	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>381d71	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>381d79	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>381d87	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>381d8f	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>381d9d	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>381da5	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>381db3	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>381dbb	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>381dc9	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>381dd1	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>381ddf	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>381de7	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>381df5	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>381dfd	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>381e0b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>381e13	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>381e21	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>381e29	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>381e37	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>381e3f	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>381e4d	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>381e55	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>381e63	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>381e6b	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>381e79	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>381e81	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>381e8f	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>381e97	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>381ea5	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>381ead	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>381ebb	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>381ec3	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>381ed1	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>381ed9	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>381ee7	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>381eef	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>381efd	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>381f05	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>381f13	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>381f1b	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>381f29	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>381f31	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>381f3f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>381f47	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>381f55	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>381f5d	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>381f6b	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>381f73	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>381f81	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>381f89	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>381f97	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>381f9f	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>381fad	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>381fb5	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>381fc3	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>381fcb	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>381fd9	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>381fe1	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>381fef	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>381ff7	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>382005	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>38200d	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>38201b	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>382023	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>382031	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>382039	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>382047	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>38204f	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>38205d	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>382065	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>382073	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>38207b	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>382089	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>382091	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>38209f	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3820a7	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3820b5	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3820bd	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3820cb	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3820d3	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3820e1	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3820e9	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3820f7	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>3820ff	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>38210d	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>382115	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>382123	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>38212b	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>382139	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>382141	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>38214f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>382157	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>382165	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>38216d	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>38217b	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>382183	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>382191	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>382199	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3821a7	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3821af	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3821bd	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3821c5	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3821d3	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3821db	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3821e9	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3821f1	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3821ff	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>382207	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>382215	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>38221d	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>38222b	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>382233	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>382241	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>382249	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>382257	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>38225f	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>38226d	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>382275	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>382283	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>38228b	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>382299	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3822a1	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3822af	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3822b7	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3822c5	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3822cd	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3822db	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3822e3	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3822f1	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3822f9	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>382307	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>38230f	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>38231d	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>382325	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>382333	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>38233b	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>382349	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>382351	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>38235f	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>382367	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>382375	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>38237d	00 87 fa 00
>382381	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>382389	00 88 98 03
>38238d	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>382395	00 88 98 03
>382399	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823a1	00 f9 69 00
>3823a5	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3823ad	80 e8 4a 00
>3823b1	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3823b9	00 f6 9a 00
>3823bd	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3823c5	1b f2 34 00
>3823c9	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3823d1	00 f7 8a 00
>3823d5	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3823dd	00 f6 47 00
>3823e1	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823e9	00 f9 69 00
>3823ed	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3823f5	00 f7 a9 00
>3823f9	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>382401	00 87 fa 00
>382405	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>38240d	00 f7 a9 00
>382411	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382419	00 f5 f5 00
>38241d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>382425	06 b8 d8 03
>382429	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382431	00 f5 f5 00
>382435	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>38243d	06 b8 d8 03
>382441	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382449	00 f5 f5 00
>38244d	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>382455	10 74 f8 03
>382459	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382461	00 f5 f5 00
>382465	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>38246d	00 f5 f5 00
>382471	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382479	05 c5 d4 03
>38247d	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382485	00 f5 f5 00
>382489	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382491	04 f9 44 03
>382495	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>38249d	05 c5 d4 03
>3824a1	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824a9	04 f9 44 03
>3824ad	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3824b5	03 87 f7 03
>3824b9	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824c1	05 c5 d4 03
>3824c5	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3824cd	00 f6 28 00
>3824d1	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824d9	05 c5 d4 03
>3824dd	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3824e5	00 f5 f7 01
>3824e9	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824f1	04 f9 44 03
>3824f5	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3824fd	00 99 f9 00
>382501	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>382509	00 a8 f7 00
>38250d	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382515	00 99 f9 00
>382519	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>382521	00 a6 f6 00
>382525	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>38252d	00 a6 f6 00
>382531	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>382539	00 f6 36 02
>38253d	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>382545	00 f6 36 02
>382549	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382551	00 96 e8 01
>382555	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>38255d	00 96 e8 01
>382561	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382569	02 79 77 03
>38256d	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382575	02 79 77 03
>382579	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>382581	00 a5 2b 02
>382585	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>38258d	00 93 3b 02
>382591	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>382599	01 89 3b 03
>38259d	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3825a5	0a 53 2b 02
>3825a9	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3825b1	00 f6 89 00
>3825b5	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825bd	00 f6 9a 00
>3825c1	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825c9	00 f6 9a 00
>3825cd	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3825d5	00 87 4b 01
>3825d9	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3825e1	00 78 67 01
>3825e5	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3825ed	02 f8 fc 00
>3825f1	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3825f9	40 f5 f5 00
>3825fd	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382605	02 79 77 03
>382609	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382611	40 f5 f5 00
>382615	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>38261d	40 f5 f5 00
>382621	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>382629	00 f9 69 00
>38262d	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>382635	00 f9 69 00
>382639	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382641	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>382645	75 23 38 00 81 23 38 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>38264d	8d 23 38 00 99 23 38 00
>382655	a5 23 38 00 b1 23 38 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>38265d	bd 23 38 00 c9 23 38 00
>382665	d5 23 38 00 e1 23 38 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>38266d	ed 23 38 00 f9 23 38 00
>382675	05 24 38 00 11 24 38 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>38267d	1d 24 38 00 29 24 38 00
>382685	35 24 38 00 41 24 38 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>38268d	4d 24 38 00 59 24 38 00
>382695	65 24 38 00 71 24 38 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>38269d	7d 24 38 00 89 24 38 00
>3826a5	95 24 38 00 a1 24 38 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3826ad	ad 24 38 00 b9 24 38 00
>3826b5	c5 24 38 00 d1 24 38 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3826bd	dd 24 38 00 e9 24 38 00
>3826c5	f5 24 38 00 01 25 38 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3826cd	0d 25 38 00 19 25 38 00
>3826d5	25 25 38 00 31 25 38 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3826dd	3d 25 38 00 49 25 38 00
>3826e5	55 25 38 00 61 25 38 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3826ed	6d 25 38 00 79 25 38 00
>3826f5	85 25 38 00 91 25 38 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3826fd	9d 25 38 00 a9 25 38 00
>382705	b5 25 38 00 c1 25 38 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>38270d	cd 25 38 00 d9 25 38 00
>382715	e5 25 38 00 f1 25 38 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>38271d	fd 25 38 00 09 26 38 00
>382725	15 26 38 00 21 26 38 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>38272d	2d 26 38 00 39 26 38 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>382735	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>38273d	00 b1 f5 01
>382741	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>382749	03 f1 f5 00
>38274d	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>382755	03 c1 f5 00
>382759	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>382761	00 92 f5 01
>382765	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>38276d	00 f1 f9 00
>382771	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>382779	00 f1 f5 00
>38277d	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>382785	02 81 f6 01
>382789	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>382791	00 c2 b9 01
>382795	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>38279d	05 b2 35 00
>3827a1	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3827a9	1b f2 34 00
>3827ad	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3827b5	01 f5 74 00
>3827b9	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3827c1	00 61 e3 00
>3827c5	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3827cd	00 a4 64 00
>3827d1	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3827d9	07 b5 f5 00
>3827dd	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3827e5	00 f3 74 00
>3827e9	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3827f1	00 c3 94 01
>3827f5	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3827fd	00 f4 0d 01
>382801	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>382809	00 f5 0b 01
>38280d	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>382815	00 bf 07 00
>382819	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>382821	00 6d 08 01
>382825	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>38282d	00 51 17 01
>382831	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>382839	00 51 17 01
>38283d	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>382845	00 53 08 01
>382849	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>382851	00 53 06 01
>382855	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>38285d	00 d2 f8 00
>382861	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>382869	00 e2 c7 01
>38286d	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>382875	00 f1 9c 00
>382879	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>382881	02 f2 c9 01
>382885	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>38288d	03 95 fb 00
>382891	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>382899	04 a1 59 00
>38289d	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3828a5	03 91 fc 03
>3828a9	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3828b1	02 b4 ec 00
>3828b5	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3828bd	00 93 f7 00
>3828c1	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3828c9	04 c1 58 00
>3828cd	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3828d5	02 c3 6a 00
>3828d9	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3828e1	00 62 87 00
>3828e5	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3828ed	00 f3 97 00
>3828f1	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3828f9	00 b3 97 00
>3828fd	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>382905	04 f3 cc 00
>382909	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>382911	00 93 aa 00
>382915	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>38291d	00 78 08 01
>382921	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>382929	00 78 08 01
>38292d	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>382935	00 54 27 01
>382939	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>382941	00 61 56 00
>382945	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>38294d	00 75 16 01
>382951	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>382959	00 f5 f6 01
>38295d	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>382965	80 f3 e3 00
>382969	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>382971	00 b5 f5 00
>382975	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>38297d	80 71 16 00
>382981	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>382989	00 30 55 01
>38298d	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>382995	00 62 36 01
>382999	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3829a1	02 51 07 00
>3829a5	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3829ad	00 62 39 00
>3829b1	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3829b9	00 66 27 00
>3829bd	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3829c5	00 73 46 00
>3829c9	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3829d1	00 74 76 01
>3829d5	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3829dd	81 92 38 00
>3829e1	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3829e9	02 71 19 00
>3829ed	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3829f5	01 81 09 00
>3829f9	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>382a01	00 83 4b 02
>382a05	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>382a0d	05 71 59 00
>382a11	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>382a19	03 82 39 00
>382a1d	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>382a25	82 84 17 00
>382a29	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>382a31	02 72 16 00
>382a35	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>382a3d	00 7b 0a 00
>382a41	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>382a49	00 85 0c 01
>382a4d	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>382a55	00 7b 0a 01
>382a59	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>382a61	00 79 18 01
>382a65	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>382a6d	01 73 08 00
>382a71	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>382a79	04 77 0a 00
>382a7d	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>382a85	00 51 19 00
>382a89	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>382a91	01 74 09 00
>382a95	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>382a9d	01 63 28 00
>382aa1	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>382aa9	00 65 0a 00
>382aad	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>382ab5	00 67 29 00
>382ab9	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>382ac1	00 67 09 00
>382ac5	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>382acd	01 6a 28 00
>382ad1	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>382ad9	00 55 27 00
>382add	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>382ae5	00 6f 08 00
>382ae9	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>382af1	00 7a 07 00
>382af5	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>382afd	06 a2 0d 00
>382b01	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>382b09	00 a3 5f 00
>382b0d	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>382b15	00 42 27 00
>382b19	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>382b21	05 b2 49 00
>382b25	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>382b2d	00 b2 79 01
>382b31	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>382b39	00 7a 1a 00
>382b3d	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>382b45	00 82 28 01
>382b49	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>382b51	02 c3 5f 00
>382b55	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>382b5d	86 c4 95 01
>382b61	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>382b69	00 44 15 00
>382b6d	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>382b75	00 d1 06 00
>382b79	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>382b81	00 82 37 00
>382b85	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>382b8d	00 41 35 00
>382b91	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>382b99	02 32 f5 01
>382b9d	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>382ba5	00 61 26 00
>382ba9	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>382bb1	84 3f 05 01
>382bb5	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>382bbd	01 d1 f6 00
>382bc1	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>382bc9	00 41 05 01
>382bcd	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>382bd5	05 f3 e4 00
>382bd9	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>382be1	00 92 f5 01
>382be5	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>382bed	04 f2 e4 01
>382bf1	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>382bf9	00 45 25 00
>382bfd	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>382c05	01 a3 36 00
>382c09	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>382c11	01 98 05 01
>382c15	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>382c1d	02 a3 f6 01
>382c21	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>382c29	00 f6 f8 00
>382c2d	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>382c35	00 f3 f5 00
>382c39	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>382c41	00 94 e5 01
>382c45	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>382c4d	00 84 44 00
>382c51	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>382c59	03 83 18 01
>382c5d	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>382c65	01 78 08 01
>382c69	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>382c71	03 8e 08 01
>382c75	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>382c7d	09 f2 46 00
>382c81	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382c89	00 96 e8 01
>382c8d	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>382c95	00 f6 f6 01
>382c99	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382ca1	00 f6 9a 00
>382ca5	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382cad	00 c6 45 00
>382cb1	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>382cb9	00 f4 b4 00
>382cbd	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>382cc5	00 d5 25 00
>382cc9	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>382cd1	0e 21 2d 00
>382cd5	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>382cdd	00 55 87 02
>382ce1	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>382ce9	08 98 87 01
>382ced	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>382cf5	04 17 04 03
>382cf9	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>382d01	05 77 f9 02
>382d05	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>382d0d	02 f4 08 00
>382d11	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>382d19	00 36 05 01
>382d1d	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>382d25	05 32 55 03
>382d29	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>382d31	00 f3 df 00
>382d35	35 27 38 00 41 27 38 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>382d3d	4d 27 38 00 59 27 38 00 65 27 38 00 71 27 38 00
>382d4d	7d 27 38 00 89 27 38 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>382d55	95 27 38 00 a1 27 38 00 ad 27 38 00 b9 27 38 00
>382d65	c5 27 38 00 d1 27 38 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>382d6d	dd 27 38 00 e9 27 38 00 f5 27 38 00 01 28 38 00
>382d7d	0d 28 38 00 19 28 38 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>382d85	25 28 38 00 31 28 38 00 3d 28 38 00 49 28 38 00
>382d95	55 28 38 00 61 28 38 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>382d9d	6d 28 38 00 79 28 38 00 85 28 38 00 91 28 38 00
>382dad	9d 28 38 00 a9 28 38 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>382db5	b5 28 38 00 c1 28 38 00 cd 28 38 00 d9 28 38 00
>382dc5	e5 28 38 00 f1 28 38 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>382dcd	fd 28 38 00 09 29 38 00 15 29 38 00 21 29 38 00
>382ddd	2d 29 38 00 39 29 38 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>382de5	45 29 38 00 51 29 38 00 5d 29 38 00 69 29 38 00
>382df5	75 29 38 00 81 29 38 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>382dfd	8d 29 38 00 99 29 38 00 a5 29 38 00 b1 29 38 00
>382e0d	bd 29 38 00 c9 29 38 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>382e15	d5 29 38 00 e1 29 38 00 ed 29 38 00 f9 29 38 00
>382e25	05 2a 38 00 11 2a 38 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>382e2d	1d 2a 38 00 29 2a 38 00 35 2a 38 00 41 2a 38 00
>382e3d	4d 2a 38 00 59 2a 38 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>382e45	65 2a 38 00 71 2a 38 00 7d 2a 38 00 89 2a 38 00
>382e55	95 2a 38 00 a1 2a 38 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>382e5d	ad 2a 38 00 b9 2a 38 00 c5 2a 38 00 d1 2a 38 00
>382e6d	dd 2a 38 00 e9 2a 38 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>382e75	f5 2a 38 00 01 2b 38 00 0d 2b 38 00 19 2b 38 00
>382e85	25 2b 38 00 31 2b 38 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>382e8d	3d 2b 38 00 49 2b 38 00 55 2b 38 00 61 2b 38 00
>382e9d	6d 2b 38 00 79 2b 38 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>382ea5	85 2b 38 00 91 2b 38 00 9d 2b 38 00 a9 2b 38 00
>382eb5	b5 2b 38 00 c1 2b 38 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>382ebd	cd 2b 38 00 d9 2b 38 00 e5 2b 38 00 f1 2b 38 00
>382ecd	fd 2b 38 00 09 2c 38 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>382ed5	15 2c 38 00 21 2c 38 00 2d 2c 38 00 39 2c 38 00
>382ee5	45 2c 38 00 51 2c 38 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>382eed	5d 2c 38 00 69 2c 38 00 75 2c 38 00 81 2c 38 00
>382efd	8d 2c 38 00 99 2c 38 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>382f05	a5 2c 38 00 b1 2c 38 00 bd 2c 38 00 c9 2c 38 00
>382f15	d5 2c 38 00 e1 2c 38 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>382f1d	ed 2c 38 00 f9 2c 38 00 05 2d 38 00 11 2d 38 00
>382f2d	1d 2d 38 00 29 2d 38 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>382f35	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>382f3d	0d f2 f7 00
>382f41	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>382f49	07 f2 f7 00
>382f4d	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>382f55	07 f2 f6 00
>382f59	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>382f61	07 f2 f7 00
>382f65	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f6d	07 f2 f7 00
>382f71	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f79	07 f2 f7 00
>382f7d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f85	00 00 00 00
>382f89	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f91	00 00 00 00
>382f95	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f9d	00 00 00 00
>382fa1	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>382fa9	87 f2 f1 00
>382fad	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>382fb5	07 f4 f4 00
>382fb9	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>382fc1	07 f2 f6 00
>382fc5	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>382fcd	07 e7 f7 00
>382fd1	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>382fd9	07 f6 f6 00
>382fdd	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>382fe5	87 a3 f3 00
>382fe9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ff1	00 00 00 00
>382ff5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ffd	00 00 00 00
>383001	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383009	00 00 00 00
>38300d	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>383015	07 8a 08 00
>383019	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>383021	07 55 14 00
>383025	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>38302d	87 55 04 00
>383031	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>383039	07 46 1a 00
>38303d	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>383045	07 61 07 00
>383049	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>383051	90 61 07 00
>383055	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38305d	00 00 00 00
>383061	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383069	00 00 00 00
>38306d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383075	00 00 00 00
>383079	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>383081	87 f3 f8 00
>383085	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>38308d	07 f6 3a 00
>383091	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>383099	0c 84 19 00
>38309d	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3830a5	07 94 19 00
>3830a9	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3830b1	87 d1 f8 00
>3830b5	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3830bd	07 c3 a6 00
>3830c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830c9	00 00 00 00
>3830cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830d5	00 00 00 00
>3830d9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830e1	00 00 00 00
>3830e5	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3830ed	47 f2 df 00
>3830f1	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3830f9	0f a1 df 00
>3830fd	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>383105	07 f1 78 00
>383109	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>383111	07 f1 18 00
>383115	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>38311d	07 56 26 00
>383121	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>383129	07 66 06 00
>38312d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383135	00 00 00 00
>383139	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383141	00 00 00 00
>383145	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38314d	00 00 00 00
>383151	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>383159	87 85 35 00
>38315d	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>383165	87 f3 f4 00
>383169	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>383171	07 f2 c3 00
>383175	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>38317d	08 72 08 00
>383181	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>383189	07 3f 07 01
>38318d	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>383195	07 4f 05 00
>383199	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831a1	00 00 00 00
>3831a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831ad	00 00 00 00
>3831b1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831b9	00 00 00 00
>3831bd	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3831c5	07 7a 05 00
>3831c9	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3831d1	07 a5 45 00
>3831d5	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3831dd	08 8f 09 00
>3831e1	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3831e9	0c 8f 09 00
>3831ed	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3831f5	07 82 37 00
>3831f9	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>383201	07 62 2c 01
>383205	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38320d	00 00 00 00
>383211	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383219	00 00 00 00
>38321d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383225	00 00 00 00
>383229	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>383231	07 a6 1c 00
>383235	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>38323d	07 72 0b 00
>383241	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>383249	07 72 09 00
>38324d	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>383255	07 82 09 00
>383259	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>383261	07 72 0f 00
>383265	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>38326d	07 8f 0a 00
>383271	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383279	00 00 00 00
>38327d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383285	00 00 00 00
>383289	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383291	00 00 00 00
>383295	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>38329d	07 65 1a 00
>3832a1	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3832a9	07 65 1a 00
>3832ad	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3832b5	07 75 0a 00
>3832b9	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3832c1	07 65 1a 00
>3832c5	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3832cd	07 65 26 00
>3832d1	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3832d9	07 55 36 00
>3832dd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832e5	00 00 00 00
>3832e9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832f1	00 00 00 00
>3832f5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832fd	00 00 00 00
>383301	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>383309	07 ff 0f 01
>38330d	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>383315	87 64 18 00
>383319	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>383321	07 96 0a 00
>383325	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>38332d	07 91 2a 00
>383331	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>383339	47 6f 07 00
>38333d	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>383345	07 8f 06 02
>383349	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383351	00 00 00 00
>383355	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38335d	00 00 00 00
>383361	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383369	00 00 00 00
>38336d	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>383375	07 55 16 00
>383379	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>383381	07 6a 03 00
>383385	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>38338d	07 42 35 00
>383391	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>383399	07 31 47 01
>38339d	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3833a5	0a 42 25 00
>3833a9	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3833b1	07 cf 07 00
>3833b5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833bd	00 00 00 00
>3833c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833c9	00 00 00 00
>3833cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833d5	00 00 00 00
>3833d9	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3833e1	8a f2 26 00
>3833e5	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3833ed	07 f2 f5 00
>3833f1	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3833f9	87 11 13 00
>3833fd	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>383405	87 1d 03 00
>383409	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>383411	07 81 23 00
>383415	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>38341d	0a f2 f6 01
>383421	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383429	00 00 00 00
>38342d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383435	00 00 00 00
>383439	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383441	00 00 00 00
>383445	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>38344d	07 c2 05 00
>383451	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>383459	07 6f 0c 01
>38345d	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>383465	07 56 16 00
>383469	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>383471	88 8f 0b 00
>383475	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>38347d	87 c3 e5 00
>383481	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>383489	07 f8 16 00
>38348d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383495	00 00 00 00
>383499	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834a1	00 00 00 00
>3834a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834ad	00 00 00 00
>3834b1	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3834b9	0a f3 03 00
>3834bd	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3834c5	07 f3 02 00
>3834c9	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3834d1	07 1f ff 03
>3834d5	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3834dd	8f 56 84 02
>3834e1	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3834e9	0c 34 04 03
>3834ed	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3834f5	07 1f 02 03
>3834f9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383501	00 00 00 00
>383505	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38350d	00 00 00 00
>383511	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383519	00 00 00 00
>38351d	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>383525	07 12 16 01
>383529	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>383531	07 f6 c9 02
>383535	35 2f 38 00 41 2f 38 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>38353d	4d 2f 38 00 59 2f 38 00 65 2f 38 00 71 2f 38 00
>38354d	7d 2f 38 00 89 2f 38 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>383555	95 2f 38 00 a1 2f 38 00 ad 2f 38 00 b9 2f 38 00
>383565	c5 2f 38 00 d1 2f 38 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>38356d	dd 2f 38 00 e9 2f 38 00 f5 2f 38 00 01 30 38 00
>38357d	0d 30 38 00 19 30 38 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>383585	25 30 38 00 31 30 38 00 3d 30 38 00 49 30 38 00
>383595	55 30 38 00 61 30 38 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>38359d	6d 30 38 00 79 30 38 00 85 30 38 00 91 30 38 00
>3835ad	9d 30 38 00 a9 30 38 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3835b5	b5 30 38 00 c1 30 38 00 cd 30 38 00 d9 30 38 00
>3835c5	e5 30 38 00 f1 30 38 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3835cd	fd 30 38 00 09 31 38 00 15 31 38 00 21 31 38 00
>3835dd	2d 31 38 00 39 31 38 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3835e5	45 31 38 00 51 31 38 00 5d 31 38 00 69 31 38 00
>3835f5	75 31 38 00 81 31 38 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3835fd	8d 31 38 00 99 31 38 00 a5 31 38 00 b1 31 38 00
>38360d	bd 31 38 00 c9 31 38 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>383615	d5 31 38 00 e1 31 38 00 ed 31 38 00 f9 31 38 00
>383625	05 32 38 00 11 32 38 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>38362d	1d 32 38 00 29 32 38 00 35 32 38 00 41 32 38 00
>38363d	4d 32 38 00 59 32 38 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>383645	65 32 38 00 71 32 38 00 7d 32 38 00 89 32 38 00
>383655	95 32 38 00 a1 32 38 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>38365d	ad 32 38 00 b9 32 38 00 c5 32 38 00 d1 32 38 00
>38366d	dd 32 38 00 e9 32 38 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>383675	f5 32 38 00 01 33 38 00 0d 33 38 00 19 33 38 00
>383685	25 33 38 00 31 33 38 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>38368d	3d 33 38 00 49 33 38 00 55 33 38 00 61 33 38 00
>38369d	6d 33 38 00 79 33 38 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3836a5	85 33 38 00 91 33 38 00 9d 33 38 00 a9 33 38 00
>3836b5	b5 33 38 00 c1 33 38 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3836bd	cd 33 38 00 d9 33 38 00 e5 33 38 00 f1 33 38 00
>3836cd	fd 33 38 00 09 34 38 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3836d5	15 34 38 00 21 34 38 00 2d 34 38 00 39 34 38 00
>3836e5	45 34 38 00 51 34 38 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3836ed	5d 34 38 00 69 34 38 00 75 34 38 00 81 34 38 00
>3836fd	8d 34 38 00 99 34 38 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>383705	a5 34 38 00 b1 34 38 00 bd 34 38 00 c9 34 38 00
>383715	d5 34 38 00 e1 34 38 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>38371d	ed 34 38 00 f9 34 38 00 05 35 38 00 11 35 38 00
>38372d	1d 35 38 00 29 35 38 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>383735	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.38373d					IOPL2_TONE_TEST
.38373d	e2 20		sep #$20	                SEP #$20        ; set A short
.38373f	c2 10		rep #$10	                REP #$10        ; set X long
.383741	a2 00 00	ldx #$0000	                LDX #0
.383744					OPL2_TONE_TESTING_L1
.383744	bd 35 37	lda $383735,x	                LDA NOTE_INTRO, X
.383747	29 0f		and #$0f	                AND #$F
.383749	85 30		sta $30		                STA OPL2_NOTE ; start at C
.38374b	bd 35 37	lda $383735,x	                LDA NOTE_INTRO, X
.38374e	29 70		and #$70	                AND #$70
.383750	4a		lsr a		                LSR A
.383751	4a		lsr a		                LSR A
.383752	4a		lsr a		                LSR A
.383753	4a		lsr a		                LSR A
.383754	85 31		sta $31		                STA OPL2_OCTAVE
.383756	8a		txa		                TXA
.383757	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.383759	85 27		sta $27		                STA OPL2_CHANNEL
.38375b	22 2b 39 38	jsl $38392b	                JSL OPL2_PLAYNOTE
.38375f	a0 00 00	ldy #$0000	                LDY #$0000
.383762					OPL2_TONE_TESTING_L2
.383762	ea		nop		                NOP
.383763	ea		nop		                NOP
.383764	ea		nop		                NOP
.383765	ea		nop		                NOP
.383766	c8		iny		                INY
.383767	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.38376a	d0 f6		bne $383762	                BNE OPL2_TONE_TESTING_L2
.38376c	e8		inx		                INX
.38376d	e0 08 00	cpx #$0008	                CPX #8
.383770	d0 d2		bne $383744	                BNE OPL2_TONE_TESTING_L1
.383772	6b		rtl		                RTL
.383773					OPL2_INIT
.383773	c2 20		rep #$20	                REP #$20        ; set A long
.383775	a9 00 00	lda #$0000	                LDA #$0000
.383778	85 28		sta $28		                STA OPL2_REG_REGION
.38377a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.38377c	85 30		sta $30		                STA OPL2_NOTE
.38377e	85 32		sta $32		                STA OPL2_PARAMETER0
.383780	85 34		sta $34		                STA OPL2_PARAMETER2
.383782	a9 ff 16	lda #$16ff	                LDA #<>INSTRUMENT_ACCORDN
.383785	85 50		sta $50		                STA RAD_ADDR
.383787	a9 38 00	lda #$0038	                LDA #<`INSTRUMENT_ACCORDN
.38378a	85 52		sta $52		                STA RAD_ADDR + 2
.38378c	e2 20		sep #$20	                SEP #$20        ; set A short
.38378e	6b		rtl		                RTL
.38378f					OPL2_Reset
.38378f	6b		rtl		                RTL
.383790					OPL2_Get_FrequencyBlock
.383790	6b		rtl		                RTL
.383791					OPL2_GET_REGISTER
.383791	48		pha		                PHA             ; begin setdp macro
.383792	08		php		                PHP
.383793	c2 20		rep #$20	                REP #$20        ; set A long
.383795	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383798	5b		tcd		                TCD
.383799	28		plp		                PLP
.38379a	68		pla		                PLA             ; end setdp macro
.38379b	c2 20		rep #$20	                REP #$20        ; set A long
.38379d	18		clc		              CLC
.38379e	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837a1	65 32		adc $32		              ADC OPL2_PARAMETER0
.3837a3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837a5	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837a8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3837ac	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837ae	6b		rtl		              RTL
.3837af					OPL2_GET_WAVEFORM_SELECT
.3837af	48		pha		                PHA             ; begin setdp macro
.3837b0	08		php		                PHP
.3837b1	c2 20		rep #$20	                REP #$20        ; set A long
.3837b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837b6	5b		tcd		                TCD
.3837b7	28		plp		                PLP
.3837b8	68		pla		                PLA             ; end setdp macro
.3837b9	c2 20		rep #$20	                REP #$20        ; set A long
.3837bb	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837be	69 01 00	adc #$0001	              ADC #$0001
.3837c1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837c3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837c6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3837ca	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837cc	29 20		and #$20	              AND #$20
.3837ce	6b		rtl		              RTL
.3837cf					OPL2_GET_SCALINGLEVEL
.3837cf	48		pha		                PHA             ; begin setdp macro
.3837d0	08		php		                PHP
.3837d1	c2 20		rep #$20	                REP #$20        ; set A long
.3837d3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837d6	5b		tcd		                TCD
.3837d7	28		plp		                PLP
.3837d8	68		pla		                PLA             ; end setdp macro
.3837d9	c2 20		rep #$20	                REP #$20        ; set A long
.3837db	a9 40 00	lda #$0040	              LDA #$0040  ;
.3837de	85 28		sta $28		              STA OPL2_REG_REGION
.3837e0	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3837e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3837e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837e7	29 c0		and #$c0	              AND #$C0
.3837e9	4a		lsr a		              LSR A
.3837ea	4a		lsr a		              LSR A
.3837eb	4a		lsr a		              LSR A
.3837ec	4a		lsr a		              LSR A
.3837ed	4a		lsr a		              LSR A
.3837ee	4a		lsr a		              LSR A
.3837ef	6b		rtl		              RTL
.3837f0					OPL2_GET_BLOCK
.3837f0	48		pha		                PHA             ; begin setdp macro
.3837f1	08		php		                PHP
.3837f2	c2 20		rep #$20	                REP #$20        ; set A long
.3837f4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837f7	5b		tcd		                TCD
.3837f8	28		plp		                PLP
.3837f9	68		pla		                PLA             ; end setdp macro
.3837fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3837fc	18		clc		              CLC
.3837fd	a5 27		lda $27		              LDA OPL2_CHANNEL
.3837ff	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383801	69 b0		adc #$b0	              ADC #$B0
.383803	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383805	a9 00		lda #$00	              LDA #$00
.383807	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383809	c2 30		rep #$30	                REP #$30        ; set A&X long
.38380b	18		clc		              CLC
.38380c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38380f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383811	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383813	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383816	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383818	e2 20		sep #$20	                SEP #$20        ; set A short
.38381a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38381c	29 1c		and #$1c	              AND #$1C
.38381e	4a		lsr a		              LSR A
.38381f	4a		lsr a		              LSR A
.383820	6b		rtl		              RTL
.383821					OPL2_GET_KEYON
.383821	48		pha		                PHA             ; begin setdp macro
.383822	08		php		                PHP
.383823	c2 20		rep #$20	                REP #$20        ; set A long
.383825	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383828	5b		tcd		                TCD
.383829	28		plp		                PLP
.38382a	68		pla		                PLA             ; end setdp macro
.38382b	e2 20		sep #$20	                SEP #$20        ; set A short
.38382d	18		clc		              CLC
.38382e	a5 27		lda $27		              LDA OPL2_CHANNEL
.383830	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383832	69 b0		adc #$b0	              ADC #$B0
.383834	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383836	a9 00		lda #$00	              LDA #$00
.383838	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38383a	c2 30		rep #$30	                REP #$30        ; set A&X long
.38383c	18		clc		              CLC
.38383d	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383840	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383842	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383844	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383847	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383849	e2 20		sep #$20	                SEP #$20        ; set A short
.38384b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38384d	29 20		and #$20	              AND #$20
.38384f	6b		rtl		              RTL
.383850					OPL2_GET_FEEDBACK
.383850	48		pha		                PHA             ; begin setdp macro
.383851	08		php		                PHP
.383852	c2 20		rep #$20	                REP #$20        ; set A long
.383854	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383857	5b		tcd		                TCD
.383858	28		plp		                PLP
.383859	68		pla		                PLA             ; end setdp macro
.38385a	e2 20		sep #$20	                SEP #$20        ; set A short
.38385c	18		clc		              CLC
.38385d	a5 27		lda $27		              LDA OPL2_CHANNEL
.38385f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383861	69 c0		adc #$c0	              ADC #$C0
.383863	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383865	a9 00		lda #$00	              LDA #$00
.383867	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383869	c2 30		rep #$30	                REP #$30        ; set A&X long
.38386b	18		clc		              CLC
.38386c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38386f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383871	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383873	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383876	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383878	e2 20		sep #$20	                SEP #$20        ; set A short
.38387a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38387c	29 e0		and #$e0	              AND #$E0
.38387e	4a		lsr a		              LSR
.38387f	6b		rtl		              RTL
.383880					OPL2_GET_SYNTHMODE
.383880	48		pha		                PHA             ; begin setdp macro
.383881	08		php		                PHP
.383882	c2 20		rep #$20	                REP #$20        ; set A long
.383884	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383887	5b		tcd		                TCD
.383888	28		plp		                PLP
.383889	68		pla		                PLA             ; end setdp macro
.38388a	e2 20		sep #$20	                SEP #$20        ; set A short
.38388c	18		clc		              CLC
.38388d	a5 27		lda $27		              LDA OPL2_CHANNEL
.38388f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383891	69 c0		adc #$c0	              ADC #$C0
.383893	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383895	a9 00		lda #$00	              LDA #$00
.383897	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383899	c2 30		rep #$30	                REP #$30        ; set A&X long
.38389b	18		clc		              CLC
.38389c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38389f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3838a1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838a3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838a6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3838aa	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838ac	29 01		and #$01	              AND #$01
.3838ae	6b		rtl		              RTL
.3838af					OPL2_GET_DEEPTREMOLO
.3838af	48		pha		                PHA             ; begin setdp macro
.3838b0	08		php		                PHP
.3838b1	c2 20		rep #$20	                REP #$20        ; set A long
.3838b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838b6	5b		tcd		                TCD
.3838b7	28		plp		                PLP
.3838b8	68		pla		                PLA             ; end setdp macro
.3838b9	c2 20		rep #$20	                REP #$20        ; set A long
.3838bb	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3838be	85 28		sta $28		              STA OPL2_REG_REGION
.3838c0	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3838c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838c5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838c7	29 80		and #$80	              AND #$80
.3838c9	6b		rtl		              RTL
.3838ca					OPL2_GET_DEEPVIBRATO
.3838ca	48		pha		                PHA             ; begin setdp macro
.3838cb	08		php		                PHP
.3838cc	c2 20		rep #$20	                REP #$20        ; set A long
.3838ce	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838d1	5b		tcd		                TCD
.3838d2	28		plp		                PLP
.3838d3	68		pla		                PLA             ; end setdp macro
.3838d4	c2 20		rep #$20	                REP #$20        ; set A long
.3838d6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838d9	69 bd 00	adc #$00bd	              ADC #$00BD
.3838dc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838de	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838e1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838e7	29 40		and #$40	              AND #$40
.3838e9	6b		rtl		              RTL
.3838ea					OPL2_GET_PERCUSSION
.3838ea	48		pha		                PHA             ; begin setdp macro
.3838eb	08		php		                PHP
.3838ec	c2 20		rep #$20	                REP #$20        ; set A long
.3838ee	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838f1	5b		tcd		                TCD
.3838f2	28		plp		                PLP
.3838f3	68		pla		                PLA             ; end setdp macro
.3838f4	c2 20		rep #$20	                REP #$20        ; set A long
.3838f6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838f9	69 bd 00	adc #$00bd	              ADC #$00BD
.3838fc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838fe	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383901	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383903	e2 20		sep #$20	                SEP #$20        ; set A short
.383905	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383907	29 20		and #$20	              AND #$20
.383909	6b		rtl		              RTL
.38390a					OPL2_GET_DRUMS
.38390a	48		pha		                PHA             ; begin setdp macro
.38390b	08		php		                PHP
.38390c	c2 20		rep #$20	                REP #$20        ; set A long
.38390e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383911	5b		tcd		                TCD
.383912	28		plp		                PLP
.383913	68		pla		                PLA             ; end setdp macro
.383914	c2 20		rep #$20	                REP #$20        ; set A long
.383916	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383919	69 bd 00	adc #$00bd	              ADC #$00BD
.38391c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38391e	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383921	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383923	e2 20		sep #$20	                SEP #$20        ; set A short
.383925	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383927	29 1f		and #$1f	              AND #$1F
.383929	6b		rtl		              RTL
.38392a					OPL2_Get_WaveForm
.38392a	6b		rtl		                RTL
.38392b					OPL2_PLAYNOTE
.38392b	48		pha		                PHA             ; begin setdp macro
.38392c	08		php		                PHP
.38392d	c2 20		rep #$20	                REP #$20        ; set A long
.38392f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383932	5b		tcd		                TCD
.383933	28		plp		                PLP
.383934	68		pla		                PLA             ; end setdp macro
.383935	e2 20		sep #$20	                SEP #$20        ; set A short
.383937	da		phx		                PHX
.383938	a9 00		lda #$00	                LDA #$00
.38393a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.38393c	20 13 3f	jsr $383f13	                JSR OPL2_SET_KEYON
.38393f	20 d8 3e	jsr $383ed8	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.383942	e2 10		sep #$10	                SEP #$10        ; set X short
.383944	a5 30		lda $30		                LDA OPL2_NOTE
.383946	3a		dec a		                DEC A
.383947	0a		asl a		                ASL A
.383948	aa		tax		                TAX
.383949	bf c4 16 38	lda $3816c4,x	                LDA @lnoteFNumbers,X
.38394d	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.38394f	e8		inx		                INX
.383950	bf c4 16 38	lda $3816c4,x	                LDA @lnoteFNumbers,X
.383954	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.383956	22 56 3e 38	jsl $383e56	                JSL OPL2_SET_FNUMBER
.38395a	a9 01		lda #$01	                LDA #$01
.38395c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.38395e	20 13 3f	jsr $383f13	                JSR OPL2_SET_KEYON
.383961	c2 10		rep #$10	                REP #$10        ; set X long
.383963	fa		plx		                PLX
.383964	6b		rtl		                RTL
.383965					OPL2_PLAYDRUM
.383965	6b		rtl		                RTL
.383966					OPL2_SET_INSTRUMENT
.383966	48		pha		                PHA             ; begin setdp macro
.383967	08		php		                PHP
.383968	c2 20		rep #$20	                REP #$20        ; set A long
.38396a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38396d	5b		tcd		                TCD
.38396e	28		plp		                PLP
.38396f	68		pla		                PLA             ; end setdp macro
.383970	38		sec		              SEC ; Set the WaveFormSelect to True
.383971	22 54 3b 38	jsl $383b54	              JSL OPL2_SET_WAVEFORMSELECT;
.383975	e2 20		sep #$20	                SEP #$20        ; set A short
.383977	c2 10		rep #$10	                REP #$10        ; set X long
.383979	a0 00 00	ldy #$0000	              LDY #$0000
.38397c	a2 00 00	ldx #$0000	              LDX #$0000
.38397f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.383981	85 35		sta $35		              STA OPL2_PARAMETER3
.383983	c8		iny		              INY
.383984	c9 06		cmp #$06	              CMP #$06
.383986	d0 03		bne $38398b	              BNE PERCUSSION_NEXT07
.383988	82 70 01	brl $383afb	              BRL Percussion_6
.38398b					PERCUSSION_NEXT07
.38398b	c9 07		cmp #$07	              CMP #$07
.38398d	d0 03		bne $383992	              BNE PERCUSSION_NEXT08
.38398f	82 44 01	brl $383ad6	              BRL Percussion_7
.383992					PERCUSSION_NEXT08
.383992	c9 08		cmp #$08	              CMP #$08
.383994	d0 03		bne $383999	              BNE PERCUSSION_NEXT09
.383996	82 18 01	brl $383ab1	              BRL Percussion_8
.383999					PERCUSSION_NEXT09
.383999	c9 09		cmp #$09	              CMP #$09
.38399b	d0 03		bne $3839a0	              BNE PERCUSSION_NEXT0A
.38399d	82 ec 00	brl $383a8c	              BRL Percussion_9
.3839a0					PERCUSSION_NEXT0A
.3839a0	c9 0a		cmp #$0a	              CMP #$0A
.3839a2	d0 03		bne $3839a7	              BNE Percussion_Default
.3839a4	82 c0 00	brl $383a67	              BRL Percussion_A
.3839a7					Percussion_Default
.3839a7	a9 00		lda #$00	              LDA #$00
.3839a9	85 26		sta $26		              STA OPL2_OPERATOR
.3839ab	c2 20		rep #$20	                REP #$20        ; set A long
.3839ad	a9 20 00	lda #$0020	              LDA #$0020;
.3839b0	85 28		sta $28		              STA OPL2_REG_REGION
.3839b2	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3839b7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3839b9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839bb	c8		iny		              INY
.3839bc	c2 20		rep #$20	                REP #$20        ; set A long
.3839be	a9 40 00	lda #$0040	              LDA #$0040;
.3839c1	85 28		sta $28		              STA OPL2_REG_REGION
.3839c3	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3839c8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3839ca	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839cc	c8		iny		              INY
.3839cd	c2 20		rep #$20	                REP #$20        ; set A long
.3839cf	a9 60 00	lda #$0060	              LDA #$0060;
.3839d2	85 28		sta $28		              STA OPL2_REG_REGION
.3839d4	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3839d9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3839db	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839dd	c8		iny		              INY
.3839de	c2 20		rep #$20	                REP #$20        ; set A long
.3839e0	a9 80 00	lda #$0080	              LDA #$0080;
.3839e3	85 28		sta $28		              STA OPL2_REG_REGION
.3839e5	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3839ea	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3839ec	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839ee	c8		iny		              INY
.3839ef	c2 20		rep #$20	                REP #$20        ; set A long
.3839f1	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3839f4	85 28		sta $28		              STA OPL2_REG_REGION
.3839f6	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.3839f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3839fb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3839fd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839ff	c8		iny		              INY
.383a00	e2 10		sep #$10	                SEP #$10        ; set X short
.383a02	a5 27		lda $27		              LDA OPL2_CHANNEL
.383a04	29 0f		and #$0f	              AND #$0F
.383a06	aa		tax		              TAX
.383a07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.383a09	9f c0 e7 af	sta $afe7c0,x	              STA @lOPL2_S_FEEDBACK,X
.383a0d	c8		iny		              INY
.383a0e	a9 01		lda #$01	              LDA #$01
.383a10	85 26		sta $26		              STA OPL2_OPERATOR
.383a12	c2 20		rep #$20	                REP #$20        ; set A long
.383a14	a9 20 00	lda #$0020	              LDA #$0020;
.383a17	85 28		sta $28		              STA OPL2_REG_REGION
.383a19	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a1c	e2 20		sep #$20	                SEP #$20        ; set A short
.383a1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.383a20	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a22	c8		iny		              INY
.383a23	c2 20		rep #$20	                REP #$20        ; set A long
.383a25	a9 40 00	lda #$0040	              LDA #$0040;
.383a28	85 28		sta $28		              STA OPL2_REG_REGION
.383a2a	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a2d	e2 20		sep #$20	                SEP #$20        ; set A short
.383a2f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.383a31	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a33	c8		iny		              INY
.383a34	c2 20		rep #$20	                REP #$20        ; set A long
.383a36	a9 60 00	lda #$0060	              LDA #$0060;
.383a39	85 28		sta $28		              STA OPL2_REG_REGION
.383a3b	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.383a40	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.383a42	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a44	c8		iny		              INY
.383a45	c2 20		rep #$20	                REP #$20        ; set A long
.383a47	a9 80 00	lda #$0080	              LDA #$0080;
.383a4a	85 28		sta $28		              STA OPL2_REG_REGION
.383a4c	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383a51	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.383a53	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a55	c8		iny		              INY
.383a56	c2 20		rep #$20	                REP #$20        ; set A long
.383a58	a9 e0 00	lda #$00e0	              LDA #$00E0;
.383a5b	85 28		sta $28		              STA OPL2_REG_REGION
.383a5d	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383a60	e2 20		sep #$20	                SEP #$20        ; set A short
.383a62	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.383a64	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a66	6b		rtl		                RTL
.383a67					Percussion_A
.383a67	e2 20		sep #$20	                SEP #$20        ; set A short
.383a69	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a6b	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.383a6f	c8		iny		              INY
.383a70	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a72	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.383a76	c8		iny		              INY
.383a77	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383a79	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.383a7d	c8		iny		              INY
.383a7e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383a80	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.383a84	c8		iny		              INY
.383a85	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383a87	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.383a8b	6b		rtl		                RTL
.383a8c					Percussion_9
.383a8c	e2 20		sep #$20	                SEP #$20        ; set A short
.383a8e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a90	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.383a94	c8		iny		              INY
.383a95	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a97	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.383a9b	c8		iny		              INY
.383a9c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383a9e	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.383aa2	c8		iny		              INY
.383aa3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aa5	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.383aa9	c8		iny		              INY
.383aaa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383aac	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.383ab0	6b		rtl		              RTL
.383ab1					Percussion_8
.383ab1	e2 20		sep #$20	                SEP #$20        ; set A short
.383ab3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ab5	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.383ab9	c8		iny		              INY
.383aba	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383abc	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.383ac0	c8		iny		              INY
.383ac1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383ac3	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.383ac7	c8		iny		              INY
.383ac8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aca	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.383ace	c8		iny		              INY
.383acf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383ad1	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.383ad5	6b		rtl		              RTL
.383ad6					Percussion_7
.383ad6	e2 20		sep #$20	                SEP #$20        ; set A short
.383ad8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ada	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.383ade	c8		iny		              INY
.383adf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383ae1	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.383ae5	c8		iny		              INY
.383ae6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383ae8	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.383aec	c8		iny		              INY
.383aed	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aef	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.383af3	c8		iny		              INY
.383af4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383af6	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.383afa	6b		rtl		              RTL
.383afb					Percussion_6
.383afb	e2 20		sep #$20	                SEP #$20        ; set A short
.383afd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383aff	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.383b03	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.383b07	c8		iny		              INY
.383b08	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383b0a	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.383b0e	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.383b12	c8		iny		              INY
.383b13	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383b15	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.383b19	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.383b1d	c8		iny		              INY
.383b1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383b20	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.383b24	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.383b28	c8		iny		              INY
.383b29	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383b2b	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.383b2f	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.383b33	6b		rtl		              RTL
.383b34					OPL2_SET_REGISTER
.383b34	48		pha		                PHA             ; begin setdp macro
.383b35	08		php		                PHP
.383b36	c2 20		rep #$20	                REP #$20        ; set A long
.383b38	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b3b	5b		tcd		                TCD
.383b3c	28		plp		                PLP
.383b3d	68		pla		                PLA             ; end setdp macro
.383b3e	c2 20		rep #$20	                REP #$20        ; set A long
.383b40	18		clc		              CLC
.383b41	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383b44	65 32		adc $32		              ADC OPL2_PARAMETER0
.383b46	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b48	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b4b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b4d	e2 20		sep #$20	                SEP #$20        ; set A short
.383b4f	a5 33		lda $33		              LDA OPL2_PARAMETER1
.383b51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b53	6b		rtl		              RTL
.383b54					OPL2_SET_WAVEFORMSELECT
.383b54	48		pha		                PHA             ; begin setdp macro
.383b55	08		php		                PHP
.383b56	c2 20		rep #$20	                REP #$20        ; set A long
.383b58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b5b	5b		tcd		                TCD
.383b5c	28		plp		                PLP
.383b5d	68		pla		                PLA             ; end setdp macro
.383b5e	c2 20		rep #$20	                REP #$20        ; set A long
.383b60	a9 01 e7	lda #$e701	              LDA #<>OPL2_S_BASE + $0001
.383b63	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b65	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b68	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b6a	e2 20		sep #$20	                SEP #$20        ; set A short
.383b6c	b0 07		bcs $383b75	              BCS OPL2_Set_WaveFormSelect_set
.383b6e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b70	29 df		and #$df	              AND #$DF
.383b72	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b74	6b		rtl		              RTL
.383b75					OPL2_Set_WaveFormSelect_set
.383b75	48		pha		                PHA             ; begin setdp macro
.383b76	08		php		                PHP
.383b77	c2 20		rep #$20	                REP #$20        ; set A long
.383b79	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b7c	5b		tcd		                TCD
.383b7d	28		plp		                PLP
.383b7e	68		pla		                PLA             ; end setdp macro
.383b7f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b81	09 20 00	ora #$0020	              ORA #$20
.383b84	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b86	6b		rtl		                RTL
.383b87					OPL2_SET_TREMOLO
.383b87	48		pha		                PHA             ; begin setdp macro
.383b88	08		php		                PHP
.383b89	c2 20		rep #$20	                REP #$20        ; set A long
.383b8b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b8e	5b		tcd		                TCD
.383b8f	28		plp		                PLP
.383b90	68		pla		                PLA             ; end setdp macro
.383b91	08		php		                PHP ; Push the Carry
.383b92	c2 20		rep #$20	                REP #$20        ; set A long
.383b94	18		clc		                CLC
.383b95	a9 20 00	lda #$0020	                LDA #$0020 ;
.383b98	85 28		sta $28		                STA OPL2_REG_REGION
.383b9a	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383b9d	28		plp		                PLP ; Pull the Carry out
.383b9e	e2 20		sep #$20	                SEP #$20        ; set A short
.383ba0	b0 08		bcs $383baa	                BCS OPL2_Set_Tremolo_Set;
.383ba2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ba4	29 7f		and #$7f	                AND #$7F
.383ba6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383ba8	80 06		bra $383bb0	                BRA OPL2_Set_Tremolo_Exit
.383baa					OPL2_Set_Tremolo_Set
.383baa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bac	09 80		ora #$80	                ORA #$80
.383bae	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bb0					OPL2_Set_Tremolo_Exit
.383bb0	6b		rtl		                RTL
.383bb1					OPL2_GET_TREMOLO
.383bb1	48		pha		                PHA             ; begin setdp macro
.383bb2	08		php		                PHP
.383bb3	c2 20		rep #$20	                REP #$20        ; set A long
.383bb5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bb8	5b		tcd		                TCD
.383bb9	28		plp		                PLP
.383bba	68		pla		                PLA             ; end setdp macro
.383bbb	c2 20		rep #$20	                REP #$20        ; set A long
.383bbd	a9 20 00	lda #$0020	                LDA #$0020;
.383bc0	85 28		sta $28		                STA OPL2_REG_REGION
.383bc2	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383bc5	e2 20		sep #$20	                SEP #$20        ; set A short
.383bc7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bc9	29 80		and #$80	                AND #$80
.383bcb	6b		rtl		                RTL
.383bcc					OPL2_SET_VIBRATO
.383bcc	48		pha		                PHA             ; begin setdp macro
.383bcd	08		php		                PHP
.383bce	c2 20		rep #$20	                REP #$20        ; set A long
.383bd0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bd3	5b		tcd		                TCD
.383bd4	28		plp		                PLP
.383bd5	68		pla		                PLA             ; end setdp macro
.383bd6	08		php		                PHP ; Push the Carry
.383bd7	c2 20		rep #$20	                REP #$20        ; set A long
.383bd9	18		clc		                CLC
.383bda	a9 20 00	lda #$0020	                LDA #$0020;
.383bdd	85 28		sta $28		                STA OPL2_REG_REGION
.383bdf	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383be2	28		plp		                PLP ; Pull the Carry out
.383be3	e2 20		sep #$20	                SEP #$20        ; set A short
.383be5	b0 08		bcs $383bef	                BCS OPL2_Set_Vibrato_Set;
.383be7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383be9	29 bf		and #$bf	                AND #$BF
.383beb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bed	80 06		bra $383bf5	                BRA OPL2_Set_Vibrato_Exit
.383bef					OPL2_Set_Vibrato_Set
.383bef	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bf1	09 40		ora #$40	                ORA #$40
.383bf3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf5					OPL2_Set_Vibrato_Exit
.383bf5	6b		rtl		                RTL
.383bf6					OPL2_GET_VIBRATO
.383bf6	48		pha		                PHA             ; begin setdp macro
.383bf7	08		php		                PHP
.383bf8	c2 20		rep #$20	                REP #$20        ; set A long
.383bfa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bfd	5b		tcd		                TCD
.383bfe	28		plp		                PLP
.383bff	68		pla		                PLA             ; end setdp macro
.383c00	c2 20		rep #$20	                REP #$20        ; set A long
.383c02	a9 20 00	lda #$0020	                LDA #$0020;
.383c05	85 28		sta $28		                STA OPL2_REG_REGION
.383c07	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383c0a	e2 20		sep #$20	                SEP #$20        ; set A short
.383c0c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383c0e	29 40		and #$40	                AND #$40
.383c10	6b		rtl		                RTL
.383c11					OPL2_SET_MAINTAINSUSTAIN
.383c11	48		pha		                PHA             ; begin setdp macro
.383c12	08		php		                PHP
.383c13	c2 20		rep #$20	                REP #$20        ; set A long
.383c15	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c18	5b		tcd		                TCD
.383c19	28		plp		                PLP
.383c1a	68		pla		                PLA             ; end setdp macro
.383c1b	08		php		              PHP ; Push the Carry
.383c1c	c2 20		rep #$20	                REP #$20        ; set A long
.383c1e	18		clc		              CLC
.383c1f	a9 20 00	lda #$0020	              LDA #$0020;
.383c22	85 28		sta $28		              STA OPL2_REG_REGION
.383c24	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c27	28		plp		              PLP ; Pull the Carry out
.383c28	e2 20		sep #$20	                SEP #$20        ; set A short
.383c2a	b0 08		bcs $383c34	              BCS OPL2_Set_MaintainSustain_Set;
.383c2c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c2e	29 df		and #$df	              AND #$DF
.383c30	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c32	80 06		bra $383c3a	              BRA OPL2_Set_MaintainSustain_Exit
.383c34					OPL2_Set_MaintainSustain_Set
.383c34	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c36	09 20		ora #$20	              ORA #$20
.383c38	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c3a					OPL2_Set_MaintainSustain_Exit
.383c3a	6b		rtl		                RTL
.383c3b					OPL2_GET_MAINTAINSUSTAIN
.383c3b	48		pha		                PHA             ; begin setdp macro
.383c3c	08		php		                PHP
.383c3d	c2 20		rep #$20	                REP #$20        ; set A long
.383c3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c42	5b		tcd		                TCD
.383c43	28		plp		                PLP
.383c44	68		pla		                PLA             ; end setdp macro
.383c45	c2 20		rep #$20	                REP #$20        ; set A long
.383c47	a9 20 00	lda #$0020	              LDA #$0020;
.383c4a	85 28		sta $28		              STA OPL2_REG_REGION
.383c4c	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383c51	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c53	29 20		and #$20	              AND #$20
.383c55	6b		rtl		                RTL
.383c56					OPL2_SET_ENVELOPESCALING
.383c56	48		pha		                PHA             ; begin setdp macro
.383c57	08		php		                PHP
.383c58	c2 20		rep #$20	                REP #$20        ; set A long
.383c5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c5d	5b		tcd		                TCD
.383c5e	28		plp		                PLP
.383c5f	68		pla		                PLA             ; end setdp macro
.383c60	08		php		              PHP ; Push the Carry
.383c61	c2 20		rep #$20	                REP #$20        ; set A long
.383c63	18		clc		              CLC
.383c64	a9 20 00	lda #$0020	              LDA #$0020;
.383c67	85 28		sta $28		              STA OPL2_REG_REGION
.383c69	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c6c	28		plp		              PLP ; Pull the Carry out
.383c6d	e2 20		sep #$20	                SEP #$20        ; set A short
.383c6f	b0 08		bcs $383c79	              BCS OPL2_Set_EnvelopeScaling_Set;
.383c71	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c73	29 ef		and #$ef	              AND #$EF
.383c75	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c77	80 06		bra $383c7f	              BRA OPL2_Set_EnvelopeScaling_Exit
.383c79					OPL2_Set_EnvelopeScaling_Set
.383c79	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c7b	09 10		ora #$10	              ORA #$10
.383c7d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c7f					OPL2_Set_EnvelopeScaling_Exit
.383c7f	6b		rtl		                RTL
.383c80					OPL2_GET_ENVELOPESCALING
.383c80	48		pha		                PHA             ; begin setdp macro
.383c81	08		php		                PHP
.383c82	c2 20		rep #$20	                REP #$20        ; set A long
.383c84	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c87	5b		tcd		                TCD
.383c88	28		plp		                PLP
.383c89	68		pla		                PLA             ; end setdp macro
.383c8a	c2 20		rep #$20	                REP #$20        ; set A long
.383c8c	a9 20 00	lda #$0020	              LDA #$0020;
.383c8f	85 28		sta $28		              STA OPL2_REG_REGION
.383c91	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383c94	e2 20		sep #$20	                SEP #$20        ; set A short
.383c96	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c98	29 10		and #$10	              AND #$10
.383c9a	6b		rtl		                RTL
.383c9b					OPL2_GET_MODFREQMULTIPLE
.383c9b	48		pha		                PHA             ; begin setdp macro
.383c9c	08		php		                PHP
.383c9d	c2 20		rep #$20	                REP #$20        ; set A long
.383c9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ca2	5b		tcd		                TCD
.383ca3	28		plp		                PLP
.383ca4	68		pla		                PLA             ; end setdp macro
.383ca5	c2 20		rep #$20	                REP #$20        ; set A long
.383ca7	a9 20 00	lda #$0020	              LDA #$0020;
.383caa	85 28		sta $28		              STA OPL2_REG_REGION
.383cac	20 92 40	jsr $384092	              JSR OPL2_GET_REG_OFFSET
.383caf	e2 20		sep #$20	                SEP #$20        ; set A short
.383cb1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383cb3	29 0f		and #$0f	              AND #$0F
.383cb5	6b		rtl		              RTL
.383cb6					OPL2_SET_MODFREQMULTIPLE
.383cb6	48		pha		                PHA             ; begin setdp macro
.383cb7	08		php		                PHP
.383cb8	c2 20		rep #$20	                REP #$20        ; set A long
.383cba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383cbd	5b		tcd		                TCD
.383cbe	28		plp		                PLP
.383cbf	68		pla		                PLA             ; end setdp macro
.383cc0	c2 20		rep #$20	                REP #$20        ; set A long
.383cc2	a9 20 00	lda #$0020	                LDA #$0020;
.383cc5	85 28		sta $28		                STA OPL2_REG_REGION
.383cc7	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383cca	e2 20		sep #$20	                SEP #$20        ; set A short
.383ccc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383cce	29 0f		and #$0f	                AND #$0F
.383cd0	85 32		sta $32		                STA OPL2_PARAMETER0
.383cd2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383cd4	29 f0		and #$f0	                AND #$F0
.383cd6	05 32		ora $32		                ORA OPL2_PARAMETER0
.383cd8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383cda	6b		rtl		                RTL
.383cdb					OPL2_SET_SCALINGLEVEL
.383cdb	48		pha		                PHA             ; begin setdp macro
.383cdc	08		php		                PHP
.383cdd	c2 20		rep #$20	                REP #$20        ; set A long
.383cdf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ce2	5b		tcd		                TCD
.383ce3	28		plp		                PLP
.383ce4	68		pla		                PLA             ; end setdp macro
.383ce5	c2 20		rep #$20	                REP #$20        ; set A long
.383ce7	a9 40 00	lda #$0040	                LDA #$0040;
.383cea	85 28		sta $28		                STA OPL2_REG_REGION
.383cec	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383cef	e2 20		sep #$20	                SEP #$20        ; set A short
.383cf1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383cf3	29 03		and #$03	                AND #$03
.383cf5	0a		asl a		                ASL
.383cf6	0a		asl a		                ASL
.383cf7	0a		asl a		                ASL
.383cf8	0a		asl a		                ASL
.383cf9	0a		asl a		                ASL
.383cfa	0a		asl a		                ASL
.383cfb	85 32		sta $32		                STA OPL2_PARAMETER0
.383cfd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383cff	29 3f		and #$3f	                AND #$3F
.383d01	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d03	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d05	6b		rtl		                RTL
.383d06					OPL2_SET_VOLUME
.383d06	48		pha		                PHA             ; begin setdp macro
.383d07	08		php		                PHP
.383d08	c2 20		rep #$20	                REP #$20        ; set A long
.383d0a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d0d	5b		tcd		                TCD
.383d0e	28		plp		                PLP
.383d0f	68		pla		                PLA             ; end setdp macro
.383d10	c2 20		rep #$20	                REP #$20        ; set A long
.383d12	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d15	85 28		sta $28		                STA OPL2_REG_REGION
.383d17	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.383d1c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.383d1e	29 3f		and #$3f	                AND #$3F
.383d20	85 32		sta $32		                STA OPL2_PARAMETER0
.383d22	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d24	29 c0		and #$c0	                AND #$C0
.383d26	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d28	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d2a	6b		rtl		                RTL
.383d2b					OPL2_GET_VOLUME
.383d2b	48		pha		                PHA             ; begin setdp macro
.383d2c	08		php		                PHP
.383d2d	c2 20		rep #$20	                REP #$20        ; set A long
.383d2f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d32	5b		tcd		                TCD
.383d33	28		plp		                PLP
.383d34	68		pla		                PLA             ; end setdp macro
.383d35	c2 20		rep #$20	                REP #$20        ; set A long
.383d37	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d3a	85 28		sta $28		                STA OPL2_REG_REGION
.383d3c	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d3f	e2 20		sep #$20	                SEP #$20        ; set A short
.383d41	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d43	29 3f		and #$3f	                AND #$3F
.383d45	6b		rtl		                RTL
.383d46					OPL2_SET_ATTACK
.383d46	48		pha		                PHA             ; begin setdp macro
.383d47	08		php		                PHP
.383d48	c2 20		rep #$20	                REP #$20        ; set A long
.383d4a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d4d	5b		tcd		                TCD
.383d4e	28		plp		                PLP
.383d4f	68		pla		                PLA             ; end setdp macro
.383d50	c2 20		rep #$20	                REP #$20        ; set A long
.383d52	a9 60 00	lda #$0060	                LDA #$0060  ;
.383d55	85 28		sta $28		                STA OPL2_REG_REGION
.383d57	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383d5c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383d5e	29 0f		and #$0f	                AND #$0F
.383d60	0a		asl a		                ASL
.383d61	0a		asl a		                ASL
.383d62	0a		asl a		                ASL
.383d63	0a		asl a		                ASL
.383d64	85 32		sta $32		                STA OPL2_PARAMETER0
.383d66	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d68	29 0f		and #$0f	                AND #$0F
.383d6a	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d6c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d6e	6b		rtl		                RTL
.383d6f					OPL2_GET_ATTACK
.383d6f	48		pha		                PHA             ; begin setdp macro
.383d70	08		php		                PHP
.383d71	c2 20		rep #$20	                REP #$20        ; set A long
.383d73	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d76	5b		tcd		                TCD
.383d77	28		plp		                PLP
.383d78	68		pla		                PLA             ; end setdp macro
.383d79	c2 20		rep #$20	                REP #$20        ; set A long
.383d7b	a9 60 00	lda #$0060	                LDA #$0060
.383d7e	85 28		sta $28		                STA OPL2_REG_REGION
.383d80	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383d83	e2 20		sep #$20	                SEP #$20        ; set A short
.383d85	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d87	29 f0		and #$f0	                AND #$F0
.383d89	4a		lsr a		                LSR
.383d8a	4a		lsr a		                LSR
.383d8b	4a		lsr a		                LSR
.383d8c	4a		lsr a		                LSR
.383d8d	6b		rtl		                RTL
.383d8e					OPL2_SET_DECAY
.383d8e	48		pha		                PHA             ; begin setdp macro
.383d8f	08		php		                PHP
.383d90	c2 20		rep #$20	                REP #$20        ; set A long
.383d92	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d95	5b		tcd		                TCD
.383d96	28		plp		                PLP
.383d97	68		pla		                PLA             ; end setdp macro
.383d98	c2 20		rep #$20	                REP #$20        ; set A long
.383d9a	a9 60 00	lda #$0060	                LDA #$0060;
.383d9d	85 28		sta $28		                STA OPL2_REG_REGION
.383d9f	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383da2	e2 20		sep #$20	                SEP #$20        ; set A short
.383da4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383da6	29 0f		and #$0f	                AND #$0F
.383da8	85 32		sta $32		                STA OPL2_PARAMETER0
.383daa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383dac	29 f0		and #$f0	                AND #$F0
.383dae	05 32		ora $32		                ORA OPL2_PARAMETER0
.383db0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383db2	6b		rtl		                RTL
.383db3					OPL2_GET_DECAY
.383db3	48		pha		                PHA             ; begin setdp macro
.383db4	08		php		                PHP
.383db5	c2 20		rep #$20	                REP #$20        ; set A long
.383db7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dba	5b		tcd		                TCD
.383dbb	28		plp		                PLP
.383dbc	68		pla		                PLA             ; end setdp macro
.383dbd	c2 20		rep #$20	                REP #$20        ; set A long
.383dbf	a9 60 00	lda #$0060	                LDA #$0060
.383dc2	85 28		sta $28		                STA OPL2_REG_REGION
.383dc4	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383dc7	e2 20		sep #$20	                SEP #$20        ; set A short
.383dc9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383dcb	29 0f		and #$0f	                AND #$0F
.383dcd	6b		rtl		                RTL
.383dce					OPL2_SET_SUSTAIN
.383dce	48		pha		                PHA             ; begin setdp macro
.383dcf	08		php		                PHP
.383dd0	c2 20		rep #$20	                REP #$20        ; set A long
.383dd2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dd5	5b		tcd		                TCD
.383dd6	28		plp		                PLP
.383dd7	68		pla		                PLA             ; end setdp macro
.383dd8	c2 20		rep #$20	                REP #$20        ; set A long
.383dda	a9 80 00	lda #$0080	                LDA #$0080;
.383ddd	85 28		sta $28		                STA OPL2_REG_REGION
.383ddf	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383de2	e2 20		sep #$20	                SEP #$20        ; set A short
.383de4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383de6	29 0f		and #$0f	                AND #$0F
.383de8	0a		asl a		                ASL
.383de9	0a		asl a		                ASL
.383dea	0a		asl a		                ASL
.383deb	0a		asl a		                ASL
.383dec	85 32		sta $32		                STA OPL2_PARAMETER0
.383dee	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383df0	29 0f		and #$0f	                AND #$0F
.383df2	05 32		ora $32		                ORA OPL2_PARAMETER0
.383df4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383df6	6b		rtl		                RTL
.383df7					OPL2_GET_SUSTAIN
.383df7	48		pha		                PHA             ; begin setdp macro
.383df8	08		php		                PHP
.383df9	c2 20		rep #$20	                REP #$20        ; set A long
.383dfb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dfe	5b		tcd		                TCD
.383dff	28		plp		                PLP
.383e00	68		pla		                PLA             ; end setdp macro
.383e01	c2 20		rep #$20	                REP #$20        ; set A long
.383e03	a9 80 00	lda #$0080	                LDA #$0080
.383e06	85 28		sta $28		                STA OPL2_REG_REGION
.383e08	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e0b	e2 20		sep #$20	                SEP #$20        ; set A short
.383e0d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e0f	29 f0		and #$f0	                AND #$F0
.383e11	4a		lsr a		                LSR
.383e12	4a		lsr a		                LSR
.383e13	4a		lsr a		                LSR
.383e14	4a		lsr a		                LSR
.383e15	6b		rtl		                RTL
.383e16					OPL2_SET_RELEASE
.383e16	48		pha		                PHA             ; begin setdp macro
.383e17	08		php		                PHP
.383e18	c2 20		rep #$20	                REP #$20        ; set A long
.383e1a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e1d	5b		tcd		                TCD
.383e1e	28		plp		                PLP
.383e1f	68		pla		                PLA             ; end setdp macro
.383e20	c2 20		rep #$20	                REP #$20        ; set A long
.383e22	a9 80 00	lda #$0080	                LDA #$0080;
.383e25	85 28		sta $28		                STA OPL2_REG_REGION
.383e27	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.383e2c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383e2e	29 0f		and #$0f	                AND #$0F
.383e30	85 32		sta $32		                STA OPL2_PARAMETER0
.383e32	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e34	29 f0		and #$f0	                AND #$F0
.383e36	05 32		ora $32		                ORA OPL2_PARAMETER0
.383e38	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e3a	6b		rtl		                RTL
.383e3b					OPL2_GET_RELEASE
.383e3b	48		pha		                PHA             ; begin setdp macro
.383e3c	08		php		                PHP
.383e3d	c2 20		rep #$20	                REP #$20        ; set A long
.383e3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e42	5b		tcd		                TCD
.383e43	28		plp		                PLP
.383e44	68		pla		                PLA             ; end setdp macro
.383e45	c2 20		rep #$20	                REP #$20        ; set A long
.383e47	a9 80 00	lda #$0080	                LDA #$0080
.383e4a	85 28		sta $28		                STA OPL2_REG_REGION
.383e4c	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.383e4f	e2 20		sep #$20	                SEP #$20        ; set A short
.383e51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e53	29 0f		and #$0f	                AND #$0F
.383e55	6b		rtl		                RTL
.383e56					OPL2_SET_FNUMBER
.383e56	48		pha		                PHA             ; begin setdp macro
.383e57	08		php		                PHP
.383e58	c2 20		rep #$20	                REP #$20        ; set A long
.383e5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e5d	5b		tcd		                TCD
.383e5e	28		plp		                PLP
.383e5f	68		pla		                PLA             ; end setdp macro
.383e60	e2 20		sep #$20	                SEP #$20        ; set A short
.383e62	18		clc		                CLC
.383e63	a5 27		lda $27		                LDA OPL2_CHANNEL
.383e65	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383e67	69 a0		adc #$a0	                ADC #$A0
.383e69	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383e6b	a9 00		lda #$00	                LDA #$00
.383e6d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383e6f	c2 30		rep #$30	                REP #$30        ; set A&X long
.383e71	18		clc		                CLC
.383e72	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383e75	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383e77	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e79	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383e7c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383e7e	e2 20		sep #$20	                SEP #$20        ; set A short
.383e80	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.383e82	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.383e84	18		clc		                CLC
.383e85	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383e87	69 10		adc #$10	                ADC #$10
.383e89	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e8b	a5 33		lda $33		                LDA OPL2_PARAMETER1
.383e8d	29 03		and #$03	                AND #$03
.383e8f	85 33		sta $33		                STA OPL2_PARAMETER1
.383e91	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e93	29 fc		and #$fc	                AND #$FC
.383e95	05 33		ora $33		                ORA OPL2_PARAMETER1
.383e97	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e99	6b		rtl		                RTL
.383e9a					OPL2_GET_FNUMBER
.383e9a	48		pha		                PHA             ; begin setdp macro
.383e9b	08		php		                PHP
.383e9c	c2 20		rep #$20	                REP #$20        ; set A long
.383e9e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ea1	5b		tcd		                TCD
.383ea2	28		plp		                PLP
.383ea3	68		pla		                PLA             ; end setdp macro
.383ea4	e2 20		sep #$20	                SEP #$20        ; set A short
.383ea6	18		clc		                CLC
.383ea7	a5 27		lda $27		                LDA OPL2_CHANNEL
.383ea9	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383eab	69 a0		adc #$a0	                ADC #$A0
.383ead	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383eaf	a9 00		lda #$00	                LDA #$00
.383eb1	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383eb3	c2 30		rep #$30	                REP #$30        ; set A&X long
.383eb5	18		clc		                CLC
.383eb6	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383eb9	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ebb	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ebd	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383ec0	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383ec2	e2 20		sep #$20	                SEP #$20        ; set A short
.383ec4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ec6	85 32		sta $32		                STA OPL2_PARAMETER0
.383ec8	18		clc		                CLC
.383ec9	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383ecb	69 10		adc #$10	                ADC #$10
.383ecd	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ecf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ed1	29 03		and #$03	                AND #$03
.383ed3	85 33		sta $33		                STA OPL2_PARAMETER1
.383ed5	6b		rtl		                RTL
.383ed6					OPL2_Set_Frequency
.383ed6	6b		rtl		                RTL
.383ed7					OPL2_Get_Frequency
.383ed7	6b		rtl		                RTL
.383ed8					OPL2_SET_BLOCK
.383ed8	48		pha		                PHA             ; begin setdp macro
.383ed9	08		php		                PHP
.383eda	c2 20		rep #$20	                REP #$20        ; set A long
.383edc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383edf	5b		tcd		                TCD
.383ee0	28		plp		                PLP
.383ee1	68		pla		                PLA             ; end setdp macro
.383ee2	e2 20		sep #$20	                SEP #$20        ; set A short
.383ee4	18		clc		                CLC
.383ee5	a5 27		lda $27		                LDA OPL2_CHANNEL
.383ee7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383ee9	69 b0		adc #$b0	                ADC #$B0
.383eeb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383eed	a9 00		lda #$00	                LDA #$00
.383eef	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383ef1	c2 30		rep #$30	                REP #$30        ; set A&X long
.383ef3	18		clc		                CLC
.383ef4	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383ef7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ef9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383efb	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383efe	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f00	e2 20		sep #$20	                SEP #$20        ; set A short
.383f02	a5 31		lda $31		                LDA OPL2_OCTAVE
.383f04	29 07		and #$07	                AND #$07
.383f06	0a		asl a		                ASL
.383f07	0a		asl a		                ASL
.383f08	85 31		sta $31		                STA OPL2_OCTAVE
.383f0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f0c	29 e3		and #$e3	                AND #$E3
.383f0e	05 31		ora $31		                ORA OPL2_OCTAVE
.383f10	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f12	60		rts		                RTS
.383f13					OPL2_SET_KEYON
.383f13	48		pha		                PHA             ; begin setdp macro
.383f14	08		php		                PHP
.383f15	c2 20		rep #$20	                REP #$20        ; set A long
.383f17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f1a	5b		tcd		                TCD
.383f1b	28		plp		                PLP
.383f1c	68		pla		                PLA             ; end setdp macro
.383f1d	e2 20		sep #$20	                SEP #$20        ; set A short
.383f1f	18		clc		                CLC
.383f20	a5 27		lda $27		                LDA OPL2_CHANNEL
.383f22	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f24	69 b0		adc #$b0	                ADC #$B0
.383f26	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383f28	a9 00		lda #$00	                LDA #$00
.383f2a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383f2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f2e	18		clc		                CLC
.383f2f	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383f32	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383f34	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383f36	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383f39	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f3b	e2 20		sep #$20	                SEP #$20        ; set A short
.383f3d	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383f3f	29 01		and #$01	                AND #$01
.383f41	f0 02		beq $383f45	                BEQ SET_KEYON_OFF
.383f43	a9 20		lda #$20	                LDA #$20
.383f45					    SET_KEYON_OFF
.383f45	85 32		sta $32		                STA OPL2_PARAMETER0
.383f47	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f49	29 df		and #$df	                AND #$DF
.383f4b	05 32		ora $32		                ORA OPL2_PARAMETER0
.383f4d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f4f	60		rts		                RTS
.383f50					OPL2_SET_FEEDBACK
.383f50	48		pha		                PHA             ; begin setdp macro
.383f51	08		php		                PHP
.383f52	c2 20		rep #$20	                REP #$20        ; set A long
.383f54	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f57	5b		tcd		                TCD
.383f58	28		plp		                PLP
.383f59	68		pla		                PLA             ; end setdp macro
.383f5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383f5c	18		clc		              CLC
.383f5d	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f5f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f61	69 c0		adc #$c0	              ADC #$C0
.383f63	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383f65	a9 00		lda #$00	              LDA #$00
.383f67	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383f69	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f6b	18		clc		              CLC
.383f6c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383f6f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383f71	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383f73	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383f76	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383f78	e2 20		sep #$20	                SEP #$20        ; set A short
.383f7a	a5 32		lda $32		              LDA OPL2_PARAMETER0
.383f7c	29 07		and #$07	              AND #$07
.383f7e	0a		asl a		              ASL
.383f7f	85 32		sta $32		              STA OPL2_PARAMETER0
.383f81	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383f83	29 01		and #$01	              AND #$01
.383f85	05 32		ora $32		              ORA OPL2_PARAMETER0
.383f87	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383f89	6b		rtl		                RTL
.383f8a					OPL2_SET_SYNTHMODE
.383f8a	48		pha		                PHA             ; begin setdp macro
.383f8b	08		php		                PHP
.383f8c	c2 20		rep #$20	                REP #$20        ; set A long
.383f8e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f91	5b		tcd		                TCD
.383f92	28		plp		                PLP
.383f93	68		pla		                PLA             ; end setdp macro
.383f94	08		php		              PHP ; Push the Carry
.383f95	e2 20		sep #$20	                SEP #$20        ; set A short
.383f97	18		clc		              CLC
.383f98	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f9a	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f9c	69 c0		adc #$c0	              ADC #$C0
.383f9e	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383fa0	a9 00		lda #$00	              LDA #$00
.383fa2	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383fa4	c2 30		rep #$30	                REP #$30        ; set A&X long
.383fa6	18		clc		              CLC
.383fa7	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383faa	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383fac	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fae	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fb1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fb3	28		plp		              PLP ; Pull the Carry out
.383fb4	e2 20		sep #$20	                SEP #$20        ; set A short
.383fb6	b0 08		bcs $383fc0	              BCS OPL2_Set_Synthmode_Set;
.383fb8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fba	29 fe		and #$fe	              AND #$FE
.383fbc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fbe	80 06		bra $383fc6	              BRA OPL2_Set_Synthmode_Exit
.383fc0					OPL2_Set_Synthmode_Set
.383fc0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fc2	09 01		ora #$01	              ORA #$01
.383fc4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fc6					OPL2_Set_Synthmode_Exit
.383fc6	6b		rtl		                RTL
.383fc7					OPL2_SET_DEEPTREMOLO
.383fc7	48		pha		                PHA             ; begin setdp macro
.383fc8	08		php		                PHP
.383fc9	c2 20		rep #$20	                REP #$20        ; set A long
.383fcb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383fce	5b		tcd		                TCD
.383fcf	28		plp		                PLP
.383fd0	68		pla		                PLA             ; end setdp macro
.383fd1	c2 20		rep #$20	                REP #$20        ; set A long
.383fd3	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.383fd6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fd8	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fdb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fdd	e2 20		sep #$20	                SEP #$20        ; set A short
.383fdf	b0 08		bcs $383fe9	              BCS OPL2_Set_DeepTremolo_Set;
.383fe1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fe3	29 7f		and #$7f	              AND #$7F
.383fe5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fe7	80 06		bra $383fef	              BRA OPL2_Set_DeepTremolo_Exit
.383fe9					OPL2_Set_DeepTremolo_Set
.383fe9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383feb	09 80		ora #$80	              ORA #$80
.383fed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fef					OPL2_Set_DeepTremolo_Exit
.383fef	6b		rtl		                RTL
.383ff0					OPL2_SET_DEEPVIBRATO
.383ff0	48		pha		                PHA             ; begin setdp macro
.383ff1	08		php		                PHP
.383ff2	c2 20		rep #$20	                REP #$20        ; set A long
.383ff4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ff7	5b		tcd		                TCD
.383ff8	28		plp		                PLP
.383ff9	68		pla		                PLA             ; end setdp macro
.383ffa	c2 20		rep #$20	                REP #$20        ; set A long
.383ffc	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.383fff	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.384001	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.384004	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.384006	e2 20		sep #$20	                SEP #$20        ; set A short
.384008	b0 08		bcs $384012	              BCS OPL2_Set_DeepVibrato_Set;
.38400a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38400c	29 bf		and #$bf	              AND #$BF
.38400e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.384010	80 06		bra $384018	              BRA OPL2_Set_DeepVibrato_Exit
.384012					OPL2_Set_DeepVibrato_Set
.384012	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.384014	09 40		ora #$40	              ORA #$40
.384016	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.384018					OPL2_Set_DeepVibrato_Exit
.384018	6b		rtl		                RTL
.384019					OPL2_SET_PERCUSSION
.384019	48		pha		                PHA             ; begin setdp macro
.38401a	08		php		                PHP
.38401b	c2 20		rep #$20	                REP #$20        ; set A long
.38401d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384020	5b		tcd		                TCD
.384021	28		plp		                PLP
.384022	68		pla		                PLA             ; end setdp macro
.384023	c2 20		rep #$20	                REP #$20        ; set A long
.384025	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.384028	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.38402a	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.38402d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.38402f	e2 20		sep #$20	                SEP #$20        ; set A short
.384031	b0 08		bcs $38403b	                BCS OPL2_Set_Percussion_Set;
.384033	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384035	29 df		and #$df	                AND #$DF
.384037	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384039	80 06		bra $384041	                BRA OPL2_Set_Percussion_Exit
.38403b					OPL2_Set_Percussion_Set
.38403b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38403d	09 20		ora #$20	                ORA #$20
.38403f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384041					OPL2_Set_Percussion_Exit
.384041	6b		rtl		                RTL
.384042					OPL2_SET_DRUMS
.384042	48		pha		                PHA             ; begin setdp macro
.384043	08		php		                PHP
.384044	c2 20		rep #$20	                REP #$20        ; set A long
.384046	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384049	5b		tcd		                TCD
.38404a	28		plp		                PLP
.38404b	68		pla		                PLA             ; end setdp macro
.38404c	c2 20		rep #$20	                REP #$20        ; set A long
.38404e	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.384051	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.384053	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.384056	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.384058	e2 20		sep #$20	                SEP #$20        ; set A short
.38405a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.38405c	29 1f		and #$1f	                AND #$1F
.38405e	85 32		sta $32		                STA OPL2_PARAMETER0
.384060	49 ff		eor #$ff	                EOR #$FF
.384062	85 33		sta $33		                STA OPL2_PARAMETER1
.384064	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384066	25 33		and $33		                AND OPL2_PARAMETER1
.384068	05 32		ora $32		                ORA OPL2_PARAMETER0
.38406a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38406c	6b		rtl		                RTL
.38406d					OPL2_SET_WAVEFORM
.38406d	48		pha		                PHA             ; begin setdp macro
.38406e	08		php		                PHP
.38406f	c2 20		rep #$20	                REP #$20        ; set A long
.384071	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384074	5b		tcd		                TCD
.384075	28		plp		                PLP
.384076	68		pla		                PLA             ; end setdp macro
.384077	c2 20		rep #$20	                REP #$20        ; set A long
.384079	a9 e0 00	lda #$00e0	                LDA #$00E0;
.38407c	85 28		sta $28		                STA OPL2_REG_REGION
.38407e	20 92 40	jsr $384092	                JSR OPL2_GET_REG_OFFSET
.384081	e2 20		sep #$20	                SEP #$20        ; set A short
.384083	a5 32		lda $32		                LDA OPL2_PARAMETER0
.384085	29 03		and #$03	                AND #$03
.384087	85 32		sta $32		                STA OPL2_PARAMETER0
.384089	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38408b	29 fc		and #$fc	                AND #$FC
.38408d	05 32		ora $32		                ORA OPL2_PARAMETER0
.38408f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384091	6b		rtl		                RTL
.384092					OPL2_GET_REG_OFFSET
.384092	e2 30		sep #$30	                SEP #$30        ; set A&X short
.384094	a5 27		lda $27		                LDA OPL2_CHANNEL
.384096	29 0f		and #$0f	                AND #$0F
.384098	aa		tax		                TAX
.384099	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.38409b	d0 06		bne $3840a3	                BNE OPL2_Get_Register_Offset_l0
.38409d	bf dc 16 38	lda $3816dc,x	                LDA @lregisterOffsets_operator0, X
.3840a1	80 04		bra $3840a7	                BRA OPL2_Get_Register_Offset_exit
.3840a3					OPL2_Get_Register_Offset_l0
.3840a3	bf e5 16 38	lda $3816e5,x	                LDA @lregisterOffsets_operator1, X
.3840a7					OPL2_Get_Register_Offset_exit
.3840a7	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3840a9	a9 00		lda #$00	                LDA #$00
.3840ab	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3840ad	c2 30		rep #$30	                REP #$30        ; set A&X long
.3840af	18		clc		                CLC
.3840b0	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.3840b3	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3840b5	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3840b7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3840b9	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.3840bc	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3840be	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3840bf					IDE_INIT
.3840bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3840c1	20 e2 40	jsr $3840e2	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3840c4	a9 00		lda #$00	              LDA #$00
.3840c6	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3840ca	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3840ce	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3840d2	a9 01		lda #$01	              LDA #$01
.3840d4	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3840d8	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3840da	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3840de	20 f8 40	jsr $3840f8	              JSR IDE_DRV_READY_NOTBUSY
.3840e1	6b		rtl		              RTL
.3840e2					IDE_DRIVE_BSY
.3840e2	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840e6	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.3840e8	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.3840ea	f0 f6		beq $3840e2	              BEQ IDE_DRIVE_BSY
.3840ec	60		rts		              RTS
.3840ed					IDE_DRIVE_READY
.3840ed	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840f1	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3840f3	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.3840f5	d0 f6		bne $3840ed	              BNE IDE_DRIVE_READY
.3840f7	60		rts		              RTS
.3840f8					IDE_DRV_READY_NOTBUSY
.3840f8	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840fc	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3840fe	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.384100	d0 f6		bne $3840f8	              BNE IDE_DRV_READY_NOTBUSY
.384102	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384106	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.384108	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.38410a	f0 ec		beq $3840f8	              BEQ IDE_DRV_READY_NOTBUSY
.38410c	60		rts		              RTS
.38410d					IDE_NOT_DRQ
.38410d	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384111	29 08		and #$08	              AND #$08
.384113	c9 08		cmp #$08	              CMP #$08
.384115	d0 f6		bne $38410d	              BNE IDE_NOT_DRQ
.384117	60		rts		              RTS
.384118					IDE_GET_512BYTES
.384118	c2 30		rep #$30	                REP #$30        ; set A&X long
.38411a	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.38411e	a2 00 00	ldx #$0000	              LDX #$0000
.384121					IDE_GET_INFO_KEEP_FETCHING
.384121	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.384125	9f 00 04 00	sta $000400,x	              STA SDOS_BLK_BEGIN, X
.384129	e8		inx		              INX
.38412a	e8		inx		              INX
.38412b	e0 00 02	cpx #$0200	              CPX #$0200
.38412e	d0 f1		bne $384121	              BNE IDE_GET_INFO_KEEP_FETCHING
.384130	6b		rtl		              RTL
.384131					IDE_GET_INFO
.384131	e2 20		sep #$20	                SEP #$20        ; set A short
.384133	20 e2 40	jsr $3840e2	              JSR IDE_DRIVE_BSY
.384136	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.384138	8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.38413c	20 f8 40	jsr $3840f8	              JSR IDE_DRV_READY_NOTBUSY
.38413f	20 0d 41	jsr $38410d	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.384142	22 18 41 38	jsl $384118	              JSL IDE_GET_512BYTES
.384146	e2 20		sep #$20	                SEP #$20        ; set A short
.384148	c2 10		rep #$10	                REP #$10        ; set X long
.38414a	a2 00 00	ldx #$0000	              LDX #$0000
.38414d					GET_INFO_LOOP
.38414d	bf 37 04 00	lda $000437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.384151	22 86 06 39	jsl $390686	              JSL IPUTC
.384155	bf 36 04 00	lda $000436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.384159	22 86 06 39	jsl $390686	              JSL IPUTC
.38415d	e8		inx		              INX
.38415e	e8		inx		              INX
.38415f	e0 28 00	cpx #$0028	              CPX #40
.384162	d0 e9		bne $38414d	              BNE GET_INFO_LOOP
.384164	6b		rtl		              RTL
.384165					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.384165					KEYBOARD_INTERRUPT
.384165	48		pha		                PHA             ; begin setdp macro
.384166	08		php		                PHP
.384167	c2 20		rep #$20	                REP #$20        ; set A long
.384169	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38416c	5b		tcd		                TCD
.38416d	28		plp		                PLP
.38416e	68		pla		                PLA             ; end setdp macro
.38416f	a2 00 00	ldx #$0000	                ldx #$0000
.384172	e2 10		sep #$10	                SEP #$10        ; set X short
.384174	e2 20		sep #$20	                SEP #$20        ; set A short
.384176	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38417a	29 01		and #$01	                AND #FNX1_INT00_KBD
.38417c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.384180					IRQ_HANDLER_FETCH
.384180	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.384184	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.384186	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.384188	29 80		and #$80	                AND #$80
.38418a	c9 80		cmp #$80	                CMP #$80
.38418c	d0 10		bne $38419e	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.38418e	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.384190	29 7f		and #$7f	                AND #$7F
.384192	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384194	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.384196	aa		tax		                TAX
.384197	bf 80 1a 39	lda $391a80,x	                LDA @lScanCode_Prefix_Set1, x
.38419b	4c 41 42	jmp $384241	                JMP KB_WR_2_SCREEN      ; And save it
.38419e	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3841a0	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3841a2	d0 03		bne $3841a7	                BNE NOT_KB_SET_LSHIFT
.3841a4	82 ad 00	brl $384254	                BRL KB_SET_SHIFT
.3841a7					NOT_KB_SET_LSHIFT
.3841a7	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3841a9	d0 03		bne $3841ae	                BNE NOT_KB_CLR_LSHIFT
.3841ab	82 af 00	brl $38425d	                BRL KB_CLR_SHIFT
.3841ae					NOT_KB_CLR_LSHIFT
.3841ae	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3841b0	d0 03		bne $3841b5	                BNE NOT_KB_SET_RSHIFT
.3841b2	82 9f 00	brl $384254	                BRL KB_SET_SHIFT
.3841b5					NOT_KB_SET_RSHIFT
.3841b5	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3841b7	d0 03		bne $3841bc	                BNE NOT_KB_CLR_RSHIFT
.3841b9	82 a1 00	brl $38425d	                BRL KB_CLR_SHIFT
.3841bc					NOT_KB_CLR_RSHIFT
.3841bc	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3841be	d0 03		bne $3841c3	                BNE NOT_KB_SET_CTRL
.3841c0	82 a3 00	brl $384266	                BRL KB_SET_CTRL
.3841c3					NOT_KB_SET_CTRL
.3841c3	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3841c5	d0 03		bne $3841ca	                BNE NOT_KB_CLR_CTRL
.3841c7	82 a5 00	brl $38426f	                BRL KB_CLR_CTRL
.3841ca					NOT_KB_CLR_CTRL
.3841ca	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3841cc	d0 03		bne $3841d1	                BNE NOT_KB_SET_ALT
.3841ce	82 a7 00	brl $384278	                BRL KB_SET_ALT
.3841d1					NOT_KB_SET_ALT
.3841d1	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.3841d3	d0 03		bne $3841d8	                BNE NOT_KB_CLR_ALT
.3841d5	82 a9 00	brl $384281	                BRL KB_CLR_ALT
.3841d8	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.3841da	d0 03		bne $3841df	                BNE NOT_PREFIXED
.3841dc	82 ab 00	brl $38428a	                BRL KB_SET_PREFIX
.3841df	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3841e1	d0 03		bne $3841e6	                BNE NOT_KB_SET_NUM
.3841e3	82 b6 00	brl $38429c	                BRL KB_TOG_NUMLOCK
.3841e6	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3841e8	d0 03		bne $3841ed	                BNE NOT_KB_SET_SCR
.3841ea	82 a6 00	brl $384293	                BRL KB_TOG_SCRLOCK
.3841ed	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3841ef	d0 03		bne $3841f4	                BNE NOT_KB_CAPSLOCK
.3841f1	82 b1 00	brl $3842a5	                BRL KB_TOG_CAPLOCK
.3841f4	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.3841f6	d0 09		bne $384201	                BNE KB_UNPRESSED
.3841f8	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.3841fa	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3841fe	82 aa 00	brl $3842ab	                BRL KB_CHECK_B_DONE
.384201	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.384203	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.384205	d0 03		bne $38420a	                BNE KB_NORM_SC
.384207	82 a1 00	brl $3842ab	                BRL KB_CHECK_B_DONE
.38420a	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38420c	aa		tax		                TAX
.38420d	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38420f	29 10		and #$10	                AND #$10
.384211	c9 10		cmp #$10	                CMP #$10
.384213	f0 17		beq $38422c	                BEQ SHIFT_KEY_ON
.384215	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.384217	29 20		and #$20	                AND #$20
.384219	c9 20		cmp #$20	                CMP #$20
.38421b	f0 16		beq $384233	                BEQ CTRL_KEY_ON
.38421d	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38421f	29 40		and #$40	                AND #$40
.384221	c9 40		cmp #$40	                CMP #$40
.384223	f0 15		beq $38423a	                BEQ ALT_KEY_ON
.384225	bf 00 18 39	lda $391800,x	                LDA @lScanCode_Press_Set1, x
.384229	82 15 00	brl $384241	                BRL KB_WR_2_SCREEN
.38422c	bf 80 18 39	lda $391880,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.384230	82 0e 00	brl $384241	                BRL KB_WR_2_SCREEN
.384233	bf 00 19 39	lda $391900,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.384237	82 07 00	brl $384241	                BRL KB_WR_2_SCREEN
.38423a	bf 80 19 39	lda $391980,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38423e	82 00 00	brl $384241	                BRL KB_WR_2_SCREEN
.384241	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.384243	d0 03		bne $384248	                BNE savechar
.384245	4c bb 42	jmp $3842bb	                JMP programmerKey       ; Yes: trigger the programmer key
.384248	48		pha		savechar        PHA
.384249	c2 10		rep #$10	                REP #$10        ; set X long
.38424b	20 c7 42	jsr $3842c7	                JSR SAVEKEY
.38424e	e2 20		sep #$20	                SEP #$20        ; set A short
.384250	68		pla		                PLA
.384251	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384254	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.384256	09 10		ora #$10	                ORA #$10
.384258	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38425a	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38425d	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.38425f	29 ef		and #$ef	                AND #$EF
.384261	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384263	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384266	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.384268	09 20		ora #$20	                ORA #$20
.38426a	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38426c	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38426f	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.384271	29 df		and #$df	                AND #$DF
.384273	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384275	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384278	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.38427a	09 40		ora #$40	                ORA #$40
.38427c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38427e	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384281	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.384283	29 bf		and #$bf	                AND #$BF
.384285	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384287	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38428a	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.38428c	09 80		ora #$80	                ORA #$80
.38428e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384290	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.384293	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.384295	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.384297	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384299	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.38429c	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.38429e	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3842a0	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842a2	4c ab 42	jmp $3842ab	                JMP KB_CHECK_B_DONE
.3842a5	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3842a7	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3842a9	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842ab					KB_CHECK_B_DONE
.3842ab	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3842af	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3842b1	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3842b3	d0 03		bne $3842b8	                BNE SET_LED
.3842b5	4c 80 41	jmp $384180	                JMP IRQ_HANDLER_FETCH
.3842b8					SET_LED
.3842b8					KB_DONE
.3842b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842ba	60		rts		                RTS
.3842bb					programmerKey
.3842bb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842bd	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3842be	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3842bf	ab		plb		                PLB
.3842c0	7a		ply		                PLY
.3842c1	fa		plx		                PLX
.3842c2	68		pla		                PLA
.3842c3	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.3842c7					SAVEKEY
.3842c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3842c9	48		pha		                PHA                     ; Save the character
.3842ca	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.3842cc	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.3842ce	f0 0d		beq $3842dd	                BEQ no_caps             ; No... just use the character as-is
.3842d0	68		pla		                PLA                     ; Get the character back
.3842d1	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.3842d3	90 09		bcc $3842de	                BLT check_break         ; Yes: just use as-is
.3842d5	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3842d7	b0 05		bcs $3842de	                BGE check_break         ; Yes: just us as-is
.3842d9	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3842db	80 01		bra $3842de	                BRA check_break
.3842dd	68		pla		no_caps         PLA                     ; Restore the character
.3842de	c9 00		cmp #$00	check_break     CMP #0
.3842e0	f0 18		beq $3842fa	                BEQ done
.3842e2	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3842e4	f0 15		beq $3842fb	                BEQ flag_break          ; Yes: flag a break
.3842e6	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3842e8	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3842eb	b0 0d		bcs $3842fa	                BCS done                ; Stop storing - An error should ensue here...
.3842ed	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3842f1	e8		inx		                INX
.3842f2	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3842f4	a9 00		lda #$00	                LDA #$00
.3842f6	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3842fa	60		rts		done            RTS
.3842fb					flag_break
.3842fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3842fd	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.3842ff	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.384301	60		rts		                RTS
.384302					KBD_GETC
.384302	da		phx		                PHX
.384303	0b		phd		                PHD
.384304	08		php		                PHP
.384305	48		pha		                PHA             ; begin setdp macro
.384306	08		php		                PHP
.384307	c2 20		rep #$20	                REP #$20        ; set A long
.384309	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38430c	5b		tcd		                TCD
.38430d	28		plp		                PLP
.38430e	68		pla		                PLA             ; end setdp macro
.38430f	e2 20		sep #$20	                SEP #$20        ; set A short
.384311	c2 10		rep #$10	                REP #$10        ; set X long
.384313	58		cli		                CLI                     ; Make sure interrupts can happen
.384314	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.384318	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.38431a	c9 60		cmp #$60	                CMP #KB_CREDITS
.38431c	d0 0a		bne $384328	                BNE check_buffer        ; No: check the key buffer
.38431e	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.384320	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384324	22 23 13 39	jsl $391323	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.384328	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.38432a	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.38432c	90 02		bcc $384330	                BCC read_buff           ; Yes: a key is present, read it
.38432e	80 e4		bra $384314	                BRA get_wait            ; Otherwise, keep waiting
.384330	78		sei		read_buff       SEI                     ; Don't interrupt me!
.384331	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.384333	e8		inx		                INX                     ; And move to the next key
.384334	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.384336	f0 07		beq $38433f	                BEQ reset_indexes       ; Yes: return to 0 position
.384338	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.38433a	58		cli		                CLI
.38433b	28		plp		done            PLP                     ; Restore status and interrupts
.38433c	2b		pld		                PLD
.38433d	fa		plx		                PLX
.38433e	6b		rtl		                RTL
.38433f	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.384341	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.384343	80 f6		bra $38433b	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.384345					UART_SELECT
.384345	08		php		            PHP
.384346	c2 20		rep #$20	                REP #$20        ; set A long
.384348	c9 02 00	cmp #$0002	            CMP #2
.38434b	f0 07		beq $384354	            BEQ is_COM2
.38434d	c2 20		rep #$20	                REP #$20        ; set A long
.38434f	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.384352	80 05		bra $384359	            BRA setaddr
.384354					is_COM2
.384354	c2 20		rep #$20	                REP #$20        ; set A long
.384356	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.384359	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.38435d	e2 20		sep #$20	                SEP #$20        ; set A short
.38435f	a9 af		lda #$af	            LDA #`UART1_BASE
.384361	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.384365	28		plp		            PLP
.384366	6b		rtl		            RTL
.384367					UART_SETBPS
.384367	08		php		            PHP
.384368	0b		phd		            PHD
.384369	48		pha		                PHA             ; begin setdp macro
.38436a	08		php		                PHP
.38436b	c2 20		rep #$20	                REP #$20        ; set A long
.38436d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384370	5b		tcd		                TCD
.384371	28		plp		                PLP
.384372	68		pla		                PLA             ; end setdp macro
.384373	c2 30		rep #$30	                REP #$30        ; set A&X long
.384375	48		pha		            PHA
.384376	e2 20		sep #$20	                SEP #$20        ; set A short
.384378	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.38437b	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.38437d	09 80		ora #$80	            ORA #LCR_DLB
.38437f	97 00		sta [$0700],y	            STA [CURRUART],Y
.384381	c2 20		rep #$20	                REP #$20        ; set A long
.384383	68		pla		            PLA
.384384	a0 00 00	ldy #$0000	            LDY #UART_DLL
.384387	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.384389	e2 20		sep #$20	                SEP #$20        ; set A short
.38438b	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.38438e	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384390	49 80		eor #$80	            EOR #LCR_DLB
.384392	97 00		sta [$0700],y	            STA [CURRUART],Y
.384394	2b		pld		            PLD
.384395	28		plp		            PLP
.384396	6b		rtl		            RTL
.384397					UART_SETLCR
.384397	08		php		            PHP
.384398	0b		phd		            PHD
.384399	48		pha		                PHA             ; begin setdp macro
.38439a	08		php		                PHP
.38439b	c2 20		rep #$20	                REP #$20        ; set A long
.38439d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843a0	5b		tcd		                TCD
.3843a1	28		plp		                PLP
.3843a2	68		pla		                PLA             ; end setdp macro
.3843a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3843a5	c2 10		rep #$10	                REP #$10        ; set X long
.3843a7	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.3843a9	a0 03 00	ldy #$0003	            LDY #UART_LCR
.3843ac	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843ae	2b		pld		            PLD
.3843af	28		plp		            PLP
.3843b0	6b		rtl		            RTL
.3843b1					UART_INIT
.3843b1	08		php		            PHP
.3843b2	0b		phd		            PHD
.3843b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843b5	48		pha		                PHA             ; begin setdp macro
.3843b6	08		php		                PHP
.3843b7	c2 20		rep #$20	                REP #$20        ; set A long
.3843b9	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843bc	5b		tcd		                TCD
.3843bd	28		plp		                PLP
.3843be	68		pla		                PLA             ; end setdp macro
.3843bf	a9 01 00	lda #$0001	            LDA #UART_115200
.3843c2	22 67 43 38	jsl $384367	            JSL UART_SETBPS
.3843c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3843c8	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3843ca	22 97 43 38	jsl $384397	            JSL UART_SETLCR
.3843ce	a9 e1		lda #$e1	            LDA #%11100001
.3843d0	a0 02 00	ldy #$0002	            LDY #UART_FCR
.3843d3	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843d5	2b		pld		            PLD
.3843d6	28		plp		            PLP
.3843d7	6b		rtl		            RTL
.3843d8					UART_HASBYT
.3843d8	08		php		            PHP
.3843d9	0b		phd		            PHD
.3843da	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843dc	48		pha		                PHA             ; begin setdp macro
.3843dd	08		php		                PHP
.3843de	c2 20		rep #$20	                REP #$20        ; set A long
.3843e0	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843e3	5b		tcd		                TCD
.3843e4	28		plp		                PLP
.3843e5	68		pla		                PLA             ; end setdp macro
.3843e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3843e8	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3843eb	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3843ed	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3843ef	d0 04		bne $3843f5	            BNE ret_true            ; If flag is set, return true
.3843f1	2b		pld		ret_false   PLD                     ; Return false
.3843f2	28		plp		            PLP
.3843f3	18		clc		            CLC
.3843f4	6b		rtl		            RTL
.3843f5	2b		pld		ret_true    PLD                     ; Return true
.3843f6	28		plp		            PLP
.3843f7	38		sec		            SEC
.3843f8	6b		rtl		            RTL
.3843f9					UART_GETC
.3843f9	08		php		            PHP
.3843fa	0b		phd		            PHD
.3843fb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843fd	48		pha		                PHA             ; begin setdp macro
.3843fe	08		php		                PHP
.3843ff	c2 20		rep #$20	                REP #$20        ; set A long
.384401	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384404	5b		tcd		                TCD
.384405	28		plp		                PLP
.384406	68		pla		                PLA             ; end setdp macro
.384407	e2 20		sep #$20	                SEP #$20        ; set A short
.384409	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.38440c	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.38440e	29 01		and #$01	            AND #LSR_DATA_AVAIL
.384410	f0 fa		beq $38440c	            BEQ wait_getc           ; If the flag is clear, wait
.384412	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.384415	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384417	2b		pld		            PLD
.384418	28		plp		            PLP
.384419	6b		rtl		            RTL
.38441a					UART_PUTC
.38441a	08		php		            PHP
.38441b	0b		phd		            PHD
.38441c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38441e	48		pha		                PHA             ; begin setdp macro
.38441f	08		php		                PHP
.384420	c2 20		rep #$20	                REP #$20        ; set A long
.384422	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384425	5b		tcd		                TCD
.384426	28		plp		                PLP
.384427	68		pla		                PLA             ; end setdp macro
.384428	e2 20		sep #$20	                SEP #$20        ; set A short
.38442a	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.38442b	a0 05 00	ldy #$0005	            LDY #UART_LSR
.38442e	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.384430	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.384432	f0 fa		beq $38442e	            BEQ wait_putc
.384434	68		pla		            PLA
.384435	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.384438	97 00		sta [$0700],y	            STA [CURRUART],Y
.38443a	2b		pld		            PLD
.38443b	28		plp		            PLP
.38443c	6b		rtl		            RTL
.38443d					UART_PUTS
.38443d	08		php		            PHP
.38443e	e2 20		sep #$20	                SEP #$20        ; set A short
.384440	bd 00 00	lda $380000,x	put_loop    LDA #0,B,X
.384443	f0 07		beq $38444c	            BEQ done
.384445	22 1a 44 38	jsl $38441a	            JSL UART_PUTC
.384449	e8		inx		            INX
.38444a	80 f4		bra $384440	            BRA put_loop
.38444c	28		plp		done        PLP
.38444d	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.38444e					JOYSTICK_SET_NES_MODE
.38444e	e2 20		sep #$20	                SEP #$20        ; set A short
.384450	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384454	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.384456	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38445a	6b		rtl		          RTL
.38445b					JOYSTICK_SET_SNES_MODE
.38445b	e2 20		sep #$20	                SEP #$20        ; set A short
.38445d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384461	29 fb		and #$fb	          AND #~NES_SNES_JOY
.384463	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.384465	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384469	6b		rtl		          RTL
.38446a					JOYSTICK_ENABLE_NES_SNES_PORT0
.38446a	e2 20		sep #$20	                SEP #$20        ; set A short
.38446c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384470	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384472	09 01		ora #$01	          ORA #NES_SNES_EN0
.384474	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384478	6b		rtl		          RTL
.384479					JOYSTICK_ENABLE_NES_SNES_PORT1
.384479	e2 20		sep #$20	                SEP #$20        ; set A short
.38447b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38447f	29 fd		and #$fd	          AND #~NES_SNES_EN1
.384481	09 02		ora #$02	          ORA #NES_SNES_EN1
.384483	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384487	6b		rtl		          RTL
.384488					JOYSTICK_DISABLE_NES_SNES_PORT0
.384488	e2 20		sep #$20	                SEP #$20        ; set A short
.38448a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38448e	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384490	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384494	6b		rtl		          RTL
.384495					JOYSTICK_DISABLE_NES_SNES_PORT1
.384495	e2 20		sep #$20	                SEP #$20        ; set A short
.384497	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38449b	29 fd		and #$fd	          AND #~NES_SNES_EN1
.38449d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844a1	6b		rtl		          RTL
.3844a2					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.3844a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3844a4	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844a8	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.3844aa	c9 00		cmp #$00	          CMP #$00
.3844ac	f0 14		beq $3844c2	          BEQ END_OF_JOYSTICK_POLL
.3844ae	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844b2	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.3844b4	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844b8					JOYSTICK_POLLING_ISNOTOVER
.3844b8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.3844bc	29 40		and #$40	          AND #NES_SNES_DONE
.3844be	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.3844c0	d0 f6		bne $3844b8	          BNE JOYSTICK_POLLING_ISNOTOVER
.3844c2					END_OF_JOYSTICK_POLL
.3844c2	6b		rtl		          RTL

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390442	85 0c		sta $0c		                STA SCREENBEGIN
.390444	e2 20		sep #$20	                SEP #$20        ; set A short
.390446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390448	85 0e		sta $0e		                STA SCREENBEGIN+2
.39044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044f	85 17		sta $17		                STA CURSORPOS
.390451	e2 20		sep #$20	                SEP #$20        ; set A short
.390453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390455	85 19		sta $19		                STA CURSORPOS+2
.390457	a9 00		lda #$00	                LDA #$00
.390459	8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39045d	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39045f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390463	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390465	8f 00 f1 af	sta $aff100	                STA $AFF100
.390469	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39046b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046f	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390471	8f 00 f1 af	sta $aff100	                STA $AFF100
.390475	c2 30		rep #$30	                REP #$30        ; set A&X long
.390477	a2 48 00	ldx #$0048	                LDX #72
.39047a	86 0f		stx $0f		                STX COLS_VISIBLE
.39047c	a0 34 00	ldy #$0034	                LDY #52
.39047f	84 13		sty $13		                STY LINES_VISIBLE
.390481	a2 80 00	ldx #$0080	                LDX #128
.390484	86 11		stx $11		                STX COLS_PER_LINE
.390486	a0 40 00	ldy #$0040	                LDY #64
.390489	84 15		sty $15		                STY LINES_MAX
.39048b	a9 ed 00	lda #$00ed	                LDA #$ED
.39048e	85 1e		sta $1e		                STA CURCOLOR
.390490	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.390494	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.390498	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.39049c	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904a0	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904a4	22 a4 0c 39	jsl $390ca4	                JSL INITMOUSEPOINTER
.3904a8	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904ac	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904b0	22 79 0c 39	jsl $390c79	                JSL IINITFONTSET
.3904b4	22 67 09 39	jsl $390967	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904b8	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904bb	22 45 43 38	jsl $384345	                JSL UART_SELECT
.3904bf	22 b1 43 38	jsl $3843b1	                JSL UART_INIT
.3904c3	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904c6	22 45 43 38	jsl $384345	                JSL UART_SELECT
.3904ca	22 b1 43 38	jsl $3843b1	                JSL UART_INIT
.3904ce	a9 00 00	lda #$0000	                LDA #0
.3904d1	22 38 10 38	jsl $381038	                JSL SETIN
.3904d5	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904d9	c2 20		rep #$20	                REP #$20        ; set A long
.3904db	a2 00 00	ldx #$0000	                LDX #0
.3904de	a0 00 00	ldy #$0000	                LDY #0
.3904e1	22 92 08 39	jsl $390892	                JSL ILOCATE
.3904e5	22 92 09 39	jsl $390992	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3904eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904ed					greet
.3904ed	48		pha		                PHA             ; begin setdbr macro
.3904ee	08		php		                PHP
.3904ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f1	a9 39		lda #$39	                LDA #`greet_msg
.3904f3	48		pha		                PHA
.3904f4	ab		plb		                PLB
.3904f5	28		plp		                PLP
.3904f6	68		pla		                PLA             ; end setdbr macro
.3904f7	a2 81 13	ldx #$1381	                LDX #<>greet_msg
.3904fa	22 66 06 39	jsl $390666	                JSL IPRINT       ; print the first line
.3904fe	48		pha		                PHA             ; begin setdp macro
.3904ff	08		php		                PHP
.390500	c2 20		rep #$20	                REP #$20        ; set A long
.390502	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390505	5b		tcd		                TCD
.390506	28		plp		                PLP
.390507	68		pla		                PLA             ; end setdp macro
.390508	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.39050c	e2 20		sep #$20	                SEP #$20        ; set A short
.39050e	c2 10		rep #$10	                REP #$10        ; set X long
.390510	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390512	8f 00 f1 af	sta $aff100	                STA $AFF100
.390516	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390518	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051c	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39051e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390522	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390524	8f 00 f1 af	sta $aff100	                STA $AFF100
.390528	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.39052a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052e	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390530	8f 00 f1 af	sta $aff100	                STA $AFF100
.390534	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390536	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053a	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.39053d	22 16 13 39	jsl $391316	          		 	JSL ILOOP_MS
.390541	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390543	8f 00 f1 af	sta $aff100	                STA $AFF100
.390547	a9 0f		lda #$0f	                LDA #$0F
.390549	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.39054d	a9 62		lda #$62	                LDA #$62
.39054f	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390553	a9 08		lda #$08	                LDA #$08
.390555	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390559	a9 00		lda #$00	                LDA #$00
.39055b	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.39055f	a9 08		lda #$08	                LDA #$08
.390561	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI
.390565	a9 08		lda #$08	                LDA #$08
.390567	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39056b	a9 c6		lda #$c6	                LDA #198
.39056d	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390571	a9 11		lda #$11	                LDA #$11
.390573	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390577	a2 00 80	ldx #$8000	                LDX #32768      ; 100ms
.39057a	22 16 13 39	jsl $391316	    						JSL ILOOP_MS
.39057e	a9 10		lda #$10	                LDA #$10
.390580	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390584	a9 00		lda #$00	                LDA #$00
.390586	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390587	e2 20		sep #$20	                SEP #$20        ; set A short
.390589	c2 10		rep #$10	                REP #$10        ; set X long
.39058b	48		pha		                PHA             ; begin setdbr macro
.39058c	08		php		                PHP
.39058d	e2 20		sep #$20	                SEP #$20        ; set A short
.39058f	a9 39		lda #$39	                LDA #`greet_msg
.390591	48		pha		                PHA
.390592	ab		plb		                PLB
.390593	28		plp		                PLP
.390594	68		pla		                PLA             ; end setdbr macro
.390595	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390599	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.39059b	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39059d	f0 14		beq $3905b3	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39059f	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a1	f0 0b		beq $3905ae	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a3	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905a5	f0 11		beq $3905b8	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905a7	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905ab	ea		nop		CREDIT_LOCK     NOP
.3905ac	80 fd		bra $3905ab	                BRA CREDIT_LOCK
.3905ae					BOOTSDC
.3905ae	a2 28 17	ldx #$1728	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.3905b1	80 08		bra $3905bb	                BRA PR_BOOT_ERROR
.3905b3					BOOTIDE
.3905b3	a2 55 17	ldx #$1755	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.3905b6	80 03		bra $3905bb	                BRA PR_BOOT_ERROR
.3905b8					BOOTFLOPPY
.3905b8	a2 84 17	ldx #$1784	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.3905bb	22 66 06 39	jsl $390666	PR_BOOT_ERROR   JSL IPRINT
.3905bf	ea		nop		LOOP_FOREVER    NOP
.3905c0	80 fd		bra $3905bf	                BRA LOOP_FOREVER
.3905c2					IBREAK
.3905c2	48		pha		                PHA             ; begin setdp macro
.3905c3	08		php		                PHP
.3905c4	c2 20		rep #$20	                REP #$20        ; set A long
.3905c6	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905c9	5b		tcd		                TCD
.3905ca	28		plp		                PLP
.3905cb	68		pla		                PLA             ; end setdp macro
.3905cc	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905cd	8f 48 02 00	sta $000248	                STA CPUY
.3905d1	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905d2	8f 46 02 00	sta $000246	                STA CPUX
.3905d6	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905d7	8f 44 02 00	sta $000244	                STA CPUA
.3905db	68		pla		                PLA
.3905dc	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3905e2	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905e3	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905e7	68		pla		                PLA             ; Pull Flags (8 bits)
.3905e8	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905ec	c2 20		rep #$20	                REP #$20        ; set A long
.3905ee	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905ef	8f 40 02 00	sta $000240	                STA CPUPC
.3905f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f5	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905f6	8f 42 02 00	sta $000242	                STA CPUPBR
.3905fa	c2 20		rep #$20	                REP #$20        ; set A long
.3905fc	3b		tsc		                TSA             ; Get the stack
.3905fd	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390601	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.390604	1b		tcs		                TAS
.390605	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390609					IREADY
.390609	48		pha		                PHA             ; begin setdbr macro
.39060a	08		php		                PHP
.39060b	e2 20		sep #$20	                SEP #$20        ; set A short
.39060d	a9 39		lda #$39	                LDA #`ready_msg
.39060f	48		pha		                PHA
.390610	ab		plb		                PLB
.390611	28		plp		                PLP
.390612	68		pla		                PLA             ; end setdbr macro
.390613	e2 20		sep #$20	                SEP #$20        ; set A short
.390615	a2 b6 17	ldx #$17b6	                LDX #<>ready_msg
.390618	22 66 06 39	jsl $390666	                JSL IPRINT
.39061c					IREADYWAIT
.39061c	22 36 06 39	jsl $390636	                JSL IGETCHE
.390620	80 fa		bra $39061c	                BRA IREADYWAIT
.390622	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390623	db		stp		IRETURN         STP
.390624	08		php		ISETIN          PHP
.390625	e2 20		sep #$20	                SEP #$20        ; set A short
.390627	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39062b	28		plp		                PLP
.39062c	6b		rtl		                RTL
.39062d	08		php		ISETOUT         PHP
.39062e	e2 20		sep #$20	                SEP #$20        ; set A short
.390630	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390634	28		plp		                PLP
.390635	6b		rtl		                RTL
.390636	22 3f 06 39	jsl $39063f	IGETCHE         JSL IGETCHW
.39063a	22 86 06 39	jsl $390686	                JSL IPUTC
.39063e	6b		rtl		                RTL
.39063f					IGETCHW
.39063f	08		php		                PHP
.390640	e2 20		sep #$20	                SEP #$20        ; set A short
.390642	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390646	f0 17		beq $39065f	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390648	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39064a	f0 09		beq $390655	                BEQ getc_uart       ; Yes: handle reading from the UART
.39064c	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39064e	f0 05		beq $390655	                BEQ getc_uart       ; Yes: handle reading from the UART
.390650	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390652	28		plp		                PLP
.390653	38		sec		                SEC                 ; And return carry set
.390654	6b		rtl		                RTL
.390655	22 45 43 38	jsl $384345	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390659	22 f9 43 38	jsl $3843f9	                JSL UART_GETC       ; Get the charater from the COM port
.39065d	80 04		bra $390663	                BRA done
.39065f	22 02 43 38	jsl $384302	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390663	28		plp		done            PLP
.390664	18		clc		                CLC                 ; Return carry clear for valid data
.390665	6b		rtl		                RTL
.390666	22 6f 06 39	jsl $39066f	IPRINT          JSL IPUTS
.39066a	22 a8 07 39	jsl $3907a8	                JSL IPRINTCR
.39066e	6b		rtl		                RTL
.39066f	48		pha		IPUTS           PHA
.390670	08		php		                PHP
.390671	e2 20		sep #$20	                SEP #$20        ; set A short
.390673	c2 10		rep #$10	                REP #$10        ; set X long
.390675	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390678	f0 08		beq $390682	                BEQ iputs_done
.39067a	22 86 06 39	jsl $390686	iputs2          JSL IPUTC
.39067e	e8		inx		iputs3          INX
.39067f	4c 75 06	jmp $390675	                JMP iputs1
.390682	e8		inx		iputs_done      INX
.390683	28		plp		                PLP
.390684	68		pla		                PLA
.390685	6b		rtl		                RTL
.390686					IPUTC
.390686	da		phx		                PHX
.390687	5a		phy		                PHY
.390688	0b		phd		                PHD
.390689	8b		phb		                PHB
.39068a	08		php		                PHP                 ; stash the flags (we'll be changing M)
.39068b	48		pha		                PHA             ; begin setdp macro
.39068c	08		php		                PHP
.39068d	c2 20		rep #$20	                REP #$20        ; set A long
.39068f	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390692	5b		tcd		                TCD
.390693	28		plp		                PLP
.390694	68		pla		                PLA             ; end setdp macro
.390695	48		pha		                PHA             ; begin setdbr macro
.390696	08		php		                PHP
.390697	e2 20		sep #$20	                SEP #$20        ; set A short
.390699	a9 00		lda #$00	                LDA #0
.39069b	48		pha		                PHA
.39069c	ab		plb		                PLB
.39069d	28		plp		                PLP
.39069e	68		pla		                PLA             ; end setdbr macro
.39069f	e2 20		sep #$20	                SEP #$20        ; set A short
.3906a1	c2 10		rep #$10	                REP #$10        ; set X long
.3906a3	48		pha		                PHA                 ; Save the character to print
.3906a4	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906a8	f0 16		beq $3906c0	                BEQ putc_screen     ; If it's 0: print to the screen
.3906aa	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906ac	f0 07		beq $3906b5	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906ae	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906b0	f0 03		beq $3906b5	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906b2	68		pla		                PLA                 ; Otherwise, just exit
.3906b3	80 4b		bra $390700	                BRA done
.3906b5	22 45 43 38	jsl $384345	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3906b9	68		pla		                PLA                 ; Recover the character to send
.3906ba	22 1a 44 38	jsl $38441a	                JSL UART_PUTC       ; Send the character
.3906be	80 40		bra $390700	                BRA done
.3906c0	68		pla		putc_screen     PLA                 ; Get the character to print
.3906c1	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906c3	f0 5d		beq $390722	                BEQ go_down
.3906c5	c9 20		cmp #$20	                CMP #$20
.3906c7	90 19		bcc $3906e2	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906c9	c9 7f		cmp #$7f	                CMP #$7F
.3906cb	f0 39		beq $390706	                BEQ do_del
.3906cd	b0 02		bcs $3906d1	                BCS check_A0        ; [$20..$7E]: print it
.3906cf	80 29		bra $3906fa	                BRA printc
.3906d1	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3906d3	90 02		bcc $3906d7	                BCC check_ctrl1
.3906d5	80 23		bra $3906fa	                BRA printc          ; [$A0..$FF]: print it
.3906d7	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906d9	f0 47		beq $390722	                BEQ go_down         ; ... move the cursor down one row
.3906db	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906dd	f0 55		beq $390734	                BEQ go_left         ; ... move the cursor left one column
.3906df	4c 00 07	jmp $390700	                JMP done
.3906e2	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906e4	f0 54		beq $39073a	                BEQ do_TAB          ; ... move to the next TAB stop
.3906e6	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906e8	f0 28		beq $390712	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906ea	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906ec	f0 2e		beq $39071c	                BEQ do_cr           ; ... move cursor down and to the first column
.3906ee	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906f0	f0 36		beq $390728	                BEQ go_up           ; ... move the cursor up one row
.3906f2	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906f4	f0 38		beq $39072e	                BEQ go_right        ; ... move the cursor right one column
.3906f6	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906f8	f0 12		beq $39070c	                BEQ do_ins          ; ... insert a space
.3906fa	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906fc	22 ee 07 39	jsl $3907ee	                JSL ICSRRIGHT
.390700	28		plp		done            PLP
.390701	ab		plb		                PLB
.390702	2b		pld		                PLD
.390703	7a		ply		                PLY
.390704	fa		plx		                PLX
.390705	6b		rtl		                RTL
.390706	22 61 07 39	jsl $390761	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39070a	80 f4		bra $390700	                BRA done
.39070c	22 84 07 39	jsl $390784	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390710	80 ee		bra $390700	                BRA done
.390712	22 21 08 39	jsl $390821	backspace       JSL ICSRLEFT
.390716	22 61 07 39	jsl $390761	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39071a	80 e4		bra $390700	                BRA done
.39071c	22 a8 07 39	jsl $3907a8	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390720	80 de		bra $390700	                BRA done
.390722	22 6d 08 39	jsl $39086d	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390726	80 d8		bra $390700	                BRA done
.390728	22 47 08 39	jsl $390847	go_up           JSL ICSRUP          ; Move the cursor up one line
.39072c	80 d2		bra $390700	                BRA done
.39072e	22 ee 07 39	jsl $3907ee	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390732	80 cc		bra $390700	                BRA done
.390734	22 21 08 39	jsl $390821	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390738	80 c6		bra $390700	                BRA done
.39073a					do_TAB
.39073a	c2 20		rep #$20	                REP #$20        ; set A long
.39073c	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39073e	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390741	18		clc		                CLC
.390742	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390745	aa		tax		                TAX
.390746	a4 1c		ldy $1c		                LDY CURSORY
.390748	e2 20		sep #$20	                SEP #$20        ; set A short
.39074a	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39074c	90 04		bcc $390752	                BCC check_row       ; Yes: check the row
.39074e	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390751	c8		iny		                INY                 ; ... and the next row
.390752	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390754	90 05		bcc $39075b	                BCC do_locate       ; Yes: reposition the cursor
.390756	22 d4 08 39	jsl $3908d4	                JSL ISCROLLUP       ; No: scroll the screen
.39075a	88		dey		                DEY                 ; And set the row to the last one
.39075b	22 92 08 39	jsl $390892	do_locate       JSL ILOCATE         ; Set the cursor position
.39075f	80 9f		bra $390700	                BRA done
.390761	da		phx		SCRSHIFTLL      PHX
.390762	5a		phy		                PHY
.390763	48		pha		                PHA
.390764	08		php		                PHP
.390765	48		pha		                PHA             ; begin setdp macro
.390766	08		php		                PHP
.390767	c2 20		rep #$20	                REP #$20        ; set A long
.390769	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39076c	5b		tcd		                TCD
.39076d	28		plp		                PLP
.39076e	68		pla		                PLA             ; end setdp macro
.39076f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390771	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390773	a8		tay		                TAY                 ; Set it as the destination
.390774	aa		tax		                TAX
.390775	e8		inx		                INX                 ; And set the next cell as the source
.390776	38		sec		                SEC                 ; Calculate the length of the block to move
.390777	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.39077a	e5 1a		sbc $1a		                SBC CURSORX
.39077c	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39077f	28		plp		                PLP
.390780	68		pla		                PLA
.390781	7a		ply		                PLY
.390782	fa		plx		                PLX
.390783	6b		rtl		                RTL
.390784	da		phx		SCRSHIFTLR      PHX
.390785	48		pha		                PHA
.390786	08		php		                PHP
.390787	c2 30		rep #$30	                REP #$30        ; set A&X long
.390789	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39078b	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.39078e	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390791	a8		tay		                TAY                 ; And set that as the destination address
.390792	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390793	aa		tax		                TAX                 ; And make it the source
.390794	38		sec		                SEC                 ; Calculate the length of the block to move
.390795	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390798	e5 1a		sbc $1a		                SBC CURSORX
.39079a	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39079d	e2 20		sep #$20	                SEP #$20        ; set A short
.39079f	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907a1	87 17		sta [$17]	                STA [CURSORPOS]
.3907a3	28		plp		                PLP
.3907a4	68		pla		                PLA
.3907a5	fa		plx		                PLX
.3907a6	6b		rtl		                RTL
.3907a7					IPUTB
.3907a7	6b		rtl		                RTL
.3907a8					IPRINTCR
.3907a8	da		phx		                PHX
.3907a9	5a		phy		                PHY
.3907aa	08		php		                PHP
.3907ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3907ad	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907b1	f0 1c		beq $3907cf	                BEQ scr_printcr
.3907b3	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907b5	f0 06		beq $3907bd	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907b7	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907b9	f0 02		beq $3907bd	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907bb	80 1c		bra $3907d9	                BRA done
.3907bd	22 45 43 38	jsl $384345	uart_printcr    JSL UART_SELECT
.3907c1	a9 0d		lda #$0d	                LDA #CHAR_CR
.3907c3	22 86 06 39	jsl $390686	                JSL IPUTC
.3907c7	a9 0a		lda #$0a	                LDA #CHAR_LF
.3907c9	22 86 06 39	jsl $390686	                JSL IPUTC
.3907cd	80 0a		bra $3907d9	                BRA done
.3907cf	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907d2	a4 1c		ldy $1c		                LDY CURSORY
.3907d4	c8		iny		                INY
.3907d5	22 92 08 39	jsl $390892	                JSL ILOCATE
.3907d9	28		plp		done            PLP
.3907da	7a		ply		                PLY
.3907db	fa		plx		                PLX
.3907dc	6b		rtl		                RTL
.3907dd	da		phx		ICSRHOME        PHX
.3907de	5a		phy		                PHY
.3907df	08		php		                PHP
.3907e0	a2 00 00	ldx #$0000	                LDX #0
.3907e3	a0 00 00	ldy #$0000	                LDY #0
.3907e6	22 92 08 39	jsl $390892	                JSL ILOCATE
.3907ea	28		plp		                PLP
.3907eb	7a		ply		                PLY
.3907ec	fa		plx		                PLX
.3907ed	6b		rtl		                RTL
.3907ee	da		phx		ICSRRIGHT       PHX
.3907ef	5a		phy		                PHY
.3907f0	48		pha		                PHA
.3907f1	0b		phd		                PHD
.3907f2	08		php		                PHP
.3907f3	c2 20		rep #$20	                REP #$20        ; set A long
.3907f5	c2 10		rep #$10	                REP #$10        ; set X long
.3907f7	48		pha		                PHA             ; begin setdp macro
.3907f8	08		php		                PHP
.3907f9	c2 20		rep #$20	                REP #$20        ; set A long
.3907fb	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907fe	5b		tcd		                TCD
.3907ff	28		plp		                PLP
.390800	68		pla		                PLA             ; end setdp macro
.390801	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390803	e8		inx		                INX
.390804	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390806	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390808	90 0d		bcc $390817	                BCC icsrright_nowrap  ; No: just set the position
.39080a	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39080d	c8		iny		                INY                   ; And move to the next row
.39080e	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390810	90 05		bcc $390817	                BCC icsrright_nowrap  ; No: just set the position
.390812	88		dey		                DEY                   ; Yes: lock to the last row
.390813	22 d4 08 39	jsl $3908d4	                JSL ISCROLLUP         ; But scroll the screen up
.390817					icsrright_nowrap
.390817	22 92 08 39	jsl $390892	                JSL ILOCATE           ; Set the cursor position
.39081b	28		plp		                PLP
.39081c	2b		pld		                PLD
.39081d	68		pla		                PLA
.39081e	7a		ply		                PLY
.39081f	fa		plx		                PLX
.390820	6b		rtl		                RTL
.390821					ICSRLEFT
.390821	da		phx		                PHX
.390822	5a		phy		                PHY
.390823	48		pha		                PHA
.390824	0b		phd		                PHD
.390825	08		php		                PHP
.390826	c2 30		rep #$30	                REP #$30        ; set A&X long
.390828	48		pha		                PHA             ; begin setdp macro
.390829	08		php		                PHP
.39082a	c2 20		rep #$20	                REP #$20        ; set A long
.39082c	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39082f	5b		tcd		                TCD
.390830	28		plp		                PLP
.390831	68		pla		                PLA             ; end setdp macro
.390832	a5 1a		lda $1a		                LDA CURSORX
.390834	f0 0b		beq $390841	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390836	a6 1a		ldx $1a		                LDX CURSORX
.390838	ca		dex		                DEX
.390839	86 1a		stx $1a		                STX CURSORX
.39083b	a4 1c		ldy $1c		                LDY CURSORY
.39083d	22 92 08 39	jsl $390892	                JSL ILOCATE
.390841					icsrleft_done_already_zero
.390841	28		plp		                PLP
.390842	2b		pld		                PLD
.390843	68		pla		                PLA
.390844	7a		ply		                PLY
.390845	fa		plx		                PLX
.390846	6b		rtl		                RTL
.390847					ICSRUP
.390847	da		phx		                PHX
.390848	5a		phy		                PHY
.390849	48		pha		                PHA
.39084a	0b		phd		                PHD
.39084b	08		php		                PHP
.39084c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39084e	48		pha		                PHA             ; begin setdp macro
.39084f	08		php		                PHP
.390850	c2 20		rep #$20	                REP #$20        ; set A long
.390852	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390855	5b		tcd		                TCD
.390856	28		plp		                PLP
.390857	68		pla		                PLA             ; end setdp macro
.390858	a5 1c		lda $1c		                LDA CURSORY
.39085a	f0 0b		beq $390867	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.39085c	a4 1c		ldy $1c		                LDY CURSORY
.39085e	88		dey		                DEY
.39085f	84 1c		sty $1c		                STY CURSORY
.390861	a6 1a		ldx $1a		                LDX CURSORX
.390863	22 92 08 39	jsl $390892	                JSL ILOCATE
.390867					isrup_done_already_zero
.390867	28		plp		                PLP
.390868	2b		pld		                PLD
.390869	68		pla		                PLA
.39086a	7a		ply		                PLY
.39086b	fa		plx		                PLX
.39086c	6b		rtl		                RTL
.39086d	da		phx		ICSRDOWN        PHX
.39086e	5a		phy		                PHY
.39086f	0b		phd		                PHD
.390870	c2 30		rep #$30	                REP #$30        ; set A&X long
.390872	48		pha		                PHA             ; begin setdp macro
.390873	08		php		                PHP
.390874	c2 20		rep #$20	                REP #$20        ; set A long
.390876	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390879	5b		tcd		                TCD
.39087a	28		plp		                PLP
.39087b	68		pla		                PLA             ; end setdp macro
.39087c	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.39087e	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390880	c8		iny		                INY
.390881	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390883	90 05		bcc $39088a	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390885	88		dey		                DEY                         ; Yes: go back to the last row
.390886	22 d4 08 39	jsl $3908d4	                JSL ISCROLLUP               ; But scroll the screen up
.39088a					icsrdown_noscroll
.39088a	22 92 08 39	jsl $390892	                JSL ILOCATE                 ; And set the cursor position
.39088e	2b		pld		                PLD
.39088f	7a		ply		                PLY
.390890	fa		plx		                PLX
.390891	6b		rtl		                RTL
.390892	48		pha		ILOCATE         PHA
.390893	0b		phd		                PHD
.390894	08		php		                PHP
.390895	48		pha		                PHA             ; begin setdp macro
.390896	08		php		                PHP
.390897	c2 20		rep #$20	                REP #$20        ; set A long
.390899	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39089c	5b		tcd		                TCD
.39089d	28		plp		                PLP
.39089e	68		pla		                PLA             ; end setdp macro
.39089f	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908a1					ilocate_scroll
.3908a1	c4 13		cpy $13		                CPY LINES_VISIBLE
.3908a3	90 07		bcc $3908ac	                BCC ilocate_scrolldone
.3908a5	22 d4 08 39	jsl $3908d4	                JSL ISCROLLUP
.3908a9	88		dey		                DEY
.3908aa	80 f5		bra $3908a1	                BRA ilocate_scroll
.3908ac					ilocate_scrolldone
.3908ac	86 1a		stx $1a		                STX CURSORX
.3908ae	84 1c		sty $1c		                STY CURSORY
.3908b0	a5 0c		lda $0c		                LDA SCREENBEGIN
.3908b2					ilocate_row
.3908b2	c0 00 00	cpy #$0000	                CPY #$0
.3908b5	f0 08		beq $3908bf	                BEQ ilocate_right
.3908b7	18		clc		ilocate_down    CLC
.3908b8	65 11		adc $11		                ADC COLS_PER_LINE
.3908ba	88		dey		                DEY
.3908bb	f0 02		beq $3908bf	                BEQ ilocate_right
.3908bd	80 f8		bra $3908b7	                BRA ilocate_down
.3908bf	18		clc		ilocate_right   CLC
.3908c0	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.3908c2	85 17		sta $17		                STA CURSORPOS
.3908c4	a4 1c		ldy $1c		                LDY CURSORY
.3908c6	98		tya		                TYA
.3908c7	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.3908cb	8a		txa		                TXA
.3908cc	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3908d0	28		plp		ilocate_done    PLP
.3908d1	2b		pld		                PLD
.3908d2	68		pla		                PLA
.3908d3	6b		rtl		                RTL
.3908d4					ISCROLLUP
.3908d4	48		pha		                PHA
.3908d5	da		phx		                PHX
.3908d6	5a		phy		                PHY
.3908d7	8b		phb		                PHB
.3908d8	08		php		                PHP
.3908d9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908db	18		clc		                CLC
.3908dc	a0 00 a0	ldy #$a000	                LDY #$A000
.3908df	a2 80 a0	ldx #$a080	                LDX #$A080
.3908e2	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908e5	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908e8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ea	a0 00 c0	ldy #$c000	                LDY #$C000
.3908ed	a2 80 c0	ldx #$c080	                LDX #$C080
.3908f0	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908f3	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908f6	28		plp		                PLP
.3908f7	ab		plb		                PLB
.3908f8	7a		ply		                PLY
.3908f9	fa		plx		                PLX
.3908fa	68		pla		                PLA
.3908fb	6b		rtl		                RTL
.3908fc	08		php		IPRINTH         PHP
.3908fd	48		pha		                PHA
.3908fe					iprinth1
.3908fe	e2 20		sep #$20	                SEP #$20        ; set A short
.390900	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390903	4a		lsr a		                LSR
.390904	4a		lsr a		                LSR
.390905	4a		lsr a		                LSR
.390906	4a		lsr a		                LSR
.390907	22 56 09 39	jsl $390956	                JSL iprint_digit
.39090b	bd 00 00	lda $0000,x	                LDA #0,b,x
.39090e	22 56 09 39	jsl $390956	                JSL iprint_digit
.390912	ca		dex		                DEX
.390913	88		dey		                DEY
.390914	d0 e8		bne $3908fe	                BNE iprinth1
.390916	68		pla		                PLA
.390917	28		plp		                PLP
.390918	6b		rtl		                RTL
.390919					IPRINTAH
.390919	48		pha		                PHA
.39091a	08		php		                PHP
.39091b	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.39091f	08		php		                PHP                   ; Get the processor status into A
.390920	e2 20		sep #$20	                SEP #$20        ; set A short
.390922	c2 10		rep #$10	                REP #$10        ; set X long
.390924	68		pla		                PLA
.390925	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390927	c9 20		cmp #$20	                CMP #%00100000
.390929	f0 14		beq $39093f	                BEQ eight_bit
.39092b	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.39092f	4a		lsr a		                LSR A
.390930	4a		lsr a		                LSR A
.390931	4a		lsr a		                LSR A
.390932	4a		lsr a		                LSR A
.390933	22 56 09 39	jsl $390956	                JSL iprint_digit      ; And print it
.390937	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.39093b	22 56 09 39	jsl $390956	                JSL iprint_digit      ; And print it
.39093f	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390943	4a		lsr a		                LSR A
.390944	4a		lsr a		                LSR A
.390945	4a		lsr a		                LSR A
.390946	4a		lsr a		                LSR A
.390947	22 56 09 39	jsl $390956	                JSL iprint_digit      ; And print it
.39094b	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.39094f	22 56 09 39	jsl $390956	                JSL iprint_digit      ; And print it
.390953	28		plp		                PLP
.390954	68		pla		                PLA
.390955	6b		rtl		                RTL
.390956	da		phx		iprint_digit    PHX
.390957	c2 20		rep #$20	                REP #$20        ; set A long
.390959	29 0f 00	and #$000f	                AND #$0F
.39095c	aa		tax		                TAX
.39095d	bf ca 17 39	lda $3917ca,x	                LDA hex_digits,X
.390961	22 86 06 39	jsl $390686	                JSL IPUTC       ; Print the digit
.390965	fa		plx		                PLX
.390966	6b		rtl		                RTL
.390967	48		pha		ICLRSCREEN	    PHA
.390968	da		phx		                PHX
.390969	08		php		                PHP
.39096a	e2 20		sep #$20	                SEP #$20        ; set A short
.39096c	c2 10		rep #$10	                REP #$10        ; set X long
.39096e	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390971	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390973	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390977	e8		inx		                inx
.390978	e0 00 20	cpx #$2000	                cpx #$2000
.39097b	d0 f6		bne $390973	                bne iclearloop0
.39097d	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390980	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390984	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390988	e8		inx		                inx
.390989	e0 00 20	cpx #$2000	                cpx #$2000
.39098c	d0 f6		bne $390984	                bne iclearloop1
.39098e	28		plp		                PLP
.39098f	fa		plx		                PLX
.390990	68		pla		                PLA
.390991	6b		rtl		                RTL
.390992	48		pha		ICOLORFLAG      PHA
.390993	da		phx		                PHX
.390994	08		php		                PHP
.390995	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390997	a2 00		ldx #$00	                LDX #$00
.390999	bf b5 14 39	lda $3914b5,x	iclearloop2	    LDA @lgreet_clr_line1,x
.39099d	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.3909a1	bf df 14 39	lda $3914df,x	                LDA @lgreet_clr_line2,x
.3909a5	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.3909a9	bf 09 15 39	lda $391509,x	                LDA @lgreet_clr_line3,x
.3909ad	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.3909b1	bf 33 15 39	lda $391533,x	                LDA @lgreet_clr_line4,x
.3909b5	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.3909b9	bf 5d 15 39	lda $39155d,x	                LDA @lgreet_clr_line5,x
.3909bd	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.3909c1	e8		inx		                inx
.3909c2	e0 2a		cpx #$2a	                cpx #42
.3909c4	d0 d3		bne $390999	                bne iclearloop2
.3909c6	28		plp		                PLP
.3909c7	fa		plx		                PLX
.3909c8	68		pla		                PLA
.3909c9	6b		rtl		                RTL
.3909ca	0b		phd		IINITCHLUT		  PHD
.3909cb	08		php		                PHP
.3909cc	48		pha		                PHA
.3909cd	da		phx		                PHX
.3909ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d0	e2 10		sep #$10	                SEP #$10        ; set X short
.3909d2	a2 00		ldx #$00					        LDX	#$00
.3909d4	bf 87 15 39	lda $391587,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.3909d8	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909dc	e8		inx		                inx
.3909dd	e0 40		cpx #$40	                cpx #$40
.3909df	d0 f3		bne $3909d4	                bne lutinitloop0
.3909e1	a2 00		ldx #$00	                LDX	#$00
.3909e3	bf c7 15 39	lda $3915c7,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.3909e7	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909eb	e8		inx		                INX
.3909ec	e0 40		cpx #$40	                CPX #$40
.3909ee	d0 f3		bne $3909e3	                bne lutinitloop1
.3909f0	c2 20		rep #$20	                REP #$20        ; set A long
.3909f2	c2 10		rep #$10	                REP #$10        ; set X long
.3909f4	fa		plx		                PLX
.3909f5	68		pla		                PLA
.3909f6	28		plp		                PLP
.3909f7	2b		pld		                PLD
.3909f8	6b		rtl		                RTL
.3909f9					IINITGAMMATABLE
.3909f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3909fb	c2 10		rep #$10	                REP #$10        ; set X long
.3909fd	a2 00 00	ldx #$0000	                ldx #$0000
.390a00	bf 00 1c 39	lda $391c00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a04	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a08	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a0c	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a10	e8		inx		                inx
.390a11	e0 00 01	cpx #$0100	                cpx #$0100
.390a14	d0 ea		bne $390a00	                bne initgammaloop
.390a16	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a18	6b		rtl		                RTL
.390a19	48		pha		IINITALLLUT     PHA
.390a1a	da		phx		                PHX
.390a1b	a2 00 00	ldx #$0000	                LDX #$0000
.390a1e	e2 20		sep #$20	                SEP #$20        ; set A short
.390a20	a9 00		lda #$00	                LDA #$00
.390a22	85 0a		sta $0a		                STA $0A     ; Temp Location
.390a24					iinit_lut_loop
.390a24	86 02		stx $02		                STX $02
.390a26	a6 0a		ldx $0a		                LDX $0A
.390a28	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_2_2_Tbl, x
.390a2c	49 55		eor #$55	                EOR  #$55
.390a2e	a6 02		ldx $02		                LDX $02
.390a30	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a34	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a38	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a3c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a40	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a44	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a48	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a4c	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a50	e8		inx		                inx
.390a51	86 02		stx $02		                STX $02
.390a53	a6 0a		ldx $0a		                LDX $0A
.390a55	bf 00 1d 39	lda $391d00,x	                LDA RANDOM_LUT_Tbl, x
.390a59	a6 02		ldx $02		                LDX $02
.390a5b	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a5f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a63	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a67	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a6b	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a6f	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a73	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a77	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a7b	e8		inx		                inx
.390a7c	86 02		stx $02		                STX $02
.390a7e	a6 0a		ldx $0a		                LDX $0A
.390a80	bf 00 1c 39	lda $391c00,x	                LDA GAMMA_1_8_Tbl, x
.390a84	49 aa		eor #$aa	                EOR  #$AA
.390a86	a6 02		ldx $02		                LDX $02
.390a88	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a8c	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a90	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a94	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a98	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a9c	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aa0	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aa4	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aa8	e8		inx		                inx
.390aa9	a9 ff		lda #$ff	                LDA #$FF
.390aab	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390aaf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ab3	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ab7	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390abb	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390abf	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ac3	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ac7	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390acb	e6 0a		inc $0a		                inc $0A
.390acd	e8		inx		                inx
.390ace	e0 00 04	cpx #$0400	                cpx #$0400
.390ad1	f0 03		beq $390ad6	                beq iinit_lut_exit
.390ad3	82 4e ff	brl $390a24	                brl iinit_lut_loop
.390ad6					iinit_lut_exit
.390ad6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ad8	fa		plx		                PLX
.390ad9	68		pla		                PLA
.390ada	6b		rtl		                RTL
.390adb	48		pha		IINITVKYTXTMODE PHA
.390adc	e2 20		sep #$20	                SEP #$20        ; set A short
.390ade	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390ae0	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390ae4	a9 20		lda #$20	                LDA #$20
.390ae6	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390aea	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390aee	a9 00		lda #$00	                LDA #$00
.390af0	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390af4	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390af6	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390afa	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390afc	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b00	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b02	68		pla		                PLA
.390b03	6b		rtl		                RTL
.390b04					IINITVKYGRPMODE
.390b04	48		pha		                PHA
.390b05	e2 20		sep #$20	                SEP #$20        ; set A short
.390b07	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b09	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390b0d	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390b0f	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390b13	a9 c0		lda #$c0	                LDA #$C0
.390b15	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390b19	a9 00		lda #$00	                LDA #$00
.390b1b	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390b1f	a9 80		lda #$80	                LDA #$80
.390b21	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390b25	a9 02		lda #$02	                LDA #$02
.390b27	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b2b	a9 e0		lda #$e0	                LDA #$E0
.390b2d	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390b31	a9 01		lda #$01	                LDA #$01
.390b33	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390b37	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b39	68		pla		                PLA
.390b3a	6b		rtl		                RTL
.390b3b					IINITTILEMODE
.390b3b	6b		rtl		                RTL
.390b3c	48		pha		IINITSPRITE     PHA
.390b3d	e2 20		sep #$20	                SEP #$20        ; set A short
.390b3f	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b41	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b45	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b49	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b4d	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390b51	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390b55	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390b59	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b5d	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b61	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b65	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b69	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b6d	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b71	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b75	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b79	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b7d	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b81	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b85	a9 09		lda #$09	                LDA #$09
.390b87	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b8b	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b8f	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b93	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b97	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b9b	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b9f	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390ba3	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390ba7	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390bab	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390baf	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390bb3	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390bb7	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390bbb	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390bbf	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390bc3	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390bc7	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390bcb	a9 00		lda #$00	                LDA #$00
.390bcd	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390bd1	a9 04		lda #$04	                LDA #$04
.390bd3	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390bd7	a9 08		lda #$08	                LDA #$08
.390bd9	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390bdd	a9 0c		lda #$0c	                LDA #$0C
.390bdf	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390be3	a9 10		lda #$10	                LDA #$10
.390be5	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390be9	a9 14		lda #$14	                LDA #$14
.390beb	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390bef	a9 18		lda #$18	                LDA #$18
.390bf1	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390bf5	a9 1c		lda #$1c	                LDA #$1C
.390bf7	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390bfb	a9 20		lda #$20	                LDA #$20
.390bfd	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390c01	a9 24		lda #$24	                LDA #$24
.390c03	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390c07	a9 28		lda #$28	                LDA #$28
.390c09	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390c0d	a9 2c		lda #$2c	                LDA #$2C
.390c0f	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390c13	a9 30		lda #$30	                LDA #$30
.390c15	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390c19	a9 34		lda #$34	                LDA #$34
.390c1b	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390c1f	a9 38		lda #$38	                LDA #$38
.390c21	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390c25	a9 3c		lda #$3c	                LDA #$3C
.390c27	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c2b	a9 40		lda #$40	                LDA #$40
.390c2d	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390c31	a9 00		lda #$00	                LDA #$00
.390c33	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390c37	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390c3b	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390c3f	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c43	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c47	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c4b	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390c4f	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390c53	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390c57	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c5b	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c5f	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c63	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c67	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c6b	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c6f	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c73	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c77	68		pla		                PLA
.390c78	6b		rtl		                RTL
.390c79					IINITFONTSET
.390c79	e2 20		sep #$20	                SEP #$20        ; set A short
.390c7b	c2 10		rep #$10	                REP #$10        ; set X long
.390c7d	a2 00 00	ldx #$0000	                LDX #$0000
.390c80					initFontsetbranch0
.390c80	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c84	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c88	e8		inx		                INX
.390c89	e0 00 08	cpx #$0800	                CPX #$0800
.390c8c	d0 f2		bne $390c80	                BNE initFontsetbranch0
.390c8e	ea		nop		                NOP
.390c8f	a2 00 00	ldx #$0000	                LDX #$0000
.390c92					initFontsetbranch1
.390c92	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c96	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c9a	e8		inx		                INX
.390c9b	e0 00 08	cpx #$0800	                CPX #$0800
.390c9e	d0 f2		bne $390c92	                BNE initFontsetbranch1
.390ca0	ea		nop		                NOP
.390ca1	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ca3	6b		rtl		                RTL
.390ca4					INITMOUSEPOINTER
.390ca4	e2 20		sep #$20	                SEP #$20        ; set A short
.390ca6	c2 10		rep #$10	                REP #$10        ; set X long
.390ca8	a2 00 00	ldx #$0000	                LDX #$0000
.390cab					FILL_MOUSE_MARKER
.390cab	bf 00 1e 39	lda $391e00,x	                LDA @lMOUSE_POINTER_PTR,X
.390caf	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390cb3	e8		inx		                INX
.390cb4	e0 00 01	cpx #$0100	                CPX #$0100
.390cb7	d0 f2		bne $390cab	                BNE FILL_MOUSE_MARKER
.390cb9	ea		nop		                nop
.390cba	a9 01		lda #$01	                LDA #$01
.390cbc	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390cc0	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cc2	6b		rtl		                RTL
.390cc3	48		pha		IINITCURSOR     PHA
.390cc4	e2 20		sep #$20	                SEP #$20        ; set A short
.390cc6	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390cc8	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ccc	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390cce	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390cd2	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cd4	a9 00 00	lda #$0000	                LDA #$0000;
.390cd7	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390cdb	a9 06 00	lda #$0006	                LDA #$0006;
.390cde	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ce2	68		pla		                PLA
.390ce3	6b		rtl		                RTL
.390ce4	0b		phd		IINITSUPERIO	  PHD
.390ce5	08		php		                PHP
.390ce6	48		pha		                PHA
.390ce7	e2 20		sep #$20	                SEP #$20        ; set A short
.390ce9	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ceb	8f 23 11 af	sta $af1123	                STA GP10_REG
.390cef	af 23 11 af	lda $af1123	                LDA GP10_REG
.390cf3	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cf5	8f 24 11 af	sta $af1124	                STA GP11_REG
.390cf9	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cfb	8f 25 11 af	sta $af1125	                STA GP12_REG
.390cff	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d01	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390d05	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390d07	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390d0b	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390d0d	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390d11	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390d13	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390d17	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390d19	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390d1d	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390d1f	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390d23	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d25	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390d29	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d2b	8f 30 11 af	sta $af1130					        STA GP25_REG
.390d2f	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d31	8f 31 11 af	sta $af1131					        STA GP26_REG
.390d35	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d37	8f 33 11 af	sta $af1133					        STA GP30_REG
.390d3b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d3d	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d41	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d43	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d47	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d49	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d4d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d4f	8f 37 11 af	sta $af1137					        STA GP34_REG
.390d53	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d55	8f 38 11 af	sta $af1138					        STA GP35_REG
.390d59	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d5b	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d5f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d61	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d65	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d67	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d6b	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d6d	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d71	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d73	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d77	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d79	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d7d	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d7f	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d83	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d85	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d89	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d8b	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d8f	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d91	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d95	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d97	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d9b	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d9d	8f 46 11 af	sta $af1146					        STA GP57_REG
.390da1	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390da3	8f 47 11 af	sta $af1147					        STA GP60_REG
.390da7	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390da9	8f 48 11 af	sta $af1148					        STA GP61_REG
.390dad	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390daf	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390db3	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390db5	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390db9	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390dbb	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390dbf	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390dc1	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390dc5	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390dc7	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390dcb	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390dcd	8f 50 11 af	sta $af1150					        STA GP6_REG
.390dd1	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390dd3	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390dd7	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390dd9	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390ddd	c2 20		rep #$20	                REP #$20        ; set A long
.390ddf	68		pla		                PLA
.390de0	28		plp						        PLP
.390de1	2b		pld					        	PLD
.390de2	6b		rtl		                RTL
.390de3	0b		phd		IINITKEYBOARD	  PHD
.390de4	08		php						        PHP
.390de5	48		pha						        PHA
.390de6	da		phx						        PHX
.390de7	e2 20		sep #$20	                SEP #$20        ; set A short
.390de9	c2 10		rep #$10	                REP #$10        ; set X long
.390deb	18		clc		                CLC
.390dec	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf ;
.390def	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390df1	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390df5	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390df8	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390dfc	c9 55		cmp #$55					        CMP #$55
.390dfe	f0 03		beq $390e03					        BEQ	passAAtest
.390e00	82 89 00	brl $390e8c	                BRL initkb_loop_out
.390e03					passAAtest
.390e03	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390e05	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390e09	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390e0c	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390e10	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390e12	f0 03		beq $390e17					        BEQ	passABtest
.390e14	82 75 00	brl $390e8c	                BRL initkb_loop_out
.390e17					passABtest
.390e17	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390e19	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e1d	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf ;
.390e20	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390e22	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e26	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf ;
.390e29	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e2b	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e2f	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e32	ca		dex		DLY_LOOP1       DEX
.390e33	ea		nop		                NOP
.390e34	ea		nop		                NOP
.390e35	ea		nop		                NOP
.390e36	ea		nop		                NOP
.390e37	ea		nop		                NOP
.390e38	ea		nop		                NOP
.390e39	ea		nop		                NOP
.390e3a	ea		nop		                NOP
.390e3b	e0 00 00	cpx #$0000	                CPX #$0000
.390e3e	d0 f2		bne $390e32	                BNE DLY_LOOP1
.390e40	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390e43	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e47					DO_CMD_F4_AGAIN
.390e47	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf ;
.390e4a	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e4c	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390e50	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390e53	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e57	c9 fa		cmp #$fa	                CMP #$FA
.390e59	d0 ec		bne $390e47	                BNE DO_CMD_F4_AGAIN
.390e5b	20 b2 0e	jsr $390eb2	                JSR INIT_MOUSE
.390e5e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e62	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e64	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e68	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e6c	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e6e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e72	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e76	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e78	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e7c	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e80	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e82	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e86	a2 83 16	ldx #$1683	                LDX #<>Success_kb_init
.390e89	38		sec		                SEC
.390e8a	b0 03		bcs $390e8f	                BCS InitSuccess
.390e8c	a2 95 16	ldx #$1695	initkb_loop_out LDX #<>Failed_kb_init
.390e8f	22 66 06 39	jsl $390666	InitSuccess     JSL IPRINT       ; print Message
.390e93	c2 20		rep #$20	                REP #$20        ; set A long
.390e95	c2 10		rep #$10	                REP #$10        ; set X long
.390e97	fa		plx		                PLX
.390e98	68		pla		                PLA
.390e99	28		plp						        PLP
.390e9a	2b		pld						        PLD
.390e9b	6b		rtl		                RTL
.390e9c					Poll_Inbuf
.390e9c	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390ea0	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390ea2	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390ea4	f0 f6		beq $390e9c					        BEQ Poll_Inbuf
.390ea6	60		rts		                RTS
.390ea7					Poll_Outbuf
.390ea7	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390eab	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390ead	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390eaf	d0 f6		bne $390ea7	                BNE Poll_Outbuf
.390eb1	60		rts		                RTS
.390eb2					INIT_MOUSE
.390eb2	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390eb5	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390eb7	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ebb					DO_CMD_A9_AGAIN
.390ebb	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390ebe	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390ec0	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ec4	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390ec7	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ecb	c9 00		cmp #$00	                CMP #$00
.390ecd	d0 ec		bne $390ebb	                BNE DO_CMD_A9_AGAIN
.390ecf	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390ed2	a9 20		lda #$20	                LDA #$20
.390ed4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ed8	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390edb	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390edf	09 02		ora #$02	                ORA #$02
.390ee1	48		pha		                PHA
.390ee2	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390ee5	a9 60		lda #$60	                LDA #$60
.390ee7	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eeb	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf ;
.390eee	68		pla		                PLA
.390eef	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ef3	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ef5	20 18 0f	jsr $390f18	                JSR MOUSE_WRITE
.390ef8	20 2b 0f	jsr $390f2b	                JSR MOUSE_READ
.390efb	a9 e8		lda #$e8	                LDA #$E8
.390efd	20 18 0f	jsr $390f18	                JSR MOUSE_WRITE
.390f00	20 2b 0f	jsr $390f2b	                JSR MOUSE_READ
.390f03	a9 00		lda #$00	                LDA #$00
.390f05	20 18 0f	jsr $390f18	                JSR MOUSE_WRITE
.390f08	20 2b 0f	jsr $390f2b	                JSR MOUSE_READ
.390f0b	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390f0d	20 18 0f	jsr $390f18	                JSR MOUSE_WRITE
.390f10	20 2b 0f	jsr $390f2b	                JSR MOUSE_READ
.390f13	a9 00		lda #$00	                LDA #$00
.390f15	85 e0		sta $e0		                STA MOUSE_PTR
.390f17	60		rts		                RTS
.390f18					MOUSE_WRITE
.390f18	48		pha		                PHA
.390f19	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390f1c	a9 d4		lda #$d4	                LDA #$D4
.390f1e	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f22	20 9c 0e	jsr $390e9c	                JSR Poll_Inbuf
.390f25	68		pla		                PLA
.390f26	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f2a	60		rts		                RTS
.390f2b					MOUSE_READ
.390f2b	20 a7 0e	jsr $390ea7	                JSR Poll_Outbuf ;
.390f2e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390f32	60		rts		                RTS
.390f33	48		pha		INITRTC         PHA
.390f34	e2 20		sep #$20	                SEP #$20        ; set A short
.390f36	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390f3a	00		brk #		                BRK
.390f3b	c2 20		rep #$20	                REP #$20        ; set A long
.390f3d	68		pla		                PLA
.390f3e	6b		rtl		                RTL
.390f3f					ITESTSID
.390f3f	a9 0f 00	lda #$000f	                LDA #$0F
.390f42	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390f46	a9 be 00	lda #$00be	                LDA #$BE
.390f49	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390f4d	a9 f8 00	lda #$00f8	                LDA #$F8
.390f50	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f54	a9 11 00	lda #$0011	                LDA #$11
.390f57	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f5b	a9 25 00	lda #$0025	                LDA #$25
.390f5e	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f62	a9 11 00	lda #$0011	                LDA #$11
.390f65	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f69	a9 08 00	lda #$0008	                LDA #$08
.390f6c	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f70	a9 00 00	lda #$0000	                LDA #$00
.390f73	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f77	a9 c6 00	lda #$00c6	                LDA #$C6
.390f7a	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f7e	a9 08 00	lda #$0008	                LDA #$08
.390f81	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f85	a9 00 00	lda #$0000	                LDA #$00
.390f88	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f8c	a9 08 00	lda #$0008	                LDA #$08
.390f8f	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f93	a9 c6 00	lda #$00c6	                LDA #$C6
.390f96	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f9a	a9 08 00	lda #$0008	                LDA #$08
.390f9d	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390fa1	a9 00 00	lda #$0000	                LDA #$00
.390fa4	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390fa8	a9 08 00	lda #$0008	                LDA #$08
.390fab	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390faf	a9 c6 00	lda #$00c6	                LDA #$C6
.390fb2	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390fb6	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390fb9	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390fbd	a9 01 00	lda #$0001	                LDA #$01
.390fc0	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390fc4	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fc7	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390fcb	a9 08 00	lda #$0008	                LDA #$08
.390fce	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fd2	a9 08 00	lda #$0008	                LDA #$08
.390fd5	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390fd9	a9 0c 00	lda #$000c	                LDA #$0C
.390fdc	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390fe0	a9 04 00	lda #$0004	                LDA #$04
.390fe3	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390fe7	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fea	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390fee	a9 08 00	lda #$0008	                LDA #$08
.390ff1	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390ff5	a9 08 00	lda #$0008	                LDA #$08
.390ff8	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390ffc	a9 00 00	lda #$0000	                LDA #$00
.390fff	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391003	a9 08 00	lda #$0008	                LDA #$08
.391006	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.39100a	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.39100d	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391011	a9 08 00	lda #$0008	                LDA #$08
.391014	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391018	a9 08 00	lda #$0008	                LDA #$08
.39101b	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.39101f	a9 10 00	lda #$0010	                LDA #$10
.391022	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391026	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39102a	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39102e	6b		rtl		                RTL
.39102f	48		pha		IINITCODEC      PHA
.391030	c2 20		rep #$20	                REP #$20        ; set A long
.391032	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391035	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391039	a9 01 00	lda #$0001	                LDA #$0001
.39103c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391040	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391043	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391046	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39104a	a9 01 00	lda #$0001	                LDA #$0001
.39104d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391051	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391054	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391057	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39105b	a9 01 00	lda #$0001	                LDA #$0001
.39105e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391062	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391065	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391068	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39106c	a9 01 00	lda #$0001	                LDA #$0001
.39106f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391073	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391076	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391079	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39107d	a9 01 00	lda #$0001	                LDA #$0001
.391080	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391084	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391087	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.39108a	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39108e	a9 01 00	lda #$0001	                LDA #$0001
.391091	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391095	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.391098	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.39109b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39109f	a9 01 00	lda #$0001	                LDA #$0001
.3910a2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910a6	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.3910a9	68		pla		                PLA
.3910aa	6b		rtl		                RTL
.3910ab					IRESETCODEC
.3910ab	c2 20		rep #$20	                REP #$20        ; set A long
.3910ad	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3910b0	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910b4	a9 01 00	lda #$0001	                LDA #$0001
.3910b7	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910bb	20 bf 10	jsr $3910bf	                JSR CODEC_TRF_FINISHED
.3910be	6b		rtl		                RTL
.3910bf					CODEC_TRF_FINISHED
.3910bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3910c1	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3910c5	29 01		and #$01	                AND #$01
.3910c7	c9 01		cmp #$01	                CMP #$01
.3910c9	f0 f6		beq $3910c1	                BEQ CODEC_LOOP
.3910cb	c2 20		rep #$20	                REP #$20        ; set A long
.3910cd	60		rts		                RTS
.3910ce					IBM_FILL_SCREEN
.3910ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910d0	a9 00 00	lda #$0000	                LDA #$0000
.3910d3	a2 00 00	ldx #$0000	                LDX #$0000
.3910d6					BM_FILL_SCREEN_LOOPY
.3910d6	a0 00 00	ldy #$0000	                LDY #$0000
.3910d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3910db					BM_FILL_SCREEN_LOOPX
.3910db	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3910dd	c8		iny		                INY
.3910de	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3910e0	d0 f9		bne $3910db	                BNE BM_FILL_SCREEN_LOOPX
.3910e2	20 ed 10	jsr $3910ed	                JSR BM_FILL_COMPUTE_Y_DST
.3910e5	e8		inx		                INX
.3910e6	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3910e8	d0 ec		bne $3910d6	                BNE BM_FILL_SCREEN_LOOPY
.3910ea	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910ec	6b		rtl		                RTL
.3910ed					BM_FILL_COMPUTE_Y_DST
.3910ed	c2 20		rep #$20	                REP #$20        ; set A long
.3910ef	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910f1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910f5	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3910f7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910fb	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910fe	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391102	a9 00 00	lda #$0000	                LDA #$0000
.391105	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391109	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39110d	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39110f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391113	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391115	a9 00 00	lda #$0000	                LDA #$0000
.391118	60		rts		                RTS
.391119					IBMP_PARSER
.391119	c2 30		rep #$30	                REP #$30        ; set A&X long
.39111b	a0 00 00	ldy #$0000	                LDY #$0000
.39111e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391120	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391123	f0 03		beq $391128	                BEQ IBMP_PARSER_CONT
.391125	82 04 01	brl $39122c	                BRL BMP_PARSER_END_WITH_ERROR
.391128					IBMP_PARSER_CONT
.391128	a0 02 00	ldy #$0002	                LDY #$0002
.39112b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39112d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391131	a0 04 00	ldy #$0004	                LDY #$0004
.391134	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391136	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39113a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39113d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391141	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391145	18		clc		                CLC
.391146	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39114a	85 50		sta $50		                STA BMP_FILE_SIZE
.39114c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391150	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391152	a0 12 00	ldy #$0012	                LDY #$0012
.391155	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391157	85 40		sta $40		                STA BMP_X_SIZE
.391159	a0 16 00	ldy #$0016	                LDY #$0016
.39115c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39115e	85 42		sta $42		                STA BMP_Y_SIZE
.391160	a0 2e 00	ldy #$002e	                LDY #$002E
.391163	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391165	0a		asl a		                ASL A; Multiply by 2
.391166	0a		asl a		                ASL A; Multiply by 2
.391167	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391169	e0 00 00	cpx #$0000	                CPX #$0000
.39116c	d0 05		bne $391173	                BNE BMP_LUT1_PICK
.39116e	20 34 12	jsr $391234	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391171	80 08		bra $39117b	                BRA DONE_TRANSFER_LUT;
.391173					  BMP_LUT1_PICK
.391173	e0 01 00	cpx #$0001	                CPX #$0001
.391176	d0 03		bne $39117b	                BNE BMP_LUT2_PICK
.391178	20 64 12	jsr $391264	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39117b					  BMP_LUT2_PICK
.39117b					  DONE_TRANSFER_LUT
.39117b	a5 56		lda $56		                LDA BMP_POSITION_Y
.39117d	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.391181	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391183	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.391187	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.39118b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39118f	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.391193	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391197	a5 54		lda $54		                LDA BMP_POSITION_X
.391199	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39119d	a9 00 00	lda #$0000	                LDA #$0000
.3911a0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911a4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3911a8	85 f0		sta $f0		                STA USER_TEMP
.3911aa	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3911ae	85 f2		sta $f2		                STA USER_TEMP+2
.3911b0	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3911b2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3911b6	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3911b8	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3911bc	a5 f0		lda $f0		                LDA USER_TEMP
.3911be	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3911c2	a5 f2		lda $f2		                LDA USER_TEMP+2
.3911c4	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3911c8	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3911cc	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3911ce	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3911d2	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3911d4	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3911d6	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911da	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3911dc	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911e0	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3911e2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911e6	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3911e8	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911ec	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911f0	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911f2	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911f6	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911f8	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911fa	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911fe	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391200	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391204	18		clc		                CLC
.391205	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391207	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39120a	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39120d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391211	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391214	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391218	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39121c	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39121e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391222	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391224	20 94 12	jsr $391294	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391227	a2 d1 16	ldx #$16d1	                LDX #<>bmp_parser_msg0
.39122a	80 03		bra $39122f	                BRA BMP_PARSER_END_NO_ERROR
.39122c					BMP_PARSER_END_WITH_ERROR
.39122c	a2 bd 16	ldx #$16bd	                LDX #<>bmp_parser_err0
.39122f					BMP_PARSER_END_NO_ERROR
.39122f	22 66 06 39	jsl $390666	                JSL IPRINT       ; print the first line
.391233	6b		rtl		                RTL
.391234					BMP_PARSER_UPDATE_LUT0
.391234	38		sec		                SEC
.391235	a0 7a 00	ldy #$007a	                LDY #$007A
.391238	a2 00 00	ldx #$0000	                LDX #$0000
.39123b	e2 20		sep #$20	                SEP #$20        ; set A short
.39123d					BMP_PARSER_UPDATE_LOOP
.39123d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39123f	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391243	c8		iny		                INY
.391244	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391246	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39124a	c8		iny		                INY
.39124b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39124d	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391251	c8		iny		                INY
.391252	a9 80		lda #$80	                LDA #$80
.391254	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391258	c8		iny		                INY ; For the Alpha Value, nobody cares
.391259	e8		inx		                INX
.39125a	e8		inx		                INX
.39125b	e8		inx		                INX
.39125c	e8		inx		                INX
.39125d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39125f	d0 dc		bne $39123d	                BNE BMP_PARSER_UPDATE_LOOP
.391261	c2 20		rep #$20	                REP #$20        ; set A long
.391263	60		rts		                RTS
.391264					BMP_PARSER_UPDATE_LUT1
.391264	38		sec		                SEC
.391265	a0 36 00	ldy #$0036	                LDY #$0036
.391268	a2 00 00	ldx #$0000	                LDX #$0000
.39126b	e2 20		sep #$20	                SEP #$20        ; set A short
.39126d					PALETTE_LUT1_LOOP
.39126d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39126f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391273	c8		iny		                INY
.391274	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391276	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39127a	c8		iny		                INY
.39127b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39127d	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391281	c8		iny		                INY
.391282	a9 80		lda #$80	                LDA #$80
.391284	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391288	c8		iny		                INY ; For the Alpha Value, nobody cares
.391289	e8		inx		                INX
.39128a	e8		inx		                INX
.39128b	e8		inx		                INX
.39128c	e8		inx		                INX
.39128d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39128f	d0 dc		bne $39126d	                BNE PALETTE_LUT1_LOOP
.391291	c2 20		rep #$20	                REP #$20        ; set A long
.391293	60		rts		                RTS
.391294					BMP_PARSER_DMA_SHIT_OUT
.391294	a2 00 00	ldx #$0000	                LDX #$0000
.391297					BMP_PARSER_LOOPY
.391297	a0 00 00	ldy #$0000	                LDY #$0000
.39129a	e2 20		sep #$20	                SEP #$20        ; set A short
.39129c					BMP_PARSER_LOOPX
.39129c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39129e	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3912a0	c8		iny		                INY
.3912a1	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3912a3	d0 f7		bne $39129c	                BNE BMP_PARSER_LOOPX
.3912a5	20 b1 12	jsr $3912b1	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3912a8	20 cc 12	jsr $3912cc	                JSR BMP_PARSER_COMPUTE_Y_DST
.3912ab	e8		inx		                INX
.3912ac	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3912ae	d0 e7		bne $391297	                BNE BMP_PARSER_LOOPY
.3912b0	60		rts		                RTS
.3912b1					BMP_PARSER_COMPUTE_Y_SRC
.3912b1	c2 20		rep #$20	                REP #$20        ; set A long
.3912b3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3912b5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912b9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3912bb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912bf	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912c3	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3912c5	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912c9	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3912cb	60		rts		                RTS
.3912cc					BMP_PARSER_COMPUTE_Y_DST
.3912cc	c2 20		rep #$20	                REP #$20        ; set A long
.3912ce	18		clc		                CLC
.3912cf	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912d1	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3912d3	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912d5	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912d7	69 00 00	adc #$0000	                ADC #$0000
.3912da	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912dc	60		rts		                RTS
.3912dd	ea		nop		ILOOP           NOP
.3912de	ea		nop		                NOP
.3912df	ea		nop		                NOP
.3912e0	ea		nop		                NOP
.3912e1	ea		nop		                NOP
.3912e2	ea		nop		                NOP
.3912e3	ea		nop		                NOP
.3912e4	ea		nop		                NOP
.3912e5	ea		nop		                NOP
.3912e6	ea		nop		                NOP
.3912e7	6b		rtl		                RTL
.3912e8	22 dd 12 39	jsl $3912dd	ILOOP_1         JSL ILOOP
.3912ec	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.3912f0	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.3912f4	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.3912f8	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.3912fc	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.391300	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.391304	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.391308	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.39130c	22 dd 12 39	jsl $3912dd	                JSL ILOOP
.391310	6b		rtl		                RTL
.391311	22 e8 12 39	jsl $3912e8	ILOOP_1MS       JSL ILOOP_1
.391315	6b		rtl		                RTL
.391316	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391319	f0 07		beq $391322	                BEQ LOOP_MS_END
.39131b	22 11 13 39	jsl $391311	                JSL ILOOP_1MS
.39131f	ca		dex		                DEX
.391320	80 f4		bra $391316	                BRA ILOOP_MS
.391322	6b		rtl		LOOP_MS_END     RTL
.391323					SHOW_CREDITS
.391323	48		pha		                PHA
.391324	da		phx		                PHX
.391325	5a		phy		                PHY
.391326	08		php		                PHP
.391327	e2 20		sep #$20	                SEP #$20        ; set A short
.391329	c2 10		rep #$10	                REP #$10        ; set X long
.39132b	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39132f	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391331	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391335	a2 00 00	ldx #$0000	                LDX #0
.391338	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39133c	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391340	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391344	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391348	e8		inx		                INX
.391349	e0 00 20	cpx #$2000	                CPX #128 * 64
.39134c	d0 ea		bne $391338	                BNE credit_loop
.39134e	22 3f 06 39	jsl $39063f	                JSL IGETCHW                     ; Wait for a keypress
.391352	22 67 09 39	jsl $390967	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391356	22 dd 07 39	jsl $3907dd	                JSL ICSRHOME                    ; Move cursor to the home position
.39135a	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39135e	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391360	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391364	28		plp		                PLP
.391365	7a		ply		                PLY
.391366	fa		plx		                PLX
.391367	68		pla		                PLA
.391368	6b		rtl		                RTL
.391369	00		brk #		IRESTORE        BRK ; Warm boot routine
.39136a	00		brk #		ISCINIT         BRK ;
.39136b	00		brk #		IIOINIT         BRK ;
.39136c	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.39136d	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39136e	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39136f	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391370	00		brk #		ICLOSE          BRK ; Close a channel
.391371	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391372	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.391373	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391374	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391375	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391376	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391377	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391378	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391379	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39137a	00		brk #		IPRINTF         BRK ; Print a float value
.39137b	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39137c	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39137d	00		brk #		IPUSHKEY        BRK ;
.39137e	00		brk #		IPUSHKEYS       BRK ;
.39137f	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391380	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391381					KERNEL_DATA
>391381	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>391389	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>391399	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>3913a9	58 20 0d
>3913ac	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>3913b4	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>3913c4	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3913d4	20 20 0d
>3913d7	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3913df	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3913ef	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>3913ff	20 20 0d
>391402	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>39140a	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>39141a	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>39142a	20 20 0d
>39142d	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>391435	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>391445	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>391455	20 20 0d
>391458	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>391460	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391470	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391480	0d
>391481	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>391489	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>391499	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>3914a3	4a 61 6e 75 61 72 79 20		.text "January 05, 2020"
>3914ab	30 35 2c 20 32 30 32 30

;******  Return to file: src\kernel.asm

>3914b3	0d 00				                .text $0D,$00
.3914b5					old_pc_style_stat
>3914b5	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914bd	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>3914cd	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914dd	fd fd
>3914df	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914e7	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3914f7	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391507	fd fd
>391509	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391511	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>391521	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391531	fd fd
>391533	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39153b	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>39154b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39155b	fd fd
>39155d	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391565	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391575	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391585	fd fd
>391587	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39158b	00 00 80 ff			                .text $00, $00, $80, $FF
>39158f	00 80 00 ff			                .text $00, $80, $00, $FF
>391593	80 00 00 ff			                .text $80, $00, $00, $FF
>391597	00 80 80 ff			                .text $00, $80, $80, $FF
>39159b	80 80 00 ff			                .text $80, $80, $00, $FF
>39159f	80 00 80 ff			                .text $80, $00, $80, $FF
>3915a3	80 80 80 ff			                .text $80, $80, $80, $FF
>3915a7	00 45 ff ff			                .text $00, $45, $FF, $FF
>3915ab	13 45 8b ff			                .text $13, $45, $8B, $FF
>3915af	00 00 20 ff			                .text $00, $00, $20, $FF
>3915b3	00 20 00 ff			                .text $00, $20, $00, $FF
>3915b7	20 00 00 ff			                .text $20, $00, $00, $FF
>3915bb	20 20 20 ff			                .text $20, $20, $20, $FF
>3915bf	40 40 40 ff			                .text $40, $40, $40, $FF
>3915c3	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3915c7	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>3915cb	00 00 80 ff			                .text $00, $00, $80, $FF
>3915cf	00 80 00 ff			                .text $00, $80, $00, $FF
>3915d3	80 00 00 ff			                .text $80, $00, $00, $FF
>3915d7	00 20 20 ff			                .text $00, $20, $20, $FF
>3915db	20 20 00 ff			                .text $20, $20, $00, $FF
>3915df	20 00 20 ff			                .text $20, $00, $20, $FF
>3915e3	20 20 20 ff			                .text $20, $20, $20, $FF
>3915e7	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3915eb	13 45 8b ff			                .text $13, $45, $8B, $FF
>3915ef	00 00 20 ff			                .text $00, $00, $20, $FF
>3915f3	00 20 00 ff			                .text $00, $20, $00, $FF
>3915f7	40 00 00 ff			                .text $40, $00, $00, $FF
>3915fb	10 10 10 ff			                .text $10, $10, $10, $FF
>3915ff	40 40 40 ff			                .text $40, $40, $40, $FF
>391603	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391607	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>39160f	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39161f	00
>391620	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>391628	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391638	00
>391639	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391641	20 45 78 65 63 75 74 65 64 2e 0d 00
>39164d	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391655	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391665	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>39166d	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>39167d	64 2e 2e 2e 0d 00
>391683	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39168b	20 50 72 65 73 65 6e 74 0d 00
>391695	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>39169d	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3916ad	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3916bd	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3916c5	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3916d1	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3916d9	45 44 2e 00
>3916dd	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3916e5	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3916f2	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3916fa	50 72 65 73 65 6e 74 3a 00
>391703	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>39170b	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>39171b	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>391728	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>391730	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>391740	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>391750	74 65 64 2e 00
>391755	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>39175d	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>39176d	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>39177d	65 6e 74 65 64 2e 00
>391784	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>39178c	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>39179c	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>3917ac	6c 65 6d 65 6e 74 65 64 2e 00
>3917b6	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3917be	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3917c6	52 4f 52 00
>3917ca	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3917d2	38 39 41 42 43 44 45 46 00
>3917db					.align 256
>391800	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391828	27 60 00 5c 7a 78 63 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391848	11 00 00 9d 00 1d 00 00
>391850	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391888	26 2a 28 29 5f 2b 08 09
>391890	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391898	4f 50 7b 7d 0d 00 41 53
>3918a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3918a8	22 7e 00 5c 5a 58 43 56
>3918b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391928	27 60 00 5c 7a 78 03 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391988	37 38 39 30 2d 3d 08 09
>391990	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391998	6f 70 5b 5d 0d 00 61 73
>3919a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3919a8	27 60 00 5c 7a 78 63 76
>3919b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 20 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3919c8	00 00 00 00 00 00 00 00
>3919d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a08	37 38 39 30 2d 3d 08 09
>391a10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a18	6f 70 5b 5d 0d 00 61 73
>391a20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391a28	27 60 00 5c 7a 78 63 76
>391a30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391a38	00 20 00 00 00 00 00 00
>391a40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391a48	00 00 00 00 00 00 00 00
>391a50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391a58	00 00 00 00 00 00 00 00
>391a60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391a68	00 00 00 00 00 00 00 00
>391a70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391a78	00 00 00 00 00 00 00 00
>391a80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391a88	00 00 00 00 00 00 00 00
>391a90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391a98	00 00 00 00 00 00 00 00
>391aa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>391aa8	00 00 00 00 00 00 00 00
>391ab0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>391ab8	00 00 00 00 00 00 00 00
>391ac0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391ac8	11 00 00 9d 00 1d 00 00
>391ad0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ad8	00 00 00 00 00 00 00 00
>391ae0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ae8	00 00 00 00 00 00 00 00
>391af0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391af8	00 00 00 00 00 00 00 00
>391b00					.align 256
>391b00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391b08	34 37 3a 3d 3f 41 44 46
>391b10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391b18	57 58 5a 5b 5d 5e 60 61
>391b20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391b28	6d 6f 70 71 72 73 75 76
>391b30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391b38	80 81 82 83 84 85 86 87
>391b40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391b48	8f 90 91 92 93 93 94 95
>391b50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391b58	9d 9e 9e 9f a0 a1 a2 a2
>391b60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391b68	a9 aa ab ab ac ad ae ae
>391b70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391b78	b5 b5 b6 b7 b7 b8 b9 b9
>391b80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391b88	bf c0 c0 c1 c2 c2 c3 c4
>391b90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391b98	c9 ca ca cb cb cc cd cd
>391ba0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391ba8	d2 d3 d4 d4 d5 d5 d6 d6
>391bb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391bb8	db dc dc dd de de df df
>391bc0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391bc8	e4 e4 e5 e5 e6 e6 e7 e7
>391bd0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391bd8	ec ec ed ed ee ee ef ef
>391be0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391be8	f4 f4 f5 f5 f6 f6 f7 f7
>391bf0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391bf8	fb fc fc fd fd fe fe ff
>391c00					.align 256
>391c00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391c08	25 27 2a 2c 2e 30 32 34
>391c10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391c18	44 46 47 49 4a 4c 4d 4f
>391c20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391c28	5b 5c 5d 5e 60 61 62 63
>391c30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391c38	6d 6e 70 71 72 73 74 75
>391c40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391c48	7e 7f 80 81 82 83 84 84
>391c50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391c58	8d 8e 8e 8f 90 91 92 93
>391c60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391c68	9a 9b 9c 9d 9e 9f 9f a0
>391c70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391c78	a7 a8 a9 aa aa ab ac ad
>391c80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391c88	b3 b4 b5 b6 b6 b7 b8 b8
>391c90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391c98	bf bf c0 c1 c2 c2 c3 c4
>391ca0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ca8	ca ca cb cc cc cd ce ce
>391cb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391cb8	d4 d5 d6 d6 d7 d7 d8 d9
>391cc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391cc8	de df e0 e0 e1 e1 e2 e3
>391cd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391cd8	e8 e9 e9 ea ea eb ec ec
>391ce0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391ce8	f1 f2 f3 f3 f4 f4 f5 f5
>391cf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391cf8	fb fb fc fc fd fd fe ff
>391d00					.align 256
>391d00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391d08	83 dd ce 39 cd c5 3b 15
>391d10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391d18	87 12 31 65 89 27 88 42
>391d20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391d28	94 ce 56 ec fe da 58 c9
>391d30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391d38	d0 10 2c b2 4b ea 32 61
>391d40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391d48	a1 e6 ca 2d b3 ce b0 79
>391d50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391d58	5f e3 fb bd 15 2e be f5
>391d60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391d68	8d 8f 2c 80 0a 5e 99 36
>391d70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391d78	13 52 44 2f e3 ef 44 a2
>391d80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391d88	be 23 02 58 0a 52 5e b4
>391d90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391d98	d5 cf 3e df c4 9e da bb
>391da0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391da8	77 7d b1 3b 4a 68 35 6e
>391db0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391db8	b5 8f 44 63 55 6f e1 50
>391dc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391dc8	57 74 b9 bd 05 14 50 eb
>391dd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391dd8	44 bc ec db 22 58 fc be
>391de0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391de8	24 aa 82 11 5c 9f 43 4d
>391df0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391df8	3e 3d 66 7e 0a 1c 6b 74
>391e00					.align 16
>391e00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391e08	01 01 01 00 00 00 00 00
>391e10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391e18	ff ff ff 01 00 00 00 00
>391e20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391e28	01 55 ff ff 01 00 00 00
>391e30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391e38	ff ff ff ff 01 00 00 00
>391e40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391e48	ff ff 01 ff ff 01 00 00
>391e50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391e58	01 ff ff 01 ff 01 00 00
>391e60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391e68	ff 01 ff ff ff 01 00 00
>391e70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391e78	ff ff ff ff ff 01 01 00
>391e80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391e88	ff ff ff ff 01 ff ff 01
>391e90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391e98	ff ff ff ff ff ff ff 01
>391ea0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391ea8	55 55 01 ff ff 55 01 00
>391eb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391eb8	01 01 55 ff 55 01 00 00
>391ec0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391ec8	01 55 55 55 01 00 00 00
>391ed0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391ed8	01 55 55 01 00 00 00 00
>391ee0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391ee8	00 01 01 00 00 00 00 00
>391ef0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391ef8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c a1 57 3a 5c 7a 3f 3a		.binary "binaries/basic816.bin"
>3a0008	5c d3 1e 3a 5c 9a 01 3a 5c b2 00 3a 5c 30 01 3a
>3a0018	5c 63 03 3a 5c 3e 01 3a 5c 59 01 3a 5c 60 01 3a
>3a0028	da 08 c2 10 a2 00 00 e2 20 20 5d 00 90 15 f0 13
>3a0038	c9 0d f0 0f c9 0a f0 0b 9f 00 4f 00 c9 00 f0 03
>3a0048	e8 80 e6 a9 00 9f 00 4f 00 28 fa 60 c2 10 ae b0
>3a0058	08 ec ae 08 60 5a 08 08 c2 20 48 a9 00 08 5b 68
>3a0068	28 e2 20 c2 10 a4 b0 c4 ae 10 0d b7 ab c2 20 29
>3a0078	ff 00 e6 b0 28 7a 38 60 28 7a 18 60 8b e2 20 85
>3a0088	b3 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 a4 d0
>3a0098	06 e2 20 a5 a6 f0 11 c2 10 a4 a9 c4 a7 f0 09 e2
>3a00a8	20 a5 b3 97 a4 c8 84 a9 ab 60 08 c2 10 e2 20 a9
>3a00b8	01 20 1c 00 a2 00 00 a9 00 9f 00 4c 00 e8 e0 00
>3a00c8	01 d0 f6 a2 00 00 20 14 00 c9 0d d0 03 4c 29 01
>3a00d8	c9 9d d0 08 e0 00 00 f0 ed ca 80 39 c9 1d d0 0e
>3a00e8	bf 00 4c 00 f0 e0 e0 4f 00 f0 db e8 80 27 c9 08
>3a00f8	d0 1a e0 00 00 f0 cf da bf 01 4c 00 9f 00 4c 00
>3a0108	f0 06 e8 e0 ff 00 d0 f0 fa ca 80 0e c9 20 90 b6
>3a0118	9f 00 4c 00 e8 20 18 00 80 ac a9 08 20 18 00 80
>3a0128	a5 a9 00 20 1c 00 28 60 22 4c 10 00 60 20 14 00
>3a0138	48 20 18 00 68 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0148	af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0158	60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>3a0168	10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0178	c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a0188	68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>3a0198	68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a01a8	c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a01b8	29 ff 00 85 0a a9 80 00 8f 08 01 00 af 1c 00 00
>3a01c8	3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a
>3a01d8	69 00 00 85 0a e2 20 a0 00 00 a2 00 00 b7 08 9f
>3a01e8	00 4f 00 e8 c8 c0 80 00 d0 f3 ca bf 00 4f 00 c9
>3a01f8	20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28 2b 7a fa
>3a0208	60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 10 e2 20
>3a0218	a2 00 00 bf 00 00 36 9f 00 71 3a e8 e0 18 00 d0
>3a0228	f2 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0238	a2 14 00 bf 00 00 36 85 08 e8 e8 bf 00 00 36 85
>3a0248	0a a5 08 d0 07 a5 0a d0 03 28 18 60 e2 20 a2 00
>3a0258	00 a0 00 00 b7 08 9f 00 71 3a e8 c8 e0 18 00 d0
>3a0268	f3 28 38 60 08 8b 08 e2 20 48 a9 3a 48 ab 68 28
>3a0278	20 09 02 e2 20 a0 00 00 a2 00 00 bd 00 71 f0 2c
>3a0288	d9 00 70 d0 2e e8 c8 e0 08 00 d0 ef c8 a2 08 00
>3a0298	bd 00 71 f0 10 d9 00 70 d0 19 e8 c8 e0 03 00 d0
>3a02a8	ef ab 28 38 60 b9 00 70 f0 f7 80 07 b9 00 70 c9
>3a02b8	2e f0 d9 20 2b 02 b0 bb ab 28 18 60 08 08 c2 20
>3a02c8	48 a9 00 08 5b 68 28 c2 30 20 6c 02 90 2a a2 10
>3a02d8	00 bf 00 71 3a 85 08 bf 02 71 3a 85 0a e2 20 a7
>3a02e8	08 87 57 f0 10 c2 20 e6 08 d0 02 e6 0a e6 57 d0
>3a02f8	ee e6 59 80 ea 28 38 60 28 18 60 e2 20 a9 48 8f
>3a0308	0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>3a0318	09 00 af a2 00 00 a9 00 9f 28 71 3a e8 e0 12 00
>3a0328	d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89 0f 00
>3a0338	60 08 e2 20 48 22 18 10 00 af 89 0f 00 29 01 d0
>3a0348	f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2
>3a0358	20 68 28 60 08 22 78 10 00 28 60 08 e2 20 c2 10
>3a0368	da 5a 8f b3 08 00 af b2 08 00 29 20 f0 07 af b3
>3a0378	08 00 20 84 00 af b2 08 00 29 80 f0 07 af b3 08
>3a0388	00 20 39 03 7a fa 28 60 08 e2 20 bd 00 00 f0 06
>3a0398	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a03a8	4a 4a 4a 4a 4a 20 ba 03 68 29 ff 00 20 ba 03 68
>3a03b8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 d1 03
>3a03c8	68 20 d1 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a03d8	aa bf 00 60 3a 20 18 00 fa 28 60 08 e2 20 c9 5b
>3a03e8	b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18
>3a03f8	60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28
>3a0408	18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13
>3a0418	c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03
>3a0428	28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0
>3a0438	12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0
>3a0448	09 28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08
>3a0458	e2 20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2
>3a0468	20 c2 10 bd 00 00 f0 09 20 57 04 9d 00 00 e8 80
>3a0478	f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a0488	20 48 06 21 26 23 a5 21 85 0c a5 23 85 0e 06 0c
>3a0498	26 0e 06 0c 26 0e 18 a5 21 65 0c 85 21 a5 23 65
>3a04a8	0e 85 23 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a04b8	5b 68 28 c2 20 a5 21 8f 12 01 00 a9 0a 00 8f 10
>3a04c8	01 00 af 14 01 00 85 21 64 23 af 16 01 00 85 27
>3a04d8	64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2 20
>3a04e8	a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02 60
>3a04f8	08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9
>3a0508	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a0518	08 e2 20 a5 25 c9 02 d0 02 28 60 08 c2 20 48 a9
>3a0528	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a0538	08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23 d0 17 28
>3a0548	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0558	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a0568	e2 20 a9 09 8f d0 08 00 dc d1 08 08 e2 20 a5 25
>3a0578	c9 00 d0 0e a5 24 d0 1f a5 23 d0 1b a5 22 d0 17
>3a0588	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a0598	8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68
>3a05a8	28 e2 20 a9 09 8f d0 08 00 dc d1 08 08 0b 08 c2
>3a05b8	20 48 a9 00 08 5b 68 28 c2 30 64 21 64 23 e2 20
>3a05c8	64 25 a7 00 c9 26 f0 3a e2 20 a7 00 20 fc 03 90
>3a05d8	6c 20 7b 04 38 e9 30 c2 20 29 ff 00 18 65 21 85
>3a05e8	21 a5 23 69 00 00 85 23 20 74 19 80 db 08 c2 20
>3a05f8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a0608	d1 08 20 74 19 a7 00 c9 48 f0 04 c9 68 d0 de 20
>3a0618	74 19 e2 20 a7 00 20 0d 04 90 22 20 2e 04 c2 20
>3a0628	06 21 26 23 06 21 26 23 06 21 26 23 06 21 26 23
>3a0638	29 ff 00 18 65 21 85 21 20 74 19 80 d5 2b 28 60
>3a0648	08 c2 30 38 a5 04 e5 18 a8 e2 20 b7 18 f0 10 c9
>3a0658	20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0 ec a9
>3a0668	00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0678	a5 18 85 00 e2 20 a5 1a 85 02 20 95 19 a7 00 20
>3a0688	fc 03 90 0c 20 b4 05 c2 20 a5 21 85 d4 20 95 19
>3a0698	c2 20 a5 00 85 18 e2 20 a5 02 85 1a 20 b8 06 e2
>3a06a8	20 20 29 07 c9 00 f0 05 20 a8 08 80 f4 2b 28 60
>3a06b8	08 c2 20 a5 18 85 00 a5 1a 85 02 a2 00 00 e2 20
>3a06c8	a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a f0 04
>3a06d8	c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0
>3a06e8	26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8 b7 00
>3a06f8	f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9
>3a0708	4d f0 0a c9 6d f0 06 e8 20 74 19 80 b3 a7 00 c9
>3a0718	3a d0 03 20 74 19 a9 03 85 1c a9 8e 20 a8 08 28
>3a0728	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0738	7f 85 1c c2 10 20 5d 08 a5 1c d0 03 4c cc 07 c2
>3a0748	20 a5 18 85 00 e2 20 a5 1a 85 02 c2 20 64 04 64
>3a0758	06 e2 30 a0 00 b7 00 f0 da c9 8e f0 d6 c8 c4 1c
>3a0768	90 f3 c2 10 a7 00 c9 22 d0 05 20 e4 07 80 28 a5
>3a0778	1c c9 01 f0 19 c2 20 a5 00 c5 18 d0 08 e2 20 a5
>3a0788	02 c5 1a f0 09 e2 20 a7 04 20 d6 39 b0 09 e2 20
>3a0798	20 f4 07 c9 00 d0 11 c2 20 a5 00 85 04 e2 20 a5
>3a07a8	02 85 06 20 74 19 80 a9 c9 81 d0 18 20 48 06 c9
>3a07b8	00 f0 14 89 80 10 0b 20 49 09 c9 30 f0 04 a9 af
>3a07c8	80 02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a07d8	28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 e2 20 20
>3a07e8	74 19 a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30
>3a07f8	da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 73 09 85
>3a0808	08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7
>3a0818	08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c
>3a0828	e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 57 04 d7
>3a0838	0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60
>3a0848	c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00
>3a0858	85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a0868	68 28 c2 30 a9 73 09 85 08 a9 3a 00 85 0a 64 0c
>3a0878	e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90
>3a0888	02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69
>3a0898	00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60
>3a08a8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00
>3a08b8	c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00 85
>3a08c8	0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20
>3a08d8	18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80
>3a08e8	e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 73
>3a08f8	09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0908	28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20
>3a0918	ec 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b
>3a0928	0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a0938	3a 48 ab 68 28 c2 30 20 ec 08 bd 04 00 2b ab 28
>3a0948	60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0958	20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 ec 08 bd
>3a0968	00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 60 5c
>3a0978	1f 00 00 03 01 12 60 91 1f 00 00 02 01 14 60 9f
>3a0988	1f 00 00 02 01 16 60 b8 1f 00 00 02 03 18 60 cb
>3a0998	1f 00 00 00 01 1c 60 00 00 00 00 04 01 1e 60 0d
>3a09a8	20 00 00 04 01 20 60 43 20 00 00 04 01 22 60 28
>3a09b8	20 00 00 05 03 24 60 fc 1f 00 00 06 03 28 60 de
>3a09c8	1f 00 00 07 02 2c 60 ed 1f 00 00 ff 01 2f 60 00
>3a09d8	00 00 00 40 01 31 60 00 00 00 00 20 03 33 60 a2
>3a09e8	2c 00 00 20 05 37 60 39 30 00 00 20 03 3d 60 98
>3a09f8	2f 00 00 20 04 41 60 4c 2f 00 00 20 03 46 60 43
>3a0a08	2f 00 00 20 02 4a 60 ef 2e 00 00 50 04 4d 60 00
>3a0a18	00 00 00 50 04 52 60 00 00 00 00 20 05 57 60 50
>3a0a28	2e 00 00 20 06 5d 60 b5 2e 00 00 20 03 64 60 b9
>3a0a38	2c 00 00 50 02 68 60 00 00 00 00 50 04 6b 60 00
>3a0a48	00 00 00 20 04 70 60 99 2d 00 00 20 02 75 60 b3
>3a0a58	2c 00 00 20 04 78 60 b6 2c 00 00 50 05 7d 60 00
>3a0a68	00 00 00 50 05 83 60 00 00 00 00 20 04 89 60 b0
>3a0a78	2c 00 00 20 03 8e 60 8e 2f 00 00 20 04 92 60 8d
>3a0a88	2c 00 00 20 04 97 60 31 2c 00 00 20 05 9c 60 db
>3a0a98	2b 00 00 20 05 a2 60 7c 2b 00 00 20 03 a8 60 78
>3a0aa8	2b 00 00 20 04 ac 60 6d 2a 00 00 20 04 b1 60 6b
>3a0ab8	2b 00 00 20 07 b6 60 6f 2b 00 00 20 03 be 60 d4
>3a0ac8	29 00 00 20 04 c2 60 4d 29 00 00 04 02 c7 60 96
>3a0ad8	20 00 00 04 02 ca 60 79 20 00 00 04 02 cd 60 5e
>3a0ae8	20 00 00 30 01 d0 60 b7 31 00 00 30 03 d2 60 63
>3a0af8	35 00 00 30 04 d6 60 a9 35 00 00 30 05 db 60 26
>3a0b08	36 00 00 30 05 e1 60 e2 35 00 00 30 04 e7 60 5b
>3a0b18	36 00 00 30 03 ec 60 a6 36 00 00 30 03 f0 60 e1
>3a0b28	36 00 00 30 03 f4 60 56 37 00 00 30 03 f8 60 cb
>3a0b38	37 00 00 30 03 fc 60 fb 37 00 00 30 04 00 61 dc
>3a0b48	34 00 00 30 03 05 61 7b 34 00 00 30 04 09 61 34
>3a0b58	34 00 00 30 03 0e 61 e8 33 00 00 30 05 12 61 3d
>3a0b68	33 00 00 30 06 18 61 7a 32 00 00 30 04 1f 61 d9
>3a0b78	31 00 00 10 03 24 61 7f 38 00 00 10 03 28 61 4a
>3a0b88	38 00 00 10 04 2c 61 0c 39 00 00 10 04 31 61 96
>3a0b98	38 00 00 10 03 36 61 5c 39 00 00 10 07 3a 61 47
>3a0ba8	38 00 00 20 03 42 61 e3 28 00 00 20 05 46 61 29
>3a0bb8	28 00 00 20 09 4c 61 f2 21 00 00 20 09 56 61 91
>3a0bc8	21 00 00 20 0a 60 61 bb 21 00 00 20 07 6b 61 23
>3a0bd8	21 00 00 30 08 73 61 eb 30 00 00 20 07 7c 61 b5
>3a0be8	20 00 00 30 08 84 61 51 31 00 00 20 08 8d 61 09
>3a0bf8	23 00 00 20 08 96 61 6f 22 00 00 20 06 9f 61 4a
>3a0c08	23 00 00 20 09 a6 61 08 24 00 00 20 04 b0 61 9b
>3a0c18	25 00 00 20 04 b5 61 e1 25 00 00 20 04 ba 61 47
>3a0c28	26 00 00 20 06 bf 61 e3 26 00 00 20 08 c6 61 66
>3a0c38	27 00 00 20 0a cf 61 9a 27 00 00 00 00 00 00 00
>3a0c48	00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a0c58	30 a9 ff ff 85 b7 e2 20 a9 35 85 b9 c2 20 64 b4
>3a0c68	64 ba e2 20 64 b6 64 bc 2b 28 60 5a 08 e2 20 85
>3a0c78	e7 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12 48
>3a0c88	a5 10 48 20 23 0d b0 03 20 a7 0c 20 af 0e c2 20
>3a0c98	68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>3a0ca8	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d ca
>3a0cb8	86 0c e8 c2 30 38 a5 b7 e5 0c 85 bd e2 20 a5 b9
>3a0cc8	e9 00 85 bf 20 af 0e e2 20 a5 e7 a0 00 00 97 c0
>3a0cd8	a9 00 a0 01 00 97 c0 a0 02 00 97 c0 c2 20 a9 00
>3a0ce8	00 97 c0 c2 20 18 a5 b7 69 01 00 a0 05 00 97 c0
>3a0cf8	e2 20 c8 c8 a5 b9 69 00 97 c0 c2 20 a5 bd 85 b4
>3a0d08	e2 20 a5 bf 85 b6 c2 20 38 a5 c0 e9 01 00 85 b7
>3a0d18	e2 20 a5 c2 e9 00 85 b9 2b 28 60 08 0b 08 c2 20
>3a0d28	48 a9 00 08 5b 68 28 c2 30 c2 20 a5 ba 85 c6 e2
>3a0d38	20 a5 bc 85 c8 a5 c6 d0 17 e2 20 a5 c8 d0 11 c2
>3a0d48	20 a9 00 00 85 cc e2 20 a9 00 85 ce 2b 28 18 60
>3a0d58	c2 20 a0 05 00 b7 c6 85 c9 e2 20 c8 c8 b7 c6 85
>3a0d68	cb c2 20 18 a5 c6 65 8d 85 0c e2 20 a5 c8 69 00
>3a0d78	85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>3a0d88	69 00 85 0e c2 20 a5 0c c5 c9 d0 28 e2 20 a5 0e
>3a0d98	c5 cb d0 20 c2 20 a5 cc d0 5d e2 20 a5 ce d0 57
>3a0da8	c2 20 a0 02 00 b7 c6 85 ba e2 20 c8 c8 b7 c6 85
>3a0db8	bc 4c 60 0e c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>3a0dc8	0e 69 00 85 12 e2 20 a5 c3 c5 10 b0 3e 90 08 c2
>3a0dd8	20 a5 c3 c5 10 b0 34 c2 20 a5 c6 85 cc e2 20 a5
>3a0de8	c8 85 ce c2 20 a0 02 00 b7 cc 85 c6 e2 20 c8 c8
>3a0df8	b7 cc 85 c8 4c 3d 0d c2 20 a0 02 00 b7 c6 97 cc
>3a0e08	e2 20 c8 c8 b7 c6 97 cc 4c 60 0e c2 20 a0 05 00
>3a0e18	b7 c6 97 0c e2 20 c8 c8 b7 c6 97 0c c2 20 a0 02
>3a0e28	00 b7 c6 97 0c e2 20 c8 c8 b7 c6 97 0c c2 20 a5
>3a0e38	cc d0 14 e2 20 a5 cc d0 0e c2 20 a5 0c 85 ba e2
>3a0e48	20 a5 0e 85 bc 80 11 c2 20 a0 02 00 a5 0c 97 cc
>3a0e58	e2 20 c8 c8 a5 0e 97 cc c2 20 a5 c6 85 c0 e2 20
>3a0e68	a5 c8 85 c2 c2 20 a5 c0 85 b4 e2 20 a5 c2 85 b6
>3a0e78	c2 20 a0 05 00 a5 0c 97 c0 e2 20 c8 c8 a5 0e 97
>3a0e88	c0 c2 20 a0 02 00 a9 00 00 97 c0 e2 20 c8 c8 97
>3a0e98	c0 e2 20 a5 e7 e2 20 a0 00 00 97 c0 a0 01 00 a9
>3a0ea8	00 97 c0 2b 28 38 60 08 c2 20 38 a5 bd e9 08 00
>3a0eb8	85 c0 e2 20 a5 bf e9 00 85 c2 28 60 08 e2 20 a5
>3a0ec8	c2 f0 04 c9 36 b0 12 c2 20 a5 c0 f0 0c e2 20 a0
>3a0ed8	01 00 b7 c0 1a 97 c0 28 60 00 ea 08 e2 20 a5 c2
>3a0ee8	f0 04 c9 17 b0 17 c2 20 a5 c0 f0 11 e2 20 a0 01
>3a0ef8	00 b7 c0 3a 97 c0 d0 03 20 07 0f 28 60 00 ea 08
>3a0f08	c2 20 a5 ba d0 21 e2 20 a5 bc d0 1b a5 c2 85 bc
>3a0f18	c2 20 a5 c0 85 ba a9 00 00 a0 02 00 97 c0 c8 c8
>3a0f28	e2 20 97 c0 4c ee 0f e2 20 a5 bc c5 c2 90 28 c2
>3a0f38	20 a5 ba c5 c0 90 20 c2 20 a5 ba a0 02 00 97 c0
>3a0f48	e2 20 c8 c8 a5 bc 97 c0 c2 20 a5 c0 85 ba e2 20
>3a0f58	a5 c2 85 bc 4c ee 0f c2 20 a5 ba 85 08 e2 20 a5
>3a0f68	bc 85 0a e2 20 a0 04 00 b7 08 c5 c5 90 32 d0 0b
>3a0f78	c2 20 a0 02 00 b7 08 c5 c3 90 25 c2 20 a0 02 00
>3a0f88	b7 08 97 c0 e2 20 c8 c8 b7 08 97 c0 c2 20 a5 c0
>3a0f98	a0 02 00 97 08 e2 20 a5 c2 c8 c8 97 08 4c ee 0f
>3a0fa8	c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>3a0fb8	19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>3a0fc8	85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c0 a0 02
>3a0fd8	00 97 08 e2 20 c8 c8 a5 c2 97 08 a9 00 97 c0 c2
>3a0fe8	20 a0 02 00 97 c0 20 f3 0f 28 60 08 c2 20 a5 ba
>3a0ff8	85 c0 e2 20 a5 bc 85 c2 c2 20 a5 c0 d0 09 e2 20
>3a1008	a5 c2 d0 03 4c 96 10 c2 20 a0 02 00 b7 c0 85 0c
>3a1018	e2 20 c8 c8 b7 c0 85 0e c2 20 a0 05 00 b7 c0 85
>3a1028	10 e2 20 c8 c8 b7 c0 85 12 c2 20 a5 0c c5 10 d0
>3a1038	08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c0
>3a1048	85 0c e2 20 c8 c8 b7 c0 85 0e c2 20 a5 0c 85 c0
>3a1058	e2 20 a5 0e 85 c2 80 a0 c2 20 a0 02 00 b7 c0 85
>3a1068	0c e2 20 c8 c8 b7 c0 85 0e c2 20 a0 02 00 b7 0c
>3a1078	97 c0 e2 20 c8 c8 b7 0c 97 c0 c2 20 a0 05 00 b7
>3a1088	0c 97 c0 e2 20 c8 c8 b7 0c 97 c0 4c 0f 10 28 60
>3a1098	08 c2 10 e2 20 64 14 a5 df 1a 1a 85 15 e2 20 a5
>3a10a8	e0 85 16 c5 b9 90 1f f0 08 c2 20 a5 14 c5 b7 90
>3a10b8	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f
>3a10c8	d0 08 00 dc d1 08 28 60 c9 00 d0 05 c0 01 00 f0
>3a10d8	05 09 30 97 14 c8 60 08 c2 30 64 0c a5 23 10 1a
>3a10e8	18 a5 21 49 ff ff 69 01 00 85 21 a5 23 49 ff ff
>3a10f8	69 00 00 85 23 a9 ff ff 85 0c 64 10 64 12 a2 1f
>3a1108	00 f8 06 21 26 23 a5 10 65 10 85 10 a5 12 65 12
>3a1118	85 12 ca 10 ed d8 e2 20 20 98 10 a0 00 00 a5 0c
>3a1128	f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03 00 b5 10
>3a1138	29 f0 4a 4a 4a 4a 20 d0 10 b5 10 29 0f 20 d0 10
>3a1148	ca 10 eb c0 01 00 d0 04 a9 30 87 14 a9 00 97 14
>3a1158	28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0
>3a1168	04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1178	08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23
>3a1188	48 ab c2 20 68 28 a6 21 20 5c 11 84 0c 08 c2 20
>3a1198	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 20 5c 11
>3a11a8	c2 20 98 38 65 0c aa e2 20 a9 02 20 73 0c c2 20
>3a11b8	a5 b4 85 08 e2 20 a5 b6 85 0a a0 00 00 08 c2 20
>3a11c8	48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 bd 00 00
>3a11d8	f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20
>3a11e8	a5 29 48 ab c2 20 68 28 a6 27 bd 00 00 97 08 f0
>3a11f8	04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85
>3a1208	23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1218	a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2 20 a5 23
>3a1228	48 ab c2 20 68 28 a6 21 20 5c 11 98 aa e8 e2 20
>3a1238	a9 02 20 73 0c c2 20 a5 bd 85 08 e2 20 a5 bf 85
>3a1248	0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7 a5 08 85
>3a1258	21 a5 09 85 22 a5 0a 85 23 a9 00 85 24 ab 2b 28
>3a1268	60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9
>3a1278	84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b
>3a1288	c4 8d b0 12 a5 27 d0 0e 4c ea 12 20 98 10 e2 20
>3a1298	a9 00 87 14 80 39 20 98 10 c2 30 18 a5 21 65 27
>3a12a8	85 21 a5 23 69 00 00 85 23 a0 00 00 e2 20 a7 21
>3a12b8	97 14 f0 1b c2 20 18 a5 21 69 01 00 85 21 a5 23
>3a12c8	69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2
>3a12d8	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a12e8	11 12 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a12f8	68 28 c2 30 a9 00 00 85 00 85 18 a9 01 00 85 02
>3a1308	85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0 0f c5 53
>3a1318	90 10 c5 57 f0 02 b0 05 20 44 13 80 e5 28 2b 7a
>3a1328	68 60 20 3d 1a 80 db 08 c2 20 48 a9 00 08 5b 68
>3a1338	28 e2 20 a9 01 8f d0 08 00 dc d1 08 08 c2 30 85
>3a1348	21 64 23 20 df 10 a5 14 1a 85 21 a5 16 85 23 20
>3a1358	9b 30 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85
>3a1368	02 e2 20 a9 20 20 18 00 c2 20 20 83 13 90 fb e2
>3a1378	20 a9 0d 20 18 00 20 3d 1a 28 60 08 0b 8b 08 c2
>3a1388	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1398	68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80
>3a13a8	29 c2 20 29 7f 00 0a 0a 0a 18 69 73 09 85 08 a9
>3a13b8	3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68
>3a13c8	28 a0 02 00 b7 08 aa 20 90 03 c2 20 20 74 19 ab
>3a13d8	2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85
>3a13e8	1d a9 ff 7f 85 1f a9 ff ff 85 21 85 23 85 27 85
>3a13f8	29 e2 20 85 25 85 2b 28 60 08 0b 8b 08 c2 20 48
>3a1408	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1418	c2 30 5a a4 1d bd 00 00 99 00 00 bd 02 00 99 02
>3a1428	00 e2 20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00
>3a1438	85 1d 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1448	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a1458	5a 18 a5 1d 69 05 00 85 1d a8 b9 00 00 9d 00 00
>3a1468	b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00
>3a1478	00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1488	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a1498	10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b 28 60 08
>3a14a8	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a14b8	a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f
>3a14c8	b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20
>3a14d8	a9 01 20 7e 14 28 60 5a 08 8b 08 e2 20 48 a9 00
>3a14e8	48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2
>3a14f8	20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68
>3a1508	28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 0b 8b c2
>3a1518	20 48 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1528	a9 00 48 ab 68 28 e2 20 c2 10 a4 1f c0 ff 7f f0
>3a1538	11 20 fc 08 85 0c b9 01 00 20 fc 08 c5 0c f0 02
>3a1548	90 08 c2 20 68 ab 2b 28 18 60 c2 20 68 ab 2b 28
>3a1558	38 60 4c b4 05 08 e2 20 a9 00 8f 00 4d 00 a2 01
>3a1568	00 20 df 16 20 38 05 c2 20 a5 21 9f 00 4d 00 e2
>3a1578	20 af 00 4d 00 1a 30 34 8f 00 4d 00 e8 e8 20 95
>3a1588	19 e2 20 a7 00 c9 8d f0 09 c9 2c d0 0a 20 74 19
>3a1598	80 cf 20 74 19 28 60 08 c2 20 48 a9 00 08 5b 68
>3a15a8	28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48
>3a15b8	a9 00 08 5b 68 28 e2 20 a9 0a 8f d0 08 00 dc d1
>3a15c8	08 08 20 36 3c 90 23 e2 20 a5 e7 29 80 d0 06 20
>3a15d8	aa 3a 4c f0 15 e2 20 a9 8c 20 6d 1a 20 d5 14 20
>3a15e8	5d 15 20 f5 3e 20 df 14 28 60 08 c2 20 48 a9 00
>3a15f8	08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08
>3a1608	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20
>3a1618	74 19 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5
>3a1628	84 0c e2 20 a9 02 a6 0c e8 20 73 0c a0 00 00 c4
>3a1638	0c f0 1f a7 00 97 bd c8 20 74 19 80 f2 08 c2 20
>3a1648	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a1658	d1 08 a9 00 97 bd c2 20 a5 bd 85 21 e2 20 a5 bf
>3a1668	85 23 a9 02 85 25 20 74 19 2b 28 60 08 e2 20 a7
>3a1678	00 c2 20 29 ff 00 20 26 09 85 2d 20 d5 14 08 e2
>3a1688	20 48 a9 00 48 ab 68 28 20 98 16 20 df 14 28 60
>3a1698	20 74 19 6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48
>3a16a8	a9 00 08 5b 68 28 c2 30 a2 27 08 20 3f 14 a2 21
>3a16b8	08 20 3f 14 20 a7 14 20 26 09 85 2d 08 e2 20 48
>3a16c8	a9 00 48 ab 68 28 20 dc 16 a2 21 08 20 01 14 68
>3a16d8	ab 2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b
>3a16e8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2
>3a16f8	20 a7 00 d0 03 4c a2 17 30 33 c9 20 d0 03 4c 9c
>3a1708	17 c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0
>3a1718	03 4c b5 17 c9 5b b0 07 c9 41 90 03 4c c1 17 c9
>3a1728	7b b0 07 c9 61 90 03 4c c1 17 4c a2 17 c9 8c f0
>3a1738	40 c9 8d f0 41 20 49 09 c9 30 d0 0c 20 74 16 a2
>3a1748	21 08 20 01 14 4c f7 16 c9 00 d0 4e a7 00 a6 1f
>3a1758	e0 ff 7f f0 05 20 14 15 b0 12 20 7e 14 80 35 c2
>3a1768	20 20 5a 15 a2 21 08 20 01 14 80 83 20 9e 16 80
>3a1778	dd 20 7e 14 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4
>3a1788	1f b9 01 00 c9 01 f0 3d c9 8c f0 05 20 9e 16 80
>3a1798	ee 20 a7 14 20 74 19 4c f7 16 a6 1f e0 ff 7f b0
>3a17a8	24 bd 01 00 c9 01 f0 1d 20 9e 16 80 ed 20 07 16
>3a17b8	a2 21 08 20 01 14 4c f7 16 20 c9 15 a2 21 08 20
>3a17c8	01 14 4c f7 16 a2 21 08 20 3f 14 fa 28 60 08 0b
>3a17d8	8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9
>3a17e8	00 08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60
>3a17f8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 31
>3a1808	c6 31 c6 31 2b 28 60 08 c2 30 29 ff 00 20 f8 17
>3a1818	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1828	e6 31 e6 31 b2 31 2b 28 60 e2 20 c2 10 20 4c 03
>3a1838	af d0 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9
>3a1848	3a 48 ab 68 28 be 83 18 20 90 03 c2 20 a5 d4 f0
>3a1858	27 a2 99 18 20 90 03 08 e2 20 48 a9 00 48 ab 68
>3a1868	28 c2 20 af d4 08 00 8f 21 08 00 a9 00 00 8f 23
>3a1878	08 00 20 bb 30 20 4c 03 4c 1b 1f 9d 18 a0 18 a6
>3a1888	18 b3 18 c1 18 cf 18 e2 18 f8 18 08 19 17 19 24
>3a1898	19 20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79
>3a18a8	6e 74 61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f
>3a18b8	66 20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69
>3a18c8	73 6d 61 74 63 68 00 56 61 72 69 61 62 6c 65 20
>3a18d8	6e 6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e
>3a18e8	75 6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a18f8	53 74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1908	53 74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f
>3a1918	75 74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65
>3a1928	67 61 6c 20 61 72 67 75 6d 65 6e 74 00 08 0b 08
>3a1938	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85 cf 2b
>3a1948	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 c2
>3a1958	20 a9 31 18 8f d1 08 00 e2 20 a9 3a 8f d3 08 00
>3a1968	28 20 8e 2f 20 6f 2b 64 2f 28 2b 60 08 0b 08 c2
>3a1978	20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69 01 00
>3a1988	85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08 0b 08
>3a1998	c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f c9
>3a19a8	20 f0 06 c9 09 f0 02 80 05 20 74 19 80 ed 2b 28
>3a19b8	60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 74 19 80
>3a19c8	f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0 2c
>3a19d8	c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0 16
>3a19e8	20 74 19 80 e3 20 3d 1a c2 20 a5 d4 f0 1d e2 20
>3a19f8	80 d6 e6 34 80 ea c6 34 30 26 80 e4 a5 33 30 06
>3a1a08	a5 34 f0 02 80 da 20 74 19 28 60 08 c2 20 48 a9
>3a1a18	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a1a28	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0
>3a1a38	08 00 dc d1 08 08 c2 30 a0 00 00 b7 18 85 0c 18
>3a1a48	a5 18 65 0c 85 18 a5 1a 69 00 00 85 1a a0 02 00
>3a1a58	b7 18 85 d4 18 a5 18 69 04 00 85 00 a5 1a 69 00
>3a1a68	00 85 02 28 60 08 e2 20 48 20 95 19 68 e2 20 c7
>3a1a78	00 d0 08 20 74 19 20 95 19 28 60 08 c2 20 48 a9
>3a1a88	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a1a98	08 e2 20 20 95 19 e2 20 a7 00 f0 10 c9 3a f0 0c
>3a1aa8	c5 35 f0 05 20 74 19 80 ef 28 38 60 28 18 60 5a
>3a1ab8	08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20
>3a1ac8	d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20
>3a1ad8	48 a9 00 08 5b 68 28 20 e1 13 e2 20 a9 00 85 d9
>3a1ae8	ad 8a 0f 30 41 a7 00 c9 3a d0 03 20 74 19 20 95
>3a1af8	19 a7 00 d0 03 4c 6e 1b 20 e3 03 b0 3e a7 00 10
>3a1b08	10 20 49 09 85 0c c9 20 d0 03 4c 5c 1b a5 cf f0
>3a1b18	3d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1b28	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b38	e2 20 a9 01 8f d0 08 00 dc d1 08 20 98 2f 4c 6e
>3a1b48	1b 08 e2 20 48 a9 00 48 ab 68 28 6c 2d 08 a5 0c
>3a1b58	c9 10 d0 bd a7 00 20 26 09 c2 20 85 2d 20 e1 13
>3a1b68	20 74 19 20 49 1b ab 2b 28 60 08 58 20 35 19 20
>3a1b78	d6 17 e2 20 9c 8a 0f c2 20 a5 18 85 00 a5 1a 85
>3a1b88	02 4c b0 1b 08 c2 20 a0 02 00 b7 18 85 d4 e2 20
>3a1b98	a5 d9 c9 03 f0 12 c2 20 18 a5 18 69 04 00 85 00
>3a1ba8	e2 20 a5 1a 69 00 85 02 c2 20 20 d2 1a e2 20 a5
>3a1bb8	d9 c9 03 f0 f3 c9 00 d0 27 e2 20 20 95 19 a7 00
>3a1bc8	f0 1e c9 3a f0 15 08 c2 20 48 a9 00 08 5b 68 28
>3a1bd8	e2 20 a9 02 8f d0 08 00 dc d1 08 20 74 19 80 c8
>3a1be8	28 60 08 58 e2 20 a9 80 85 cf 9c 8a 0f 20 d6 17
>3a1bf8	c2 30 64 2f a0 02 00 b7 18 f0 29 20 8c 1b e2 20
>3a1c08	a5 d9 c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20
>3a1c18	a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69 00
>3a1c28	85 1a 80 d0 e2 20 a9 00 85 cf 28 60 08 c2 30 c2
>3a1c38	20 a9 00 00 85 08 a9 01 00 85 0a c2 20 a0 02 00
>3a1c48	b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18
>3a1c58	a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20
>3a1c68	a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a
>3a1c78	85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2
>3a1c88	20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2
>3a1c98	20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85
>3a1ca8	0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69
>3a1cb8	00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20
>3a1cc8	a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5
>3a1cd8	0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20
>3a1ce8	38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a
>3a1cf8	80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85
>3a1d08	0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d6 69 04
>3a1d18	00 85 00 e2 20 a5 d8 69 00 85 02 a0 00 00 c2 20
>3a1d28	38 a5 d6 f7 08 85 d6 e2 20 a5 d8 e9 00 85 d8 20
>3a1d38	80 1c 20 8e 2f 28 60 08 08 c2 20 48 a9 00 08 5b
>3a1d48	68 28 c2 30 a0 02 00 97 d6 18 a5 d6 69 04 00 85
>3a1d58	08 e2 20 a5 d8 69 00 85 0a e2 20 a0 00 00 b7 18
>3a1d68	97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c
>3a1d78	c2 20 a0 00 00 a5 0c 97 d6 c2 20 18 a5 d6 65 0c
>3a1d88	85 0c e2 20 a5 d8 69 00 85 d8 c2 20 a5 0c 85 d6
>3a1d98	c2 20 a0 00 00 a9 00 00 97 d6 c8 c0 05 00 d0 f8
>3a1da8	20 8e 2f 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1db8	28 c2 30 a9 00 00 85 08 a9 01 00 85 0a a0 02 00
>3a1dc8	b7 08 f0 1d c5 d4 f0 25 b0 1d a0 00 00 18 a5 08
>3a1dd8	77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80
>3a1de8	dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00
>3a1df8	28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20
>3a1e08	b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85
>3a1e18	00 a5 0a 85 02 18 a5 d6 69 04 00 85 0c a5 d8 69
>3a1e28	00 00 85 0e 18 a5 d6 65 10 85 d6 a5 d8 69 00 00
>3a1e38	85 d8 18 a5 d6 69 04 00 85 08 a5 d8 69 00 00 85
>3a1e48	0a 20 bf 1c c2 20 a5 10 a0 00 00 97 00 a5 d4 a0
>3a1e58	02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69 00
>3a1e68	00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80
>3a1e78	f7 20 8e 2f 28 60 08 c2 30 85 d4 20 ad 1d c9 00
>3a1e88	00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48
>3a1e98	20 fc 1c 68 85 0a 68 85 08 a5 18 85 00 a5 1a 85
>3a1ea8	02 20 95 19 e2 20 a7 00 f0 0a 20 fb 1d 80 05 a5
>3a1eb8	d4 20 3f 1d 28 60 8b 08 08 e2 20 48 a9 3a 48 ab
>3a1ec8	68 28 a2 da 61 20 90 03 28 ab 60 08 e2 30 a9 01
>3a1ed8	20 1c 00 20 35 01 f0 06 c9 0d f0 02 80 f5 28 60
>3a1ee8	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 d4
>3a1ef8	a9 00 4f 85 18 a9 00 00 85 1a 20 6a 06 c2 20 a5
>3a1f08	d4 d0 05 20 72 1b 80 07 20 7e 1e 28 2b 38 60 28
>3a1f18	2b 18 60 c2 30 a2 ff fe 9a 20 be 1e 20 08 00 20
>3a1f28	0c 00 a9 00 00 20 1c 00 20 e8 1e b0 ef 80 ea e2
>3a1f38	20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08
>3a1f48	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08
>3a1f58	00 dc d1 08 20 37 1f c2 20 c9 00 00 f0 1d c9 02
>3a1f68	00 d0 03 4c 6f 11 08 c2 20 48 a9 00 08 5b 68 28
>3a1f78	e2 20 a9 04 8f d0 08 00 dc d1 08 18 a5 21 65 27
>3a1f88	85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27 85 21
>3a1f98	a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5 27 8f
>3a1fa8	0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85 23 60
>3a1fb8	a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14 01 00
>3a1fc8	85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af
>3a1fd8	16 01 00 85 21 60 c2 20 a5 21 25 27 85 21 a5 23
>3a1fe8	25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5 23 05
>3a1ff8	29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5 23 49
>3a2008	ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5 21 c5
>3a2018	27 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23 60
>3a2028	c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05 64 21
>3a2038	64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5
>3a2048	23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23
>3a2058	60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5 27
>3a2068	c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23
>3a2078	60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27 90
>3a2088	08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20
>3a2098	a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5 21 c5
>3a20a8	27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2 20
>3a20b8	20 df 16 20 73 05 20 af 04 a5 21 0a 0a 0a 0a 05
>3a20c8	27 85 0c a9 2c 20 6d 1a 20 df 16 20 73 05 20 af
>3a20d8	04 a5 21 0a 0a 0a 0a 05 27 85 0d a9 2c 20 6d 1a
>3a20e8	20 df 16 20 73 05 20 af 04 a5 21 0a 0a 0a 0a 05
>3a20f8	27 85 0e af 0e 08 af 09 08 8f 0e 08 af a5 0c 8f
>3a2108	04 08 af a5 0d 8f 02 08 af a5 0e 8f 00 08 af af
>3a2118	0e 08 af 29 f7 8f 0e 08 af 28 60 08 e2 20 20 df
>3a2128	16 20 73 05 20 af 04 a5 21 0a 0a 0a 0a 05 27 85
>3a2138	0c a9 2c 20 6d 1a 20 df 16 20 73 05 20 af 04 a5
>3a2148	21 0a 0a 0a 0a 05 27 85 0d a9 2c 20 6d 1a 20 df
>3a2158	16 20 73 05 20 af 04 a5 21 0a 0a 0a 0a 05 27 85
>3a2168	0e af 0e 08 af 09 08 8f 0e 08 af a5 0c 8f 06 08
>3a2178	af a5 0d 8f 09 08 af a5 0e 8f 0a 08 af af 0e 08
>3a2188	af 29 f7 8f 0e 08 af 28 60 08 20 df 16 20 73 05
>3a2198	e2 20 a5 21 29 0f 0a 0a 0a 0a 85 0c a9 2c 20 6d
>3a21a8	1a 20 df 16 20 73 05 a5 21 29 0f 05 0c 8f 1e 00
>3a21b8	00 28 60 08 e2 20 20 df 16 20 73 05 a5 21 48 a9
>3a21c8	2c 20 6d 1a 20 df 16 20 73 05 a5 21 48 a9 2c 20
>3a21d8	6d 1a 20 df 16 20 73 05 a5 21 8f 08 00 af 68 8f
>3a21e8	09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20 df 16
>3a21f8	20 f8 04 a5 21 f0 1e a9 01 8f 04 00 af a9 20 8f
>3a2208	08 00 af 8f 09 00 af a9 48 8f 0f 00 00 a9 34 8f
>3a2218	13 00 00 80 12 a9 00 8f 04 00 af a9 50 8f 0f 00
>3a2228	00 a9 3c 8f 13 00 00 a9 2c 85 35 20 98 1a 90 35
>3a2238	20 74 19 20 df 16 20 73 05 a5 21 48 a9 2c 20 6d
>3a2248	1a 20 df 16 20 73 05 a5 21 48 a9 2c 20 6d 1a 20
>3a2258	df 16 20 73 05 a5 21 8f 05 00 af 68 8f 06 00 af
>3a2268	68 8f 07 00 af 28 60 08 c2 20 20 df 16 20 73 05
>3a2278	a9 af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa bf f5
>3a2288	22 3a 85 9c a9 2c 00 20 6d 1a 20 df 16 20 73 05
>3a2298	a5 21 0a 0a 18 65 9c 85 9c a9 2c 00 20 6d 1a 20
>3a22a8	df 16 20 73 05 a0 02 00 a5 21 e2 20 97 9c a9 2c
>3a22b8	20 6d 1a 20 df 16 20 73 05 a0 01 00 a5 21 e2 20
>3a22c8	97 9c a9 2c 20 6d 1a 20 df 16 20 73 05 a0 00 00
>3a22d8	a5 21 e2 20 97 9c 28 60 08 c2 20 48 a9 00 08 5b
>3a22e8	68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08 00 20 00
>3a22f8	24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f 80
>3a2308	1f 08 20 df 16 20 73 05 a5 21 8f 00 00 af c2 20
>3a2318	a9 80 02 8f 20 71 3a a9 e0 01 8f 22 71 3a af 20
>3a2328	71 3a 8f 08 01 00 af 22 71 3a 8f 0a 01 00 af 0c
>3a2338	01 00 8f 24 71 3a e2 20 af 0e 01 00 8f 26 71 3a
>3a2348	28 60 08 c2 20 20 df 16 20 73 05 c2 20 a5 21 85
>3a2358	53 a9 2c 00 20 6d 1a 20 df 16 20 73 05 e2 20 a5
>3a2368	53 d0 05 a5 21 0a 80 04 a5 21 38 2a 8f 40 01 af
>3a2378	c2 20 a9 2c 00 85 35 20 98 1a b0 18 c2 20 08 c2
>3a2388	20 a9 00 00 85 21 a9 b0 00 85 23 e2 20 a9 00 85
>3a2398	25 28 80 08 c2 20 20 74 19 20 df 16 e2 20 38 a5
>3a23a8	23 8f 1a 71 3a e9 b0 30 42 8f 43 01 af 8f 1e 71
>3a23b8	3a a5 21 8f 18 71 3a 8f 41 01 af 8f 1c 71 3a a5
>3a23c8	22 8f 42 01 af 8f 1d 71 3a 8f 19 71 3a a9 00 8f
>3a23d8	1f 71 3a 8f 1b 71 3a c2 20 af 20 71 3a 8f 44 01
>3a23e8	af af 22 71 3a 8f 46 01 af 28 60 08 c2 20 48 a9
>3a23f8	00 08 5b 68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08
>3a2408	08 c2 20 af 1c 71 3a 8f 05 04 af af 24 71 3a 8f
>3a2418	08 04 af e2 20 af 1e 71 3a 8f 07 04 af af 26 71
>3a2428	3a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04
>3a2438	af af 01 04 af 30 fa a9 00 8f 00 04 af 28 60 08
>3a2448	c2 20 a5 5b 8f 08 01 00 af 20 71 3a 8f 0a 01 00
>3a2458	18 af 0c 01 00 65 57 85 0c af 0e 01 00 69 00 00
>3a2468	85 0e 18 a5 0c 6f 18 71 3a 85 9c a5 0e 6f 1a 71
>3a2478	3a 85 9e e2 20 a5 53 87 9c 28 60 c2 20 a9 01 00
>3a2488	85 da 38 a5 5f e5 57 85 67 10 0b 49 ff ff 1a 85
>3a2498	67 a9 ff ff 85 da a9 01 00 85 dc 38 a5 63 e5 5b
>3a24a8	85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff 85 dc a5
>3a24b8	6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff ff 1a 48
>3a24c8	0a 68 6a 85 6f 20 47 24 a5 57 c5 5f d0 06 a5 5b
>3a24d8	c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff 1a c5 73
>3a24e8	10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5 57 65 da
>3a24f8	85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f 65 67 85
>3a2508	6f 18 a5 5b 65 dc 85 5b 80 bb 60 08 a9 00 00 8f
>3a2518	00 04 af c2 20 a5 5b 8f 08 01 00 af 20 71 3a 8f
>3a2528	0a 01 00 18 af 0c 01 00 65 57 85 0c e2 20 af 0e
>3a2538	01 00 69 00 85 0e c2 20 18 af 1c 71 3a 65 0c 8f
>3a2548	05 04 af e2 20 af 1e 71 3a 65 0e 8f 07 04 af c2
>3a2558	20 38 a5 5f e5 57 85 0c 8f 08 04 af 38 af 20 71
>3a2568	3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01
>3a2578	00 8f 0c 04 af e2 20 af 53 08 00 8f 01 04 af a9
>3a2588	87 8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04
>3a2598	af 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a25a8	20 48 a9 00 48 ab 68 28 c2 30 20 df 16 20 f8 04
>3a25b8	a5 21 85 53 a9 2c 00 20 6d 1a 20 df 16 20 f8 04
>3a25c8	a5 21 85 57 a9 2c 00 20 6d 1a 20 df 16 20 73 05
>3a25d8	a5 21 85 5b 20 47 24 28 60 08 08 c2 20 48 a9 00
>3a25e8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a25f8	20 df 16 20 f8 04 a5 21 85 57 a9 2c 00 20 6d 1a
>3a2608	20 df 16 20 f8 04 a5 21 85 5b a9 2c 00 20 6d 1a
>3a2618	20 df 16 20 f8 04 a5 21 85 5f a9 2c 00 20 6d 1a
>3a2628	20 df 16 20 f8 04 a5 21 85 63 a9 2c 00 20 6d 1a
>3a2638	20 df 16 20 73 05 a5 21 85 53 20 83 24 28 60 08
>3a2648	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a2658	48 ab 68 28 c2 30 20 df 16 20 f8 04 a5 21 85 57
>3a2668	a9 2c 00 20 6d 1a 20 df 16 20 f8 04 a5 21 85 5b
>3a2678	a9 2c 00 20 6d 1a 20 df 16 20 f8 04 a5 21 85 5f
>3a2688	a9 2c 00 20 6d 1a 20 df 16 20 f8 04 a5 21 85 63
>3a2698	a9 2c 00 20 6d 1a 20 df 16 20 73 05 a5 21 85 53
>3a26a8	20 13 25 28 60 08 e2 20 a5 21 c9 12 b0 18 0a 0a
>3a26b8	0a 18 69 00 85 9c a9 02 69 00 85 9d a9 af 69 00
>3a26c8	85 9e 64 9f 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a26d8	e2 20 a9 09 8f d0 08 00 dc d1 08 08 e2 20 20 df
>3a26e8	16 20 73 05 20 ad 26 a5 21 8f 26 71 3a a9 2c 20
>3a26f8	6d 1a 20 df 16 20 73 05 a5 21 c9 08 b0 4b 48 a9
>3a2708	2c 20 6d 1a 20 df 16 20 f8 04 c2 20 38 a5 21 e9
>3a2718	00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5
>3a2728	21 a0 01 00 97 9c e2 20 a5 23 c8 c8 97 9c af 26
>3a2738	71 3a aa bf 28 71 3a 29 f1 85 0c 68 0a 29 0e 05
>3a2748	0c 87 9c 9f 28 71 3a 28 60 08 c2 20 48 a9 00 08
>3a2758	5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 08 c2
>3a2768	20 20 df 16 20 73 05 20 ad 26 a9 2c 00 20 6d 1a
>3a2778	20 df 16 20 f8 04 a5 21 a0 04 00 97 9c a9 2c 00
>3a2788	20 6d 1a 20 df 16 20 f8 04 a5 21 a0 06 00 97 9c
>3a2798	28 60 08 c2 20 20 df 16 20 73 05 20 ad 26 a5 21
>3a27a8	8f 26 71 3a a9 2c 00 20 6d 1a 20 df 16 20 f8 04
>3a27b8	a5 21 48 a9 2c 00 85 35 20 98 1a b0 1c af 26 71
>3a27c8	3a aa bf 28 71 3a 29 fe 00 85 0c 68 29 01 00 05
>3a27d8	0c 9f 28 71 3a 87 9c 80 31 e2 20 20 74 19 20 df
>3a27e8	16 20 73 05 a5 21 c9 08 b0 22 0a 0a 0a 0a 85 0c
>3a27f8	68 29 01 05 0c 85 0c af 26 71 3a aa bf 28 71 3a
>3a2808	29 8e 05 0c 87 9c 9f 28 71 3a 28 60 08 c2 20 48
>3a2818	a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1
>3a2828	08 08 20 95 19 e2 20 a7 00 d0 03 4c bd 28 c9 3a
>3a2838	d0 03 4c bd 28 c9 22 d0 0b 20 07 16 20 9b 30 a9
>3a2848	3b 20 6d 1a 20 e3 03 90 37 20 36 3c 90 32 a9 3f
>3a2858	20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 e7 c9
>3a2868	02 f0 32 c9 00 f0 51 c9 01 f0 4c 08 c2 20 48 a9
>3a2878	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a2888	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0
>3a2898	08 00 dc d1 08 c2 20 a9 00 4c 85 21 a9 00 00 85
>3a28a8	23 e2 20 a9 02 85 25 20 11 12 c2 20 20 d3 3b a9
>3a28b8	0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3e a5 02
>3a28c8	85 40 a9 00 4c 85 00 a9 00 00 85 02 20 b4 05 c2
>3a28d8	20 a5 3e 85 00 a5 40 85 02 80 cf 08 20 95 19 e2
>3a28e8	20 a7 00 f0 49 c9 3a f0 45 20 e3 03 90 42 20 36
>3a28f8	3c 90 3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01
>3a2908	4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2 20
>3a2918	a9 02 85 25 20 11 12 20 d3 3b 20 95 19 a7 00 f0
>3a2928	0d c9 3a f0 09 c9 2c d0 07 20 74 19 80 ae 28 60
>3a2938	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0
>3a2948	08 00 dc d1 08 08 20 df 16 20 f8 04 e2 20 a9 5c
>3a2958	85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20
>3a2968	a9 2c 85 35 20 98 1a 90 41 20 74 19 20 df 16 20
>3a2978	38 05 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 98
>3a2988	1a 90 27 20 74 19 20 df 16 20 38 05 c2 20 a5 21
>3a2998	85 57 e2 20 a9 2c 85 35 20 98 1a 90 0d 20 74 19
>3a29a8	20 df 16 20 38 05 c2 20 a4 21 a6 57 a5 53 22 a0
>3a29b8	08 00 20 b9 19 28 60 08 c2 20 48 a9 00 08 5b 68
>3a29c8	28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2 20 20
>3a29d8	95 19 20 36 3c 90 64 a9 8c 20 6d 1a a9 01 20 7e
>3a29e8	14 a2 01 00 a9 00 8f 00 4d 00 20 df 16 20 38 05
>3a29f8	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a2a08	00 4d 00 30 4b e8 e8 20 95 19 a7 00 c9 2c f0 25
>3a2a18	c9 8d d0 27 20 74 19 20 e4 3c c2 20 a5 bd 85 21
>3a2a28	e2 20 a5 bf 85 23 64 24 a5 e7 09 80 85 e7 85 25
>3a2a38	20 d3 3b 28 60 20 74 19 4c f2 29 08 c2 20 48 a9
>3a2a48	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a2a58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d0
>3a2a68	08 00 dc d1 08 08 20 95 19 e2 20 a7 00 f0 28 c9
>3a2a78	3a f0 24 20 e3 03 90 21 20 36 3c 90 1c 20 b6 2a
>3a2a88	20 d3 3b 20 95 19 a7 00 f0 0d c9 3a f0 09 c9 2c
>3a2a98	d0 07 20 74 19 80 cf 28 60 08 c2 20 48 a9 00 08
>3a2aa8	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 a5
>3a2ab8	02 85 40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2
>3a2ac8	20 a5 38 d0 04 a5 36 f0 44 a5 36 85 00 a5 38 85
>3a2ad8	02 a5 3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 49 c9
>3a2ae8	3a f0 45 c9 2c d0 03 20 74 19 20 95 19 a7 00 c9
>3a2af8	22 f0 44 20 fc 03 b0 44 08 c2 20 48 a9 00 08 5b
>3a2b08	68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 c2 20 a9
>3a2b18	00 00 85 18 a9 01 00 85 1a 18 a5 18 69 04 00 85
>3a2b28	00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33 a9 a8
>3a2b38	85 35 20 cb 19 80 b3 20 07 16 80 03 20 5a 15 c2
>3a2b48	20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5 1a 85
>3a2b58	3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5 40 85
>3a2b68	02 28 60 20 b9 19 60 64 36 64 38 64 3a 64 3c 60
>3a2b78	20 24 00 60 20 df 16 c2 20 a5 23 48 a5 21 48 e2
>3a2b88	20 a7 00 c9 2c d0 22 20 74 19 20 df 16 c2 20 a5
>3a2b98	24 d0 2b 68 85 08 68 85 0a c2 20 a5 21 87 08 e2
>3a2ba8	20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9 00 08
>3a2bb8	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2
>3a2bc8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00
>3a2bd8	dc d1 08 20 df 16 c2 20 a5 23 48 a5 21 48 e2 20
>3a2be8	a7 00 c9 2c d0 19 20 74 19 20 df 16 c2 20 a5 23
>3a2bf8	d0 22 68 85 08 68 85 0a c2 20 a5 21 87 08 60 08
>3a2c08	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a2c18	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c28	a9 09 8f d0 08 00 dc d1 08 20 df 16 c2 20 a5 23
>3a2c38	48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 74 19 20
>3a2c48	df 16 e2 20 a5 22 d0 28 c2 20 a5 23 d0 22 68 85
>3a2c58	08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a2c68	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a2c78	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0
>3a2c88	08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2c98	20 a9 01 8f d0 08 00 dc d1 08 08 e2 20 a7 00 f0
>3a2ca8	05 20 74 19 80 f7 28 60 08 28 60 08 28 60 08 28
>3a2cb8	60 08 c2 20 a5 1a 20 f8 17 a5 18 20 f8 17 a5 02
>3a2cc8	48 a5 00 48 20 b9 19 a5 02 20 f8 17 a5 00 20 f8
>3a2cd8	17 68 85 00 68 85 02 20 95 19 20 36 3c b0 15 08
>3a2ce8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d0 08
>3a2cf8	00 dc d1 08 e2 20 a5 e7 20 0f 18 a5 e6 20 0f 18
>3a2d08	c2 20 a5 e4 20 f8 17 20 95 19 e2 20 a7 00 c9 87
>3a2d18	d0 6a a5 e7 c9 00 f0 04 c9 01 f0 00 20 74 19 20
>3a2d28	df 16 20 d3 3b e2 20 a9 99 20 6d 1a 20 df 16 c2
>3a2d38	20 a5 25 20 f8 17 a5 23 20 f8 17 a5 21 20 f8 17
>3a2d48	e2 20 a9 9a 85 35 20 98 1a 90 1b 20 74 19 20 df
>3a2d58	16 e2 20 a5 25 20 f8 17 c2 20 a5 23 20 f8 17 a5
>3a2d68	21 20 f8 17 80 14 c2 20 a9 00 00 20 f8 17 a9 00
>3a2d78	00 20 f8 17 a9 01 00 20 f8 17 28 60 08 c2 20 48
>3a2d88	a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1
>3a2d98	08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a2da8	48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9
>3a2db8	0c 00 85 e4 b9 0e 00 e2 20 85 e6 b9 10 00 85 e7
>3a2dc8	c2 20 5a 20 aa 3a 7a c2 20 b9 00 00 85 27 b9 02
>3a2dd8	00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20 5c 1f
>3a2de8	20 d3 3b 7a c2 20 b9 06 00 85 27 b9 08 00 85 29
>3a2df8	e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a 20 96
>3a2e08	20 20 e5 04 f0 28 80 08 20 79 20 20 e5 04 f0 1e
>3a2e18	c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00 85
>3a2e28	18 b9 18 00 85 1a e2 20 a9 03 85 d9 80 17 a2 21
>3a2e38	08 20 3f 14 c2 20 18 a5 31 69 1a 00 85 31 a5 33
>3a2e48	69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a 48 20
>3a2e58	95 19 20 b4 05 a5 21 f0 26 20 34 1c 90 38 e2 20
>3a2e68	a9 02 85 d9 20 b9 19 c2 20 68 20 f8 17 68 20 f8
>3a2e78	17 a5 02 20 f8 17 a5 00 20 f8 17 e6 2f 28 60 68
>3a2e88	68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2e98	d0 08 00 dc d1 08 68 68 08 c2 20 48 a9 00 08 5b
>3a2ea8	68 28 e2 20 a9 06 8f d0 08 00 dc d1 08 08 c2 30
>3a2eb8	a5 2f f0 1e 20 1a 18 85 00 20 1a 18 85 02 20 1a
>3a2ec8	18 85 18 20 1a 18 85 1a c6 2f e2 20 a9 03 85 d9
>3a2ed8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07
>3a2ee8	8f d0 08 00 dc d1 08 08 20 df 16 20 e5 04 f0 1c
>3a2ef8	e2 20 a9 94 20 6d 1a 20 b4 05 20 e5 04 f0 12 20
>3a2f08	34 1c 90 22 e2 20 a9 02 85 d9 80 03 20 b9 19 28
>3a2f18	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2f28	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2f38	e2 20 a9 06 8f d0 08 00 dc d1 08 08 e2 20 a9 01
>3a2f48	85 d9 28 60 08 20 95 19 20 b4 05 a5 21 f0 0d 20
>3a2f58	34 1c 90 1d e2 20 a9 02 85 d9 28 60 08 c2 20 48
>3a2f68	a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1
>3a2f78	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f
>3a2f88	d0 08 00 dc d1 08 20 e1 13 20 4b 0c 20 a9 39 60
>3a2f98	08 a7 00 10 03 20 74 19 20 36 3c b0 03 4c 0f 30
>3a2fa8	e2 20 20 b7 1a c9 8c d0 0e a9 8c 20 6d 1a a9 00
>3a2fb8	8f 00 4d 00 20 5d 15 20 95 19 e2 20 a7 00 c9 87
>3a2fc8	f0 03 4c 0f 30 20 74 19 a5 e7 48 a5 e6 48 a5 e5
>3a2fd8	48 a5 e4 48 20 df 16 68 85 e4 68 85 e5 68 85 e6
>3a2fe8	68 85 e7 29 80 f0 1b 20 1c 3a 90 30 c2 20 a0 09
>3a2ff8	00 b7 08 85 bd e2 20 c8 c8 b7 08 85 bf 20 a7 3e
>3a3008	80 03 20 d3 3b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3018	28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48
>3a3028	a9 00 08 5b 68 28 e2 20 a9 05 8f d0 08 00 dc d1
>3a3038	08 08 20 df 16 e2 20 a5 25 c9 ff f0 14 c9 02 d0
>3a3048	05 20 9b 30 80 0b c9 00 d0 05 20 bb 30 80 02 80
>3a3058	40 20 95 19 a7 00 f0 36 c9 3a f0 32 c9 2c f0 19
>3a3068	c9 3b f0 1a 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3078	a9 02 8f d0 08 00 dc d1 08 a9 09 20 18 00 20 74
>3a3088	19 20 95 19 a7 00 f0 09 c9 3a f0 05 80 a4 20 4c
>3a3098	03 28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a30a8	20 c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6
>3a30b8	ab 28 60 08 c2 20 20 df 10 a5 14 85 21 a5 16 85
>3a30c8	23 20 9b 30 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29
>3a30d8	0f 18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14
>3a30e8	c8 28 60 e2 20 a9 8c 20 6d 1a 08 20 df 16 e2 20
>3a30f8	c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 98 10 a0
>3a3108	00 00 af 06 08 af 20 ce 30 a9 2f 97 14 c8 af 09
>3a3118	08 af 20 ce 30 a9 2f 97 14 c8 af 0a 08 af 20 ce
>3a3128	30 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2
>3a3138	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a3148	11 12 28 e2 20 20 74 19 60 e2 20 a9 8c 20 6d 1a
>3a3158	08 20 df 16 e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>3a3168	08 af 20 98 10 a0 00 00 af 04 08 af 20 ce 30 a9
>3a3178	3a 97 14 c8 af 02 08 af 20 ce 30 a9 3a 97 14 c8
>3a3188	af 00 08 af 20 ce 30 a9 00 97 14 af 0e 08 af 29
>3a3198	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a31a8	20 a9 02 85 25 20 11 12 28 e2 20 20 74 19 60 08
>3a31b8	c2 20 20 df 16 20 f8 04 c2 20 a5 21 49 ff ff 85
>3a31c8	21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23 00 28
>3a31d8	60 e2 20 a9 8c 20 6d 1a 08 c2 30 20 df 16 20 18
>3a31e8	05 c2 20 a5 23 48 a5 21 48 20 95 19 e2 20 a7 00
>3a31f8	c9 2c f0 03 4c 50 32 20 74 19 20 df 16 20 38 05
>3a3208	c2 20 a5 21 48 20 95 19 e2 20 a7 00 c9 2c f0 03
>3a3218	4c 50 32 20 74 19 20 df 16 20 38 05 c2 20 a5 21
>3a3228	85 8d e2 20 a5 23 85 8f c2 20 68 85 27 a9 00 00
>3a3238	85 29 68 85 21 68 85 23 e2 20 a9 02 85 25 20 69
>3a3248	12 e2 20 20 74 19 28 60 08 c2 20 48 a9 00 08 5b
>3a3258	68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20
>3a3268	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc
>3a3278	d1 08 e2 20 a9 8c 20 6d 1a 08 c2 30 20 df 16 e2
>3a3288	20 a5 25 c9 02 f0 03 4c fe 32 c2 20 a5 23 48 a5
>3a3298	21 48 20 95 19 e2 20 a7 00 c9 2c f0 03 4c 13 33
>3a32a8	20 74 19 20 df 16 e2 20 a5 25 c9 00 d0 48 c2 20
>3a32b8	a5 21 85 8d c2 20 68 85 21 68 85 23 e2 20 a9 02
>3a32c8	85 25 e2 20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20
>3a32d8	98 38 e5 8d 30 09 85 27 a9 00 00 85 29 80 07 a9
>3a32e8	00 00 85 27 85 29 e2 20 a9 00 85 2b 20 69 12 e2
>3a32f8	20 20 74 19 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3308	e2 20 a9 04 8f d0 08 00 dc d1 08 08 c2 20 48 a9
>3a3318	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a3328	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0
>3a3338	08 00 dc d1 08 e2 20 a9 8c 20 6d 1a 08 c2 30 20
>3a3348	df 16 e2 20 a5 25 c9 02 f0 03 4c a9 33 c2 20 a5
>3a3358	23 48 a5 21 48 20 95 19 e2 20 a7 00 c9 2c f0 03
>3a3368	4c be 33 20 74 19 20 df 16 e2 20 a5 25 c9 00 d0
>3a3378	30 c2 20 a5 21 85 8d c2 20 a9 00 00 85 27 a9 00
>3a3388	00 85 29 e2 20 a9 00 85 2b c2 20 68 85 21 68 85
>3a3398	23 e2 20 a9 02 85 25 20 69 12 e2 20 20 74 19 28
>3a33a8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a33b8	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a33c8	e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48 a9
>3a33d8	00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08
>3a33e8	e2 20 a9 8c 20 6d 1a 20 df 16 c2 10 e2 20 a5 25
>3a33f8	c9 02 d0 23 c2 20 a5 00 85 3e a5 02 85 40 a5 21
>3a3408	85 00 a5 23 85 02 20 b4 05 a5 3e 85 00 a5 40 85
>3a3418	02 e2 20 20 74 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3428	28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c
>3a3438	20 6d 1a 08 20 df 16 c2 10 e2 20 a5 25 c9 00 d0
>3a3448	1d 20 df 10 c2 20 a5 14 85 21 a5 16 85 23 e2 20
>3a3458	a9 02 85 25 20 11 12 28 e2 20 20 74 19 60 08 c2
>3a3468	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a3478	dc d1 08 e2 20 a9 8c 20 6d 1a 08 20 df 16 20 18
>3a3488	05 c2 20 64 0c 64 0e e2 30 a0 00 b7 21 c9 20 f0
>3a3498	04 c9 24 d0 03 c8 80 f3 b7 21 20 0d 04 90 1e c2
>3a34a8	20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26
>3a34b8	0e e2 20 20 2e 04 05 0c 85 0c c8 80 db c2 20 a5
>3a34c8	0c 85 21 a5 0e 85 23 e2 20 a9 00 85 25 28 e2 20
>3a34d8	20 74 19 60 e2 20 a9 8c 20 6d 1a 08 20 df 16 20
>3a34e8	f8 04 20 98 10 e2 30 a0 ff a9 00 97 14 88 a5 21
>3a34f8	29 0f aa bf 00 60 3a 97 14 88 a5 21 29 f0 4a 4a
>3a3508	4a 4a aa bf 00 60 3a 97 14 88 a5 22 85 21 a5 23
>3a3518	85 22 a5 24 85 23 a9 00 85 24 a5 21 d0 d0 a5 22
>3a3528	d0 cc a5 23 d0 c8 98 38 65 14 85 21 a5 15 85 22
>3a3538	a5 16 85 23 a5 17 85 24 a9 02 85 25 20 11 12 28
>3a3548	e2 20 20 74 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3558	e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20
>3a3568	6d 1a 20 df 16 e2 20 a5 25 c9 02 d0 1f 8b a5 23
>3a3578	48 ab c2 10 a6 21 20 5c 11 ab 84 21 c2 20 64 23
>3a3588	e2 20 a9 00 85 25 e2 20 20 74 19 60 08 c2 20 48
>3a3598	a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1
>3a35a8	08 e2 20 a9 8c 20 6d 1a 20 df 16 e2 20 a5 25 c9
>3a35b8	00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2
>3a35c8	20 20 74 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a35d8	20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 6d
>3a35e8	1a 20 df 16 e2 20 a5 25 c9 00 d0 1d c2 20 a7 21
>3a35f8	85 0c e2 20 a0 02 00 b7 21 85 23 64 24 c2 20 a5
>3a3608	0c 85 21 e2 20 20 74 19 60 08 c2 20 48 a9 00 08
>3a3618	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20
>3a3628	a9 8c 20 6d 1a 20 df 16 e2 20 a5 25 c9 00 d0 0e
>3a3638	c2 20 a7 21 85 21 64 23 e2 20 20 74 19 60 08 c2
>3a3648	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a3658	dc d1 08 e2 20 a9 8c 20 6d 1a 20 df 16 e2 20 a5
>3a3668	25 c9 00 d0 24 20 98 10 a5 21 87 14 a9 00 a0 01
>3a3678	00 97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9
>3a3688	02 85 25 e2 20 20 74 19 60 08 c2 20 48 a9 00 08
>3a3698	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20
>3a36a8	a9 8c 20 6d 1a 20 df 16 e2 20 a5 25 c9 02 d0 14
>3a36b8	a7 21 85 21 64 22 64 23 64 24 a9 00 85 25 e2 20
>3a36c8	20 74 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a36d8	a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 6d 1a
>3a36e8	20 df 16 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0
>3a36f8	48 a5 23 d0 44 a5 22 d0 40 c2 10 20 98 10 a4 21
>3a3708	e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88 10 fb
>3a3718	a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20
>3a3728	20 74 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3738	a9 04 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08
>3a3748	5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20
>3a3758	a9 8c 20 6d 1a 20 df 16 e2 20 a5 25 c9 00 d0 39
>3a3768	e2 20 a5 24 d0 48 a5 23 d0 44 a5 22 d0 40 c2 10
>3a3778	20 98 10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09
>3a3788	97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5
>3a3798	16 85 23 e2 20 20 74 19 60 08 c2 20 48 a9 00 08
>3a37a8	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 c2
>3a37b8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00
>3a37c8	dc d1 08 e2 20 a9 8c 20 6d 1a 20 df 16 20 f8 04
>3a37d8	c2 20 a5 23 10 17 49 ff ff 85 23 a5 21 49 ff ff
>3a37e8	18 69 01 00 85 21 a5 23 69 00 00 85 23 e2 20 20
>3a37f8	74 19 60 e2 20 a9 8c 20 6d 1a 20 df 16 e2 20 a5
>3a3808	25 c9 00 d0 25 c2 20 a5 23 30 12 d0 04 a5 21 f0
>3a3818	13 a9 00 00 85 23 a9 01 00 85 21 80 07 a9 ff ff
>3a3828	85 23 85 21 e2 20 20 74 19 60 08 c2 20 48 a9 00
>3a3838	08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 00
>3a3848	ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a3858	c2 20 a9 00 00 85 d6 e2 20 a9 01 85 d8 c2 30 a9
>3a3868	00 00 a0 00 00 97 d6 a0 02 00 97 d6 a0 04 00 97
>3a3878	d6 20 4a 19 2b 28 60 8b 08 c2 20 a9 00 00 85 18
>3a3888	a9 01 00 85 1a 20 4a 19 20 ea 1b 28 ab 60 08 c2
>3a3898	20 64 53 a9 ff 7f 85 57 20 4c 03 20 b7 1a 29 ff
>3a38a8	00 c9 00 00 f0 2c c9 81 00 f0 1a 20 95 19 20 b4
>3a38b8	05 a5 21 85 53 20 b7 1a 29 ff 00 c9 00 00 f0 12
>3a38c8	c9 81 00 d0 2a 20 6d 1a 20 95 19 20 b4 05 a5 21
>3a38d8	85 57 a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 ec
>3a38e8	12 68 85 00 68 85 02 68 85 18 68 85 1a 28 60 08
>3a38f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a3908	00 dc d1 08 08 20 df 16 20 18 05 e2 20 c2 10 a0
>3a3918	00 00 a2 00 00 b7 21 9f 00 70 3a f0 04 e8 c8 80
>3a3928	f4 c2 30 a9 00 00 85 ab 85 57 e2 20 a9 02 85 ad
>3a3938	85 59 64 b0 20 4a 38 20 c4 02 c2 20 a2 0c 00 bf
>3a3948	00 71 3a 85 ae 20 54 00 10 08 20 28 00 20 e8 1e
>3a3958	80 f3 28 60 08 e2 20 20 4c 03 20 09 02 a2 00 00
>3a3968	bf 00 71 3a f0 09 20 18 00 e8 e0 08 00 d0 f1 a9
>3a3978	2e 20 18 00 a2 08 00 bf 00 71 3a f0 09 20 18 00
>3a3988	e8 e0 0b 00 d0 f1 20 4c 03 a2 14 00 bf 00 71 3a
>3a3998	d0 08 e8 e8 bf 00 71 3a f0 05 20 2b 02 b0 be 28
>3a39a8	60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e1
>3a39b8	64 e4 e2 20 64 e3 64 e6 64 e7 c2 20 38 a5 d6 69
>3a39c8	04 00 85 de e2 20 a5 d8 69 00 85 e0 28 60 c9 5f
>3a39d8	f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41
>3a39e8	b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2
>3a39f8	20 c2 10 a0 00 00 b7 0c f0 0a d7 e4 d0 13 c8 c0
>3a3a08	08 00 d0 f2 b7 e4 20 57 04 20 d6 39 b0 03 28 38
>3a3a18	60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7
>3a3a28	e4 f0 0b 20 57 04 9f 00 4e 00 c8 e8 80 f1 a9 00
>3a3a38	9f 00 4e 00 c2 20 a9 00 4e 85 e4 e2 20 a9 00 85
>3a3a48	e6 c2 20 a5 e1 85 08 d0 06 e2 20 a5 e3 f0 4d e2
>3a3a58	20 a5 e3 85 0a a5 e7 a0 00 00 d7 08 d0 17 c2 20
>3a3a68	18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e
>3a3a78	20 f6 39 b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8
>3a3a88	e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20
>3a3a98	a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28
>3a3aa8	38 60 08 20 1c 3a b0 15 08 c2 20 48 a9 00 08 5b
>3a3ab8	68 28 e2 20 a9 05 8f d0 08 00 dc d1 08 c2 30 a0
>3a3ac8	09 00 b7 08 85 21 c8 c8 b7 08 85 23 e2 20 a0 00
>3a3ad8	00 b7 08 85 25 28 60 08 c2 20 18 a5 de 69 10 00
>3a3ae8	85 08 e2 20 a5 e0 69 00 85 0a c5 b9 90 1d c2 20
>3a3af8	a5 08 c5 b7 90 15 08 c2 20 48 a9 00 08 5b 68 28
>3a3b08	e2 20 a9 09 8f d0 08 00 dc d1 08 c2 20 a5 de 85
>3a3b18	bd e2 20 a5 e0 85 bf c2 20 a5 08 85 de e2 20 a5
>3a3b28	0a 85 e0 28 60 08 e2 20 a5 25 c5 e7 f0 15 08 c2
>3a3b38	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a3b48	dc d1 08 c2 10 20 df 3a c2 30 18 a5 bd 69 01 00
>3a3b58	85 08 e2 20 a5 bf 69 00 85 0a a0 00 00 a9 00 97
>3a3b68	08 c8 c0 08 00 d0 f8 a0 00 00 b7 e4 f0 10 20 57
>3a3b78	04 20 d6 39 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>3a3b88	a0 09 00 a5 21 97 bd a5 23 c8 c8 97 bd a5 e1 a0
>3a3b98	0d 00 97 bd c8 c8 e2 20 a5 e3 97 bd c2 20 a5 bd
>3a3ba8	85 e1 e2 20 a5 bf 85 e3 e2 20 a0 00 00 a5 25 97
>3a3bb8	bd c9 02 f0 02 28 60 c2 20 a5 21 85 bd e2 20 a5
>3a3bc8	23 85 bf 20 af 0e 20 c4 0e 80 ea 08 c2 30 a5 e1
>3a3bd8	d0 06 e2 20 a5 e3 f0 05 20 1c 3a b0 05 20 2d 3b
>3a3be8	80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5
>3a3bf8	21 97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08
>3a3c08	85 bd c8 c8 e2 20 b7 08 85 bf 20 af 0e 20 e3 0e
>3a3c18	e2 20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 bd
>3a3c28	e2 20 a5 23 85 bf 20 af 0e 20 c4 0e 80 bc 08 20
>3a3c38	95 19 e2 20 a7 00 20 e3 03 90 42 c2 20 a5 00 85
>3a3c48	e4 e2 20 a5 02 85 e6 20 74 19 a7 00 f0 0d c9 24
>3a3c58	f0 14 c9 25 f0 09 20 d6 39 b0 ec a9 00 80 0c 20
>3a3c68	74 19 a9 00 80 05 20 74 19 a9 02 85 e7 20 b7 1a
>3a3c78	c9 8c d0 06 a5 e7 09 80 85 e7 28 38 60 28 18 60
>3a3c88	08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c
>3a3c98	a5 23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25
>3a3ca8	c2 20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20
>3a3cb8	49 ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c
>3a3cc8	e2 20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0
>3a3cd8	e5 e2 20 06 26 66 23 66 22 66 21 60 08 20 af 0e
>3a3ce8	c2 20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00
>3a3cf8	4d 00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf
>3a3d08	00 4d 00 85 27 a9 00 00 85 29 20 9f 1f e8 e8 88
>3a3d18	d0 eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 9f
>3a3d28	1f e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06
>3a3d38	0c 38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0
>3a3d48	29 e2 20 a5 e7 09 80 a6 21 20 73 0c e2 20 af 00
>3a3d58	4d 00 87 bd a0 01 00 a2 00 00 e2 20 bf 01 4d 00
>3a3d68	97 bd e4 8d f0 19 e8 c8 80 f0 08 c2 20 48 a9 00
>3a3d78	08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2
>3a3d88	20 38 a5 bd 67 bd 85 08 a5 be 69 00 85 09 a5 bf
>3a3d98	69 00 85 0a 64 0b c2 20 a0 05 00 b7 c0 85 0c e2
>3a3da8	20 c8 c8 b7 c0 85 0e 64 0f e2 20 a9 00 87 08 c2
>3a3db8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a3dc8	c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64
>3a3dd8	08 64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01 00
>3a3de8	e2 20 a7 bd c5 8d f0 15 08 c2 20 48 a9 00 08 5b
>3a3df8	68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08 c9 01 f0
>3a3e08	3a a0 01 00 e2 20 bf 00 4d 00 85 21 64 22 64 23
>3a3e18	64 24 b7 bd 85 27 64 28 64 29 64 2a a5 21 c5 27
>3a3e28	b0 68 20 9f 1f c2 20 18 a5 08 65 21 85 08 a5 0a
>3a3e38	65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00
>3a3e48	4d 00 85 8e 65 08 85 08 a5 09 69 00 85 09 c2 20
>3a3e58	a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26
>3a3e68	0a e2 20 38 a5 08 65 8d 85 08 a5 09 69 00 85 09
>3a3e78	c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 bd 85 08
>3a3e88	e2 20 a5 0a 65 bf 85 0a 28 60 08 c2 20 48 a9 00
>3a3e98	08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 08
>3a3ea8	20 af 0e e2 20 a0 00 00 b7 c0 29 7f c5 25 d0 28
>3a3eb8	a5 25 48 c2 20 a5 23 48 a5 21 48 20 d4 3d 68 85
>3a3ec8	21 68 85 23 e2 20 68 85 25 c2 20 a5 21 87 08 a0
>3a3ed8	02 00 a5 23 97 08 28 60 08 c2 20 48 a9 00 08 5b
>3a3ee8	68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 20 af
>3a3ef8	0e f4 00 00 f4 00 00 e2 20 48 20 d4 3d e2 20 68
>3a3f08	c2 20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08 85
>3a3f18	23 e2 20 a0 00 00 b7 c0 29 7f 85 25 28 60 5c 47
>3a3f28	57 3a 5c 85 56 3a 5c 48 57 3a 5c 07 48 3a 5c 64
>3a3f38	48 3a 5c 97 47 3a 5c 1d 47 3a 5c 9a 4c 3a 5c 91
>3a3f48	43 3a 5c b5 46 3a 5c 70 46 3a 5c fa 45 3a 5c 4a
>3a3f58	57 3a 5c 9f 44 3a 5c f5 42 3a 5c 4b 57 3a 5c cd
>3a3f68	43 3a 5c 4c 57 3a 5c 43 57 3a 5c b3 45 3a 5c 4d
>3a3f78	57 3a 18 fb c2 20 a9 ff fe 1b 58 5c 87 3f 3a c2
>3a3f88	30 22 f5 42 3a 20 08 00 20 0c 00 8b e2 20 a9 00
>3a3f98	48 ab a2 00 4f 20 66 04 ab 22 2a 3f 3a 22 32 3f
>3a3fa8	3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 be 3f
>3a3fb8	20 90 03 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20
>3a3fc8	3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73
>3a3fd8	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a3fe8	0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61
>3a3ff8	72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20
>3a4008	62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72
>3a4018	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a4028	20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72
>3a4038	74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73
>3a4048	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4058	0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4068	3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20
>3a4078	61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72
>3a4088	79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47
>3a4098	20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61
>3a40a8	72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20
>3a40b8	61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61
>3a40c8	64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74
>3a40d8	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a40e8	6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f
>3a40f8	20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a4108	65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e
>3a4118	20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62
>3a4128	79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f
>3a4138	72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f
>3a4148	72 79 0d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65
>3a4158	6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20 76
>3a4168	61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a4178	52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65 20
>3a4188	76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72 65
>3a4198	67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20
>3a41a8	3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e
>3a41b8	20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d
>3a41c8	58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65 20
>3a41d8	74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20
>3a41e8	74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d 54
>3a41f8	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a4208	64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54
>3a4218	72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64
>3a4228	61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72
>3a4238	79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65
>3a4248	74 20 74 68 65 20 72 65 67 69 73 74 65 72 20 77
>3a4258	69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74
>3a4268	68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d
>3a4278	0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42
>3a4288	41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20
>3a4298	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e
>3a42a8	0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20
>3a42b8	6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70
>3a42c8	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a42d8	20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9
>3a42e8	46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20
>3a42f8	48 a9 3a 48 ab 68 28 a2 5d 57 20 90 03 e2 20 a9
>3a4308	3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9
>3a4318	00 48 ab 68 28 a0 03 00 a2 42 02 20 5c 03 c2 20
>3a4328	a9 20 00 20 18 00 af 44 02 00 20 a0 03 a9 20 00
>3a4338	20 18 00 af 46 02 00 20 a0 03 a9 20 00 20 18 00
>3a4348	af 48 02 00 20 a0 03 a9 20 00 20 18 00 af 4a 02
>3a4358	00 20 a0 03 a9 20 00 20 18 00 af 4e 02 00 20 ba
>3a4368	03 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 a0
>3a4378	03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 db 55
>3a4388	3a 28 20 4c 03 20 4c 03 6b 08 0b 08 c2 20 48 a9
>3a4398	46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5
>3a43a8	13 d0 0e c2 20 a5 0d c5 11 d0 06 20 4c 03 2b 28
>3a43b8	6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a43c8	00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a43d8	28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90
>3a43e8	3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5
>3a43f8	0d c5 11 d0 03 4c 84 44 c2 20 18 a5 0d 69 01 00
>3a4408	85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69
>3a4418	01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20
>3a4428	38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2
>3a4438	20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17
>3a4448	e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11
>3a4458	c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11
>3a4468	e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00
>3a4478	85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 4c 03 2b
>3a4488	28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90
>3a4498	03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46
>3a44a8	08 5b 68 28 e2 20 a5 31 c9 02 b0 16 c9 01 90 20
>3a44b8	c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a44c8	85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a44d8	c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a44e8	85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a44f8	34 85 1b e2 20 a7 19 22 8a 44 3a b0 02 a9 3f 99
>3a4508	7c 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a4518	69 00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9
>3a4528	3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 ba 03
>3a4538	a9 3a 20 18 00 c2 20 a5 32 20 a0 03 c2 20 a9 08
>3a4548	00 85 47 e2 20 a9 20 20 18 00 a7 32 20 ba 03 22
>3a4558	ba 55 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a4568	20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08
>3a4578	20 90 03 20 4c 03 a5 34 c5 13 90 0f c2 20 a5 32
>3a4588	c5 11 90 07 20 4c 03 2b ab 28 6b 4c ea 44 08 8d
>3a4598	90 08 e2 20 bd 00 00 99 00 00 ad 90 08 f0 0a c8
>3a45a8	e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b 8b 08 c2
>3a45b8	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a45c8	68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20 a5 31
>3a45d8	3a 85 47 a2 57 08 a0 7c 08 22 96 45 3a a0 00 00
>3a45e8	b9 7c 08 87 32 22 ba 55 3a c8 c4 47 d0 f2 ab 2b
>3a45f8	28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08
>3a4608	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5 31 3a
>3a4618	3a 85 47 a2 5b 08 a0 7c 08 22 96 45 3a c2 20 a5
>3a4628	0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0 06 a5
>3a4638	32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7c 08 d0
>3a4648	1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34 85 4c
>3a4658	22 64 50 3a e2 20 a9 20 20 18 00 22 ba 55 3a 80
>3a4668	c6 20 4c 03 ab 2b 28 6b 08 c2 20 48 a9 46 08 5b
>3a4678	68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40 02 00
>3a4688	a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>3a4698	af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a 48 a9
>3a46a8	46 48 a9 b0 48 4c e7 46 ea 5c 04 00 3a 08 c2 20
>3a46b8	48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5
>3a46c8	0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>3a46d8	af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>3a46e8	20 af 4e 02 00 48 ab a9 5c 8f a0 08 00 af 42 02
>3a46f8	00 8f a3 08 00 af 41 02 00 8f a2 08 00 af 40 02
>3a4708	00 8f a1 08 00 af 4f 02 00 48 c2 20 af 44 02 00
>3a4718	28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9 3a 48 ab
>3a4728	68 28 08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20
>3a4738	a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15 85 47
>3a4748	80 11 c2 20 a9 01 00 85 47 80 08 a2 4e 57 20 90
>3a4758	03 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00 e2 20
>3a4768	a7 4a d7 11 f0 09 22 64 50 3a a9 20 20 18 00 c2
>3a4778	20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00 85 4c
>3a4788	c8 c4 47 d0 d9 20 4c 03 20 4c 03 ab 2b 28 6b 08
>3a4798	0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48
>3a47a8	a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e 40
>3a47b8	02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44 02 c9
>3a47c8	02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19 8e 48
>3a47d8	02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10
>3a47e8	a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c 02
>3a47f8	c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08
>3a4808	0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10
>3a4818	a2 00 00 bf 8e 57 3a f0 18 c7 08 f0 03 e8 80 f3
>3a4828	c2 20 8a 0a aa bf 3d 48 3a 8f 2d 08 00 22 61 48
>3a4838	3a ab 2b 28 6b 36 3f 3e 3f 42 3f 46 3f 4a 3f 4e
>3a4848	3f 52 3f 56 3f 5a 3f 5e 3f 3a 3f 62 3f 66 3f 6a
>3a4858	3f e2 42 6e 3f 72 3f ab 3f 6c 2d 08 08 8b 0b 08
>3a4868	c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 c9 02 b0
>3a4878	03 4c 0a 4a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20
>3a4888	22 0c 4c 3a c9 ff ff f0 10 85 54 e2 20 a5 31 c9
>3a4898	03 f0 36 a9 13 85 4f 80 4c 20 4c 03 08 e2 20 48
>3a48a8	a9 3a 48 ab 68 28 c2 10 a2 41 4a 20 90 03 4c 0a
>3a48b8	4a 20 4c 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a48c8	a2 50 4a 20 90 03 4c 0a 4a e2 20 22 42 4c 3a c9
>3a48d8	ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9 13 f0
>3a48e8	04 c9 08 f0 00 22 3a 4b 3a b0 03 4c d3 49 87 32
>3a48f8	22 ba 55 3a 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a4908	a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12 f0 6c
>3a4918	c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03 4c 01
>3a4928	4a c2 20 29 ff 00 aa e2 20 bf 00 55 3a c9 03 f0
>3a4938	57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5 54 c9
>3a4948	78 51 f0 26 c9 dc 51 f0 2a c9 5c 51 f0 1c c9 60
>3a4958	51 f0 17 c9 68 51 f0 12 c9 50 51 f0 0d c9 64 51
>3a4968	f0 08 c9 4c 51 f0 03 4c ed 48 e2 20 a9 12 85 4f
>3a4978	4c ed 48 e2 20 a9 16 85 4f 4c ed 48 22 7d 4a 3a
>3a4988	90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96 08 97 56
>3a4998	22 ba 55 3a a0 01 00 b9 96 08 97 56 22 ba 55 3a
>3a49a8	a0 00 00 b9 96 08 97 56 22 ba 55 3a e2 20 a9 41
>3a49b8	20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34 86 4c
>3a49c8	22 64 50 3a a9 20 20 18 00 80 37 20 4c 03 08 e2
>3a49d8	20 48 a9 3a 48 ab 68 28 c2 10 a2 0e 4a 20 90 03
>3a49e8	80 20 20 4c 03 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a49f8	10 a2 5e 4a 20 90 03 80 09 a5 4f 29 c0 d0 95 4c
>3a4a08	a8 49 2b ab 28 6b 41 64 64 72 65 73 73 69 6e 67
>3a4a18	20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69 6e 65
>3a4a28	64 20 66 6f 72 20 74 68 61 74 20 69 6e 73 74 72
>3a4a38	75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d 6e 65
>3a4a48	6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70 65 72
>3a4a58	61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65 20 6f
>3a4a68	66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c 61 72
>3a4a78	67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a4a88	28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32 69 02
>3a4a98	00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5 34 69
>3a4aa8	00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c 85
>3a4ab8	52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5 51 d0
>3a4ac8	2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0 1c a5
>3a4ad8	52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0 0c 80
>3a4ae8	0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18 6b 2b
>3a4af8	28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 46 08 5b
>3a4b08	68 28 e2 20 a2 00 00 df 00 60 3a f0 08 e8 e0 10
>3a4b18	00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26 52 06
>3a4b28	50 26 52 06 50 26 52 e2 20 8a 05 50 85 50 fa 2b
>3a4b38	28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2
>3a4b48	20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f 85 4a
>3a4b58	c2 30 a2 00 00 a0 00 00 bd fe 51 f0 1b c5 54 d0
>3a4b68	0d e2 20 b9 00 54 29 3f c5 4a f0 07 c2 20 e8 e8
>3a4b78	c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2
>3a4b88	20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0 00 00 64
>3a4b98	50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36 85 4a
>3a4ba8	68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28 38 6b
>3a4bb8	2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30 b0 14
>3a4bc8	c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02
>3a4bd8	80 de 29 df 22 fb 4a 3a 80 cb 0b 08 c2 20 48 a9
>3a4be8	46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03 c8 80
>3a4bf8	f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69 00 00
>3a4c08	85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a4c18	20 a5 11 85 36 a5 13 85 38 a9 8c 50 85 03 a9 3a
>3a4c28	00 85 05 22 84 4b 3a b0 0d 22 e2 4b 3a a7 03 d0
>3a4c38	f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2 20 48
>3a4c48	a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5 17 85 38
>3a4c58	a9 18 55 85 03 a9 3a 00 85 05 22 84 4b 3a b0 22
>3a4c68	22 e2 4b 3a c2 20 18 a5 03 69 01 00 85 03 a5 05
>3a4c78	69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9 ff ff
>3a4c88	80 0d 22 e2 4b 3a e2 20 a7 03 c2 20 29 ff 00 2b
>3a4c98	28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4ca8	20 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d
>3a4cb8	69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5
>3a4cc8	0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32
>3a4cd8	69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 00 4d
>3a4ce8	3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90
>3a4cf8	ec 20 4c 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18
>3a4d08	00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28
>3a4d18	c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 64 50 3a
>3a4d28	a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2
>3a4d38	20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0
>3a4d48	0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c
>3a4d58	48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff
>3a4d68	00 0a aa bf fe 51 3a aa 22 de 4f 3a e2 20 a7 00
>3a4d78	aa bf 00 54 3a 22 ba 55 3a 22 8b 4d 3a 20 4c 03
>3a4d88	2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c 99
>3a4d98	4d c9 4d e4 4d eb 4d 10 4e 17 4e 32 4e 54 4e 65
>3a4da8	4e a2 4e aa 4e bb 4e cc 4e d3 4e f8 4e 25 4f 91
>3a4db8	4e 76 4e 43 4e 18 4f 22 4f 36 4f 65 4f 13 4f 76
>3a4dc8	4f a9 28 20 18 00 22 8d 4f 3a a9 2c 20 18 00 a9
>3a4dd8	58 20 18 00 a9 29 20 18 00 4c 87 4f 22 8d 4f 3a
>3a4de8	4c 87 4f e2 20 48 a9 23 20 18 00 68 29 c0 c9 00
>3a4df8	f0 0f 4a 4a 2f 94 08 00 d0 07 22 97 4f 3a 4c 87
>3a4e08	4f 22 8d 4f 3a 4c 87 4f 22 97 4f 3a 4c 87 4f a9
>3a4e18	28 20 18 00 22 8d 4f 3a a9 29 20 18 00 a9 2c 20
>3a4e28	18 00 a9 59 20 18 00 4c 87 4f 22 8d 4f 3a a9 2c
>3a4e38	20 18 00 a9 58 20 18 00 4c 87 4f 22 8d 4f 3a a9
>3a4e48	2c 20 18 00 a9 59 20 18 00 4c 87 4f 22 97 4f 3a
>3a4e58	a9 2c 20 18 00 a9 59 20 18 00 4c 87 4f 22 97 4f
>3a4e68	3a a9 2c 20 18 00 a9 58 20 18 00 4c 87 4f a9 28
>3a4e78	20 18 00 22 97 4f 3a a9 2c 20 18 00 a9 58 20 18
>3a4e88	00 a9 29 20 18 00 4c 87 4f a9 28 20 18 00 22 8d
>3a4e98	4f 3a a9 29 20 18 00 4c 87 4f a9 41 20 18 00 4c
>3a4ea8	8b 4f 22 8d 4f 3a a9 2c 20 18 00 a9 53 20 18 00
>3a4eb8	4c 87 4f a9 5b 20 18 00 22 8d 4f 3a a9 5d 20 18
>3a4ec8	00 4c 87 4f 22 a5 4f 3a 4c 8b 4f a9 28 20 18 00
>3a4ed8	22 8d 4f 3a a9 2c 20 18 00 a9 53 20 18 00 a9 29
>3a4ee8	20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 87 4f
>3a4ef8	a9 5b 20 18 00 22 8d 4f 3a a9 5d 20 18 00 a9 2c
>3a4f08	20 18 00 a9 59 20 18 00 4c 87 4f a0 02 00 80 03
>3a4f18	a0 01 00 22 0b 50 3a 4c 8b 4f 4c 8b 4f 22 a5 4f
>3a4f28	3a a9 2c 20 18 00 a9 58 20 18 00 4c 8b 4f a9 23
>3a4f38	20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22 5c
>3a4f48	03 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0 01
>3a4f58	00 22 5c 03 3a ab 22 ba 55 3a 4c 87 4f a9 28 20
>3a4f68	18 00 22 97 4f 3a a9 29 20 18 00 4c 87 4f a9 5b
>3a4f78	20 18 00 22 97 4f 3a a9 5d 20 18 00 4c 87 4f 22
>3a4f88	ba 55 3a 28 6b 08 e2 20 a7 00 20 ba 03 28 6b 08
>3a4f98	c2 30 a7 00 20 a0 03 22 ba 55 3a 28 6b 08 8b 0b
>3a4fa8	c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28 08 e2 20
>3a4fb8	48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99 90
>3a4fc8	08 22 ba 55 3a c8 c0 03 00 d0 f1 22 64 50 3a c2
>3a4fd8	30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48
>3a4fe8	a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00 00
>3a4ff8	20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18 00
>3a5008	ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b 68 28 e2
>3a5018	20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64 1a
>3a5028	80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22 ba
>3a5038	55 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85 1a
>3a5048	c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a 85
>3a5058	1a 22 64 50 3a 22 ba 55 3a 2b 28 6b 08 0b c2 20
>3a5068	48 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4c 20
>3a5078	ba 03 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 a0 03
>3a5088	68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52 00
>3a5098	41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50 00
>3a50a8	53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52 00
>3a50b8	52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43 00
>3a50c8	49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59 00
>3a50d8	4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b 00
>3a50e8	4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50 00
>3a50f8	50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59 00
>3a5108	54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43 00
>3a5118	53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41 00
>3a5128	43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41 00
>3a5138	54 58 53 00 54 41 58 00 54 53 58 00 44 45 58 00
>3a5148	4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43 00
>3a5158	42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45 00
>3a5168	42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a 00
>3a5178	42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58 00
>3a5188	50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b 00
>3a5198	52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49 00
>3a51a8	58 42 41 00 54 43 53 00 54 53 43 00 54 43 44 00
>3a51b8	54 44 43 00 54 58 59 00 54 59 58 00 53 54 50 00
>3a51c8	58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d 00
>3a51d8	50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50 00
>3a51e8	4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41 00
>3a51f8	4a 4d 4c 00 00 00 e4 50 8c 50 cc 51 8c 50 6c 51
>3a5208	8c 50 ac 50 8c 50 f4 50 8c 50 ac 50 8c 51 6c 51
>3a5218	8c 50 ac 50 8c 50 4c 51 8c 50 8c 50 8c 50 70 51
>3a5228	8c 50 ac 50 8c 50 14 51 8c 50 c8 50 ac 51 70 51
>3a5238	8c 50 ac 50 8c 50 e8 50 90 50 d0 51 90 50 cc 50
>3a5248	90 50 b0 50 90 50 f8 50 90 50 b0 50 90 51 cc 50
>3a5258	90 50 b0 50 90 50 50 51 90 50 90 50 90 50 cc 50
>3a5268	90 50 b0 50 90 50 18 51 90 50 c4 50 b0 51 cc 50
>3a5278	90 50 b0 50 90 50 ec 50 94 50 d4 51 94 50 e8 51
>3a5288	94 50 b4 50 94 50 fc 50 94 50 b4 50 94 51 d0 50
>3a5298	94 50 b4 50 94 50 54 51 94 50 94 50 94 50 ec 51
>3a52a8	94 50 b4 50 94 50 1c 51 94 50 7c 51 b4 51 f8 51
>3a52b8	94 50 b4 50 94 50 f0 50 98 50 d8 51 98 50 74 51
>3a52c8	98 50 b8 50 98 50 00 51 98 50 b8 50 98 51 d0 50
>3a52d8	98 50 b8 50 98 50 58 51 98 50 98 50 98 50 74 51
>3a52e8	98 50 b8 50 98 50 20 51 98 50 80 51 b8 51 d0 50
>3a52f8	98 50 b8 50 98 50 78 51 9c 50 dc 51 9c 50 d4 50
>3a5308	9c 50 bc 50 9c 50 04 51 cc 50 34 51 9c 51 d4 50
>3a5318	9c 50 bc 50 9c 50 5c 51 9c 50 9c 50 9c 50 d4 50
>3a5328	9c 50 bc 50 9c 50 24 51 9c 50 38 51 bc 51 74 51
>3a5338	9c 50 74 51 9c 50 d8 50 a0 50 c0 50 a0 50 d8 50
>3a5348	a0 50 c0 50 a0 50 08 51 a0 50 3c 51 a0 51 d8 50
>3a5358	a0 50 c0 50 a0 50 60 51 a0 50 a0 50 a0 50 d8 50
>3a5368	a0 50 c0 50 a0 50 28 51 a0 50 40 51 c0 51 d8 50
>3a5378	a0 50 c0 50 a0 50 dc 50 a4 50 e0 51 a4 50 dc 50
>3a5388	a4 50 c4 50 a4 50 0c 51 a4 50 44 51 a4 51 dc 50
>3a5398	a4 50 c4 50 a4 50 64 51 a4 50 a4 50 a4 50 f0 51
>3a53a8	a4 50 c4 50 a4 50 2c 51 a4 50 84 51 c4 51 f8 51
>3a53b8	a4 50 c4 50 a4 50 e0 50 a8 50 e4 51 a8 50 e0 50
>3a53c8	a8 50 c8 50 a8 50 10 51 a8 50 48 51 a8 51 e0 50
>3a53d8	a8 50 c8 50 a8 50 68 51 a8 50 a8 50 a8 50 f4 51
>3a53e8	a8 50 c8 50 a8 50 30 51 a8 50 88 51 c8 51 e8 50
>3a53f8	a8 50 c8 50 a8 50 00 00 13 00 02 09 01 01 01 0a
>3a5408	13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d
>3a5418	13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01 0a
>3a5428	13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05 0d
>3a5438	13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01 0a
>3a5448	13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05 0d
>3a5458	13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01 0a
>3a5468	13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05 0d
>3a5478	13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01 0a
>3a5488	13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d
>3a5498	13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01 0a
>3a54a8	13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d
>3a54b8	13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01 0a
>3a54c8	13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d
>3a54d8	13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01 0f
>3a54e8	13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05 0d
>3a54f8	13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02 02
>3a5508	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
>3a5518	41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64 64
>3a5528	3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07 64
>3a5538	64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64 2c
>3a5548	58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09 64
>3a5558	64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23 64
>3a5568	64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c 59
>3a5578	00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64 64
>3a5588	64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64 29
>3a5598	2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64 5d
>3a55a8	00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a
>3a55b8	00 00 08 c2 20 48 18 af 78 08 00 69 01 00 8f 78
>3a55c8	08 00 e2 20 af 7a 08 00 69 00 8f 7a 08 00 c2 20
>3a55d8	68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08 48
>3a55e8	a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca d0
>3a55f8	eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5608	a7 32 f0 0a c9 20 d0 06 22 ba 55 3a 80 f2 6b 08
>3a5618	c2 20 48 a9 46 08 5b 68 28 e2 20 64 4a c2 20 64
>3a5628	50 64 52 e2 20 a7 32 c9 3a f0 0d 20 0d 04 90 0e
>3a5638	22 fb 4a 3a a9 01 85 4a 22 ba 55 3a 80 e5 a5 4a
>3a5648	f0 16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d
>3a5658	a5 52 95 0f e2 20 e6 31 6b e2 20 64 31 22 fc 55
>3a5668	3a a7 32 f0 17 22 17 56 3a a5 31 c9 09 b0 0d a7
>3a5678	32 f0 09 c9 20 f0 e6 20 0d 04 b0 e1 6b 08 0b 08
>3a5688	c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00
>3a5698	74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f
>3a56a8	85 00 85 32 e2 20 22 fc 55 3a c9 00 f0 38 c2 20
>3a56b8	a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 ba 55
>3a56c8	3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8
>3a56d8	80 eb 86 0b a9 00 87 32 22 ba 55 3a a7 08 c9 41
>3a56e8	f0 07 22 61 56 3a 2b 28 6b 22 fc 55 3a a7 32 f0
>3a56f8	f5 22 17 56 3a 22 fc 55 3a a7 32 f0 e9 c2 20 a5
>3a5708	32 85 11 e2 20 a5 34 85 13 22 ba 55 3a a7 32 f0
>3a5718	26 c9 20 d0 f4 a9 00 87 32 e6 31 22 ba 55 3a 22
>3a5728	fc 55 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5
>3a5738	34 85 17 e6 31 80 af e6 31 80 ab 5c 1b 1f 3a 6b
>3a5748	00 00 00 00 00 00 42 61 64 20 61 72 67 75 6d 65
>3a5758	6e 74 73 0d 00 0d 20 20 50 43 20 20 20 20 20 41
>3a5768	20 20 20 20 58 20 20 20 20 59 20 20 20 20 53 50
>3a5778	20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d 58
>3a5788	44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d 52
>3a5798	3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9
>3a57a8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a57b8	30 20 e0 57 a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab
>3a57c8	68 28 a2 e2 61 20 90 03 08 e2 20 48 a9 00 48 ab
>3a57d8	68 28 4c 1b 1f 4c dd 57 08 20 03 03 20 4a 38 28
>3a57e8	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a57f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 127 times (2032 bytes)...
>3a5ff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3a6008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3a6018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3a6028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3a6038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3a6048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3a6058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3a6068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3a6078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3a6088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3a6098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3a60a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3a60b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3a60c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3a60d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3a60e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3a60f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3a6108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3a6118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3a6128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3a6138	52 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49 4e
>3a6148	50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54 45
>3a6158	58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f 4c
>3a6168	4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44 41
>3a6178	54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54 54
>3a6188	49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53 45
>3a6198	54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43 4c
>3a61a8	52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49 4e
>3a61b8	45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53 50
>3a61c8	52 49 54 45 41 54 00 53 50 52 49 54 45 53 48 4f
>3a61d8	57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46
>3a61e8	6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76
>3a61f8	30 30 2e 30 30 20 61 6c 70 68 61 20 28 32 30 32
>3a6208	30 2d 30 31 2d 30 34 29 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
