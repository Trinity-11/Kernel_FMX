
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Mon Aug 24 13:55:40 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01					CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$05					CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 ea 12 38	jsl $3812ea	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c c7 16 39	jmp $3916c7	RESTORE         JML IRESTORE
.381008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	5c c8 16 39	jmp $3916c8	SCINIT          JML ISCINIT
.381014	5c c9 16 39	jmp $3916c9	IOINIT          JML IIOINIT
.381018	5c 9e 07 39	jmp $39079e	PUTC            JML IPUTC
.38101c	5c 87 07 39	jmp $390787	PUTS            JML IPUTS
.381020	5c 0e 09 39	jmp $39090e	PUTB            JML IPUTB
.381024	5c 9c 41 39	jmp $39419c	PUTBLOCK        JML IPUTBLOCK
.381028	5c ca 16 39	jmp $3916ca	SETLFS          JML ISETLFS
.38102c	5c cb 16 39	jmp $3916cb	SETNAM          JML ISETNAM
.381030	5c cc 16 39	jmp $3916cc	OPEN            JML IOPEN
.381034	5c cd 16 39	jmp $3916cd	CLOSE           JML ICLOSE
.381038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	5c ce 16 39	jmp $3916ce	GETB            JML IGETB
.381044	5c 49 41 39	jmp $394149	GETBLOCK        JML IGETBLOCK
.381048	5c 48 07 39	jmp $390748	GETCH           JML IGETCH
.38104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	5c cf 16 39	jmp $3916cf	GETS            JML IGETS
.381058	5c d0 16 39	jmp $3916d0	GETLINE         JML IGETLINE
.38105c	5c d1 16 39	jmp $3916d1	GETFIELD        JML IGETFIELD
.381060	5c d2 16 39	jmp $3916d2	TRIM            JML ITRIM
.381064	5c d3 16 39	jmp $3916d3	PRINTC          JML IPRINTC
.381068	5c d4 16 39	jmp $3916d4	PRINTS          JML IPRINTS
.38106c	5c 0f 09 39	jmp $39090f	PRINTCR         JML IPRINTCR
.381070	5c d5 16 39	jmp $3916d5	PRINTF          JML IPRINTF
.381074	5c d6 16 39	jmp $3916d6	PRINTI          JML IPRINTI
.381078	5c cf 0a 39	jmp $390acf	PRINTH          JML IPRINTH
.38107c	5c d7 16 39	jmp $3916d7	PRINTAI         JML IPRINTAI
.381080	5c ec 0a 39	jmp $390aec	PRINTAH         JML IPRINTAH
.381084	5c 13 0a 39	jmp $390a13	LOCATE          JML ILOCATE
.381088	5c d8 16 39	jmp $3916d8	PUSHKEY         JML IPUSHKEY
.38108c	5c d9 16 39	jmp $3916d9	PUSHKEYS        JML IPUSHKEYS
.381090	5c 6f 09 39	jmp $39096f	CSRRIGHT        JML ICSRRIGHT
.381094	5c a2 09 39	jmp $3909a2	CSRLEFT         JML ICSRLEFT
.381098	5c c8 09 39	jmp $3909c8	CSRUP           JML ICSRUP
.38109c	5c ee 09 39	jmp $3909ee	CSRDOWN         JML ICSRDOWN
.3810a0	5c 5e 09 39	jmp $39095e	CSRHOME         JML ICSRHOME
.3810a4	5c 5f 0a 39	jmp $390a5f	SCROLLUP        JML ISCROLLUP
.3810a8	5c 3a 0b 39	jmp $390b3a	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 05 0c 39	jmp $390c05	INITCHLUT	    JML IINITCHLUT
.3810b0	5c ef 0f 39	jmp $390fef	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c ee 10 39	jmp $3910ee	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 59 12 39	jmp $391259	TESTSID         JML ITESTSID
.3810bc	5c ce 0f 39	jmp $390fce	INITCURSOR      JML IINITCURSOR
.3810c0	5c 84 0f 39	jmp $390f84	INITFONTSET     JML IINITFONTSET
.3810c4	5c 34 0c 39	jmp $390c34	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 54 0c 39	jmp $390c54	INITALLLUT      JML IINITALLLUT
.3810cc	5c 16 0d 39	jmp $390d16	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 0f 0e 39	jmp $390e0f	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 46 0e 39	jmp $390e46	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 47 0e 39	jmp $390e47	INITSPRITE      JML IINITSPRITE
.3810dc	5c 28 13 39	jmp $391328	INITCODEC       JML IINITCODEC
.3810e0	5c a4 13 39	jmp $3913a4	RESETCODEC      JML IRESETCODEC
.3810e4	5c 12 14 39	jmp $391412	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c c7 13 39	jmp $3913c7	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 55 37 39	jmp $393755	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c d1 53 39	jmp $3953d1	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 64 54 39	jmp $395464	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 9e 54 39	jmp $39549e	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 37 55 39	jmp $395537	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c d2 54 39	jmp $3954d2	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c e1 55 39	jmp $3955e1	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c a3 55 39	jmp $3955a3	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c dd 55 39	jmp $3955dd	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 7a 56 39	jmp $39567a	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c a1 56 39	jmp $3956a1	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c a5 56 39	jmp $3956a5	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 86 58 39	jmp $395886	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 1f 41 39	jmp $39411f	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 1f 59 39	jmp $39591f	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 3a 45 39	jmp $39453a	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 5c 0d 39	jmp $390d5c	SETSIZES        JML ISETSIZES
.381130	5c 48 5a 39	jmp $395a48	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c aa 59 39	jmp $3959aa	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c fe 59 39	jmp $3959fe	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 58 12	jsr $381258	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 b3 12	jsr $3812b3	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 72 12	jsr $381272	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 eb 12	jsr $3812eb	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 be 12	jsr $3812be	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 c9 12	jsr $3812c9	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 d4 12	jsr $3812d4	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 df 12	jsr $3812df	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	08		php		                PHP
.3811fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3811fd	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381201	29 01		and #$01	                AND #FNX0_INT00_SOF
.381203	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381207	e2 20		sep #$20	                SEP #$20        ; set A short
.381209	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120d	d0 06		bne $381215	                BNE dec_motor                   ; If not zero: decrement the timer
.38120f	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.381213	f0 28		beq $38123d	                BEQ sof_timeout                 ; If zero: move on to the next timer
.381215	af 4e a0 38	lda $38a04e	dec_motor       LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.381219	3a		dec a		                DEC A
.38121a	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.38121e	c9 ff		cmp #$ff	                CMP #$FF                        ; Did it roll over?
.381220	d0 0b		bne $38122d	                BNE chk_motor_end               ; No: check to see if we're a the end
.381222	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.381226	3a		dec a		                DEC A
.381227	8f 4f a0 38	sta $38a04f	                STA @l FDC_MOTOR_TIMER+1
.38122b	80 10		bra $38123d	                BRA sof_timeout                 ; And move on to the next timer
.38122d	af 4e a0 38	lda $38a04e	chk_motor_end   LDA @l FDC_MOTOR_TIMER          ; Check timer
.381231	d0 0a		bne $38123d	                BNE sof_timeout                 ; if it's <>0, move on to the next timer
.381233	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1
.381237	d0 04		bne $38123d	                BNE sof_timeout
.381239	22 57 62 39	jsl $396257	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.38123d					sof_timeout
.38123d	e2 20		sep #$20	                SEP #$20        ; set A short
.38123f	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.381243	f0 11		beq $381256	                BEQ sof_int_done                ; If it's 0, we don't do anything
.381245	3a		dec a		                DEC A                           ; Count down one tick
.381246	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.38124a	d0 0a		bne $381256	                BNE sof_int_done                ; If not 0, we're done
.38124c	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.381250	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.381252	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381256	28		plp		sof_int_done    PLP
.381257	60		rts		                RTS
.381258					TIMER0_INTERRUPT
.381258	e2 20		sep #$20	                SEP #$20        ; set A short
.38125a	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38125e	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381260	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381264	60		rts		                RTS
.381265					TIMER2_INTERRUPT
.381265	e2 20		sep #$20	                SEP #$20        ; set A short
.381267	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38126b	09 20		ora #$20	                ORA #TIMER2TRIGGER
.38126d	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381271	60		rts		                RTS
.381272					MOUSE_INTERRUPT
.381272	e2 20		sep #$20	                SEP #$20        ; set A short
.381274	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381278	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38127a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38127e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.381282	a2 00 00	ldx #$0000	                LDX #$0000
.381285	e2 10		sep #$10	                SEP #$10        ; set X short
.381287	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381289	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38128d	e8		inx		                INX
.38128e	e0 03		cpx #$03	                CPX #$03
.381290	d0 1c		bne $3812ae	                BNE EXIT_FOR_NEXT_VALUE
.381292	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381296	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381298	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.38129c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38129e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3812a2	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3812a4	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3812a8	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3812aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812ac	a2 00		ldx #$00	                LDX #$00
.3812ae					EXIT_FOR_NEXT_VALUE
.3812ae	86 e0		stx $e0		                STX MOUSE_PTR
.3812b0	c2 10		rep #$10	                REP #$10        ; set X long
.3812b2	60		rts		                RTS
.3812b3					FDC_INTERRUPT
.3812b3	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812b7	29 40		and #$40	                AND #FNX0_INT06_FDC
.3812b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3812bd	60		rts		                RTS
.3812be					COM2_INTERRUPT
.3812be	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812c2	29 08		and #$08	                AND #FNX1_INT03_COM2
.3812c4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c8	60		rts		                RTS
.3812c9					COM1_INTERRUPT
.3812c9	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812cd	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812cf	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812d3	60		rts		                RTS
.3812d4					MPU401_INTERRUPT
.3812d4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d8	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812da	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812de	60		rts		                RTS
.3812df					LPT1_INTERRUPT
.3812df	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812e3	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812e5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812e9	60		rts		                RTS
.3812ea					NMI_HANDLER
.3812ea	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812eb					KEYBOARD_INTERRUPT
.3812eb	48		pha		                PHA             ; begin setdp macro
.3812ec	08		php		                PHP
.3812ed	c2 20		rep #$20	                REP #$20        ; set A long
.3812ef	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812f2	5b		tcd		                TCD
.3812f3	28		plp		                PLP
.3812f4	68		pla		                PLA             ; end setdp macro
.3812f5	a2 00 00	ldx #$0000	                ldx #$0000
.3812f8	e2 10		sep #$10	                SEP #$10        ; set X short
.3812fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812fc	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381300	29 01		and #$01	                AND #FNX1_INT00_KBD
.381302	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381306					IRQ_HANDLER_FETCH
.381306	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.38130a	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.38130c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.38130e	29 80		and #$80	                AND #$80
.381310	c9 80		cmp #$80	                CMP #$80
.381312	d0 10		bne $381324	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.381314	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381316	29 7f		and #$7f	                AND #$7F
.381318	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38131a	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.38131c	aa		tax		                TAX
.38131d	bf 80 74 39	lda $397480,x	                LDA @lScanCode_Prefix_Set1, x
.381321	4c c7 13	jmp $3813c7	                JMP KB_WR_2_SCREEN      ; And save it
.381324	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381326	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381328	d0 03		bne $38132d	                BNE NOT_KB_SET_LSHIFT
.38132a	82 ad 00	brl $3813da	                BRL KB_SET_SHIFT
.38132d					NOT_KB_SET_LSHIFT
.38132d	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38132f	d0 03		bne $381334	                BNE NOT_KB_CLR_LSHIFT
.381331	82 af 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381334					NOT_KB_CLR_LSHIFT
.381334	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381336	d0 03		bne $38133b	                BNE NOT_KB_SET_RSHIFT
.381338	82 9f 00	brl $3813da	                BRL KB_SET_SHIFT
.38133b					NOT_KB_SET_RSHIFT
.38133b	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.38133d	d0 03		bne $381342	                BNE NOT_KB_CLR_RSHIFT
.38133f	82 a1 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381342					NOT_KB_CLR_RSHIFT
.381342	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.381344	d0 03		bne $381349	                BNE NOT_KB_SET_CTRL
.381346	82 a3 00	brl $3813ec	                BRL KB_SET_CTRL
.381349					NOT_KB_SET_CTRL
.381349	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.38134b	d0 03		bne $381350	                BNE NOT_KB_CLR_CTRL
.38134d	82 a5 00	brl $3813f5	                BRL KB_CLR_CTRL
.381350					NOT_KB_CLR_CTRL
.381350	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381352	d0 03		bne $381357	                BNE NOT_KB_SET_ALT
.381354	82 a7 00	brl $3813fe	                BRL KB_SET_ALT
.381357					NOT_KB_SET_ALT
.381357	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381359	d0 03		bne $38135e	                BNE NOT_KB_CLR_ALT
.38135b	82 a9 00	brl $381407	                BRL KB_CLR_ALT
.38135e	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381360	d0 03		bne $381365	                BNE NOT_PREFIXED
.381362	82 ab 00	brl $381410	                BRL KB_SET_PREFIX
.381365	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381367	d0 03		bne $38136c	                BNE NOT_KB_SET_NUM
.381369	82 b6 00	brl $381422	                BRL KB_TOG_NUMLOCK
.38136c	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38136e	d0 03		bne $381373	                BNE NOT_KB_SET_SCR
.381370	82 a6 00	brl $381419	                BRL KB_TOG_SCRLOCK
.381373	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381375	d0 03		bne $38137a	                BNE NOT_KB_CAPSLOCK
.381377	82 bc 00	brl $381436	                BRL KB_TOG_CAPLOCK
.38137a	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.38137c	d0 09		bne $381387	                BNE KB_UNPRESSED
.38137e	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381380	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381384	82 b5 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381387	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381389	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.38138b	d0 03		bne $381390	                BNE KB_NORM_SC
.38138d	82 ac 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381390	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.381392	aa		tax		                TAX
.381393	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381395	29 10		and #$10	                AND #$10
.381397	c9 10		cmp #$10	                CMP #$10
.381399	f0 17		beq $3813b2	                BEQ SHIFT_KEY_ON
.38139b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38139d	29 20		and #$20	                AND #$20
.38139f	c9 20		cmp #$20	                CMP #$20
.3813a1	f0 16		beq $3813b9	                BEQ CTRL_KEY_ON
.3813a3	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3813a5	29 40		and #$40	                AND #$40
.3813a7	c9 40		cmp #$40	                CMP #$40
.3813a9	f0 15		beq $3813c0	                BEQ ALT_KEY_ON
.3813ab	bf 00 72 39	lda $397200,x	                LDA @lScanCode_Press_Set1, x
.3813af	82 15 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b2	bf 80 72 39	lda $397280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3813b6	82 0e 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b9	bf 00 73 39	lda $397300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3813bd	82 07 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c0	bf 80 73 39	lda $397380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3813c4	82 00 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c7	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813c9	d0 03		bne $3813ce	                BNE savechar
.3813cb	4c 4c 14	jmp $38144c	                JMP programmerKey       ; Yes: trigger the programmer key
.3813ce	48		pha		savechar        PHA
.3813cf	c2 10		rep #$10	                REP #$10        ; set X long
.3813d1	20 58 14	jsr $381458	                JSR SAVEKEY
.3813d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3813d6	68		pla		                PLA
.3813d7	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813da	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813dc	09 10		ora #$10	                ORA #$10
.3813de	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e0	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813e3	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813e5	29 ef		and #$ef	                AND #$EF
.3813e7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e9	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813ec	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813ee	09 20		ora #$20	                ORA #$20
.3813f0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813f2	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813f5	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813f7	29 df		and #$df	                AND #$DF
.3813f9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813fb	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813fe	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.381400	09 40		ora #$40	                ORA #$40
.381402	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381404	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381407	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.381409	29 bf		and #$bf	                AND #$BF
.38140b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38140d	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381410	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.381412	09 80		ora #$80	                ORA #$80
.381414	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381416	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381419	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.38141b	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.38141d	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38141f	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381422	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381424	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381426	c9 60		cmp #$60	                CMP #$60
.381428	d0 03		bne $38142d	                BNE KB_TOG_NUMLOC2
.38142a	82 63 ff	brl $381390	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.38142d	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.38142f	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381431	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381433	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381436	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381438	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.38143a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38143c					KB_CHECK_B_DONE
.38143c	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381440	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381442	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381444	d0 03		bne $381449	                BNE SET_LED
.381446	4c 06 13	jmp $381306	                JMP IRQ_HANDLER_FETCH
.381449					SET_LED
.381449					KB_DONE
.381449	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144b	60		rts		                RTS
.38144c					programmerKey
.38144c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144e	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.38144f	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381450	ab		plb		                PLB
.381451	7a		ply		                PLY
.381452	fa		plx		                PLX
.381453	68		pla		                PLA
.381454	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381458					SAVEKEY
.381458	e2 20		sep #$20	                SEP #$20        ; set A short
.38145a	48		pha		                PHA                     ; Save the character
.38145b	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.38145d	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38145f	f0 0d		beq $38146e	                BEQ no_caps             ; No... just use the character as-is
.381461	68		pla		                PLA                     ; Get the character back
.381462	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381464	90 09		bcc $38146f	                BLT check_break         ; Yes: just use as-is
.381466	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381468	b0 05		bcs $38146f	                BGE check_break         ; Yes: just us as-is
.38146a	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.38146c	80 01		bra $38146f	                BRA check_break
.38146e	68		pla		no_caps         PLA                     ; Restore the character
.38146f	c9 00		cmp #$00	check_break     CMP #0
.381471	f0 18		beq $38148b	                BEQ done
.381473	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381475	f0 15		beq $38148c	                BEQ flag_break          ; Yes: flag a break
.381477	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381479	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.38147c	b0 0d		bcs $38148b	                BCS done                ; Stop storing - An error should ensue here...
.38147e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381482	e8		inx		                INX
.381483	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381485	a9 00		lda #$00	                LDA #$00
.381487	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.38148b	60		rts		done            RTS
.38148c					flag_break
.38148c	e2 20		sep #$20	                SEP #$20        ; set A short
.38148e	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381490	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381492	60		rts		                RTS
.381493					KBD_GETC
.381493	da		phx		                PHX
.381494	0b		phd		                PHD
.381495	08		php		                PHP
.381496	48		pha		                PHA             ; begin setdp macro
.381497	08		php		                PHP
.381498	c2 20		rep #$20	                REP #$20        ; set A long
.38149a	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38149d	5b		tcd		                TCD
.38149e	28		plp		                PLP
.38149f	68		pla		                PLA             ; end setdp macro
.3814a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814a2	c2 10		rep #$10	                REP #$10        ; set X long
.3814a4	58		cli		                CLI                     ; Make sure interrupts can happen
.3814a5	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.3814a9	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.3814ab	c9 60		cmp #$60	                CMP #KB_CREDITS
.3814ad	d0 0a		bne $3814b9	                BNE check_buffer        ; No: check the key buffer
.3814af	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.3814b1	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3814b5	22 81 16 39	jsl $391681	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.3814b9	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.3814bb	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.3814bd	90 02		bcc $3814c1	                BCC read_buff           ; Yes: a key is present, read it
.3814bf	80 e4		bra $3814a5	                BRA get_wait            ; Otherwise, keep waiting
.3814c1	78		sei		read_buff       SEI                     ; Don't interrupt me!
.3814c2	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.3814c4	e8		inx		                INX                     ; And move to the next key
.3814c5	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814c7	f0 07		beq $3814d0	                BEQ reset_indexes       ; Yes: return to 0 position
.3814c9	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814cb	58		cli		                CLI
.3814cc	28		plp		done            PLP                     ; Restore status and interrupts
.3814cd	2b		pld		                PLD
.3814ce	fa		plx		                PLX
.3814cf	6b		rtl		                RTL
.3814d0	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814d2	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814d4	80 f6		bra $3814cc	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 3e 12 39	jsl $39123e	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 af 0f 39	jsl $390faf	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 84 0f 39	jsl $390f84	                JSL IINITFONTSET
.3904cd	22 3a 0b 39	jsl $390b3a	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 5f 5b 39	jsl $395b5f	                JSL UART_SELECT
.3904d8	22 cb 5b 39	jsl $395bcb	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 5f 5b 39	jsl $395b5f	                JSL UART_SELECT
.3904e3	22 cb 5b 39	jsl $395bcb	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 4e 6d	ldx #$6d4e	                LDX #<>greet_msg
.39050d	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.390511	22 85 0b 39	jsl $390b85	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 0f 16 39	jsl $39160f	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 68 44 39	jsl $394468	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588	f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c	f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590	f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594	f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598	f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2	f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6	f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa	f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0	ea		nop		CREDIT_LOCK     NOP
.3905b1	80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3					BOOTSDC
.3905b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf	90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1	22 dd 46 39	jsl $3946dd	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5	80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7	a2 2b 71	ldx #$712b	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca	80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc					BOOTIDE
.3905cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8	90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da	22 dd 46 39	jsl $3946dd	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de	82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1	a2 47 71	ldx #$7147	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4	80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6	a2 90 71	ldx #$7190	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3905ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5	22 39 67 39	jsl $396739	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9	90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb	22 dd 46 39	jsl $3946dd	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff	82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602	a2 6a 71	ldx #$716a	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605	22 7e 07 39	jsl $39077e	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609	a2 06 71	ldx #$7106	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c	22 7e 07 39	jsl $39077e	                JSL IPRINT
.390610	22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616	d0 03		bne $39061b	                BNE chk_r_lc
.390618	82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d	d0 03		bne $390622	                BNE chk_b_lc
.39061f	82 5c ff	brl $39057e	                BRL retry_boot
.390622	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624	f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626	c9 42		cmp #$42	                CMP #'B'
.390628	f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a	80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c					BOOT_MENU
.39062c	8b		phb		                PHB
.39062d	08		php		                PHP
.39062e	e2 20		sep #$20	                SEP #$20        ; set A short
.390630	c2 10		rep #$10	                REP #$10        ; set X long
.390632	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634	48		pha		                PHA
.390635	ab		plb		                PLB
.390636	a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.39063d	c2 10		rep #$10	                REP #$10        ; set X long
.39063f	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642	e2 20		sep #$20	                SEP #$20        ; set A short
.390644	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647	22 0f 16 39	jsl $39160f	                JSL ILOOP_MS            ; Wait ...
.39064b	88		dey		                DEY                     ; Count down the tenths of seconds
.39064c	f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390652	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654	f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658	f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c	f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660	f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664	f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668	d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c	28		plp		return          PLP
.39066d	ab		plb		                PLB
.39066e	6b		rtl		                RTL
>39066f	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4					IBREAK
.3906a4	48		pha		                PHA             ; begin setdp macro
.3906a5	08		php		                PHP
.3906a6	c2 20		rep #$20	                REP #$20        ; set A long
.3906a8	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab	5b		tcd		                TCD
.3906ac	28		plp		                PLP
.3906ad	68		pla		                PLA             ; end setdp macro
.3906ae	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af	8f 48 02 00	sta $000248	                STA CPUY
.3906b3	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4	8f 46 02 00	sta $000246	                STA CPUX
.3906b8	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9	8f 44 02 00	sta $000244	                STA CPUA
.3906bd	68		pla		                PLA
.3906be	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce	c2 20		rep #$20	                REP #$20        ; set A long
.3906d0	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1	8f 40 02 00	sta $000240	                STA CPUPC
.3906d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8	8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc	c2 20		rep #$20	                REP #$20        ; set A long
.3906de	3b		tsc		                TSA             ; Get the stack
.3906df	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6	1b		tcs		                TAS
.3906e7	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb					IREADY
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 39		lda #$39	                LDA #`ready_msg
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	a2 a7 71	ldx #$71a7	                LDX #<>ready_msg
.3906fa	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3906fe					IREADYWAIT
.3906fe	22 18 07 39	jsl $390718	                JSL IGETCHE
.390702	80 fa		bra $3906fe	                BRA IREADYWAIT
.390704	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705	db		stp		IRETURN         STP
.390706	08		php		ISETIN          PHP
.390707	e2 20		sep #$20	                SEP #$20        ; set A short
.390709	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d	28		plp		                PLP
.39070e	6b		rtl		                RTL
.39070f	08		php		ISETOUT         PHP
.390710	e2 20		sep #$20	                SEP #$20        ; set A short
.390712	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716	28		plp		                PLP
.390717	6b		rtl		                RTL
.390718	22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390720	6b		rtl		                RTL
.390721					IGETCHW
.390721	08		php		                PHP
.390722	e2 20		sep #$20	                SEP #$20        ; set A short
.390724	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390728	f0 17		beq $390741	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072a	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39072c	f0 09		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.39072e	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390730	f0 05		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390734	28		plp		                PLP
.390735	38		sec		                SEC                 ; And return carry set
.390736	6b		rtl		                RTL
.390737	22 5f 5b 39	jsl $395b5f	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073b	22 13 5c 39	jsl $395c13	                JSL UART_GETC       ; Get the charater from the COM port
.39073f	80 04		bra $390745	                BRA done
.390741	22 93 14 38	jsl $381493	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390745	28		plp		done            PLP
.390746	18		clc		                CLC                 ; Return carry clear for valid data
.390747	6b		rtl		                RTL
.390748					IGETCH
.390748	da		phx		                PHX
.390749	5a		phy		                PHY
.39074a	8b		phb		                PHB
.39074b	0b		phd		                PHD
.39074c	08		php		                PHP
.39074d	48		pha		                PHA             ; begin setdbr macro
.39074e	08		php		                PHP
.39074f	e2 20		sep #$20	                SEP #$20        ; set A short
.390751	a9 00		lda #$00	                LDA #0
.390753	48		pha		                PHA
.390754	ab		plb		                PLB
.390755	28		plp		                PLP
.390756	68		pla		                PLA             ; end setdbr macro
.390757	e2 20		sep #$20	                SEP #$20        ; set A short
.390759	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.39075c	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.39075e	f0 03		beq $390763	                BEQ getch_console       ; Yes: dispatch on the console
.390760	82 10 00	brl $390773	                BRL ret_nothing         ; Unhandled device: return 0
.390763					getch_console
.390763	c2 20		rep #$20	                REP #$20        ; set A long
.390765	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.390768	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076b	b0 06		bcs $390773	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.39076d	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390771	80 05		bra $390778	                BRA done                ; And return it
.390773					ret_nothing
.390773	c2 20		rep #$20	                REP #$20        ; set A long
.390775	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.390778	28		plp		done            PLP
.390779	2b		pld		                PLD
.39077a	ab		plb		                PLB
.39077b	7a		ply		                PLY
.39077c	fa		plx		                PLX
.39077d	6b		rtl		                RTL
.39077e	22 87 07 39	jsl $390787	IPRINT          JSL IPUTS
.390782	22 0f 09 39	jsl $39090f	                JSL IPRINTCR
.390786	6b		rtl		                RTL
.390787	48		pha		IPUTS           PHA
.390788	08		php		                PHP
.390789	e2 20		sep #$20	                SEP #$20        ; set A short
.39078b	c2 10		rep #$10	                REP #$10        ; set X long
.39078d	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390790	f0 08		beq $39079a	                BEQ iputs_done
.390792	22 9e 07 39	jsl $39079e	iputs2          JSL IPUTC
.390796	e8		inx		iputs3          INX
.390797	4c 8d 07	jmp $39078d	                JMP iputs1
.39079a	e8		inx		iputs_done      INX
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA
.39079d	6b		rtl		                RTL
.39079e					IPUTC
.39079e	da		phx		                PHX
.39079f	5a		phy		                PHY
.3907a0	0b		phd		                PHD
.3907a1	8b		phb		                PHB
.3907a2	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a3	48		pha		                PHA             ; begin setdp macro
.3907a4	08		php		                PHP
.3907a5	c2 20		rep #$20	                REP #$20        ; set A long
.3907a7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907aa	5b		tcd		                TCD
.3907ab	28		plp		                PLP
.3907ac	68		pla		                PLA             ; end setdp macro
.3907ad	48		pha		                PHA             ; begin setdbr macro
.3907ae	08		php		                PHP
.3907af	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b1	a9 00		lda #$00	                LDA #0
.3907b3	48		pha		                PHA
.3907b4	ab		plb		                PLB
.3907b5	28		plp		                PLP
.3907b6	68		pla		                PLA             ; end setdbr macro
.3907b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b9	c2 10		rep #$10	                REP #$10        ; set X long
.3907bb	48		pha		                PHA                 ; Save the character to print
.3907bc	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c0	f0 16		beq $3907d8	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c4	f0 07		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c8	f0 03		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	68		pla		                PLA                 ; Otherwise, just exit
.3907cb	80 57		bra $390824	                BRA done
.3907cd	22 5f 5b 39	jsl $395b5f	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d1	68		pla		                PLA                 ; Recover the character to send
.3907d2	22 34 5c 39	jsl $395c34	                JSL UART_PUTC       ; Send the character
.3907d6	80 4c		bra $390824	                BRA done
.3907d8	68		pla		putc_screen     PLA                 ; Get the character to print
.3907d9	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907db	f0 69		beq $390846	                BEQ go_down
.3907dd	c9 20		cmp #$20	                CMP #$20
.3907df	90 19		bcc $3907fa	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e1	c9 7f		cmp #$7f	                CMP #$7F
.3907e3	f0 45		beq $39082a	                BEQ do_del
.3907e5	b0 02		bcs $3907e9	                BCS check_A0        ; [$20..$7E]: print it
.3907e7	80 31		bra $39081a	                BRA printc
.3907e9	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907eb	90 02		bcc $3907ef	                BCC check_ctrl1
.3907ed	80 2b		bra $39081a	                BRA printc          ; [$A0..$FF]: print it
.3907ef	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f1	f0 53		beq $390846	                BEQ go_down         ; ... move the cursor down one row
.3907f3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f5	f0 61		beq $390858	                BEQ go_left         ; ... move the cursor left one column
.3907f7	4c 24 08	jmp $390824	                JMP done
.3907fa	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907fc	f0 69		beq $390867	                BEQ do_TAB          ; ... move to the next TAB stop
.3907fe	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390800	f0 34		beq $390836	                BEQ backspace       ; ... move the cursor back and replace with a space
.390802	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390804	f0 3a		beq $390840	                BEQ do_cr           ; ... move cursor down and to the first column
.390806	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390808	f0 42		beq $39084c	                BEQ go_up           ; ... move the cursor up one row
.39080a	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39080c	f0 44		beq $390852	                BEQ go_right        ; ... move the cursor right one column
.39080e	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390810	c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390812	f0 4a		beq $39085e	                BEQ go_sol          ; ... move the cursor to the start of the line
.390814	c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390816	f0 76		beq $39088e	                BEQ go_eol          ; ... move the cursor to the end of the line
.390818	f0 16		beq $390830	                BEQ do_ins          ; ... insert a space
.39081a	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.39081c	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081e	87 1f		sta [$1f]	                STA [COLORPOS]
.390820	22 6f 09 39	jsl $39096f	                JSL ICSRRIGHT       ; And advance the cursor
.390824	28		plp		done            PLP
.390825	ab		plb		                PLB
.390826	2b		pld		                PLD
.390827	7a		ply		                PLY
.390828	fa		plx		                PLX
.390829	6b		rtl		                RTL
.39082a	22 bb 08 39	jsl $3908bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082e	80 f4		bra $390824	                BRA done
.390830	22 df 08 39	jsl $3908df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390834	80 ee		bra $390824	                BRA done
.390836	22 a2 09 39	jsl $3909a2	backspace       JSL ICSRLEFT
.39083a	22 bb 08 39	jsl $3908bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083e	80 e4		bra $390824	                BRA done
.390840	22 0f 09 39	jsl $39090f	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390844	80 de		bra $390824	                BRA done
.390846	22 ee 09 39	jsl $3909ee	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39084a	80 d8		bra $390824	                BRA done
.39084c	22 c8 09 39	jsl $3909c8	go_up           JSL ICSRUP          ; Move the cursor up one line
.390850	80 d2		bra $390824	                BRA done
.390852	22 6f 09 39	jsl $39096f	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390856	80 cc		bra $390824	                BRA done
.390858	22 a2 09 39	jsl $3909a2	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39085c	80 c6		bra $390824	                BRA done
.39085e					go_sol
.39085e	c2 20		rep #$20	                REP #$20        ; set A long
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a4 1c		ldy $1c		                LDY CURSORY
.390865	80 21		bra $390888	                BRA do_locate
.390867					do_TAB
.390867	c2 20		rep #$20	                REP #$20        ; set A long
.390869	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39086b	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39086e	18		clc		                CLC
.39086f	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390872	aa		tax		                TAX
.390873	a4 1c		ldy $1c		                LDY CURSORY
.390875	e2 20		sep #$20	                SEP #$20        ; set A short
.390877	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390879	90 04		bcc $39087f	                BCC check_row       ; Yes: check the row
.39087b	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39087e	c8		iny		                INY                 ; ... and the next row
.39087f	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390881	90 05		bcc $390888	                BCC do_locate       ; Yes: reposition the cursor
.390883	22 5f 0a 39	jsl $390a5f	                JSL ISCROLLUP       ; No: scroll the screen
.390887	88		dey		                DEY                 ; And set the row to the last one
.390888	22 13 0a 39	jsl $390a13	do_locate       JSL ILOCATE         ; Set the cursor position
.39088c	80 96		bra $390824	                BRA done
.39088e	a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390890	ca		dex		                DEX
.390891	a4 1c		ldy $1c		                LDY CURSORY
.390893	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.390897	e2 20		sep #$20	                SEP #$20        ; set A short
.390899	a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.39089b	c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.39089d	d0 0b		bne $3908aa	                BNE eol_done        ; No: exit the loop
.39089f	22 a2 09 39	jsl $3909a2	                JSL ICSRLEFT        ; Yes: move to the left
.3908a3	a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908a5	d0 f2		bne $390899	                BNE eol_loop        ; No: try again
.3908a7	82 7a ff	brl $390824	                BRL done            ; Yes: we're done
.3908aa	a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908ac	e8		inx		                INX
.3908ad	e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908af	d0 03		bne $3908b4	                BNE eol_right
.3908b1	82 70 ff	brl $390824	                BRL done            ; Yes: we're done
.3908b4	22 6f 09 39	jsl $39096f	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908b8	82 69 ff	brl $390824	                BRL done
.3908bb	da		phx		SCRSHIFTLL      PHX
.3908bc	5a		phy		                PHY
.3908bd	48		pha		                PHA
.3908be	0b		phd		                PHD
.3908bf	08		php		                PHP
.3908c0	48		pha		                PHA             ; begin setdp macro
.3908c1	08		php		                PHP
.3908c2	c2 20		rep #$20	                REP #$20        ; set A long
.3908c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908c7	5b		tcd		                TCD
.3908c8	28		plp		                PLP
.3908c9	68		pla		                PLA             ; end setdp macro
.3908ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908ce	a8		tay		                TAY                 ; Set it as the destination
.3908cf	aa		tax		                TAX
.3908d0	e8		inx		                INX                 ; And set the next cell as the source
.3908d1	38		sec		                SEC                 ; Calculate the length of the block to move
.3908d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908d4	e5 1a		sbc $1a		                SBC CURSORX
.3908d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908d9	28		plp		                PLP
.3908da	2b		pld		                PLD
.3908db	68		pla		                PLA
.3908dc	7a		ply		                PLY
.3908dd	fa		plx		                PLX
.3908de	6b		rtl		                RTL
.3908df	da		phx		SCRSHIFTLR      PHX
.3908e0	48		pha		                PHA
.3908e1	0b		phd		                PHD
.3908e2	08		php		                PHP
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ef	a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908f1	1a		inc a		                INC A
.3908f2	c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908f4	b0 13		bcs $390909	                BGE done            ; Yes: just skip the whole thing
.3908f6	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908f8	aa		tax		                TAX                 ; Make it the source
.3908f9	1a		inc a		                INC A               ; Point to the next byte
.3908fa	a8		tay		                TAY                 ; Make it the destination
.3908fb	38		sec		                SEC                 ; Calculate the length of the block to move
.3908fc	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908fe	e5 1a		sbc $1a		                SBC CURSORX
.390900	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390903	e2 20		sep #$20	                SEP #$20        ; set A short
.390905	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390907	87 17		sta [$17]	                STA [CURSORPOS]
.390909	28		plp		done            PLP
.39090a	2b		pld		                PLD
.39090b	68		pla		                PLA
.39090c	fa		plx		                PLX
.39090d	6b		rtl		                RTL
.39090e					IPUTB
.39090e	6b		rtl		                RTL
.39090f					IPRINTCR
.39090f	da		phx		                PHX
.390910	5a		phy		                PHY
.390911	8b		phb		                PHB
.390912	0b		phd		                PHD
.390913	08		php		                PHP
.390914	48		pha		                PHA             ; begin setdbr macro
.390915	08		php		                PHP
.390916	e2 20		sep #$20	                SEP #$20        ; set A short
.390918	a9 00		lda #$00	                LDA #0
.39091a	48		pha		                PHA
.39091b	ab		plb		                PLB
.39091c	28		plp		                PLP
.39091d	68		pla		                PLA             ; end setdbr macro
.39091e	48		pha		                PHA             ; begin setdp macro
.39091f	08		php		                PHP
.390920	c2 20		rep #$20	                REP #$20        ; set A long
.390922	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390925	5b		tcd		                TCD
.390926	28		plp		                PLP
.390927	68		pla		                PLA             ; end setdp macro
.390928	e2 20		sep #$20	                SEP #$20        ; set A short
.39092a	c2 10		rep #$10	                REP #$10        ; set X long
.39092c	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390930	f0 1c		beq $39094e	                BEQ scr_printcr
.390932	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390934	f0 06		beq $39093c	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390936	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390938	f0 02		beq $39093c	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39093a	80 1c		bra $390958	                BRA done
.39093c	22 5f 5b 39	jsl $395b5f	uart_printcr    JSL UART_SELECT
.390940	a9 0d		lda #$0d	                LDA #CHAR_CR
.390942	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390946	a9 0a		lda #$0a	                LDA #CHAR_LF
.390948	22 9e 07 39	jsl $39079e	                JSL IPUTC
.39094c	80 0a		bra $390958	                BRA done
.39094e	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390951	a4 1c		ldy $1c		                LDY CURSORY
.390953	c8		iny		                INY
.390954	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.390958	28		plp		done            PLP
.390959	2b		pld		                PLD
.39095a	ab		plb		                PLB
.39095b	7a		ply		                PLY
.39095c	fa		plx		                PLX
.39095d	6b		rtl		                RTL
.39095e	da		phx		ICSRHOME        PHX
.39095f	5a		phy		                PHY
.390960	08		php		                PHP
.390961	a2 00 00	ldx #$0000	                LDX #0
.390964	a0 00 00	ldy #$0000	                LDY #0
.390967	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.39096b	28		plp		                PLP
.39096c	7a		ply		                PLY
.39096d	fa		plx		                PLX
.39096e	6b		rtl		                RTL
.39096f	da		phx		ICSRRIGHT       PHX
.390970	5a		phy		                PHY
.390971	48		pha		                PHA
.390972	0b		phd		                PHD
.390973	08		php		                PHP
.390974	c2 20		rep #$20	                REP #$20        ; set A long
.390976	c2 10		rep #$10	                REP #$10        ; set X long
.390978	48		pha		                PHA             ; begin setdp macro
.390979	08		php		                PHP
.39097a	c2 20		rep #$20	                REP #$20        ; set A long
.39097c	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39097f	5b		tcd		                TCD
.390980	28		plp		                PLP
.390981	68		pla		                PLA             ; end setdp macro
.390982	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390984	e8		inx		                INX
.390985	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390987	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390989	90 0d		bcc $390998	                BCC icsrright_nowrap  ; No: just set the position
.39098b	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39098e	c8		iny		                INY                   ; And move to the next row
.39098f	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390991	90 05		bcc $390998	                BCC icsrright_nowrap  ; No: just set the position
.390993	88		dey		                DEY                   ; Yes: lock to the last row
.390994	22 5f 0a 39	jsl $390a5f	                JSL ISCROLLUP         ; But scroll the screen up
.390998					icsrright_nowrap
.390998	22 13 0a 39	jsl $390a13	                JSL ILOCATE           ; Set the cursor position
.39099c	28		plp		                PLP
.39099d	2b		pld		                PLD
.39099e	68		pla		                PLA
.39099f	7a		ply		                PLY
.3909a0	fa		plx		                PLX
.3909a1	6b		rtl		                RTL
.3909a2					ICSRLEFT
.3909a2	da		phx		                PHX
.3909a3	5a		phy		                PHY
.3909a4	48		pha		                PHA
.3909a5	0b		phd		                PHD
.3909a6	08		php		                PHP
.3909a7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909a9	48		pha		                PHA             ; begin setdp macro
.3909aa	08		php		                PHP
.3909ab	c2 20		rep #$20	                REP #$20        ; set A long
.3909ad	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909b0	5b		tcd		                TCD
.3909b1	28		plp		                PLP
.3909b2	68		pla		                PLA             ; end setdp macro
.3909b3	a5 1a		lda $1a		                LDA CURSORX
.3909b5	f0 0b		beq $3909c2	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909b7	a6 1a		ldx $1a		                LDX CURSORX
.3909b9	ca		dex		                DEX
.3909ba	86 1a		stx $1a		                STX CURSORX
.3909bc	a4 1c		ldy $1c		                LDY CURSORY
.3909be	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.3909c2					icsrleft_done_already_zero
.3909c2	28		plp		                PLP
.3909c3	2b		pld		                PLD
.3909c4	68		pla		                PLA
.3909c5	7a		ply		                PLY
.3909c6	fa		plx		                PLX
.3909c7	6b		rtl		                RTL
.3909c8					ICSRUP
.3909c8	da		phx		                PHX
.3909c9	5a		phy		                PHY
.3909ca	48		pha		                PHA
.3909cb	0b		phd		                PHD
.3909cc	08		php		                PHP
.3909cd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909cf	48		pha		                PHA             ; begin setdp macro
.3909d0	08		php		                PHP
.3909d1	c2 20		rep #$20	                REP #$20        ; set A long
.3909d3	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909d6	5b		tcd		                TCD
.3909d7	28		plp		                PLP
.3909d8	68		pla		                PLA             ; end setdp macro
.3909d9	a5 1c		lda $1c		                LDA CURSORY
.3909db	f0 0b		beq $3909e8	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909dd	a4 1c		ldy $1c		                LDY CURSORY
.3909df	88		dey		                DEY
.3909e0	84 1c		sty $1c		                STY CURSORY
.3909e2	a6 1a		ldx $1a		                LDX CURSORX
.3909e4	22 13 0a 39	jsl $390a13	                JSL ILOCATE
.3909e8					isrup_done_already_zero
.3909e8	28		plp		                PLP
.3909e9	2b		pld		                PLD
.3909ea	68		pla		                PLA
.3909eb	7a		ply		                PLY
.3909ec	fa		plx		                PLX
.3909ed	6b		rtl		                RTL
.3909ee	da		phx		ICSRDOWN        PHX
.3909ef	5a		phy		                PHY
.3909f0	0b		phd		                PHD
.3909f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909f3	48		pha		                PHA             ; begin setdp macro
.3909f4	08		php		                PHP
.3909f5	c2 20		rep #$20	                REP #$20        ; set A long
.3909f7	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909fa	5b		tcd		                TCD
.3909fb	28		plp		                PLP
.3909fc	68		pla		                PLA             ; end setdp macro
.3909fd	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3909ff	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a01	c8		iny		                INY
.390a02	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a04	90 05		bcc $390a0b	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a06	88		dey		                DEY                         ; Yes: go back to the last row
.390a07	22 5f 0a 39	jsl $390a5f	                JSL ISCROLLUP               ; But scroll the screen up
.390a0b					icsrdown_noscroll
.390a0b	22 13 0a 39	jsl $390a13	                JSL ILOCATE                 ; And set the cursor position
.390a0f	2b		pld		                PLD
.390a10	7a		ply		                PLY
.390a11	fa		plx		                PLX
.390a12	6b		rtl		                RTL
.390a13	48		pha		ILOCATE         PHA
.390a14	0b		phd		                PHD
.390a15	08		php		                PHP
.390a16	48		pha		                PHA             ; begin setdp macro
.390a17	08		php		                PHP
.390a18	c2 20		rep #$20	                REP #$20        ; set A long
.390a1a	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a1d	5b		tcd		                TCD
.390a1e	28		plp		                PLP
.390a1f	68		pla		                PLA             ; end setdp macro
.390a20	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a22					ilocate_scroll
.390a22	c4 13		cpy $13		                CPY LINES_VISIBLE
.390a24	90 07		bcc $390a2d	                BCC ilocate_scrolldone
.390a26	22 5f 0a 39	jsl $390a5f	                JSL ISCROLLUP
.390a2a	88		dey		                DEY
.390a2b	80 f5		bra $390a22	                BRA ilocate_scroll
.390a2d					ilocate_scrolldone
.390a2d	86 1a		stx $1a		                STX CURSORX
.390a2f	84 1c		sty $1c		                STY CURSORY
.390a31	a5 0c		lda $0c		                LDA SCREENBEGIN
.390a33					ilocate_row
.390a33	c0 00 00	cpy #$0000	                CPY #$0
.390a36	f0 08		beq $390a40	                BEQ ilocate_right
.390a38	18		clc		ilocate_down    CLC
.390a39	65 11		adc $11		                ADC COLS_PER_LINE
.390a3b	88		dey		                DEY
.390a3c	f0 02		beq $390a40	                BEQ ilocate_right
.390a3e	80 f8		bra $390a38	                BRA ilocate_down
.390a40	18		clc		ilocate_right   CLC
.390a41	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a43	85 17		sta $17		                STA CURSORPOS
.390a45	a4 1c		ldy $1c		                LDY CURSORY
.390a47	98		tya		                TYA
.390a48	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a4c	8a		txa		                TXA
.390a4d	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a51	c2 20		rep #$20	                REP #$20        ; set A long
.390a53	18		clc		                CLC
.390a54	a5 17		lda $17		                LDA CURSORPOS
.390a56	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a59	85 1f		sta $1f		                STA COLORPOS
.390a5b	28		plp		ilocate_done    PLP
.390a5c	2b		pld		                PLD
.390a5d	68		pla		                PLA
.390a5e	6b		rtl		                RTL
.390a5f					ISCROLLUP
.390a5f	48		pha		                PHA
.390a60	da		phx		                PHX
.390a61	5a		phy		                PHY
.390a62	8b		phb		                PHB
.390a63	0b		phd		                PHD
.390a64	08		php		                PHP
.390a65	48		pha		                PHA             ; begin setdp macro
.390a66	08		php		                PHP
.390a67	c2 20		rep #$20	                REP #$20        ; set A long
.390a69	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a6c	5b		tcd		                TCD
.390a6d	28		plp		                PLP
.390a6e	68		pla		                PLA             ; end setdp macro
.390a6f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a71	a5 11		lda $11		                LDA COLS_PER_LINE
.390a73	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a77	a5 13		lda $13		                LDA LINES_VISIBLE
.390a79	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a7d	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a81	85 00		sta $00		                STA TMPPTR1
.390a83	18		clc		                CLC
.390a84	a9 00 a0	lda #$a000	                LDA #$A000
.390a87	a8		tay		                TAY
.390a88	65 11		adc $11		                ADC COLS_PER_LINE
.390a8a	aa		tax		                TAX
.390a8b	a5 00		lda $00		                LDA TMPPTR1
.390a8d	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a90	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a92	18		clc		                CLC
.390a93	a9 00 c0	lda #$c000	                LDA #$C000
.390a96	a8		tay		                TAY
.390a97	65 11		adc $11		                ADC COLS_PER_LINE
.390a99	aa		tax		                TAX
.390a9a	a5 00		lda $00		                LDA TMPPTR1
.390a9c	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a9f	a5 00		lda $00		                LDA TMPPTR1
.390aa1	48		pha		                PHA
.390aa2	18		clc		                CLC
.390aa3	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aa6	85 00		sta $00		                STA TMPPTR1
.390aa8	a0 00 00	ldy #$0000	                LDY #0
.390aab	a9 20 00	lda #$0020	                LDA #' '
.390aae	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ab0	c8		iny		                INY
.390ab1	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ab3	d0 f9		bne $390aae	                BNE clr_text
.390ab5	68		pla		                PLA
.390ab6	18		clc		                CLC
.390ab7	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390aba	85 00		sta $00		                STA TMPPTR1
.390abc	a0 00 00	ldy #$0000	                LDY #0
.390abf	a5 1e		lda $1e		                LDA CURCOLOR
.390ac1	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390ac3	c8		iny		                INY
.390ac4	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ac6	d0 f9		bne $390ac1	                BNE clr_color
.390ac8	28		plp		                PLP
.390ac9	2b		pld		                PLD
.390aca	ab		plb		                PLB
.390acb	7a		ply		                PLY
.390acc	fa		plx		                PLX
.390acd	68		pla		                PLA
.390ace	6b		rtl		                RTL
.390acf	08		php		IPRINTH         PHP
.390ad0	48		pha		                PHA
.390ad1					iprinth1
.390ad1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ad3	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390ad6	4a		lsr a		                LSR
.390ad7	4a		lsr a		                LSR
.390ad8	4a		lsr a		                LSR
.390ad9	4a		lsr a		                LSR
.390ada	22 29 0b 39	jsl $390b29	                JSL iprint_digit
.390ade	bd 00 00	lda $0000,x	                LDA #0,b,x
.390ae1	22 29 0b 39	jsl $390b29	                JSL iprint_digit
.390ae5	ca		dex		                DEX
.390ae6	88		dey		                DEY
.390ae7	d0 e8		bne $390ad1	                BNE iprinth1
.390ae9	68		pla		                PLA
.390aea	28		plp		                PLP
.390aeb	6b		rtl		                RTL
.390aec					IPRINTAH
.390aec	48		pha		                PHA
.390aed	08		php		                PHP
.390aee	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390af2	08		php		                PHP                   ; Get the processor status into A
.390af3	e2 20		sep #$20	                SEP #$20        ; set A short
.390af5	c2 10		rep #$10	                REP #$10        ; set X long
.390af7	68		pla		                PLA
.390af8	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390afa	c9 20		cmp #$20	                CMP #%00100000
.390afc	f0 14		beq $390b12	                BEQ eight_bit
.390afe	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b02	4a		lsr a		                LSR A
.390b03	4a		lsr a		                LSR A
.390b04	4a		lsr a		                LSR A
.390b05	4a		lsr a		                LSR A
.390b06	22 29 0b 39	jsl $390b29	                JSL iprint_digit      ; And print it
.390b0a	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b0e	22 29 0b 39	jsl $390b29	                JSL iprint_digit      ; And print it
.390b12	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b16	4a		lsr a		                LSR A
.390b17	4a		lsr a		                LSR A
.390b18	4a		lsr a		                LSR A
.390b19	4a		lsr a		                LSR A
.390b1a	22 29 0b 39	jsl $390b29	                JSL iprint_digit      ; And print it
.390b1e	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b22	22 29 0b 39	jsl $390b29	                JSL iprint_digit      ; And print it
.390b26	28		plp		                PLP
.390b27	68		pla		                PLA
.390b28	6b		rtl		                RTL
.390b29	da		phx		iprint_digit    PHX
.390b2a	c2 20		rep #$20	                REP #$20        ; set A long
.390b2c	29 0f 00	and #$000f	                AND #$0F
.390b2f	aa		tax		                TAX
.390b30	bf bb 71 39	lda $3971bb,x	                LDA hex_digits,X
.390b34	22 9e 07 39	jsl $39079e	                JSL IPUTC       ; Print the digit
.390b38	fa		plx		                PLX
.390b39	6b		rtl		                RTL
.390b3a	48		pha		ICLRSCREEN	    PHA
.390b3b	da		phx		                PHX
.390b3c	08		php		                PHP
.390b3d	e2 20		sep #$20	                SEP #$20        ; set A short
.390b3f	c2 10		rep #$10	                REP #$10        ; set X long
.390b41	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b44	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b46	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b4a	e8		inx		                inx
.390b4b	e0 00 20	cpx #$2000	                cpx #$2000
.390b4e	d0 f6		bne $390b46	                bne iclearloop0
.390b50	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b53	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b57	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b5b	e8		inx		                inx
.390b5c	e0 00 20	cpx #$2000	                cpx #$2000
.390b5f	d0 f6		bne $390b57	                bne iclearloop1
.390b61	28		plp		                PLP
.390b62	fa		plx		                PLX
.390b63	68		pla		                PLA
.390b64	6b		rtl		                RTL
.390b65					COPYBYTES42
.390b65	08		php		                PHP
.390b66	0b		phd		                PHD
.390b67	48		pha		                PHA             ; begin setdp macro
.390b68	08		php		                PHP
.390b69	c2 20		rep #$20	                REP #$20        ; set A long
.390b6b	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b6e	5b		tcd		                TCD
.390b6f	28		plp		                PLP
.390b70	68		pla		                PLA             ; end setdp macro
.390b71	e2 20		sep #$20	                SEP #$20        ; set A short
.390b73	c2 10		rep #$10	                REP #$10        ; set X long
.390b75	a0 00 00	ldy #$0000	                LDY #0
.390b78	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b7a	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b7c	c8		iny		                INY
.390b7d	c0 2a 00	cpy #$002a	                CPY #42
.390b80	d0 f6		bne $390b78	                BNE copy_loop
.390b82	2b		pld		                PLD
.390b83	28		plp		                PLP
.390b84	60		rts		                RTS
.390b85					ICOLORFLAG
.390b85	48		pha		                PHA
.390b86	da		phx		                PHX
.390b87	5a		phy		                PHY
.390b88	08		php		                PHP
.390b89	8b		phb		                PHB
.390b8a	0b		phd		                PHD
.390b8b	48		pha		                PHA             ; begin setdp macro
.390b8c	08		php		                PHP
.390b8d	c2 20		rep #$20	                REP #$20        ; set A long
.390b8f	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b92	5b		tcd		                TCD
.390b93	28		plp		                PLP
.390b94	68		pla		                PLA             ; end setdp macro
.390b95	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b97	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390b9a	85 04		sta $04		                STA TMPPTR2
.390b9c	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390b9f	85 06		sta $06		                STA TMPPTR2+2
.390ba1	a9 92 6e	lda #$6e92	                LDA #<>greet_clr_line1
.390ba4	85 00		sta $00		                STA TMPPTR1
.390ba6	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390ba9	85 02		sta $02		                STA TMPPTR1+2
.390bab	20 65 0b	jsr $390b65	                JSR COPYBYTES42
.390bae	18		clc		                CLC
.390baf	a5 04		lda $04		                LDA TMPPTR2
.390bb1	65 11		adc $11		                ADC COLS_PER_LINE
.390bb3	85 04		sta $04		                STA TMPPTR2
.390bb5	a9 bc 6e	lda #$6ebc	                LDA #<>greet_clr_line2
.390bb8	85 00		sta $00		                STA TMPPTR1
.390bba	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bbd	85 02		sta $02		                STA TMPPTR1+2
.390bbf	20 65 0b	jsr $390b65	                JSR COPYBYTES42
.390bc2	18		clc		                CLC
.390bc3	a5 04		lda $04		                LDA TMPPTR2
.390bc5	65 11		adc $11		                ADC COLS_PER_LINE
.390bc7	85 04		sta $04		                STA TMPPTR2
.390bc9	a9 e6 6e	lda #$6ee6	                LDA #<>greet_clr_line3
.390bcc	85 00		sta $00		                STA TMPPTR1
.390bce	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bd1	85 02		sta $02		                STA TMPPTR1+2
.390bd3	20 65 0b	jsr $390b65	                JSR COPYBYTES42
.390bd6	18		clc		                CLC
.390bd7	a5 04		lda $04		                LDA TMPPTR2
.390bd9	65 11		adc $11		                ADC COLS_PER_LINE
.390bdb	85 04		sta $04		                STA TMPPTR2
.390bdd	a9 10 6f	lda #$6f10	                LDA #<>greet_clr_line4
.390be0	85 00		sta $00		                STA TMPPTR1
.390be2	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390be5	85 02		sta $02		                STA TMPPTR1+2
.390be7	20 65 0b	jsr $390b65	                JSR COPYBYTES42
.390bea	18		clc		                CLC
.390beb	a5 04		lda $04		                LDA TMPPTR2
.390bed	65 11		adc $11		                ADC COLS_PER_LINE
.390bef	85 04		sta $04		                STA TMPPTR2
.390bf1	a9 3a 6f	lda #$6f3a	                LDA #<>greet_clr_line5
.390bf4	85 00		sta $00		                STA TMPPTR1
.390bf6	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390bf9	85 02		sta $02		                STA TMPPTR1+2
.390bfb	20 65 0b	jsr $390b65	                JSR COPYBYTES42
.390bfe	2b		pld		                PLD
.390bff	ab		plb		                PLB
.390c00	28		plp		                PLP
.390c01	7a		ply		                PLY
.390c02	fa		plx		                PLX
.390c03	68		pla		                PLA
.390c04	6b		rtl		                RTL
.390c05	0b		phd		IINITCHLUT		  PHD
.390c06	08		php		                PHP
.390c07	48		pha		                PHA
.390c08	da		phx		                PHX
.390c09	e2 20		sep #$20	                SEP #$20        ; set A short
.390c0b	e2 10		sep #$10	                SEP #$10        ; set X short
.390c0d	a2 00		ldx #$00					        LDX	#$00
.390c0f	bf 64 6f 39	lda $396f64,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c13	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c17	e8		inx		                inx
.390c18	e0 40		cpx #$40	                cpx #$40
.390c1a	d0 f3		bne $390c0f	                bne lutinitloop0
.390c1c	a2 00		ldx #$00	                LDX	#$00
.390c1e	bf a4 6f 39	lda $396fa4,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c22	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c26	e8		inx		                INX
.390c27	e0 40		cpx #$40	                CPX #$40
.390c29	d0 f3		bne $390c1e	                bne lutinitloop1
.390c2b	c2 20		rep #$20	                REP #$20        ; set A long
.390c2d	c2 10		rep #$10	                REP #$10        ; set X long
.390c2f	fa		plx		                PLX
.390c30	68		pla		                PLA
.390c31	28		plp		                PLP
.390c32	2b		pld		                PLD
.390c33	6b		rtl		                RTL
.390c34					IINITGAMMATABLE
.390c34	e2 20		sep #$20	                SEP #$20        ; set A short
.390c36	c2 10		rep #$10	                REP #$10        ; set X long
.390c38	a2 00 00	ldx #$0000	                ldx #$0000
.390c3b	bf 00 76 39	lda $397600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c3f	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c43	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c47	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c4b	e8		inx		                inx
.390c4c	e0 00 01	cpx #$0100	                cpx #$0100
.390c4f	d0 ea		bne $390c3b	                bne initgammaloop
.390c51	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c53	6b		rtl		                RTL
.390c54	48		pha		IINITALLLUT     PHA
.390c55	da		phx		                PHX
.390c56	a2 00 00	ldx #$0000	                LDX #$0000
.390c59	e2 20		sep #$20	                SEP #$20        ; set A short
.390c5b	a9 00		lda #$00	                LDA #$00
.390c5d	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c5f					iinit_lut_loop
.390c5f	86 02		stx $02		                STX $02
.390c61	a6 0a		ldx $0a		                LDX $0A
.390c63	bf 00 75 39	lda $397500,x	                LDA GAMMA_2_2_Tbl, x
.390c67	49 55		eor #$55	                EOR  #$55
.390c69	a6 02		ldx $02		                LDX $02
.390c6b	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c6f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c73	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c77	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c7b	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c7f	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c83	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c87	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c8b	e8		inx		                inx
.390c8c	86 02		stx $02		                STX $02
.390c8e	a6 0a		ldx $0a		                LDX $0A
.390c90	bf 00 77 39	lda $397700,x	                LDA RANDOM_LUT_Tbl, x
.390c94	a6 02		ldx $02		                LDX $02
.390c96	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c9a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c9e	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ca2	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ca6	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390caa	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cae	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cb2	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cb6	e8		inx		                inx
.390cb7	86 02		stx $02		                STX $02
.390cb9	a6 0a		ldx $0a		                LDX $0A
.390cbb	bf 00 76 39	lda $397600,x	                LDA GAMMA_1_8_Tbl, x
.390cbf	49 aa		eor #$aa	                EOR  #$AA
.390cc1	a6 02		ldx $02		                LDX $02
.390cc3	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cc7	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ccb	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ccf	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cd3	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cd7	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cdb	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cdf	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ce3	e8		inx		                inx
.390ce4	a9 ff		lda #$ff	                LDA #$FF
.390ce6	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cea	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cee	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cf2	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cf6	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cfa	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cfe	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d02	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d06	e6 0a		inc $0a		                inc $0A
.390d08	e8		inx		                inx
.390d09	e0 00 04	cpx #$0400	                cpx #$0400
.390d0c	f0 03		beq $390d11	                beq iinit_lut_exit
.390d0e	82 4e ff	brl $390c5f	                brl iinit_lut_loop
.390d11					iinit_lut_exit
.390d11	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d13	fa		plx		                PLX
.390d14	68		pla		                PLA
.390d15	6b		rtl		                RTL
.390d16	48		pha		IINITVKYTXTMODE PHA
.390d17	08		php		                PHP
.390d18	c2 20		rep #$20	                REP #$20        ; set A long
.390d1a	a9 00 00	lda #$0000	                LDA #0
.390d1d	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d21	a9 01 01	lda #$0101	                LDA #$101
.390d24	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d28					INITVICKYMODE
.390d28	c2 20		rep #$20	                REP #$20        ; set A long
.390d2a	a9 01 00	lda #$0001	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d2d	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d31					INITVICKYBORDER
.390d31	e2 20		sep #$20	                SEP #$20        ; set A short
.390d33	a9 20		lda #$20	                LDA #$20
.390d35	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d39	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d3d	a9 00		lda #$00	                LDA #$00
.390d3f	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d43	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d45	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d49	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d4b	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d4f	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d53	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d55	22 5c 0d 39	jsl $390d5c	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d59	28		plp		                PLP
.390d5a	68		pla		                PLA
.390d5b	6b		rtl		                RTL
.390d5c					ISETSIZES
.390d5c	48		pha		                PHA
.390d5d	da		phx		                PHX
.390d5e	5a		phy		                PHY
.390d5f	8b		phb		                PHB
.390d60	0b		phd		                PHD
.390d61	08		php		                PHP
.390d62	48		pha		                PHA             ; begin setdp macro
.390d63	08		php		                PHP
.390d64	c2 20		rep #$20	                REP #$20        ; set A long
.390d66	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d69	5b		tcd		                TCD
.390d6a	28		plp		                PLP
.390d6b	68		pla		                PLA             ; end setdp macro
.390d6c	48		pha		                PHA             ; begin setdbr macro
.390d6d	08		php		                PHP
.390d6e	e2 20		sep #$20	                SEP #$20        ; set A short
.390d70	a9 00		lda #$00	                LDA #0
.390d72	48		pha		                PHA
.390d73	ab		plb		                PLB
.390d74	28		plp		                PLP
.390d75	68		pla		                PLA             ; end setdbr macro
.390d76	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d78	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d7c	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d7e	0a		asl a		                ASL A
.390d7f	aa		tax		                TAX                         ; Index to the col/line count in X
.390d80	c2 20		rep #$20	                REP #$20        ; set A long
.390d82	bf ff 0d 39	lda $390dff,x	                LDA cols_by_res,X           ; Get the number of columns
.390d86	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390d88	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390d8a	bf 07 0e 39	lda $390e07,x	                LDA lines_by_res,X          ; Get the number of lines
.390d8e	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390d90	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390d92	e2 20		sep #$20	                SEP #$20        ; set A short
.390d94	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390d98	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390d9a	f0 5c		beq $390df8	                BEQ done                    ; No border... the sizes are correct now
.390d9c	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390da0	29 3f		and #$3f	                AND #$3F
.390da2	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390da4	d0 04		bne $390daa	                BNE frac_width
.390da6	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390da7	4a		lsr a		                LSR A
.390da8	80 03		bra $390dad	                BRA store_width
.390daa	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dab	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dac	1a		inc a		                INC A
.390dad	85 00		sta $00		store_width     STA TMPPTR1
.390daf	64 01		stz $01		                STZ TMPPTR1+1
.390db1	e2 20		sep #$20	                SEP #$20        ; set A short
.390db3	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390db7	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390db9	f0 04		beq $390dbf	                BEQ adjust_width            ; No... just adjust the width of the screen
.390dbb	c2 20		rep #$20	                REP #$20        ; set A long
.390dbd	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390dbf					adjust_width
.390dbf	c2 20		rep #$20	                REP #$20        ; set A long
.390dc1	38		sec		                SEC
.390dc2	a5 11		lda $11		                LDA COLS_PER_LINE
.390dc4	e5 00		sbc $00		                SBC TMPPTR1
.390dc6	85 0f		sta $0f		                STA COLS_VISIBLE
.390dc8	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390dcc	29 3f 00	and #$003f	                AND #$3F
.390dcf	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dd2	d0 04		bne $390dd8	                BNE frac_height
.390dd4	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dd5	4a		lsr a		                LSR A
.390dd6	80 03		bra $390ddb	                BRA store_height
.390dd8	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dd9	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dda	1a		inc a		                INC A
.390ddb	85 00		sta $00		store_height    STA TMPPTR1
.390ddd	64 01		stz $01		                STZ TMPPTR1+1
.390ddf	e2 20		sep #$20	                SEP #$20        ; set A short
.390de1	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390de5	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390de7	f0 04		beq $390ded	                BEQ adjust_height           ; No... just adjust the height of the screen
.390de9	c2 20		rep #$20	                REP #$20        ; set A long
.390deb	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390ded					adjust_height
.390ded	c2 20		rep #$20	                REP #$20        ; set A long
.390def	38		sec		                SEC
.390df0	a5 15		lda $15		                LDA LINES_MAX
.390df2	e5 00		sbc $00		                SBC TMPPTR1
.390df4	85 13		sta $13		                STA LINES_VISIBLE
.390df6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390df8	28		plp		done            PLP
.390df9	2b		pld		                PLD
.390dfa	ab		plb		                PLB
.390dfb	7a		ply		                PLY
.390dfc	fa		plx		                PLX
.390dfd	68		pla		                PLA
.390dfe	6b		rtl		                RTL
>390dff	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e07	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e0f					IINITVKYGRPMODE
.390e0f	48		pha		                PHA
.390e10	e2 20		sep #$20	                SEP #$20        ; set A short
.390e12	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e14	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e18	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e1a	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e1e	a9 c0		lda #$c0	                LDA #$C0
.390e20	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e24	a9 00		lda #$00	                LDA #$00
.390e26	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e2a	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e2c	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e30	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e32	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e36	a9 c0		lda #$c0	                LDA #$C0
.390e38	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e3c	a9 00		lda #$00	                LDA #$00
.390e3e	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e42	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e44	68		pla		                PLA
.390e45	6b		rtl		                RTL
.390e46					IINITTILEMODE
.390e46	6b		rtl		                RTL
.390e47	48		pha		IINITSPRITE     PHA
.390e48	e2 20		sep #$20	                SEP #$20        ; set A short
.390e4a	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e4c	8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e50	8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e54	8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e58	8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e5c	8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e60	8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e64	8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e68	8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e6c	8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e70	8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e74	8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e78	8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390e7c	8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390e80	8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390e84	8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390e88	8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390e8c	8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390e90	a9 09		lda #$09	                LDA #$09
.390e92	8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390e96	8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390e9a	8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390e9e	8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390ea2	8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390ea6	8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390eaa	8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390eae	8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390eb2	8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390eb6	8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390eba	8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390ebe	8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390ec2	8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390ec6	8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390eca	8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390ece	8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390ed2	8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390ed6	a9 00		lda #$00	                LDA #$00
.390ed8	8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390edc	a9 04		lda #$04	                LDA #$04
.390ede	8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390ee2	a9 08		lda #$08	                LDA #$08
.390ee4	8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390ee8	a9 0c		lda #$0c	                LDA #$0C
.390eea	8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390eee	a9 10		lda #$10	                LDA #$10
.390ef0	8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390ef4	a9 14		lda #$14	                LDA #$14
.390ef6	8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390efa	a9 18		lda #$18	                LDA #$18
.390efc	8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f00	a9 1c		lda #$1c	                LDA #$1C
.390f02	8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f06	a9 20		lda #$20	                LDA #$20
.390f08	8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f0c	a9 24		lda #$24	                LDA #$24
.390f0e	8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f12	a9 28		lda #$28	                LDA #$28
.390f14	8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f18	a9 2c		lda #$2c	                LDA #$2C
.390f1a	8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f1e	a9 30		lda #$30	                LDA #$30
.390f20	8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f24	a9 34		lda #$34	                LDA #$34
.390f26	8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f2a	a9 38		lda #$38	                LDA #$38
.390f2c	8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f30	a9 3c		lda #$3c	                LDA #$3C
.390f32	8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f36	a9 40		lda #$40	                LDA #$40
.390f38	8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f3c	a9 00		lda #$00	                LDA #$00
.390f3e	8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f42	8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f46	8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f4a	8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f4e	8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f52	8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f56	8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f5a	8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f5e	8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f62	8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f66	8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f6a	8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f6e	8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f72	8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f76	8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f7a	8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390f7e	8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390f82	68		pla		                PLA
.390f83	6b		rtl		                RTL
.390f84					IINITFONTSET
.390f84	e2 20		sep #$20	                SEP #$20        ; set A short
.390f86	c2 10		rep #$10	                REP #$10        ; set X long
.390f88	a2 00 00	ldx #$0000	                LDX #$0000
.390f8b					initFontsetbranch0
.390f8b	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390f8f	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390f93	e8		inx		                INX
.390f94	e0 00 08	cpx #$0800	                CPX #$0800
.390f97	d0 f2		bne $390f8b	                BNE initFontsetbranch0
.390f99	ea		nop		                NOP
.390f9a	a2 00 00	ldx #$0000	                LDX #$0000
.390f9d					initFontsetbranch1
.390f9d	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390fa1	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390fa5	e8		inx		                INX
.390fa6	e0 00 08	cpx #$0800	                CPX #$0800
.390fa9	d0 f2		bne $390f9d	                BNE initFontsetbranch1
.390fab	ea		nop		                NOP
.390fac	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fae	6b		rtl		                RTL
.390faf					INITMOUSEPOINTER
.390faf	e2 20		sep #$20	                SEP #$20        ; set A short
.390fb1	c2 10		rep #$10	                REP #$10        ; set X long
.390fb3	a2 00 00	ldx #$0000	                LDX #$0000
.390fb6					FILL_MOUSE_MARKER
.390fb6	bf 00 78 39	lda $397800,x	                LDA @lMOUSE_POINTER_PTR,X
.390fba	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390fbe	e8		inx		                INX
.390fbf	e0 00 01	cpx #$0100	                CPX #$0100
.390fc2	d0 f2		bne $390fb6	                BNE FILL_MOUSE_MARKER
.390fc4	ea		nop		                nop
.390fc5	a9 01		lda #$01	                LDA #$01
.390fc7	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390fcb	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fcd	6b		rtl		                RTL
.390fce	48		pha		IINITCURSOR     PHA
.390fcf	e2 20		sep #$20	                SEP #$20        ; set A short
.390fd1	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fd3	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fd7	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fd9	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390fdd	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fdf	a9 00 00	lda #$0000	                LDA #$0000;
.390fe2	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390fe6	a9 06 00	lda #$0006	                LDA #$0006;
.390fe9	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390fed	68		pla		                PLA
.390fee	6b		rtl		                RTL
.390fef	0b		phd		IINITSUPERIO	  PHD
.390ff0	08		php		                PHP
.390ff1	48		pha		                PHA
.390ff2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ff4	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ff6	8f 23 11 af	sta $af1123	                STA GP10_REG
.390ffa	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ffe	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391000	8f 24 11 af	sta $af1124	                STA GP11_REG
.391004	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391006	8f 25 11 af	sta $af1125	                STA GP12_REG
.39100a	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39100c	8f 26 11 af	sta $af1126	        				STA GP13_REG
.391010	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.391012	8f 27 11 af	sta $af1127	        				STA GP14_REG
.391016	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.391018	8f 28 11 af	sta $af1128	        				STA GP15_REG
.39101c	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.39101e	8f 29 11 af	sta $af1129	        				STA GP16_REG
.391022	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.391024	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.391028	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.39102a	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.39102e	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391030	8f 2f 11 af	sta $af112f					        STA GP24_REG
.391034	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.391036	8f 30 11 af	sta $af1130					        STA GP25_REG
.39103a	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.39103c	8f 31 11 af	sta $af1131					        STA GP26_REG
.391040	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.391042	8f 33 11 af	sta $af1133					        STA GP30_REG
.391046	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.391048	8f 34 11 af	sta $af1134					        STA GP31_REG
.39104c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.39104e	8f 35 11 af	sta $af1135					        STA GP32_REG
.391052	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.391054	8f 36 11 af	sta $af1136					        STA GP33_REG
.391058	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.39105a	8f 37 11 af	sta $af1137					        STA GP34_REG
.39105e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391060	8f 38 11 af	sta $af1138					        STA GP35_REG
.391064	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.391066	8f 39 11 af	sta $af1139					        STA GP36_REG
.39106a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.39106c	8f 3a 11 af	sta $af113a					        STA GP37_REG
.391070	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391072	8f 3d 11 af	sta $af113d					        STA GP42_REG
.391076	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.391078	8f 3e 11 af	sta $af113e					        STA GP43_REG
.39107c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.39107e	8f 3f 11 af	sta $af113f					        STA GP50_REG
.391082	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.391084	8f 40 11 af	sta $af1140					        STA GP51_REG
.391088	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.39108a	8f 41 11 af	sta $af1141					        STA GP52_REG
.39108e	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391090	8f 42 11 af	sta $af1142					        STA GP53_REG
.391094	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.391096	8f 43 11 af	sta $af1143					        STA GP54_REG
.39109a	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.39109c	8f 44 11 af	sta $af1144					        STA GP55_REG
.3910a0	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910a2	8f 45 11 af	sta $af1145					        STA GP56_REG
.3910a6	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910a8	8f 46 11 af	sta $af1146					        STA GP57_REG
.3910ac	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910ae	8f 47 11 af	sta $af1147					        STA GP60_REG
.3910b2	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910b4	8f 48 11 af	sta $af1148					        STA GP61_REG
.3910b8	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.3910ba	8f 4b 11 af	sta $af114b					        STA GP1_REG
.3910be	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.3910c0	8f 4c 11 af	sta $af114c					        STA GP2_REG
.3910c4	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.3910c6	8f 4d 11 af	sta $af114d					        STA GP3_REG
.3910ca	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.3910cc	8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910d0	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910d2	8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910d6	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910d8	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910dc	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910de	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910e2	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910e4	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910e8	c2 20		rep #$20	                REP #$20        ; set A long
.3910ea	68		pla		                PLA
.3910eb	28		plp						        PLP
.3910ec	2b		pld					        	PLD
.3910ed	6b		rtl		                RTL
.3910ee	0b		phd		IINITKEYBOARD	  PHD
.3910ef	08		php						        PHP
.3910f0	48		pha						        PHA
.3910f1	da		phx						        PHX
.3910f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3910f4	c2 10		rep #$10	                REP #$10        ; set X long
.3910f6	18		clc		                CLC
.3910f7	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf ;
.3910fa	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.3910fc	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391100	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.391103	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.391107	c9 55		cmp #$55					        CMP #$55
.391109	f0 03		beq $39110e					        BEQ	passAAtest
.39110b	82 89 00	brl $391197	                BRL initkb_loop_out
.39110e					passAAtest
.39110e	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391110	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391114	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.391117	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.39111b	c9 00		cmp #$00					        CMP #$00			;Should be 00
.39111d	f0 03		beq $391122					        BEQ	passABtest
.39111f	82 75 00	brl $391197	                BRL initkb_loop_out
.391122					passABtest
.391122	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391124	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391128	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf ;
.39112b	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.39112d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391131	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf ;
.391134	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391136	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39113a	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39113d	ca		dex		DLY_LOOP1       DEX
.39113e	ea		nop		                NOP
.39113f	ea		nop		                NOP
.391140	ea		nop		                NOP
.391141	ea		nop		                NOP
.391142	ea		nop		                NOP
.391143	ea		nop		                NOP
.391144	ea		nop		                NOP
.391145	ea		nop		                NOP
.391146	e0 00 00	cpx #$0000	                CPX #$0000
.391149	d0 f2		bne $39113d	                BNE DLY_LOOP1
.39114b	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.39114e	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391152					DO_CMD_F4_AGAIN
.391152	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf ;
.391155	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391157	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39115b	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.39115e	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391162	c9 fa		cmp #$fa	                CMP #$FA
.391164	d0 ec		bne $391152	                BNE DO_CMD_F4_AGAIN
.391166	20 bd 11	jsr $3911bd	                JSR INIT_MOUSE
.391169	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39116d	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.39116f	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391173	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391177	29 01		and #$01	                AND #FNX1_INT00_KBD
.391179	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.39117d	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391181	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391183	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391187	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39118b	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.39118d	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391191	a2 60 70	ldx #$7060	                LDX #<>Success_kb_init
.391194	38		sec		                SEC
.391195	b0 03		bcs $39119a	                BCS InitSuccess
.391197	a2 72 70	ldx #$7072	initkb_loop_out LDX #<>Failed_kb_init
.39119a	22 7e 07 39	jsl $39077e	InitSuccess     JSL IPRINT       ; print Message
.39119e	c2 20		rep #$20	                REP #$20        ; set A long
.3911a0	c2 10		rep #$10	                REP #$10        ; set X long
.3911a2	fa		plx		                PLX
.3911a3	68		pla		                PLA
.3911a4	28		plp						        PLP
.3911a5	2b		pld						        PLD
.3911a6	6b		rtl		                RTL
.3911a7					Poll_Inbuf
.3911a7	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911ab	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911ad	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911af	f0 f6		beq $3911a7					        BEQ Poll_Inbuf
.3911b1	60		rts		                RTS
.3911b2					Poll_Outbuf
.3911b2	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911b6	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3911b8	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3911ba	d0 f6		bne $3911b2	                BNE Poll_Outbuf
.3911bc	60		rts		                RTS
.3911bd					INIT_MOUSE
.3911bd	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.3911c0	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3911c2	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911c6					DO_CMD_A9_AGAIN
.3911c6	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.3911c9	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3911cb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911cf	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.3911d2	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911d6	c9 00		cmp #$00	                CMP #$00
.3911d8	d0 ec		bne $3911c6	                BNE DO_CMD_A9_AGAIN
.3911da	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.3911dd	a9 20		lda #$20	                LDA #$20
.3911df	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911e3	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.3911e6	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911ea	09 02		ora #$02	                ORA #$02
.3911ec	48		pha		                PHA
.3911ed	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.3911f0	a9 60		lda #$60	                LDA #$60
.3911f2	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911f6	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf ;
.3911f9	68		pla		                PLA
.3911fa	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3911fe	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391200	20 23 12	jsr $391223	                JSR MOUSE_WRITE
.391203	20 36 12	jsr $391236	                JSR MOUSE_READ
.391206	a9 e8		lda #$e8	                LDA #$E8
.391208	20 23 12	jsr $391223	                JSR MOUSE_WRITE
.39120b	20 36 12	jsr $391236	                JSR MOUSE_READ
.39120e	a9 00		lda #$00	                LDA #$00
.391210	20 23 12	jsr $391223	                JSR MOUSE_WRITE
.391213	20 36 12	jsr $391236	                JSR MOUSE_READ
.391216	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391218	20 23 12	jsr $391223	                JSR MOUSE_WRITE
.39121b	20 36 12	jsr $391236	                JSR MOUSE_READ
.39121e	a9 00		lda #$00	                LDA #$00
.391220	85 e0		sta $e0		                STA MOUSE_PTR
.391222	60		rts		                RTS
.391223					MOUSE_WRITE
.391223	48		pha		                PHA
.391224	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.391227	a9 d4		lda #$d4	                LDA #$D4
.391229	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39122d	20 a7 11	jsr $3911a7	                JSR Poll_Inbuf
.391230	68		pla		                PLA
.391231	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391235	60		rts		                RTS
.391236					MOUSE_READ
.391236	20 b2 11	jsr $3911b2	                JSR Poll_Outbuf ;
.391239	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.39123d	60		rts		                RTS
.39123e	48		pha		INITRTC         PHA
.39123f	08		php		                PHP
.391240	e2 20		sep #$20	                SEP #$20        ; set A short
.391242	a9 00		lda #$00	                LDA #0
.391244	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.391248	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39124c	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391250	09 04		ora #$04	                ORA #%00000100
.391252	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391256	28		plp		                PLP
.391257	68		pla		                PLA
.391258	6b		rtl		                RTL
.391259					ITESTSID
.391259	a9 0f		lda #$0f	                LDA #$0F
.39125b	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.39125f	a9 be		lda #$be	                LDA #$BE
.391261	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391265	a9 f8		lda #$f8	                LDA #$F8
.391267	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39126b	a9 11		lda #$11	                LDA #$11
.39126d	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391271	a9 25		lda #$25	                LDA #$25
.391273	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391277	a9 11		lda #$11	                LDA #$11
.391279	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39127d	a9 08		lda #$08	                LDA #$08
.39127f	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391283	a9 00		lda #$00	                LDA #$00
.391285	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391289	a9 c6		lda #$c6	                LDA #$C6
.39128b	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39128f	a9 08		lda #$08	                LDA #$08
.391291	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391295	a9 00		lda #$00	                LDA #$00
.391297	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.39129b	a9 08		lda #$08	                LDA #$08
.39129d	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912a1	a9 c6		lda #$c6	                LDA #$C6
.3912a3	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912a7	a9 08		lda #$08	                LDA #$08
.3912a9	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912ad	a9 00		lda #$00	                LDA #$00
.3912af	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912b3	a9 08		lda #$08	                LDA #$08
.3912b5	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3912b9	a9 c6		lda #$c6	                LDA #$C6
.3912bb	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3912bf	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3912c1	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912c5	a9 01		lda #$01	                LDA #$01
.3912c7	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3912cb	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912cd	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912d1	a9 08		lda #$08	                LDA #$08
.3912d3	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912d7	a9 08		lda #$08	                LDA #$08
.3912d9	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912dd	a9 0c		lda #$0c	                LDA #$0C
.3912df	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912e3	a9 04		lda #$04	                LDA #$04
.3912e5	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912e9	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912eb	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912ef	a9 08		lda #$08	                LDA #$08
.3912f1	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912f5	a9 08		lda #$08	                LDA #$08
.3912f7	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3912fb	a9 00		lda #$00	                LDA #$00
.3912fd	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391301	a9 08		lda #$08	                LDA #$08
.391303	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391307	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391309	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.39130d	a9 08		lda #$08	                LDA #$08
.39130f	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391313	a9 08		lda #$08	                LDA #$08
.391315	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391319	a9 10		lda #$10	                LDA #$10
.39131b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.39131f	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391323	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391327	6b		rtl		                RTL
.391328	48		pha		IINITCODEC      PHA
.391329	c2 20		rep #$20	                REP #$20        ; set A long
.39132b	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.39132e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391332	a9 01 00	lda #$0001	                LDA #$0001
.391335	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391339	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.39133c	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.39133f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391343	a9 01 00	lda #$0001	                LDA #$0001
.391346	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39134a	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.39134d	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391350	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391354	a9 01 00	lda #$0001	                LDA #$0001
.391357	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39135b	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.39135e	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391361	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391365	a9 01 00	lda #$0001	                LDA #$0001
.391368	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39136c	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.39136f	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391372	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391376	a9 01 00	lda #$0001	                LDA #$0001
.391379	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39137d	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.391380	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391383	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391387	a9 01 00	lda #$0001	                LDA #$0001
.39138a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39138e	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.391391	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391394	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391398	a9 01 00	lda #$0001	                LDA #$0001
.39139b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39139f	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.3913a2	68		pla		                PLA
.3913a3	6b		rtl		                RTL
.3913a4					IRESETCODEC
.3913a4	c2 20		rep #$20	                REP #$20        ; set A long
.3913a6	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3913a9	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913ad	a9 01 00	lda #$0001	                LDA #$0001
.3913b0	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913b4	20 b8 13	jsr $3913b8	                JSR CODEC_TRF_FINISHED
.3913b7	6b		rtl		                RTL
.3913b8					CODEC_TRF_FINISHED
.3913b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3913ba	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3913be	29 01		and #$01	                AND #$01
.3913c0	c9 01		cmp #$01	                CMP #$01
.3913c2	f0 f6		beq $3913ba	                BEQ CODEC_LOOP
.3913c4	c2 20		rep #$20	                REP #$20        ; set A long
.3913c6	60		rts		                RTS
.3913c7					IBM_FILL_SCREEN
.3913c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913c9	a9 00 00	lda #$0000	                LDA #$0000
.3913cc	a2 00 00	ldx #$0000	                LDX #$0000
.3913cf					BM_FILL_SCREEN_LOOPY
.3913cf	a0 00 00	ldy #$0000	                LDY #$0000
.3913d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3913d4					BM_FILL_SCREEN_LOOPX
.3913d4	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913d6	c8		iny		                INY
.3913d7	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913d9	d0 f9		bne $3913d4	                BNE BM_FILL_SCREEN_LOOPX
.3913db	20 e6 13	jsr $3913e6	                JSR BM_FILL_COMPUTE_Y_DST
.3913de	e8		inx		                INX
.3913df	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913e1	d0 ec		bne $3913cf	                BNE BM_FILL_SCREEN_LOOPY
.3913e3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913e5	6b		rtl		                RTL
.3913e6					BM_FILL_COMPUTE_Y_DST
.3913e6	c2 20		rep #$20	                REP #$20        ; set A long
.3913e8	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913ea	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913ee	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913f0	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913f4	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3913f7	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913fb	a9 00 00	lda #$0000	                LDA #$0000
.3913fe	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391402	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391406	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391408	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39140c	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39140e	a9 00 00	lda #$0000	                LDA #$0000
.391411	60		rts		                RTS
.391412					IBMP_PARSER
.391412	c2 30		rep #$30	                REP #$30        ; set A&X long
.391414	a0 00 00	ldy #$0000	                LDY #$0000
.391417	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391419	c9 42 4d	cmp #$4d42	                CMP #$4D42
.39141c	f0 03		beq $391421	                BEQ IBMP_PARSER_CONT
.39141e	82 04 01	brl $391525	                BRL BMP_PARSER_END_WITH_ERROR
.391421					IBMP_PARSER_CONT
.391421	a0 02 00	ldy #$0002	                LDY #$0002
.391424	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391426	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39142a	a0 04 00	ldy #$0004	                LDY #$0004
.39142d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39142f	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391433	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391436	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39143a	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39143e	18		clc		                CLC
.39143f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391443	85 50		sta $50		                STA BMP_FILE_SIZE
.391445	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391449	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39144b	a0 12 00	ldy #$0012	                LDY #$0012
.39144e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391450	85 40		sta $40		                STA BMP_X_SIZE
.391452	a0 16 00	ldy #$0016	                LDY #$0016
.391455	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391457	85 42		sta $42		                STA BMP_Y_SIZE
.391459	a0 2e 00	ldy #$002e	                LDY #$002E
.39145c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39145e	0a		asl a		                ASL A; Multiply by 2
.39145f	0a		asl a		                ASL A; Multiply by 2
.391460	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391462	e0 00 00	cpx #$0000	                CPX #$0000
.391465	d0 05		bne $39146c	                BNE BMP_LUT1_PICK
.391467	20 2d 15	jsr $39152d	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39146a	80 08		bra $391474	                BRA DONE_TRANSFER_LUT;
.39146c					  BMP_LUT1_PICK
.39146c	e0 01 00	cpx #$0001	                CPX #$0001
.39146f	d0 03		bne $391474	                BNE BMP_LUT2_PICK
.391471	20 5d 15	jsr $39155d	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391474					  BMP_LUT2_PICK
.391474					  DONE_TRANSFER_LUT
.391474	a5 56		lda $56		                LDA BMP_POSITION_Y
.391476	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39147a	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39147c	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391480	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391484	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391488	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39148c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391490	a5 54		lda $54		                LDA BMP_POSITION_X
.391492	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391496	a9 00 00	lda #$0000	                LDA #$0000
.391499	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39149d	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914a1	85 f0		sta $f0		                STA USER_TEMP
.3914a3	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3914a7	85 f2		sta $f2		                STA USER_TEMP+2
.3914a9	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914ab	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914af	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914b1	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914b5	a5 f0		lda $f0		                LDA USER_TEMP
.3914b7	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3914bb	a5 f2		lda $f2		                LDA USER_TEMP+2
.3914bd	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3914c1	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3914c5	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914c7	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3914cb	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914cd	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914cf	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914d3	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914d5	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914d9	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914db	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914df	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914e1	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914e5	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914e9	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914eb	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914ef	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914f1	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914f3	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914f7	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3914f9	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914fd	18		clc		                CLC
.3914fe	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391500	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391503	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391506	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39150a	a9 ff ff	lda #$ffff	                LDA #$FFFF
.39150d	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391511	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391515	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391517	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39151b	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39151d	20 8d 15	jsr $39158d	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391520	a2 ae 70	ldx #$70ae	                LDX #<>bmp_parser_msg0
.391523	80 03		bra $391528	                BRA BMP_PARSER_END_NO_ERROR
.391525					BMP_PARSER_END_WITH_ERROR
.391525	a2 9a 70	ldx #$709a	                LDX #<>bmp_parser_err0
.391528					BMP_PARSER_END_NO_ERROR
.391528	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.39152c	6b		rtl		                RTL
.39152d					BMP_PARSER_UPDATE_LUT0
.39152d	38		sec		                SEC
.39152e	a0 7a 00	ldy #$007a	                LDY #$007A
.391531	a2 00 00	ldx #$0000	                LDX #$0000
.391534	e2 20		sep #$20	                SEP #$20        ; set A short
.391536					BMP_PARSER_UPDATE_LOOP
.391536	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391538	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39153c	c8		iny		                INY
.39153d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39153f	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391543	c8		iny		                INY
.391544	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391546	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39154a	c8		iny		                INY
.39154b	a9 80		lda #$80	                LDA #$80
.39154d	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391551	c8		iny		                INY ; For the Alpha Value, nobody cares
.391552	e8		inx		                INX
.391553	e8		inx		                INX
.391554	e8		inx		                INX
.391555	e8		inx		                INX
.391556	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391558	d0 dc		bne $391536	                BNE BMP_PARSER_UPDATE_LOOP
.39155a	c2 20		rep #$20	                REP #$20        ; set A long
.39155c	60		rts		                RTS
.39155d					BMP_PARSER_UPDATE_LUT1
.39155d	38		sec		                SEC
.39155e	a0 36 00	ldy #$0036	                LDY #$0036
.391561	a2 00 00	ldx #$0000	                LDX #$0000
.391564	e2 20		sep #$20	                SEP #$20        ; set A short
.391566					PALETTE_LUT1_LOOP
.391566	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391568	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39156c	c8		iny		                INY
.39156d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39156f	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391573	c8		iny		                INY
.391574	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391576	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39157a	c8		iny		                INY
.39157b	a9 80		lda #$80	                LDA #$80
.39157d	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391581	c8		iny		                INY ; For the Alpha Value, nobody cares
.391582	e8		inx		                INX
.391583	e8		inx		                INX
.391584	e8		inx		                INX
.391585	e8		inx		                INX
.391586	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391588	d0 dc		bne $391566	                BNE PALETTE_LUT1_LOOP
.39158a	c2 20		rep #$20	                REP #$20        ; set A long
.39158c	60		rts		                RTS
.39158d					BMP_PARSER_DMA_SHIT_OUT
.39158d	a2 00 00	ldx #$0000	                LDX #$0000
.391590					BMP_PARSER_LOOPY
.391590	a0 00 00	ldy #$0000	                LDY #$0000
.391593	e2 20		sep #$20	                SEP #$20        ; set A short
.391595					BMP_PARSER_LOOPX
.391595	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391597	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391599	c8		iny		                INY
.39159a	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39159c	d0 f7		bne $391595	                BNE BMP_PARSER_LOOPX
.39159e	20 aa 15	jsr $3915aa	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915a1	20 c5 15	jsr $3915c5	                JSR BMP_PARSER_COMPUTE_Y_DST
.3915a4	e8		inx		                INX
.3915a5	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3915a7	d0 e7		bne $391590	                BNE BMP_PARSER_LOOPY
.3915a9	60		rts		                RTS
.3915aa					BMP_PARSER_COMPUTE_Y_SRC
.3915aa	c2 20		rep #$20	                REP #$20        ; set A long
.3915ac	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3915ae	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3915b2	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3915b4	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3915b8	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3915bc	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3915be	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3915c2	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3915c4	60		rts		                RTS
.3915c5					BMP_PARSER_COMPUTE_Y_DST
.3915c5	c2 20		rep #$20	                REP #$20        ; set A long
.3915c7	18		clc		                CLC
.3915c8	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3915ca	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3915cc	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915ce	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915d0	69 00 00	adc #$0000	                ADC #$0000
.3915d3	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915d5	60		rts		                RTS
.3915d6	ea		nop		ILOOP           NOP
.3915d7	ea		nop		                NOP
.3915d8	ea		nop		                NOP
.3915d9	ea		nop		                NOP
.3915da	ea		nop		                NOP
.3915db	ea		nop		                NOP
.3915dc	ea		nop		                NOP
.3915dd	ea		nop		                NOP
.3915de	ea		nop		                NOP
.3915df	ea		nop		                NOP
.3915e0	6b		rtl		                RTL
.3915e1	22 d6 15 39	jsl $3915d6	ILOOP_1         JSL ILOOP
.3915e5	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915e9	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915ed	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915f1	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915f5	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915f9	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.3915fd	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.391601	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.391605	22 d6 15 39	jsl $3915d6	                JSL ILOOP
.391609	6b		rtl		                RTL
.39160a	22 e1 15 39	jsl $3915e1	ILOOP_1MS       JSL ILOOP_1
.39160e	6b		rtl		                RTL
.39160f	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391612	f0 07		beq $39161b	                BEQ LOOP_MS_END
.391614	22 0a 16 39	jsl $39160a	                JSL ILOOP_1MS
.391618	ca		dex		                DEX
.391619	80 f4		bra $39160f	                BRA ILOOP_MS
.39161b	6b		rtl		LOOP_MS_END     RTL
.39161c					IDELAY
.39161c	8b		phb		                PHB
.39161d	08		php		                PHP
.39161e	48		pha		                PHA             ; begin setdbr macro
.39161f	08		php		                PHP
.391620	e2 20		sep #$20	                SEP #$20        ; set A short
.391622	a9 00		lda #$00	                LDA #0
.391624	48		pha		                PHA
.391625	ab		plb		                PLB
.391626	28		plp		                PLP
.391627	68		pla		                PLA             ; end setdbr macro
.391628	e2 20		sep #$20	                SEP #$20        ; set A short
.39162a	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.39162c	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391630	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391634	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391636	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39163a	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39163c	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39163f	a9 00		lda #$00	                LDA #0
.391641	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391645	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391649	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39164d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39164f	8a		txa		                TXA
.391650	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391654	98		tya		                TYA
.391655	e2 20		sep #$20	                SEP #$20        ; set A short
.391657	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39165b	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39165d	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391661	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391663	cb		wai		loop            WAI                         ; Wait for an interrupt
.391664	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391667	f0 fa		beq $391663	                BEQ loop                    ; Keep checking until it's set
.391669	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39166b	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39166f	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391671	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391674	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.391678	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39167a	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39167e	28		plp		                PLP
.39167f	ab		plb		                PLB
.391680	6b		rtl		                RTL
.391681					SHOW_CREDITS
.391681	48		pha		                PHA
.391682	da		phx		                PHX
.391683	5a		phy		                PHY
.391684	08		php		                PHP
.391685	e2 20		sep #$20	                SEP #$20        ; set A short
.391687	c2 10		rep #$10	                REP #$10        ; set X long
.391689	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39168d	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.39168f	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391693	a2 00 00	ldx #$0000	                LDX #0
.391696	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39169a	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.39169e	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916a2	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3916a6	e8		inx		                INX
.3916a7	e0 00 20	cpx #$2000	                CPX #128 * 64
.3916aa	d0 ea		bne $391696	                BNE credit_loop
.3916ac	22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.3916b0	22 3a 0b 39	jsl $390b3a	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3916b4	22 5e 09 39	jsl $39095e	                JSL ICSRHOME                    ; Move cursor to the home position
.3916b8	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3916bc	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3916be	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916c2	28		plp		                PLP
.3916c3	7a		ply		                PLY
.3916c4	fa		plx		                PLX
.3916c5	68		pla		                PLA
.3916c6	6b		rtl		                RTL
.3916c7	00		brk #		IRESTORE        BRK ; Warm boot routine
.3916c8	00		brk #		ISCINIT         BRK ;
.3916c9	00		brk #		IIOINIT         BRK ;
.3916ca	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3916cb	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3916cc	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3916cd	00		brk #		ICLOSE          BRK ; Close a channel
.3916ce	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916cf	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916d0	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916d1	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916d2	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916d3	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916d4	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916d5	00		brk #		IPRINTF         BRK ; Print a float value
.3916d6	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916d7	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916d8	00		brk #		IPUSHKEY        BRK ;
.3916d9	00		brk #		IPUSHKEYS       BRK ;
.3916da	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916db	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916dc	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916e4	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3916f4	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3916fc	12
>3916fd	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391705	15
>391706	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>39170c	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391711	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>391717	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39171f	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>39172d	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391735	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391743	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39174b	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391759	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391761	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>39176f	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391777	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391785	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>39178d	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39179b	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917a3	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3917b1	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3917b9	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3917c7	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917cf	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917dd	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917e5	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3917f3	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3917fb	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391809	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391811	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39181f	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391827	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391835	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>39183d	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39184b	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391853	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391861	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391869	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391877	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>39187f	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>39188d	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391895	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918a3	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3918ab	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3918b9	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3918c1	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918cf	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918d7	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918e5	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918ed	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3918fb	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391903	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391911	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391919	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391927	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>39192f	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>39193d	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391945	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391953	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39195b	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391969	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391971	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>39197f	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391987	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391995	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>39199d	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3919ab	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3919b3	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3919c1	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3919c9	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919d7	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919df	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919ed	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3919f5	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a03	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a0b	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a19	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a21	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a2f	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a37	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a45	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a4d	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a5b	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a63	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a71	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a79	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a87	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a8f	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391a9d	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391aa5	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391ab3	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391abb	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391ac9	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391ad1	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391adf	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391ae7	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391af5	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391afd	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b0b	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b13	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b21	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b29	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b37	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b3f	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b4d	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b55	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b63	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b6b	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b79	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b81	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b8f	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391b97	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391ba5	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391bad	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391bbb	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391bc3	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391bd1	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391bd9	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391be7	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bef	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391bfd	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c05	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c13	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c1b	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c29	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c31	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c3f	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c47	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c55	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c5d	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c6b	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c73	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c81	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c89	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391c97	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391c9f	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391cad	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391cb5	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391cc3	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391ccb	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391cd9	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391ce1	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cef	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391cf7	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d05	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d0d	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d1b	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d23	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d31	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d39	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d47	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d4f	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d5d	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d65	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d73	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d7b	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d89	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d91	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391d9f	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391da7	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391db5	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391dbd	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391dcb	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391dd3	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391de1	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391de9	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391df7	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391dff	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e0d	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e15	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e23	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e2b	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e39	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e41	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e4f	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e57	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e65	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e6d	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e7b	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e83	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e91	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391e99	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391ea7	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391eaf	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ebd	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391ec5	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391ed3	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391edb	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ee9	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391ef1	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391eff	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f07	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f15	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f1d	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f2b	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f33	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f41	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f49	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f57	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f5f	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f6d	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f75	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f83	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f8b	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391f99	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391fa1	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391faf	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391fb7	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391fc5	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391fcd	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fdb	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391fe3	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ff1	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391ff9	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>392007	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>39200f	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>39201d	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>392025	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>392033	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>39203b	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>392049	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>392051	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>39205f	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>392067	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>392075	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>39207d	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>39208b	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>392093	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920a1	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>3920a9	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3920b7	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3920bf	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3920cd	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920d5	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920e3	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920eb	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3920f9	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>392101	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>39210f	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>392117	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392125	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>39212d	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39213b	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392143	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392151	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>392159	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>392167	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>39216f	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>39217d	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392185	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392193	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>39219b	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>3921a9	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3921b1	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3921bf	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3921c7	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921d5	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921dd	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921eb	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3921f3	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>392201	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392209	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392217	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>39221f	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>39222d	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392235	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392243	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39224b	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392259	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392261	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>39226f	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>392277	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392285	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>39228d	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>39229b	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922a3	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3922b1	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3922b9	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3922c7	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922cf	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922dd	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922e5	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3922f3	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3922fb	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392309	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392311	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>39231f	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392327	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392335	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>39233d	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39234b	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392353	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392361	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>392369	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>392377	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>39237f	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>39238d	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392395	00 87 fa 00
>392399	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923a1	00 88 98 03
>3923a5	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923ad	00 88 98 03
>3923b1	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923b9	00 f9 69 00
>3923bd	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3923c5	80 e8 4a 00
>3923c9	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923d1	00 f6 9a 00
>3923d5	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923dd	1b f2 34 00
>3923e1	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923e9	00 f7 8a 00
>3923ed	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3923f5	00 f6 47 00
>3923f9	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392401	00 f9 69 00
>392405	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39240d	00 f7 a9 00
>392411	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392419	00 87 fa 00
>39241d	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392425	00 f7 a9 00
>392429	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392431	00 f5 f5 00
>392435	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39243d	06 b8 d8 03
>392441	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392449	00 f5 f5 00
>39244d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392455	06 b8 d8 03
>392459	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392461	00 f5 f5 00
>392465	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>39246d	10 74 f8 03
>392471	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392479	00 f5 f5 00
>39247d	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392485	00 f5 f5 00
>392489	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392491	05 c5 d4 03
>392495	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39249d	00 f5 f5 00
>3924a1	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924a9	04 f9 44 03
>3924ad	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924b5	05 c5 d4 03
>3924b9	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924c1	04 f9 44 03
>3924c5	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3924cd	03 87 f7 03
>3924d1	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924d9	05 c5 d4 03
>3924dd	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924e5	00 f6 28 00
>3924e9	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924f1	05 c5 d4 03
>3924f5	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3924fd	00 f5 f7 01
>392501	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392509	04 f9 44 03
>39250d	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392515	00 99 f9 00
>392519	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392521	00 a8 f7 00
>392525	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39252d	00 99 f9 00
>392531	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392539	00 a6 f6 00
>39253d	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392545	00 a6 f6 00
>392549	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392551	00 f6 36 02
>392555	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39255d	00 f6 36 02
>392561	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392569	00 96 e8 01
>39256d	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392575	00 96 e8 01
>392579	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392581	02 79 77 03
>392585	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39258d	02 79 77 03
>392591	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>392599	00 a5 2b 02
>39259d	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3925a5	00 93 3b 02
>3925a9	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3925b1	01 89 3b 03
>3925b5	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3925bd	0a 53 2b 02
>3925c1	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3925c9	00 f6 89 00
>3925cd	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925d5	00 f6 9a 00
>3925d9	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925e1	00 f6 9a 00
>3925e5	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925ed	00 87 4b 01
>3925f1	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3925f9	00 78 67 01
>3925fd	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392605	02 f8 fc 00
>392609	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392611	40 f5 f5 00
>392615	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39261d	02 79 77 03
>392621	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392629	40 f5 f5 00
>39262d	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392635	40 f5 f5 00
>392639	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392641	00 f9 69 00
>392645	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39264d	00 f9 69 00
>392651	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392659	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>39265d	8d 23 39 00 99 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392665	a5 23 39 00 b1 23 39 00
>39266d	bd 23 39 00 c9 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392675	d5 23 39 00 e1 23 39 00
>39267d	ed 23 39 00 f9 23 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392685	05 24 39 00 11 24 39 00
>39268d	1d 24 39 00 29 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392695	35 24 39 00 41 24 39 00
>39269d	4d 24 39 00 59 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3926a5	65 24 39 00 71 24 39 00
>3926ad	7d 24 39 00 89 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3926b5	95 24 39 00 a1 24 39 00
>3926bd	ad 24 39 00 b9 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3926c5	c5 24 39 00 d1 24 39 00
>3926cd	dd 24 39 00 e9 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926d5	f5 24 39 00 01 25 39 00
>3926dd	0d 25 39 00 19 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926e5	25 25 39 00 31 25 39 00
>3926ed	3d 25 39 00 49 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3926f5	55 25 39 00 61 25 39 00
>3926fd	6d 25 39 00 79 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392705	85 25 39 00 91 25 39 00
>39270d	9d 25 39 00 a9 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392715	b5 25 39 00 c1 25 39 00
>39271d	cd 25 39 00 d9 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392725	e5 25 39 00 f1 25 39 00
>39272d	fd 25 39 00 09 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392735	15 26 39 00 21 26 39 00
>39273d	2d 26 39 00 39 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392745	45 26 39 00 51 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>39274d	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392755	00 b1 f5 01
>392759	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392761	03 f1 f5 00
>392765	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>39276d	03 c1 f5 00
>392771	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>392779	00 92 f5 01
>39277d	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392785	00 f1 f9 00
>392789	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392791	00 f1 f5 00
>392795	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>39279d	02 81 f6 01
>3927a1	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3927a9	00 c2 b9 01
>3927ad	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3927b5	05 b2 35 00
>3927b9	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3927c1	1b f2 34 00
>3927c5	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3927cd	01 f5 74 00
>3927d1	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927d9	00 61 e3 00
>3927dd	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927e5	00 a4 64 00
>3927e9	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927f1	07 b5 f5 00
>3927f5	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3927fd	00 f3 74 00
>392801	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392809	00 c3 94 01
>39280d	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392815	00 f4 0d 01
>392819	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392821	00 f5 0b 01
>392825	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>39282d	00 bf 07 00
>392831	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392839	00 6d 08 01
>39283d	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392845	00 51 17 01
>392849	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392851	00 51 17 01
>392855	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>39285d	00 53 08 01
>392861	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392869	00 53 06 01
>39286d	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392875	00 d2 f8 00
>392879	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392881	00 e2 c7 01
>392885	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>39288d	00 f1 9c 00
>392891	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>392899	02 f2 c9 01
>39289d	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3928a5	03 95 fb 00
>3928a9	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3928b1	04 a1 59 00
>3928b5	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3928bd	03 91 fc 03
>3928c1	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3928c9	02 b4 ec 00
>3928cd	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928d5	00 93 f7 00
>3928d9	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928e1	04 c1 58 00
>3928e5	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928ed	02 c3 6a 00
>3928f1	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3928f9	00 62 87 00
>3928fd	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392905	00 f3 97 00
>392909	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392911	00 b3 97 00
>392915	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>39291d	04 f3 cc 00
>392921	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392929	00 93 aa 00
>39292d	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392935	00 78 08 01
>392939	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392941	00 78 08 01
>392945	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>39294d	00 54 27 01
>392951	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392959	00 61 56 00
>39295d	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392965	00 75 16 01
>392969	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392971	00 f5 f6 01
>392975	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>39297d	80 f3 e3 00
>392981	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392989	00 b5 f5 00
>39298d	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392995	80 71 16 00
>392999	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929a1	00 30 55 01
>3929a5	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3929ad	00 62 36 01
>3929b1	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3929b9	02 51 07 00
>3929bd	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3929c5	00 62 39 00
>3929c9	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929d1	00 66 27 00
>3929d5	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929dd	00 73 46 00
>3929e1	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929e9	00 74 76 01
>3929ed	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3929f5	81 92 38 00
>3929f9	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a01	02 71 19 00
>392a05	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a0d	01 81 09 00
>392a11	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a19	00 83 4b 02
>392a1d	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a25	05 71 59 00
>392a29	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a31	03 82 39 00
>392a35	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a3d	82 84 17 00
>392a41	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a49	02 72 16 00
>392a4d	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a55	00 7b 0a 00
>392a59	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a61	00 85 0c 01
>392a65	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a6d	00 7b 0a 01
>392a71	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a79	00 79 18 01
>392a7d	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a85	01 73 08 00
>392a89	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a91	04 77 0a 00
>392a95	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392a9d	00 51 19 00
>392aa1	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392aa9	01 74 09 00
>392aad	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392ab5	01 63 28 00
>392ab9	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392ac1	00 65 0a 00
>392ac5	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392acd	00 67 29 00
>392ad1	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392ad9	00 67 09 00
>392add	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392ae5	01 6a 28 00
>392ae9	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392af1	00 55 27 00
>392af5	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392afd	00 6f 08 00
>392b01	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b09	00 7a 07 00
>392b0d	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b15	06 a2 0d 00
>392b19	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b21	00 a3 5f 00
>392b25	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b2d	00 42 27 00
>392b31	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b39	05 b2 49 00
>392b3d	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b45	00 b2 79 01
>392b49	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b51	00 7a 1a 00
>392b55	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b5d	00 82 28 01
>392b61	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b69	02 c3 5f 00
>392b6d	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b75	86 c4 95 01
>392b79	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b81	00 44 15 00
>392b85	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b8d	00 d1 06 00
>392b91	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392b99	00 82 37 00
>392b9d	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392ba5	00 41 35 00
>392ba9	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392bb1	02 32 f5 01
>392bb5	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392bbd	00 61 26 00
>392bc1	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392bc9	84 3f 05 01
>392bcd	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392bd5	01 d1 f6 00
>392bd9	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392be1	00 41 05 01
>392be5	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bed	05 f3 e4 00
>392bf1	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392bf9	00 92 f5 01
>392bfd	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c05	04 f2 e4 01
>392c09	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c11	00 45 25 00
>392c15	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c1d	01 a3 36 00
>392c21	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c29	01 98 05 01
>392c2d	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c35	02 a3 f6 01
>392c39	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c41	00 f6 f8 00
>392c45	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c4d	00 f3 f5 00
>392c51	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c59	00 94 e5 01
>392c5d	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c65	00 84 44 00
>392c69	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c71	03 83 18 01
>392c75	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c7d	01 78 08 01
>392c81	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c89	03 8e 08 01
>392c8d	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392c95	09 f2 46 00
>392c99	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392ca1	00 96 e8 01
>392ca5	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392cad	00 f6 f6 01
>392cb1	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392cb9	00 f6 9a 00
>392cbd	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392cc5	00 c6 45 00
>392cc9	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392cd1	00 f4 b4 00
>392cd5	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392cdd	00 d5 25 00
>392ce1	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392ce9	0e 21 2d 00
>392ced	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392cf5	00 55 87 02
>392cf9	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d01	08 98 87 01
>392d05	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d0d	04 17 04 03
>392d11	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d19	05 77 f9 02
>392d1d	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d25	02 f4 08 00
>392d29	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d31	00 36 05 01
>392d35	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d3d	05 32 55 03
>392d41	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d49	00 f3 df 00
>392d4d	4d 27 39 00 59 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d55	65 27 39 00 71 27 39 00 7d 27 39 00 89 27 39 00
>392d65	95 27 39 00 a1 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d6d	ad 27 39 00 b9 27 39 00 c5 27 39 00 d1 27 39 00
>392d7d	dd 27 39 00 e9 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d85	f5 27 39 00 01 28 39 00 0d 28 39 00 19 28 39 00
>392d95	25 28 39 00 31 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392d9d	3d 28 39 00 49 28 39 00 55 28 39 00 61 28 39 00
>392dad	6d 28 39 00 79 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392db5	85 28 39 00 91 28 39 00 9d 28 39 00 a9 28 39 00
>392dc5	b5 28 39 00 c1 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392dcd	cd 28 39 00 d9 28 39 00 e5 28 39 00 f1 28 39 00
>392ddd	fd 28 39 00 09 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392de5	15 29 39 00 21 29 39 00 2d 29 39 00 39 29 39 00
>392df5	45 29 39 00 51 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392dfd	5d 29 39 00 69 29 39 00 75 29 39 00 81 29 39 00
>392e0d	8d 29 39 00 99 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e15	a5 29 39 00 b1 29 39 00 bd 29 39 00 c9 29 39 00
>392e25	d5 29 39 00 e1 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e2d	ed 29 39 00 f9 29 39 00 05 2a 39 00 11 2a 39 00
>392e3d	1d 2a 39 00 29 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e45	35 2a 39 00 41 2a 39 00 4d 2a 39 00 59 2a 39 00
>392e55	65 2a 39 00 71 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e5d	7d 2a 39 00 89 2a 39 00 95 2a 39 00 a1 2a 39 00
>392e6d	ad 2a 39 00 b9 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e75	c5 2a 39 00 d1 2a 39 00 dd 2a 39 00 e9 2a 39 00
>392e85	f5 2a 39 00 01 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e8d	0d 2b 39 00 19 2b 39 00 25 2b 39 00 31 2b 39 00
>392e9d	3d 2b 39 00 49 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392ea5	55 2b 39 00 61 2b 39 00 6d 2b 39 00 79 2b 39 00
>392eb5	85 2b 39 00 91 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ebd	9d 2b 39 00 a9 2b 39 00 b5 2b 39 00 c1 2b 39 00
>392ecd	cd 2b 39 00 d9 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392ed5	e5 2b 39 00 f1 2b 39 00 fd 2b 39 00 09 2c 39 00
>392ee5	15 2c 39 00 21 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392eed	2d 2c 39 00 39 2c 39 00 45 2c 39 00 51 2c 39 00
>392efd	5d 2c 39 00 69 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f05	75 2c 39 00 81 2c 39 00 8d 2c 39 00 99 2c 39 00
>392f15	a5 2c 39 00 b1 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f1d	bd 2c 39 00 c9 2c 39 00 d5 2c 39 00 e1 2c 39 00
>392f2d	ed 2c 39 00 f9 2c 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f35	05 2d 39 00 11 2d 39 00 1d 2d 39 00 29 2d 39 00
>392f45	35 2d 39 00 41 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f4d	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f55	0d f2 f7 00
>392f59	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f61	07 f2 f7 00
>392f65	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f6d	07 f2 f6 00
>392f71	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f79	07 f2 f7 00
>392f7d	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f85	07 f2 f7 00
>392f89	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f91	07 f2 f7 00
>392f95	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f9d	00 00 00 00
>392fa1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fa9	00 00 00 00
>392fad	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb5	00 00 00 00
>392fb9	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392fc1	87 f2 f1 00
>392fc5	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392fcd	07 f4 f4 00
>392fd1	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fd9	07 f2 f6 00
>392fdd	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392fe5	07 e7 f7 00
>392fe9	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ff1	07 f6 f6 00
>392ff5	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ffd	87 a3 f3 00
>393001	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393009	00 00 00 00
>39300d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393015	00 00 00 00
>393019	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393021	00 00 00 00
>393025	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>39302d	07 8a 08 00
>393031	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>393039	07 55 14 00
>39303d	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>393045	87 55 04 00
>393049	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>393051	07 46 1a 00
>393055	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>39305d	07 61 07 00
>393061	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>393069	90 61 07 00
>39306d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393075	00 00 00 00
>393079	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393081	00 00 00 00
>393085	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39308d	00 00 00 00
>393091	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>393099	87 f3 f8 00
>39309d	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>3930a5	07 f6 3a 00
>3930a9	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>3930b1	0c 84 19 00
>3930b5	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3930bd	07 94 19 00
>3930c1	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3930c9	87 d1 f8 00
>3930cd	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930d5	07 c3 a6 00
>3930d9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930e1	00 00 00 00
>3930e5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ed	00 00 00 00
>3930f1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930f9	00 00 00 00
>3930fd	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>393105	47 f2 df 00
>393109	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>393111	0f a1 df 00
>393115	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>39311d	07 f1 78 00
>393121	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>393129	07 f1 18 00
>39312d	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393135	07 56 26 00
>393139	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393141	07 66 06 00
>393145	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39314d	00 00 00 00
>393151	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393159	00 00 00 00
>39315d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393165	00 00 00 00
>393169	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393171	87 85 35 00
>393175	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>39317d	87 f3 f4 00
>393181	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>393189	07 f2 c3 00
>39318d	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>393195	08 72 08 00
>393199	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931a1	07 3f 07 01
>3931a5	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3931ad	07 4f 05 00
>3931b1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931b9	00 00 00 00
>3931bd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c5	00 00 00 00
>3931c9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931d1	00 00 00 00
>3931d5	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931dd	07 7a 05 00
>3931e1	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931e9	07 a5 45 00
>3931ed	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3931f5	08 8f 09 00
>3931f9	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>393201	0c 8f 09 00
>393205	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>39320d	07 82 37 00
>393211	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393219	07 62 2c 01
>39321d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393225	00 00 00 00
>393229	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393231	00 00 00 00
>393235	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39323d	00 00 00 00
>393241	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393249	07 a6 1c 00
>39324d	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393255	07 72 0b 00
>393259	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393261	07 72 09 00
>393265	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>39326d	07 82 09 00
>393271	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>393279	07 72 0f 00
>39327d	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393285	07 8f 0a 00
>393289	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393291	00 00 00 00
>393295	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39329d	00 00 00 00
>3932a1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932a9	00 00 00 00
>3932ad	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932b5	07 65 1a 00
>3932b9	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932c1	07 65 1a 00
>3932c5	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3932cd	07 75 0a 00
>3932d1	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932d9	07 65 1a 00
>3932dd	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932e5	07 65 26 00
>3932e9	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932f1	07 55 36 00
>3932f5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932fd	00 00 00 00
>393301	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393309	00 00 00 00
>39330d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393315	00 00 00 00
>393319	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393321	07 ff 0f 01
>393325	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>39332d	87 64 18 00
>393331	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393339	07 96 0a 00
>39333d	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393345	07 91 2a 00
>393349	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393351	47 6f 07 00
>393355	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>39335d	07 8f 06 02
>393361	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393369	00 00 00 00
>39336d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393375	00 00 00 00
>393379	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393381	00 00 00 00
>393385	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>39338d	07 55 16 00
>393391	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>393399	07 6a 03 00
>39339d	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3933a5	07 42 35 00
>3933a9	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3933b1	07 31 47 01
>3933b5	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3933bd	0a 42 25 00
>3933c1	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3933c9	07 cf 07 00
>3933cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933d5	00 00 00 00
>3933d9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933e1	00 00 00 00
>3933e5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ed	00 00 00 00
>3933f1	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3933f9	8a f2 26 00
>3933fd	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393405	07 f2 f5 00
>393409	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393411	87 11 13 00
>393415	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>39341d	87 1d 03 00
>393421	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393429	07 81 23 00
>39342d	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393435	0a f2 f6 01
>393439	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393441	00 00 00 00
>393445	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39344d	00 00 00 00
>393451	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393459	00 00 00 00
>39345d	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393465	07 c2 05 00
>393469	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393471	07 6f 0c 01
>393475	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>39347d	07 56 16 00
>393481	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>393489	88 8f 0b 00
>39348d	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>393495	87 c3 e5 00
>393499	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934a1	07 f8 16 00
>3934a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934ad	00 00 00 00
>3934b1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934b9	00 00 00 00
>3934bd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934c5	00 00 00 00
>3934c9	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934d1	0a f3 03 00
>3934d5	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934dd	07 f3 02 00
>3934e1	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934e9	07 1f ff 03
>3934ed	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3934f5	8f 56 84 02
>3934f9	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393501	0c 34 04 03
>393505	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>39350d	07 1f 02 03
>393511	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393519	00 00 00 00
>39351d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393525	00 00 00 00
>393529	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393531	00 00 00 00
>393535	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>39353d	07 12 16 01
>393541	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393549	07 f6 c9 02
>39354d	4d 2f 39 00 59 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393555	65 2f 39 00 71 2f 39 00 7d 2f 39 00 89 2f 39 00
>393565	95 2f 39 00 a1 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>39356d	ad 2f 39 00 b9 2f 39 00 c5 2f 39 00 d1 2f 39 00
>39357d	dd 2f 39 00 e9 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393585	f5 2f 39 00 01 30 39 00 0d 30 39 00 19 30 39 00
>393595	25 30 39 00 31 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>39359d	3d 30 39 00 49 30 39 00 55 30 39 00 61 30 39 00
>3935ad	6d 30 39 00 79 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3935b5	85 30 39 00 91 30 39 00 9d 30 39 00 a9 30 39 00
>3935c5	b5 30 39 00 c1 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3935cd	cd 30 39 00 d9 30 39 00 e5 30 39 00 f1 30 39 00
>3935dd	fd 30 39 00 09 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935e5	15 31 39 00 21 31 39 00 2d 31 39 00 39 31 39 00
>3935f5	45 31 39 00 51 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3935fd	5d 31 39 00 69 31 39 00 75 31 39 00 81 31 39 00
>39360d	8d 31 39 00 99 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393615	a5 31 39 00 b1 31 39 00 bd 31 39 00 c9 31 39 00
>393625	d5 31 39 00 e1 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>39362d	ed 31 39 00 f9 31 39 00 05 32 39 00 11 32 39 00
>39363d	1d 32 39 00 29 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393645	35 32 39 00 41 32 39 00 4d 32 39 00 59 32 39 00
>393655	65 32 39 00 71 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>39365d	7d 32 39 00 89 32 39 00 95 32 39 00 a1 32 39 00
>39366d	ad 32 39 00 b9 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393675	c5 32 39 00 d1 32 39 00 dd 32 39 00 e9 32 39 00
>393685	f5 32 39 00 01 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39368d	0d 33 39 00 19 33 39 00 25 33 39 00 31 33 39 00
>39369d	3d 33 39 00 49 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3936a5	55 33 39 00 61 33 39 00 6d 33 39 00 79 33 39 00
>3936b5	85 33 39 00 91 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3936bd	9d 33 39 00 a9 33 39 00 b5 33 39 00 c1 33 39 00
>3936cd	cd 33 39 00 d9 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936d5	e5 33 39 00 f1 33 39 00 fd 33 39 00 09 34 39 00
>3936e5	15 34 39 00 21 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936ed	2d 34 39 00 39 34 39 00 45 34 39 00 51 34 39 00
>3936fd	5d 34 39 00 69 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393705	75 34 39 00 81 34 39 00 8d 34 39 00 99 34 39 00
>393715	a5 34 39 00 b1 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>39371d	bd 34 39 00 c9 34 39 00 d5 34 39 00 e1 34 39 00
>39372d	ed 34 39 00 f9 34 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393735	05 35 39 00 11 35 39 00 1d 35 39 00 29 35 39 00
>393745	35 35 39 00 41 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>39374d	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393755					IOPL2_TONE_TEST
.393755	e2 20		sep #$20	                SEP #$20        ; set A short
.393757	c2 10		rep #$10	                REP #$10        ; set X long
.393759	a2 00 00	ldx #$0000	                LDX #0
.39375c					OPL2_TONE_TESTING_L1
.39375c	bf 4d 37 39	lda $39374d,x	                LDA NOTE_INTRO, X
.393760	29 0f		and #$0f	                AND #$F
.393762	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393764	bf 4d 37 39	lda $39374d,x	                LDA NOTE_INTRO, X
.393768	29 70		and #$70	                AND #$70
.39376a	4a		lsr a		                LSR A
.39376b	4a		lsr a		                LSR A
.39376c	4a		lsr a		                LSR A
.39376d	4a		lsr a		                LSR A
.39376e	85 31		sta $31		                STA OPL2_OCTAVE
.393770	8a		txa		                TXA
.393771	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393773	85 27		sta $27		                STA OPL2_CHANNEL
.393775	22 45 39 39	jsl $393945	                JSL OPL2_PLAYNOTE
.393779	a0 00 00	ldy #$0000	                LDY #$0000
.39377c					OPL2_TONE_TESTING_L2
.39377c	ea		nop		                NOP
.39377d	ea		nop		                NOP
.39377e	ea		nop		                NOP
.39377f	ea		nop		                NOP
.393780	c8		iny		                INY
.393781	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393784	d0 f6		bne $39377c	                BNE OPL2_TONE_TESTING_L2
.393786	e8		inx		                INX
.393787	e0 08 00	cpx #$0008	                CPX #8
.39378a	d0 d0		bne $39375c	                BNE OPL2_TONE_TESTING_L1
.39378c	6b		rtl		                RTL
.39378d					OPL2_INIT
.39378d	c2 20		rep #$20	                REP #$20        ; set A long
.39378f	a9 00 00	lda #$0000	                LDA #$0000
.393792	85 28		sta $28		                STA OPL2_REG_REGION
.393794	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393796	85 30		sta $30		                STA OPL2_NOTE
.393798	85 32		sta $32		                STA OPL2_PARAMETER0
.39379a	85 34		sta $34		                STA OPL2_PARAMETER2
.39379c	a9 17 17	lda #$1717	                LDA #<>INSTRUMENT_ACCORDN
.39379f	85 50		sta $50		                STA RAD_ADDR
.3937a1	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3937a4	85 52		sta $52		                STA RAD_ADDR + 2
.3937a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3937a8	6b		rtl		                RTL
.3937a9					OPL2_Reset
.3937a9	6b		rtl		                RTL
.3937aa					OPL2_Get_FrequencyBlock
.3937aa	6b		rtl		                RTL
.3937ab					OPL2_GET_REGISTER
.3937ab	48		pha		                PHA             ; begin setdp macro
.3937ac	08		php		                PHP
.3937ad	c2 20		rep #$20	                REP #$20        ; set A long
.3937af	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b2	5b		tcd		                TCD
.3937b3	28		plp		                PLP
.3937b4	68		pla		                PLA             ; end setdp macro
.3937b5	c2 20		rep #$20	                REP #$20        ; set A long
.3937b7	18		clc		              CLC
.3937b8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937bb	65 32		adc $32		              ADC OPL2_PARAMETER0
.3937bd	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937bf	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937c2	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3937c6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937c8	6b		rtl		              RTL
.3937c9					OPL2_GET_WAVEFORM_SELECT
.3937c9	48		pha		                PHA             ; begin setdp macro
.3937ca	08		php		                PHP
.3937cb	c2 20		rep #$20	                REP #$20        ; set A long
.3937cd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937d0	5b		tcd		                TCD
.3937d1	28		plp		                PLP
.3937d2	68		pla		                PLA             ; end setdp macro
.3937d3	c2 20		rep #$20	                REP #$20        ; set A long
.3937d5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937d8	69 01 00	adc #$0001	              ADC #$0001
.3937db	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937dd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937e0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3937e4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937e6	29 20		and #$20	              AND #$20
.3937e8	6b		rtl		              RTL
.3937e9					OPL2_GET_SCALINGLEVEL
.3937e9	48		pha		                PHA             ; begin setdp macro
.3937ea	08		php		                PHP
.3937eb	c2 20		rep #$20	                REP #$20        ; set A long
.3937ed	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937f0	5b		tcd		                TCD
.3937f1	28		plp		                PLP
.3937f2	68		pla		                PLA             ; end setdp macro
.3937f3	c2 20		rep #$20	                REP #$20        ; set A long
.3937f5	a9 40 00	lda #$0040	              LDA #$0040  ;
.3937f8	85 28		sta $28		              STA OPL2_REG_REGION
.3937fa	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.3937fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3937ff	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393801	29 c0		and #$c0	              AND #$C0
.393803	4a		lsr a		              LSR A
.393804	4a		lsr a		              LSR A
.393805	4a		lsr a		              LSR A
.393806	4a		lsr a		              LSR A
.393807	4a		lsr a		              LSR A
.393808	4a		lsr a		              LSR A
.393809	6b		rtl		              RTL
.39380a					OPL2_GET_BLOCK
.39380a	48		pha		                PHA             ; begin setdp macro
.39380b	08		php		                PHP
.39380c	c2 20		rep #$20	                REP #$20        ; set A long
.39380e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393811	5b		tcd		                TCD
.393812	28		plp		                PLP
.393813	68		pla		                PLA             ; end setdp macro
.393814	e2 20		sep #$20	                SEP #$20        ; set A short
.393816	18		clc		              CLC
.393817	a5 27		lda $27		              LDA OPL2_CHANNEL
.393819	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39381b	69 b0		adc #$b0	              ADC #$B0
.39381d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39381f	a9 00		lda #$00	              LDA #$00
.393821	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393823	c2 30		rep #$30	                REP #$30        ; set A&X long
.393825	18		clc		              CLC
.393826	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393829	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39382b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39382d	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393830	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393832	e2 20		sep #$20	                SEP #$20        ; set A short
.393834	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393836	29 1c		and #$1c	              AND #$1C
.393838	4a		lsr a		              LSR A
.393839	4a		lsr a		              LSR A
.39383a	6b		rtl		              RTL
.39383b					OPL2_GET_KEYON
.39383b	48		pha		                PHA             ; begin setdp macro
.39383c	08		php		                PHP
.39383d	c2 20		rep #$20	                REP #$20        ; set A long
.39383f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393842	5b		tcd		                TCD
.393843	28		plp		                PLP
.393844	68		pla		                PLA             ; end setdp macro
.393845	e2 20		sep #$20	                SEP #$20        ; set A short
.393847	18		clc		              CLC
.393848	a5 27		lda $27		              LDA OPL2_CHANNEL
.39384a	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39384c	69 b0		adc #$b0	              ADC #$B0
.39384e	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393850	a9 00		lda #$00	              LDA #$00
.393852	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393854	c2 30		rep #$30	                REP #$30        ; set A&X long
.393856	18		clc		              CLC
.393857	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39385a	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39385c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39385e	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393861	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393863	e2 20		sep #$20	                SEP #$20        ; set A short
.393865	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393867	29 20		and #$20	              AND #$20
.393869	6b		rtl		              RTL
.39386a					OPL2_GET_FEEDBACK
.39386a	48		pha		                PHA             ; begin setdp macro
.39386b	08		php		                PHP
.39386c	c2 20		rep #$20	                REP #$20        ; set A long
.39386e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393871	5b		tcd		                TCD
.393872	28		plp		                PLP
.393873	68		pla		                PLA             ; end setdp macro
.393874	e2 20		sep #$20	                SEP #$20        ; set A short
.393876	18		clc		              CLC
.393877	a5 27		lda $27		              LDA OPL2_CHANNEL
.393879	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39387b	69 c0		adc #$c0	              ADC #$C0
.39387d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39387f	a9 00		lda #$00	              LDA #$00
.393881	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393883	c2 30		rep #$30	                REP #$30        ; set A&X long
.393885	18		clc		              CLC
.393886	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393889	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39388b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39388d	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393890	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393892	e2 20		sep #$20	                SEP #$20        ; set A short
.393894	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393896	29 e0		and #$e0	              AND #$E0
.393898	4a		lsr a		              LSR
.393899	6b		rtl		              RTL
.39389a					OPL2_GET_SYNTHMODE
.39389a	48		pha		                PHA             ; begin setdp macro
.39389b	08		php		                PHP
.39389c	c2 20		rep #$20	                REP #$20        ; set A long
.39389e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938a1	5b		tcd		                TCD
.3938a2	28		plp		                PLP
.3938a3	68		pla		                PLA             ; end setdp macro
.3938a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938a6	18		clc		              CLC
.3938a7	a5 27		lda $27		              LDA OPL2_CHANNEL
.3938a9	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938ab	69 c0		adc #$c0	              ADC #$C0
.3938ad	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938af	a9 00		lda #$00	              LDA #$00
.3938b1	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3938b5	18		clc		              CLC
.3938b6	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938b9	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938bb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938bd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938c0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938c6	29 01		and #$01	              AND #$01
.3938c8	6b		rtl		              RTL
.3938c9					OPL2_GET_DEEPTREMOLO
.3938c9	48		pha		                PHA             ; begin setdp macro
.3938ca	08		php		                PHP
.3938cb	c2 20		rep #$20	                REP #$20        ; set A long
.3938cd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938d0	5b		tcd		                TCD
.3938d1	28		plp		                PLP
.3938d2	68		pla		                PLA             ; end setdp macro
.3938d3	c2 20		rep #$20	                REP #$20        ; set A long
.3938d5	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938d8	85 28		sta $28		              STA OPL2_REG_REGION
.3938da	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.3938dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3938df	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e1	29 80		and #$80	              AND #$80
.3938e3	6b		rtl		              RTL
.3938e4					OPL2_GET_DEEPVIBRATO
.3938e4	48		pha		                PHA             ; begin setdp macro
.3938e5	08		php		                PHP
.3938e6	c2 20		rep #$20	                REP #$20        ; set A long
.3938e8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938eb	5b		tcd		                TCD
.3938ec	28		plp		                PLP
.3938ed	68		pla		                PLA             ; end setdp macro
.3938ee	c2 20		rep #$20	                REP #$20        ; set A long
.3938f0	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938f3	69 bd 00	adc #$00bd	              ADC #$00BD
.3938f6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938f8	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938fb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3938ff	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393901	29 40		and #$40	              AND #$40
.393903	6b		rtl		              RTL
.393904					OPL2_GET_PERCUSSION
.393904	48		pha		                PHA             ; begin setdp macro
.393905	08		php		                PHP
.393906	c2 20		rep #$20	                REP #$20        ; set A long
.393908	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39390b	5b		tcd		                TCD
.39390c	28		plp		                PLP
.39390d	68		pla		                PLA             ; end setdp macro
.39390e	c2 20		rep #$20	                REP #$20        ; set A long
.393910	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393913	69 bd 00	adc #$00bd	              ADC #$00BD
.393916	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393918	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39391b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39391d	e2 20		sep #$20	                SEP #$20        ; set A short
.39391f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393921	29 20		and #$20	              AND #$20
.393923	6b		rtl		              RTL
.393924					OPL2_GET_DRUMS
.393924	48		pha		                PHA             ; begin setdp macro
.393925	08		php		                PHP
.393926	c2 20		rep #$20	                REP #$20        ; set A long
.393928	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39392b	5b		tcd		                TCD
.39392c	28		plp		                PLP
.39392d	68		pla		                PLA             ; end setdp macro
.39392e	c2 20		rep #$20	                REP #$20        ; set A long
.393930	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393933	69 bd 00	adc #$00bd	              ADC #$00BD
.393936	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393938	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39393b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39393d	e2 20		sep #$20	                SEP #$20        ; set A short
.39393f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393941	29 1f		and #$1f	              AND #$1F
.393943	6b		rtl		              RTL
.393944					OPL2_Get_WaveForm
.393944	6b		rtl		                RTL
.393945					OPL2_PLAYNOTE
.393945	48		pha		                PHA             ; begin setdp macro
.393946	08		php		                PHP
.393947	c2 20		rep #$20	                REP #$20        ; set A long
.393949	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39394c	5b		tcd		                TCD
.39394d	28		plp		                PLP
.39394e	68		pla		                PLA             ; end setdp macro
.39394f	e2 20		sep #$20	                SEP #$20        ; set A short
.393951	da		phx		                PHX
.393952	a9 00		lda #$00	                LDA #$00
.393954	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393956	20 2d 3f	jsr $393f2d	                JSR OPL2_SET_KEYON
.393959	20 f2 3e	jsr $393ef2	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39395c	e2 10		sep #$10	                SEP #$10        ; set X short
.39395e	a5 30		lda $30		                LDA OPL2_NOTE
.393960	3a		dec a		                DEC A
.393961	0a		asl a		                ASL A
.393962	aa		tax		                TAX
.393963	bf dc 16 39	lda $3916dc,x	                LDA @lnoteFNumbers,X
.393967	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.393969	e8		inx		                INX
.39396a	bf dc 16 39	lda $3916dc,x	                LDA @lnoteFNumbers,X
.39396e	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393970	22 70 3e 39	jsl $393e70	                JSL OPL2_SET_FNUMBER
.393974	a9 01		lda #$01	                LDA #$01
.393976	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393978	20 2d 3f	jsr $393f2d	                JSR OPL2_SET_KEYON
.39397b	c2 10		rep #$10	                REP #$10        ; set X long
.39397d	fa		plx		                PLX
.39397e	6b		rtl		                RTL
.39397f					OPL2_PLAYDRUM
.39397f	6b		rtl		                RTL
.393980					OPL2_SET_INSTRUMENT
.393980	48		pha		                PHA             ; begin setdp macro
.393981	08		php		                PHP
.393982	c2 20		rep #$20	                REP #$20        ; set A long
.393984	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393987	5b		tcd		                TCD
.393988	28		plp		                PLP
.393989	68		pla		                PLA             ; end setdp macro
.39398a	38		sec		              SEC ; Set the WaveFormSelect to True
.39398b	22 6e 3b 39	jsl $393b6e	              JSL OPL2_SET_WAVEFORMSELECT;
.39398f	e2 20		sep #$20	                SEP #$20        ; set A short
.393991	c2 10		rep #$10	                REP #$10        ; set X long
.393993	a0 00 00	ldy #$0000	              LDY #$0000
.393996	a2 00 00	ldx #$0000	              LDX #$0000
.393999	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39399b	85 35		sta $35		              STA OPL2_PARAMETER3
.39399d	c8		iny		              INY
.39399e	c9 06		cmp #$06	              CMP #$06
.3939a0	d0 03		bne $3939a5	              BNE PERCUSSION_NEXT07
.3939a2	82 70 01	brl $393b15	              BRL Percussion_6
.3939a5					PERCUSSION_NEXT07
.3939a5	c9 07		cmp #$07	              CMP #$07
.3939a7	d0 03		bne $3939ac	              BNE PERCUSSION_NEXT08
.3939a9	82 44 01	brl $393af0	              BRL Percussion_7
.3939ac					PERCUSSION_NEXT08
.3939ac	c9 08		cmp #$08	              CMP #$08
.3939ae	d0 03		bne $3939b3	              BNE PERCUSSION_NEXT09
.3939b0	82 18 01	brl $393acb	              BRL Percussion_8
.3939b3					PERCUSSION_NEXT09
.3939b3	c9 09		cmp #$09	              CMP #$09
.3939b5	d0 03		bne $3939ba	              BNE PERCUSSION_NEXT0A
.3939b7	82 ec 00	brl $393aa6	              BRL Percussion_9
.3939ba					PERCUSSION_NEXT0A
.3939ba	c9 0a		cmp #$0a	              CMP #$0A
.3939bc	d0 03		bne $3939c1	              BNE Percussion_Default
.3939be	82 c0 00	brl $393a81	              BRL Percussion_A
.3939c1					Percussion_Default
.3939c1	a9 00		lda #$00	              LDA #$00
.3939c3	85 26		sta $26		              STA OPL2_OPERATOR
.3939c5	c2 20		rep #$20	                REP #$20        ; set A long
.3939c7	a9 20 00	lda #$0020	              LDA #$0020;
.3939ca	85 28		sta $28		              STA OPL2_REG_REGION
.3939cc	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.3939cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3939d1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939d3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939d5	c8		iny		              INY
.3939d6	c2 20		rep #$20	                REP #$20        ; set A long
.3939d8	a9 40 00	lda #$0040	              LDA #$0040;
.3939db	85 28		sta $28		              STA OPL2_REG_REGION
.3939dd	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.3939e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3939e2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939e4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939e6	c8		iny		              INY
.3939e7	c2 20		rep #$20	                REP #$20        ; set A long
.3939e9	a9 60 00	lda #$0060	              LDA #$0060;
.3939ec	85 28		sta $28		              STA OPL2_REG_REGION
.3939ee	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.3939f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3939f3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939f5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939f7	c8		iny		              INY
.3939f8	c2 20		rep #$20	                REP #$20        ; set A long
.3939fa	a9 80 00	lda #$0080	              LDA #$0080;
.3939fd	85 28		sta $28		              STA OPL2_REG_REGION
.3939ff	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a02	e2 20		sep #$20	                SEP #$20        ; set A short
.393a04	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a06	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a08	c8		iny		              INY
.393a09	c2 20		rep #$20	                REP #$20        ; set A long
.393a0b	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a0e	85 28		sta $28		              STA OPL2_REG_REGION
.393a10	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a13	e2 20		sep #$20	                SEP #$20        ; set A short
.393a15	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a17	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a19	c8		iny		              INY
.393a1a	e2 10		sep #$10	                SEP #$10        ; set X short
.393a1c	a5 27		lda $27		              LDA OPL2_CHANNEL
.393a1e	29 0f		and #$0f	              AND #$0F
.393a20	aa		tax		              TAX
.393a21	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a23	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a27	c8		iny		              INY
.393a28	a9 01		lda #$01	              LDA #$01
.393a2a	85 26		sta $26		              STA OPL2_OPERATOR
.393a2c	c2 20		rep #$20	                REP #$20        ; set A long
.393a2e	a9 20 00	lda #$0020	              LDA #$0020;
.393a31	85 28		sta $28		              STA OPL2_REG_REGION
.393a33	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a36	e2 20		sep #$20	                SEP #$20        ; set A short
.393a38	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a3a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a3c	c8		iny		              INY
.393a3d	c2 20		rep #$20	                REP #$20        ; set A long
.393a3f	a9 40 00	lda #$0040	              LDA #$0040;
.393a42	85 28		sta $28		              STA OPL2_REG_REGION
.393a44	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a47	e2 20		sep #$20	                SEP #$20        ; set A short
.393a49	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a4b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a4d	c8		iny		              INY
.393a4e	c2 20		rep #$20	                REP #$20        ; set A long
.393a50	a9 60 00	lda #$0060	              LDA #$0060;
.393a53	85 28		sta $28		              STA OPL2_REG_REGION
.393a55	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a58	e2 20		sep #$20	                SEP #$20        ; set A short
.393a5a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a5c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a5e	c8		iny		              INY
.393a5f	c2 20		rep #$20	                REP #$20        ; set A long
.393a61	a9 80 00	lda #$0080	              LDA #$0080;
.393a64	85 28		sta $28		              STA OPL2_REG_REGION
.393a66	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a69	e2 20		sep #$20	                SEP #$20        ; set A short
.393a6b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a6d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a6f	c8		iny		              INY
.393a70	c2 20		rep #$20	                REP #$20        ; set A long
.393a72	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a75	85 28		sta $28		              STA OPL2_REG_REGION
.393a77	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393a7a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a7c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a7e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a80	6b		rtl		                RTL
.393a81					Percussion_A
.393a81	e2 20		sep #$20	                SEP #$20        ; set A short
.393a83	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a85	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a89	c8		iny		              INY
.393a8a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a8c	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a90	c8		iny		              INY
.393a91	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a93	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393a97	c8		iny		              INY
.393a98	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a9a	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393a9e	c8		iny		              INY
.393a9f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393aa1	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393aa5	6b		rtl		                RTL
.393aa6					Percussion_9
.393aa6	e2 20		sep #$20	                SEP #$20        ; set A short
.393aa8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393aaa	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393aae	c8		iny		              INY
.393aaf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ab1	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393ab5	c8		iny		              INY
.393ab6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ab8	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393abc	c8		iny		              INY
.393abd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393abf	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393ac3	c8		iny		              INY
.393ac4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ac6	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393aca	6b		rtl		              RTL
.393acb					Percussion_8
.393acb	e2 20		sep #$20	                SEP #$20        ; set A short
.393acd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393acf	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393ad3	c8		iny		              INY
.393ad4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ad6	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393ada	c8		iny		              INY
.393adb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393add	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393ae1	c8		iny		              INY
.393ae2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ae4	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393ae8	c8		iny		              INY
.393ae9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393aeb	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393aef	6b		rtl		              RTL
.393af0					Percussion_7
.393af0	e2 20		sep #$20	                SEP #$20        ; set A short
.393af2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393af4	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393af8	c8		iny		              INY
.393af9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393afb	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393aff	c8		iny		              INY
.393b00	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b02	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b06	c8		iny		              INY
.393b07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b09	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b0d	c8		iny		              INY
.393b0e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b10	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b14	6b		rtl		              RTL
.393b15					Percussion_6
.393b15	e2 20		sep #$20	                SEP #$20        ; set A short
.393b17	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b19	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b1d	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b21	c8		iny		              INY
.393b22	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b24	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b28	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b2c	c8		iny		              INY
.393b2d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b2f	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b33	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b37	c8		iny		              INY
.393b38	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b3a	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b3e	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b42	c8		iny		              INY
.393b43	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b45	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b49	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b4d	6b		rtl		              RTL
.393b4e					OPL2_SET_REGISTER
.393b4e	48		pha		                PHA             ; begin setdp macro
.393b4f	08		php		                PHP
.393b50	c2 20		rep #$20	                REP #$20        ; set A long
.393b52	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b55	5b		tcd		                TCD
.393b56	28		plp		                PLP
.393b57	68		pla		                PLA             ; end setdp macro
.393b58	c2 20		rep #$20	                REP #$20        ; set A long
.393b5a	18		clc		              CLC
.393b5b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b5e	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b60	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b62	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b65	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b67	e2 20		sep #$20	                SEP #$20        ; set A short
.393b69	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b6b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b6d	6b		rtl		              RTL
.393b6e					OPL2_SET_WAVEFORMSELECT
.393b6e	48		pha		                PHA             ; begin setdp macro
.393b6f	08		php		                PHP
.393b70	c2 20		rep #$20	                REP #$20        ; set A long
.393b72	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b75	5b		tcd		                TCD
.393b76	28		plp		                PLP
.393b77	68		pla		                PLA             ; end setdp macro
.393b78	c2 20		rep #$20	                REP #$20        ; set A long
.393b7a	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b7d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b7f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b82	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b84	e2 20		sep #$20	                SEP #$20        ; set A short
.393b86	b0 07		bcs $393b8f	              BCS OPL2_Set_WaveFormSelect_set
.393b88	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b8a	29 df		and #$df	              AND #$DF
.393b8c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b8e	6b		rtl		              RTL
.393b8f					OPL2_Set_WaveFormSelect_set
.393b8f	48		pha		                PHA             ; begin setdp macro
.393b90	08		php		                PHP
.393b91	c2 20		rep #$20	                REP #$20        ; set A long
.393b93	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b96	5b		tcd		                TCD
.393b97	28		plp		                PLP
.393b98	68		pla		                PLA             ; end setdp macro
.393b99	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b9b	09 20 00	ora #$0020	              ORA #$20
.393b9e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ba0	6b		rtl		                RTL
.393ba1					OPL2_SET_TREMOLO
.393ba1	48		pha		                PHA             ; begin setdp macro
.393ba2	08		php		                PHP
.393ba3	c2 20		rep #$20	                REP #$20        ; set A long
.393ba5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba8	5b		tcd		                TCD
.393ba9	28		plp		                PLP
.393baa	68		pla		                PLA             ; end setdp macro
.393bab	08		php		                PHP ; Push the Carry
.393bac	c2 20		rep #$20	                REP #$20        ; set A long
.393bae	18		clc		                CLC
.393baf	a9 20 00	lda #$0020	                LDA #$0020 ;
.393bb2	85 28		sta $28		                STA OPL2_REG_REGION
.393bb4	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393bb7	28		plp		                PLP ; Pull the Carry out
.393bb8	e2 20		sep #$20	                SEP #$20        ; set A short
.393bba	b0 08		bcs $393bc4	                BCS OPL2_Set_Tremolo_Set;
.393bbc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bbe	29 7f		and #$7f	                AND #$7F
.393bc0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bc2	80 06		bra $393bca	                BRA OPL2_Set_Tremolo_Exit
.393bc4					OPL2_Set_Tremolo_Set
.393bc4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc6	09 80		ora #$80	                ORA #$80
.393bc8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bca					OPL2_Set_Tremolo_Exit
.393bca	6b		rtl		                RTL
.393bcb					OPL2_GET_TREMOLO
.393bcb	48		pha		                PHA             ; begin setdp macro
.393bcc	08		php		                PHP
.393bcd	c2 20		rep #$20	                REP #$20        ; set A long
.393bcf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bd2	5b		tcd		                TCD
.393bd3	28		plp		                PLP
.393bd4	68		pla		                PLA             ; end setdp macro
.393bd5	c2 20		rep #$20	                REP #$20        ; set A long
.393bd7	a9 20 00	lda #$0020	                LDA #$0020;
.393bda	85 28		sta $28		                STA OPL2_REG_REGION
.393bdc	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393bdf	e2 20		sep #$20	                SEP #$20        ; set A short
.393be1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393be3	29 80		and #$80	                AND #$80
.393be5	6b		rtl		                RTL
.393be6					OPL2_SET_VIBRATO
.393be6	48		pha		                PHA             ; begin setdp macro
.393be7	08		php		                PHP
.393be8	c2 20		rep #$20	                REP #$20        ; set A long
.393bea	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bed	5b		tcd		                TCD
.393bee	28		plp		                PLP
.393bef	68		pla		                PLA             ; end setdp macro
.393bf0	08		php		                PHP ; Push the Carry
.393bf1	c2 20		rep #$20	                REP #$20        ; set A long
.393bf3	18		clc		                CLC
.393bf4	a9 20 00	lda #$0020	                LDA #$0020;
.393bf7	85 28		sta $28		                STA OPL2_REG_REGION
.393bf9	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393bfc	28		plp		                PLP ; Pull the Carry out
.393bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.393bff	b0 08		bcs $393c09	                BCS OPL2_Set_Vibrato_Set;
.393c01	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c03	29 bf		and #$bf	                AND #$BF
.393c05	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c07	80 06		bra $393c0f	                BRA OPL2_Set_Vibrato_Exit
.393c09					OPL2_Set_Vibrato_Set
.393c09	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0b	09 40		ora #$40	                ORA #$40
.393c0d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c0f					OPL2_Set_Vibrato_Exit
.393c0f	6b		rtl		                RTL
.393c10					OPL2_GET_VIBRATO
.393c10	48		pha		                PHA             ; begin setdp macro
.393c11	08		php		                PHP
.393c12	c2 20		rep #$20	                REP #$20        ; set A long
.393c14	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c17	5b		tcd		                TCD
.393c18	28		plp		                PLP
.393c19	68		pla		                PLA             ; end setdp macro
.393c1a	c2 20		rep #$20	                REP #$20        ; set A long
.393c1c	a9 20 00	lda #$0020	                LDA #$0020;
.393c1f	85 28		sta $28		                STA OPL2_REG_REGION
.393c21	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393c24	e2 20		sep #$20	                SEP #$20        ; set A short
.393c26	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c28	29 40		and #$40	                AND #$40
.393c2a	6b		rtl		                RTL
.393c2b					OPL2_SET_MAINTAINSUSTAIN
.393c2b	48		pha		                PHA             ; begin setdp macro
.393c2c	08		php		                PHP
.393c2d	c2 20		rep #$20	                REP #$20        ; set A long
.393c2f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c32	5b		tcd		                TCD
.393c33	28		plp		                PLP
.393c34	68		pla		                PLA             ; end setdp macro
.393c35	08		php		              PHP ; Push the Carry
.393c36	c2 20		rep #$20	                REP #$20        ; set A long
.393c38	18		clc		              CLC
.393c39	a9 20 00	lda #$0020	              LDA #$0020;
.393c3c	85 28		sta $28		              STA OPL2_REG_REGION
.393c3e	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393c41	28		plp		              PLP ; Pull the Carry out
.393c42	e2 20		sep #$20	                SEP #$20        ; set A short
.393c44	b0 08		bcs $393c4e	              BCS OPL2_Set_MaintainSustain_Set;
.393c46	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c48	29 df		and #$df	              AND #$DF
.393c4a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c4c	80 06		bra $393c54	              BRA OPL2_Set_MaintainSustain_Exit
.393c4e					OPL2_Set_MaintainSustain_Set
.393c4e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c50	09 20		ora #$20	              ORA #$20
.393c52	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c54					OPL2_Set_MaintainSustain_Exit
.393c54	6b		rtl		                RTL
.393c55					OPL2_GET_MAINTAINSUSTAIN
.393c55	48		pha		                PHA             ; begin setdp macro
.393c56	08		php		                PHP
.393c57	c2 20		rep #$20	                REP #$20        ; set A long
.393c59	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c5c	5b		tcd		                TCD
.393c5d	28		plp		                PLP
.393c5e	68		pla		                PLA             ; end setdp macro
.393c5f	c2 20		rep #$20	                REP #$20        ; set A long
.393c61	a9 20 00	lda #$0020	              LDA #$0020;
.393c64	85 28		sta $28		              STA OPL2_REG_REGION
.393c66	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393c69	e2 20		sep #$20	                SEP #$20        ; set A short
.393c6b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c6d	29 20		and #$20	              AND #$20
.393c6f	6b		rtl		                RTL
.393c70					OPL2_SET_ENVELOPESCALING
.393c70	48		pha		                PHA             ; begin setdp macro
.393c71	08		php		                PHP
.393c72	c2 20		rep #$20	                REP #$20        ; set A long
.393c74	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c77	5b		tcd		                TCD
.393c78	28		plp		                PLP
.393c79	68		pla		                PLA             ; end setdp macro
.393c7a	08		php		              PHP ; Push the Carry
.393c7b	c2 20		rep #$20	                REP #$20        ; set A long
.393c7d	18		clc		              CLC
.393c7e	a9 20 00	lda #$0020	              LDA #$0020;
.393c81	85 28		sta $28		              STA OPL2_REG_REGION
.393c83	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393c86	28		plp		              PLP ; Pull the Carry out
.393c87	e2 20		sep #$20	                SEP #$20        ; set A short
.393c89	b0 08		bcs $393c93	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c8b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c8d	29 ef		and #$ef	              AND #$EF
.393c8f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c91	80 06		bra $393c99	              BRA OPL2_Set_EnvelopeScaling_Exit
.393c93					OPL2_Set_EnvelopeScaling_Set
.393c93	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c95	09 10		ora #$10	              ORA #$10
.393c97	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c99					OPL2_Set_EnvelopeScaling_Exit
.393c99	6b		rtl		                RTL
.393c9a					OPL2_GET_ENVELOPESCALING
.393c9a	48		pha		                PHA             ; begin setdp macro
.393c9b	08		php		                PHP
.393c9c	c2 20		rep #$20	                REP #$20        ; set A long
.393c9e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca1	5b		tcd		                TCD
.393ca2	28		plp		                PLP
.393ca3	68		pla		                PLA             ; end setdp macro
.393ca4	c2 20		rep #$20	                REP #$20        ; set A long
.393ca6	a9 20 00	lda #$0020	              LDA #$0020;
.393ca9	85 28		sta $28		              STA OPL2_REG_REGION
.393cab	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393cae	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cb2	29 10		and #$10	              AND #$10
.393cb4	6b		rtl		                RTL
.393cb5					OPL2_GET_MODFREQMULTIPLE
.393cb5	48		pha		                PHA             ; begin setdp macro
.393cb6	08		php		                PHP
.393cb7	c2 20		rep #$20	                REP #$20        ; set A long
.393cb9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cbc	5b		tcd		                TCD
.393cbd	28		plp		                PLP
.393cbe	68		pla		                PLA             ; end setdp macro
.393cbf	c2 20		rep #$20	                REP #$20        ; set A long
.393cc1	a9 20 00	lda #$0020	              LDA #$0020;
.393cc4	85 28		sta $28		              STA OPL2_REG_REGION
.393cc6	20 ac 40	jsr $3940ac	              JSR OPL2_GET_REG_OFFSET
.393cc9	e2 20		sep #$20	                SEP #$20        ; set A short
.393ccb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ccd	29 0f		and #$0f	              AND #$0F
.393ccf	6b		rtl		              RTL
.393cd0					OPL2_SET_MODFREQMULTIPLE
.393cd0	48		pha		                PHA             ; begin setdp macro
.393cd1	08		php		                PHP
.393cd2	c2 20		rep #$20	                REP #$20        ; set A long
.393cd4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cd7	5b		tcd		                TCD
.393cd8	28		plp		                PLP
.393cd9	68		pla		                PLA             ; end setdp macro
.393cda	c2 20		rep #$20	                REP #$20        ; set A long
.393cdc	a9 20 00	lda #$0020	                LDA #$0020;
.393cdf	85 28		sta $28		                STA OPL2_REG_REGION
.393ce1	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393ce4	e2 20		sep #$20	                SEP #$20        ; set A short
.393ce6	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393ce8	29 0f		and #$0f	                AND #$0F
.393cea	85 32		sta $32		                STA OPL2_PARAMETER0
.393cec	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cee	29 f0		and #$f0	                AND #$F0
.393cf0	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cf2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cf4	6b		rtl		                RTL
.393cf5					OPL2_SET_SCALINGLEVEL
.393cf5	48		pha		                PHA             ; begin setdp macro
.393cf6	08		php		                PHP
.393cf7	c2 20		rep #$20	                REP #$20        ; set A long
.393cf9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cfc	5b		tcd		                TCD
.393cfd	28		plp		                PLP
.393cfe	68		pla		                PLA             ; end setdp macro
.393cff	c2 20		rep #$20	                REP #$20        ; set A long
.393d01	a9 40 00	lda #$0040	                LDA #$0040;
.393d04	85 28		sta $28		                STA OPL2_REG_REGION
.393d06	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393d09	e2 20		sep #$20	                SEP #$20        ; set A short
.393d0b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d0d	29 03		and #$03	                AND #$03
.393d0f	0a		asl a		                ASL
.393d10	0a		asl a		                ASL
.393d11	0a		asl a		                ASL
.393d12	0a		asl a		                ASL
.393d13	0a		asl a		                ASL
.393d14	0a		asl a		                ASL
.393d15	85 32		sta $32		                STA OPL2_PARAMETER0
.393d17	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d19	29 3f		and #$3f	                AND #$3F
.393d1b	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d1d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d1f	6b		rtl		                RTL
.393d20					OPL2_SET_VOLUME
.393d20	48		pha		                PHA             ; begin setdp macro
.393d21	08		php		                PHP
.393d22	c2 20		rep #$20	                REP #$20        ; set A long
.393d24	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d27	5b		tcd		                TCD
.393d28	28		plp		                PLP
.393d29	68		pla		                PLA             ; end setdp macro
.393d2a	c2 20		rep #$20	                REP #$20        ; set A long
.393d2c	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d2f	85 28		sta $28		                STA OPL2_REG_REGION
.393d31	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393d34	e2 20		sep #$20	                SEP #$20        ; set A short
.393d36	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d38	29 3f		and #$3f	                AND #$3F
.393d3a	85 32		sta $32		                STA OPL2_PARAMETER0
.393d3c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d3e	29 c0		and #$c0	                AND #$C0
.393d40	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d42	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d44	6b		rtl		                RTL
.393d45					OPL2_GET_VOLUME
.393d45	48		pha		                PHA             ; begin setdp macro
.393d46	08		php		                PHP
.393d47	c2 20		rep #$20	                REP #$20        ; set A long
.393d49	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d4c	5b		tcd		                TCD
.393d4d	28		plp		                PLP
.393d4e	68		pla		                PLA             ; end setdp macro
.393d4f	c2 20		rep #$20	                REP #$20        ; set A long
.393d51	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d54	85 28		sta $28		                STA OPL2_REG_REGION
.393d56	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393d59	e2 20		sep #$20	                SEP #$20        ; set A short
.393d5b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d5d	29 3f		and #$3f	                AND #$3F
.393d5f	6b		rtl		                RTL
.393d60					OPL2_SET_ATTACK
.393d60	48		pha		                PHA             ; begin setdp macro
.393d61	08		php		                PHP
.393d62	c2 20		rep #$20	                REP #$20        ; set A long
.393d64	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d67	5b		tcd		                TCD
.393d68	28		plp		                PLP
.393d69	68		pla		                PLA             ; end setdp macro
.393d6a	c2 20		rep #$20	                REP #$20        ; set A long
.393d6c	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d6f	85 28		sta $28		                STA OPL2_REG_REGION
.393d71	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393d74	e2 20		sep #$20	                SEP #$20        ; set A short
.393d76	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d78	29 0f		and #$0f	                AND #$0F
.393d7a	0a		asl a		                ASL
.393d7b	0a		asl a		                ASL
.393d7c	0a		asl a		                ASL
.393d7d	0a		asl a		                ASL
.393d7e	85 32		sta $32		                STA OPL2_PARAMETER0
.393d80	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d82	29 0f		and #$0f	                AND #$0F
.393d84	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d86	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d88	6b		rtl		                RTL
.393d89					OPL2_GET_ATTACK
.393d89	48		pha		                PHA             ; begin setdp macro
.393d8a	08		php		                PHP
.393d8b	c2 20		rep #$20	                REP #$20        ; set A long
.393d8d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d90	5b		tcd		                TCD
.393d91	28		plp		                PLP
.393d92	68		pla		                PLA             ; end setdp macro
.393d93	c2 20		rep #$20	                REP #$20        ; set A long
.393d95	a9 60 00	lda #$0060	                LDA #$0060
.393d98	85 28		sta $28		                STA OPL2_REG_REGION
.393d9a	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393d9d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d9f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393da1	29 f0		and #$f0	                AND #$F0
.393da3	4a		lsr a		                LSR
.393da4	4a		lsr a		                LSR
.393da5	4a		lsr a		                LSR
.393da6	4a		lsr a		                LSR
.393da7	6b		rtl		                RTL
.393da8					OPL2_SET_DECAY
.393da8	48		pha		                PHA             ; begin setdp macro
.393da9	08		php		                PHP
.393daa	c2 20		rep #$20	                REP #$20        ; set A long
.393dac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393daf	5b		tcd		                TCD
.393db0	28		plp		                PLP
.393db1	68		pla		                PLA             ; end setdp macro
.393db2	c2 20		rep #$20	                REP #$20        ; set A long
.393db4	a9 60 00	lda #$0060	                LDA #$0060;
.393db7	85 28		sta $28		                STA OPL2_REG_REGION
.393db9	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393dbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393dbe	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dc0	29 0f		and #$0f	                AND #$0F
.393dc2	85 32		sta $32		                STA OPL2_PARAMETER0
.393dc4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dc6	29 f0		and #$f0	                AND #$F0
.393dc8	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dca	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dcc	6b		rtl		                RTL
.393dcd					OPL2_GET_DECAY
.393dcd	48		pha		                PHA             ; begin setdp macro
.393dce	08		php		                PHP
.393dcf	c2 20		rep #$20	                REP #$20        ; set A long
.393dd1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dd4	5b		tcd		                TCD
.393dd5	28		plp		                PLP
.393dd6	68		pla		                PLA             ; end setdp macro
.393dd7	c2 20		rep #$20	                REP #$20        ; set A long
.393dd9	a9 60 00	lda #$0060	                LDA #$0060
.393ddc	85 28		sta $28		                STA OPL2_REG_REGION
.393dde	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393de1	e2 20		sep #$20	                SEP #$20        ; set A short
.393de3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393de5	29 0f		and #$0f	                AND #$0F
.393de7	6b		rtl		                RTL
.393de8					OPL2_SET_SUSTAIN
.393de8	48		pha		                PHA             ; begin setdp macro
.393de9	08		php		                PHP
.393dea	c2 20		rep #$20	                REP #$20        ; set A long
.393dec	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393def	5b		tcd		                TCD
.393df0	28		plp		                PLP
.393df1	68		pla		                PLA             ; end setdp macro
.393df2	c2 20		rep #$20	                REP #$20        ; set A long
.393df4	a9 80 00	lda #$0080	                LDA #$0080;
.393df7	85 28		sta $28		                STA OPL2_REG_REGION
.393df9	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393dfc	e2 20		sep #$20	                SEP #$20        ; set A short
.393dfe	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e00	29 0f		and #$0f	                AND #$0F
.393e02	0a		asl a		                ASL
.393e03	0a		asl a		                ASL
.393e04	0a		asl a		                ASL
.393e05	0a		asl a		                ASL
.393e06	85 32		sta $32		                STA OPL2_PARAMETER0
.393e08	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e0a	29 0f		and #$0f	                AND #$0F
.393e0c	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e0e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e10	6b		rtl		                RTL
.393e11					OPL2_GET_SUSTAIN
.393e11	48		pha		                PHA             ; begin setdp macro
.393e12	08		php		                PHP
.393e13	c2 20		rep #$20	                REP #$20        ; set A long
.393e15	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e18	5b		tcd		                TCD
.393e19	28		plp		                PLP
.393e1a	68		pla		                PLA             ; end setdp macro
.393e1b	c2 20		rep #$20	                REP #$20        ; set A long
.393e1d	a9 80 00	lda #$0080	                LDA #$0080
.393e20	85 28		sta $28		                STA OPL2_REG_REGION
.393e22	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393e25	e2 20		sep #$20	                SEP #$20        ; set A short
.393e27	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e29	29 f0		and #$f0	                AND #$F0
.393e2b	4a		lsr a		                LSR
.393e2c	4a		lsr a		                LSR
.393e2d	4a		lsr a		                LSR
.393e2e	4a		lsr a		                LSR
.393e2f	6b		rtl		                RTL
.393e30					OPL2_SET_RELEASE
.393e30	48		pha		                PHA             ; begin setdp macro
.393e31	08		php		                PHP
.393e32	c2 20		rep #$20	                REP #$20        ; set A long
.393e34	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e37	5b		tcd		                TCD
.393e38	28		plp		                PLP
.393e39	68		pla		                PLA             ; end setdp macro
.393e3a	c2 20		rep #$20	                REP #$20        ; set A long
.393e3c	a9 80 00	lda #$0080	                LDA #$0080;
.393e3f	85 28		sta $28		                STA OPL2_REG_REGION
.393e41	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393e44	e2 20		sep #$20	                SEP #$20        ; set A short
.393e46	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e48	29 0f		and #$0f	                AND #$0F
.393e4a	85 32		sta $32		                STA OPL2_PARAMETER0
.393e4c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e4e	29 f0		and #$f0	                AND #$F0
.393e50	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e52	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e54	6b		rtl		                RTL
.393e55					OPL2_GET_RELEASE
.393e55	48		pha		                PHA             ; begin setdp macro
.393e56	08		php		                PHP
.393e57	c2 20		rep #$20	                REP #$20        ; set A long
.393e59	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e5c	5b		tcd		                TCD
.393e5d	28		plp		                PLP
.393e5e	68		pla		                PLA             ; end setdp macro
.393e5f	c2 20		rep #$20	                REP #$20        ; set A long
.393e61	a9 80 00	lda #$0080	                LDA #$0080
.393e64	85 28		sta $28		                STA OPL2_REG_REGION
.393e66	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.393e69	e2 20		sep #$20	                SEP #$20        ; set A short
.393e6b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e6d	29 0f		and #$0f	                AND #$0F
.393e6f	6b		rtl		                RTL
.393e70					OPL2_SET_FNUMBER
.393e70	48		pha		                PHA             ; begin setdp macro
.393e71	08		php		                PHP
.393e72	c2 20		rep #$20	                REP #$20        ; set A long
.393e74	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e77	5b		tcd		                TCD
.393e78	28		plp		                PLP
.393e79	68		pla		                PLA             ; end setdp macro
.393e7a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e7c	18		clc		                CLC
.393e7d	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e7f	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e81	69 a0		adc #$a0	                ADC #$A0
.393e83	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e85	a9 00		lda #$00	                LDA #$00
.393e87	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e89	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e8b	18		clc		                CLC
.393e8c	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e8f	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e91	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e93	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e96	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e98	e2 20		sep #$20	                SEP #$20        ; set A short
.393e9a	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393e9c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393e9e	18		clc		                CLC
.393e9f	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ea1	69 10		adc #$10	                ADC #$10
.393ea3	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ea5	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393ea7	29 03		and #$03	                AND #$03
.393ea9	85 33		sta $33		                STA OPL2_PARAMETER1
.393eab	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ead	29 fc		and #$fc	                AND #$FC
.393eaf	05 33		ora $33		                ORA OPL2_PARAMETER1
.393eb1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393eb3	6b		rtl		                RTL
.393eb4					OPL2_GET_FNUMBER
.393eb4	48		pha		                PHA             ; begin setdp macro
.393eb5	08		php		                PHP
.393eb6	c2 20		rep #$20	                REP #$20        ; set A long
.393eb8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ebb	5b		tcd		                TCD
.393ebc	28		plp		                PLP
.393ebd	68		pla		                PLA             ; end setdp macro
.393ebe	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec0	18		clc		                CLC
.393ec1	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ec3	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ec5	69 a0		adc #$a0	                ADC #$A0
.393ec7	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ec9	a9 00		lda #$00	                LDA #$00
.393ecb	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ecd	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ecf	18		clc		                CLC
.393ed0	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ed3	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ed5	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ed7	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393eda	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393edc	e2 20		sep #$20	                SEP #$20        ; set A short
.393ede	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ee0	85 32		sta $32		                STA OPL2_PARAMETER0
.393ee2	18		clc		                CLC
.393ee3	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ee5	69 10		adc #$10	                ADC #$10
.393ee7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ee9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eeb	29 03		and #$03	                AND #$03
.393eed	85 33		sta $33		                STA OPL2_PARAMETER1
.393eef	6b		rtl		                RTL
.393ef0					OPL2_Set_Frequency
.393ef0	6b		rtl		                RTL
.393ef1					OPL2_Get_Frequency
.393ef1	6b		rtl		                RTL
.393ef2					OPL2_SET_BLOCK
.393ef2	48		pha		                PHA             ; begin setdp macro
.393ef3	08		php		                PHP
.393ef4	c2 20		rep #$20	                REP #$20        ; set A long
.393ef6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ef9	5b		tcd		                TCD
.393efa	28		plp		                PLP
.393efb	68		pla		                PLA             ; end setdp macro
.393efc	e2 20		sep #$20	                SEP #$20        ; set A short
.393efe	18		clc		                CLC
.393eff	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f01	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f03	69 b0		adc #$b0	                ADC #$B0
.393f05	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f07	a9 00		lda #$00	                LDA #$00
.393f09	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f0b	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f0d	18		clc		                CLC
.393f0e	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f11	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f13	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f15	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f18	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f1a	e2 20		sep #$20	                SEP #$20        ; set A short
.393f1c	a5 31		lda $31		                LDA OPL2_OCTAVE
.393f1e	29 07		and #$07	                AND #$07
.393f20	0a		asl a		                ASL
.393f21	0a		asl a		                ASL
.393f22	85 31		sta $31		                STA OPL2_OCTAVE
.393f24	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f26	29 e3		and #$e3	                AND #$E3
.393f28	05 31		ora $31		                ORA OPL2_OCTAVE
.393f2a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f2c	60		rts		                RTS
.393f2d					OPL2_SET_KEYON
.393f2d	48		pha		                PHA             ; begin setdp macro
.393f2e	08		php		                PHP
.393f2f	c2 20		rep #$20	                REP #$20        ; set A long
.393f31	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f34	5b		tcd		                TCD
.393f35	28		plp		                PLP
.393f36	68		pla		                PLA             ; end setdp macro
.393f37	e2 20		sep #$20	                SEP #$20        ; set A short
.393f39	18		clc		                CLC
.393f3a	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f3c	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f3e	69 b0		adc #$b0	                ADC #$B0
.393f40	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f42	a9 00		lda #$00	                LDA #$00
.393f44	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f46	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f48	18		clc		                CLC
.393f49	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f4c	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f4e	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f50	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f53	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f55	e2 20		sep #$20	                SEP #$20        ; set A short
.393f57	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f59	29 01		and #$01	                AND #$01
.393f5b	f0 02		beq $393f5f	                BEQ SET_KEYON_OFF
.393f5d	a9 20		lda #$20	                LDA #$20
.393f5f					    SET_KEYON_OFF
.393f5f	85 32		sta $32		                STA OPL2_PARAMETER0
.393f61	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f63	29 df		and #$df	                AND #$DF
.393f65	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f67	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f69	60		rts		                RTS
.393f6a					OPL2_SET_FEEDBACK
.393f6a	48		pha		                PHA             ; begin setdp macro
.393f6b	08		php		                PHP
.393f6c	c2 20		rep #$20	                REP #$20        ; set A long
.393f6e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f71	5b		tcd		                TCD
.393f72	28		plp		                PLP
.393f73	68		pla		                PLA             ; end setdp macro
.393f74	e2 20		sep #$20	                SEP #$20        ; set A short
.393f76	18		clc		              CLC
.393f77	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f79	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f7b	69 c0		adc #$c0	              ADC #$C0
.393f7d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f7f	a9 00		lda #$00	              LDA #$00
.393f81	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f83	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f85	18		clc		              CLC
.393f86	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f89	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f8b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f8d	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f90	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f92	e2 20		sep #$20	                SEP #$20        ; set A short
.393f94	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393f96	29 07		and #$07	              AND #$07
.393f98	0a		asl a		              ASL
.393f99	85 32		sta $32		              STA OPL2_PARAMETER0
.393f9b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f9d	29 01		and #$01	              AND #$01
.393f9f	05 32		ora $32		              ORA OPL2_PARAMETER0
.393fa1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fa3	6b		rtl		                RTL
.393fa4					OPL2_SET_SYNTHMODE
.393fa4	48		pha		                PHA             ; begin setdp macro
.393fa5	08		php		                PHP
.393fa6	c2 20		rep #$20	                REP #$20        ; set A long
.393fa8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fab	5b		tcd		                TCD
.393fac	28		plp		                PLP
.393fad	68		pla		                PLA             ; end setdp macro
.393fae	08		php		              PHP ; Push the Carry
.393faf	e2 20		sep #$20	                SEP #$20        ; set A short
.393fb1	18		clc		              CLC
.393fb2	a5 27		lda $27		              LDA OPL2_CHANNEL
.393fb4	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fb6	69 c0		adc #$c0	              ADC #$C0
.393fb8	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fba	a9 00		lda #$00	              LDA #$00
.393fbc	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fbe	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fc0	18		clc		              CLC
.393fc1	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fc4	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fc6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fc8	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fcb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fcd	28		plp		              PLP ; Pull the Carry out
.393fce	e2 20		sep #$20	                SEP #$20        ; set A short
.393fd0	b0 08		bcs $393fda	              BCS OPL2_Set_Synthmode_Set;
.393fd2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fd4	29 fe		and #$fe	              AND #$FE
.393fd6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fd8	80 06		bra $393fe0	              BRA OPL2_Set_Synthmode_Exit
.393fda					OPL2_Set_Synthmode_Set
.393fda	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fdc	09 01		ora #$01	              ORA #$01
.393fde	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fe0					OPL2_Set_Synthmode_Exit
.393fe0	6b		rtl		                RTL
.393fe1					OPL2_SET_DEEPTREMOLO
.393fe1	48		pha		                PHA             ; begin setdp macro
.393fe2	08		php		                PHP
.393fe3	c2 20		rep #$20	                REP #$20        ; set A long
.393fe5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fe8	5b		tcd		                TCD
.393fe9	28		plp		                PLP
.393fea	68		pla		                PLA             ; end setdp macro
.393feb	c2 20		rep #$20	                REP #$20        ; set A long
.393fed	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ff0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ff2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ff5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ff7	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff9	b0 08		bcs $394003	              BCS OPL2_Set_DeepTremolo_Set;
.393ffb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ffd	29 7f		and #$7f	              AND #$7F
.393fff	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394001	80 06		bra $394009	              BRA OPL2_Set_DeepTremolo_Exit
.394003					OPL2_Set_DeepTremolo_Set
.394003	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394005	09 80		ora #$80	              ORA #$80
.394007	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394009					OPL2_Set_DeepTremolo_Exit
.394009	6b		rtl		                RTL
.39400a					OPL2_SET_DEEPVIBRATO
.39400a	48		pha		                PHA             ; begin setdp macro
.39400b	08		php		                PHP
.39400c	c2 20		rep #$20	                REP #$20        ; set A long
.39400e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394011	5b		tcd		                TCD
.394012	28		plp		                PLP
.394013	68		pla		                PLA             ; end setdp macro
.394014	c2 20		rep #$20	                REP #$20        ; set A long
.394016	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394019	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39401b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39401e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394020	e2 20		sep #$20	                SEP #$20        ; set A short
.394022	b0 08		bcs $39402c	              BCS OPL2_Set_DeepVibrato_Set;
.394024	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394026	29 bf		and #$bf	              AND #$BF
.394028	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39402a	80 06		bra $394032	              BRA OPL2_Set_DeepVibrato_Exit
.39402c					OPL2_Set_DeepVibrato_Set
.39402c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39402e	09 40		ora #$40	              ORA #$40
.394030	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394032					OPL2_Set_DeepVibrato_Exit
.394032	6b		rtl		                RTL
.394033					OPL2_SET_PERCUSSION
.394033	48		pha		                PHA             ; begin setdp macro
.394034	08		php		                PHP
.394035	c2 20		rep #$20	                REP #$20        ; set A long
.394037	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39403a	5b		tcd		                TCD
.39403b	28		plp		                PLP
.39403c	68		pla		                PLA             ; end setdp macro
.39403d	c2 20		rep #$20	                REP #$20        ; set A long
.39403f	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394042	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394044	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394047	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394049	e2 20		sep #$20	                SEP #$20        ; set A short
.39404b	b0 08		bcs $394055	                BCS OPL2_Set_Percussion_Set;
.39404d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39404f	29 df		and #$df	                AND #$DF
.394051	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394053	80 06		bra $39405b	                BRA OPL2_Set_Percussion_Exit
.394055					OPL2_Set_Percussion_Set
.394055	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394057	09 20		ora #$20	                ORA #$20
.394059	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39405b					OPL2_Set_Percussion_Exit
.39405b	6b		rtl		                RTL
.39405c					OPL2_SET_DRUMS
.39405c	48		pha		                PHA             ; begin setdp macro
.39405d	08		php		                PHP
.39405e	c2 20		rep #$20	                REP #$20        ; set A long
.394060	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394063	5b		tcd		                TCD
.394064	28		plp		                PLP
.394065	68		pla		                PLA             ; end setdp macro
.394066	c2 20		rep #$20	                REP #$20        ; set A long
.394068	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39406b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39406d	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394070	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394072	e2 20		sep #$20	                SEP #$20        ; set A short
.394074	a5 32		lda $32		                LDA OPL2_PARAMETER0
.394076	29 1f		and #$1f	                AND #$1F
.394078	85 32		sta $32		                STA OPL2_PARAMETER0
.39407a	49 ff		eor #$ff	                EOR #$FF
.39407c	85 33		sta $33		                STA OPL2_PARAMETER1
.39407e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394080	25 33		and $33		                AND OPL2_PARAMETER1
.394082	05 32		ora $32		                ORA OPL2_PARAMETER0
.394084	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394086	6b		rtl		                RTL
.394087					OPL2_SET_WAVEFORM
.394087	48		pha		                PHA             ; begin setdp macro
.394088	08		php		                PHP
.394089	c2 20		rep #$20	                REP #$20        ; set A long
.39408b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39408e	5b		tcd		                TCD
.39408f	28		plp		                PLP
.394090	68		pla		                PLA             ; end setdp macro
.394091	c2 20		rep #$20	                REP #$20        ; set A long
.394093	a9 e0 00	lda #$00e0	                LDA #$00E0;
.394096	85 28		sta $28		                STA OPL2_REG_REGION
.394098	20 ac 40	jsr $3940ac	                JSR OPL2_GET_REG_OFFSET
.39409b	e2 20		sep #$20	                SEP #$20        ; set A short
.39409d	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39409f	29 03		and #$03	                AND #$03
.3940a1	85 32		sta $32		                STA OPL2_PARAMETER0
.3940a3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940a5	29 fc		and #$fc	                AND #$FC
.3940a7	05 32		ora $32		                ORA OPL2_PARAMETER0
.3940a9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940ab	6b		rtl		                RTL
.3940ac					OPL2_GET_REG_OFFSET
.3940ac	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3940ae	a5 27		lda $27		                LDA OPL2_CHANNEL
.3940b0	29 0f		and #$0f	                AND #$0F
.3940b2	aa		tax		                TAX
.3940b3	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.3940b5	d0 06		bne $3940bd	                BNE OPL2_Get_Register_Offset_l0
.3940b7	bf f4 16 39	lda $3916f4,x	                LDA @lregisterOffsets_operator0, X
.3940bb	80 04		bra $3940c1	                BRA OPL2_Get_Register_Offset_exit
.3940bd					OPL2_Get_Register_Offset_l0
.3940bd	bf fd 16 39	lda $3916fd,x	                LDA @lregisterOffsets_operator1, X
.3940c1					OPL2_Get_Register_Offset_exit
.3940c1	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3940c3	a9 00		lda #$00	                LDA #$00
.3940c5	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3940c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940c9	18		clc		                CLC
.3940ca	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3940cd	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940cf	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940d1	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940d3	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940d6	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940d8	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940d9					ITRACE
.3940d9	08		php		                PHP
.3940da	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940dc	8b		phb		                PHB                 ; Print the text
.3940dd	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940df	aa		tax		                TAX                 ; ... into X
.3940e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3940e2	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940e4	48		pha		                PHA
.3940e5	ab		plb		                PLB                 ; ... into B
.3940e6	22 87 07 39	jsl $390787	                JSL IPUTS           ; Print the string
.3940ea	c2 20		rep #$20	                REP #$20        ; set A long
.3940ec	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940ee	83 08		sta $08,s	                STA #8,S
.3940f0	a3 02		lda $02,s	                LDA #2,S
.3940f2	83 06		sta $06,s	                STA #6,S
.3940f4	ab		plb		                PLB
.3940f5	68		pla		                PLA                 ; Clean up the stack
.3940f6	68		pla		                PLA
.3940f7	28		plp		                PLP
.3940f8	6b		rtl		                RTL
.3940f9					ISETTIMEOUT
.3940f9	8b		phb		                PHB
.3940fa	0b		phd		                PHD
.3940fb	08		php		                PHP
.3940fc	48		pha		                PHA             ; begin setdbr macro
.3940fd	08		php		                PHP
.3940fe	e2 20		sep #$20	                SEP #$20        ; set A short
.394100	a9 00		lda #$00	                LDA #0
.394102	48		pha		                PHA
.394103	ab		plb		                PLB
.394104	28		plp		                PLP
.394105	68		pla		                PLA             ; end setdbr macro
.394106	48		pha		                PHA             ; begin setdp macro
.394107	08		php		                PHP
.394108	c2 20		rep #$20	                REP #$20        ; set A long
.39410a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39410d	5b		tcd		                TCD
.39410e	28		plp		                PLP
.39410f	68		pla		                PLA             ; end setdp macro
.394110	78		sei		                SEI                             ; We don't want to be interrupted
.394111	e2 20		sep #$20	                SEP #$20        ; set A short
.394113	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394115	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.394117	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.394119	85 0c		sta $032c	                STA @b BIOS_FLAGS
.39411b	28		plp		done            PLP
.39411c	2b		pld		                PLD
.39411d	ab		plb		                PLB
.39411e	6b		rtl		                RTL
.39411f					ICMDBLOCK
.39411f	0b		phd		                PHD
.394120	08		php		                PHP
.394121	48		pha		                PHA             ; begin setdp macro
.394122	08		php		                PHP
.394123	c2 20		rep #$20	                REP #$20        ; set A long
.394125	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394128	5b		tcd		                TCD
.394129	28		plp		                PLP
.39412a	68		pla		                PLA             ; end setdp macro
.39412b	e2 20		sep #$20	                SEP #$20        ; set A short
.39412d	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.39412f	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394131	d0 06		bne $394139	                BNE ret_success             ; No: just return
.394133	22 63 68 39	jsl $396863	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.394137	90 0c		bcc $394145	                BCC pass_failure
.394139					ret_success
.394139	e2 20		sep #$20	                SEP #$20        ; set A short
.39413b	64 00		stz $0320	                STZ BIOS_STATUS
.39413d	28		plp		                PLP
.39413e	2b		pld		                PLD
.39413f	38		sec		                SEC
.394140	6b		rtl		                RTL
.394141					ret_failure
.394141	e2 20		sep #$20	                SEP #$20        ; set A short
.394143	85 00		sta $0320	                STA BIOS_STATUS
.394145	28		plp		pass_failure    PLP
.394146	2b		pld		                PLD
.394147	18		clc		                CLC
.394148	6b		rtl		                RTL
.394149					IGETBLOCK
.394149	0b		phd		                PHD
.39414a	8b		phb		                PHB
.39414b	08		php		                PHP
.39414c	48		pha		                PHA             ; begin setdbr macro
.39414d	08		php		                PHP
.39414e	e2 20		sep #$20	                SEP #$20        ; set A short
.394150	a9 00		lda #$00	                LDA #0
.394152	48		pha		                PHA
.394153	ab		plb		                PLB
.394154	28		plp		                PLP
.394155	68		pla		                PLA             ; end setdbr macro
.394156	48		pha		                PHA             ; begin setdp macro
.394157	08		php		                PHP
.394158	c2 20		rep #$20	                REP #$20        ; set A long
.39415a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39415d	5b		tcd		                TCD
.39415e	28		plp		                PLP
.39415f	68		pla		                PLA             ; end setdp macro
.394160	e2 20		sep #$20	                SEP #$20        ; set A short
.394162	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394164	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394166	f0 13		beq $39417b	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.394168	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39416a	f0 17		beq $394183	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.39416c	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39416e	f0 1b		beq $39418b	                BEQ hd_getblock
.394170	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394172					ret_failure
.394172	e2 20		sep #$20	                SEP #$20        ; set A short
.394174	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394176	28		plp		                PLP
.394177	ab		plb		                PLB
.394178	2b		pld		                PLD
.394179	38		sec		                SEC                                 ; Return failure
.39417a	6b		rtl		                RTL
.39417b	22 85 5d 39	jsl $395d85	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.39417f	b0 12		bcs $394193	                BCS ret_success
.394181	80 ef		bra $394172	                BRA ret_failure
.394183	22 68 66 39	jsl $396668	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.394187	b0 0a		bcs $394193	                BCS ret_success
.394189	80 e7		bra $394172	                BRA ret_failure
.39418b	22 24 6c 39	jsl $396c24	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.39418f	b0 02		bcs $394193	                BCS ret_success
.394191	80 df		bra $394172	                BRA ret_failure
.394193					ret_success
.394193	e2 20		sep #$20	                SEP #$20        ; set A short
.394195	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394197	28		plp		                PLP
.394198	ab		plb		                PLB
.394199	2b		pld		                PLD
.39419a	38		sec		                SEC                                 ; Return success
.39419b	6b		rtl		                RTL
.39419c					IPUTBLOCK
.39419c	0b		phd		                PHD
.39419d	8b		phb		                PHB
.39419e	08		php		                PHP
.39419f	48		pha		                PHA             ; begin setdbr macro
.3941a0	08		php		                PHP
.3941a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3941a3	a9 00		lda #$00	                LDA #0
.3941a5	48		pha		                PHA
.3941a6	ab		plb		                PLB
.3941a7	28		plp		                PLP
.3941a8	68		pla		                PLA             ; end setdbr macro
.3941a9	48		pha		                PHA             ; begin setdp macro
.3941aa	08		php		                PHP
.3941ab	c2 20		rep #$20	                REP #$20        ; set A long
.3941ad	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941b0	5b		tcd		                TCD
.3941b1	28		plp		                PLP
.3941b2	68		pla		                PLA             ; end setdp macro
.3941b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3941b5	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941b7	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941b9	f0 13		beq $3941ce	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3941bb	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3941bd	f0 17		beq $3941d6	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3941bf	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941c1	f0 1b		beq $3941de	                BEQ hd_putblock
.3941c3	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941c5					ret_failure
.3941c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3941c7	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941c9	28		plp		                PLP
.3941ca	ab		plb		                PLB
.3941cb	2b		pld		                PLD
.3941cc	18		clc		                CLC                                 ; Return failure
.3941cd	6b		rtl		                RTL
.3941ce	22 25 5e 39	jsl $395e25	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941d2	90 f1		bcc $3941c5	                BCC ret_failure
.3941d4	80 10		bra $3941e6	                BRA ret_success
.3941d6	22 cd 66 39	jsl $3966cd	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941da	90 e9		bcc $3941c5	                BCC ret_failure
.3941dc	80 08		bra $3941e6	                BRA ret_success
.3941de	22 b5 6c 39	jsl $396cb5	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941e2	90 e1		bcc $3941c5	                BCC ret_failure
.3941e4	80 00		bra $3941e6	                BRA ret_success
.3941e6					ret_success
.3941e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3941e8	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941ea	28		plp		                PLP
.3941eb	ab		plb		                PLB
.3941ec	2b		pld		                PLD
.3941ed	38		sec		                SEC                                 ; Return success
.3941ee	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941ef					DOS_DIROPEN
.3941ef	da		phx		                PHX
.3941f0	5a		phy		                PHY
.3941f1	0b		phd		                PHD
.3941f2	8b		phb		                PHB
.3941f3	08		php		                PHP
.3941f4	48		pha		                PHA             ; begin setdbr macro
.3941f5	08		php		                PHP
.3941f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941fa	48		pha		                PHA
.3941fb	ab		plb		                PLB
.3941fc	28		plp		                PLP
.3941fd	68		pla		                PLA             ; end setdbr macro
.3941fe	48		pha		                PHA             ; begin setdp macro
.3941ff	08		php		                PHP
.394200	c2 20		rep #$20	                REP #$20        ; set A long
.394202	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394205	5b		tcd		                TCD
.394206	28		plp		                PLP
.394207	68		pla		                PLA             ; end setdp macro
.394208	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.39420b	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.39420e	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394211	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394214	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394217	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394219	85 18		sta $0338	                STA DOS_DIR_PTR
.39421b	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39421e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394220	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394222	e2 20		sep #$20	                SEP #$20        ; set A short
.394224	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394227	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394229	d0 24		bne $39424f	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.39422b					fetch_fat12
.39422b	e2 20		sep #$20	                SEP #$20        ; set A short
.39422d	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.39422f	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394232	c2 20		rep #$20	                REP #$20        ; set A long
.394234	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394236	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394238	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39423a	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39423c	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.39423f	85 02		sta $0322	                STA BIOS_LBA
.394241	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394244	85 04		sta $0324	                STA BIOS_LBA+2
.394246	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39424a	b0 1f		bcs $39426b	                BCS do_success              ; If sucessful, set the directory cursor
.39424c	82 bc 16	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39424f					fetch_fat32
.39424f	e2 20		sep #$20	                SEP #$20        ; set A short
.394251	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394253	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394256	c2 20		rep #$20	                REP #$20        ; set A long
.394258	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39425b	85 10		sta $0330	                STA DOS_CLUS_ID
.39425d	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394260	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394262	22 ba 47 39	jsl $3947ba	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394266	b0 03		bcs $39426b	                BCS do_success              ; If successful: set the directory cursor
.394268	82 a0 16	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39426b	82 a4 16	brl $395912	do_success      BRL IF_SUCCESS
.39426e					DOS_DIRFIRST
.39426e	0b		phd		                PHD
.39426f	08		php		                PHP
.394270	48		pha		                PHA             ; begin setdp macro
.394271	08		php		                PHP
.394272	c2 20		rep #$20	                REP #$20        ; set A long
.394274	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394277	5b		tcd		                TCD
.394278	28		plp		                PLP
.394279	68		pla		                PLA             ; end setdp macro
.39427a	c2 20		rep #$20	                REP #$20        ; set A long
.39427c	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39427f	85 18		sta $0338	                STA DOS_DIR_PTR
.394281	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394284	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394286	28		plp		                PLP
.394287	2b		pld		                PLD
.394288	6b		rtl		                RTL
.394289					DOS_DIRNEXT
.394289	da		phx		                PHX
.39428a	5a		phy		                PHY
.39428b	0b		phd		                PHD
.39428c	8b		phb		                PHB
.39428d	08		php		                PHP
.39428e	48		pha		                PHA             ; begin setdbr macro
.39428f	08		php		                PHP
.394290	e2 20		sep #$20	                SEP #$20        ; set A short
.394292	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394294	48		pha		                PHA
.394295	ab		plb		                PLB
.394296	28		plp		                PLP
.394297	68		pla		                PLA             ; end setdbr macro
.394298	48		pha		                PHA             ; begin setdp macro
.394299	08		php		                PHP
.39429a	c2 20		rep #$20	                REP #$20        ; set A long
.39429c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39429f	5b		tcd		                TCD
.3942a0	28		plp		                PLP
.3942a1	68		pla		                PLA             ; end setdp macro
.3942a2	c2 20		rep #$20	                REP #$20        ; set A long
.3942a4	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3942a5	a5 18		lda $0338	                LDA DOS_DIR_PTR
.3942a7	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3942aa	85 18		sta $0338	                STA DOS_DIR_PTR
.3942ac	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942ae	69 00 00	adc #$0000	                ADC #0
.3942b1	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942b3	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3942b4	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3942b7	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3942b9	85 28		sta $0348	                STA DOS_TEMP
.3942bb	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3942be	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3942c0	85 2a		sta $034a	                STA DOS_TEMP+2
.3942c2	30 0c		bmi $3942d0	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3942c4	f0 03		beq $3942c9	                BEQ check_lower
.3942c6	82 49 16	brl $395912	                BRL IF_SUCCESS
.3942c9	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3942cb	f0 03		beq $3942d0	                BEQ get_next_block
.3942cd	82 42 16	brl $395912	                BRL IF_SUCCESS
.3942d0					get_next_block
.3942d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3942d2	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942d5	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942d7	f0 38		beq $394311	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942d9					next_sector
.3942d9	c2 20		rep #$20	                REP #$20        ; set A long
.3942db	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942de	1a		inc a		                INC A
.3942df	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942e2	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942e5	d0 07		bne $3942ee	                BNE read_sector
.3942e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3942e9	a9 00		lda #$00	                LDA #0
.3942eb	82 19 16	brl $395907	                BRL IF_FAILURE
.3942ee					read_sector
.3942ee	c2 20		rep #$20	                REP #$20        ; set A long
.3942f0	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3942f3	85 02		sta $0322	                STA BIOS_LBA
.3942f5	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942f8	85 04		sta $0324	                STA BIOS_LBA+2
.3942fa	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3942fd	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942ff	85 18		sta $0338	                STA DOS_DIR_PTR
.394301	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394304	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394306	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394308	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.39430c	b0 39		bcs $394347	                BCS do_success              ; If successful: set the directory cursor
.39430e	82 fa 15	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394311					next_cluster
.394311	c2 20		rep #$20	                REP #$20        ; set A long
.394313	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394316	85 10		sta $0330	                STA DOS_CLUS_ID
.394318	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39431b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39431d	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394320	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394322	85 18		sta $0338	                STA DOS_DIR_PTR
.394324	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394327	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394329	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39432b	22 c5 4b 39	jsl $394bc5	                JSL NEXTCLUSTER             ; Try to find the next cluster
.39432f	b0 03		bcs $394334	                BCS set_next
.394331	82 d7 15	brl $39590b	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394334	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394336	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394339	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39433b	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39433e	22 ba 47 39	jsl $3947ba	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394342	b0 03		bcs $394347	                BCS do_success              ; If successful: set the directory cursor
.394344	82 c4 15	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394347	82 c8 15	brl $395912	do_success      BRL IF_SUCCESS
.39434a					DOS_DIRFINDFREE
.39434a	da		phx		                PHX
.39434b	5a		phy		                PHY
.39434c	0b		phd		                PHD
.39434d	8b		phb		                PHB
.39434e	08		php		                PHP
.39434f	48		pha		                PHA             ; begin setdbr macro
.394350	08		php		                PHP
.394351	e2 20		sep #$20	                SEP #$20        ; set A short
.394353	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394355	48		pha		                PHA
.394356	ab		plb		                PLB
.394357	28		plp		                PLP
.394358	68		pla		                PLA             ; end setdbr macro
.394359	48		pha		                PHA             ; begin setdp macro
.39435a	08		php		                PHP
.39435b	c2 20		rep #$20	                REP #$20        ; set A long
.39435d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394360	5b		tcd		                TCD
.394361	28		plp		                PLP
.394362	68		pla		                PLA             ; end setdp macro
.394363	22 a3 55 39	jsl $3955a3	                JSL IF_DIROPEN
.394367	b0 06		bcs $39436f	                BCS start_walk
.394369	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.39436c	82 28 00	brl $394397	                BRL ret_failure
.39436f	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394372					chk_entry
.394372	e2 20		sep #$20	                SEP #$20        ; set A short
.394374	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394376	f0 1c		beq $394394	                BEQ ret_success             ; If 0: we have a blank... return it
.394378	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39437a	f0 18		beq $394394	                BEQ ret_success             ; Yes: return it
.39437c	22 dd 55 39	jsl $3955dd	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394380	b0 ed		bcs $39436f	                BCS start_walk              ; If we got one, start walking it
.394382	22 9a 43 39	jsl $39439a	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.394386	90 0f		bcc $394397	                BCC ret_failure             ; If that didn't work, return the failure
.394388	c2 20		rep #$20	                REP #$20        ; set A long
.39438a	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.39438d	85 18		sta $0338	                STA DOS_DIR_PTR
.39438f	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394392	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394394	82 7b 15	brl $395912	ret_success     BRL IF_SUCCESS
.394397	82 6d 15	brl $395907	ret_failure     BRL IF_FAILURE
.39439a					DOS_DIRAPPEND
.39439a	da		phx		                PHX
.39439b	8b		phb		                PHB
.39439c	0b		phd		                PHD
.39439d	08		php		                PHP
.39439e	48		pha		                PHA             ; begin setdbr macro
.39439f	08		php		                PHP
.3943a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3943a2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943a4	48		pha		                PHA
.3943a5	ab		plb		                PLB
.3943a6	28		plp		                PLP
.3943a7	68		pla		                PLA             ; end setdbr macro
.3943a8	48		pha		                PHA             ; begin setdp macro
.3943a9	08		php		                PHP
.3943aa	c2 20		rep #$20	                REP #$20        ; set A long
.3943ac	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943af	5b		tcd		                TCD
.3943b0	28		plp		                PLP
.3943b1	68		pla		                PLA             ; end setdp macro
.3943b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3943b4	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3943b7	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3943b9	f0 09		beq $3943c4	                BEQ clr_sector                  ; Yes: clear out the directory data
.3943bb					ret_failure
.3943bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3943bd	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3943bf	85 0e		sta $032e	                STA DOS_STATUS
.3943c1	82 3e 00	brl $394402	                BRL pass_failure
.3943c4					clr_sector
.3943c4	c2 20		rep #$20	                REP #$20        ; set A long
.3943c6	a9 00 00	lda #$0000	                LDA #0
.3943c9	a2 00 00	ldx #$0000	                LDX #0
.3943cc	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943cf	e8		inx		                INX
.3943d0	e8		inx		                INX
.3943d1	e0 00 02	cpx #$0200	                CPX #512
.3943d4	d0 f6		bne $3943cc	                BNE clr_loop
.3943d6	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943d9	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943db	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943de	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943e0	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943e3	85 10		sta $0330	                STA DOS_CLUS_ID
.3943e5	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943e8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943ea	22 b9 4f 39	jsl $394fb9	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943ee	90 12		bcc $394402	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943f0	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3943f3	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943f6	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3943f9	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3943fc	28		plp		ret_success     PLP
.3943fd	2b		pld		                PLD
.3943fe	ab		plb		                PLB
.3943ff	fa		plx		                PLX
.394400	38		sec		                SEC
.394401	6b		rtl		                RTL
.394402	28		plp		pass_failure    PLP
.394403	2b		pld		                PLD
.394404	ab		plb		                PLB
.394405	fa		plx		                PLX
.394406	18		clc		                CLC
.394407	6b		rtl		                RTL
.394408					DOS_DIRWRITE
.394408	da		phx		                PHX
.394409	5a		phy		                PHY
.39440a	0b		phd		                PHD
.39440b	8b		phb		                PHB
.39440c	08		php		                PHP
.39440d	48		pha		                PHA             ; begin setdbr macro
.39440e	08		php		                PHP
.39440f	e2 20		sep #$20	                SEP #$20        ; set A short
.394411	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394413	48		pha		                PHA
.394414	ab		plb		                PLB
.394415	28		plp		                PLP
.394416	68		pla		                PLA             ; end setdbr macro
.394417	48		pha		                PHA             ; begin setdp macro
.394418	08		php		                PHP
.394419	c2 20		rep #$20	                REP #$20        ; set A long
.39441b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39441e	5b		tcd		                TCD
.39441f	28		plp		                PLP
.394420	68		pla		                PLA             ; end setdp macro
.394421	e2 20		sep #$20	                SEP #$20        ; set A short
.394423	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394426	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394428	f0 1f		beq $394449	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39442a					write_sector
.39442a	c2 20		rep #$20	                REP #$20        ; set A long
.39442c	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.39442f	85 02		sta $0322	                STA BIOS_LBA
.394431	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394434	85 04		sta $0324	                STA BIOS_LBA+2
.394436	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394439	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39443b	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39443e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394440	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394444	b0 1f		bcs $394465	                BCS ret_success
.394446	82 be 14	brl $395907	ret_failure     BRL IF_FAILURE
.394449					write_cluster
.394449	c2 20		rep #$20	                REP #$20        ; set A long
.39444b	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.39444e	85 10		sta $0330	                STA DOS_CLUS_ID
.394450	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394453	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394455	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394458	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39445a	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39445d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39445f	22 f7 47 39	jsl $3947f7	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394463	90 e1		bcc $394446	                BCC ret_failure
.394465	82 aa 14	brl $395912	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.394468					DOS_INIT
.394468	8b		phb		                PHB
.394469	0b		phd		                PHD
.39446a	08		php		                PHP
.39446b	48		pha		                PHA             ; begin setdbr macro
.39446c	08		php		                PHP
.39446d	e2 20		sep #$20	                SEP #$20        ; set A short
.39446f	a9 00		lda #$00	                LDA #0
.394471	48		pha		                PHA
.394472	ab		plb		                PLB
.394473	28		plp		                PLP
.394474	68		pla		                PLA             ; end setdbr macro
.394475	48		pha		                PHA             ; begin setdp macro
.394476	08		php		                PHP
.394477	c2 20		rep #$20	                REP #$20        ; set A long
.394479	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39447c	5b		tcd		                TCD
.39447d	28		plp		                PLP
.39447e	68		pla		                PLA             ; end setdp macro
.39447f	e2 20		sep #$20	                SEP #$20        ; set A short
.394481	c2 10		rep #$10	                REP #$10        ; set X long
.394483	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.394486	a9 00		lda #$00	                LDA #0
.394488	9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.39448b	e8		inx		                INX
.39448c	e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.39448f	d0 f7		bne $394488	                BNE b0_clr_loop
.394491	48		pha		                PHA             ; begin setdbr macro
.394492	08		php		                PHP
.394493	e2 20		sep #$20	                SEP #$20        ; set A short
.394495	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394497	48		pha		                PHA
.394498	ab		plb		                PLB
.394499	28		plp		                PLP
.39449a	68		pla		                PLA             ; end setdbr macro
.39449b	48		pha		                PHA             ; begin setdp macro
.39449c	08		php		                PHP
.39449d	c2 20		rep #$20	                REP #$20        ; set A long
.39449f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944a2	5b		tcd		                TCD
.3944a3	28		plp		                PLP
.3944a4	68		pla		                PLA             ; end setdp macro
.3944a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3944a7	c2 10		rep #$10	                REP #$10        ; set X long
.3944a9	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3944ac	a9 00		lda #$00	                LDA #0
.3944ae	9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3944b1	e8		inx		                INX
.3944b2	e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3944b5	d0 f7		bne $3944ae	                BNE b38_clr_loop
.3944b7	c2 20		rep #$20	                REP #$20        ; set A long
.3944b9	a9 4f 48	lda #$484f	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3944bc	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3944c0	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3944c3	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.3944c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3944c9	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3944cb	85 01		sta $0321	                STA BIOS_DEV
.3944cd	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.3944cf	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.3944d3	a9 00		lda #$00	                LDA #0
.3944d5	a2 00 00	ldx #$0000	                LDX #0
.3944d8	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.3944db	e8		inx		                INX
.3944dc	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.3944df	d0 f7		bne $3944d8	                BNE fd_zero_loop
.3944e1	a9 00		lda #$00	                LDA #0
.3944e3	a2 00 00	ldx #$0000	                LDX #0
.3944e6	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3944e9	e8		inx		                INX
.3944ea	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3944ed	d0 f7		bne $3944e6	                BNE sect_zero_loop
.3944ef	c2 20		rep #$20	                REP #$20        ; set A long
.3944f1	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.3944f4	85 20		sta $0340	                STA @b DOS_FD_PTR
.3944f6	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3944f9	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3944fb	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.3944fe	85 28		sta $0348	                STA @b DOS_TEMP
.394500	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.394503	85 2a		sta $034a	                STA @b DOS_TEMP+2
.394505	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394508	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.39450b	a5 28		lda $0348	                LDA @b DOS_TEMP
.39450d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39450f	c8		iny		                INY
.394510	c8		iny		                INY
.394511	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394513	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394515	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394516	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394518	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39451b	85 20		sta $0340	                STA @b DOS_FD_PTR
.39451d	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39451f	69 00 00	adc #$0000	                ADC #0
.394522	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394524	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394525	a5 28		lda $0348	                LDA @b DOS_TEMP
.394527	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.39452a	85 28		sta $0348	                STA @b DOS_TEMP
.39452c	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39452e	69 00 00	adc #$0000	                ADC #0
.394531	85 2a		sta $034a	                STA @b DOS_TEMP+2
.394533	ca		dex		                DEX                     ; Count down the descriptors...
.394534	d0 d2		bne $394508	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394536	28		plp		                PLP
.394537	2b		pld		                PLD
.394538	ab		plb		                PLB
.394539	6b		rtl		                RTL
.39453a					DOS_MOUNT
.39453a	8b		phb		                PHB
.39453b	0b		phd		                PHD
.39453c	08		php		                PHP
.39453d	48		pha		                PHA             ; begin setdbr macro
.39453e	08		php		                PHP
.39453f	e2 20		sep #$20	                SEP #$20        ; set A short
.394541	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394543	48		pha		                PHA
.394544	ab		plb		                PLB
.394545	28		plp		                PLP
.394546	68		pla		                PLA             ; end setdbr macro
.394547	48		pha		                PHA             ; begin setdp macro
.394548	08		php		                PHP
.394549	c2 20		rep #$20	                REP #$20        ; set A long
.39454b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39454e	5b		tcd		                TCD
.39454f	28		plp		                PLP
.394550	68		pla		                PLA             ; end setdp macro
.394551	e2 20		sep #$20	                SEP #$20        ; set A short
.394553	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394555	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.394559	d0 07		bne $394562	                BNE try_mount           ; No: try to moount it
.39455b	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC
.39455d	f0 03		beq $394562	                BEQ try_mount
.39455f	82 69 01	brl $3946cb	                BRL ret_success         ; Yes: just return success
.394562	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.394566	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394568	f0 1f		beq $394589	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.39456a	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.39456c	f0 26		beq $394594	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.39456e	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394570	f0 0b		beq $39457d	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394572	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.394574	85 0e		sta $032e	                STA DOS_STATUS
.394576	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394578	85 00		sta $0320	                STA BIOS_STATUS
.39457a	82 57 01	brl $3946d4	                BRL ret_failure
.39457d	22 39 67 39	jsl $396739	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394581	b0 03		bcs $394586	                BCS fdc_success
.394583	82 4e 01	brl $3946d4	                BRL ret_failure
.394586	82 42 01	brl $3946cb	fdc_success     BRL ret_success
.394589	22 43 5d 39	jsl $395d43	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.39458d	b0 10		bcs $39459f	                BCS get_mbr             ; Continue if success
.39458f	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394591	82 40 01	brl $3946d4	                BRL ret_failure
.394594	22 2f 6b 39	jsl $396b2f	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394598	b0 05		bcs $39459f	                BCS get_mbr             ; Continue if success
.39459a	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39459c	82 35 01	brl $3946d4	                BRL ret_failure
.39459f					get_mbr
.39459f	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a1	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3945a3	64 04		stz $0324	                STZ BIOS_LBA+2
.3945a5	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3945a8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945aa	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945ad	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945af	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.3945b3	b0 07		bcs $3945bc	                BCS chk_signature       ; If success, check the signature bytes
.3945b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b7	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3945b9	82 18 01	brl $3946d4	                BRL ret_failure
.3945bc					chk_signature
.3945bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3945be	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3945c1	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945c3	d0 07		bne $3945cc	                BNE not_mbr             ; No: signal we could find the MBR
.3945c5	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3945c8	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945ca	f0 05		beq $3945d1	                BEQ chk_part_type       ; Yes: we have an MBR
.3945cc	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3945ce	82 03 01	brl $3946d4	                BRL ret_failure
.3945d1	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3945d4	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3945d6	f0 05		beq $3945dd	                BEQ get_LBA             ; Is FAT32 with LBA?
.3945d8	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3945da	82 f7 00	brl $3946d4	                BRL ret_failure
.3945dd	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3945e0	c2 20		rep #$20	                REP #$20        ; set A long
.3945e2	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3945e5	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3945e8	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3945eb	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3945ee	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3945f1	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3945f4	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3945f7	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3945fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3945fc	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3945fe	8d 00 a0	sta $38a000	                STA DEVICE
.394601	a9 00		lda #$00	                LDA #0
.394603	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394606	c2 20		rep #$20	                REP #$20        ; set A long
.394608	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39460b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39460d	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394610	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394612	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394615	85 02		sta $0322	                STA BIOS_LBA
.394617	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39461a	85 04		sta $0324	                STA BIOS_LBA+2
.39461c	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394620	b0 1c		bcs $39463e	                BCS get_first_sec       ; Got it? Start parsing it
.394622	e2 20		sep #$20	                SEP #$20        ; set A short
.394624	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394626	82 ab 00	brl $3946d4	                BRL ret_failure
.394629					chk_bpb_sig
.394629	e2 20		sep #$20	                SEP #$20        ; set A short
.39462b	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39462e	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394630	d0 07		bne $394639	                BNE not_bpb             ; No: signal we could find the volume ID
.394632	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394635	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394637	f0 05		beq $39463e	                BEQ get_first_sec       ; Yes: we have an volume ID
.394639	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.39463b	82 96 00	brl $3946d4	                BRL ret_failure
.39463e					get_first_sec
.39463e	c2 20		rep #$20	                REP #$20        ; set A long
.394640	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394643	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.394646	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394649	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.39464c	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39464f	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394652	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394653	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394656	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394659	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.39465c	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39465f	69 00 00	adc #$0000	                ADC #0
.394662	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.394665	e2 20		sep #$20	                SEP #$20        ; set A short
.394667	a2 00 00	ldx #$0000	                LDX #0
.39466a	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.39466e	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394672	e8		inx		                INX
.394673	e0 04 00	cpx #$0004	                CPX #4
.394676	d0 f2		bne $39466a	                BNE cpy_secperfat
.394678	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.39467b	0a		asl a		                ASL A
.39467c	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39467f	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394682	2a		rol a		                ROL A
.394683	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.394686	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394689	2a		rol a		                ROL A
.39468a	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.39468d	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394690	2a		rol a		                ROL A
.394691	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394694	18		clc		                CLC
.394695	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.394698	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.39469b	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39469e	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3946a1	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3946a4	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946a7	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3946aa	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3946ad	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946b0	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3946b3	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3946b6	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3946bb	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3946be	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3946c1	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3946c3	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3946c6	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3946c8	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3946cb					ret_success
.3946cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3946cd	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3946cf	28		plp		                PLP
.3946d0	2b		pld		                PLD
.3946d1	ab		plb		                PLB
.3946d2	38		sec		                SEC
.3946d3	6b		rtl		                RTL
.3946d4					ret_failure
.3946d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3946d6	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3946d8	28		plp		                PLP
.3946d9	2b		pld		                PLD
.3946da	ab		plb		                PLB
.3946db	18		clc		                CLC
.3946dc	6b		rtl		                RTL
.3946dd					DOS_TESTBOOT
.3946dd	8b		phb		                PHB
.3946de	0b		phd		                PHD
.3946df	da		phx		                PHX
.3946e0	08		php		                PHP
.3946e1	48		pha		                PHA             ; begin setdbr macro
.3946e2	08		php		                PHP
.3946e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3946e5	a9 00		lda #$00	                LDA #0
.3946e7	48		pha		                PHA
.3946e8	ab		plb		                PLB
.3946e9	28		plp		                PLP
.3946ea	68		pla		                PLA             ; end setdbr macro
.3946eb	48		pha		                PHA             ; begin setdp macro
.3946ec	08		php		                PHP
.3946ed	c2 20		rep #$20	                REP #$20        ; set A long
.3946ef	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946f2	5b		tcd		                TCD
.3946f3	28		plp		                PLP
.3946f4	68		pla		                PLA             ; end setdp macro
.3946f5	c2 10		rep #$10	                REP #$10        ; set X long
.3946f7					chk_dev
.3946f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3946f9	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.3946fb	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.3946fd	f0 24		beq $394723	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.3946ff	c2 30		rep #$30	                REP #$30        ; set A&X long
.394701	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394704	85 02		sta $0322	                STA @b BIOS_LBA
.394706	85 04		sta $0324	                STA @b BIOS_LBA+2
.394708	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.39470b	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.39470d	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394710	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394712	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.394716	b0 03		bcs $39471b	                BCS chk_mbr_brl
.394718	82 47 00	brl $394762	                BRL done                    ; If failed... just return
.39471b					chk_mbr_brl
.39471b	e2 20		sep #$20	                SEP #$20        ; set A short
.39471d	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394721	80 04		bra $394727	                BRA chk_brl
.394723	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394727	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394729	f0 06		beq $394731	                BEQ chk_magic               ; Yes: check for the magic text
.39472b	c9 82		cmp #$82	                CMP #$82
.39472d	f0 02		beq $394731	                BEQ chk_magic
.39472f	80 31		bra $394762	                BRA done                    ; No: just return
.394731	a2 00 00	ldx #$0000	chk_magic       LDX #0
.394734	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394738	df 67 47 39	cmp $394767,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.39473c	d0 24		bne $394762	                BNE done                    ; If it's not equal, just return
.39473e	e8		inx		                INX                         ; Otherwise, check the next one
.39473f	e0 08 00	cpx #$0008	                CPX #8
.394742	d0 f0		bne $394734	                BNE magic_loop              ; Until we've checked all 8 bytes
.394744	c2 30		rep #$30	                REP #$30        ; set A&X long
.394746	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394749	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.39474c	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.39474f	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.394752	e2 20		sep #$20	                SEP #$20        ; set A short
.394754	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.394756	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394758	f0 04		beq $39475e	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.39475a	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.39475e	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.394762	28		plp		done            PLP
.394763	2b		pld		                PLD
.394764	ab		plb		                PLB
.394765	fa		plx		                PLX
.394766	6b		rtl		                RTL
>394767	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.39476f					DOS_CALC_LBA
.39476f	8b		phb		                PHB
.394770	0b		phd		                PHD
.394771	08		php		                PHP
.394772	48		pha		                PHA             ; begin setdbr macro
.394773	08		php		                PHP
.394774	e2 20		sep #$20	                SEP #$20        ; set A short
.394776	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394778	48		pha		                PHA
.394779	ab		plb		                PLB
.39477a	28		plp		                PLP
.39477b	68		pla		                PLA             ; end setdbr macro
.39477c	48		pha		                PHA             ; begin setdp macro
.39477d	08		php		                PHP
.39477e	c2 20		rep #$20	                REP #$20        ; set A long
.394780	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394783	5b		tcd		                TCD
.394784	28		plp		                PLP
.394785	68		pla		                PLA             ; end setdp macro
.394786	c2 20		rep #$20	                REP #$20        ; set A long
.394788	38		sec		                SEC
.394789	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.39478b	e9 02 00	sbc #$0002	                SBC #2
.39478e	85 28		sta $0348	                STA DOS_TEMP
.394790	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394792	e9 00 00	sbc #$0000	                SBC #0
.394795	85 2a		sta $034a	                STA DOS_TEMP+2
.394797	e2 10		sep #$10	                SEP #$10        ; set X short
.394799	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.39479c	e0 01		cpx #$01	mult_loop       CPX #1
.39479e	f0 07		beq $3947a7	                BEQ add_offset
.3947a0	06 28		asl $0348	                ASL DOS_TEMP
.3947a2	26 28		rol $0348	                ROL DOS_TEMP
.3947a4	ca		dex		                DEX
.3947a5	80 f5		bra $39479c	                BRA mult_loop
.3947a7	18		clc		add_offset      CLC
.3947a8	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3947aa	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3947ad	85 02		sta $0322	                STA BIOS_LBA
.3947af	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3947b1	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3947b4	85 04		sta $0324	                STA BIOS_LBA+2
.3947b6	28		plp		                PLP
.3947b7	2b		pld		                PLD
.3947b8	ab		plb		                PLB
.3947b9	6b		rtl		                RTL
.3947ba					DOS_GETCLUSTER
.3947ba	8b		phb		                PHB
.3947bb	0b		phd		                PHD
.3947bc	08		php		                PHP
.3947bd	48		pha		                PHA             ; begin setdbr macro
.3947be	08		php		                PHP
.3947bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3947c1	a9 00		lda #$00	                LDA #0
.3947c3	48		pha		                PHA
.3947c4	ab		plb		                PLB
.3947c5	28		plp		                PLP
.3947c6	68		pla		                PLA             ; end setdbr macro
.3947c7	48		pha		                PHA             ; begin setdp macro
.3947c8	08		php		                PHP
.3947c9	c2 20		rep #$20	                REP #$20        ; set A long
.3947cb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947ce	5b		tcd		                TCD
.3947cf	28		plp		                PLP
.3947d0	68		pla		                PLA             ; end setdp macro
.3947d1	c2 20		rep #$20	                REP #$20        ; set A long
.3947d3	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3947d5	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947d7	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947d9	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947db	22 6f 47 39	jsl $39476f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3947df	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.3947e3	90 09		bcc $3947ee	                BCC ret_failure
.3947e5					ret_success
.3947e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e7	64 0e		stz $032e	                STZ DOS_STATUS
.3947e9	28		plp		                PLP
.3947ea	2b		pld		                PLD
.3947eb	ab		plb		                PLB
.3947ec	38		sec		                SEC
.3947ed	6b		rtl		                RTL
.3947ee					ret_failure
.3947ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3947f0	85 0e		sta $032e	                STA DOS_STATUS
.3947f2	28		plp		                PLP
.3947f3	2b		pld		                PLD
.3947f4	ab		plb		                PLB
.3947f5	18		clc		                CLC
.3947f6	6b		rtl		                RTL
.3947f7					DOS_PUTCLUSTER
.3947f7	8b		phb		                PHB
.3947f8	0b		phd		                PHD
.3947f9	08		php		                PHP
.3947fa	48		pha		                PHA             ; begin setdbr macro
.3947fb	08		php		                PHP
.3947fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3947fe	a9 00		lda #$00	                LDA #0
.394800	48		pha		                PHA
.394801	ab		plb		                PLB
.394802	28		plp		                PLP
.394803	68		pla		                PLA             ; end setdbr macro
.394804	48		pha		                PHA             ; begin setdp macro
.394805	08		php		                PHP
.394806	c2 20		rep #$20	                REP #$20        ; set A long
.394808	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39480b	5b		tcd		                TCD
.39480c	28		plp		                PLP
.39480d	68		pla		                PLA             ; end setdp macro
.39480e	c2 20		rep #$20	                REP #$20        ; set A long
.394810	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394812	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394814	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394816	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394818	22 6f 47 39	jsl $39476f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39481c	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394820	90 09		bcc $39482b	                BCC ret_failure
.394822					ret_success
.394822	e2 20		sep #$20	                SEP #$20        ; set A short
.394824	64 0e		stz $032e	                STZ DOS_STATUS
.394826	28		plp		                PLP
.394827	2b		pld		                PLD
.394828	ab		plb		                PLB
.394829	38		sec		                SEC
.39482a	6b		rtl		                RTL
.39482b					ret_failure
.39482b	e2 20		sep #$20	                SEP #$20        ; set A short
.39482d	85 0e		sta $032e	                STA DOS_STATUS
.39482f	28		plp		                PLP
.394830	2b		pld		                PLD
.394831	ab		plb		                PLB
.394832	18		clc		                CLC
.394833	6b		rtl		                RTL
>394834	40 46 00			DOS_FDC_NAME    .null "@F"
.394837					DOS_FDC_DESC
>394837	34 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39483b	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39483c	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394840	40 53 00			DOS_SDC_NAME    .null "@S"
.394843					DOS_SDC_DESC
>394843	40 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394847	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394848	37 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>39484c	40 48 00			DOS_HDC_NAME    .null "@H"
.39484f					DOS_HD_DESC
>39484f	4c 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>394853	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394854	43 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394858					DOS_PARSE_DEV
.394858	8b		phb		                PHB
.394859	0b		phd		                PHD
.39485a	08		php		                PHP
.39485b	48		pha		                PHA             ; begin setdbr macro
.39485c	08		php		                PHP
.39485d	e2 20		sep #$20	                SEP #$20        ; set A short
.39485f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394861	48		pha		                PHA
.394862	ab		plb		                PLB
.394863	28		plp		                PLP
.394864	68		pla		                PLA             ; end setdbr macro
.394865	48		pha		                PHA             ; begin setdp macro
.394866	08		php		                PHP
.394867	c2 20		rep #$20	                REP #$20        ; set A long
.394869	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39486c	5b		tcd		                TCD
.39486d	28		plp		                PLP
.39486e	68		pla		                PLA             ; end setdp macro
.39486f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394871	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394875	85 28		sta $0348	                STA DOS_TEMP
.394877	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.39487b	85 2a		sta $034a	                STA DOS_TEMP+2
.39487d	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394880	85 48		sta $0368	                STA DOS_STR2_PTR
.394882	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394885	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394887	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.39488a	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39488c	85 44		sta $0364	                STA DOS_STR1_PTR
.39488e	c8		iny		                INY
.39488f	c8		iny		                INY
.394890	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394892	85 46		sta $0366	                STA DOS_STR1_PTR+2
.394894	e2 20		sep #$20	                SEP #$20        ; set A short
.394896	a0 00 00	ldy #$0000	                LDY #0
.394899	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.39489b	f0 24		beq $3948c1	                BEQ found                   ; If it's NULL, we found a match
.39489d	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39489f	d0 03		bne $3948a4	                BNE next_device             ; If no match, try to load the next device
.3948a1	c8		iny		                INY                         ; Go to the next character
.3948a2	80 f5		bra $394899	                BRA cmp_loop
.3948a4					next_device
.3948a4	c2 20		rep #$20	                REP #$20        ; set A long
.3948a6	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3948a9	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948ab	48		pha		                PHA
.3948ac	c8		iny		                INY
.3948ad	c8		iny		                INY
.3948ae	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b0	85 2a		sta $034a	                STA DOS_TEMP+2
.3948b2	68		pla		                PLA
.3948b3	85 28		sta $0348	                STA DOS_TEMP
.3948b5	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3948b7	d0 ce		bne $394887	                BNE dev_loop                ; No: check this device
.3948b9	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948bb	d0 ca		bne $394887	                BNE dev_loop
.3948bd	28		plp		done            PLP                         ; Otherwise, return having not found a match
.3948be	2b		pld		                PLD
.3948bf	ab		plb		                PLB
.3948c0	6b		rtl		                RTL
.3948c1	22 d2 48 39	jsl $3948d2	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3948c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3948c7	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3948ca	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948cc	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3948d0	80 eb		bra $3948bd	                BRA done
.3948d2					DOS_ADJUSTPATH
.3948d2	da		phx		                PHX
.3948d3	5a		phy		                PHY
.3948d4	8b		phb		                PHB
.3948d5	0b		phd		                PHD
.3948d6	08		php		                PHP
.3948d7	48		pha		                PHA             ; begin setdbr macro
.3948d8	08		php		                PHP
.3948d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3948db	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3948dd	48		pha		                PHA
.3948de	ab		plb		                PLB
.3948df	28		plp		                PLP
.3948e0	68		pla		                PLA             ; end setdbr macro
.3948e1	48		pha		                PHA             ; begin setdp macro
.3948e2	08		php		                PHP
.3948e3	c2 20		rep #$20	                REP #$20        ; set A long
.3948e5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948e8	5b		tcd		                TCD
.3948e9	28		plp		                PLP
.3948ea	68		pla		                PLA             ; end setdp macro
.3948eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948ed	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3948ef	98		tya		                TYA                             ; Compute the address of the first source byte
.3948f0	18		clc		                CLC
.3948f1	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3948f4	aa		tax		                TAX
.3948f5	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3948f8	a8		tay		                TAY
.3948f9	38		sec		                SEC                             ; Compute the number of bytes to copy
.3948fa	a9 00 01	lda #$0100	                LDA #256
.3948fd	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3948ff	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394902	28		plp		                PLP
.394903	2b		pld		                PLD
.394904	ab		plb		                PLB
.394905	7a		ply		                PLY
.394906	fa		plx		                PLX
.394907	6b		rtl		                RTL
.394908					DOS_PARSE_PATH
.394908	8b		phb		                PHB
.394909	0b		phd		                PHD
.39490a	08		php		                PHP
.39490b	48		pha		                PHA             ; begin setdbr macro
.39490c	08		php		                PHP
.39490d	e2 20		sep #$20	                SEP #$20        ; set A short
.39490f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394911	48		pha		                PHA
.394912	ab		plb		                PLB
.394913	28		plp		                PLP
.394914	68		pla		                PLA             ; end setdbr macro
.394915	48		pha		                PHA             ; begin setdp macro
.394916	08		php		                PHP
.394917	c2 20		rep #$20	                REP #$20        ; set A long
.394919	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39491c	5b		tcd		                TCD
.39491d	28		plp		                PLP
.39491e	68		pla		                PLA             ; end setdp macro
.39491f	c2 10		rep #$10	                REP #$10        ; set X long
.394921	e2 20		sep #$20	                SEP #$20        ; set A short
.394923	a2 00 00	ldx #$0000	                LDX #0
.394926	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394928	f0 1b		beq $394945	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39492a	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.39492c	b0 05		bcs $394933	                BGE check_case          ; No: check the case
.39492e	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394930	82 64 00	brl $394997	                BRL ret_failure
.394933	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394935	90 08		bcc $39493f	                BLT next_char
.394937	c9 7b		cmp #$7b	                CMP #'z'+1
.394939	b0 04		bcs $39493f	                BGE next_char
.39493b	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.39493d	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39493f	e8		inx		next_char       INX                     ; Move to the next character
.394940	e0 00 01	cpx #$0100	                CPX #$100
.394943	d0 e1		bne $394926	                BNE upcase_loop
.394945	22 58 48 39	jsl $394858	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394949	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.39494b	c9 3a		cmp #$3a	                CMP #':'
.39494d	d0 07		bne $394956	                BNE clr_name            ; If not colon, treat it as a file name
.39494f	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394952	22 d2 48 39	jsl $3948d2	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394956	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394959	a9 20		lda #$20	                LDA #' '
.39495b	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.39495e	c8		iny		                INY
.39495f	c0 0b 00	cpy #$000b	                CPY #11
.394962	d0 f7		bne $39495b	                BNE clr_loop
.394964	a2 00 00	ldx #$0000	                LDX #0
.394967	a0 00 00	ldy #$0000	                LDY #0
.39496a	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.39496c	f0 20		beq $39498e	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39496e	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394970	f0 0a		beq $39497c	                BEQ cpy_ext             ; And move to the extension
.394972	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394975	e8		inx		                INX
.394976	c8		iny		                INY                     ; Move to the next character
.394977	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.39497a	d0 ee		bne $39496a	                BNE cpy_name_loop       ; No: process this one
.39497c	e8		inx		cpy_ext         INX                     ; Skip the dot
.39497d	a0 08 00	ldy #$0008	                LDY #8
.394980	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394982	f0 0a		beq $39498e	                BEQ ret_success         ; If it's NULL, we've finished
.394984	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394987	e8		inx		                INX
.394988	c8		iny		                INY                     ; Move to the next character
.394989	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.39498c	d0 f2		bne $394980	                BNE cpy_ext_loop        ; No: process this one
.39498e					ret_success
.39498e	e2 20		sep #$20	                SEP #$20        ; set A short
.394990	64 0e		stz $032e	                STZ DOS_STATUS
.394992	28		plp		                PLP
.394993	2b		pld		                PLD
.394994	ab		plb		                PLB
.394995	38		sec		                SEC
.394996	6b		rtl		                RTL
.394997					ret_failure
.394997	e2 20		sep #$20	                SEP #$20        ; set A short
.394999	85 0e		sta $032e	                STA DOS_STATUS
.39499b	28		plp		                PLP
.39499c	2b		pld		                PLD
.39499d	ab		plb		                PLB
.39499e	18		clc		                CLC
.39499f	6b		rtl		                RTL
.3949a0					DOS_FINDFILE
.3949a0	8b		phb		                PHB
.3949a1	0b		phd		                PHD
.3949a2	08		php		                PHP
.3949a3	48		pha		                PHA             ; begin setdbr macro
.3949a4	08		php		                PHP
.3949a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3949a7	a9 00		lda #$00	                LDA #0
.3949a9	48		pha		                PHA
.3949aa	ab		plb		                PLB
.3949ab	28		plp		                PLP
.3949ac	68		pla		                PLA             ; end setdbr macro
.3949ad	48		pha		                PHA             ; begin setdp macro
.3949ae	08		php		                PHP
.3949af	c2 20		rep #$20	                REP #$20        ; set A long
.3949b1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949b4	5b		tcd		                TCD
.3949b5	28		plp		                PLP
.3949b6	68		pla		                PLA             ; end setdp macro
.3949b7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949b9	22 08 49 39	jsl $394908	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3949bd	b0 05		bcs $3949c4	                BCS mount                       ; If success: try to open the directory
.3949bf	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3949c0	2b		pld		                PLD
.3949c1	ab		plb		                PLB
.3949c2	18		clc		                CLC
.3949c3	6b		rtl		                RTL
.3949c4	22 3a 45 39	jsl $39453a	mount           JSL DOS_MOUNT
.3949c8					get_directory
.3949c8	c2 20		rep #$20	                REP #$20        ; set A long
.3949ca	22 ef 41 39	jsl $3941ef	                JSL DOS_DIROPEN                 ; Get the directory
.3949ce	b0 07		bcs $3949d7	                BCS scan_entries                ; If success: start scanning the directory entries
.3949d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d2	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3949d4	82 47 00	brl $394a1e	                BRL ret_failure
.3949d7	22 6e 42 39	jsl $39426e	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3949db					scan_loop
.3949db	e2 20		sep #$20	                SEP #$20        ; set A short
.3949dd	a0 00 00	ldy #$0000	                LDY #0
.3949e0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3949e2	d0 05		bne $3949e9	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3949e4	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3949e6	82 35 00	brl $394a1e	                BRL ret_failure
.3949e9	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3949eb	f0 26		beq $394a13	                BEQ next_entry                  ; Go to the next entry
.3949ed	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3949f0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949f2	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3949f4	d0 1d		bne $394a13	                BNE next_entry                  ; Yes: skip it!
.3949f6	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3949f8	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3949fa	f0 17		beq $394a13	                BEQ next_entry                  ; Yes: skip it!
.3949fc	a2 00 00	ldx #$0000	                LDX #0
.3949ff	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a02	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a04	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a08	d0 09		bne $394a13	                BNE next_entry                  ; If not equal: try the next entry
.394a0a	c8		iny		                INY                             ; Advance to the next character
.394a0b	e8		inx		                INX
.394a0c	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a0f	f0 16		beq $394a27	                BEQ match                       ; Yes: we have a match!
.394a11	80 ef		bra $394a02	                BRA scan_cmp_loop               ; No: keep checking
.394a13	22 89 42 39	jsl $394289	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394a17	90 05		bcc $394a1e	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394a19	82 bf ff	brl $3949db	                BRL scan_loop                   ; If found: keep scanning
.394a1c	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394a1e					ret_failure
.394a1e	e2 20		sep #$20	                SEP #$20        ; set A short
.394a20	85 0e		sta $032e	                STA DOS_STATUS
.394a22	28		plp		                PLP
.394a23	2b		pld		                PLD
.394a24	ab		plb		                PLB
.394a25	18		clc		                CLC
.394a26	6b		rtl		                RTL
.394a27					match
.394a27	c2 20		rep #$20	                REP #$20        ; set A long
.394a29	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394a2c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a2e	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394a30	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394a33	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a35	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a37					ret_success
.394a37	e2 20		sep #$20	                SEP #$20        ; set A short
.394a39	64 0e		stz $032e	                STZ DOS_STATUS
.394a3b	28		plp		                PLP
.394a3c	2b		pld		                PLD
.394a3d	ab		plb		                PLB
.394a3e	38		sec		                SEC
.394a3f	6b		rtl		                RTL
.394a40					DOS_READFILE
.394a40	8b		phb		                PHB
.394a41	0b		phd		                PHD
.394a42	08		php		                PHP
.394a43	48		pha		                PHA             ; begin setdbr macro
.394a44	08		php		                PHP
.394a45	e2 20		sep #$20	                SEP #$20        ; set A short
.394a47	a9 00		lda #$00	                LDA #0
.394a49	48		pha		                PHA
.394a4a	ab		plb		                PLB
.394a4b	28		plp		                PLP
.394a4c	68		pla		                PLA             ; end setdbr macro
.394a4d	48		pha		                PHA             ; begin setdp macro
.394a4e	08		php		                PHP
.394a4f	c2 20		rep #$20	                REP #$20        ; set A long
.394a51	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a54	5b		tcd		                TCD
.394a55	28		plp		                PLP
.394a56	68		pla		                PLA             ; end setdp macro
.394a57	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a59	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394a5b	48		pha		                PHA
.394a5c	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394a5e	48		pha		                PHA
.394a5f	22 a0 49 39	jsl $3949a0	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394a63	68		pla		                PLA
.394a64	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394a66	68		pla		                PLA
.394a67	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394a69	90 0f		bcc $394a7a	                BCC pass_failure                    ; If found: try to load the cluster
.394a6b	22 ba 47 39	jsl $3947ba	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394a6f	90 09		bcc $394a7a	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394a71					ret_success
.394a71	e2 20		sep #$20	                SEP #$20        ; set A short
.394a73	64 0e		stz $032e	                STZ DOS_STATUS
.394a75	28		plp		                PLP
.394a76	2b		pld		                PLD
.394a77	ab		plb		                PLB
.394a78	38		sec		                SEC
.394a79	6b		rtl		                RTL
.394a7a	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394a7b	2b		pld		                PLD
.394a7c	ab		plb		                PLB
.394a7d	18		clc		                CLC
.394a7e	6b		rtl		                RTL
.394a7f					ENTRYFORCLUS12
.394a7f	8b		phb		                PHB
.394a80	0b		phd		                PHD
.394a81	08		php		                PHP
.394a82	48		pha		                PHA             ; begin setdbr macro
.394a83	08		php		                PHP
.394a84	e2 20		sep #$20	                SEP #$20        ; set A short
.394a86	a9 00		lda #$00	                LDA #0
.394a88	48		pha		                PHA
.394a89	ab		plb		                PLB
.394a8a	28		plp		                PLP
.394a8b	68		pla		                PLA             ; end setdbr macro
.394a8c	48		pha		                PHA             ; begin setdp macro
.394a8d	08		php		                PHP
.394a8e	c2 20		rep #$20	                REP #$20        ; set A long
.394a90	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a93	5b		tcd		                TCD
.394a94	28		plp		                PLP
.394a95	68		pla		                PLA             ; end setdp macro
.394a96	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a98	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394a9a	0a		asl a		                ASL A
.394a9b	85 28		sta $0348	                STA DOS_TEMP
.394a9d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a9f	2a		rol a		                ROL A
.394aa0	85 2a		sta $034a	                STA DOS_TEMP+2
.394aa2	18		clc		                CLC
.394aa3	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394aa5	65 28		adc $0348	                ADC DOS_TEMP
.394aa7	85 28		sta $0348	                STA DOS_TEMP
.394aa9	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394aab	65 2a		adc $034a	                ADC DOS_TEMP+2
.394aad	85 2a		sta $034a	                STA DOS_TEMP+2
.394aaf	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394ab1	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394ab3	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394ab5	29 ff 03	and #$03ff	                AND #$003FF
.394ab8	aa		tax		                TAX
.394ab9	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394abb	66 28		ror $0348	                ROR DOS_TEMP
.394abd	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394abf	66 28		ror $0348	                ROR DOS_TEMP
.394ac1	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ac3	66 28		ror $0348	                ROR DOS_TEMP
.394ac5	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ac7	66 28		ror $0348	                ROR DOS_TEMP
.394ac9	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394acb	66 28		ror $0348	                ROR DOS_TEMP
.394acd	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394acf	66 28		ror $0348	                ROR DOS_TEMP
.394ad1	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ad3	66 28		ror $0348	                ROR DOS_TEMP
.394ad5	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ad7	66 28		ror $0348	                ROR DOS_TEMP
.394ad9	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394adb	66 28		ror $0348	                ROR DOS_TEMP
.394add	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394ade	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394ae2	65 28		adc $0348	                ADC DOS_TEMP
.394ae4	85 24		sta $0344	                STA DOS_FAT_LBA
.394ae6	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394aea	65 2a		adc $034a	                ADC DOS_TEMP+2
.394aec	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394aee	28		plp		                PLP
.394aef	2b		pld		                PLD
.394af0	ab		plb		                PLB
.394af1	6b		rtl		                RTL
.394af2					FATFORCLUSTER12
.394af2	8b		phb		                PHB
.394af3	0b		phd		                PHD
.394af4	08		php		                PHP
.394af5	48		pha		                PHA             ; begin setdbr macro
.394af6	08		php		                PHP
.394af7	e2 20		sep #$20	                SEP #$20        ; set A short
.394af9	a9 00		lda #$00	                LDA #0
.394afb	48		pha		                PHA
.394afc	ab		plb		                PLB
.394afd	28		plp		                PLP
.394afe	68		pla		                PLA             ; end setdbr macro
.394aff	48		pha		                PHA             ; begin setdp macro
.394b00	08		php		                PHP
.394b01	c2 20		rep #$20	                REP #$20        ; set A long
.394b03	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b06	5b		tcd		                TCD
.394b07	28		plp		                PLP
.394b08	68		pla		                PLA             ; end setdp macro
.394b09	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b0b	a2 00 00	ldx #$0000	                LDX #0
.394b0e	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b11	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b15	e8		inx		                INX
.394b16	e8		inx		                INX
.394b17	e0 00 04	cpx #$0400	                CPX #1024
.394b1a	d0 f5		bne $394b11	                BNE clr_loop
.394b1c	22 7f 4a 39	jsl $394a7f	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394b20	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394b22	85 02		sta $0322	                STA BIOS_LBA
.394b24	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b26	85 04		sta $0324	                STA BIOS_LBA+2
.394b28	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394b2b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b2d	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b30	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b32	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b36	90 17		bcc $394b4f	                BCC error
.394b38	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394b3a	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394b3d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b3f	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b42	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b44	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b48	90 05		bcc $394b4f	                BCC error
.394b4a	28		plp		                PLP
.394b4b	2b		pld		                PLD
.394b4c	ab		plb		                PLB
.394b4d	38		sec		                SEC
.394b4e	6b		rtl		                RTL
.394b4f					error
.394b4f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b51	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b53	85 0e		sta $032e	                STA DOS_STATUS
.394b55	28		plp		                PLP
.394b56	2b		pld		                PLD
.394b57	ab		plb		                PLB
.394b58	18		clc		                CLC
.394b59	6b		rtl		                RTL
.394b5a					FATFORCLUSTER32
.394b5a	8b		phb		                PHB
.394b5b	0b		phd		                PHD
.394b5c	48		pha		                PHA             ; begin setdbr macro
.394b5d	08		php		                PHP
.394b5e	e2 20		sep #$20	                SEP #$20        ; set A short
.394b60	a9 00		lda #$00	                LDA #0
.394b62	48		pha		                PHA
.394b63	ab		plb		                PLB
.394b64	28		plp		                PLP
.394b65	68		pla		                PLA             ; end setdbr macro
.394b66	48		pha		                PHA             ; begin setdp macro
.394b67	08		php		                PHP
.394b68	c2 20		rep #$20	                REP #$20        ; set A long
.394b6a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b6d	5b		tcd		                TCD
.394b6e	28		plp		                PLP
.394b6f	68		pla		                PLA             ; end setdp macro
.394b70	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b72	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b74	85 24		sta $0344	                STA DOS_FAT_LBA
.394b76	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b78	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b7a	a2 07 00	ldx #$0007	                LDX #7
.394b7d	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394b7f	66 24		ror $0344	                ROR DOS_FAT_LBA
.394b81	ca		dex		                DEX
.394b82	d0 f9		bne $394b7d	                BNE div_loop
.394b84	18		clc		                CLC
.394b85	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394b87	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394b8b	85 24		sta $0344	                STA DOS_FAT_LBA
.394b8d	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b8f	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394b93	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b95	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394b97	85 02		sta $0322	                STA BIOS_LBA
.394b99	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b9b	85 04		sta $0324	                STA BIOS_LBA+2
.394b9d	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394ba0	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ba2	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394ba5	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ba7	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394bab	b0 06		bcs $394bb3	                BCS find_entry
.394bad	e2 20		sep #$20	                SEP #$20        ; set A short
.394baf	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bb1	80 0e		bra $394bc1	                BRA ret_failure
.394bb3					find_entry
.394bb3	c2 20		rep #$20	                REP #$20        ; set A long
.394bb5	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bb7	0a		asl a		                ASL A
.394bb8	0a		asl a		                ASL A                           ; * 4
.394bb9	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394bbc	aa		tax		                TAX                             ; X should be the offset within the sector
.394bbd	2b		pld		ret_success     PLD
.394bbe	ab		plb		                PLB
.394bbf	38		sec		                SEC                             ; return success
.394bc0	6b		rtl		                RTL
.394bc1	2b		pld		ret_failure     PLD
.394bc2	ab		plb		                PLB
.394bc3	18		clc		                CLC                             ; Return failure
.394bc4	6b		rtl		                RTL
.394bc5					NEXTCLUSTER
.394bc5	08		php		                PHP
.394bc6	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc8	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394bcc	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394bce	d0 08		bne $394bd8	                BNE fat32                       ; No: assume it's FAT32
.394bd0	22 e6 4b 39	jsl $394be6	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394bd4	90 0d		bcc $394be3	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bd6	80 06		bra $394bde	                BRA ret_success
.394bd8	22 4e 4c 39	jsl $394c4e	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394bdc	90 05		bcc $394be3	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bde	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394be0	28		plp		                PLP
.394be1	38		sec		                SEC
.394be2	6b		rtl		                RTL
.394be3	28		plp		pass_failure    PLP
.394be4	18		clc		                CLC
.394be5	6b		rtl		                RTL
.394be6					NEXTCLUSTER12
.394be6	8b		phb		                    PHB
.394be7	0b		phd		                    PHD
.394be8	08		php		                    PHP
.394be9	48		pha		                PHA             ; begin setdbr macro
.394bea	08		php		                PHP
.394beb	e2 20		sep #$20	                SEP #$20        ; set A short
.394bed	a9 00		lda #$00	                LDA #0
.394bef	48		pha		                PHA
.394bf0	ab		plb		                PLB
.394bf1	28		plp		                PLP
.394bf2	68		pla		                PLA             ; end setdbr macro
.394bf3	48		pha		                PHA             ; begin setdp macro
.394bf4	08		php		                PHP
.394bf5	c2 20		rep #$20	                REP #$20        ; set A long
.394bf7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bfa	5b		tcd		                TCD
.394bfb	28		plp		                PLP
.394bfc	68		pla		                PLA             ; end setdp macro
.394bfd	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bff	22 f2 4a 39	jsl $394af2	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c03	b0 03		bcs $394c08	                    BCS chk_clus_id
.394c05	82 41 00	brl $394c49	                    BRL pass_failure
.394c08	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c0a	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c0d	d0 0d		bne $394c1c	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c0f					is_even
.394c0f	c2 20		rep #$20	                REP #$20        ; set A long
.394c11	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c15	29 ff 0f	and #$0fff	                    AND #$0FFF
.394c18	85 28		sta $0348	                    STA DOS_TEMP
.394c1a	80 0c		bra $394c28	                    BRA check_id
.394c1c					is_odd
.394c1c	c2 20		rep #$20	                REP #$20        ; set A long
.394c1e	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394c22	4a		lsr a		                    LSR A
.394c23	4a		lsr a		                    LSR A
.394c24	4a		lsr a		                    LSR A
.394c25	4a		lsr a		                    LSR A
.394c26	85 28		sta $0348	                    STA DOS_TEMP
.394c28					check_id
.394c28	c2 20		rep #$20	                REP #$20        ; set A long
.394c2a	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394c2c	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394c2f	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394c32	f0 0f		beq $394c43	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394c34	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394c36	85 10		sta $0330	                    STA DOS_CLUS_ID
.394c38	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394c3a					ret_success
.394c3a	e2 20		sep #$20	                SEP #$20        ; set A short
.394c3c	64 0e		stz $032e	                    STZ DOS_STATUS
.394c3e	28		plp		                    PLP
.394c3f	2b		pld		                    PLD
.394c40	ab		plb		                    PLB
.394c41	38		sec		                    SEC
.394c42	6b		rtl		                    RTL
.394c43					no_more
.394c43	e2 20		sep #$20	                SEP #$20        ; set A short
.394c45	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394c47	85 0e		sta $032e	                    STA DOS_STATUS
.394c49	28		plp		pass_failure        PLP
.394c4a	2b		pld		                    PLD
.394c4b	ab		plb		                    PLB
.394c4c	18		clc		                    CLC
.394c4d	6b		rtl		                    RTL
.394c4e					NEXTCLUSTER32
.394c4e	8b		phb		                PHB
.394c4f	0b		phd		                PHD
.394c50	08		php		                PHP
.394c51	48		pha		                PHA             ; begin setdbr macro
.394c52	08		php		                PHP
.394c53	e2 20		sep #$20	                SEP #$20        ; set A short
.394c55	a9 00		lda #$00	                LDA #0
.394c57	48		pha		                PHA
.394c58	ab		plb		                PLB
.394c59	28		plp		                PLP
.394c5a	68		pla		                PLA             ; end setdbr macro
.394c5b	48		pha		                PHA             ; begin setdp macro
.394c5c	08		php		                PHP
.394c5d	c2 20		rep #$20	                REP #$20        ; set A long
.394c5f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c62	5b		tcd		                TCD
.394c63	28		plp		                PLP
.394c64	68		pla		                PLA             ; end setdp macro
.394c65	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c67	22 5a 4b 39	jsl $394b5a	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394c6b	90 33		bcc $394ca0	                BCC ret_failure                 ; If it did not work, return the error
.394c6d	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394c71	85 28		sta $0348	                STA DOS_TEMP
.394c73	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394c77	85 2a		sta $034a	                STA DOS_TEMP+2
.394c79	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394c7b	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394c7e	d0 0d		bne $394c8d	                BNE found_next
.394c80	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c82	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394c85	d0 06		bne $394c8d	                BNE found_next                  ; No: return this cluster as the next
.394c87	e2 20		sep #$20	                SEP #$20        ; set A short
.394c89	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394c8b	80 13		bra $394ca0	                BRA ret_failure
.394c8d					found_next
.394c8d	c2 20		rep #$20	                REP #$20        ; set A long
.394c8f	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394c91	85 10		sta $0330	                STA DOS_CLUS_ID
.394c93	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c95	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c97					ret_success
.394c97	e2 20		sep #$20	                SEP #$20        ; set A short
.394c99	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394c9b	28		plp		                PLP
.394c9c	2b		pld		                PLD
.394c9d	ab		plb		                PLB
.394c9e	38		sec		                SEC
.394c9f	6b		rtl		                RTL
.394ca0					ret_failure
.394ca0	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca2	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394ca4	28		plp		                PLP
.394ca5	2b		pld		                PLD
.394ca6	ab		plb		                PLB
.394ca7	18		clc		                CLC
.394ca8	6b		rtl		                RTL
.394ca9					DOS_READNEXT
.394ca9	08		php		                PHP
.394caa	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cac	22 c5 4b 39	jsl $394bc5	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394cb0	90 09		bcc $394cbb	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394cb2	22 ba 47 39	jsl $3947ba	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394cb6	90 03		bcc $394cbb	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394cb8	28		plp		ret_success     PLP
.394cb9	38		sec		                SEC
.394cba	6b		rtl		                RTL
.394cbb	28		plp		pass_failure    PLP
.394cbc	18		clc		                CLC
.394cbd	6b		rtl		                RTL
.394cbe					DOS_FREECLUS
.394cbe	08		php		                PHP
.394cbf	48		pha		                PHA             ; begin setdp macro
.394cc0	08		php		                PHP
.394cc1	c2 20		rep #$20	                REP #$20        ; set A long
.394cc3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cc6	5b		tcd		                TCD
.394cc7	28		plp		                PLP
.394cc8	68		pla		                PLA             ; end setdp macro
.394cc9	e2 20		sep #$20	                SEP #$20        ; set A short
.394ccb	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394ccf	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394cd1	d0 08		bne $394cdb	                BNE fat32                       ; No: assume it's FAT32
.394cd3	22 4f 4d 39	jsl $394d4f	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394cd7	90 0d		bcc $394ce6	                BCC pass_failure                ; If there was an error, pass it up the chain
.394cd9	80 06		bra $394ce1	                BRA ret_success
.394cdb	22 27 4e 39	jsl $394e27	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394cdf	90 05		bcc $394ce6	                BCC pass_failure                ; If there was an error, pass it up the chain
.394ce1	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394ce3	28		plp		                PLP
.394ce4	38		sec		                SEC
.394ce5	6b		rtl		                RTL
.394ce6	28		plp		pass_failure    PLP
.394ce7	18		clc		                CLC
.394ce8	6b		rtl		                RTL
.394ce9					FDC_READ2FAT12
.394ce9	8b		phb		                    PHB
.394cea	0b		phd		                    PHD
.394ceb	08		php		                    PHP
.394cec	48		pha		                PHA             ; begin setdbr macro
.394ced	08		php		                PHP
.394cee	e2 20		sep #$20	                SEP #$20        ; set A short
.394cf0	a9 00		lda #$00	                LDA #0
.394cf2	48		pha		                PHA
.394cf3	ab		plb		                PLB
.394cf4	28		plp		                PLP
.394cf5	68		pla		                PLA             ; end setdbr macro
.394cf6	48		pha		                PHA             ; begin setdp macro
.394cf7	08		php		                PHP
.394cf8	c2 20		rep #$20	                REP #$20        ; set A long
.394cfa	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cfd	5b		tcd		                TCD
.394cfe	28		plp		                PLP
.394cff	68		pla		                PLA             ; end setdp macro
.394d00	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d02	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394d05	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d07	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394d0a	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d0c	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394d0e	85 02		sta $0322	                    STA BIOS_LBA
.394d10	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394d12	85 04		sta $0324	                    STA BIOS_LBA+2
.394d14	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394d18	b0 07		bcs $394d21	                    BCS inc_sect2                   ; If success: start getting the second sector
.394d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.394d1c	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d1e	82 1c 00	brl $394d3d	                    BRL ret_failure
.394d21					inc_sect2
.394d21	c2 20		rep #$20	                REP #$20        ; set A long
.394d23	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394d25	d0 02		bne $394d29	                    BNE inc_buff_ptr
.394d27	e6 04		inc $0324	                    INC BIOS_LBA+2
.394d29	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d2c	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d2e	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d31	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d33	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394d37	b0 0d		bcs $394d46	                    BCS ret_success                 ; If success, return success
.394d39	e2 20		sep #$20	                SEP #$20        ; set A short
.394d3b	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d3d					ret_failure
.394d3d	e2 20		sep #$20	                SEP #$20        ; set A short
.394d3f	85 00		sta $0320	                    STA BIOS_STATUS
.394d41	28		plp		                    PLP
.394d42	2b		pld		                    PLD
.394d43	ab		plb		                    PLB
.394d44	18		clc		                    CLC
.394d45	6b		rtl		                    RTL
.394d46					ret_success
.394d46	e2 20		sep #$20	                SEP #$20        ; set A short
.394d48	64 00		stz $0320	                    STZ BIOS_STATUS
.394d4a	28		plp		                    PLP
.394d4b	2b		pld		                    PLD
.394d4c	ab		plb		                    PLB
.394d4d	38		sec		                    SEC
.394d4e	6b		rtl		                    RTL
.394d4f					DOS_FREECLUS12
.394d4f	da		phx		                PHX
.394d50	8b		phb		                PHB
.394d51	0b		phd		                PHD
.394d52	08		php		                PHP
.394d53	48		pha		                PHA             ; begin setdbr macro
.394d54	08		php		                PHP
.394d55	e2 20		sep #$20	                SEP #$20        ; set A short
.394d57	a9 00		lda #$00	                LDA #0
.394d59	48		pha		                PHA
.394d5a	ab		plb		                PLB
.394d5b	28		plp		                PLP
.394d5c	68		pla		                PLA             ; end setdbr macro
.394d5d	48		pha		                PHA             ; begin setdp macro
.394d5e	08		php		                PHP
.394d5f	c2 20		rep #$20	                REP #$20        ; set A long
.394d61	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d64	5b		tcd		                TCD
.394d65	28		plp		                PLP
.394d66	68		pla		                PLA             ; end setdp macro
.394d67	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d69	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394d6c	85 10		sta $0330	                STA DOS_CLUS_ID
.394d6e	a9 00 00	lda #$0000	                LDA #0
.394d71	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d73	22 7f 4a 39	jsl $394a7f	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394d77	22 e9 4c 39	jsl $394ce9	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394d7b	b0 07		bcs $394d84	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394d7d	e2 20		sep #$20	                SEP #$20        ; set A short
.394d7f	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d81	82 99 00	brl $394e1d	                BRL ret_failure
.394d84					start_of_fat
.394d84	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d86	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d88	89 01 00	bit #$0001	                BIT #1
.394d8b	d0 09		bne $394d96	                BNE is_odd
.394d8d	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394d91	29 ff 0f	and #$0fff	                AND #$0FFF
.394d94	80 08		bra $394d9e	                BRA chk_available
.394d96	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394d9a	4a		lsr a		                LSR A
.394d9b	4a		lsr a		                LSR A
.394d9c	4a		lsr a		                LSR A
.394d9d	4a		lsr a		                LSR A
.394d9e					chk_available
.394d9e	85 28		sta $0348	                STA DOS_TEMP
.394da0	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394da3	f0 03		beq $394da8	                BEQ chk_found
.394da5	82 39 00	brl $394de1	                BRL next_cluster                ; No: advance to the next cluster
.394da8	8a		txa		chk_found       TXA
.394da9	85 2a		sta $034a	                STA DOS_TEMP+2
.394dab	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394dad	89 01 00	bit #$0001	                BIT #1
.394db0	d0 0d		bne $394dbf	                BNE is_odd2
.394db2					is_even2
.394db2	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394db6	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394db9	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394dbd	80 0b		bra $394dca	                BRA write_fat
.394dbf					is_odd2
.394dbf	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394dc3	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394dc6	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394dca	22 e4 4e 39	jsl $394ee4	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394dce	b0 07		bcs $394dd7	                BCS ret_success                 ; If success: return success
.394dd0	e2 20		sep #$20	                SEP #$20        ; set A short
.394dd2	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394dd4	82 46 00	brl $394e1d	                BRL ret_failure
.394dd7					ret_success
.394dd7	e2 20		sep #$20	                SEP #$20        ; set A short
.394dd9	64 0e		stz $032e	                STZ DOS_STATUS
.394ddb	28		plp		                PLP
.394ddc	2b		pld		                PLD
.394ddd	ab		plb		                PLB
.394dde	fa		plx		                PLX
.394ddf	38		sec		                SEC
.394de0	6b		rtl		                RTL
.394de1					next_cluster
.394de1	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394de3	d0 02		bne $394de7	                BNE calc_entry
.394de5	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394de7	22 7f 4a 39	jsl $394a7f	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394deb	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394dee	f0 03		beq $394df3	                BEQ chk_end_of_fat
.394df0	82 93 ff	brl $394d86	                BRL chk_cluster                 ; No: go back and check it too
.394df3					chk_end_of_fat
.394df3	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394df5	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394df9	d0 0f		bne $394e0a	                BNE next_2
.394dfb	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394dfd	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394e01	d0 07		bne $394e0a	                BNE next_2                      ; No: get the next to sectors
.394e03	e2 20		sep #$20	                SEP #$20        ; set A short
.394e05	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394e07	82 13 00	brl $394e1d	                BRL ret_failure
.394e0a					next_2
.394e0a	22 e9 4c 39	jsl $394ce9	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394e0e	90 06		bcc $394e16	                BCC fat_fail                    ; If failed: return error
.394e10	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394e13	82 70 ff	brl $394d86	                BRL chk_cluster                 ; And start checking from there
.394e16					fat_fail
.394e16	e2 20		sep #$20	                SEP #$20        ; set A short
.394e18	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e1a	82 00 00	brl $394e1d	                BRL ret_failure
.394e1d					ret_failure
.394e1d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1f	85 0e		sta $032e	                STA DOS_STATUS
.394e21	28		plp		                PLP
.394e22	2b		pld		                PLD
.394e23	ab		plb		                PLB
.394e24	fa		plx		                PLX
.394e25	18		clc		                CLC
.394e26	6b		rtl		                RTL
.394e27					DOS_FREECLUS32
.394e27	8b		phb		                PHB
.394e28	0b		phd		                PHD
.394e29	08		php		                PHP
.394e2a	48		pha		                PHA             ; begin setdbr macro
.394e2b	08		php		                PHP
.394e2c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e2e	a9 00		lda #$00	                LDA #0
.394e30	48		pha		                PHA
.394e31	ab		plb		                PLB
.394e32	28		plp		                PLP
.394e33	68		pla		                PLA             ; end setdbr macro
.394e34	48		pha		                PHA             ; begin setdp macro
.394e35	08		php		                PHP
.394e36	c2 20		rep #$20	                REP #$20        ; set A long
.394e38	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e3b	5b		tcd		                TCD
.394e3c	28		plp		                PLP
.394e3d	68		pla		                PLA             ; end setdp macro
.394e3e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e40	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394e43	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e45	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394e48	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e4a	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394e4e	85 02		sta $0322	                STA BIOS_LBA
.394e50	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394e54	85 04		sta $0324	                STA BIOS_LBA+2
.394e56	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394e5a	b0 07		bcs $394e63	                BCS initial_entry               ; If OK: set the initial entry to check
.394e5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5e	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394e60	82 5e 00	brl $394ec1	                BRL ret_failure
.394e63					initial_entry
.394e63	c2 20		rep #$20	                REP #$20        ; set A long
.394e65	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394e68	85 10		sta $0330	                STA DOS_CLUS_ID
.394e6a	a9 00 00	lda #$0000	                LDA #0
.394e6d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e6f	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394e72	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394e76	d0 06		bne $394e7e	                BNE next_entry                  ; No: move to the next entry
.394e78	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394e7c	f0 29		beq $394ea7	                BEQ found_free                  ; Yes: go to allocate and return it
.394e7e	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394e80	d0 02		bne $394e84	                BNE inc_ptr
.394e82	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e84	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394e85	e8		inx		                INX
.394e86	e8		inx		                INX
.394e87	e8		inx		                INX
.394e88	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394e8b	90 e5		bcc $394e72	                BLT chk_entry                   ; No: check this entry
.394e8d	18		clc		                CLC                             ; Point to the next sector in the FAT
.394e8e	a5 02		lda $0322	                LDA BIOS_LBA
.394e90	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394e93	85 02		sta $0322	                STA BIOS_LBA
.394e95	a5 04		lda $0324	                LDA BIOS_LBA+2
.394e97	69 00 00	adc #$0000	                ADC #0
.394e9a	85 04		sta $0324	                STA BIOS_LBA+2
.394e9c	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394ea0	b0 00		bcs $394ea2	                BCS set_ptr                     ; If OK: set the pointer and check it
.394ea2	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394ea5	80 cb		bra $394e72	                BRA chk_entry                   ; Check this entry
.394ea7					found_free
.394ea7	c2 20		rep #$20	                REP #$20        ; set A long
.394ea9	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394eac	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394eb0	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394eb3	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394eb7	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ebb	b0 0d		bcs $394eca	                BCS ret_success                 ; If OK: return success
.394ebd	e2 20		sep #$20	                SEP #$20        ; set A short
.394ebf	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394ec1					ret_failure
.394ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.394ec3	85 0e		sta $032e	                STA DOS_STATUS
.394ec5	28		plp		                PLP
.394ec6	2b		pld		                PLD
.394ec7	ab		plb		                PLB
.394ec8	18		clc		                CLC
.394ec9	6b		rtl		                RTL
.394eca					ret_success
.394eca	e2 20		sep #$20	                SEP #$20        ; set A short
.394ecc	64 0e		stz $032e	                STZ DOS_STATUS
.394ece	28		plp		                PLP
.394ecf	2b		pld		                PLD
.394ed0	ab		plb		                PLB
.394ed1	38		sec		                SEC
.394ed2	6b		rtl		                RTL
.394ed3					DELCLUSTER
.394ed3	e2 20		sep #$20	                SEP #$20        ; set A short
.394ed5	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394ed9	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394edb	d0 04		bne $394ee1	                BNE fat32                       ; No: assume it's FAT32
.394edd	5c 2b 4f 39	jmp $394f2b	fat12           JML DELCLUSTER12
.394ee1	4c 79 4f	jmp $394f79	fat32           JMP DELCLUSTER32
.394ee4					WRITEFAT12
.394ee4	8b		phb		                PHB
.394ee5	0b		phd		                PHD
.394ee6	48		pha		                PHA             ; begin setdbr macro
.394ee7	08		php		                PHP
.394ee8	e2 20		sep #$20	                SEP #$20        ; set A short
.394eea	a9 00		lda #$00	                LDA #0
.394eec	48		pha		                PHA
.394eed	ab		plb		                PLB
.394eee	28		plp		                PLP
.394eef	68		pla		                PLA             ; end setdbr macro
.394ef0	48		pha		                PHA             ; begin setdp macro
.394ef1	08		php		                PHP
.394ef2	c2 20		rep #$20	                REP #$20        ; set A long
.394ef4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ef7	5b		tcd		                TCD
.394ef8	28		plp		                PLP
.394ef9	68		pla		                PLA             ; end setdp macro
.394efa	c2 30		rep #$30	                REP #$30        ; set A&X long
.394efc	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394eff	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f01	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394f04	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f06	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394f08	85 02		sta $0322	                STA BIOS_LBA
.394f0a	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394f0c	85 04		sta $0324	                STA BIOS_LBA+2
.394f0e	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394f12	90 14		bcc $394f28	                BCC done
.394f14	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f17	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f19	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f1c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f1e	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f20	d0 02		bne $394f24	                BNE put_second
.394f22	e6 04		inc $0324	                INC BIOS_LBA+2
.394f24	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394f28	2b		pld		done            PLD
.394f29	ab		plb		                PLB
.394f2a	6b		rtl		                RTL
.394f2b					DELCLUSTER12
.394f2b	8b		phb		                PHB
.394f2c	0b		phd		                PHD
.394f2d	08		php		                PHP
.394f2e	48		pha		                PHA             ; begin setdbr macro
.394f2f	08		php		                PHP
.394f30	e2 20		sep #$20	                SEP #$20        ; set A short
.394f32	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f34	48		pha		                PHA
.394f35	ab		plb		                PLB
.394f36	28		plp		                PLP
.394f37	68		pla		                PLA             ; end setdbr macro
.394f38	48		pha		                PHA             ; begin setdp macro
.394f39	08		php		                PHP
.394f3a	c2 20		rep #$20	                REP #$20        ; set A long
.394f3c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f3f	5b		tcd		                TCD
.394f40	28		plp		                PLP
.394f41	68		pla		                PLA             ; end setdp macro
.394f42	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f44	22 f2 4a 39	jsl $394af2	                JSL FATFORCLUSTER12
.394f48	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394f49	89 01 00	bit #$0001	                BIT #1
.394f4c	d0 08		bne $394f56	                BNE is_odd
.394f4e	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394f51	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394f54	80 06		bra $394f5c	                BRA save_update
.394f56	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394f59	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394f5c	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394f5f	22 e4 4e 39	jsl $394ee4	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394f63	b0 0b		bcs $394f70	                BCS ret_success
.394f65					ret_failure
.394f65	e2 20		sep #$20	                SEP #$20        ; set A short
.394f67	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394f69	85 0e		sta $032e	                STA DOS_STATUS
.394f6b	28		plp		                PLP
.394f6c	2b		pld		                PLD
.394f6d	ab		plb		                PLB
.394f6e	18		clc		                CLC
.394f6f	6b		rtl		                RTL
.394f70					ret_success
.394f70	e2 20		sep #$20	                SEP #$20        ; set A short
.394f72	64 0e		stz $032e	                STZ DOS_STATUS
.394f74	28		plp		                PLP
.394f75	2b		pld		                PLD
.394f76	ab		plb		                PLB
.394f77	38		sec		                SEC
.394f78	6b		rtl		                RTL
.394f79					DELCLUSTER32
.394f79	8b		phb		                PHB
.394f7a	0b		phd		                PHD
.394f7b	08		php		                PHP
.394f7c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f7e	48		pha		                PHA             ; begin setdbr macro
.394f7f	08		php		                PHP
.394f80	e2 20		sep #$20	                SEP #$20        ; set A short
.394f82	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f84	48		pha		                PHA
.394f85	ab		plb		                PLB
.394f86	28		plp		                PLP
.394f87	68		pla		                PLA             ; end setdbr macro
.394f88	48		pha		                PHA             ; begin setdp macro
.394f89	08		php		                PHP
.394f8a	c2 20		rep #$20	                REP #$20        ; set A long
.394f8c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f8f	5b		tcd		                TCD
.394f90	28		plp		                PLP
.394f91	68		pla		                PLA             ; end setdp macro
.394f92	22 5a 4b 39	jsl $394b5a	                JSL FATFORCLUSTER32
.394f96	a9 00 00	lda #$0000	                LDA #0
.394f99	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394f9c	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394f9f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394fa3	b0 0b		bcs $394fb0	                BCS ret_success
.394fa5					ret_failure
.394fa5	e2 20		sep #$20	                SEP #$20        ; set A short
.394fa7	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394fa9	85 0e		sta $032e	                STA DOS_STATUS
.394fab	28		plp		                PLP
.394fac	2b		pld		                PLD
.394fad	ab		plb		                PLB
.394fae	18		clc		                CLC
.394faf	6b		rtl		                RTL
.394fb0					ret_success
.394fb0	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb2	64 0e		stz $032e	                STZ DOS_STATUS
.394fb4	28		plp		                PLP
.394fb5	2b		pld		                PLD
.394fb6	ab		plb		                PLB
.394fb7	38		sec		                SEC
.394fb8	6b		rtl		                RTL
.394fb9					DOS_APPENDCLUS
.394fb9	8b		phb		                PHB
.394fba	0b		phd		                PHD
.394fbb	08		php		                PHP
.394fbc	48		pha		                PHA             ; begin setdbr macro
.394fbd	08		php		                PHP
.394fbe	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fc2	48		pha		                PHA
.394fc3	ab		plb		                PLB
.394fc4	28		plp		                PLP
.394fc5	68		pla		                PLA             ; end setdbr macro
.394fc6	48		pha		                PHA             ; begin setdp macro
.394fc7	08		php		                PHP
.394fc8	c2 20		rep #$20	                REP #$20        ; set A long
.394fca	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fcd	5b		tcd		                TCD
.394fce	28		plp		                PLP
.394fcf	68		pla		                PLA             ; end setdp macro
.394fd0	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fd2	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394fd4	48		pha		                PHA
.394fd5	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394fd7	48		pha		                PHA
.394fd8	22 be 4c 39	jsl $394cbe	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394fdc	b0 09		bcs $394fe7	                BCS save_cluster                ; If we got a cluster, write the data to it
.394fde	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394fdf	85 10		sta $0330	                STA DOS_CLUS_ID
.394fe1	68		pla		                PLA
.394fe2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394fe4	82 7d 00	brl $395064	                BRL pass_failure                ; Pass the failure back up the chain
.394fe7	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394fe9	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394fec	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394fee	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394ff1	22 f7 47 39	jsl $3947f7	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394ff5	90 e7		bcc $394fde	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394ff7	68		pla		                PLA                             ; Restore the cluster of the file
.394ff8	85 10		sta $0330	                STA DOS_CLUS_ID
.394ffa	68		pla		                PLA
.394ffb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ffd	22 c5 4b 39	jsl $394bc5	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.395001	b0 fa		bcs $394ffd	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.395003	e2 20		sep #$20	                SEP #$20        ; set A short
.395005	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.395009	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39500b	d0 3d		bne $39504a	                BNE fat32                       ; No: assume it's FAT32
.39500d					fat12
.39500d	c2 20		rep #$20	                REP #$20        ; set A long
.39500f	22 7f 4a 39	jsl $394a7f	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.395013	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.395015	89 01 00	bit #$0001	                BIT #1
.395018	d0 11		bne $39502b	                BNE is_odd
.39501a	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.39501d	29 ff 0f	and #$0fff	                AND #$0FFF
.395020	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395023	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.395026	29 00 f0	and #$f000	                AND #$F000
.395029	80 10		bra $39503b	                BRA update_fat12
.39502b	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.39502e	0a		asl a		                ASL A
.39502f	0a		asl a		                ASL A
.395030	0a		asl a		                ASL A
.395031	0a		asl a		                ASL A
.395032	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395035	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.395038	29 0f 00	and #$000f	                AND #$000F
.39503b	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.39503e	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395041	22 e4 4e 39	jsl $394ee4	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.395045	b0 22		bcs $395069	                BCS ret_success
.395047	82 1a 00	brl $395064	                BRL pass_failure
.39504a					fat32
.39504a	c2 20		rep #$20	                REP #$20        ; set A long
.39504c	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.39504f	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395052	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.395055	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.395058	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.39505c	b0 0b		bcs $395069	                BCS ret_success
.39505e	e2 20		sep #$20	                SEP #$20        ; set A short
.395060	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.395062	85 0e		sta $032e	                STA DOS_STATUS
.395064	28		plp		pass_failure    PLP
.395065	2b		pld		                PLD
.395066	ab		plb		                PLB
.395067	18		clc		                CLC
.395068	6b		rtl		                RTL
.395069					ret_success
.395069	e2 20		sep #$20	                SEP #$20        ; set A short
.39506b	64 0e		stz $032e	                STZ DOS_STATUS
.39506d	28		plp		                PLP
.39506e	2b		pld		                PLD
.39506f	ab		plb		                PLB
.395070	38		sec		                SEC
.395071	6b		rtl		                RTL
.395072					BCD2BIN
.395072	8b		phb		                PHB
.395073	0b		phd		                PHD
.395074	08		php		                PHP
.395075	48		pha		                PHA             ; begin setdbr macro
.395076	08		php		                PHP
.395077	e2 20		sep #$20	                SEP #$20        ; set A short
.395079	a9 00		lda #$00	                LDA #0
.39507b	48		pha		                PHA
.39507c	ab		plb		                PLB
.39507d	28		plp		                PLP
.39507e	68		pla		                PLA             ; end setdbr macro
.39507f	48		pha		                PHA             ; begin setdp macro
.395080	08		php		                PHP
.395081	c2 20		rep #$20	                REP #$20        ; set A long
.395083	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395086	5b		tcd		                TCD
.395087	28		plp		                PLP
.395088	68		pla		                PLA             ; end setdp macro
.395089	c2 30		rep #$30	                REP #$30        ; set A&X long
.39508b	85 28		sta $0348	                STA DOS_TEMP
.39508d	29 0f 00	and #$000f	                AND #$000F
.395090	85 2a		sta $034a	                STA DOS_TEMP+2
.395092	a5 28		lda $0348	                LDA DOS_TEMP
.395094	4a		lsr a		                LSR A
.395095	4a		lsr a		                LSR A
.395096	4a		lsr a		                LSR A
.395097	4a		lsr a		                LSR A
.395098	85 28		sta $0348	                STA DOS_TEMP
.39509a	29 0f 00	and #$000f	                AND #$000F
.39509d	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950a1	a9 0a 00	lda #$000a	                LDA #10
.3950a4	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950a8	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950ac	18		clc		                CLC
.3950ad	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950af	85 2a		sta $034a	                STA DOS_TEMP+2
.3950b1	a5 28		lda $0348	                LDA DOS_TEMP
.3950b3	4a		lsr a		                LSR A
.3950b4	4a		lsr a		                LSR A
.3950b5	4a		lsr a		                LSR A
.3950b6	4a		lsr a		                LSR A
.3950b7	85 28		sta $0348	                STA DOS_TEMP
.3950b9	29 0f 00	and #$000f	                AND #$000F
.3950bc	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950c0	a9 64 00	lda #$0064	                LDA #100
.3950c3	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950c7	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950cb	18		clc		                CLC
.3950cc	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950ce	85 2a		sta $034a	                STA DOS_TEMP+2
.3950d0	a5 28		lda $0348	                LDA DOS_TEMP
.3950d2	4a		lsr a		                LSR A
.3950d3	4a		lsr a		                LSR A
.3950d4	4a		lsr a		                LSR A
.3950d5	4a		lsr a		                LSR A
.3950d6	29 0f 00	and #$000f	                AND #$000F
.3950d9	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950dd	a9 e8 03	lda #$03e8	                LDA #1000
.3950e0	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950e4	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950e8	18		clc		                CLC
.3950e9	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950eb	28		plp		                PLP
.3950ec	2b		pld		                PLD
.3950ed	ab		plb		                PLB
.3950ee	6b		rtl		                RTL
.3950ef					DOS_RTCCREATE
.3950ef	8b		phb		                PHB
.3950f0	0b		phd		                PHD
.3950f1	08		php		                PHP
.3950f2	48		pha		                PHA             ; begin setdbr macro
.3950f3	08		php		                PHP
.3950f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3950f6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950f8	48		pha		                PHA
.3950f9	ab		plb		                PLB
.3950fa	28		plp		                PLP
.3950fb	68		pla		                PLA             ; end setdbr macro
.3950fc	48		pha		                PHA             ; begin setdp macro
.3950fd	08		php		                PHP
.3950fe	c2 20		rep #$20	                REP #$20        ; set A long
.395100	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395103	5b		tcd		                TCD
.395104	28		plp		                PLP
.395105	68		pla		                PLA             ; end setdp macro
.395106	c2 10		rep #$10	                REP #$10        ; set X long
.395108	e2 20		sep #$20	                SEP #$20        ; set A short
.39510a	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.39510e	09 08		ora #$08	                ORA #%00001000
.395110	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395114	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.395118	85 29		sta $0349	                STA DOS_TEMP+1
.39511a	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.39511e	85 28		sta $0348	                STA DOS_TEMP
.395120	c2 20		rep #$20	                REP #$20        ; set A long
.395122	a5 28		lda $0348	                LDA DOS_TEMP
.395124	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.395128	85 28		sta $0348	                STA DOS_TEMP
.39512a	38		sec		                SEC                         ; Year is relative to 1980
.39512b	e9 bc 07	sbc #$07bc	                SBC #1980
.39512e	c2 20		rep #$20	                REP #$20        ; set A long
.395130	0a		asl a		                ASL A
.395131	0a		asl a		                ASL A
.395132	0a		asl a		                ASL A
.395133	0a		asl a		                ASL A
.395134	0a		asl a		                ASL A
.395135	0a		asl a		                ASL A
.395136	0a		asl a		                ASL A
.395137	0a		asl a		                ASL A
.395138	0a		asl a		                ASL A
.395139	29 00 fe	and #$fe00	                AND #$FE00
.39513c	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39513f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395141	e2 20		sep #$20	                SEP #$20        ; set A short
.395143	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.395147	c2 20		rep #$20	                REP #$20        ; set A long
.395149	29 ff 00	and #$00ff	                AND #$00FF
.39514c	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.395150	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.395153	0a		asl a		                ASL A
.395154	0a		asl a		                ASL A
.395155	0a		asl a		                ASL A
.395156	0a		asl a		                ASL A
.395157	0a		asl a		                ASL A
.395158	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.39515b	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39515e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395160	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395162	e2 20		sep #$20	                SEP #$20        ; set A short
.395164	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.395168	c2 20		rep #$20	                REP #$20        ; set A long
.39516a	29 ff 00	and #$00ff	                AND #$00FF
.39516d	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.395171	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.395174	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395177	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395179	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39517b	e2 20		sep #$20	                SEP #$20        ; set A short
.39517d	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395181	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.395183	c2 20		rep #$20	                REP #$20        ; set A long
.395185	29 ff 00	and #$00ff	                AND #$00FF
.395188	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.39518c	c2 20		rep #$20	                REP #$20        ; set A long
.39518e	0a		asl a		                ASL A
.39518f	0a		asl a		                ASL A
.395190	0a		asl a		                ASL A
.395191	0a		asl a		                ASL A
.395192	0a		asl a		                ASL A
.395193	0a		asl a		                ASL A
.395194	0a		asl a		                ASL A
.395195	0a		asl a		                ASL A
.395196	0a		asl a		                ASL A
.395197	0a		asl a		                ASL A
.395198	0a		asl a		                ASL A
.395199	29 00 f8	and #$f800	                AND #$F800
.39519c	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39519f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3951a3	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3951a7	c2 20		rep #$20	                REP #$20        ; set A long
.3951a9	29 ff 00	and #$00ff	                AND #$00FF
.3951ac	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.3951b0	c2 20		rep #$20	                REP #$20        ; set A long
.3951b2	0a		asl a		                ASL A
.3951b3	0a		asl a		                ASL A
.3951b4	0a		asl a		                ASL A
.3951b5	0a		asl a		                ASL A
.3951b6	0a		asl a		                ASL A
.3951b7	29 e0 07	and #$07e0	                AND #$07E0
.3951ba	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951bd	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951bf	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3951c3	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.3951c7	c2 20		rep #$20	                REP #$20        ; set A long
.3951c9	29 ff 00	and #$00ff	                AND #$00FF
.3951cc	22 72 50 39	jsl $395072	                JSL BCD2BIN                 ; Convert it to binary
.3951d0	c2 20		rep #$20	                REP #$20        ; set A long
.3951d2	29 1f 00	and #$001f	                AND #$001F
.3951d5	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951d8	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951da	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951dc	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.3951e0	29 f7 00	and #$00f7	                AND #%11110111
.3951e3	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.3951e7	28		plp		                PLP
.3951e8	2b		pld		                PLD
.3951e9	ab		plb		                PLB
.3951ea	6b		rtl		                RTL
.3951eb					DOS_CREATE
.3951eb	8b		phb		                PHB
.3951ec	0b		phd		                PHD
.3951ed	08		php		                PHP
.3951ee	48		pha		                PHA             ; begin setdbr macro
.3951ef	08		php		                PHP
.3951f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3951f2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951f4	48		pha		                PHA
.3951f5	ab		plb		                PLB
.3951f6	28		plp		                PLP
.3951f7	68		pla		                PLA             ; end setdbr macro
.3951f8	48		pha		                PHA             ; begin setdp macro
.3951f9	08		php		                PHP
.3951fa	c2 20		rep #$20	                REP #$20        ; set A long
.3951fc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951ff	5b		tcd		                TCD
.395200	28		plp		                PLP
.395201	68		pla		                PLA             ; end setdp macro
.395202	c2 30		rep #$30	                REP #$30        ; set A&X long
.395204	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.395207	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395209	85 28		sta $0348	                STA DOS_TEMP
.39520b	c8		iny		                INY
.39520c	c8		iny		                INY
.39520d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39520f	85 2a		sta $034a	                STA DOS_TEMP+2
.395211	e2 20		sep #$20	                SEP #$20        ; set A short
.395213	a0 00 00	ldy #$0000	                LDY #0
.395216	a2 00 00	ldx #$0000	                LDX #0
.395219	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.39521b	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.39521d	f0 04		beq $395223	                BEQ find_file                   ; If it's NULL, we're done
.39521f	e8		inx		                INX
.395220	c8		iny		                INY
.395221	80 f6		bra $395219	                BRA path_loop
.395223	22 08 49 39	jsl $394908	find_file       JSL DOS_PARSE_PATH
.395227	22 a0 49 39	jsl $3949a0	                JSL DOS_FINDFILE
.39522b	90 07		bcc $395234	                BCC set_device
.39522d	e2 20		sep #$20	                SEP #$20        ; set A short
.39522f	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.395231	82 d2 00	brl $395306	                BRL ret_failure
.395234					set_device
.395234	e2 20		sep #$20	                SEP #$20        ; set A short
.395236	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395239	a5 01		lda $0321	                LDA BIOS_DEV
.39523b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39523d					validate_name
.39523d	22 be 4c 39	jsl $394cbe	                JSL DOS_FREECLUS
.395241	b0 03		bcs $395246	                BCS save_data
.395243	82 c4 00	brl $39530a	                BRL pass_failure
.395246					save_data
.395246	c2 20		rep #$20	                REP #$20        ; set A long
.395248	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.39524b	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.39524d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39524f	c8		iny		                INY
.395250	c8		iny		                INY
.395251	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395253	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395255	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.395258	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39525a	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39525c	c8		iny		                INY
.39525d	c8		iny		                INY
.39525e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395260	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395262	22 f7 47 39	jsl $3947f7	                JSL DOS_PUTCLUSTER
.395266	b0 00		bcs $395268	                BCS find_dir
.395268					find_dir
.395268	c2 20		rep #$20	                REP #$20        ; set A long
.39526a	22 4a 43 39	jsl $39434a	                JSL DOS_DIRFINDFREE
.39526e	b0 1a		bcs $39528a	                BCS set_entry
.395270	c2 20		rep #$20	                REP #$20        ; set A long
.395272	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.395275	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.395277	85 10		sta $0330	                STA DOS_CLUS_ID
.395279	c8		iny		                INY
.39527a	c8		iny		                INY
.39527b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39527d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39527f	22 79 4f 39	jsl $394f79	                JSL DELCLUSTER32                ; Delete the cluster
.395283	e2 20		sep #$20	                SEP #$20        ; set A short
.395285	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.395287	82 7c 00	brl $395306	                BRL ret_failure
.39528a					set_entry
.39528a	e2 20		sep #$20	                SEP #$20        ; set A short
.39528c	a0 00 00	ldy #$0000	                LDY #0
.39528f	a9 00		lda #$00	                LDA #0                          ; NULL
.395291	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.395293	c8		iny		                INY
.395294	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.395297	d0 f8		bne $395291	                BNE copy_dir_loop
.395299	a0 00 00	ldy #$0000	                LDY #0
.39529c	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.39529f	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952a1	c8		iny		                INY
.3952a2	c0 0b 00	cpy #$000b	                CPY #11
.3952a5	d0 f5		bne $39529c	                BNE name_loop
.3952a7	c2 20		rep #$20	                REP #$20        ; set A long
.3952a9	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3952ac	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952ae	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3952b1	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952b3	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.3952b6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b8	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3952bb	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952bd	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.3952c0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952c2	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3952c5	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952c7	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3952ca	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952cc	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3952cf	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952d1	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.3952d4	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.3952d7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952d9	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.3952dc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952de	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.3952e1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952e3	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.3952e6	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952e8	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.3952eb	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952ed	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.3952f0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952f2	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.3952f5	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952f7	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.3952fa	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952fc	c2 20		rep #$20	                REP #$20        ; set A long
.3952fe	22 08 44 39	jsl $394408	                JSL DOS_DIRWRITE
.395302	b0 0b		bcs $39530f	                BCS ret_success
.395304	80 04		bra $39530a	                BRA pass_failure
.395306					ret_failure
.395306	e2 20		sep #$20	                SEP #$20        ; set A short
.395308	85 0e		sta $032e	                STA DOS_STATUS
.39530a	28		plp		pass_failure    PLP
.39530b	2b		pld		                PLD
.39530c	ab		plb		                PLB
.39530d	18		clc		                CLC
.39530e	6b		rtl		                RTL
.39530f					ret_success
.39530f	e2 20		sep #$20	                SEP #$20        ; set A short
.395311	64 0e		stz $032e	                STZ DOS_STATUS
.395313	28		plp		                PLP
.395314	2b		pld		                PLD
.395315	ab		plb		                PLB
.395316	38		sec		                SEC
.395317	6b		rtl		                RTL
.395318					DOS_COPYPATH
.395318	da		phx		                PHX
.395319	5a		phy		                PHY
.39531a	8b		phb		                PHB
.39531b	0b		phd		                PHD
.39531c	08		php		                PHP
.39531d	48		pha		                PHA             ; begin setdbr macro
.39531e	08		php		                PHP
.39531f	e2 20		sep #$20	                SEP #$20        ; set A short
.395321	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395323	48		pha		                PHA
.395324	ab		plb		                PLB
.395325	28		plp		                PLP
.395326	68		pla		                PLA             ; end setdbr macro
.395327	48		pha		                PHA             ; begin setdp macro
.395328	08		php		                PHP
.395329	c2 20		rep #$20	                REP #$20        ; set A long
.39532b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39532e	5b		tcd		                TCD
.39532f	28		plp		                PLP
.395330	68		pla		                PLA             ; end setdp macro
.395331	c2 30		rep #$30	                REP #$30        ; set A&X long
.395333	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.395336	a2 00 00	ldx #$0000	                LDX #0
.395339	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.39533b	e8		inx		                INX
.39533c	e8		inx		                INX
.39533d	e0 00 01	cpx #$0100	                CPX #256
.395340	d0 f7		bne $395339	                BNE clr_loop
.395342	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.395344	d0 04		bne $39534a	                BNE get_path            ; No: attempt to fetch the path
.395346	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.395348	f0 27		beq $395371	                BEQ done                ; Yes: return an empty buffer
.39534a	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.39534d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39534f	85 28		sta $0348	                STA DOS_TEMP
.395351	c8		iny		                INY
.395352	c8		iny		                INY
.395353	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395355	85 2a		sta $034a	                STA DOS_TEMP+2
.395357	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.395359	d0 04		bne $39535f	                BNE start_copy          ; No: start copying it
.39535b	a5 2a		lda $034a	                LDA DOS_TEMP+2
.39535d	f0 12		beq $395371	                BEQ done                ; Yes: return an empty buffer
.39535f					start_copy
.39535f	e2 20		sep #$20	                SEP #$20        ; set A short
.395361	a2 00 00	ldx #$0000	                LDX #0
.395364	a0 00 00	ldy #$0000	                LDY #0
.395367	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.395369	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39536b	f0 04		beq $395371	                BEQ done
.39536d	e8		inx		                INX
.39536e	c8		iny		                INY
.39536f	d0 f6		bne $395367	                BNE loop
.395371	28		plp		done            PLP
.395372	2b		pld		                PLD
.395373	ab		plb		                PLB
.395374	7a		ply		                PLY
.395375	fa		plx		                PLX
.395376	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395377					DOS_TEST
.395377	8b		phb		                PHB
.395378	0b		phd		                PHD
.395379	08		php		                PHP
.39537a	48		pha		                PHA             ; begin setdbr macro
.39537b	08		php		                PHP
.39537c	e2 20		sep #$20	                SEP #$20        ; set A short
.39537e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395380	48		pha		                PHA
.395381	ab		plb		                PLB
.395382	28		plp		                PLP
.395383	68		pla		                PLA             ; end setdbr macro
.395384	48		pha		                PHA             ; begin setdp macro
.395385	08		php		                PHP
.395386	c2 20		rep #$20	                REP #$20        ; set A long
.395388	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39538b	5b		tcd		                TCD
.39538c	28		plp		                PLP
.39538d	68		pla		                PLA             ; end setdp macro
.39538e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395390	a9 b6 53	lda #$53b6	                LDA #<>src_file
.395393	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395397	a9 39 00	lda #$0039	                LDA #`src_file
.39539a	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.39539e	a9 c3 53	lda #$53c3	                LDA #<>dst_file
.3953a1	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3953a5	a9 39 00	lda #$0039	                LDA #`dst_file
.3953a8	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3953ac	22 48 5a 39	jsl $395a48	                JSL IF_COPY
.3953b0	b0 00		bcs $3953b2	                BCS done
.3953b2	28		plp		done            PLP
.3953b3	2b		pld		                PLD
.3953b4	ab		plb		                PLB
.3953b5	6b		rtl		                RTL
>3953b6	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>3953be	2e 62 61 73 00
>3953c3	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>3953cb	32 2e 62 61 73 00
.3953d1					IF_OPEN
.3953d1	da		phx		                PHX
.3953d2	5a		phy		                PHY
.3953d3	0b		phd		                PHD
.3953d4	8b		phb		                PHB
.3953d5	08		php		                PHP
.3953d6	48		pha		                PHA             ; begin setdbr macro
.3953d7	08		php		                PHP
.3953d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3953da	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953dc	48		pha		                PHA
.3953dd	ab		plb		                PLB
.3953de	28		plp		                PLP
.3953df	68		pla		                PLA             ; end setdbr macro
.3953e0	48		pha		                PHA             ; begin setdp macro
.3953e1	08		php		                PHP
.3953e2	c2 20		rep #$20	                REP #$20        ; set A long
.3953e4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953e7	5b		tcd		                TCD
.3953e8	28		plp		                PLP
.3953e9	68		pla		                PLA             ; end setdp macro
.3953ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3953ec	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3953ef	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953f1	89 38		bit #$38	                BIT #FD_STAT_OPEN
.3953f3	f0 05		beq $3953fa	                BEQ ok_to_open
.3953f5	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3953f7	82 0d 05	brl $395907	                BRL IF_FAILURE
.3953fa	22 18 53 39	jsl $395318	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3953fe	22 a0 49 39	jsl $3949a0	                JSL DOS_FINDFILE                ; Attempt to find the file
.395402	b0 03		bcs $395407	                BCS is_found                    ; If OK: we found the file
.395404	82 04 05	brl $39590b	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395407					is_found
.395407	e2 20		sep #$20	                SEP #$20        ; set A short
.395409	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39540c	a5 01		lda $0321	                LDA BIOS_DEV
.39540e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395410	c2 20		rep #$20	                REP #$20        ; set A long
.395412	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395415	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395417	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395419	c8		iny		                INY
.39541a	c8		iny		                INY
.39541b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39541d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39541f	22 ba 47 39	jsl $3947ba	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.395423	b0 03		bcs $395428	                BCS read_cluster
.395425	82 e3 04	brl $39590b	                BRL IF_PASSFAILURE
.395428	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.39542b	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39542d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39542f	c8		iny		                INY
.395430	c8		iny		                INY
.395431	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395433	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395435	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.395438	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39543a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39543c	c8		iny		                INY
.39543d	c8		iny		                INY
.39543e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395440	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395442	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.395445	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395447	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.39544a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39544c	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39544f	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395451	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395454	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395456	e2 20		sep #$20	                SEP #$20        ; set A short
.395458	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.39545b	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.39545d	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39545f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395461	82 ae 04	brl $395912	                BRL IF_SUCCESS
.395464					IF_CREATE
.395464	da		phx		                PHX
.395465	5a		phy		                PHY
.395466	0b		phd		                PHD
.395467	8b		phb		                PHB
.395468	08		php		                PHP
.395469	48		pha		                PHA             ; begin setdbr macro
.39546a	08		php		                PHP
.39546b	e2 20		sep #$20	                SEP #$20        ; set A short
.39546d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39546f	48		pha		                PHA
.395470	ab		plb		                PLB
.395471	28		plp		                PLP
.395472	68		pla		                PLA             ; end setdbr macro
.395473	48		pha		                PHA             ; begin setdp macro
.395474	08		php		                PHP
.395475	c2 20		rep #$20	                REP #$20        ; set A long
.395477	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39547a	5b		tcd		                TCD
.39547b	28		plp		                PLP
.39547c	68		pla		                PLA             ; end setdp macro
.39547d	22 eb 51 39	jsl $3951eb	                JSL DOS_CREATE                  ; Attempt to create the file
.395481	90 18		bcc $39549b	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395483	c2 30		rep #$30	                REP #$30        ; set A&X long
.395485	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395488	a9 00 00	lda #$0000	                LDA #0
.39548b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39548d	c8		iny		                INY
.39548e	c8		iny		                INY
.39548f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395491	e2 20		sep #$20	                SEP #$20        ; set A short
.395493	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.395496	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395498	82 77 04	brl $395912	                BRL IF_SUCCESS
.39549b	82 69 04	brl $395907	pass_failure    BRL IF_FAILURE
.39549e					IF_CLOSE
.39549e	da		phx		                PHX
.39549f	5a		phy		                PHY
.3954a0	0b		phd		                PHD
.3954a1	8b		phb		                PHB
.3954a2	08		php		                PHP
.3954a3	48		pha		                PHA             ; begin setdbr macro
.3954a4	08		php		                PHP
.3954a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3954a7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954a9	48		pha		                PHA
.3954aa	ab		plb		                PLB
.3954ab	28		plp		                PLP
.3954ac	68		pla		                PLA             ; end setdbr macro
.3954ad	48		pha		                PHA             ; begin setdp macro
.3954ae	08		php		                PHP
.3954af	c2 20		rep #$20	                REP #$20        ; set A long
.3954b1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954b4	5b		tcd		                TCD
.3954b5	28		plp		                PLP
.3954b6	68		pla		                PLA             ; end setdp macro
.3954b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3954b9	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.3954bc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954be	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3954c0	f0 09		beq $3954cb	                BEQ set_flag                    ; No, just mark it closed
.3954c2	22 37 55 39	jsl $395537	                JSL IF_WRITE                    ; Attempt to write the cluster
.3954c6	b0 03		bcs $3954cb	                BCS set_flag
.3954c8	82 40 04	brl $39590b	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3954cb	22 fe 59 39	jsl $3959fe	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.3954cf	82 40 04	brl $395912	                BRL IF_SUCCESS
.3954d2					IF_READ
.3954d2	da		phx		                PHX
.3954d3	5a		phy		                PHY
.3954d4	0b		phd		                PHD
.3954d5	8b		phb		                PHB
.3954d6	08		php		                PHP
.3954d7	48		pha		                PHA             ; begin setdbr macro
.3954d8	08		php		                PHP
.3954d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3954db	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954dd	48		pha		                PHA
.3954de	ab		plb		                PLB
.3954df	28		plp		                PLP
.3954e0	68		pla		                PLA             ; end setdbr macro
.3954e1	48		pha		                PHA             ; begin setdp macro
.3954e2	08		php		                PHP
.3954e3	c2 20		rep #$20	                REP #$20        ; set A long
.3954e5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954e8	5b		tcd		                TCD
.3954e9	28		plp		                PLP
.3954ea	68		pla		                PLA             ; end setdp macro
.3954eb	c2 10		rep #$10	                REP #$10        ; set X long
.3954ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3954ef					get_dev
.3954ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f1	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3954f4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954f6	85 01		sta $0321	                STA BIOS_DEV
.3954f8	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3954fc	c2 20		rep #$20	                REP #$20        ; set A long
.3954fe	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395501	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395503	85 10		sta $0330	                STA DOS_CLUS_ID
.395505	c8		iny		                INY
.395506	c8		iny		                INY
.395507	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395509	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39550b	22 c5 4b 39	jsl $394bc5	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.39550f	90 13		bcc $395524	                BCC pass_failure                ; If not OK: pass the failure up the chain
.395511	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395514	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395516	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395518	c8		iny		                INY
.395519	c8		iny		                INY
.39551a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39551c	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39551e	22 ba 47 39	jsl $3947ba	                JSL DOS_GETCLUSTER              ; Get the cluster
.395522	b0 03		bcs $395527	                BCS ret_success                 ; If ok: return success
.395524					pass_failure
.395524	82 e4 03	brl $39590b	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395527	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.39552a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39552c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39552e	c8		iny		                INY
.39552f	c8		iny		                INY
.395530	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395532	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395534	82 db 03	brl $395912	                BRL IF_SUCCESS
.395537					IF_WRITE
.395537	da		phx		                PHX
.395538	5a		phy		                PHY
.395539	0b		phd		                PHD
.39553a	8b		phb		                PHB
.39553b	08		php		                PHP
.39553c	48		pha		                PHA             ; begin setdbr macro
.39553d	08		php		                PHP
.39553e	e2 20		sep #$20	                SEP #$20        ; set A short
.395540	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395542	48		pha		                PHA
.395543	ab		plb		                PLB
.395544	28		plp		                PLP
.395545	68		pla		                PLA             ; end setdbr macro
.395546	48		pha		                PHA             ; begin setdp macro
.395547	08		php		                PHP
.395548	c2 20		rep #$20	                REP #$20        ; set A long
.39554a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39554d	5b		tcd		                TCD
.39554e	28		plp		                PLP
.39554f	68		pla		                PLA             ; end setdp macro
.395550	c2 10		rep #$10	                REP #$10        ; set X long
.395552	e2 20		sep #$20	                SEP #$20        ; set A short
.395554	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395557	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395559	85 01		sta $0321	                STA BIOS_DEV
.39555b	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.39555f	c2 20		rep #$20	                REP #$20        ; set A long
.395561	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395564	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395566	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395568	c8		iny		                INY
.395569	c8		iny		                INY
.39556a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556c	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39556e	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395571	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395573	85 10		sta $0330	                STA DOS_CLUS_ID
.395575	c8		iny		                INY
.395576	c8		iny		                INY
.395577	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395579	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39557b	d0 1a		bne $395597	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.39557d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39557f	d0 16		bne $395597	                BNE rewrite_cluster
.395581	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.395584	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395586	85 10		sta $0330	                STA DOS_CLUS_ID
.395588	c8		iny		                INY
.395589	c8		iny		                INY
.39558a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39558c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39558e	22 b9 4f 39	jsl $394fb9	                JSL DOS_APPENDCLUS              ; Append the cluster
.395592	b0 0c		bcs $3955a0	                BCS ret_success                 ; If OK: return success
.395594	82 74 03	brl $39590b	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395597	22 f7 47 39	jsl $3947f7	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.39559b	b0 03		bcs $3955a0	                BCS ret_success                 ; If ok: return success
.39559d	82 6b 03	brl $39590b	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955a0	82 6f 03	brl $395912	ret_success     BRL IF_SUCCESS
.3955a3					IF_DIROPEN
.3955a3	da		phx		                PHX
.3955a4	5a		phy		                PHY
.3955a5	0b		phd		                PHD
.3955a6	8b		phb		                PHB
.3955a7	08		php		                PHP
.3955a8	48		pha		                PHA             ; begin setdbr macro
.3955a9	08		php		                PHP
.3955aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3955ac	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955ae	48		pha		                PHA
.3955af	ab		plb		                PLB
.3955b0	28		plp		                PLP
.3955b1	68		pla		                PLA             ; end setdbr macro
.3955b2	48		pha		                PHA             ; begin setdp macro
.3955b3	08		php		                PHP
.3955b4	c2 20		rep #$20	                REP #$20        ; set A long
.3955b6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955b9	5b		tcd		                TCD
.3955ba	28		plp		                PLP
.3955bb	68		pla		                PLA             ; end setdp macro
.3955bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955be	22 18 53 39	jsl $395318	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.3955c2	22 08 49 39	jsl $394908	                JSL DOS_PARSE_PATH          ; Parse the path
.3955c6	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3955ca	b0 03		bcs $3955cf	                BCS get_root_dir            ; If successful: get the root directory
.3955cc	82 3c 03	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3955cf					get_root_dir
.3955cf	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955d1	22 ef 41 39	jsl $3941ef	                JSL DOS_DIROPEN
.3955d5	b0 03		bcs $3955da	                BCS success
.3955d7	82 31 03	brl $39590b	                BRL IF_PASSFAILURE
.3955da	82 35 03	brl $395912	success         BRL IF_SUCCESS
.3955dd					IF_DIRNEXT
.3955dd	5c 89 42 39	jmp $394289	                JML DOS_DIRNEXT
.3955e1					IF_DELETE
.3955e1	da		phx		                PHX
.3955e2	5a		phy		                PHY
.3955e3	0b		phd		                PHD
.3955e4	8b		phb		                PHB
.3955e5	08		php		                PHP
.3955e6	48		pha		                PHA             ; begin setdbr macro
.3955e7	08		php		                PHP
.3955e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3955ea	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955ec	48		pha		                PHA
.3955ed	ab		plb		                PLB
.3955ee	28		plp		                PLP
.3955ef	68		pla		                PLA             ; end setdbr macro
.3955f0	48		pha		                PHA             ; begin setdp macro
.3955f1	08		php		                PHP
.3955f2	c2 20		rep #$20	                REP #$20        ; set A long
.3955f4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955f7	5b		tcd		                TCD
.3955f8	28		plp		                PLP
.3955f9	68		pla		                PLA             ; end setdp macro
.3955fa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955fc	22 a0 49 39	jsl $3949a0	                JSL DOS_FINDFILE
.395600	b0 03		bcs $395605	                BCS get_first_clus
.395602	82 06 03	brl $39590b	                BRL IF_PASSFAILURE
.395605					get_first_clus
.395605	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395608	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39560a	85 10		sta $0330	                STA DOS_CLUS_ID
.39560c	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39560f	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395611	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395613	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395615	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395618	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39561a	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39561d	22 c5 4b 39	jsl $394bc5	del_loop        JSL NEXTCLUSTER
.395621	90 2f		bcc $395652	                BCC del_one
.395623	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395625	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.395628	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39562a	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.39562d	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395630	85 10		sta $0330	                STA DOS_CLUS_ID
.395632	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395635	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395637	22 79 4f 39	jsl $394f79	                JSL DELCLUSTER32
.39563b	b0 03		bcs $395640	                BCS go_next
.39563d	82 cb 02	brl $39590b	                BRL IF_PASSFAILURE
.395640					go_next
.395640	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.395643	85 10		sta $0330	                STA DOS_CLUS_ID
.395645	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395648	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.39564b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39564d	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395650	80 cb		bra $39561d	                BRA del_loop
.395652					del_one
.395652	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395655	85 10		sta $0330	                STA DOS_CLUS_ID
.395657	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39565a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39565c	22 d3 4e 39	jsl $394ed3	                JSL DELCLUSTER
.395660	b0 03		bcs $395665	                BCS free_dir_entry
.395662	82 a6 02	brl $39590b	                BRL IF_PASSFAILURE
.395665					free_dir_entry
.395665	e2 20		sep #$20	                SEP #$20        ; set A short
.395667	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.39566a	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39566c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39566e	22 08 44 39	jsl $394408	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395672	b0 03		bcs $395677	                BCS ret_success
.395674	82 94 02	brl $39590b	                BRL IF_PASSFAILURE
.395677	82 98 02	brl $395912	ret_success     BRL IF_SUCCESS
.39567a					IF_DIRREAD
.39567a	da		phx		                PHX
.39567b	5a		phy		                PHY
.39567c	0b		phd		                PHD
.39567d	8b		phb		                PHB
.39567e	08		php		                PHP
.39567f	48		pha		                PHA             ; begin setdbr macro
.395680	08		php		                PHP
.395681	e2 20		sep #$20	                SEP #$20        ; set A short
.395683	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395685	48		pha		                PHA
.395686	ab		plb		                PLB
.395687	28		plp		                PLP
.395688	68		pla		                PLA             ; end setdbr macro
.395689	48		pha		                PHA             ; begin setdp macro
.39568a	08		php		                PHP
.39568b	c2 20		rep #$20	                REP #$20        ; set A long
.39568d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395690	5b		tcd		                TCD
.395691	28		plp		                PLP
.395692	68		pla		                PLA             ; end setdp macro
.395693	c2 30		rep #$30	                REP #$30        ; set A&X long
.395695	22 a0 49 39	jsl $3949a0	                JSL DOS_FINDFILE
.395699	b0 03		bcs $39569e	                BCS success
.39569b	82 69 02	brl $395907	                BRL IF_FAILURE
.39569e	82 71 02	brl $395912	success         BRL IF_SUCCESS
.3956a1					IF_DIRWRITE
.3956a1	5c 08 44 39	jmp $394408	                JML DOS_DIRWRITE
.3956a5					IF_LOAD
.3956a5	da		phx		                PHX
.3956a6	5a		phy		                PHY
.3956a7	0b		phd		                PHD
.3956a8	8b		phb		                PHB
.3956a9	08		php		                PHP
.3956aa	48		pha		                PHA             ; begin setdbr macro
.3956ab	08		php		                PHP
.3956ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3956ae	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956b0	48		pha		                PHA
.3956b1	ab		plb		                PLB
.3956b2	28		plp		                PLP
.3956b3	68		pla		                PLA             ; end setdbr macro
.3956b4	48		pha		                PHA             ; begin setdp macro
.3956b5	08		php		                PHP
.3956b6	c2 20		rep #$20	                REP #$20        ; set A long
.3956b8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956bb	5b		tcd		                TCD
.3956bc	28		plp		                PLP
.3956bd	68		pla		                PLA             ; end setdp macro
.3956be	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956c0	22 d1 53 39	jsl $3953d1	                JSL IF_OPEN
.3956c4	b0 03		bcs $3956c9	                BCS setup                   ; If success: start setting things up
.3956c6	82 42 02	brl $39590b	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3956c9					setup
.3956c9	c2 20		rep #$20	                REP #$20        ; set A long
.3956cb	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3956ce	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956d0	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3956d2	c8		iny		                INY
.3956d3	c8		iny		                INY
.3956d4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956d6	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3956d8	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.3956db	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956dd	85 30		sta $0350	                STA DOS_SRC_PTR
.3956df	c8		iny		                INY
.3956e0	c8		iny		                INY
.3956e1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956e3	85 32		sta $0352	                STA DOS_SRC_PTR+2
.3956e5	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.3956e7	c9 40 00	cmp #$0040	                CMP #$0040
.3956ea	b0 04		bcs $3956f0	                BGE load_by_type            ; No: try to load it by type
.3956ec	5c ba 57 39	jmp $3957ba	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3956f0	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3956f3	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3956f6					type_loop
.3956f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3956f8	bf 3c 57 39	lda $39573c,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3956fc	f0 37		beq $395735	                BEQ no_match                ; If NULL... we didn't get a match
.3956fe	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395701	d0 28		bne $39572b	                BNE next_entry              ; If they don't match, try the next entry
.395703	bf 3d 57 39	lda $39573d,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395707	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39570a	d0 1f		bne $39572b	                BNE next_entry              ; If they don't match, try the next entry
.39570c	bf 3e 57 39	lda $39573e,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395710	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395713	d0 16		bne $39572b	                BNE next_entry              ; If they don't match, try the next entry
.395715	c2 20		rep #$20	                REP #$20        ; set A long
.395717	bf 3f 57 39	lda $39573f,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39571b	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39571d	e2 20		sep #$20	                SEP #$20        ; set A short
.39571f	bf 41 57 39	lda $395741,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395723	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395725	a2 00 00	ldx #$0000	                LDX #0
.395728	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39572b					next_entry
.39572b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39572d	8a		txa		                TXA
.39572e	18		clc		                CLC
.39572f	69 06 00	adc #$0006	                ADC #6
.395732	aa		tax		                TAX
.395733	80 c1		bra $3956f6	                BRA type_loop               ; And check it against the file
.395735					no_match
.395735	e2 20		sep #$20	                SEP #$20        ; set A short
.395737	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.395739	82 cb 01	brl $395907	                BRL IF_FAILURE
>39573c	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>39573f	43 57				                .word <>IF_LOADPGX
>395741	39				                .byte `IF_LOADPGX
>395742	00				                .byte 0
.395743					IF_LOADPGX
.395743	c2 10		rep #$10	                REP #$10        ; set X long
.395745	e2 20		sep #$20	                SEP #$20        ; set A short
.395747	a0 00 00	ldy #$0000	                LDY #0
.39574a	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.39574c	c9 50		cmp #$50	                CMP #'P'
.39574e	d0 15		bne $395765	                BNE fail_sig                        ; If not found, fail
.395750	c8		iny		                INY
.395751	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395753	c9 47		cmp #$47	                CMP #'G'
.395755	d0 0e		bne $395765	                BNE fail_sig
.395757	c8		iny		                INY
.395758	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39575a	c9 58		cmp #$58	                CMP #'X'
.39575c	d0 07		bne $395765	                BNE fail_sig
.39575e	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.39575f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395761	c9 01		cmp #$01	                CMP #$01
.395763	f0 06		beq $39576b	                BEQ get_dest                        ; All passes: go to get the destination address
.395765	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.395767	22 07 59 39	jsl $395907	                JSL IF_FAILURE
.39576b					get_dest
.39576b	c2 20		rep #$20	                REP #$20        ; set A long
.39576d	c8		iny		                INY
.39576e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395770	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395772	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.395774	c8		iny		                INY
.395775	c8		iny		                INY
.395776	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395778	85 36		sta $0356	                STA DOS_DST_PTR+2
.39577a	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39577c	c8		iny		                INY                                 ; Point to the first data byte
.39577d	c8		iny		                INY
.39577e					copy_loop
.39577e	e2 20		sep #$20	                SEP #$20        ; set A short
.395780	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395782	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.395784	c2 20		rep #$20	                REP #$20        ; set A long
.395786	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395788	d0 02		bne $39578c	                BNE dec_file_size
.39578a	e6 34		inc $0354	                INC DOS_DST_PTR
.39578c	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.39578d	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39578f	e9 01 00	sbc #$0001	                SBC #1
.395792	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395794	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395796	e9 00 00	sbc #$0000	                SBC #0
.395799	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39579b	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39579d	d0 04		bne $3957a3	                BNE next_byte
.39579f	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957a1	f0 14		beq $3957b7	                BEQ done                            ; Yes: we're done
.3957a3	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3957a4	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3957a7	d0 d5		bne $39577e	                BNE copy_loop                       ; No: keep copying
.3957a9	22 a9 4c 39	jsl $394ca9	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.3957ad	b0 03		bcs $3957b2	                BCS next_cluster
.3957af	82 59 01	brl $39590b	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3957b2	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.3957b5	80 c7		bra $39577e	                BRA copy_loop                       ; Go back to copying
.3957b7	82 58 01	brl $395912	done            BRL IF_SUCCESS
.3957ba					IF_LOADRAW
.3957ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957bc	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3957bf					copy_loop
.3957bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3957c3	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3957c5	c2 20		rep #$20	                REP #$20        ; set A long
.3957c7	38		sec		                SEC                         ; Count down the number of bytes left
.3957c8	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957ca	e9 01 00	sbc #$0001	                SBC #1
.3957cd	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957cf	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957d1	e9 00 00	sbc #$0000	                SBC #0
.3957d4	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957d6	d0 04		bne $3957dc	                BNE continue
.3957d8	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957da	f0 1b		beq $3957f7	                BEQ close_file              ; If not: we're done
.3957dc	c8		iny		continue        INY
.3957dd	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.3957e0	d0 dd		bne $3957bf	                BNE copy_loop               ; No: keep processing the bytes
.3957e2	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.3957e3	a5 34		lda $0354	                LDA DOS_DST_PTR
.3957e5	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.3957e8	85 34		sta $0354	                STA DOS_DST_PTR
.3957ea	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3957ec	69 00 00	adc #$0000	                ADC #0
.3957ef	85 36		sta $0356	                STA DOS_DST_PTR+2
.3957f1	22 d2 54 39	jsl $3954d2	                JSL IF_READ                 ; Yes: load the next cluster
.3957f5	b0 c5		bcs $3957bc	                BCS copy_cluster            ; And start copying it
.3957f7					close_file
.3957f7	82 18 01	brl $395912	ret_success     BRL IF_SUCCESS
.3957fa					IF_NULLBUFFER
.3957fa	5a		phy		                PHY
.3957fb	8b		phb		                PHB
.3957fc	0b		phd		                PHD
.3957fd	08		php		                PHP
.3957fe	48		pha		                PHA             ; begin setdbr macro
.3957ff	08		php		                PHP
.395800	e2 20		sep #$20	                SEP #$20        ; set A short
.395802	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395804	48		pha		                PHA
.395805	ab		plb		                PLB
.395806	28		plp		                PLP
.395807	68		pla		                PLA             ; end setdbr macro
.395808	48		pha		                PHA             ; begin setdp macro
.395809	08		php		                PHP
.39580a	c2 20		rep #$20	                REP #$20        ; set A long
.39580c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39580f	5b		tcd		                TCD
.395810	28		plp		                PLP
.395811	68		pla		                PLA             ; end setdp macro
.395812	c2 30		rep #$30	                REP #$30        ; set A&X long
.395814	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395817	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395819	85 28		sta $0348	                STA DOS_TEMP
.39581b	c8		iny		                INY
.39581c	c8		iny		                INY
.39581d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39581f	85 2a		sta $034a	                STA DOS_TEMP+2
.395821	a0 00 00	ldy #$0000	                LDY #0
.395824	a9 00 00	lda #$0000	                LDA #0
.395827	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395829	c8		iny		                INY
.39582a	c8		iny		                INY
.39582b	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.39582e	d0 f7		bne $395827	                BNE loop
.395830	28		plp		                PLP
.395831	2b		pld		                PLD
.395832	ab		plb		                PLB
.395833	7a		ply		                PLY
.395834	6b		rtl		                RTL
.395835					IF_COPY2BUFF
.395835	5a		phy		                PHY
.395836	8b		phb		                PHB
.395837	0b		phd		                PHD
.395838	08		php		                PHP
.395839	48		pha		                PHA             ; begin setdbr macro
.39583a	08		php		                PHP
.39583b	e2 20		sep #$20	                SEP #$20        ; set A short
.39583d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39583f	48		pha		                PHA
.395840	ab		plb		                PLB
.395841	28		plp		                PLP
.395842	68		pla		                PLA             ; end setdbr macro
.395843	48		pha		                PHA             ; begin setdp macro
.395844	08		php		                PHP
.395845	c2 20		rep #$20	                REP #$20        ; set A long
.395847	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39584a	5b		tcd		                TCD
.39584b	28		plp		                PLP
.39584c	68		pla		                PLA             ; end setdp macro
.39584d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39584f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395852	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395854	85 28		sta $0348	                STA DOS_TEMP
.395856	c8		iny		                INY
.395857	c8		iny		                INY
.395858	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39585a	85 2a		sta $034a	                STA DOS_TEMP+2
.39585c	a0 00 00	ldy #$0000	                LDY #0
.39585f					copy_loop
.39585f	e2 20		sep #$20	                SEP #$20        ; set A short
.395861	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395863	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395865	c2 20		rep #$20	                REP #$20        ; set A long
.395867	c8		iny		                INY                         ; Count it
.395868	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.39586b	f0 14		beq $395881	                BEQ done                    ; Yes: we're done
.39586d	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39586f	c5 38		cmp $0358	                CMP DOS_END_PTR
.395871	d0 06		bne $395879	                BNE next_byte
.395873	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395875	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395877	f0 08		beq $395881	                BEQ done                    ; Yes: we're done
.395879	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.39587b	d0 e2		bne $39585f	                BNE copy_loop
.39587d	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.39587f	80 de		bra $39585f	                BRA copy_loop               ; And try this next byte
.395881	28		plp		done            PLP
.395882	2b		pld		                PLD
.395883	ab		plb		                PLB
.395884	7a		ply		                PLY
.395885	6b		rtl		                RTL
.395886					IF_SAVE
.395886	da		phx		                PHX
.395887	5a		phy		                PHY
.395888	0b		phd		                PHD
.395889	8b		phb		                PHB
.39588a	08		php		                PHP
.39588b	48		pha		                PHA             ; begin setdbr macro
.39588c	08		php		                PHP
.39588d	e2 20		sep #$20	                SEP #$20        ; set A short
.39588f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395891	48		pha		                PHA
.395892	ab		plb		                PLB
.395893	28		plp		                PLP
.395894	68		pla		                PLA             ; end setdbr macro
.395895	48		pha		                PHA             ; begin setdp macro
.395896	08		php		                PHP
.395897	c2 20		rep #$20	                REP #$20        ; set A long
.395899	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39589c	5b		tcd		                TCD
.39589d	28		plp		                PLP
.39589e	68		pla		                PLA             ; end setdp macro
.39589f	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958a1	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3958a4	38		sec		                SEC
.3958a5	a5 38		lda $0358	                LDA DOS_END_PTR
.3958a7	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3958a9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958ab	c8		iny		                INY
.3958ac	c8		iny		                INY
.3958ad	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3958af	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3958b1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958b3	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3958b6	18		clc		                CLC
.3958b7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958b9	69 01 00	adc #$0001	                ADC #1
.3958bc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958be	90 09		bcc $3958c9	                BCC first_block
.3958c0	c8		iny		                INY
.3958c1	c8		iny		                INY
.3958c2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958c4	69 00 00	adc #$0000	                ADC #0
.3958c7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958c9	22 fa 57 39	jsl $3957fa	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958cd	22 35 58 39	jsl $395835	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3958d1	22 64 54 39	jsl $395464	                JSL IF_CREATE           ; Create file.
.3958d5	b0 03		bcs $3958da	                BCS check_for_end
.3958d7	82 31 00	brl $39590b	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3958da	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3958dc	c5 38		cmp $0358	                CMP DOS_END_PTR
.3958de	d0 06		bne $3958e6	                BNE next_block
.3958e0	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958e2	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958e4	f0 1d		beq $395903	                BEQ done                ; Yes: we're done
.3958e6	22 fa 57 39	jsl $3957fa	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958ea	22 35 58 39	jsl $395835	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3958ee	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3958f1	a9 00 00	lda #$0000	                LDA #0
.3958f4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958f6	c8		iny		                INY
.3958f7	c8		iny		                INY
.3958f8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958fa	22 37 55 39	jsl $395537	                JSL IF_WRITE            ; Append to the file
.3958fe	b0 da		bcs $3958da	                BCS check_for_end       ; And try again
.395900	82 08 00	brl $39590b	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395903	5c 12 59 39	jmp $395912	done            JML IF_SUCCESS
.395907					IF_FAILURE
.395907	e2 20		sep #$20	                SEP #$20        ; set A short
.395909	85 0e		sta $032e	                STA DOS_STATUS
.39590b	28		plp		IF_PASSFAILURE  PLP
.39590c	18		clc		                CLC
.39590d	ab		plb		                PLB
.39590e	2b		pld		                PLD
.39590f	7a		ply		                PLY
.395910	fa		plx		                PLX
.395911	6b		rtl		                RTL
.395912					IF_SUCCESS
.395912	e2 20		sep #$20	                SEP #$20        ; set A short
.395914	64 00		stz $0320	                STZ BIOS_STATUS
.395916	64 0e		stz $032e	                STZ DOS_STATUS
.395918	28		plp		                PLP
.395919	38		sec		                SEC
.39591a	ab		plb		                PLB
.39591b	2b		pld		                PLD
.39591c	7a		ply		                PLY
.39591d	fa		plx		                PLX
.39591e	6b		rtl		                RTL
.39591f					IF_RUN
.39591f	da		phx		                PHX
.395920	5a		phy		                PHY
.395921	0b		phd		                PHD
.395922	8b		phb		                PHB
.395923	08		php		                PHP
.395924	48		pha		                PHA             ; begin setdbr macro
.395925	08		php		                PHP
.395926	e2 20		sep #$20	                SEP #$20        ; set A short
.395928	a9 00		lda #$00	                LDA #0
.39592a	48		pha		                PHA
.39592b	ab		plb		                PLB
.39592c	28		plp		                PLP
.39592d	68		pla		                PLA             ; end setdbr macro
.39592e	48		pha		                PHA             ; begin setdp macro
.39592f	08		php		                PHP
.395930	c2 20		rep #$20	                REP #$20        ; set A long
.395932	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395935	5b		tcd		                TCD
.395936	28		plp		                PLP
.395937	68		pla		                PLA             ; end setdp macro
.395938	e2 20		sep #$20	                SEP #$20        ; set A short
.39593a	c2 10		rep #$10	                REP #$10        ; set X long
.39593c	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39593e	a2 00 00	ldx #$0000	                LDX #0
.395941	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395945	e8		inx		                INX
.395946	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395949	d0 f6		bne $395941	                BNE clr_fd_loop
.39594b	c2 20		rep #$20	                REP #$20        ; set A long
.39594d	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395950	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395954	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395957	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.39595b	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.39595d	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395961	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395963	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395967	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.39596a	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39596c	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39596e	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395971	85 20		sta $0340	                STA DOS_FD_PTR
.395973	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395976	85 22		sta $0342	                STA DOS_FD_PTR+2
.395978	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39597b	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.39597f	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395983	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.395987	b0 14		bcs $39599d	                BCS try_execute
.395989	82 7f ff	brl $39590b	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39598c					chk_execute
.39598c	c2 20		rep #$20	                REP #$20        ; set A long
.39598e	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395990	d0 0b		bne $39599d	                BNE try_execute                         ; If so: call it
.395992	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395994	d0 07		bne $39599d	                BNE try_execute
.395996	e2 20		sep #$20	                SEP #$20        ; set A short
.395998	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39599a	82 6a ff	brl $395907	                BRL IF_FAILURE
.39599d					try_execute
.39599d	e2 20		sep #$20	                SEP #$20        ; set A short
.39599f	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3959a1	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3959a3	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3959a7	82 68 ff	brl $395912	                BRL IF_SUCCESS                          ; Return success
.3959aa					IF_ALLOCFD
.3959aa	da		phx		                PHX
.3959ab	5a		phy		                PHY
.3959ac	0b		phd		                PHD
.3959ad	8b		phb		                PHB
.3959ae	08		php		                PHP
.3959af	48		pha		                PHA             ; begin setdbr macro
.3959b0	08		php		                PHP
.3959b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3959b3	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3959b5	48		pha		                PHA
.3959b6	ab		plb		                PLB
.3959b7	28		plp		                PLP
.3959b8	68		pla		                PLA             ; end setdbr macro
.3959b9	48		pha		                PHA             ; begin setdp macro
.3959ba	08		php		                PHP
.3959bb	c2 20		rep #$20	                REP #$20        ; set A long
.3959bd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959c0	5b		tcd		                TCD
.3959c1	28		plp		                PLP
.3959c2	68		pla		                PLA             ; end setdp macro
.3959c3	c2 10		rep #$10	                REP #$10        ; set X long
.3959c5	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.3959c8					chk_fd
.3959c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3959ca	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.3959cd	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.3959cf	f0 14		beq $3959e5	                BEQ found                           ; No: flag and return the found descriptor
.3959d1					next_fd
.3959d1	c2 20		rep #$20	                REP #$20        ; set A long
.3959d3	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.3959d4	18		clc		                CLC
.3959d5	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3959d8	aa		tax		                TAX
.3959d9	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.3959dc	90 ea		bcc $3959c8	                BLT chk_fd                          ; No: check this new file descriptor
.3959de	e2 20		sep #$20	                SEP #$20        ; set A short
.3959e0	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.3959e2	82 22 ff	brl $395907	                BRL IF_FAILURE
.3959e5	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.3959e7	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3959ea	c2 20		rep #$20	                REP #$20        ; set A long
.3959ec	8a		txa		                TXA
.3959ed	18		clc		                CLC
.3959ee	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3959f1	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959f3	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3959f6	69 00 00	adc #$0000	                ADC #0
.3959f9	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959fb	82 14 ff	brl $395912	                BRL IF_SUCCESS                      ; Return this file descriptor
.3959fe					IF_FREEFD
.3959fe	da		phx		                PHX
.3959ff	5a		phy		                PHY
.395a00	0b		phd		                PHD
.395a01	8b		phb		                PHB
.395a02	08		php		                PHP
.395a03	48		pha		                PHA             ; begin setdbr macro
.395a04	08		php		                PHP
.395a05	e2 20		sep #$20	                SEP #$20        ; set A short
.395a07	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a09	48		pha		                PHA
.395a0a	ab		plb		                PLB
.395a0b	28		plp		                PLP
.395a0c	68		pla		                PLA             ; end setdbr macro
.395a0d	48		pha		                PHA             ; begin setdp macro
.395a0e	08		php		                PHP
.395a0f	c2 20		rep #$20	                REP #$20        ; set A long
.395a11	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a14	5b		tcd		                TCD
.395a15	28		plp		                PLP
.395a16	68		pla		                PLA             ; end setdp macro
.395a17	e2 20		sep #$20	                SEP #$20        ; set A short
.395a19	c2 10		rep #$10	                REP #$10        ; set X long
.395a1b	a9 00		lda #$00	                LDA #0
.395a1d	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395a1f	82 f0 fe	brl $395912	                BRL IF_SUCCESS
.395a22					DOS_SRC2DST
.395a22	da		phx		                PHX
.395a23	5a		phy		                PHY
.395a24	0b		phd		                PHD
.395a25	8b		phb		                PHB
.395a26	08		php		                PHP
.395a27	48		pha		                PHA             ; begin setdp macro
.395a28	08		php		                PHP
.395a29	c2 20		rep #$20	                REP #$20        ; set A long
.395a2b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a2e	5b		tcd		                TCD
.395a2f	28		plp		                PLP
.395a30	68		pla		                PLA             ; end setdp macro
.395a31	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a33	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395a36	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a38	aa		tax		                TAX                                     ; X := source buffer address
.395a39	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395a3b	a8		tay		                TAY                                     ; Y := destination buffer address
.395a3c	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395a3f	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395a42	28		plp		                PLP
.395a43	ab		plb		                PLB
.395a44	2b		pld		                PLD
.395a45	7a		ply		                PLY
.395a46	fa		plx		                PLX
.395a47	6b		rtl		                RTL
.395a48					IF_COPY
.395a48	da		phx		                PHX
.395a49	5a		phy		                PHY
.395a4a	0b		phd		                PHD
.395a4b	8b		phb		                PHB
.395a4c	08		php		                PHP
.395a4d	48		pha		                PHA             ; begin setdbr macro
.395a4e	08		php		                PHP
.395a4f	e2 20		sep #$20	                SEP #$20        ; set A short
.395a51	a9 00		lda #$00	                LDA #0
.395a53	48		pha		                PHA
.395a54	ab		plb		                PLB
.395a55	28		plp		                PLP
.395a56	68		pla		                PLA             ; end setdbr macro
.395a57	48		pha		                PHA             ; begin setdp macro
.395a58	08		php		                PHP
.395a59	c2 20		rep #$20	                REP #$20        ; set A long
.395a5b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a5e	5b		tcd		                TCD
.395a5f	28		plp		                PLP
.395a60	68		pla		                PLA             ; end setdp macro
.395a61	22 aa 59 39	jsl $3959aa	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395a65	b0 03		bcs $395a6a	                BCS set_src_path
.395a67	82 a1 fe	brl $39590b	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395a6a					set_src_path
.395a6a	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a6c	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395a6f	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395a71	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a73	c8		iny		                INY
.395a74	c8		iny		                INY
.395a75	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395a77	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a79					alloc_dest
.395a79	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a7b	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395a7d	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395a7f	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a81	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395a83	22 aa 59 39	jsl $3959aa	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395a87	b0 0f		bcs $395a98	                BCS set_paths                   ; If everything is ok... start setting the paths
.395a89	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a8b	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a8d	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a8f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a91	22 fe 59 39	jsl $3959fe	                JSL IF_FREEFD                   ; And free it
.395a95	82 73 fe	brl $39590b	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395a98					set_paths
.395a98	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a9a	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395a9c	85 34		sta $0354	                STA @b DOS_DST_PTR
.395a9e	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395aa0	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395aa2	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395aa5	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395aa7	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395aa9	c8		iny		                INY
.395aaa	c8		iny		                INY
.395aab	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395aad	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395aaf	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395ab1	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ab3	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395ab5	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ab7	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395abb	b0 0f		bcs $395acc	                BCS src_open                    ; If success, work with the openned file
.395abd	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395abf	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ac1	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ac3	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ac5	22 fe 59 39	jsl $3959fe	                JSL IF_FREEFD                   ; And free it
.395ac9	82 bd ff	brl $395a89	                BRL err_free_src_fd             ; Free the source file descriptor
.395acc	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395acf	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395ad1	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ad3	c8		iny		                INY
.395ad4	c8		iny		                INY
.395ad5	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395ad7	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ad9	22 22 5a 39	jsl $395a22	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395add	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395adf	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ae1	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ae3	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ae5	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395ae9	b0 0f		bcs $395afa	                BCS read_next                   ; If sucessful, try to get the next cluster
.395aeb	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395aed	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aef	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395af1	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395af3	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395af7	82 c3 ff	brl $395abd	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395afa					read_next
.395afa	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395afc	85 20		sta $0340	                STA @b DOS_FD_PTR
.395afe	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b00	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b02	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b06	b0 19		bcs $395b21	                BCS copy2dest                   ; If successful, copy the sector
.395b08	e2 20		sep #$20	                SEP #$20        ; set A short
.395b0a	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b0c	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b0e	f0 32		beq $395b42	                BEQ file_copied                 ; Yes: we're done copying
.395b10					err_dest_close
.395b10	c2 20		rep #$20	                REP #$20        ; set A long
.395b12	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b14	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b16	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b18	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b1a	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395b1e	82 ca ff	brl $395aeb	                BRL err_src_close               ; Close the source and throw an error
.395b21					copy2dest
.395b21	22 22 5a 39	jsl $395a22	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395b25	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395b28	a9 00 00	lda #$0000	                LDA #0
.395b2b	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b2d	c8		iny		                INY
.395b2e	c8		iny		                INY
.395b2f	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b31	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b33	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b35	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b37	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b39	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395b3d	90 d1		bcc $395b10	                BCC err_dest_close              ; If error: close all files and throw the error
.395b3f	82 b8 ff	brl $395afa	                BRL read_next                   ; Otherwise: repeat the loop
.395b42					file_copied
.395b42	c2 20		rep #$20	                REP #$20        ; set A long
.395b44	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b46	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b48	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b4a	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b4c	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395b50	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b52	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b54	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b56	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b58	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395b5c	82 b3 fd	brl $395912	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395b5f					UART_SELECT
.395b5f	08		php		            PHP
.395b60	c2 20		rep #$20	                REP #$20        ; set A long
.395b62	c9 02 00	cmp #$0002	            CMP #2
.395b65	f0 07		beq $395b6e	            BEQ is_COM2
.395b67	c2 20		rep #$20	                REP #$20        ; set A long
.395b69	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395b6c	80 05		bra $395b73	            BRA setaddr
.395b6e					is_COM2
.395b6e	c2 20		rep #$20	                REP #$20        ; set A long
.395b70	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395b73	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395b77	e2 20		sep #$20	                SEP #$20        ; set A short
.395b79	a9 af		lda #$af	            LDA #`UART1_BASE
.395b7b	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395b7f	28		plp		            PLP
.395b80	6b		rtl		            RTL
.395b81					UART_SETBPS
.395b81	08		php		            PHP
.395b82	0b		phd		            PHD
.395b83	48		pha		                PHA             ; begin setdp macro
.395b84	08		php		                PHP
.395b85	c2 20		rep #$20	                REP #$20        ; set A long
.395b87	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b8a	5b		tcd		                TCD
.395b8b	28		plp		                PLP
.395b8c	68		pla		                PLA             ; end setdp macro
.395b8d	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b8f	48		pha		            PHA
.395b90	e2 20		sep #$20	                SEP #$20        ; set A short
.395b92	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395b95	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b97	09 80		ora #$80	            ORA #LCR_DLB
.395b99	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b9b	c2 20		rep #$20	                REP #$20        ; set A long
.395b9d	68		pla		            PLA
.395b9e	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395ba1	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395ba3	e2 20		sep #$20	                SEP #$20        ; set A short
.395ba5	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395ba8	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395baa	49 80		eor #$80	            EOR #LCR_DLB
.395bac	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bae	2b		pld		            PLD
.395baf	28		plp		            PLP
.395bb0	6b		rtl		            RTL
.395bb1					UART_SETLCR
.395bb1	08		php		            PHP
.395bb2	0b		phd		            PHD
.395bb3	48		pha		                PHA             ; begin setdp macro
.395bb4	08		php		                PHP
.395bb5	c2 20		rep #$20	                REP #$20        ; set A long
.395bb7	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bba	5b		tcd		                TCD
.395bbb	28		plp		                PLP
.395bbc	68		pla		                PLA             ; end setdp macro
.395bbd	e2 20		sep #$20	                SEP #$20        ; set A short
.395bbf	c2 10		rep #$10	                REP #$10        ; set X long
.395bc1	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395bc3	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395bc6	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bc8	2b		pld		            PLD
.395bc9	28		plp		            PLP
.395bca	6b		rtl		            RTL
.395bcb					UART_INIT
.395bcb	08		php		            PHP
.395bcc	0b		phd		            PHD
.395bcd	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bcf	48		pha		                PHA             ; begin setdp macro
.395bd0	08		php		                PHP
.395bd1	c2 20		rep #$20	                REP #$20        ; set A long
.395bd3	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bd6	5b		tcd		                TCD
.395bd7	28		plp		                PLP
.395bd8	68		pla		                PLA             ; end setdp macro
.395bd9	a9 01 00	lda #$0001	            LDA #UART_115200
.395bdc	22 81 5b 39	jsl $395b81	            JSL UART_SETBPS
.395be0	e2 20		sep #$20	                SEP #$20        ; set A short
.395be2	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395be4	22 b1 5b 39	jsl $395bb1	            JSL UART_SETLCR
.395be8	a9 e1		lda #$e1	            LDA #%11100001
.395bea	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395bed	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bef	2b		pld		            PLD
.395bf0	28		plp		            PLP
.395bf1	6b		rtl		            RTL
.395bf2					UART_HASBYT
.395bf2	08		php		            PHP
.395bf3	0b		phd		            PHD
.395bf4	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bf6	48		pha		                PHA             ; begin setdp macro
.395bf7	08		php		                PHP
.395bf8	c2 20		rep #$20	                REP #$20        ; set A long
.395bfa	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bfd	5b		tcd		                TCD
.395bfe	28		plp		                PLP
.395bff	68		pla		                PLA             ; end setdp macro
.395c00	e2 20		sep #$20	                SEP #$20        ; set A short
.395c02	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c05	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c07	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c09	d0 04		bne $395c0f	            BNE ret_true            ; If flag is set, return true
.395c0b	2b		pld		ret_false   PLD                     ; Return false
.395c0c	28		plp		            PLP
.395c0d	18		clc		            CLC
.395c0e	6b		rtl		            RTL
.395c0f	2b		pld		ret_true    PLD                     ; Return true
.395c10	28		plp		            PLP
.395c11	38		sec		            SEC
.395c12	6b		rtl		            RTL
.395c13					UART_GETC
.395c13	08		php		            PHP
.395c14	0b		phd		            PHD
.395c15	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c17	48		pha		                PHA             ; begin setdp macro
.395c18	08		php		                PHP
.395c19	c2 20		rep #$20	                REP #$20        ; set A long
.395c1b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c1e	5b		tcd		                TCD
.395c1f	28		plp		                PLP
.395c20	68		pla		                PLA             ; end setdp macro
.395c21	e2 20		sep #$20	                SEP #$20        ; set A short
.395c23	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c26	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395c28	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c2a	f0 fa		beq $395c26	            BEQ wait_getc           ; If the flag is clear, wait
.395c2c	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395c2f	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c31	2b		pld		            PLD
.395c32	28		plp		            PLP
.395c33	6b		rtl		            RTL
.395c34					UART_PUTC
.395c34	08		php		            PHP
.395c35	0b		phd		            PHD
.395c36	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c38	48		pha		                PHA             ; begin setdp macro
.395c39	08		php		                PHP
.395c3a	c2 20		rep #$20	                REP #$20        ; set A long
.395c3c	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c3f	5b		tcd		                TCD
.395c40	28		plp		                PLP
.395c41	68		pla		                PLA             ; end setdp macro
.395c42	e2 20		sep #$20	                SEP #$20        ; set A short
.395c44	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395c45	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395c48	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c4a	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395c4c	f0 fa		beq $395c48	            BEQ wait_putc
.395c4e	68		pla		            PLA
.395c4f	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395c52	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c54	2b		pld		            PLD
.395c55	28		plp		            PLP
.395c56	6b		rtl		            RTL
.395c57					UART_PUTS
.395c57	08		php		            PHP
.395c58	e2 20		sep #$20	                SEP #$20        ; set A short
.395c5a	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395c5d	f0 07		beq $395c66	            BEQ done
.395c5f	22 34 5c 39	jsl $395c34	            JSL UART_PUTC
.395c63	e8		inx		            INX
.395c64	80 f4		bra $395c5a	            BRA put_loop
.395c66	28		plp		done        PLP
.395c67	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395c68					JOYSTICK_SET_NES_MODE
.395c68	e2 20		sep #$20	                SEP #$20        ; set A short
.395c6a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c6e	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395c70	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c74	6b		rtl		          RTL
.395c75					JOYSTICK_SET_SNES_MODE
.395c75	e2 20		sep #$20	                SEP #$20        ; set A short
.395c77	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c7b	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395c7d	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395c7f	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c83	6b		rtl		          RTL
.395c84					JOYSTICK_ENABLE_NES_SNES_PORT0
.395c84	e2 20		sep #$20	                SEP #$20        ; set A short
.395c86	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c8a	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c8c	09 01		ora #$01	          ORA #NES_SNES_EN0
.395c8e	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c92	6b		rtl		          RTL
.395c93					JOYSTICK_ENABLE_NES_SNES_PORT1
.395c93	e2 20		sep #$20	                SEP #$20        ; set A short
.395c95	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c99	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395c9b	09 02		ora #$02	          ORA #NES_SNES_EN1
.395c9d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ca1	6b		rtl		          RTL
.395ca2					JOYSTICK_DISABLE_NES_SNES_PORT0
.395ca2	e2 20		sep #$20	                SEP #$20        ; set A short
.395ca4	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ca8	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395caa	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cae	6b		rtl		          RTL
.395caf					JOYSTICK_DISABLE_NES_SNES_PORT1
.395caf	e2 20		sep #$20	                SEP #$20        ; set A short
.395cb1	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cb5	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395cb7	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cbb	6b		rtl		          RTL
.395cbc					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395cbc	e2 20		sep #$20	                SEP #$20        ; set A short
.395cbe	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cc2	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395cc4	c9 00		cmp #$00	          CMP #$00
.395cc6	f0 14		beq $395cdc	          BEQ END_OF_JOYSTICK_POLL
.395cc8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ccc	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395cce	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cd2					JOYSTICK_POLLING_ISNOTOVER
.395cd2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395cd6	29 40		and #$40	          AND #NES_SNES_DONE
.395cd8	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395cda	d0 f6		bne $395cd2	          BNE JOYSTICK_POLLING_ISNOTOVER
.395cdc					END_OF_JOYSTICK_POLL
.395cdc	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395cdd					SDC_TEST
.395cdd	8b		phb		                PHB
.395cde	0b		phd		                PHD
.395cdf	08		php		                PHP
.395ce0	48		pha		                PHA             ; begin setdbr macro
.395ce1	08		php		                PHP
.395ce2	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce4	a9 00		lda #$00	                LDA #0
.395ce6	48		pha		                PHA
.395ce7	ab		plb		                PLB
.395ce8	28		plp		                PLP
.395ce9	68		pla		                PLA             ; end setdbr macro
.395cea	48		pha		                PHA             ; begin setdp macro
.395ceb	08		php		                PHP
.395cec	c2 20		rep #$20	                REP #$20        ; set A long
.395cee	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395cf1	5b		tcd		                TCD
.395cf2	28		plp		                PLP
.395cf3	68		pla		                PLA             ; end setdp macro
.395cf4	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf6	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395cf8	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395cfb	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395cff	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395d03	22 43 5d 39	jsl $395d43	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d07	b0 03		bcs $395d0c	                BCS init_ok
.395d09	82 15 00	brl $395d21	                BRL done
.395d0c	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d0e	85 01		sta $0321	                STA BIOS_DEV
.395d10	22 3a 45 39	jsl $39453a	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d14	b0 03		bcs $395d19	                BCS mount_ok
.395d16	82 08 00	brl $395d21	                BRL done
.395d19	22 a3 55 39	jsl $3955a3	mount_ok        JSL IF_DIROPEN
.395d1d	b0 02		bcs $395d21	                BCS all_ok
.395d1f	80 00		bra $395d21	                BRA done
.395d21					all_ok
.395d21	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395d25	28		plp		                PLP
.395d26	2b		pld		                PLD
.395d27	ab		plb		                PLB
.395d28	6b		rtl		                RTL
.395d29					SDC_WAITBUSY
.395d29	08		php		                PHP
.395d2a	e2 20		sep #$20	                SEP #$20        ; set A short
.395d2c	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395d30	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395d32	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395d34	f0 f6		beq $395d2c	                BEQ wait_xact
.395d36	28		plp		                PLP
.395d37	6b		rtl		                RTL
.395d38					SDC_RESET
.395d38	08		php		                PHP
.395d39	e2 20		sep #$20	                SEP #$20        ; set A short
.395d3b	a9 01		lda #$01	                LDA #1
.395d3d	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395d41	28		plp		                PLP
.395d42	6b		rtl		                RTL
.395d43	0b		phd		SDC_INIT        PHD
.395d44	8b		phb		                PHB
.395d45	08		php		                PHP
.395d46	48		pha		                PHA             ; begin setdbr macro
.395d47	08		php		                PHP
.395d48	e2 20		sep #$20	                SEP #$20        ; set A short
.395d4a	a9 00		lda #$00	                LDA #0
.395d4c	48		pha		                PHA
.395d4d	ab		plb		                PLB
.395d4e	28		plp		                PLP
.395d4f	68		pla		                PLA             ; end setdbr macro
.395d50	48		pha		                PHA             ; begin setdp macro
.395d51	08		php		                PHP
.395d52	c2 20		rep #$20	                REP #$20        ; set A long
.395d54	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d57	5b		tcd		                TCD
.395d58	28		plp		                PLP
.395d59	68		pla		                PLA             ; end setdp macro
.395d5a	e2 20		sep #$20	                SEP #$20        ; set A short
.395d5c	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395d5e	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395d62	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d64	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d68	22 29 5d 39	jsl $395d29	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395d6c	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d70	d0 07		bne $395d79	                BNE ret_error                       ; Is there one? Process the error
.395d72	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395d74	28		plp		                PLP
.395d75	ab		plb		                PLB
.395d76	2b		pld		                PLD
.395d77	38		sec		                SEC
.395d78	6b		rtl		                RTL
.395d79	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d7c	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395d7e	85 00		sta $0320	                STA BIOS_STATUS
.395d80	28		plp		                PLP
.395d81	ab		plb		                PLB
.395d82	2b		pld		                PLD
.395d83	18		clc		                CLC
.395d84	6b		rtl		                RTL
.395d85					SDC_GETBLOCK
.395d85	0b		phd		                PHD
.395d86	8b		phb		                PHB
.395d87	08		php		                PHP
.395d88	48		pha		                PHA             ; begin setdbr macro
.395d89	08		php		                PHP
.395d8a	e2 20		sep #$20	                SEP #$20        ; set A short
.395d8c	a9 00		lda #$00	                LDA #0
.395d8e	48		pha		                PHA
.395d8f	ab		plb		                PLB
.395d90	28		plp		                PLP
.395d91	68		pla		                PLA             ; end setdbr macro
.395d92	48		pha		                PHA             ; begin setdp macro
.395d93	08		php		                PHP
.395d94	c2 20		rep #$20	                REP #$20        ; set A long
.395d96	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d99	5b		tcd		                TCD
.395d9a	28		plp		                PLP
.395d9b	68		pla		                PLA             ; end setdp macro
.395d9c	e2 20		sep #$20	                SEP #$20        ; set A short
.395d9e	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395da2	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395da4	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395da8	a9 00		lda #$00	                LDA #0
.395daa	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395dae	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395db0	0a		asl a		                ASL A
.395db1	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395db5	a5 03		lda $0323	                LDA BIOS_LBA+1
.395db7	2a		rol a		                ROL A
.395db8	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395dbc	a5 04		lda $0324	                LDA BIOS_LBA+2
.395dbe	2a		rol a		                ROL A
.395dbf	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395dc3	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395dc5	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395dc9	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395dcb	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395dcf	22 29 5d 39	jsl $395d29	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395dd3	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395dd7	d0 36		bne $395e0f	                BNE ret_error                       ; Is there one? Process the error
.395dd9	e2 20		sep #$20	                SEP #$20        ; set A short
.395ddb	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395ddf	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395de1	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395de5	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395de7	c2 10		rep #$10	                REP #$10        ; set X long
.395de9	a0 00 00	ldy #$0000	                LDY #0
.395dec	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395df0	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395df2	c8		iny		                INY                                 ; Advance to the next byte
.395df3	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395df6	d0 f4		bne $395dec	                BNE loop_rd                         ; No: keep reading
.395df8	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395dfc	d0 11		bne $395e0f	                BNE ret_error                       ; Is there one? Process the error
.395dfe	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e00	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e04	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e06	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e0a	28		plp		                PLP
.395e0b	ab		plb		                PLB
.395e0c	2b		pld		                PLD
.395e0d	38		sec		                SEC
.395e0e	6b		rtl		                RTL
.395e0f	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e12	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e14	85 00		sta $0320	                STA BIOS_STATUS
.395e16	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e1a	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e1c	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e20	28		plp		                PLP
.395e21	ab		plb		                PLB
.395e22	2b		pld		                PLD
.395e23	18		clc		                CLC
.395e24	6b		rtl		                RTL
.395e25					SDC_PUTBLOCK
.395e25	0b		phd		                PHD
.395e26	8b		phb		                PHB
.395e27	08		php		                PHP
.395e28	48		pha		                PHA             ; begin setdbr macro
.395e29	08		php		                PHP
.395e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.395e2c	a9 00		lda #$00	                LDA #0
.395e2e	48		pha		                PHA
.395e2f	ab		plb		                PLB
.395e30	28		plp		                PLP
.395e31	68		pla		                PLA             ; end setdbr macro
.395e32	48		pha		                PHA             ; begin setdp macro
.395e33	08		php		                PHP
.395e34	c2 20		rep #$20	                REP #$20        ; set A long
.395e36	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e39	5b		tcd		                TCD
.395e3a	28		plp		                PLP
.395e3b	68		pla		                PLA             ; end setdp macro
.395e3c	e2 20		sep #$20	                SEP #$20        ; set A short
.395e3e	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e42	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e44	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e48	c2 10		rep #$10	                REP #$10        ; set X long
.395e4a	a0 00 00	ldy #$0000	                LDY #0
.395e4d	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395e4f	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395e53	c8		iny		                INY                                 ; Advance to the next byte
.395e54	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e57	d0 f4		bne $395e4d	                BNE loop_wr                         ; No: keep writing
.395e59	a9 00		lda #$00	                LDA #0
.395e5b	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e5f	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395e61	0a		asl a		                ASL A
.395e62	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e66	a5 03		lda $0323	                LDA BIOS_LBA+1
.395e68	2a		rol a		                ROL A
.395e69	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e6d	a5 04		lda $0324	                LDA BIOS_LBA+2
.395e6f	2a		rol a		                ROL A
.395e70	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e74	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395e76	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e7a	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e7c	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e80	22 29 5d 39	jsl $395d29	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e84	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e88	d0 11		bne $395e9b	                BNE ret_error                       ; Is there one? Process the error
.395e8a	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e8c	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e90	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e92	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e96	28		plp		                PLP
.395e97	ab		plb		                PLB
.395e98	2b		pld		                PLD
.395e99	38		sec		                SEC
.395e9a	6b		rtl		                RTL
.395e9b	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e9e	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395ea0	85 00		sta $0320	                STA BIOS_STATUS
.395ea2	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ea6	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ea8	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395eac	28		plp		                PLP
.395ead	ab		plb		                PLB
.395eae	2b		pld		                PLD
.395eaf	18		clc		                CLC
.395eb0	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395eb1					FDC_TEST
.395eb1	8b		phb		                    PHB
.395eb2	0b		phd		                    PHD
.395eb3	08		php		                    PHP
.395eb4	48		pha		                PHA             ; begin setdbr macro
.395eb5	08		php		                PHP
.395eb6	e2 20		sep #$20	                SEP #$20        ; set A short
.395eb8	a9 00		lda #$00	                LDA #0
.395eba	48		pha		                PHA
.395ebb	ab		plb		                PLB
.395ebc	28		plp		                PLP
.395ebd	68		pla		                PLA             ; end setdbr macro
.395ebe	48		pha		                PHA             ; begin setdp macro
.395ebf	08		php		                PHP
.395ec0	c2 20		rep #$20	                REP #$20        ; set A long
.395ec2	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ec5	5b		tcd		                TCD
.395ec6	28		plp		                PLP
.395ec7	68		pla		                PLA             ; end setdp macro
.395ec8	e2 20		sep #$20	                SEP #$20        ; set A short
.395eca	a9 f0		lda #$f0	                    LDA #$F0
.395ecc	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395ecf	22 3a 0b 39	jsl $390b3a	                    JSL ICLRSCREEN
.395ed3	22 5e 09 39	jsl $39095e	                    JSL ICSRHOME
.395ed7	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ed9	22 a7 61 39	jsl $3961a7	                    JSL FDC_Init
.395edd	b0 03		bcs $395ee2	                    BCS init_ok
.395edf	82 20 00	brl $395f02	                    BRL motor_off
.395ee2	22 a6 68 39	jsl $3968a6	init_ok             JSL FDC_CHK_MEDIA
.395ee6	90 03		bcc $395eeb	                    BCC no_media
.395ee8	82 03 00	brl $395eee	                    BRL is_ok1
.395eeb					no_media
.395eeb	82 14 00	brl $395f02	                    BRL motor_off
.395eee	22 39 67 39	jsl $396739	is_ok1              JSL FDC_MOUNT
.395ef2	90 03		bcc $395ef7	                    BCC mount_err
.395ef4	82 03 00	brl $395efa	                    BRL is_ok2
.395ef7					mount_err
.395ef7	82 08 00	brl $395f02	                    BRL motor_off
.395efa	22 0e 5f 39	jsl $395f0e	is_ok2              JSL FDC_TEST_PUTBLOCK
.395efe	b0 02		bcs $395f02	                    BCS all_ok
.395f00	80 00		bra $395f02	                    BRA motor_off
.395f02					all_ok
.395f02	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395f06	22 57 62 39	jsl $396257	                    JSL FDC_Motor_Off
.395f0a	28		plp		                    PLP
.395f0b	2b		pld		                    PLD
.395f0c	ab		plb		                    PLB
.395f0d	6b		rtl		                    RTL
.395f0e					FDC_TEST_PUTBLOCK
.395f0e	e2 20		sep #$20	                SEP #$20        ; set A short
.395f10	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f12	a2 00 00	ldx #$0000	                    LDX #0
.395f15	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f19	1a		inc a		                    INC A
.395f1a	e8		inx		                    INX
.395f1b	e0 00 02	cpx #$0200	                    CPX #512
.395f1e	d0 f5		bne $395f15	                    BNE init_loop
.395f20	c2 20		rep #$20	                REP #$20        ; set A long
.395f22	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395f25	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395f29	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395f2c	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395f30	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395f33	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395f37	a9 00 00	lda #$0000	                    LDA #0
.395f3a	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395f3e	22 cd 66 39	jsl $3966cd	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395f42	6b		rtl		                    RTL
>395f43	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395f4b	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395f5b	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395f5f					FDC_Check_RQM
.395f5f	0b		phd		                    PHD
.395f60	08		php		                    PHP
.395f61	48		pha		                PHA             ; begin setdp macro
.395f62	08		php		                PHP
.395f63	c2 20		rep #$20	                REP #$20        ; set A long
.395f65	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f68	5b		tcd		                TCD
.395f69	28		plp		                PLP
.395f6a	68		pla		                PLA             ; end setdp macro
.395f6b	e2 20		sep #$20	                SEP #$20        ; set A short
.395f6d	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f6f	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395f73	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f75	30 12		bmi $395f89	                    BMI time_out            ; If so: signal a time out
.395f77	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f7b	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f7d	f0 f4		beq $395f73	                    BEQ loop
.395f7f	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f81	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395f85	28		plp		                    PLP
.395f86	2b		pld		                    PLD
.395f87	38		sec		                    SEC
.395f88	60		rts		                    RTS
.395f89	28		plp		time_out            PLP
.395f8a	2b		pld		                    PLD
.395f8b	18		clc		                    CLC
.395f8c	60		rts		                    RTS
.395f8d					FDC_Check_DRV0_BSY
.395f8d	0b		phd		                    PHD
.395f8e	08		php		                    PHP
.395f8f	48		pha		                PHA             ; begin setdp macro
.395f90	08		php		                PHP
.395f91	c2 20		rep #$20	                REP #$20        ; set A long
.395f93	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f96	5b		tcd		                TCD
.395f97	28		plp		                PLP
.395f98	68		pla		                PLA             ; end setdp macro
.395f99	e2 20		sep #$20	                SEP #$20        ; set A short
.395f9b	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f9d	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395fa1	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fa3	30 12		bmi $395fb7	                    BMI time_out            ; If so: signal a time out
.395fa5	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fa9	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395fab	d0 f4		bne $395fa1	                    BNE loop
.395fad	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395faf	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395fb3	28		plp		                    PLP
.395fb4	2b		pld		                    PLD
.395fb5	38		sec		                    SEC
.395fb6	60		rts		                    RTS
.395fb7	28		plp		time_out            PLP
.395fb8	2b		pld		                    PLD
.395fb9	18		clc		                    CLC
.395fba	60		rts		                    RTS
.395fbb					FDC_Check_CMD_BSY
.395fbb	0b		phd		                    PHD
.395fbc	08		php		                    PHP
.395fbd	48		pha		                PHA             ; begin setdp macro
.395fbe	08		php		                PHP
.395fbf	c2 20		rep #$20	                REP #$20        ; set A long
.395fc1	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fc4	5b		tcd		                TCD
.395fc5	28		plp		                PLP
.395fc6	68		pla		                PLA             ; end setdp macro
.395fc7	e2 20		sep #$20	                SEP #$20        ; set A short
.395fc9	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fcb	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395fcf	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fd1	30 12		bmi $395fe5	                    BMI time_out            ; If so: signal a time out
.395fd3	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fd7	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395fd9	d0 f4		bne $395fcf	                    BNE loop
.395fdb	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fdd	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395fe1	28		plp		                    PLP
.395fe2	2b		pld		                    PLD
.395fe3	38		sec		                    SEC
.395fe4	60		rts		                    RTS
.395fe5	28		plp		time_out            PLP
.395fe6	2b		pld		                    PLD
.395fe7	18		clc		                    CLC
.395fe8	60		rts		                    RTS
.395fe9					FDC_Can_Read_Data
.395fe9	0b		phd		                    PHD
.395fea	08		php		                    PHP
.395feb	48		pha		                PHA             ; begin setdp macro
.395fec	08		php		                PHP
.395fed	c2 20		rep #$20	                REP #$20        ; set A long
.395fef	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ff2	5b		tcd		                TCD
.395ff3	28		plp		                PLP
.395ff4	68		pla		                PLA             ; end setdp macro
.395ff5	e2 20		sep #$20	                SEP #$20        ; set A short
.395ff7	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ff9	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.395ffd	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fff	30 14		bmi $396015	                    BMI time_out            ; If so: signal a time out
.396001	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396005	29 40		and #$40	                    AND #FDC_MSR_DIO
.396007	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.396009	d0 f2		bne $395ffd	                    BNE loop
.39600b	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39600d	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.396011	28		plp		                    PLP
.396012	2b		pld		                    PLD
.396013	38		sec		                    SEC
.396014	60		rts		                    RTS
.396015	28		plp		time_out            PLP
.396016	2b		pld		                    PLD
.396017	18		clc		                    CLC
.396018	60		rts		                    RTS
.396019					FDC_CAN_WRITE
.396019	0b		phd		                    PHD
.39601a	08		php		                    PHP
.39601b	48		pha		                PHA             ; begin setdp macro
.39601c	08		php		                PHP
.39601d	c2 20		rep #$20	                REP #$20        ; set A long
.39601f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396022	5b		tcd		                TCD
.396023	28		plp		                PLP
.396024	68		pla		                PLA             ; end setdp macro
.396025	e2 20		sep #$20	                SEP #$20        ; set A short
.396027	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396029	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.39602d	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39602f	30 14		bmi $396045	                    BMI time_out            ; If so: signal a time out
.396031	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396035	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396037	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396039	d0 f2		bne $39602d	                    BNE loop
.39603b	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39603d	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.396041	28		plp		                    PLP
.396042	2b		pld		                    PLD
.396043	38		sec		                    SEC
.396044	60		rts		                    RTS
.396045	28		plp		time_out            PLP
.396046	2b		pld		                    PLD
.396047	18		clc		                    CLC
.396048	60		rts		                    RTS
.396049					FDC_DELAY_10MS
.396049	da		phx		                    PHX
.39604a	08		php		                    PHP
.39604b	c2 10		rep #$10	                REP #$10        ; set X long
.39604d	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.396050	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.396051	ca		dex		                    DEX
.396052	e0 00 00	cpx #$0000	                    CPX #0
.396055	d0 f9		bne $396050	                    BNE loop
.396057	28		plp		                    PLP
.396058	fa		plx		                    PLX
.396059	6b		rtl		                    RTL
.39605a					FDC_COMMAND
.39605a	da		phx		                    PHX
.39605b	8b		phb		                    PHB
.39605c	0b		phd		                    PHD
.39605d	08		php		                    PHP
.39605e	48		pha		                PHA             ; begin setdbr macro
.39605f	08		php		                PHP
.396060	e2 20		sep #$20	                SEP #$20        ; set A short
.396062	a9 00		lda #$00	                LDA #0
.396064	48		pha		                PHA
.396065	ab		plb		                PLB
.396066	28		plp		                PLP
.396067	68		pla		                PLA             ; end setdbr macro
.396068	48		pha		                PHA             ; begin setdp macro
.396069	08		php		                PHP
.39606a	c2 20		rep #$20	                REP #$20        ; set A long
.39606c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39606f	5b		tcd		                TCD
.396070	28		plp		                PLP
.396071	68		pla		                PLA             ; end setdp macro
.396072	22 49 60 39	jsl $396049	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.396076	e2 30		sep #$30	                SEP #$30        ; set A&X short
.396078	a2 00		ldx #$00	                    LDX #0
.39607a	a9 00		lda #$00	                    LDA #0
.39607c	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.39607f	e8		inx		                    INX
.396080	e0 10		cpx #$10	                    CPX #16
.396082	d0 f8		bne $39607c	                    BNE clr_results
.396084	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.396088	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39608a	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.39608c	f0 04		beq $396092	                    BEQ start_send                          ; If so, start sending
.39608e	22 a7 61 39	jsl $3961a7	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.396092					start_send
.396092	e2 10		sep #$10	                SEP #$10        ; set X short
.396094	a2 00		ldx #$00	                    LDX #0
.396096	20 5f 5f	jsr $395f5f	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.396099	b0 03		bcs $39609e	                    BCS send_param
.39609b	82 5e 00	brl $3960fc	                    BRL time_out                            ; If there was a timeout, flag the time out
.39609e	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3960a1	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3960a5	22 49 60 39	jsl $396049	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.3960a9	e8		inx		                    INX                                     ; Advance to the next byte
.3960aa	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.3960ad	d0 e7		bne $396096	                    BNE send_loop                           ; Keep sending until we've sent them all
.3960af	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.3960b2	d0 03		bne $3960b7	                    BNE chk_data_dir
.3960b4	82 80 00	brl $396137	                    BRL result_phase                        ; If 0: we just want a result
.3960b7	10 3c		bpl $3960f5	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.3960b9					wr_data
.3960b9	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960bb	30 03		bmi $3960c0	                    BMI wr_chk_rqm
.3960bd	82 3c 00	brl $3960fc	                    BRL time_out                            ; If not, raise an error
.3960c0	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.3960c4	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3960c6	f0 f1		beq $3960b9	                    BEQ wr_data_rdy
.3960c8	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.3960ca	d0 03		bne $3960cf	                    BNE wr_data_phase                       ; If so: transfer the data
.3960cc	82 68 00	brl $396137	                    BRL result_phase                          ; If not: it's an error
.3960cf					wr_data_phase
.3960cf	c2 10		rep #$10	                REP #$10        ; set X long
.3960d1	a0 00 00	ldy #$0000	                    LDY #0
.3960d4	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960d6	30 03		bmi $3960db	                    BMI wr_chk_nondma
.3960d8	82 21 00	brl $3960fc	                    BRL time_out                            ; If not, raise an error
.3960db	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3960df	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3960e1	f0 54		beq $396137	                    BEQ result_phase                        ; If not: break out to result phase
.3960e3	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.3960e5	f0 ed		beq $3960d4	                    BEQ wr_data_loop                        ; No: keep waiting
.3960e7	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.3960e9	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.3960ed	c8		iny		                    INY                                     ; Move to the next position
.3960ee	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3960f1	d0 e1		bne $3960d4	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.3960f3	80 42		bra $396137	                    BRA result_phase                        ; ready for the result phase
.3960f5	20 e9 5f	jsr $395fe9	rd_data             JSR FDC_Can_Read_Data
.3960f8	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960fa	30 07		bmi $396103	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.3960fc					time_out
.3960fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3960fe	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396100	82 9c 00	brl $39619f	                    BRL pass_error
.396103	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.396107	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396109	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39610b	d0 eb		bne $3960f8	                    BNE rd_data_rdy
.39610d	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396111	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396113	d0 03		bne $396118	                    BNE rd_data_phase                       ; If so: transfer the data
.396115	82 83 00	brl $39619b	                    BRL error                               ; If not: it's an error
.396118					rd_data_phase
.396118	c2 10		rep #$10	                REP #$10        ; set X long
.39611a	a0 00 00	ldy #$0000	                    LDY #0
.39611d	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39611f	10 db		bpl $3960fc	                    BPL time_out                            ; If not: throw a timeout error
.396121	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.396125	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396127	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396129	d0 f2		bne $39611d	                    BNE rd_data_loop
.39612b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.39612f	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396131	c8		iny		                    INY                                     ; Move to the next position
.396132	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396135	d0 e6		bne $39611d	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.396137	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.39613a	f0 34		beq $396170	                    BEQ chk_busy                            ; Then we're done
.39613c	e2 10		sep #$10	                SEP #$10        ; set X short
.39613e	a2 00		ldx #$00	                    LDX #0
.396140	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.396142	22 f9 40 39	jsl $3940f9	                    JSL ISETTIMEOUT
.396146	20 e9 5f	jsr $395fe9	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.396149	90 b1		bcc $3960fc	                    BCC time_out                            ; If there was a time out, raise an error
.39614b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39614f	20 e9 5f	jsr $395fe9	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396152	90 a8		bcc $3960fc	                    BCC time_out                            ; If there was a time out, raise an error
.396154	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396158	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.39615b	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM
.39615e	90 9c		bcc $3960fc	                    BCC time_out                            ; If there was a time out, flag the error
.396160	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.396164	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396166	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396168	d0 06		bne $396170	                    BNE chk_busy
.39616a	e8		inx		                    INX                                     ; Move to the next result positions
.39616b	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.39616e	d0 e4		bne $396154	                    BNE read_result                         ; And keep looping until we've read all
.396170					chk_busy
.396170	c2 10		rep #$10	                REP #$10        ; set X long
.396172	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.396175	22 0f 16 39	jsl $39160f	                    JSL ILOOP_MS
.396179	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.39617d	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39617f	f0 12		beq $396193	                    BEQ done                                ; If not set: we're done
.396181	20 e9 5f	jsr $395fe9	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396184	b0 03		bcs $396189	                    BCS get_result_byte
.396186	82 73 ff	brl $3960fc	                    BRL time_out                            ; If there was a time out, flag the error
.396189	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.39618d	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396190	e8		inx		                    INX
.396191	80 dd		bra $396170	                    BRA chk_busy                            ; And keep checking
.396193					done
.396193	64 20		stz $0320	                    STZ BIOS_STATUS
.396195	28		plp		                    PLP
.396196	2b		pld		                    PLD
.396197	ab		plb		                    PLB
.396198	fa		plx		                    PLX
.396199	38		sec		                    SEC
.39619a	6b		rtl		                    RTL
.39619b					error
.39619b	e2 20		sep #$20	                SEP #$20        ; set A short
.39619d	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.39619f	85 20		sta $0320	pass_error          STA BIOS_STATUS
.3961a1	28		plp		                    PLP
.3961a2	2b		pld		                    PLD
.3961a3	ab		plb		                    PLB
.3961a4	fa		plx		                    PLX
.3961a5	18		clc		                    CLC
.3961a6	6b		rtl		                    RTL
.3961a7					FDC_Init
.3961a7	08		php		                    PHP
.3961a8	c2 10		rep #$10	                REP #$10        ; set X long
.3961aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3961ac	a9 00		lda #$00	                    LDA #0
.3961ae	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961b2	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3961b5	a0 00 00	ldy #$0000	                    LDY #0
.3961b8	22 1c 16 39	jsl $39161c	                    JSL IDELAY
.3961bc	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3961be	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961c2	ea		nop		                    NOP
.3961c3	ea		nop		                    NOP
.3961c4	ea		nop		                    NOP
.3961c5	ea		nop		                    NOP
.3961c6	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.3961c8	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.3961cc	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3961ce	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.3961d2	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3961d5	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3961d8	22 1c 16 39	jsl $39161c	                    JSL IDELAY
.3961dc	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3961e0	90 25		bcc $396207	                    BCC pass_failure
.3961e2	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3961e6	90 1f		bcc $396207	                    BCC pass_failure
.3961e8	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3961ec	90 19		bcc $396207	                    BCC pass_failure
.3961ee	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3961f2	90 13		bcc $396207	                    BCC pass_failure
.3961f4	22 79 63 39	jsl $396379	                    JSL FDC_Configure_Command
.3961f8	90 0d		bcc $396207	                    BCC pass_failure
.3961fa	22 20 63 39	jsl $396320	                    JSL FDC_Specify_Command
.3961fe	90 07		bcc $396207	                    BCC pass_failure
.396200	22 23 62 39	jsl $396223	                    JSL FDC_Motor_On
.396204	28		plp		                    PLP
.396205	38		sec		                    SEC
.396206	6b		rtl		                    RTL
.396207	28		plp		pass_failure        PLP
.396208	18		clc		                    CLC
.396209	6b		rtl		                    RTL
.39620a					FDC_MOTOR_NEEDED
.39620a	08		php		                    PHP
.39620b	c2 20		rep #$20	                REP #$20        ; set A long
.39620d	78		sei		                    SEI                         ; Turn off interrupts
.39620e	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396211	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396215	e2 20		sep #$20	                SEP #$20        ; set A short
.396217	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39621b	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39621d	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396221	28		plp		                    PLP
.396222	6b		rtl		                    RTL
.396223					FDC_Motor_On
.396223	08		php		                    PHP
.396224	22 0a 62 39	jsl $39620a	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396228	e2 20		sep #$20	                SEP #$20        ; set A short
.39622a	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39622e	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.396230	d0 1f		bne $396251	                    BNE done                    ; If so: skip
.396232	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396234	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396238	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.39623b	90 17		bcc $396254	                    BCC time_out
.39623d	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396240	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396243	22 1c 16 39	jsl $39161c	                    JSL IDELAY
.396247	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39624b	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.39624d	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396251	28		plp		done                PLP
.396252	38		sec		                    SEC
.396253	6b		rtl		                    RTL
.396254	28		plp		time_out            PLP                         ; Return a timeout error
.396255	18		clc		                    CLC
.396256	6b		rtl		                    RTL
.396257					FDC_Motor_Off
.396257	08		php		                    PHP
.396258	e2 20		sep #$20	                SEP #$20        ; set A short
.39625a	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39625c	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.396260	c2 20		rep #$20	                REP #$20        ; set A long
.396262	78		sei		                    SEI                         ; Turn off interrupts
.396263	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.396266	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39626a	e2 20		sep #$20	                SEP #$20        ; set A short
.39626c	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396270	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396272	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396276	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39627a	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39627c	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396280	28		plp		                    PLP
.396281	6b		rtl		                    RTL
.396282					FDC_Recalibrate_Command
.396282	0b		phd		                    PHD
.396283	08		php		                    PHP
.396284	48		pha		                PHA             ; begin setdp macro
.396285	08		php		                PHP
.396286	c2 20		rep #$20	                REP #$20        ; set A long
.396288	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39628b	5b		tcd		                TCD
.39628c	28		plp		                PLP
.39628d	68		pla		                PLA             ; end setdp macro
.39628e	22 0a 62 39	jsl $39620a	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396292	e2 20		sep #$20	                SEP #$20        ; set A short
.396294	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396296	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396299	a5 00		lda $0300	                    LDA FDC_DRIVE
.39629b	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39629e	a9 02		lda #$02	                    LDA #2
.3962a0	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.3962a3	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.3962a6	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.3962a9	22 5a 60 39	jsl $39605a	                    JSL FDC_COMMAND             ; Issue the command
.3962ad	90 04		bcc $3962b3	                    BCC pass_failure            ; If failure, pass the failure up
.3962af	28		plp		                    PLP
.3962b0	2b		pld		                    PLD
.3962b1	38		sec		                    SEC
.3962b2	6b		rtl		                    RTL
.3962b3	28		plp		pass_failure        PLP
.3962b4	2b		pld		                    PLD
.3962b5	18		clc		                    CLC
.3962b6	6b		rtl		                    RTL
.3962b7					FDC_Sense_Int_Status
.3962b7	8b		phb		                    PHB
.3962b8	0b		phd		                    PHD
.3962b9	08		php		                    PHP
.3962ba	48		pha		                PHA             ; begin setdbr macro
.3962bb	08		php		                PHP
.3962bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3962be	a9 00		lda #$00	                LDA #0
.3962c0	48		pha		                PHA
.3962c1	ab		plb		                PLB
.3962c2	28		plp		                PLP
.3962c3	68		pla		                PLA             ; end setdbr macro
.3962c4	48		pha		                PHA             ; begin setdp macro
.3962c5	08		php		                PHP
.3962c6	c2 20		rep #$20	                REP #$20        ; set A long
.3962c8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962cb	5b		tcd		                TCD
.3962cc	28		plp		                PLP
.3962cd	68		pla		                PLA             ; end setdp macro
.3962ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.3962d0	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3962d3	22 0f 16 39	jsl $39160f	                    JSL ILOOP_MS
.3962d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3962d9	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3962db	a9 ff		lda #$ff	                    LDA #$FF
.3962dd	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3962df	20 bb 5f	jsr $395fbb	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3962e2	90 30		bcc $396314	                    BCC time_out                        ; If there was a time out, raise an error
.3962e4	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3962e7	90 2b		bcc $396314	                    BCC time_out                        ; If there was a time out, raise an error
.3962e9	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3962eb	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962ef	20 e9 5f	jsr $395fe9	                    JSR FDC_Can_Read_Data
.3962f2	90 20		bcc $396314	                    BCC time_out                        ; If there was a time out, raise an error
.3962f4	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3962f7	90 1b		bcc $396314	                    BCC time_out                        ; If there was a time out, raise an error
.3962f9	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3962fd	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3962ff	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396302	90 10		bcc $396314	                    BCC time_out                        ; If there was a time out, raise an error
.396304	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396308	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39630a	e2 20		sep #$20	                SEP #$20        ; set A short
.39630c	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.39630f	28		plp		                    PLP
.396310	2b		pld		                    PLD
.396311	ab		plb		                    PLB
.396312	38		sec		                    SEC
.396313	6b		rtl		                    RTL
.396314					time_out
.396314	e2 20		sep #$20	                SEP #$20        ; set A short
.396316	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.396318	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39631b	28		plp		                    PLP
.39631c	2b		pld		                    PLD
.39631d	ab		plb		                    PLB
.39631e	18		clc		                    CLC
.39631f	6b		rtl		                    RTL
.396320					FDC_Specify_Command
.396320	8b		phb		                    PHB
.396321	0b		phd		                    PHD
.396322	08		php		                    PHP
.396323	48		pha		                PHA             ; begin setdbr macro
.396324	08		php		                PHP
.396325	e2 20		sep #$20	                SEP #$20        ; set A short
.396327	a9 00		lda #$00	                LDA #0
.396329	48		pha		                PHA
.39632a	ab		plb		                PLB
.39632b	28		plp		                PLP
.39632c	68		pla		                PLA             ; end setdbr macro
.39632d	48		pha		                PHA             ; begin setdp macro
.39632e	08		php		                PHP
.39632f	c2 20		rep #$20	                REP #$20        ; set A long
.396331	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396334	5b		tcd		                TCD
.396335	28		plp		                PLP
.396336	68		pla		                PLA             ; end setdp macro
.396337	c2 30		rep #$30	                REP #$30        ; set A&X long
.396339	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39633c	22 0f 16 39	jsl $39160f	                    JSL ILOOP_MS
.396340	e2 20		sep #$20	                SEP #$20        ; set A short
.396342	20 bb 5f	jsr $395fbb	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396345	90 26		bcc $39636d	                    BCC time_out            ; If there was a time out, raise an error
.396347	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39634a	90 21		bcc $39636d	                    BCC time_out            ; If there was a time out, raise an error
.39634c	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.39634e	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396352	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396355	90 16		bcc $39636d	                    BCC time_out            ; If there was a time out, raise an error
.396357	a9 cf		lda #$cf	                    LDA #$CF
.396359	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39635d	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396360	90 0b		bcc $39636d	                    BCC time_out            ; If there was a time out, raise an error
.396362	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.396364	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396368	28		plp		                    PLP
.396369	2b		pld		                    PLD
.39636a	ab		plb		                    PLB
.39636b	38		sec		                    SEC
.39636c	6b		rtl		                    RTL
.39636d					time_out
.39636d	e2 20		sep #$20	                SEP #$20        ; set A short
.39636f	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396371	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396374	28		plp		                    PLP
.396375	2b		pld		                    PLD
.396376	ab		plb		                    PLB
.396377	18		clc		                    CLC
.396378	6b		rtl		                    RTL
.396379					FDC_Configure_Command
.396379	8b		phb		                    PHB
.39637a	0b		phd		                    PHD
.39637b	08		php		                    PHP
.39637c	48		pha		                PHA             ; begin setdbr macro
.39637d	08		php		                PHP
.39637e	e2 20		sep #$20	                SEP #$20        ; set A short
.396380	a9 00		lda #$00	                LDA #0
.396382	48		pha		                PHA
.396383	ab		plb		                PLB
.396384	28		plp		                PLP
.396385	68		pla		                PLA             ; end setdbr macro
.396386	48		pha		                PHA             ; begin setdp macro
.396387	08		php		                PHP
.396388	c2 20		rep #$20	                REP #$20        ; set A long
.39638a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39638d	5b		tcd		                TCD
.39638e	28		plp		                PLP
.39638f	68		pla		                PLA             ; end setdp macro
.396390	c2 30		rep #$30	                REP #$30        ; set A&X long
.396392	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396395	22 0f 16 39	jsl $39160f	                    JSL ILOOP_MS
.396399	e2 20		sep #$20	                SEP #$20        ; set A short
.39639b	20 bb 5f	jsr $395fbb	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39639e	90 36		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963a0	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963a3	90 31		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963a5	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.3963a7	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963ab	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963ae	90 26		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963b0	a9 00		lda #$00	                    LDA #$00
.3963b2	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963b6	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963b9	90 1b		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963bb	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.3963bd	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963c1	20 5f 5f	jsr $395f5f	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963c4	90 10		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963c6	a9 00		lda #$00	                    LDA #$00
.3963c8	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963cc	20 bb 5f	jsr $395fbb	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963cf	90 05		bcc $3963d6	                    BCC time_out            ; If there was a time out, raise an error
.3963d1	28		plp		                    PLP
.3963d2	2b		pld		                    PLD
.3963d3	ab		plb		                    PLB
.3963d4	38		sec		                    SEC
.3963d5	6b		rtl		                    RTL
.3963d6					time_out
.3963d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3963d8	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963da	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963dd	28		plp		                    PLP
.3963de	2b		pld		                    PLD
.3963df	ab		plb		                    PLB
.3963e0	18		clc		                    CLC
.3963e1	6b		rtl		                    RTL
.3963e2					FDC_Read_ID_Command
.3963e2	8b		phb		                    PHB
.3963e3	0b		phd		                    PHD
.3963e4	08		php		                    PHP
.3963e5	48		pha		                PHA             ; begin setdbr macro
.3963e6	08		php		                PHP
.3963e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3963e9	a9 00		lda #$00	                LDA #0
.3963eb	48		pha		                PHA
.3963ec	ab		plb		                PLB
.3963ed	28		plp		                PLP
.3963ee	68		pla		                PLA             ; end setdbr macro
.3963ef	48		pha		                PHA             ; begin setdp macro
.3963f0	08		php		                PHP
.3963f1	c2 20		rep #$20	                REP #$20        ; set A long
.3963f3	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963f6	5b		tcd		                TCD
.3963f7	28		plp		                PLP
.3963f8	68		pla		                PLA             ; end setdp macro
.3963f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3963fb	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.3963fd	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396400	a9 01		lda #$01	                    LDA #1
.396402	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396405	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396408	a9 07		lda #$07	                    LDA #7
.39640a	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39640d	22 5a 60 39	jsl $39605a	                    JSL FDC_COMMAND                     ; Issue the command
.396411	90 27		bcc $39643a	                    BCC pass_failure
.396413	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396416	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.396418	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39641b	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.39641d	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396420	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396422	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396425	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.396427	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39642a	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.39642c	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39642f	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396431	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396434	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396436	28		plp		                    PLP
.396437	2b		pld		                    PLD
.396438	ab		plb		                    PLB
.396439	6b		rtl		                    RTL
.39643a	28		plp		pass_failure        PLP
.39643b	2b		pld		                    PLD
.39643c	ab		plb		                    PLB
.39643d	18		clc		                    CLC
.39643e	6b		rtl		                    RTL
.39643f					FDC_DumpReg_Command
.39643f	0b		phd		                    PHD
.396440	08		php		                    PHP
.396441	e2 20		sep #$20	                SEP #$20        ; set A short
.396443	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.396445	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396448	a9 01		lda #$01	                    LDA #1
.39644a	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39644d	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396450	a9 0a		lda #$0a	                    LDA #10
.396452	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.396455	22 5a 60 39	jsl $39605a	                    JSL FDC_COMMAND                     ; Issue the command
.396459	90 03		bcc $39645e	                    BCC pass_failure
.39645b	28		plp		                    PLP
.39645c	2b		pld		                    PLD
.39645d	6b		rtl		                    RTL
.39645e	28		plp		pass_failure        PLP
.39645f	2b		pld		                    PLD
.396460	18		clc		                    CLC
.396461	6b		rtl		                    RTL
.396462					FDC_Seek_Track
.396462	8b		phb		                    PHB
.396463	0b		phd		                    PHD
.396464	08		php		                    PHP
.396465	48		pha		                PHA             ; begin setdbr macro
.396466	08		php		                PHP
.396467	e2 20		sep #$20	                SEP #$20        ; set A short
.396469	a9 00		lda #$00	                LDA #0
.39646b	48		pha		                PHA
.39646c	ab		plb		                PLB
.39646d	28		plp		                PLP
.39646e	68		pla		                PLA             ; end setdbr macro
.39646f	48		pha		                PHA             ; begin setdp macro
.396470	08		php		                PHP
.396471	c2 20		rep #$20	                REP #$20        ; set A long
.396473	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396476	5b		tcd		                TCD
.396477	28		plp		                PLP
.396478	68		pla		                PLA             ; end setdp macro
.396479	22 0a 62 39	jsl $39620a	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39647d	e2 20		sep #$20	                SEP #$20        ; set A short
.39647f	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396481	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396484	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396486	29 01		and #$01	                    AND #$01
.396488	0a		asl a		                    ASL A
.396489	0a		asl a		                    ASL A
.39648a	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39648c	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39648f	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396491	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396494	a9 03		lda #$03	                    LDA #3
.396496	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.396499	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39649c	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.39649f	22 5a 60 39	jsl $39605a	                    JSL FDC_COMMAND                     ; Issue the command
.3964a3	90 05		bcc $3964aa	                    BCC pass_failure
.3964a5	28		plp		                    PLP
.3964a6	2b		pld		                    PLD
.3964a7	ab		plb		                    PLB
.3964a8	38		sec		                    SEC
.3964a9	6b		rtl		                    RTL
.3964aa	28		plp		pass_failure        PLP
.3964ab	2b		pld		                    PLD
.3964ac	ab		plb		                    PLB
.3964ad	18		clc		                    CLC
.3964ae	6b		rtl		                    RTL
.3964af					FDC_Read_Sector
.3964af	8b		phb		                    PHB
.3964b0	0b		phd		                    PHD
.3964b1	08		php		                    PHP
.3964b2	48		pha		                PHA             ; begin setdbr macro
.3964b3	08		php		                PHP
.3964b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3964b6	a9 00		lda #$00	                LDA #0
.3964b8	48		pha		                PHA
.3964b9	ab		plb		                PLB
.3964ba	28		plp		                PLP
.3964bb	68		pla		                PLA             ; end setdbr macro
.3964bc	48		pha		                PHA             ; begin setdp macro
.3964bd	08		php		                PHP
.3964be	c2 20		rep #$20	                REP #$20        ; set A long
.3964c0	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964c3	5b		tcd		                TCD
.3964c4	28		plp		                PLP
.3964c5	68		pla		                PLA             ; end setdp macro
.3964c6	22 0a 62 39	jsl $39620a	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3964cc	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3964ce	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3964d0	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964d3	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964d5	29 01		and #$01	                    AND #$01
.3964d7	0a		asl a		                    ASL A
.3964d8	0a		asl a		                    ASL A
.3964d9	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964db	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964de	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3964e0	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964e3	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3964e5	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3964e8	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3964ea	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3964ed	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3964ef	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3964f2	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3964f4	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3964f7	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3964f9	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3964fc	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3964fe	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396501	a9 09		lda #$09	                    LDA #9
.396503	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396506	a9 01		lda #$01	                    LDA #1
.396508	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.39650b	a9 07		lda #$07	                    LDA #7
.39650d	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396510	22 5a 60 39	jsl $39605a	command             JSL FDC_COMMAND                     ; Issue the command
.396514	08		php		                    PHP
.396515	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396518	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39651a	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39651d	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.39651f	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396522	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396524	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396527	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.396529	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39652c	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39652e	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396531	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396533	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396536	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396538	28		plp		                    PLP
.396539	90 04		bcc $39653f	                    BCC pass_failure
.39653b	28		plp		done                PLP
.39653c	2b		pld		                    PLD
.39653d	ab		plb		                    PLB
.39653e	6b		rtl		                    RTL
.39653f	28		plp		pass_failure        PLP
.396540	2b		pld		                    PLD
.396541	ab		plb		                    PLB
.396542	18		clc		                    CLC
.396543	6b		rtl		                    RTL
.396544					FDC_Write_Sector
.396544	8b		phb		                    PHB
.396545	0b		phd		                    PHD
.396546	08		php		                    PHP
.396547	48		pha		                PHA             ; begin setdbr macro
.396548	08		php		                PHP
.396549	e2 20		sep #$20	                SEP #$20        ; set A short
.39654b	a9 00		lda #$00	                LDA #0
.39654d	48		pha		                PHA
.39654e	ab		plb		                PLB
.39654f	28		plp		                PLP
.396550	68		pla		                PLA             ; end setdbr macro
.396551	48		pha		                PHA             ; begin setdp macro
.396552	08		php		                PHP
.396553	c2 20		rep #$20	                REP #$20        ; set A long
.396555	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396558	5b		tcd		                TCD
.396559	28		plp		                PLP
.39655a	68		pla		                PLA             ; end setdp macro
.39655b	e2 20		sep #$20	                SEP #$20        ; set A short
.39655d	22 0a 62 39	jsl $39620a	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396561	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396563	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396565	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396568	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39656a	29 01		and #$01	                    AND #$01
.39656c	0a		asl a		                    ASL A
.39656d	0a		asl a		                    ASL A
.39656e	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396570	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396573	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396575	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396578	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39657a	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39657d	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39657f	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396582	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396584	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396587	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396589	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39658c	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39658e	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396591	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396593	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396596	a9 09		lda #$09	                    LDA #9
.396598	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39659b	a9 ff		lda #$ff	                    LDA #$FF
.39659d	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.3965a0	a9 07		lda #$07	                    LDA #7
.3965a2	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3965a5	22 5a 60 39	jsl $39605a	command             JSL FDC_COMMAND                     ; Issue the command
.3965a9	08		php		                    PHP
.3965aa	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3965ad	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3965af	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3965b2	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.3965b4	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3965b7	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.3965b9	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3965bc	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.3965be	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3965c1	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3965c3	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3965c6	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3965c8	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3965cb	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3965cd	28		plp		check_status        PLP
.3965ce	90 04		bcc $3965d4	                    BCC pass_failure
.3965d0	28		plp		done                PLP
.3965d1	2b		pld		                    PLD
.3965d2	ab		plb		                    PLB
.3965d3	6b		rtl		                    RTL
.3965d4	28		plp		pass_failure        PLP
.3965d5	2b		pld		                    PLD
.3965d6	ab		plb		                    PLB
.3965d7	18		clc		                    CLC
.3965d8	6b		rtl		                    RTL
.3965d9					DIVIDE32
.3965d9	da		phx		                    PHX
.3965da	5a		phy		                    PHY
.3965db	0b		phd		                    PHD
.3965dc	08		php		                    PHP
.3965dd	48		pha		                PHA             ; begin setdp macro
.3965de	08		php		                PHP
.3965df	c2 20		rep #$20	                REP #$20        ; set A long
.3965e1	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3965e4	5b		tcd		                TCD
.3965e5	28		plp		                PLP
.3965e6	68		pla		                PLA             ; end setdp macro
.3965e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3965e9	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3965eb	64 0a		stz $0316	                    STZ REMAINDER+2
.3965ed	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3965f0	06 00		asl $030c	loop                ASL DIVIDEND
.3965f2	26 02		rol $030e	                    ROL DIVIDEND+2
.3965f4	26 08		rol $0314	                    ROL REMAINDER
.3965f6	26 0a		rol $0316	                    ROL REMAINDER+2
.3965f8	a5 08		lda $0314	                    LDA REMAINDER
.3965fa	38		sec		                    SEC
.3965fb	e5 04		sbc $0310	                    SBC DIVISOR
.3965fd	a8		tay		                    TAY
.3965fe	a5 0a		lda $0316	                    LDA REMAINDER+2
.396600	e5 06		sbc $0312	                    SBC DIVISOR+2
.396602	90 06		bcc $39660a	                    BCC skip
.396604	85 0a		sta $0316	                    STA REMAINDER+2
.396606	84 08		sty $0314	                    STY REMAINDER
.396608	e6 00		inc $030c	                    INC DIVIDEND
.39660a	ca		dex		skip                DEX
.39660b	d0 e3		bne $3965f0	                    BNE loop
.39660d	28		plp		                    PLP
.39660e	2b		pld		                    PLD
.39660f	7a		ply		                    PLY
.396610	fa		plx		                    PLX
.396611	60		rts		                    RTS
.396612					LBA2CHS
.396612	8b		phb		                    PHB
.396613	0b		phd		                    PHD
.396614	08		php		                    PHP
.396615	48		pha		                PHA             ; begin setdbr macro
.396616	08		php		                PHP
.396617	e2 20		sep #$20	                SEP #$20        ; set A short
.396619	a9 00		lda #$00	                LDA #0
.39661b	48		pha		                PHA
.39661c	ab		plb		                PLB
.39661d	28		plp		                PLP
.39661e	68		pla		                PLA             ; end setdbr macro
.39661f	48		pha		                PHA             ; begin setdp macro
.396620	08		php		                PHP
.396621	c2 20		rep #$20	                REP #$20        ; set A long
.396623	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396626	5b		tcd		                TCD
.396627	28		plp		                PLP
.396628	68		pla		                PLA             ; end setdp macro
.396629	c2 30		rep #$30	                REP #$30        ; set A&X long
.39662b	a5 22		lda $0322	                    LDA BIOS_LBA
.39662d	85 0c		sta $030c	                    STA DIVIDEND
.39662f	a5 24		lda $0324	                    LDA BIOS_LBA+2
.396631	85 0e		sta $030e	                    STA DIVIDEND+2
.396633	a9 24 00	lda #$0024	                    LDA #36
.396636	85 10		sta $0310	                    STA DIVISOR
.396638	64 12		stz $0312	                    STZ DIVISOR+2
.39663a	20 d9 65	jsr $3965d9	                    JSR DIVIDE32
.39663d	e2 20		sep #$20	                SEP #$20        ; set A short
.39663f	a5 0c		lda $030c	                    LDA DIVIDEND
.396641	85 02		sta $0302	                    STA FDC_CYLINDER
.396643	c2 20		rep #$20	                REP #$20        ; set A long
.396645	a5 14		lda $0314	                    LDA REMAINDER
.396647	85 0c		sta $030c	                    STA DIVIDEND
.396649	a5 16		lda $0316	                    LDA REMAINDER+2
.39664b	85 0e		sta $030e	                    STA DIVIDEND+2
.39664d	a9 12 00	lda #$0012	                    LDA #18
.396650	85 10		sta $0310	                    STA DIVISOR
.396652	64 12		stz $0312	                    STZ DIVISOR+2
.396654	20 d9 65	jsr $3965d9	                    JSR DIVIDE32
.396657	e2 20		sep #$20	                SEP #$20        ; set A short
.396659	a5 0c		lda $030c	                    LDA DIVIDEND
.39665b	29 01		and #$01	                    AND #$01
.39665d	85 01		sta $0301	                    STA FDC_HEAD
.39665f	a5 14		lda $0314	                    LDA REMAINDER
.396661	1a		inc a		                    INC A
.396662	85 03		sta $0303	                    STA FDC_SECTOR
.396664	28		plp		                    PLP
.396665	2b		pld		                    PLD
.396666	ab		plb		                    PLB
.396667	6b		rtl		                    RTL
.396668					FDC_GETBLOCK
.396668	8b		phb		                    PHB
.396669	0b		phd		                    PHD
.39666a	08		php		                    PHP
.39666b	48		pha		                PHA             ; begin setdbr macro
.39666c	08		php		                PHP
.39666d	e2 20		sep #$20	                SEP #$20        ; set A short
.39666f	a9 00		lda #$00	                LDA #0
.396671	48		pha		                PHA
.396672	ab		plb		                PLB
.396673	28		plp		                PLP
.396674	68		pla		                PLA             ; end setdbr macro
.396675	48		pha		                PHA             ; begin setdp macro
.396676	08		php		                PHP
.396677	c2 20		rep #$20	                REP #$20        ; set A long
.396679	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39667c	5b		tcd		                TCD
.39667d	28		plp		                PLP
.39667e	68		pla		                PLA             ; end setdp macro
.39667f	e2 20		sep #$20	                SEP #$20        ; set A short
.396681	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396683	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396686	c2 30		rep #$30	                REP #$30        ; set A&X long
.396688	22 12 66 39	jsl $396612	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39668c	e2 20		sep #$20	                SEP #$20        ; set A short
.39668e	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396690	f0 29		beq $3966bb	                    BEQ read_failure
.396692					try_read
.396692	c2 20		rep #$20	                REP #$20        ; set A long
.396694	22 af 64 39	jsl $3964af	                    JSL FDC_Read_Sector         ; Read the sector
.396698	90 14		bcc $3966ae	                    BCC retry
.39669a	e2 20		sep #$20	                SEP #$20        ; set A short
.39669c	a5 06		lda $0306	                    LDA FDC_ST0
.39669e	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3966a0	d0 19		bne $3966bb	                    BNE read_failure
.3966a2					ret_success
.3966a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a4	a9 00		lda #$00	                    LDA #0
.3966a6	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3966a9	28		plp		                    PLP
.3966aa	2b		pld		                    PLD
.3966ab	ab		plb		                    PLB
.3966ac	38		sec		                    SEC
.3966ad	6b		rtl		                    RTL
.3966ae					retry
.3966ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b0	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.3966b3	30 13		bmi $3966c8	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.3966b5	22 a7 61 39	jsl $3961a7	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.3966b9	80 d7		bra $396692	                    BRA try_read                ; And try the read again
.3966bb					read_failure
.3966bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3966bd	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.3966bf	80 04		bra $3966c5	                    BRA ret_failure
.3966c1					seek_failure
.3966c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c3	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3966c5	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.3966c8	28		plp		pass_failure        PLP
.3966c9	2b		pld		                    PLD
.3966ca	ab		plb		                    PLB
.3966cb	18		clc		                    CLC
.3966cc	6b		rtl		                    RTL
.3966cd					FDC_PUTBLOCK
.3966cd	8b		phb		                    PHB
.3966ce	0b		phd		                    PHD
.3966cf	08		php		                    PHP
.3966d0	48		pha		                PHA             ; begin setdbr macro
.3966d1	08		php		                PHP
.3966d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3966d4	a9 00		lda #$00	                LDA #0
.3966d6	48		pha		                PHA
.3966d7	ab		plb		                PLB
.3966d8	28		plp		                PLP
.3966d9	68		pla		                PLA             ; end setdbr macro
.3966da	48		pha		                PHA             ; begin setdp macro
.3966db	08		php		                PHP
.3966dc	c2 20		rep #$20	                REP #$20        ; set A long
.3966de	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966e1	5b		tcd		                TCD
.3966e2	28		plp		                PLP
.3966e3	68		pla		                PLA             ; end setdp macro
.3966e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e6	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3966e8	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3966eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966ed	22 12 66 39	jsl $396612	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3966f1	22 44 65 39	jsl $396544	retry               JSL FDC_Write_Sector        ; Write the sector
.3966f5	b0 03		bcs $3966fa	                    BCS chk_st0
.3966f7	82 28 00	brl $396722	                    BRL attempt_retry
.3966fa					chk_st0
.3966fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3966fc	a5 06		lda $0306	                    LDA FDC_ST0
.3966fe	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396700	d0 0c		bne $39670e	                    BNE write_failure
.396702					ret_success
.396702	e2 20		sep #$20	                SEP #$20        ; set A short
.396704	a9 00		lda #$00	                    LDA #0
.396706	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396709	28		plp		                    PLP
.39670a	2b		pld		                    PLD
.39670b	ab		plb		                    PLB
.39670c	38		sec		                    SEC
.39670d	6b		rtl		                    RTL
.39670e					write_failure
.39670e	e2 20		sep #$20	                SEP #$20        ; set A short
.396710	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396712	89 02		bit #$02	                    BIT #FDC_ST1_NW
.396714	f0 04		beq $39671a	                    BEQ generic_err
.396716	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396718	80 17		bra $396731	                    BRA ret_failure
.39671a	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.39671c	d0 e4		bne $396702	                    BNE ret_success
.39671e	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396720	d0 e0		bne $396702	                    BNE ret_success
.396722					attempt_retry
.396722	e2 20		sep #$20	                SEP #$20        ; set A short
.396724	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396727	d0 c8		bne $3966f1	                    BNE retry                           ; And retry unless we have none left
.396729	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39672b	80 04		bra $396731	                    BRA ret_failure
.39672d					seek_failure
.39672d	e2 20		sep #$20	                SEP #$20        ; set A short
.39672f	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396731					ret_failure
.396731	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396734	28		plp		pass_failure        PLP
.396735	2b		pld		                    PLD
.396736	ab		plb		                    PLB
.396737	18		clc		                    CLC
.396738	6b		rtl		                    RTL
.396739					FDC_MOUNT
.396739	8b		phb		                    PHB
.39673a	0b		phd		                    PHD
.39673b	08		php		                    PHP
.39673c	48		pha		                PHA             ; begin setdbr macro
.39673d	08		php		                PHP
.39673e	e2 20		sep #$20	                SEP #$20        ; set A short
.396740	a9 00		lda #$00	                LDA #0
.396742	48		pha		                PHA
.396743	ab		plb		                PLB
.396744	28		plp		                PLP
.396745	68		pla		                PLA             ; end setdbr macro
.396746	48		pha		                PHA             ; begin setdp macro
.396747	08		php		                PHP
.396748	c2 20		rep #$20	                REP #$20        ; set A long
.39674a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39674d	5b		tcd		                TCD
.39674e	28		plp		                PLP
.39674f	68		pla		                PLA             ; end setdp macro
.396750	22 a7 61 39	jsl $3961a7	                    JSL FDC_INIT
.396754	e2 20		sep #$20	                SEP #$20        ; set A short
.396756	c2 10		rep #$10	                REP #$10        ; set X long
.396758	a9 00		lda #$00	                    LDA #0
.39675a	a2 00 00	ldx #$0000	                    LDX #0
.39675d	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396761	e8		inx		                    INX
.396762	e0 00 02	cpx #$0200	                    CPX #512
.396765	d0 f6		bne $39675d	                    BNE zero_loop
.396767	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396769	85 00		sta $0300	                    STA FDC_DRIVE
.39676b	22 23 62 39	jsl $396223	                    JSL FDC_Motor_On                        ; Turn the motor on
.39676f	c2 30		rep #$30	                REP #$30        ; set A&X long
.396771	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396774	85 22		sta $0322	                    STA BIOS_LBA
.396776	85 24		sta $0324	                    STA BIOS_LBA+2
.396778	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39677b	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39677d	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396780	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396782	22 68 66 39	jsl $396668	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396786	b0 03		bcs $39678b	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396788	82 d3 00	brl $39685e	                    BRL pass_failure                        ; Pass the error up the chain
.39678b					parse_boot
.39678b	e2 20		sep #$20	                SEP #$20        ; set A short
.39678d	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.39678f	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396793	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396795	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.396799	e2 20		sep #$20	                SEP #$20        ; set A short
.39679b	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.39679f	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.3967a3	c2 20		rep #$20	                REP #$20        ; set A long
.3967a5	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.3967a8	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.3967ac	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.3967b0	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.3967b4	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.3967b8	a9 00 00	lda #$0000	                    LDA #0
.3967bb	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.3967bf	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.3967c2	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.3967c6	18		clc		                    CLC
.3967c7	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3967cb	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3967cf	a9 00 00	lda #$0000	                    LDA #0
.3967d2	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3967d6	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3967da	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3967db	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3967df	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3967e3	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3967e7	a9 00 00	lda #$0000	                    LDA #0
.3967ea	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3967ee	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3967f2	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3967f6	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3967f7	4a		lsr a		                    LSR A
.3967f8	4a		lsr a		                    LSR A
.3967f9	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3967fa	18		clc		                    CLC
.3967fb	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3967ff	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396803	a9 00 00	lda #$0000	                    LDA #0
.396806	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39680a	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39680e	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396812	a9 00 00	lda #$0000	                    LDA #0
.396815	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.396819	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39681d	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396821	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396824	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.396828	e2 20		sep #$20	                SEP #$20        ; set A short
.39682a	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39682e	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396830	80 14		bra $396846	                    BRA no_volume_id                        ; No: there is no volume ID
.396832					is_extended
.396832	c2 20		rep #$20	                REP #$20        ; set A long
.396834	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.396838	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39683c	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396840	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396844	80 0d		bra $396853	                    BRA ret_success
.396846					no_volume_id
.396846	c2 20		rep #$20	                REP #$20        ; set A long
.396848	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.39684b	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39684f	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396853					ret_success
.396853	e2 20		sep #$20	                SEP #$20        ; set A short
.396855	a9 00		lda #$00	                    LDA #0
.396857	85 20		sta $0320	                    STA BIOS_STATUS
.396859	28		plp		                    PLP
.39685a	2b		pld		                    PLD
.39685b	ab		plb		                    PLB
.39685c	38		sec		                    SEC
.39685d	6b		rtl		                    RTL
.39685e	28		plp		pass_failure        PLP
.39685f	2b		pld		                    PLD
.396860	ab		plb		                    PLB
.396861	18		clc		                    CLC
.396862	6b		rtl		                    RTL
.396863					FDC_CMDBLOCK
.396863	8b		phb		                    PHB
.396864	0b		phd		                    PHD
.396865	08		php		                    PHP
.396866	48		pha		                PHA             ; begin setdbr macro
.396867	08		php		                PHP
.396868	e2 20		sep #$20	                SEP #$20        ; set A short
.39686a	a9 00		lda #$00	                LDA #0
.39686c	48		pha		                PHA
.39686d	ab		plb		                PLB
.39686e	28		plp		                PLP
.39686f	68		pla		                PLA             ; end setdbr macro
.396870	48		pha		                PHA             ; begin setdp macro
.396871	08		php		                PHP
.396872	c2 20		rep #$20	                REP #$20        ; set A long
.396874	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396877	5b		tcd		                TCD
.396878	28		plp		                PLP
.396879	68		pla		                PLA             ; end setdp macro
.39687a	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39687c	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.39687e	f0 0f		beq $39688f	                    BEQ motor_on
.396880	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396882	f0 11		beq $396895	                    BEQ motor_off
.396884	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396886	f0 13		beq $39689b	                    BEQ recalibrate
.396888	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39688a	28		plp		                    PLP
.39688b	2b		pld		                    PLD
.39688c	ab		plb		                    PLB
.39688d	38		sec		                    SEC
.39688e	6b		rtl		                    RTL
.39688f	22 23 62 39	jsl $396223	motor_on            JSL FDC_Motor_On
.396893	80 f3		bra $396888	                    BRA ret_success
.396895	22 57 62 39	jsl $396257	motor_off           JSL FDC_Motor_Off
.396899	80 ed		bra $396888	                    BRA ret_success
.39689b	22 82 62 39	jsl $396282	recalibrate         JSL FDC_Recalibrate_Command
.39689f	b0 e7		bcs $396888	                    BCS ret_success
.3968a1	28		plp		pass_failure        PLP
.3968a2	2b		pld		                    PLD
.3968a3	ab		plb		                    PLB
.3968a4	18		clc		                    CLC
.3968a5	6b		rtl		                    RTL
.3968a6					FDC_CHK_MEDIA
.3968a6	0b		phd		                    PHD
.3968a7	08		php		                    PHP
.3968a8	48		pha		                PHA             ; begin setdp macro
.3968a9	08		php		                PHP
.3968aa	c2 20		rep #$20	                REP #$20        ; set A long
.3968ac	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968af	5b		tcd		                TCD
.3968b0	28		plp		                PLP
.3968b1	68		pla		                PLA             ; end setdp macro
.3968b2	22 23 62 39	jsl $396223	                    JSL FDC_Motor_On                ; Turn on the motor
.3968b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3968b8	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.3968bc	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.3968be	f0 42		beq $396902	                    BEQ ret_true                    ; If not: assume the disk is present
.3968c0	a9 00		lda #$00	                    LDA #0
.3968c2	85 00		sta $0300	                    STA FDC_DRIVE
.3968c4	a9 00		lda #$00	                    LDA #0
.3968c6	85 01		sta $0301	                    STA FDC_HEAD
.3968c8	a9 50		lda #$50	                    LDA #80
.3968ca	85 02		sta $0302	                    STA FDC_CYLINDER
.3968cc	22 62 64 39	jsl $396462	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3968d0	90 34		bcc $396906	                    BCC ret_false                   ; If fail: return false
.3968d2	c2 10		rep #$10	                REP #$10        ; set X long
.3968d4	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3968d7	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3968da	22 1c 16 39	jsl $39161c	                    JSL IDELAY
.3968de	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3968e2	a5 06		lda $0306	                    LDA FDC_ST0
.3968e4	29 d0		and #$d0	                    AND #%11010000
.3968e6	d0 1e		bne $396906	                    BNE ret_false
.3968e8	22 82 62 39	jsl $396282	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3968ec	90 18		bcc $396906	                    BCC ret_false                   ; If fail: return false
.3968ee	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3968f1	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3968f4	22 1c 16 39	jsl $39161c	                    JSL IDELAY
.3968f8	22 b7 62 39	jsl $3962b7	                    JSL FDC_Sense_Int_Status
.3968fc	a5 06		lda $0306	                    LDA FDC_ST0
.3968fe	29 d0		and #$d0	                    AND #%11010000
.396900	d0 04		bne $396906	                    BNE ret_false
.396902					ret_true
.396902	28		plp		                    PLP
.396903	2b		pld		                    PLD
.396904	38		sec		                    SEC
.396905	6b		rtl		                    RTL
.396906					ret_false
.396906	28		plp		                    PLP
.396907	2b		pld		                    PLD
.396908	18		clc		                    CLC
.396909	6b		rtl		                    RTL
.39690a					FDC_WRITEVBR
.39690a	8b		phb		                    PHB
.39690b	0b		phd		                    PHD
.39690c	08		php		                    PHP
.39690d	48		pha		                PHA             ; begin setdbr macro
.39690e	08		php		                PHP
.39690f	e2 20		sep #$20	                SEP #$20        ; set A short
.396911	a9 00		lda #$00	                LDA #0
.396913	48		pha		                PHA
.396914	ab		plb		                PLB
.396915	28		plp		                PLP
.396916	68		pla		                PLA             ; end setdbr macro
.396917	48		pha		                PHA             ; begin setdp macro
.396918	08		php		                PHP
.396919	c2 20		rep #$20	                REP #$20        ; set A long
.39691b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39691e	5b		tcd		                TCD
.39691f	28		plp		                PLP
.396920	68		pla		                PLA             ; end setdp macro
.396921	22 39 67 39	jsl $396739	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396925	c2 30		rep #$30	                REP #$30        ; set A&X long
.396927	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39692a	a2 00 00	ldx #$0000	                    LDX #0
.39692d	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396931	e8		inx		                    INX
.396932	e8		inx		                    INX
.396933	e0 00 02	cpx #$0200	                    CPX #512
.396936	d0 f5		bne $39692d	                    BNE clr_loop
.396938	e2 20		sep #$20	                SEP #$20        ; set A short
.39693a	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.39693d	bf a0 69 39	lda $3969a0,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396941	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396945	e8		inx		                    INX
.396946	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.396949	d0 f2		bne $39693d	                    BNE copy_loop
.39694b	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.39694e	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396951	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396953	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396957	f0 07		beq $396960	                    BEQ path_copy_done
.396959	e8		inx		                    INX
.39695a	c8		iny		                    INY
.39695b	c0 80 00	cpy #$0080	                    CPY #128
.39695e	d0 f1		bne $396951	                    BNE path_copy_loop
.396960					path_copy_done
.396960	c2 20		rep #$20	                REP #$20        ; set A long
.396962	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396965	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396969	c2 20		rep #$20	                REP #$20        ; set A long
.39696b	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.39696e	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396970	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396973	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396975	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.396978	85 02		sta $0322	                    STA BIOS_LBA
.39697a	85 04		sta $0324	                    STA BIOS_LBA+2
.39697c	e2 20		sep #$20	                SEP #$20        ; set A short
.39697e	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396980	85 01		sta $0321	                    STA BIOS_DEV
.396982	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396986	b0 09		bcs $396991	                    BCS ret_success
.396988	22 57 62 39	jsl $396257	                    JSL FDC_Motor_Off
.39698c	28		plp		                    PLP                         ; Return the failure
.39698d	2b		pld		                    PLD
.39698e	ab		plb		                    PLB
.39698f	18		clc		                    CLC
.396990	6b		rtl		                    RTL
.396991	22 57 62 39	jsl $396257	ret_success         JSL FDC_Motor_Off
.396995	e2 20		sep #$20	                SEP #$20        ; set A short
.396997	a9 00		lda #$00	                    LDA #0
.396999	85 00		sta $0320	                    STA BIOS_STATUS
.39699b	28		plp		                    PLP
.39699c	2b		pld		                    PLD
.39699d	ab		plb		                    PLB
.39699e	38		sec		                    SEC
.39699f	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3969a0					FDC_VBR_BEGIN
>3969a0	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3969a3	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3969ab	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3969ad	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3969ae	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3969b0	02				num_fat             .byte 2                 ; Number of FATs
>3969b1	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3969b3	40 0b				total_sectors       .word 2880              ; Total sectors
>3969b5	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3969b6	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3969b8	12 00				sec_per_track       .word 18                ; Sectors per track
>3969ba	02 00				num_head            .word 2                 ; Number of heads
>3969bc	00 00 00 00			ignore2             .dword 0
>3969c0	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>3969c4	00 00				ignore3             .word 0
>3969c6	29				boot_signature      .byte $29
>3969c7	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>3969cb	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3969d3	20 20 20
>3969d6	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3969de	80 40		bra $396a20	                    BRA vbr_start
>3969e0					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396a20					vbr_start
.396a20	c2 20		rep #$20	                REP #$20        ; set A long
.396a22	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a25	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396a29	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a2c	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396a30	22 1f 59 39	jsl $39591f	                    JSL IF_RUN              ; And try to execute the binary file
.396a34	b0 0c		bcs $396a42	                    BCS lock                ; If it returned success... lock up... I guess?
.396a36					error
.396a36	e2 20		sep #$20	                SEP #$20        ; set A short
.396a38	4b		phk		                    PHK                     ; Otherwise, print an error message
.396a39	ab		plb		                    PLB
.396a3a	62 08 00	per $396a45	                    PER message
.396a3d	fa		plx		                    PLX
.396a3e	22 1c 10 38	jsl $38101c	                    JSL PUTS
.396a42	ea		nop		lock                NOP                     ; And lock up
.396a43	80 fd		bra $396a42	                    BRA lock
>396a45	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396a4d	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396a5d	65 20 62 69 6e 61 72 79 2e 0d 00
.396a68					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396a68					IDE_TEST
.396a68	08		php		                PHP
.396a69	c2 20		rep #$20	                REP #$20        ; set A long
.396a6b	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396a6e	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a72	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a75	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a79	22 96 6b 39	jsl $396b96	                JSL IDE_IDENTIFY
.396a7d	b0 03		bcs $396a82	                BCS id_ok
.396a7f	82 ab 00	brl $396b2d	                BRL done
.396a82					id_ok
.396a82	c2 10		rep #$10	                REP #$10        ; set X long
.396a84	e2 20		sep #$20	                SEP #$20        ; set A short
.396a86	a0 28 00	ldy #$0028	                LDY #40
.396a89	a2 36 00	ldx #$0036	                LDX #27*2
.396a8c	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396a90	22 18 10 38	jsl $381018	                JSL PUTC
.396a94	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a98	22 18 10 38	jsl $381018	                JSL PUTC
.396a9c	e8		inx		                INX
.396a9d	e8		inx		                INX
.396a9e	88		dey		                DEY
.396a9f	88		dey		                DEY
.396aa0	d0 ea		bne $396a8c	                BNE pr_model
.396aa2	c2 10		rep #$10	                REP #$10        ; set X long
.396aa4	e2 20		sep #$20	                SEP #$20        ; set A short
.396aa6	a0 14 00	ldy #$0014	                LDY #20
.396aa9	a2 14 00	ldx #$0014	                LDX #10*2
.396aac	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396ab0	22 18 10 38	jsl $381018	                JSL PUTC
.396ab4	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396ab8	22 18 10 38	jsl $381018	                JSL PUTC
.396abc	e8		inx		                INX
.396abd	e8		inx		                INX
.396abe	88		dey		                DEY
.396abf	88		dey		                DEY
.396ac0	d0 ea		bne $396aac	                BNE pr_serial
.396ac2	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396ac6	c2 30		rep #$30	                REP #$30        ; set A&X long
.396ac8	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396acb	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396acf	a9 00 00	lda #$0000	                LDA #0
.396ad2	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396ad6	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396ad9	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396add	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396ae0	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396ae4	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396ae7	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396aea	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396aee	e8		inx		                INX
.396aef	e8		inx		                INX
.396af0	e0 00 02	cpx #$0200	                CPX #512
.396af3	d0 f5		bne $396aea	                BNE init_loop
.396af5	22 b5 6c 39	jsl $396cb5	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396af9	b0 06		bcs $396b01	                BCS read_sect1
.396afb	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396aff	80 2c		bra $396b2d	                BRA done
.396b01	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396b04	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b08	a9 00 00	lda #$0000	                LDA #0
.396b0b	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b0f	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396b12	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b16	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396b19	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b1d	22 24 6c 39	jsl $396c24	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396b21	b0 06		bcs $396b29	                BCS all_ok
.396b23	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b27	80 04		bra $396b2d	                BRA done
.396b29					all_ok
.396b29	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b2d	28		plp		done            PLP
.396b2e	6b		rtl		                RTL
.396b2f					IDE_INIT
.396b2f	e2 20		sep #$20	                SEP #$20        ; set A short
.396b31	20 52 6b	jsr $396b52	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396b34	a9 00		lda #$00	              LDA #$00
.396b36	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396b3a	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396b3e	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396b42	a9 01		lda #$01	              LDA #$01
.396b44	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396b48	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396b4a	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396b4e	20 70 6b	jsr $396b70	              JSR IDE_DRV_READY_NOTBUSY
.396b51	6b		rtl		              RTL
.396b52					IDE_DRIVE_BSY
.396b52	08		php		                PHP
.396b53	e2 20		sep #$20	                SEP #$20        ; set A short
.396b55	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396b59	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396b5b	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396b5d	f0 f6		beq $396b55	                BEQ loop
.396b5f	28		plp		                PLP
.396b60	60		rts		                RTS
.396b61					IDE_DRIVE_READY
.396b61	08		php		                PHP
.396b62	e2 20		sep #$20	                SEP #$20        ; set A short
.396b64	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396b68	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396b6a	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396b6c	d0 f6		bne $396b64	                BNE loop
.396b6e	28		plp		                PLP
.396b6f	60		rts		                RTS
.396b70					IDE_DRV_READY_NOTBUSY
.396b70	08		php		                PHP
.396b71	e2 20		sep #$20	                SEP #$20        ; set A short
.396b73	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396b77	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396b79	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396b7b	d0 f6		bne $396b73	                BNE loop                            ; No: keep waiting
.396b7d	28		plp		ret_success     PLP                                 ; Return success
.396b7e	38		sec		                SEC
.396b7f	60		rts		                RTS
.396b80	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396b84	28		plp		                PLP                                 ; Return failure
.396b85	18		clc		                CLC
.396b86	60		rts		                RTS
.396b87					IDE_NOT_DRQ
.396b87	08		php		                PHP
.396b88	e2 20		sep #$20	                SEP #$20        ; set A short
.396b8a	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396b8e	29 08		and #$08	                AND #IDE_STAT_DRQ
.396b90	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396b92	d0 f6		bne $396b8a	                BNE loop                ; No: keep waiting
.396b94	28		plp		                PLP
.396b95	60		rts		                RTS
.396b96					IDE_IDENTIFY
.396b96	5a		phy		                PHY
.396b97	8b		phb		                PHB
.396b98	0b		phd		                PHD
.396b99	08		php		                PHP
.396b9a	48		pha		                PHA             ; begin setdbr macro
.396b9b	08		php		                PHP
.396b9c	e2 20		sep #$20	                SEP #$20        ; set A short
.396b9e	a9 00		lda #$00	                LDA #0
.396ba0	48		pha		                PHA
.396ba1	ab		plb		                PLB
.396ba2	28		plp		                PLP
.396ba3	68		pla		                PLA             ; end setdbr macro
.396ba4	48		pha		                PHA             ; begin setdp macro
.396ba5	08		php		                PHP
.396ba6	c2 20		rep #$20	                REP #$20        ; set A long
.396ba8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396bab	5b		tcd		                TCD
.396bac	28		plp		                PLP
.396bad	68		pla		                PLA             ; end setdp macro
.396bae	e2 20		sep #$20	                SEP #$20        ; set A short
.396bb0	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396bb3	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396bb5	29 07		and #$07	                AND #$07
.396bb7	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396bb9	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396bbd	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396bc0	e2 20		sep #$20	                SEP #$20        ; set A short
.396bc2	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396bc4	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396bc8	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396bcc	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396bd0	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396bd4	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396bd6	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396bda	f0 29		beq $396c05	                BEQ no_media                    ; If 0: there is no drive
.396bdc	20 52 6b	jsr $396b52	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396bdf	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396be2	90 2d		bcc $396c11	                BCC ret_failure                 ; If an error occurred, return it
.396be4	c2 30		rep #$30	                REP #$30        ; set A&X long
.396be6	a0 00 00	ldy #$0000	                LDY #0
.396be9	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396bed	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396bef	c8		iny		                INY                             ; Move to the next position
.396bf0	c8		iny		                INY
.396bf1	c0 00 02	cpy #$0200	                CPY #512
.396bf4	d0 f3		bne $396be9	                BNE read_loop
.396bf6					ret_success
.396bf6	e2 20		sep #$20	                SEP #$20        ; set A short
.396bf8	a9 00		lda #$00	                LDA #0
.396bfa	85 00		sta $0320	                STA BIOS_STATUS
.396bfc	8d 06 03	sta $0306	                STA @w FDC_ST0
.396bff	28		plp		                PLP                             ; Return success
.396c00	2b		pld		                PLD
.396c01	ab		plb		                PLB
.396c02	7a		ply		                PLY
.396c03	38		sec		                SEC
.396c04	6b		rtl		                RTL
.396c05					no_media
.396c05	e2 20		sep #$20	                SEP #$20        ; set A short
.396c07	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396c09	80 0a		bra $396c15	                BRA pass_failure
.396c0b					not_ata
.396c0b	e2 20		sep #$20	                SEP #$20        ; set A short
.396c0d	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396c0f	80 04		bra $396c15	                BRA pass_failure
.396c11					ret_failure
.396c11	e2 20		sep #$20	                SEP #$20        ; set A short
.396c13	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c15	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396c17	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c1b	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c1e	28		plp		                PLP
.396c1f	2b		pld		                PLD
.396c20	ab		plb		                PLB
.396c21	7a		ply		                PLY
.396c22	18		clc		                CLC
.396c23	6b		rtl		                RTL
.396c24					IDE_GETBLOCK
.396c24	5a		phy		                PHY
.396c25	8b		phb		                PHB
.396c26	0b		phd		                PHD
.396c27	08		php		                PHP
.396c28	48		pha		                PHA             ; begin setdbr macro
.396c29	08		php		                PHP
.396c2a	e2 20		sep #$20	                SEP #$20        ; set A short
.396c2c	a9 00		lda #$00	                LDA #0
.396c2e	48		pha		                PHA
.396c2f	ab		plb		                PLB
.396c30	28		plp		                PLP
.396c31	68		pla		                PLA             ; end setdbr macro
.396c32	48		pha		                PHA             ; begin setdp macro
.396c33	08		php		                PHP
.396c34	c2 20		rep #$20	                REP #$20        ; set A long
.396c36	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c39	5b		tcd		                TCD
.396c3a	28		plp		                PLP
.396c3b	68		pla		                PLA             ; end setdp macro
.396c3c	e2 20		sep #$20	                SEP #$20        ; set A short
.396c3e	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c41	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c43	29 07		and #$07	                AND #$07
.396c45	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396c47	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c4b	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c4e	e2 20		sep #$20	                SEP #$20        ; set A short
.396c50	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396c52	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c56	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396c58	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c5c	a5 03		lda $0323	                LDA BIOS_LBA+1
.396c5e	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c62	a5 04		lda $0324	                LDA BIOS_LBA+2
.396c64	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c68	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396c6a	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396c6e	ea		nop		                NOP                             ; Wait about 500ns
.396c6f	ea		nop		                NOP
.396c70	ea		nop		                NOP
.396c71	ea		nop		                NOP
.396c72	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c75	90 2b		bcc $396ca2	                BCC ret_failure                 ; If an error occurred, return it
.396c77	e2 20		sep #$20	                SEP #$20        ; set A short
.396c79	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396c7d	a0 00 00	ldy #$0000	                LDY #0
.396c80	c2 20		rep #$20	                REP #$20        ; set A long
.396c82	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c86	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c88	c8		iny		                INY                             ; Move to the next position
.396c89	c8		iny		                INY
.396c8a	c0 00 02	cpy #$0200	                CPY #512
.396c8d	d0 f3		bne $396c82	                BNE read_loop
.396c8f	ea		nop		                NOP                             ; Wait about 500ns
.396c90	ea		nop		                NOP
.396c91	ea		nop		                NOP
.396c92	ea		nop		                NOP
.396c93					ret_success
.396c93	e2 20		sep #$20	                SEP #$20        ; set A short
.396c95	a9 00		lda #$00	                LDA #0
.396c97	85 00		sta $0320	                STA BIOS_STATUS
.396c99	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c9c	28		plp		                PLP                             ; Return success
.396c9d	2b		pld		                PLD
.396c9e	ab		plb		                PLB
.396c9f	7a		ply		                PLY
.396ca0	38		sec		                SEC
.396ca1	6b		rtl		                RTL
.396ca2					ret_failure
.396ca2	e2 20		sep #$20	                SEP #$20        ; set A short
.396ca4	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396ca8	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cab	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cad	85 00		sta $0320	                STA BIOS_STATUS
.396caf	28		plp		                PLP
.396cb0	2b		pld		                PLD
.396cb1	ab		plb		                PLB
.396cb2	7a		ply		                PLY
.396cb3	18		clc		                CLC
.396cb4	6b		rtl		                RTL
.396cb5					IDE_PUTBLOCK
.396cb5	5a		phy		                PHY
.396cb6	8b		phb		                PHB
.396cb7	0b		phd		                PHD
.396cb8	08		php		                PHP
.396cb9	48		pha		                PHA             ; begin setdbr macro
.396cba	08		php		                PHP
.396cbb	e2 20		sep #$20	                SEP #$20        ; set A short
.396cbd	a9 00		lda #$00	                LDA #0
.396cbf	48		pha		                PHA
.396cc0	ab		plb		                PLB
.396cc1	28		plp		                PLP
.396cc2	68		pla		                PLA             ; end setdbr macro
.396cc3	48		pha		                PHA             ; begin setdp macro
.396cc4	08		php		                PHP
.396cc5	c2 20		rep #$20	                REP #$20        ; set A long
.396cc7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396cca	5b		tcd		                TCD
.396ccb	28		plp		                PLP
.396ccc	68		pla		                PLA             ; end setdp macro
.396ccd	e2 20		sep #$20	                SEP #$20        ; set A short
.396ccf	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396cd2	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396cd4	29 07		and #$07	                AND #$07
.396cd6	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396cd8	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396cdc	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396cdf	e2 20		sep #$20	                SEP #$20        ; set A short
.396ce1	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396ce3	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396ce7	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396ce9	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396ced	a5 03		lda $0323	                LDA BIOS_LBA+1
.396cef	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396cf3	a5 04		lda $0324	                LDA BIOS_LBA+2
.396cf5	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396cf9	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396cfb	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396cff	ea		nop		                NOP                             ; Wait about 500ns
.396d00	ea		nop		                NOP
.396d01	ea		nop		                NOP
.396d02	ea		nop		                NOP
.396d03	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d06	90 33		bcc $396d3b	                BCC ret_failure                 ; If an error occurred, return it
.396d08	c2 30		rep #$30	                REP #$30        ; set A&X long
.396d0a	a0 00 00	ldy #$0000	                LDY #0
.396d0d	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396d0f	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396d13	c8		iny		                INY                             ; Move to the next position
.396d14	c8		iny		                INY
.396d15	c0 00 02	cpy #$0200	                CPY #512
.396d18	d0 f3		bne $396d0d	                BNE read_loop
.396d1a	ea		nop		                NOP                             ; Wait about 500ns
.396d1b	ea		nop		                NOP
.396d1c	ea		nop		                NOP
.396d1d	ea		nop		                NOP
.396d1e	20 70 6b	jsr $396b70	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d21	90 18		bcc $396d3b	                BCC ret_failure                 ; If an error occurred, return it
.396d23	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396d27	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396d2a	d0 0f		bne $396d3b	                BNE ret_failure                 ; If error: return failure
.396d2c					ret_success
.396d2c	e2 20		sep #$20	                SEP #$20        ; set A short
.396d2e	a9 00		lda #$00	                LDA #0
.396d30	85 00		sta $0320	                STA BIOS_STATUS
.396d32	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d35	28		plp		                PLP                             ; Return success
.396d36	2b		pld		                PLD
.396d37	ab		plb		                PLB
.396d38	7a		ply		                PLY
.396d39	38		sec		                SEC
.396d3a	6b		rtl		                RTL
.396d3b					ret_failure
.396d3b	e2 20		sep #$20	                SEP #$20        ; set A short
.396d3d	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d41	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d44	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d46	85 00		sta $0320	                STA BIOS_STATUS
.396d48	28		plp		                PLP
.396d49	2b		pld		                PLD
.396d4a	ab		plb		                PLB
.396d4b	7a		ply		                PLY
.396d4c	18		clc		                CLC
.396d4d	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396d4e					KERNEL_DATA
>396d4e	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396d56	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396d66	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396d76	58 20 0d
>396d79	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396d81	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396d91	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396da1	20 20 0d
>396da4	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396dac	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396dbc	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396dcc	20 20 0d
>396dcf	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396dd7	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396de7	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396df7	20 20 0d
>396dfa	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396e02	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396e12	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396e22	20 20 0d
>396e25	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396e2d	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396e3d	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396e4d	0d
>396e4e	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396e56	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396e66	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396e73	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+860 (2020-08-24)"
>396e7b	6c 70 68 61 2b 38 36 30 20 28 32 30 32 30 2d 30
>396e8b	38 2d 32 34 29

;******  Return to file: src\kernel.asm

>396e90	0d 00				                .text $0D,$00
.396e92					old_pc_style_stat
>396e92	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e9a	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396eaa	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396eba	fd fd
>396ebc	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ec4	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396ed4	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ee4	fd fd
>396ee6	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396eee	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396efe	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f0e	fd fd
>396f10	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f18	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f28	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f38	fd fd
>396f3a	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f42	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f52	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f62	fd fd
>396f64	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396f68	00 00 80 ff			                .text $00, $00, $80, $FF
>396f6c	00 80 00 ff			                .text $00, $80, $00, $FF
>396f70	80 00 00 ff			                .text $80, $00, $00, $FF
>396f74	00 80 80 ff			                .text $00, $80, $80, $FF
>396f78	80 80 00 ff			                .text $80, $80, $00, $FF
>396f7c	80 00 80 ff			                .text $80, $00, $80, $FF
>396f80	80 80 80 ff			                .text $80, $80, $80, $FF
>396f84	00 45 ff ff			                .text $00, $45, $FF, $FF
>396f88	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f8c	00 00 20 ff			                .text $00, $00, $20, $FF
>396f90	00 20 00 ff			                .text $00, $20, $00, $FF
>396f94	20 00 00 ff			                .text $20, $00, $00, $FF
>396f98	20 20 20 ff			                .text $20, $20, $20, $FF
>396f9c	40 40 40 ff			                .text $40, $40, $40, $FF
>396fa0	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396fa4	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396fa8	00 00 80 ff			                .text $00, $00, $80, $FF
>396fac	00 80 00 ff			                .text $00, $80, $00, $FF
>396fb0	80 00 00 ff			                .text $80, $00, $00, $FF
>396fb4	00 20 20 ff			                .text $00, $20, $20, $FF
>396fb8	20 20 00 ff			                .text $20, $20, $00, $FF
>396fbc	20 00 20 ff			                .text $20, $00, $20, $FF
>396fc0	20 20 20 ff			                .text $20, $20, $20, $FF
>396fc4	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396fc8	13 45 8b ff			                .text $13, $45, $8B, $FF
>396fcc	00 00 20 ff			                .text $00, $00, $20, $FF
>396fd0	00 20 00 ff			                .text $00, $20, $00, $FF
>396fd4	40 00 00 ff			                .text $40, $00, $00, $FF
>396fd8	10 10 10 ff			                .text $10, $10, $10, $FF
>396fdc	40 40 40 ff			                .text $40, $40, $40, $FF
>396fe0	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396fe4	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396fec	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396ffc	00
>396ffd	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397005	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397015	00
>397016	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>39701e	20 45 78 65 63 75 74 65 64 2e 0d 00
>39702a	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397032	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397042	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>39704a	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>39705a	64 2e 2e 2e 0d 00
>397060	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>397068	20 50 72 65 73 65 6e 74 0d 00
>397072	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>39707a	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>39708a	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39709a	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3970a2	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3970ae	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3970b6	45 44 2e 00
>3970ba	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3970c2	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3970cf	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3970d7	50 72 65 73 65 6e 74 3a 00
>3970e0	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3970e8	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3970f8	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397106	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39710e	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>39711e	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>39712b	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397133	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>397143	72 64 2e 00
>397147	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>39714f	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39715f	49 44 45 20 64 72 69 76 65 2e 00
>39716a	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397172	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397182	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397190	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397198	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>3971a7	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3971af	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3971b7	52 4f 52 00
>3971bb	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3971c3	38 39 41 42 43 44 45 46 00
>3971cc					.align 256
>397200	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397228	27 60 00 5c 7a 78 63 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397238	00 20 00 81 82 83 84 85
>397240	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397248	11 00 00 9d 00 1d 00 00
>397250	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	8c 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397288	26 2a 28 29 5f 2b 08 09
>397290	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397298	4f 50 7b 7d 0d 00 41 53
>3972a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3972a8	22 7e 00 5c 5a 58 43 56
>3972b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397318	0f 10 5b 5d 0d 00 01 13
>397320	04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397328	27 00 00 5c 1a 18 03 16
>397330	02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397388	37 38 39 30 2d 3d 08 09
>397390	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397398	6f 70 5b 5d 0d 00 61 73
>3973a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3973a8	27 60 00 5c 7a 78 63 76
>3973b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397418	6f 70 5b 5d 0d 00 61 73
>397420	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397428	27 60 00 5c 7a 78 63 76
>397430	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397488	00 00 00 00 00 00 00 00
>397490	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397498	00 00 00 00 00 00 00 00
>3974a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3974a8	00 00 00 00 00 00 00 00
>3974b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 00 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3974c8	11 00 00 9d 00 1d 00 05
>3974d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500					.align 256
>397500	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397508	34 37 3a 3d 3f 41 44 46
>397510	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397518	57 58 5a 5b 5d 5e 60 61
>397520	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397528	6d 6f 70 71 72 73 75 76
>397530	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397538	80 81 82 83 84 85 86 87
>397540	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397548	8f 90 91 92 93 93 94 95
>397550	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397558	9d 9e 9e 9f a0 a1 a2 a2
>397560	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397568	a9 aa ab ab ac ad ae ae
>397570	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397578	b5 b5 b6 b7 b7 b8 b9 b9
>397580	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397588	bf c0 c0 c1 c2 c2 c3 c4
>397590	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397598	c9 ca ca cb cb cc cd cd
>3975a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3975a8	d2 d3 d4 d4 d5 d5 d6 d6
>3975b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3975b8	db dc dc dd de de df df
>3975c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3975c8	e4 e4 e5 e5 e6 e6 e7 e7
>3975d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3975d8	ec ec ed ed ee ee ef ef
>3975e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3975e8	f4 f4 f5 f5 f6 f6 f7 f7
>3975f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3975f8	fb fc fc fd fd fe fe ff
>397600					.align 256
>397600	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397608	25 27 2a 2c 2e 30 32 34
>397610	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397618	44 46 47 49 4a 4c 4d 4f
>397620	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397628	5b 5c 5d 5e 60 61 62 63
>397630	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397638	6d 6e 70 71 72 73 74 75
>397640	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397648	7e 7f 80 81 82 83 84 84
>397650	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397658	8d 8e 8e 8f 90 91 92 93
>397660	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397668	9a 9b 9c 9d 9e 9f 9f a0
>397670	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397678	a7 a8 a9 aa aa ab ac ad
>397680	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397688	b3 b4 b5 b6 b6 b7 b8 b8
>397690	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397698	bf bf c0 c1 c2 c2 c3 c4
>3976a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3976a8	ca ca cb cc cc cd ce ce
>3976b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3976b8	d4 d5 d6 d6 d7 d7 d8 d9
>3976c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3976c8	de df e0 e0 e1 e1 e2 e3
>3976d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3976d8	e8 e9 e9 ea ea eb ec ec
>3976e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3976e8	f1 f2 f3 f3 f4 f4 f5 f5
>3976f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3976f8	fb fb fc fc fd fd fe ff
>397700					.align 256
>397700	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397708	83 dd ce 39 cd c5 3b 15
>397710	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397718	87 12 31 65 89 27 88 42
>397720	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397728	94 ce 56 ec fe da 58 c9
>397730	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397738	d0 10 2c b2 4b ea 32 61
>397740	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397748	a1 e6 ca 2d b3 ce b0 79
>397750	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397758	5f e3 fb bd 15 2e be f5
>397760	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397768	8d 8f 2c 80 0a 5e 99 36
>397770	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397778	13 52 44 2f e3 ef 44 a2
>397780	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397788	be 23 02 58 0a 52 5e b4
>397790	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397798	d5 cf 3e df c4 9e da bb
>3977a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3977a8	77 7d b1 3b 4a 68 35 6e
>3977b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3977b8	b5 8f 44 63 55 6f e1 50
>3977c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3977c8	57 74 b9 bd 05 14 50 eb
>3977d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3977d8	44 bc ec db 22 58 fc be
>3977e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3977e8	24 aa 82 11 5c 9f 43 4d
>3977f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3977f8	3e 3d 66 7e 0a 1c 6b 74
>397800					.align 16
>397800	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397808	01 01 01 00 00 00 00 00
>397810	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397818	ff ff ff 01 00 00 00 00
>397820	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397828	01 55 ff ff 01 00 00 00
>397830	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397838	ff ff ff ff 01 00 00 00
>397840	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397848	ff ff 01 ff ff 01 00 00
>397850	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397858	01 ff ff 01 ff 01 00 00
>397860	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397868	ff 01 ff ff ff 01 00 00
>397870	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397878	ff ff ff ff ff 01 01 00
>397880	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397888	ff ff ff ff 01 ff ff 01
>397890	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397898	ff ff ff ff ff ff ff 01
>3978a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3978a8	55 55 01 ff ff 55 01 00
>3978b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3978b8	01 01 55 ff 55 01 00 00
>3978c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3978c8	01 55 55 55 01 00 00 00
>3978d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3978d8	01 55 55 01 00 00 00 00
>3978e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3978e8	00 01 01 00 00 00 00 00
>3978f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3978f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 59 69 3a 5c 6b 4f 3a		.binary "binaries/basic816.bin"
>3a0008	5c 10 21 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 6b 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a01f8	8f 24 02 af 60 08 e2 20 48 48 a9 00 22 3c 10 00
>3a0208	68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60
>3a0218	08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00
>3a0228	af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2
>3a0238	20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00
>3a0248	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0258	a5 b4 1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4
>3a0268	2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0278	28 e2 20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0
>3a0288	07 af b3 08 00 20 28 00 af b2 08 00 29 80 f0 07
>3a0298	af b3 08 00 20 fd 01 af b2 08 00 29 40 f0 14 af
>3a02a8	b3 08 00 20 18 02 af b3 08 00 c9 0d d0 05 a9 0a
>3a02b8	20 18 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06
>3a02c8	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a02d8	4a 4a 4a 4a 4a 20 ea 02 68 29 ff 00 20 ea 02 68
>3a02e8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 01 03
>3a02f8	68 20 01 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a0308	aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da
>3a0318	5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a
>3a0328	48 ab bd 00 00 f0 06 20 fd 01 e8 80 f5 c2 30 2b
>3a0338	ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a0348	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0358	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0368	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0378	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0388	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0398	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a03a8	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a03b8	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a03c8	00 f0 09 20 b2 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a03d8	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a03e8	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03f8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a0408	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0418	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a0428	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a0438	00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0448	08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f
>3a0458	10 01 00 af 14 01 00 85 21 64 23 af 16 01 00 85
>3a0468	27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2
>3a0478	20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02
>3a0488	60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48
>3a0498	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a04a8	29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20 a5 25
>3a04b8	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04c8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a04d8	e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20
>3a04e8	a5 23 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04f8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a0508	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0518	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a0528	20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0
>3a0538	29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9
>3a0548	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a0558	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a0568	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a0578	00 20 d0 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9
>3a0588	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a0598	00 c9 26 f0 44 e2 20 a7 00 20 57 03 90 76 20 d6
>3a05a8	03 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05b8	69 00 00 85 23 20 75 1b 80 db 08 c2 20 48 a9 00
>3a05c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a05d8	00 20 d0 18 e2 20 dc d2 08 20 75 1b a7 00 c9 48
>3a05e8	f0 04 c9 68 d0 d4 20 75 1b e2 20 a7 00 20 68 03
>3a05f8	90 22 20 89 03 c2 20 06 21 26 23 06 21 26 23 06
>3a0608	21 26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20
>3a0618	75 1b 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8
>3a0628	e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0638	88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0648	00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85
>3a0658	02 20 96 1b a7 00 20 57 03 90 0c 20 81 05 c2 20
>3a0668	a5 21 85 d5 20 96 1b c2 20 a5 00 85 18 e2 20 a5
>3a0678	02 85 1a 20 8f 06 e2 20 20 00 07 c9 00 f0 05 20
>3a0688	89 08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a
>3a0698	85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a06a8	00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a06b8	c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a06c8	c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a06d8	0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a06e8	75 1b 80 b3 a7 00 c9 3a d0 03 20 75 1b a9 03 85
>3a06f8	1c a9 8e 20 89 08 28 60 08 0b 08 c2 20 48 a9 00
>3a0708	08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 3e 08 a5
>3a0718	1c d0 03 4c a3 07 c2 20 a5 18 85 00 e2 20 a5 1a
>3a0728	85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0738	c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0
>3a0748	05 20 c5 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00
>3a0758	c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04
>3a0768	20 87 42 b0 09 e2 20 20 d5 07 c9 00 d0 11 c2 20
>3a0778	a5 00 85 04 e2 20 a5 02 85 06 20 75 1b 80 a9 c9
>3a0788	81 d0 18 20 1f 06 c9 00 f0 14 89 80 10 0b 20 2a
>3a0798	09 c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2
>3a07a8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a07b8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20
>3a07c8	20 75 1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2
>3a07d8	30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 54 09
>3a07e8	85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00
>3a07f8	b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85
>3a0808	0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 b2 03
>3a0818	d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28
>3a0828	60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69
>3a0838	00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 c2 30 a9 54 09 85 08 a9 3a 00 85 0a 64
>3a0858	0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c
>3a0868	90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a
>3a0878	69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28
>3a0888	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87
>3a0898	00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00
>3a08a8	85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2
>3a08b8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69
>3a08d8	54 09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08e8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a08f8	20 cd 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08
>3a0908	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0918	a9 3a 48 ab 68 28 c2 30 20 cd 08 bd 04 00 2b ab
>3a0928	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0938	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cd 08
>3a0948	bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0
>3a0958	a3 21 00 00 03 01 12 d0 e2 21 00 00 02 01 14 d0
>3a0968	f0 21 00 00 02 01 16 d0 09 22 00 00 02 03 18 d0
>3a0978	1c 22 00 00 00 01 1c d0 00 00 00 00 04 01 1e d0
>3a0988	5e 22 00 00 04 01 20 d0 94 22 00 00 04 01 22 d0
>3a0998	79 22 00 00 05 03 24 d0 4d 22 00 00 06 03 28 d0
>3a09a8	2f 22 00 00 07 02 2c d0 3e 22 00 00 ff 01 2f d0
>3a09b8	00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33 d0
>3a09c8	80 34 00 00 20 05 37 d0 85 38 00 00 20 03 3d d0
>3a09d8	d0 37 00 00 20 04 41 d0 70 37 00 00 20 03 46 d0
>3a09e8	67 37 00 00 20 02 4a d0 ff 36 00 00 50 04 4d d0
>3a09f8	00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57 d0
>3a0a08	42 36 00 00 20 06 5d d0 bb 36 00 00 20 03 64 d0
>3a0a18	97 34 00 00 50 02 68 d0 00 00 00 00 50 04 6b d0
>3a0a28	00 00 00 00 20 04 70 d0 8b 35 00 00 20 02 75 d0
>3a0a38	91 34 00 00 20 04 78 d0 94 34 00 00 50 05 7d d0
>3a0a48	00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89 d0
>3a0a58	8e 34 00 00 20 03 8e d0 c6 37 00 00 20 04 92 d0
>3a0a68	61 34 00 00 20 04 97 d0 f1 33 00 00 20 05 9c d0
>3a0a78	87 33 00 00 20 05 a2 d0 14 33 00 00 20 03 a8 d0
>3a0a88	10 33 00 00 20 04 ac d0 f1 31 00 00 20 04 b1 d0
>3a0a98	03 33 00 00 20 07 b6 d0 07 33 00 00 20 03 be d0
>3a0aa8	44 31 00 00 20 04 c2 d0 ad 30 00 00 04 02 c7 d0
>3a0ab8	e7 22 00 00 04 02 ca d0 ca 22 00 00 04 02 cd d0
>3a0ac8	af 22 00 00 30 01 d0 d0 1f 3a 00 00 30 03 d2 d0
>3a0ad8	39 3e 00 00 30 04 d6 d0 89 3e 00 00 30 05 db d0
>3a0ae8	1a 3f 00 00 30 05 e1 d0 cc 3e 00 00 30 04 e7 d0
>3a0af8	59 3f 00 00 30 03 ec d0 ae 3f 00 00 30 03 f0 d0
>3a0b08	f3 3f 00 00 30 03 f4 d0 7c 40 00 00 30 03 f8 d0
>3a0b18	05 41 00 00 30 03 fc d0 35 41 00 00 30 04 00 d1
>3a0b28	a8 3d 00 00 30 03 05 d1 47 3d 00 00 30 04 09 d1
>3a0b38	f6 3c 00 00 30 03 0e d1 a0 3c 00 00 30 05 12 d1
>3a0b48	d7 3b 00 00 30 06 18 d1 f6 3a 00 00 30 04 1f d1
>3a0b58	41 3a 00 00 10 03 24 d1 c3 41 00 00 10 03 28 d1
>3a0b68	8e 41 00 00 10 04 2c d1 4f 4b 00 00 10 04 31 d1
>3a0b78	da 41 00 00 10 03 36 d1 76 48 00 00 20 05 3a d1
>3a0b88	21 4a 00 00 10 04 40 d1 fc 4a 00 00 20 05 45 d1
>3a0b98	06 4c 00 00 20 03 4b d1 25 4d 00 00 10 04 4f d1
>3a0ba8	92 4c 00 00 20 06 54 d1 9b 4d 00 00 20 04 5b d1
>3a0bb8	b6 4e 00 00 10 07 60 d1 8b 41 00 00 20 03 68 d1
>3a0bc8	39 30 00 00 20 05 6c d1 6b 2f 00 00 20 09 72 d1
>3a0bd8	69 24 00 00 20 09 7c d1 04 24 00 00 20 0a 86 d1
>3a0be8	32 24 00 00 20 07 91 d1 71 23 00 00 30 08 99 d1
>3a0bf8	4a 39 00 00 20 07 a2 d1 06 23 00 00 30 08 aa d1
>3a0c08	b7 39 00 00 20 08 b3 d1 7a 25 00 00 20 08 bc d1
>3a0c18	d6 24 00 00 20 06 c5 d1 aa 26 00 00 20 09 cc d1
>3a0c28	a8 27 00 00 20 04 d6 d1 3a 29 00 00 20 04 db d1
>3a0c38	8f 29 00 00 20 04 e0 d1 04 2a 00 00 20 06 e5 d1
>3a0c48	b9 2a 00 00 20 08 ec d1 46 2b 00 00 20 0a f5 d1
>3a0c58	7a 2b 00 00 20 07 00 d2 9d 2c 00 00 20 07 08 d2
>3a0c68	2b 2d 00 00 20 08 10 d2 a7 2d 00 00 20 06 19 d2
>3a0c78	e6 2d 00 00 20 07 20 d2 a5 2e 00 00 50 06 28 d2
>3a0c88	00 00 00 00 50 04 2f d2 00 00 00 00 00 00 00 00
>3a0c98	00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0ca8	c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64
>3a0cb8	b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20
>3a0cc8	85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12
>3a0cd8	48 a5 10 48 20 74 0d b0 03 20 f8 0c 20 00 0f c2
>3a0ce8	20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60
>3a0cf8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d
>3a0d08	ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5
>3a0d18	ba e9 00 85 c0 20 00 0f e2 20 a5 e8 a0 00 00 97
>3a0d28	c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9
>3a0d38	00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97
>3a0d48	c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85
>3a0d58	b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85
>3a0d68	b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2
>3a0d78	20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7
>3a0d88	e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11
>3a0d98	c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b 28 18
>3a0da8	60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7
>3a0db8	85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69
>3a0dc8	00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5
>3a0dd8	0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5
>3a0de8	0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0
>3a0df8	57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7
>3a0e08	85 bd 4c b1 0e c2 20 a5 0c 69 08 00 85 10 e2 20
>3a0e18	a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08
>3a0e28	c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20
>3a0e38	a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8
>3a0e48	c8 b7 cd 85 c9 4c 8e 0d c2 20 a0 02 00 b7 c7 97
>3a0e58	cd e2 20 c8 c8 b7 c7 97 cd 4c b1 0e c2 20 a0 05
>3a0e68	00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0
>3a0e78	02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20
>3a0e88	a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb
>3a0e98	e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97
>3a0ea8	cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2
>3a0eb8	20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85
>3a0ec8	b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e
>3a0ed8	97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8
>3a0ee8	97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00
>3a0ef8	a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be e9 08
>3a0f08	00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20
>3a0f18	a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20
>3a0f28	a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5
>3a0f38	c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0
>3a0f48	01 00 b7 c1 3a 97 c1 d0 03 20 58 0f 28 60 00 ea
>3a0f58	08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85
>3a0f68	bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8
>3a0f78	c8 e2 20 97 c1 4c 3f 10 e2 20 a5 bd c5 c3 90 28
>3a0f88	c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97
>3a0f98	c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2
>3a0fa8	20 a5 c3 85 bd 4c 3f 10 c2 20 a5 bb 85 08 e2 20
>3a0fb8	a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0
>3a0fc8	0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02
>3a0fd8	00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5
>3a0fe8	c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08 4c 3f
>3a0ff8	10 c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08
>3a1008	f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7
>3a1018	08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0
>3a1028	02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1
>3a1038	c2 20 a0 02 00 97 c1 20 44 10 28 60 08 c2 20 a5
>3a1048	bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2
>3a1058	20 a5 c3 d0 03 4c e7 10 c2 20 a0 02 00 b7 c1 85
>3a1068	0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1
>3a1078	85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10
>3a1088	d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7
>3a1098	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85
>3a10a8	c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1
>3a10b8	85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7
>3a10c8	0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00
>3a10d8	b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 60 10 28
>3a10e8	60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85 15 e2 20
>3a10f8	a5 e1 85 16 c5 ba 90 29 f0 08 c2 20 a5 14 c5 b8
>3a1108	90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03
>3a1118	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a1128	08 28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97 14
>3a1138	c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5 21 49 ff
>3a1148	ff 69 01 00 85 21 a5 23 49 ff ff 69 00 00 85 23
>3a1158	a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8 06 21 26
>3a1168	23 a5 10 65 10 85 10 a5 12 65 12 85 12 ca 10 ed
>3a1178	d8 e2 20 20 e9 10 a0 00 00 a5 0c f0 04 a9 2d 80
>3a1188	02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0 4a 4a 4a
>3a1198	4a 20 2b 11 b5 10 29 0f 20 2b 11 ca 10 eb c0 01
>3a11a8	00 d0 0c a9 20 87 14 a0 01 00 a9 30 97 14 c8 a9
>3a11b8	00 97 14 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd
>3a11c8	00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20
>3a11d8	48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2
>3a11e8	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 84 0c
>3a11f8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a1208	20 bf 11 c2 20 98 38 65 0c aa e2 20 a9 02 20 c4
>3a1218	0c c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00
>3a1228	08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21
>3a1238	bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20
>3a1248	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 bd 00 00
>3a1258	97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20
>3a1268	a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08
>3a1278	c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2
>3a1288	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 98 aa
>3a1298	e8 e2 20 a9 02 20 c4 0c c2 20 a5 be 85 08 e2 20
>3a12a8	a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7
>3a12b8	a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9 00 85 24
>3a12c8	ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05
>3a12d8	c8 80 f9 84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30
>3a12e8	0d f0 0b c4 8d b0 12 a5 27 d0 0e 4c 4d 13 20 e9
>3a12f8	10 e2 20 a9 00 87 14 80 39 20 e9 10 c2 30 18 a5
>3a1308	21 65 27 85 21 a5 23 69 00 00 85 23 a0 00 00 e2
>3a1318	20 a7 21 97 14 f0 1b c2 20 18 a5 21 69 01 00 85
>3a1328	21 a5 23 69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00
>3a1338	97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a1348	85 25 20 74 12 28 60 48 5a 0b 08 08 c2 20 48 a9
>3a1358	00 08 5b 68 28 c2 30 a9 00 00 85 00 85 18 a9 36
>3a1368	00 85 02 85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0
>3a1378	0f c5 53 90 10 c5 57 f0 02 b0 05 20 b1 13 80 e5
>3a1388	28 2b 7a 68 60 20 52 1c 80 db 08 c2 20 48 a9 00
>3a1398	08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff
>3a13a8	00 20 d0 18 e2 20 dc d2 08 08 c2 30 85 21 64 23
>3a13b8	20 3a 11 a5 14 1a 85 21 a5 16 85 23 20 fa 38 18
>3a13c8	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20
>3a13d8	a9 20 20 18 00 c2 20 20 f0 13 90 fb e2 20 a9 0d
>3a13e8	20 18 00 20 52 1c 28 60 08 0b 8b 08 c2 20 48 a9
>3a13f8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a1408	20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20
>3a1418	29 7f 00 0a 0a 0a 18 69 54 09 85 08 a9 3a 00 69
>3a1428	00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02
>3a1438	00 b7 08 aa 20 c0 02 c2 20 20 75 1b ab 2b 28 18
>3a1448	60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff
>3a1458	7f 85 1f a9 ff ff 85 21 85 23 85 27 85 29 e2 20
>3a1468	85 25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1478	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a1488	a4 1d bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20
>3a1498	bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1d 7a
>3a14a8	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a14b8	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5
>3a14c8	1d 69 05 00 85 1d a8 b9 00 00 9d 00 00 b9 02 00
>3a14d8	9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab
>3a14e8	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a14f8	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4
>3a1508	1f 99 00 00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08
>3a1518	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1528	ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00
>3a1538	c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20
>3a1548	eb 14 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a1558	28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f
>3a1568	ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1578	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a1588	dc d2 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08
>3a1598	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a15a8	10 a4 1f c0 ff 7f f0 11 20 dd 08 85 0c b9 01 00
>3a15b8	20 dd 08 c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18
>3a15c8	60 c2 20 68 ab 2b 28 38 60 4c 81 05 08 e2 20 a9
>3a15d8	00 8f 00 4d 00 a2 01 00 20 7e 17 20 dd 04 c2 20
>3a15e8	a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f
>3a15f8	00 4d 00 e8 e8 20 96 1b e2 20 a7 00 c9 8d f0 09
>3a1608	c9 2c d0 0a 20 75 1b 80 cf 20 75 1b 28 60 08 c2
>3a1618	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a1628	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20
>3a1638	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a1648	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 05 45
>3a1658	90 23 e2 20 a5 e8 29 80 d0 06 20 5b 43 4c 7b 16
>3a1668	e2 20 a9 8c 20 82 1c 20 42 15 20 d4 15 20 ec 47
>3a1678	20 4c 15 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1688	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a1698	20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a16a8	e2 20 c2 10 20 75 1b a0 00 00 b7 00 f0 24 c9 22
>3a16b8	f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20 c4
>3a16c8	0c a0 00 00 c4 0c f0 29 a7 00 97 be c8 20 75 1b
>3a16d8	80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a16e8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a16f8	08 a9 00 97 be c2 20 a5 be 85 21 e2 20 a5 c0 85
>3a1708	23 a9 02 85 25 20 75 1b 2b 28 60 08 e2 20 a7 00
>3a1718	c2 20 29 ff 00 20 07 09 85 2d 20 42 15 08 e2 20
>3a1728	48 a9 00 48 ab 68 28 20 37 17 20 4c 15 28 60 20
>3a1738	75 1b 6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9
>3a1748	00 08 5b 68 28 c2 30 a2 27 08 20 ac 14 a2 21 08
>3a1758	20 ac 14 20 14 15 20 07 09 85 2d 08 e2 20 48 a9
>3a1768	00 48 ab 68 28 20 7b 17 a2 21 08 20 6e 14 68 ab
>3a1778	2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68
>3a1788	28 08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20
>3a1798	a7 00 d0 03 4c 41 18 30 33 c9 20 d0 03 4c 3b 18
>3a17a8	c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03
>3a17b8	4c 54 18 c9 5b b0 07 c9 41 90 03 4c 60 18 c9 7b
>3a17c8	b0 07 c9 61 90 03 4c 60 18 4c 41 18 c9 8c f0 40
>3a17d8	c9 8d f0 41 20 2a 09 c9 30 d0 0c 20 13 17 a2 21
>3a17e8	08 20 6e 14 4c 96 17 c9 00 d0 4e a7 00 a6 1f e0
>3a17f8	ff 7f f0 05 20 8b 15 b0 12 20 eb 14 80 35 c2 20
>3a1808	20 d1 15 a2 21 08 20 6e 14 80 83 20 3d 17 80 dd
>3a1818	20 eb 14 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f
>3a1828	b9 01 00 c9 01 f0 3d c9 8c f0 05 20 3d 17 80 ee
>3a1838	20 14 15 20 75 1b 4c 96 17 a6 1f e0 ff 7f b0 24
>3a1848	bd 01 00 c9 01 f0 1d 20 3d 17 80 ed 20 9c 16 a2
>3a1858	21 08 20 6e 14 4c 96 17 20 54 16 a2 21 08 20 6e
>3a1868	14 4c 96 17 a2 21 08 20 ac 14 fa 28 60 08 0b 8b
>3a1878	08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00
>3a1888	08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08
>3a1898	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 31 c6
>3a18a8	31 c6 31 2b 28 60 08 c2 30 29 ff 00 20 97 18 28
>3a18b8	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6
>3a18c8	31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2 20 48 a9
>3a18d8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a18e8	20 85 21 a9 00 00 85 23 e2 20 a9 00 85 25 85 e8
>3a18f8	a9 3a 85 e7 c2 20 a9 2a 19 85 e5 20 a2 44 c2 20
>3a1908	a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85 25 85 e8
>3a1918	a9 3a 85 e7 c2 20 a9 2e 19 85 e5 20 a2 44 28 2b
>3a1928	ab 60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 33
>3a1938	02 af d1 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48
>3a1948	a9 3a 48 ab 68 28 be 84 19 20 c0 02 c2 20 a5 d5
>3a1958	f0 27 a2 b2 19 20 c0 02 08 e2 20 48 a9 00 48 ab
>3a1968	68 28 c2 20 af d5 08 00 8f 21 08 00 a9 00 00 8f
>3a1978	23 08 00 20 1a 39 20 33 02 4c 58 21 b6 19 b9 19
>3a1988	bf 19 cc 19 da 19 e8 19 fb 19 11 1a 21 1a 30 1a
>3a1998	3d 1a 4e 1a 5d 1a 6a 1a 78 1a 87 1a 98 1a b1 1a
>3a19a8	c5 1a d9 1a ef 1a 03 1b 1e 1b 20 61 74 00 4f 4b
>3a19b8	00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>3a19c8	72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>3a19d8	79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>3a19e8	56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>3a19f8	6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>3a1a08	6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>3a1a18	6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>3a1a28	76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>3a1a38	61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>3a1a48	75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>3a1a58	6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>3a1a68	72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>3a1a78	4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>3a1a88	69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>3a1a98	55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>3a1aa8	69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>3a1ab8	74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>3a1ac8	62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>3a1ad8	00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>3a1ae8	65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>3a1af8	20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>3a1b08	20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>3a1b18	63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1b28	63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 08 0b
>3a1b38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85 d0
>3a1b48	2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1b58	c2 20 a9 32 19 8f d2 08 00 e2 20 a9 3a 8f d4 08
>3a1b68	00 28 20 c6 37 20 07 33 64 2f 28 2b 60 08 0b 08
>3a1b78	c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69 01
>3a1b88	00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08 0b
>3a1b98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f
>3a1ba8	c9 20 f0 06 c9 09 f0 02 80 05 20 75 1b 80 ed 2b
>3a1bb8	28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 75 1b
>3a1bc8	80 f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0
>3a1bd8	2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0
>3a1be8	16 20 75 1b 80 e3 20 52 1c c2 20 a5 d5 f0 1d e2
>3a1bf8	20 80 d6 e6 34 80 ea c6 34 30 30 80 e4 a5 33 30
>3a1c08	06 a5 34 f0 02 80 da 20 75 1b 28 60 08 c2 20 48
>3a1c18	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1c28	29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a1c38	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1c48	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 30 a0 00 00
>3a1c58	b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00 00
>3a1c68	85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00 85
>3a1c78	00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20 96
>3a1c88	1b 68 e2 20 c7 00 d0 08 20 75 1b 20 96 1b 28 60
>3a1c98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1ca8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1cb8	e2 20 20 96 1b e2 20 a7 00 f0 10 c9 3a f0 0c c5
>3a1cc8	35 f0 05 20 75 1b 80 ef 28 38 60 28 18 60 5a 08
>3a1cd8	e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0
>3a1ce8	05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48
>3a1cf8	a9 00 08 5b 68 28 20 4e 14 e2 20 a9 00 85 da ad
>3a1d08	8a 0f 30 4b a7 00 c9 3a d0 03 20 75 1b 20 96 1b
>3a1d18	a7 00 d0 03 4c a1 1d 20 3e 03 b0 52 a7 00 10 10
>3a1d28	20 2a 09 85 0c c9 20 d0 03 4c 8f 1d a5 d0 f0 51
>3a1d38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1d48	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1d58	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08
>3a1d68	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 d0
>3a1d78	37 4c a1 1d 08 e2 20 48 a9 00 48 ab 68 28 6c 2d
>3a1d88	08 a5 0c c9 10 d0 a9 a7 00 20 07 09 c2 20 85 2d
>3a1d98	20 4e 14 20 75 1b 20 7c 1d ab 2b 28 60 08 58 20
>3a1da8	36 1b 20 75 18 e2 20 9c 8a 0f c2 20 a5 18 85 00
>3a1db8	a5 1a 85 02 4c e3 1d 08 c2 20 a0 02 00 b7 18 85
>3a1dc8	d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5 18 69 04
>3a1dd8	00 85 00 e2 20 a5 1a 69 00 85 02 c2 20 20 f1 1c
>3a1de8	e2 20 a5 da c9 03 f0 f3 c9 00 d0 31 e2 20 20 96
>3a1df8	1b a7 00 f0 28 c9 3a f0 1f 08 c2 20 48 a9 00 08
>3a1e08	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1e18	20 d0 18 e2 20 dc d2 08 20 75 1b 80 be 28 60 08
>3a1e28	58 e2 20 a9 80 85 d0 9c 8a 0f 20 75 18 c2 30 64
>3a1e38	2f a0 02 00 b7 18 f0 29 20 bf 1d e2 20 a5 da c9
>3a1e48	01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00 00
>3a1e58	18 a5 18 77 18 85 18 e2 20 a5 1a 69 00 85 1a 80
>3a1e68	d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2 20 a9 00
>3a1e78	00 85 08 a9 36 00 85 0a c2 20 a0 02 00 b7 08 f0
>3a1e88	31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18 a5 08 77
>3a1e98	08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c 85
>3a1ea8	08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a 85 1a 28
>3a1eb8	38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a1ec8	c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18 a5
>3a1ed8	0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20
>3a1ee8	18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a1ef8	80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5
>3a1f08	00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9 01
>3a1f18	00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5 08
>3a1f28	e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6 28
>3a1f38	60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2 20
>3a1f48	a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04 00 85 00
>3a1f58	e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20 38 a5 d7
>3a1f68	f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20 bd 1e 20
>3a1f78	c6 37 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1f88	30 a0 02 00 97 d7 18 a5 d7 69 04 00 85 08 e2 20
>3a1f98	a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18 97 08 f0
>3a1fa8	03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20 a0
>3a1fb8	00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c 85 0c e2
>3a1fc8	20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7 c2 20 a0
>3a1fd8	00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8 20 c6 37
>3a1fe8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1ff8	a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08 f0
>3a2008	1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08 77 08 85
>3a2018	0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9 00
>3a2028	00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b 60
>3a2038	08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 18 f0
>3a2048	07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5 0a
>3a2058	85 02 18 a5 d7 69 04 00 85 0c a5 d9 69 00 00 85
>3a2068	0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00 85 d9 18
>3a2078	a5 d7 69 04 00 85 08 a5 d9 69 00 00 85 0a 20 fc
>3a2088	1e c2 20 a5 10 a0 00 00 97 00 a5 d5 a0 02 00 97
>3a2098	00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85 02
>3a20a8	a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80 f7 20 c6
>3a20b8	37 28 60 08 c2 30 85 d5 20 ea 1f c9 00 00 f0 2c
>3a20c8	c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 39 1f
>3a20d8	68 85 0a 68 85 08 a5 18 85 00 a5 1a 85 02 20 96
>3a20e8	1b e2 20 a7 00 f0 0a 20 38 20 80 05 a5 d5 20 7c
>3a20f8	1f 28 60 8b 08 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a2108	34 d2 20 c0 02 28 ab 60 08 e2 30 a9 01 20 1c 00
>3a2118	20 db 00 f0 06 c9 0d f0 02 80 f5 28 60 0b 08 08
>3a2128	c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5 a9 00 4f
>3a2138	85 18 a9 00 00 85 1a 20 41 06 c2 20 a5 d5 d0 05
>3a2148	20 a5 1d 80 07 20 bb 20 28 2b 38 60 28 2b 18 60
>3a2158	c2 30 a2 ff fe 9a 20 fb 20 20 08 00 20 0c 00 a9
>3a2168	00 00 20 1c 00 20 25 21 b0 ef 80 ea e2 20 a5 25
>3a2178	c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20 48
>3a2188	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a2198	29 ff 00 20 d0 18 e2 20 dc d2 08 20 74 21 c2 20
>3a21a8	c9 00 00 f0 27 c9 02 00 d0 03 4c d2 11 08 c2 20
>3a21b8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a21c8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 18 a5 21 65
>3a21d8	27 85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27 85
>3a21e8	21 a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5 27
>3a21f8	8f 0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85 23
>3a2208	60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14 01
>3a2218	00 85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00
>3a2228	af 16 01 00 85 21 60 c2 20 a5 21 25 27 85 21 a5
>3a2238	23 25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5 23
>3a2248	05 29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5 23
>3a2258	49 ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5 21
>3a2268	c5 27 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23
>3a2278	60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05 64
>3a2288	21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29
>3a2298	c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85
>3a22a8	23 60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5
>3a22b8	27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a22c8	23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27
>3a22d8	90 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2
>3a22e8	20 a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5 21
>3a22f8	c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2
>3a2308	20 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a
>3a2318	05 27 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 20 0a
>3a2328	04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 82 1c 20
>3a2338	7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27
>3a2348	48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af
>3a2358	68 8f 02 08 af 68 8f 04 08 af af 0e 08 af 29 f7
>3a2368	8f 0e 08 af 20 ba 1b 28 60 08 e2 20 20 7e 17 20
>3a2378	2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a2388	20 82 1c 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a
>3a2398	0a 0a 05 27 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a23a8	20 40 04 c2 20 a5 21 85 90 a5 27 85 21 20 0a 04
>3a23b8	e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2 20 a5 90 85
>3a23c8	21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a 05 27 48 af
>3a23d8	0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f
>3a23e8	0a 08 af 68 8f 09 08 af 68 8f 06 08 af af 0e 08
>3a23f8	af 29 f7 8f 0e 08 af 20 ba 1b 28 60 08 20 7e 17
>3a2408	20 2c 05 e2 20 a5 21 29 0f 0a 0a 0a 0a 8f 53 08
>3a2418	00 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 29 0f
>3a2428	0f 53 08 00 8f 1e 00 00 28 60 08 e2 20 20 7e 17
>3a2438	20 2c 05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c
>3a2448	05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5
>3a2458	21 8f 0d 00 af 68 8f 0e 00 af 68 8f 0f 00 af 28
>3a2468	60 08 e2 20 20 7e 17 20 89 04 a5 21 f0 16 a9 01
>3a2478	8f 04 00 af a9 20 8f 08 00 af 8f 09 00 af 22 2c
>3a2488	11 00 80 0a a9 00 8f 04 00 af 22 2c 11 00 a9 2c
>3a2498	85 35 20 b7 1c 90 35 20 75 1b 20 7e 17 20 2c 05
>3a24a8	a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a24b8	48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 8f 05
>3a24c8	00 af 68 8f 06 00 af 68 8f 07 00 af 28 60 08 c2
>3a24d8	20 20 7e 17 20 2c 05 a9 af 00 85 9e a5 21 c9 0a
>3a24e8	00 b0 5c 0a aa bf 66 25 3a 85 9c a9 2c 00 20 82
>3a24f8	1c 20 7e 17 20 2c 05 a5 21 0a 0a 18 65 9c 85 9c
>3a2508	a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a0 02 00 a5
>3a2518	21 e2 20 97 9c a9 2c 20 82 1c 20 7e 17 20 2c 05
>3a2528	a0 01 00 a5 21 e2 20 97 9c a9 2c 20 82 1c 20 7e
>3a2538	17 20 2c 05 a0 00 00 a5 21 e2 20 97 9c 28 60 08
>3a2548	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a2558	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 00 20
>3a2568	00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f
>3a2578	80 1f da 5a 08 20 7e 17 20 89 04 c2 20 a5 21 89
>3a2588	00 01 d0 17 af 00 00 af 89 00 01 f0 0e e2 20 a9
>3a2598	00 8f 01 00 af a9 01 8f 01 00 af c2 20 a5 21 8f
>3a25a8	00 00 af 4a 4a 4a 4a 4a 4a 4a 29 ff 00 0a aa c2
>3a25b8	20 bf 02 26 3a 8f 10 f0 3a bf 0a 26 3a 8f 12 f0
>3a25c8	3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a 8f 0a 01
>3a25d8	00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e 01 00 8f
>3a25e8	16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00 aa af 1c
>3a25f8	00 00 a8 20 20 00 28 7a fa 60 80 02 20 03 40 01
>3a2608	90 01 e0 01 58 02 f0 00 2c 01 50 00 64 00 28 00
>3a2618	32 00 3c 00 4b 00 1e 00 32 00 48 00 5c 00 20 00
>3a2628	2a 00 34 00 43 00 16 00 34 00 da 08 c2 30 a5 21
>3a2638	c9 02 00 b0 12 0a 0a aa bf 00 f0 3a 85 9c bf 02
>3a2648	f0 3a 85 9e 28 fa 60 08 c2 20 48 a9 00 08 5b 68
>3a2658	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a2668	18 e2 20 dc d2 08 da 08 c2 30 a5 21 c9 02 00 b0
>3a2678	12 0a 0a aa bf 08 f0 3a 85 9c bf 0a f0 3a 85 9e
>3a2688	28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2698	09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a26a8	d2 08 08 c2 20 20 7e 17 20 2c 05 c2 20 a5 21 c9
>3a26b8	02 00 b0 5d 85 53 a9 2c 00 20 82 1c 20 7e 17 20
>3a26c8	2c 05 c2 20 a5 21 85 57 a9 2c 00 20 82 1c 20 7e
>3a26d8	17 20 2c 05 a5 53 0a 0a 0a aa e2 20 a5 57 d0 05
>3a26e8	a5 21 0a 80 04 a5 21 38 2a 9f 00 01 af c2 20 a9
>3a26f8	2c 00 85 35 20 b7 1c b0 37 c2 20 08 c2 20 a9 00
>3a2708	00 85 21 a9 b0 00 85 23 e2 20 a9 00 85 25 28 80
>3a2718	27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2728	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a2738	c2 20 20 75 1b 20 7e 17 c2 20 a5 53 0a 0a aa a5
>3a2748	21 9f 00 f0 3a 9f 08 f0 3a 85 5b a5 23 9f 02 f0
>3a2758	3a 38 e9 b0 00 9f 0a f0 3a 85 5d a5 53 0a 0a 0a
>3a2768	aa e2 20 a5 5b 9f 01 01 af a5 5c 9f 02 01 af a5
>3a2778	5d 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af 28
>3a2788	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a2798	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a27a8	08 c2 20 20 7e 17 20 2c 05 20 6e 26 c2 20 a5 9c
>3a27b8	8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5 9e
>3a27c8	8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f 01
>3a27d8	04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00
>3a27e8	8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af
>3a27f8	10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c
>3a2808	af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9c 85 0c
>3a2818	a5 0e 65 9e 85 0e e2 20 a5 53 87 0c 28 60 c2 20
>3a2828	a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b 49 ff
>3a2838	ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd 38 a5
>3a2848	63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff
>3a2858	85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff
>3a2868	ff 1a 48 0a 68 6a 85 6f 20 ee 27 a5 57 c5 5f d0
>3a2878	06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff
>3a2888	1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5
>3a2898	57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f
>3a28a8	65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60 08 a9
>3a28b8	00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af 10
>3a28c8	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c e2
>3a28d8	20 af 0e 01 00 69 00 85 0e c2 20 18 a5 9c 65 0c
>3a28e8	8f 05 04 af e2 20 a5 9e 65 0e 8f 07 04 af c2 20
>3a28f8	38 a5 5f e5 57 85 0c 8f 08 04 af 38 af 10 f0 3a
>3a2908	8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01 00
>3a2918	8f 0c 04 af e2 20 af 53 08 00 8f 01 04 af a9 87
>3a2928	8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a2938	28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a2948	48 a9 00 48 ab 68 28 c2 30 20 7e 17 20 2c 05 20
>3a2958	32 26 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2968	85 57 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2978	85 5b a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2988	85 53 20 ee 27 28 60 08 08 c2 20 48 a9 00 08 5b
>3a2998	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 7e
>3a29a8	17 20 2c 05 20 32 26 a9 2c 00 20 82 1c 20 7e 17
>3a29b8	20 89 04 a5 21 85 57 a9 2c 00 20 82 1c 20 7e 17
>3a29c8	20 89 04 a5 21 85 5b a9 2c 00 20 82 1c 20 7e 17
>3a29d8	20 89 04 a5 21 85 5f a9 2c 00 20 82 1c 20 7e 17
>3a29e8	20 89 04 a5 21 85 63 a9 2c 00 20 82 1c 20 7e 17
>3a29f8	20 2c 05 a5 21 85 53 20 26 28 28 60 08 08 c2 20
>3a2a08	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a2a18	28 c2 30 20 7e 17 20 2c 05 20 32 26 a9 2c 00 20
>3a2a28	82 1c 20 7e 17 20 89 04 a5 21 85 57 a9 2c 00 20
>3a2a38	82 1c 20 7e 17 20 89 04 a5 21 85 5b a9 2c 00 20
>3a2a48	82 1c 20 7e 17 20 89 04 a5 21 85 5f a9 2c 00 20
>3a2a58	82 1c 20 7e 17 20 89 04 a5 21 85 63 a9 2c 00 20
>3a2a68	82 1c 20 7e 17 20 2c 05 a5 21 85 53 20 b6 28 28
>3a2a78	60 08 e2 20 a5 21 c9 40 b0 18 0a 0a 0a 18 69 00
>3a2a88	85 9c a9 0c 69 00 85 9d a9 af 69 00 85 9e 64 9f
>3a2a98	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2aa8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2ab8	08 08 e2 20 20 7e 17 20 2c 05 20 79 2a a5 21 8f
>3a2ac8	16 f0 3a a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2ad8	c9 08 b0 4b 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a2ae8	c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0 00 85
>3a2af8	23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20 a5 23
>3a2b08	c8 c8 97 9c af 16 f0 3a aa bf 18 f0 3a 29 f1 85
>3a2b18	0c 68 0a 29 0e 05 0c 87 9c 9f 18 f0 3a 28 60 08
>3a2b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a2b38	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a2b48	20 20 7e 17 20 2c 05 20 79 2a a9 2c 00 20 82 1c
>3a2b58	20 7e 17 20 89 04 a5 21 a0 04 00 97 9c a9 2c 00
>3a2b68	20 82 1c 20 7e 17 20 89 04 a5 21 a0 06 00 97 9c
>3a2b78	28 60 08 c2 20 20 7e 17 20 2c 05 20 79 2a a5 21
>3a2b88	8f 16 f0 3a a9 2c 00 20 82 1c 20 7e 17 20 89 04
>3a2b98	a5 21 48 a9 2c 00 85 35 20 b7 1c b0 1e af 16 f0
>3a2ba8	3a aa bf 18 f0 3a 29 fe 00 85 0c 68 29 01 00 05
>3a2bb8	0c 9f 18 f0 3a e2 20 87 9c 80 35 c2 20 20 75 1b
>3a2bc8	20 7e 17 20 2c 05 a5 21 c9 08 00 b0 25 0a 0a 0a
>3a2bd8	0a 85 0c 68 29 01 00 05 0c 85 0c af 16 f0 3a aa
>3a2be8	e2 20 bf 18 f0 3a 29 8e 05 0c 87 9c 9f 18 f0 3a
>3a2bf8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2c08	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2c18	08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01 a9 04
>3a2c28	00 8d 02 01 18 ad 04 01 69 80 02 85 9c a9 af 00
>3a2c38	85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c48	a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a2c58	dc d2 08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01
>3a2c68	a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9c a9
>3a2c78	af 00 85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2c88	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a2c98	e2 20 dc d2 08 08 c2 20 20 7e 17 20 2c 05 20 19
>3a2ca8	2c c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20
>3a2cb8	7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82 1c
>3a2cc8	20 7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82
>3a2cd8	1c 20 7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85
>3a2ce8	5d 68 85 57 68 85 53 68 85 9c 68 85 9e a5 5b 87
>3a2cf8	9c e2 20 38 a5 5d e9 b0 a0 02 00 97 9c c2 20 a5
>3a2d08	57 d0 11 a5 59 d0 0d e2 20 a5 53 29 07 a0 03 00
>3a2d18	97 9c 80 0d e2 20 a5 53 29 07 09 08 a0 03 00 97
>3a2d28	9c 28 60 08 c2 20 20 7e 17 20 2c 05 20 5b 2c c2
>3a2d38	20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20 7e 17
>3a2d48	20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20 7e
>3a2d58	17 20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20
>3a2d68	7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85 5d 68
>3a2d78	85 57 68 85 53 68 85 9c 68 85 9e a5 5b a0 01 00
>3a2d88	97 9c e2 20 38 a5 5d e9 b0 c8 c8 97 9c c2 20 a5
>3a2d98	53 a0 04 00 97 9c a5 57 a0 06 00 97 9c 28 60 08
>3a2da8	c2 20 20 7e 17 20 2c 05 20 5b 2c c2 20 a5 9e 48
>3a2db8	a5 9c 48 a9 2c 00 20 82 1c 20 7e 17 20 89 04 c2
>3a2dc8	20 68 85 9c 68 85 9e a5 21 d0 06 e2 20 a9 00 80
>3a2dd8	04 e2 20 a9 01 e2 20 a0 00 00 97 9c 28 60 08 c2
>3a2de8	20 20 7e 17 20 2c 05 20 5b 2c a5 9e 48 a5 9c 48
>3a2df8	a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 48 a9
>3a2e08	2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 85 57 68
>3a2e18	85 53 68 85 9c 68 85 9e a5 53 a0 08 00 97 9c a5
>3a2e28	57 a0 0a 00 97 9c 28 60 0b 08 08 c2 20 48 a9 00
>3a2e38	08 5b 68 28 c2 30 af 59 f0 3a 85 9c e2 20 af 5b
>3a2e48	f0 3a c2 20 29 ff 00 85 9e af 5c f0 3a 85 0c e2
>3a2e58	20 af 5e f0 3a c2 20 29 ff 00 85 0e af 63 f0 3a
>3a2e68	85 10 e2 20 af 65 f0 3a c2 20 29 ff 00 85 12 e2
>3a2e78	20 a7 9c 87 10 c2 20 e6 9c d0 02 e6 9e e6 10 d0
>3a2e88	02 e6 12 38 a5 0c e9 01 00 85 0c a5 0e e9 00 00
>3a2e98	85 0e a5 0c d0 d9 a5 0e d0 d5 28 2b 60 0b 08 e2
>3a2ea8	20 c2 10 20 d6 1c c9 e6 f0 1f 08 c2 20 48 a9 00
>3a2eb8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a2ec8	00 20 d0 18 e2 20 dc d2 08 20 82 1c 20 7e 17 20
>3a2ed8	89 04 c2 20 a5 21 8f 59 f0 3a e2 20 a5 23 8f 5b
>3a2ee8	f0 3a a9 2c 20 82 1c 20 7e 17 20 89 04 c2 20 a5
>3a2ef8	21 8f 5c f0 3a e2 20 a5 23 8f 5e f0 3a a9 00 8f
>3a2f08	58 f0 3a a9 99 20 82 1c 20 d6 1c c9 e6 f0 1f 08
>3a2f18	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a2f28	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 82
>3a2f38	1c 20 7e 17 20 89 04 c2 20 a5 21 8f 63 f0 3a e2
>3a2f48	20 a5 23 8f 65 f0 3a c2 20 a5 21 8f 66 f0 3a e2
>3a2f58	20 a5 23 8f 68 f0 3a a9 00 8f 62 f0 3a 20 30 2e
>3a2f68	28 2b 60 08 20 96 1b e2 20 a7 00 d0 03 4c 13 30
>3a2f78	c9 3a d0 03 4c 13 30 c9 22 d0 0b 20 9c 16 20 fa
>3a2f88	38 a9 3b 20 82 1c 20 3e 03 90 41 20 05 45 90 3c
>3a2f98	a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a2fa8	e8 c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08 c2 20
>3a2fb8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a2fc8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48
>3a2fd8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a2fe8	29 ff 00 20 d0 18 e2 20 dc d2 08 c2 20 a9 00 4c
>3a2ff8	85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 74 12
>3a3008	c2 20 20 a2 44 a9 0d 00 20 18 00 28 60 ea c2 20
>3a3018	a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00
>3a3028	85 02 20 81 05 c2 20 a5 3e 85 00 a5 40 85 02 80
>3a3038	cf 08 20 96 1b e2 20 a7 00 f0 49 c9 3a f0 45 20
>3a3048	3e 03 90 42 20 05 45 90 3d 20 14 00 e2 20 8f 00
>3a3058	4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9
>3a3068	00 00 85 23 e2 20 a9 02 85 25 20 74 12 20 a2 44
>3a3078	20 96 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>3a3088	75 1b 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3098	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a30a8	e2 20 dc d2 08 08 20 7e 17 20 89 04 e2 20 a9 5c
>3a30b8	85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20
>3a30c8	a9 2c 85 35 20 b7 1c 90 41 20 75 1b 20 7e 17 20
>3a30d8	dd 04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 b7
>3a30e8	1c 90 27 20 75 1b 20 7e 17 20 dd 04 c2 20 a5 21
>3a30f8	85 57 e2 20 a9 2c 85 35 20 b7 1c 90 0d 20 75 1b
>3a3108	20 7e 17 20 dd 04 c2 20 a4 21 a6 57 a5 53 0b 8b
>3a3118	08 22 a0 08 00 28 ab 2b 20 ba 1b 28 60 08 c2 20
>3a3128	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3138	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20 20
>3a3148	96 1b 20 05 45 90 64 a9 8c 20 82 1c a9 01 20 eb
>3a3158	14 a2 01 00 a9 00 8f 00 4d 00 20 7e 17 20 dd 04
>3a3168	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a3178	00 4d 00 30 55 e8 e8 20 96 1b a7 00 c9 2c f0 25
>3a3188	c9 8d d0 27 20 75 1b 20 b3 45 c2 20 a5 be 85 21
>3a3198	e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25
>3a31a8	20 a2 44 28 60 20 75 1b 4c 62 31 08 c2 20 48 a9
>3a31b8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a31c8	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a31d8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a31e8	00 20 d0 18 e2 20 dc d2 08 08 20 96 1b e2 20 a7
>3a31f8	00 f0 28 c9 3a f0 24 20 3e 03 90 21 20 05 45 90
>3a3208	1c 20 44 32 20 a2 44 20 96 1b a7 00 f0 0d c9 3a
>3a3218	f0 09 c9 2c d0 07 20 75 1b 80 cf 28 60 08 c2 20
>3a3228	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3238	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 a5 02 85
>3a3248	40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5
>3a3258	38 d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85 02 a5
>3a3268	3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a f0
>3a3278	4f c9 2c d0 03 20 75 1b 20 96 1b a7 00 c9 22 f0
>3a3288	4e 20 57 03 b0 4e 08 c2 20 48 a9 00 08 5b 68 28
>3a3298	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a32a8	e2 20 dc d2 08 c2 20 a9 00 00 85 18 a9 36 00 85
>3a32b8	1a 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a32c8	e2 20 a9 80 85 33 a9 a8 85 35 20 cc 1b 80 a9 20
>3a32d8	9c 16 80 03 20 d1 15 c2 20 a5 00 85 36 a5 02 85
>3a32e8	38 a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5 44 85
>3a32f8	1a a5 3e 85 00 a5 40 85 02 28 60 20 ba 1b 60 64
>3a3308	36 64 38 64 3a 64 3c 60 20 24 00 60 20 7e 17 c2
>3a3318	20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22 20
>3a3328	75 1b 20 7e 17 c2 20 a5 24 d0 35 68 85 08 68 85
>3a3338	0a c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23 97 08
>3a3348	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3358	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3368	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3378	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20
>3a3388	7e 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c
>3a3398	d0 19 20 75 1b 20 7e 17 c2 20 a5 23 d0 2c 68 85
>3a33a8	08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a33b8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a33c8	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a33d8	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a33e8	00 20 d0 18 e2 20 dc d2 08 20 7e 17 c2 20 a5 23
>3a33f8	48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 75 1b 20
>3a3408	7e 17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68 85
>3a3418	08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a3428	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3438	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3448	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3458	00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3468	5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00
>3a3478	20 d0 18 e2 20 dc d2 08 08 e2 20 a7 00 f0 05 20
>3a3488	75 1b 80 f7 28 60 08 28 60 08 28 60 08 28 60 08
>3a3498	c2 20 a5 1a 20 97 18 a5 18 20 97 18 a5 02 48 a5
>3a34a8	00 48 20 ba 1b a5 02 20 97 18 a5 00 20 97 18 68
>3a34b8	85 00 68 85 02 20 96 1b 20 05 45 b0 1f 08 c2 20
>3a34c8	48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2
>3a34d8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a5 e8
>3a34e8	20 ae 18 a5 e7 20 ae 18 c2 20 a5 e5 20 97 18 20
>3a34f8	96 1b e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0 04
>3a3508	c9 01 f0 00 20 75 1b 20 7e 17 20 a2 44 e2 20 a9
>3a3518	99 20 82 1c 20 7e 17 c2 20 a5 25 20 97 18 a5 23
>3a3528	20 97 18 a5 21 20 97 18 e2 20 a9 9a 85 35 20 b7
>3a3538	1c 90 1b 20 75 1b 20 7e 17 e2 20 a5 25 20 97 18
>3a3548	c2 20 a5 23 20 97 18 a5 21 20 97 18 80 14 c2 20
>3a3558	a9 00 00 20 97 18 a9 00 00 20 97 18 a9 01 00 20
>3a3568	97 18 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3578	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a3588	dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a3598	c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2
>3a35a8	20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00
>3a35b8	85 e8 c2 20 5a 20 5b 43 7a c2 20 b9 00 00 85 27
>3a35c8	b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20
>3a35d8	a3 21 20 a2 44 7a c2 20 b9 06 00 85 27 b9 08 00
>3a35e8	85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a
>3a35f8	20 e7 22 20 76 04 f0 28 80 08 20 ca 22 20 76 04
>3a3608	f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a3618	00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17
>3a3628	a2 21 08 20 ac 14 c2 20 18 a5 31 69 1a 00 85 31
>3a3638	a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a
>3a3648	48 20 96 1b 20 81 05 a5 21 f0 26 20 71 1e 90 42
>3a3658	e2 20 a9 02 85 da 20 ba 1b c2 20 68 20 97 18 68
>3a3668	20 97 18 a5 02 20 97 18 a5 00 20 97 18 e6 2f 28
>3a3678	60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3688	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3698	d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a36a8	a9 06 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a36b8	dc d2 08 08 c2 30 a5 2f f0 1e 20 b9 18 85 00 20
>3a36c8	b9 18 85 02 20 b9 18 85 18 20 b9 18 85 1a c6 2f
>3a36d8	e2 20 a9 03 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a36e8	68 28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00 20
>3a36f8	d0 18 e2 20 dc d2 08 08 20 7e 17 20 76 04 f0 1c
>3a3708	e2 20 a9 94 20 82 1c 20 81 05 20 76 04 f0 12 20
>3a3718	71 1e 90 2c e2 20 a9 02 85 da 80 03 20 ba 1b 28
>3a3728	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3738	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3748	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1
>3a3758	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a3768	e2 20 a9 01 85 da 28 60 08 20 96 1b 20 81 05 a5
>3a3778	21 f0 0d 20 71 1e 90 27 e2 20 a9 02 85 da 28 60
>3a3788	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3798	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a37a8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08
>3a37b8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 4e
>3a37c8	14 20 9c 0c 20 5a 42 60 08 a7 00 10 03 20 75 1b
>3a37d8	20 05 45 b0 03 4c 47 38 e2 20 20 d6 1c c9 8c d0
>3a37e8	0e a9 8c 20 82 1c a9 00 8f 00 4d 00 20 d4 15 20
>3a37f8	96 1b e2 20 a7 00 c9 87 f0 03 4c 47 38 20 75 1b
>3a3808	a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 7e 17 68
>3a3818	85 e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b 20
>3a3828	cd 42 90 3a c2 20 a0 09 00 b7 08 85 be e2 20 c8
>3a3838	c8 b7 08 85 c0 20 94 47 80 03 20 a2 44 28 60 08
>3a3848	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3858	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a3868	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00
>3a3878	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20
>3a3888	20 d6 1c c9 00 f0 66 20 7e 17 e2 20 a5 25 c9 ff
>3a3898	f0 14 c9 02 d0 05 20 fa 38 80 0b c9 00 d0 05 20
>3a38a8	1a 39 80 02 80 4a 20 96 1b a7 00 f0 40 c9 3a f0
>3a38b8	3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08
>3a38c8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a38d8	20 d0 18 e2 20 dc d2 08 a9 09 20 18 00 20 75 1b
>3a38e8	20 96 1b a7 00 f0 09 c9 3a f0 05 80 9a 20 33 02
>3a38f8	28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3908	c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6 ab
>3a3918	28 60 08 c2 20 20 3a 11 a5 14 85 21 a5 16 85 23
>3a3928	20 fa 38 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f
>3a3938	18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14 c8
>3a3948	28 60 e2 20 a9 8c 20 82 1c 08 20 7e 17 e2 20 c2
>3a3958	10 af 0e 08 af 09 08 8f 0e 08 af 20 e9 10 a0 00
>3a3968	00 af 06 08 af 20 2d 39 a9 2f 97 14 c8 af 09 08
>3a3978	af 20 2d 39 a9 2f 97 14 c8 af 0f 08 af 20 2d 39
>3a3988	af 0a 08 af 20 2d 39 a9 00 97 14 af 0e 08 af 29
>3a3998	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a39a8	20 a9 02 85 25 20 74 12 28 e2 20 20 75 1b 60 e2
>3a39b8	20 a9 8c 20 82 1c 08 20 7e 17 e2 20 c2 10 af 0e
>3a39c8	08 af 09 08 8f 0e 08 af 20 e9 10 a0 00 00 af 04
>3a39d8	08 af 29 7f 20 2d 39 a9 3a 97 14 c8 af 02 08 af
>3a39e8	20 2d 39 a9 3a 97 14 c8 af 00 08 af 20 2d 39 a9
>3a39f8	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a3a08	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 74 12
>3a3a18	28 e2 20 20 75 1b 60 08 c2 20 20 7e 17 20 89 04
>3a3a28	c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23
>3a3a38	e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 82 1c
>3a3a48	08 c2 30 20 7e 17 20 b3 04 c2 20 a5 23 48 a5 21
>3a3a58	48 20 96 1b e2 20 a7 00 c9 2c f0 03 4c b8 3a 20
>3a3a68	75 1b 20 7e 17 20 dd 04 c2 20 a5 21 48 20 96 1b
>3a3a78	e2 20 a7 00 c9 2c f0 03 4c b8 3a 20 75 1b 20 7e
>3a3a88	17 20 dd 04 c2 20 a5 21 85 8d e2 20 a5 23 85 8f
>3a3a98	c2 20 68 85 27 a9 00 00 85 29 68 85 21 68 85 23
>3a3aa8	e2 20 a9 02 85 25 20 cc 12 e2 20 20 75 1b 28 60
>3a3ab8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3ac8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a3ad8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3ae8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20
>3a3af8	a9 8c 20 82 1c 08 c2 30 20 7e 17 e2 20 a5 25 c9
>3a3b08	02 f0 03 4c 7a 3b c2 20 a5 23 48 a5 21 48 20 96
>3a3b18	1b e2 20 a7 00 c9 2c f0 03 4c 99 3b 20 75 1b 20
>3a3b28	7e 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d
>3a3b38	c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2 20
>3a3b48	a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d
>3a3b58	30 09 85 27 a9 00 00 85 29 80 07 a9 00 00 85 27
>3a3b68	85 29 e2 20 a9 00 85 2b 20 cc 12 e2 20 20 75 1b
>3a3b78	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3b88	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3b98	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3ba8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3bb8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3bc8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2
>3a3bd8	20 a9 8c 20 82 1c 08 c2 30 20 7e 17 e2 20 a5 25
>3a3be8	c9 02 f0 03 4c 43 3c c2 20 a5 23 48 a5 21 48 20
>3a3bf8	96 1b e2 20 a7 00 c9 2c f0 03 4c 62 3c 20 75 1b
>3a3c08	20 7e 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21 85
>3a3c18	8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20 a9
>3a3c28	00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02 85
>3a3c38	25 20 cc 12 e2 20 20 75 1b 28 60 08 c2 20 48 a9
>3a3c48	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3c58	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3c68	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3c78	00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3c88	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a3c98	20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 20
>3a3ca8	7e 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5 00
>3a3cb8	85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20 81
>3a3cc8	05 a5 3e 85 00 a5 40 85 02 e2 20 20 75 1b 60 08
>3a3cd8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3ce8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20
>3a3cf8	a9 8c 20 82 1c 08 20 7e 17 c2 10 e2 20 a5 25 c9
>3a3d08	00 d0 1d 20 3a 11 c2 20 a5 14 85 21 a5 16 85 23
>3a3d18	e2 20 a9 02 85 25 20 74 12 28 e2 20 20 75 1b 60
>3a3d28	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3d38	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2
>3a3d48	20 a9 8c 20 82 1c 08 20 7e 17 20 b3 04 c2 20 64
>3a3d58	0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0
>3a3d68	03 c8 80 f3 b7 21 20 68 03 90 1e c2 20 06 0c 26
>3a3d78	0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20
>3a3d88	89 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5
>3a3d98	0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 75 1b 60
>3a3da8	e2 20 a9 8c 20 82 1c 08 20 7e 17 20 89 04 20 e9
>3a3db8	10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf
>3a3dc8	00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf
>3a3dd8	00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24
>3a3de8	85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23
>3a3df8	d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23
>3a3e08	a5 17 85 24 a9 02 85 25 20 74 12 28 e2 20 20 75
>3a3e18	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3e28	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3e38	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3e48	02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20 bf 11 ab
>3a3e58	84 21 c2 20 64 23 e2 20 a9 00 85 25 e2 20 20 75
>3a3e68	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3e78	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3e88	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3e98	00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2
>3a3ea8	20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3eb8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a3ec8	20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20
>3a3ed8	a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0 02
>3a3ee8	00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20 20
>3a3ef8	75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3f08	04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3f18	d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25
>3a3f28	c9 00 d0 0e c2 20 a7 21 85 21 64 23 e2 20 20 75
>3a3f38	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3f48	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3f58	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3f68	00 d0 24 20 e9 10 a5 21 87 14 a9 00 a0 01 00 97
>3a3f78	14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3f88	25 e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a3f98	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a3fa8	18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17
>3a3fb8	e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64 23
>3a3fc8	64 24 a9 00 85 25 e2 20 20 75 1b 60 08 c2 20 48
>3a3fd8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3fe8	29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3ff8	82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 39 e2 20 a5
>3a4008	24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 e9 10
>3a4018	a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88
>3a4028	10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23
>3a4038	e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4048	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a4058	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4068	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a4078	20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20
>3a4088	a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e
>3a4098	a5 22 d0 4a c2 10 20 e9 10 a4 21 e2 20 a9 00 97
>3a40a8	14 88 30 07 a9 09 97 14 88 10 fb a9 02 85 25 c2
>3a40b8	20 a5 14 85 21 a5 16 85 23 e2 20 20 75 1b 60 08
>3a40c8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a40d8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a40e8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a40f8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9
>3a4108	8c 20 82 1c 20 7e 17 20 89 04 c2 20 a5 23 10 17
>3a4118	49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85 21
>3a4128	a5 23 69 00 00 85 23 e2 20 20 75 1b 60 e2 20 a9
>3a4138	8c 20 82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 25 c2
>3a4148	20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85 23
>3a4158	a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2 20
>3a4168	20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4178	a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a4188	dc d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a4198	68 28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 36 85
>3a41a8	d9 c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00 97 d7
>3a41b8	a0 04 00 97 d7 20 4b 1b 2b 28 60 8b 08 c2 20 a9
>3a41c8	00 00 85 18 a9 36 00 85 1a 20 4b 1b 20 27 1e 28
>3a41d8	ab 60 08 c2 20 64 53 a9 ff 7f 85 57 20 33 02 20
>3a41e8	d6 1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20
>3a41f8	96 1b 20 81 05 a5 21 85 53 20 d6 1c 29 ff 00 c9
>3a4208	00 00 f0 12 c9 81 00 d0 2a 20 82 1c 20 96 1b 20
>3a4218	81 05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02 48 a5
>3a4228	00 48 20 4f 13 68 85 00 68 85 02 68 85 18 68 85
>3a4238	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4248	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4258	d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64
>3a4268	e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5 d7
>3a4278	69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60 c9
>3a4288	5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9
>3a4298	41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08
>3a42a8	e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8
>3a42b8	c0 08 00 d0 f2 b7 e5 20 b2 03 20 87 42 b0 03 28
>3a42c8	38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00
>3a42d8	b7 e5 f0 0b 20 b2 03 9f 00 4e 00 c8 e8 80 f1 a9
>3a42e8	00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9 00
>3a42f8	85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d
>3a4308	e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17 c2
>3a4318	20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85
>3a4328	0e 20 a7 42 b0 2a a0 0d 00 c2 20 b7 08 85 0c c8
>3a4338	c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2
>3a4348	20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60
>3a4358	28 38 60 08 20 cd 42 b0 1f 08 c2 20 48 a9 00 08
>3a4368	5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00
>3a4378	20 d0 18 e2 20 dc d2 08 c2 30 a0 09 00 b7 08 85
>3a4388	21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85 25
>3a4398	28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20 a5
>3a43a8	e1 69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5 b8 90
>3a43b8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a43c8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a43d8	c2 20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20 a5 08
>3a43e8	85 df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5 25 c5
>3a43f8	e8 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4408	04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4418	d2 08 c2 10 20 9a 43 c2 30 18 a5 be 69 01 00 85
>3a4428	08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00 97 08
>3a4438	c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20 b2 03
>3a4448	20 87 42 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0
>3a4458	09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2 a0 0d
>3a4468	00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5 be 85
>3a4478	e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25 97 be
>3a4488	c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20 a5 23
>3a4498	85 c0 20 00 0f 20 15 0f 80 ea 08 c2 30 a5 e2 d0
>3a44a8	06 e2 20 a5 e4 f0 05 20 cd 42 b0 05 20 f2 43 80
>3a44b8	17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21
>3a44c8	97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85
>3a44d8	be c8 c8 e2 20 b7 08 85 c0 20 00 0f 20 34 0f e2
>3a44e8	20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 be e2
>3a44f8	20 a5 23 85 c0 20 00 0f 20 15 0f 80 bc 08 20 96
>3a4508	1b e2 20 a7 00 20 3e 03 90 42 c2 20 a5 00 85 e5
>3a4518	e2 20 a5 02 85 e7 20 75 1b a7 00 f0 0d c9 24 f0
>3a4528	14 c9 25 f0 09 20 87 42 b0 ec a9 00 80 0c 20 75
>3a4538	1b a9 00 80 05 20 75 1b a9 02 85 e8 20 d6 1c c9
>3a4548	8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18 60 08
>3a4558	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5
>3a4568	23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2
>3a4578	20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49
>3a4588	ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2
>3a4598	20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5
>3a45a8	e2 20 06 26 66 23 66 22 66 21 60 08 20 00 0f c2
>3a45b8	20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d
>3a45c8	00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00
>3a45d8	4d 00 85 27 a9 00 00 85 29 20 f0 21 e8 e8 88 d0
>3a45e8	eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 f0 21
>3a45f8	e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c
>3a4608	38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29
>3a4618	e2 20 a5 e8 09 80 a6 21 20 c4 0c e2 20 af 00 4d
>3a4628	00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97
>3a4638	be e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08
>3a4648	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a4658	20 d0 18 e2 20 dc d2 08 e2 20 38 a5 be 67 be 85
>3a4668	08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64 0b c2
>3a4678	20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a4688	64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01 00
>3a4698	85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5
>3a46a8	0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af 00
>3a46b8	4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be c5 8d f0
>3a46c8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a46d8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a46e8	c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64
>3a46f8	22 64 23 64 24 b7 be 85 27 64 28 64 29 64 2a a5
>3a4708	21 c5 27 b0 68 20 f0 21 c2 20 18 a5 08 65 21 85
>3a4718	08 a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20
>3a4728	18 bf 00 4d 00 85 8e 65 08 85 08 a5 09 69 00 85
>3a4738	09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a
>3a4748	06 08 26 0a e2 20 38 a5 08 65 8d 85 08 a5 09 69
>3a4758	00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65
>3a4768	be 85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20
>3a4778	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a4788	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 00 0f
>3a4798	e2 20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25 48
>3a47a8	c2 20 a5 23 48 a5 21 48 20 ad 46 68 85 21 68 85
>3a47b8	23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5
>3a47c8	23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a47d8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a47e8	20 dc d2 08 08 20 00 0f f4 00 00 f4 00 00 e2 20
>3a47f8	48 20 ad 46 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a4808	21 a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7 c1 29
>3a4818	7f 85 25 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b
>3a4828	68 28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00 d0 0c
>3a4838	a5 21 89 00 fc d0 05 20 1a 39 80 2e a2 0a 00 46
>3a4848	23 66 21 ca d0 f9 20 1a 39 e2 20 a9 4b 20 18 00
>3a4858	c2 20 80 16 a2 14 00 46 23 66 21 ca d0 f9 20 1a
>3a4868	39 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08
>3a4878	c2 30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20 20
>3a4888	d6 1c c9 00 f0 08 20 7e 17 20 b3 04 80 11 c2 20
>3a4898	a9 00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20 20
>3a48a8	d7 49 22 08 11 00 b0 22 20 88 4a 08 c2 20 48 a9
>3a48b8	00 08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20 29
>3a48c8	ff 00 20 d0 18 e2 20 dc d2 08 20 33 02 08 c2 20
>3a48d8	48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03
>3a48e8	82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89
>3a48f8	08 f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9
>3a4908	0f d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0
>3a4918	08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18
>3a4928	00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7
>3a4938	18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 21 08 00
>3a4948	c8 c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08 00
>3a4958	20 1d 48 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0
>3a4968	1c 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53
>3a4978	20 18 00 89 10 f0 05 a9 44 20 18 00 ea 20 33 02
>3a4988	20 4a 02 22 0c 11 00 90 03 82 41 ff 20 88 4a 08
>3a4998	c2 20 48 a9 00 08 5b 68 28 20 ba 1b 28 2b 60 08
>3a49a8	c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0
>3a49b8	cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20
>3a49c8	18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b
>3a49d8	08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 6c f2
>3a49e8	85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97 20
>3a49f8	c8 c0 1e 00 d0 f8 c2 20 a9 6c f0 8f 7a f2 3a a9
>3a4a08	3a 00 8f 7c f2 3a af 21 08 00 8f 6e f2 3a af 23
>3a4a18	08 00 8f 70 f2 3a 28 2b 60 08 c2 30 20 96 1b 20
>3a4a28	7e 17 20 b3 04 20 d7 49 e2 20 a9 2c 85 35 20 b7
>3a4a38	1c b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00
>3a4a48	80 17 20 75 1b 20 7e 17 20 89 04 c2 20 a5 21 8f
>3a4a58	54 03 00 a5 23 8f 56 03 00 22 18 11 00 b0 1f 08
>3a4a68	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08
>3a4a78	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 28 60
>3a4a88	8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a4a98	48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 21 a9
>3a4aa8	00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85
>3a4ab8	e7 c2 20 a9 eb 4a 85 e5 20 a2 44 e2 20 af 20 03
>3a4ac8	00 85 21 a9 00 85 22 85 23 85 24 a9 00 85 25 85
>3a4ad8	e8 a9 3a 85 e7 c2 20 a9 f3 4a 85 e5 20 a2 44 28
>3a4ae8	2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53 53
>3a4af8	54 41 54 00 08 c2 30 20 96 1b 20 7e 17 20 b3 04
>3a4b08	a5 21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff ff 8f
>3a4b18	54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 d0 18
>3a4b28	20 88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4b38	11 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4b48	d2 08 20 d0 18 28 60 08 c2 30 20 96 1b 20 7e 17
>3a4b58	20 b3 04 20 d7 49 a9 00 00 8f 54 03 00 a9 01 00
>3a4b68	8f 56 03 00 20 8e 41 22 18 11 00 b0 22 20 88 4a
>3a4b78	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1
>3a4b88	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20
>3a4b98	88 4a c2 20 a2 12 00 18 bf 6c f2 3a 69 00 00 85
>3a4ba8	90 bf 6e f2 3a 69 01 00 85 92 e2 20 a9 00 87 90
>3a4bb8	c2 20 a9 00 00 85 78 a9 01 00 85 7a a2 00 00 e2
>3a4bc8	20 a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f
>3a4bd8	e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d
>3a4be8	00 4f 20 25 21 e6 78 d0 d3 e6 7a 80 cf e0 00 00
>3a4bf8	f0 0a e2 20 a9 00 9d 00 4f 20 25 21 28 60 08 c2
>3a4c08	30 20 96 1b 20 7e 17 20 b3 04 20 d7 49 e2 20 a9
>3a4c18	2c 20 82 1c c2 20 20 7e 17 20 89 04 a5 21 8f 50
>3a4c28	03 00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 82
>3a4c38	1c 20 7e 17 20 89 04 a5 21 8f 58 03 00 a5 23 8f
>3a4c48	5a 03 00 22 1c 11 00 b0 22 20 88 4a 08 c2 20 48
>3a4c58	a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20
>3a4c68	29 ff 00 20 d0 18 e2 20 dc d2 08 20 88 4a 28 60
>3a4c78	da 5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00 04
>3a4c88	f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 96 1b
>3a4c98	20 7e 17 20 b3 04 20 d7 49 a9 00 00 85 a4 e2 20
>3a4ca8	a9 01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9 a9
>3a4cb8	ff ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff ff
>3a4cc8	85 57 a9 ff 7f 85 59 20 4f 13 e2 20 a9 80 85 b2
>3a4cd8	c2 20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f 58
>3a4ce8	03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>3a4cf8	22 1c 11 00 b0 22 20 88 4a 08 c2 20 48 a9 00 08
>3a4d08	5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00
>3a4d18	20 d0 18 e2 20 dc d2 08 20 88 4a 28 60 08 c2 30
>3a4d28	20 96 1b 20 7e 17 20 b3 04 20 78 4c 22 04 11 00
>3a4d38	b0 22 20 88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4d48	20 a9 13 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a4d58	20 dc d2 08 20 88 4a 28 60 da 08 e2 20 c9 61 90
>3a4d68	08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>3a4d78	df 8c 4d 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>3a4d88	28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>3a4d98	5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a4da8	20 7e 17 20 b3 04 20 78 4c 22 10 11 00 b0 22 20
>3a4db8	88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>3a4dc8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a4dd8	08 e2 20 a9 2c 20 82 1c c2 20 20 7e 17 20 b3 04
>3a4de8	ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>3a4df8	20 95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>3a4e08	21 f0 6d c9 2e f0 30 22 61 4d 3a b0 1f 08 c2 20
>3a4e18	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a4e28	20 29 ff 00 20 d0 18 e2 20 dc d2 08 95 7c c8 e8
>3a4e38	c0 08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0 31 22
>3a4e48	61 4d 3a b0 22 20 88 4a 08 c2 20 48 a9 00 08 5b
>3a4e58	68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a4e68	d0 18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00 d0 cb
>3a4e78	a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00 d0
>3a4e88	f5 22 14 11 00 b0 22 20 88 4a 08 c2 20 48 a9 00
>3a4e98	08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29 ff
>3a4ea8	00 20 d0 18 e2 20 dc d2 08 20 88 4a 28 60 08 08
>3a4eb8	c2 20 48 a9 00 08 5b 68 28 c2 30 20 7e 17 20 b3
>3a4ec8	04 a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2 20 a9
>3a4ed8	2c 20 82 1c c2 20 20 7e 17 20 b3 04 a5 21 8f 68
>3a4ee8	03 00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f 08 c2
>3a4ef8	20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1 08 00
>3a4f08	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 28 60 5c
>3a4f18	d4 68 3a 5c 25 67 3a 5c d5 68 3a 5c 51 58 3a 5c
>3a4f28	ae 58 3a 5c e1 57 3a 5c 67 57 3a 5c e4 5c 3a 5c
>3a4f38	d2 53 3a 5c ff 56 3a 5c ba 56 3a 5c 44 56 3a 5c
>3a4f48	e3 67 3a 5c e0 54 3a 5c 36 53 3a 5c 5e 68 3a 5c
>3a4f58	0e 54 3a 5c d7 68 3a 5c d0 68 3a 5c fd 55 3a 5c
>3a4f68	d8 68 3a 18 fb c2 20 a9 ff fe 1b 58 5c 78 4f 3a
>3a4f78	c2 30 22 36 53 3a 20 08 00 20 0c 00 8b e2 20 a9
>3a4f88	00 48 ab a2 00 4f 20 c1 03 ab 22 1b 4f 3a 22 23
>3a4f98	4f 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 af
>3a4fa8	4f 20 c0 02 ab 28 6b 41 20 3c 73 74 61 72 74 3e
>3a4fb8	20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73
>3a4fc8	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4fd8	0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74
>3a4fe8	61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66
>3a4ff8	20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61
>3a5008	72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f
>3a5018	66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61
>3a5028	72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61
>3a5038	73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61
>3a5048	6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a5058	64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c
>3a5068	20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f
>3a5078	72 79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>3a5088	47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74
>3a5098	61 72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74
>3a50a8	20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b
>3a50b8	61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20
>3a50c8	74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e
>3a50d8	20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74
>3a50e8	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a50f8	6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74
>3a5108	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>3a5118	62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66
>3a5128	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>3a5138	6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20
>3a5148	20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20 5b
>3a5158	64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c
>3a5168	73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>3a5178	75 6d 70 20 74 68 65 20 76 61 6c 75 65 20 69 6e
>3a5188	20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73
>3a5198	70 6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20
>3a51a8	6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72 73
>3a51b8	0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e
>3a51c8	20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20
>3a51d8	3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d
>3a51e8	20 20 43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e
>3a51f8	74 65 6e 74 73 20 6f 66 20 74 68 65 20 72 65 67
>3a5208	69 73 74 65 72 73 0d 0d 53 20 20 20 20 20 53 41
>3a5218	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a5228	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>3a5238	54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a5248	3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20
>3a5258	54 72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20
>3a5268	64 61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f
>3a5278	72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53
>3a5288	65 74 20 74 68 65 20 72 65 67 69 73 74 65 72 20
>3a5298	77 69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20
>3a52a8	74 68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72
>3a52b8	0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20
>3a52c8	42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e
>3a52d8	20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e
>3a52e8	2e 0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e
>3a52f8	20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73
>3a5308	70 6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c
>3a5318	70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48
>3a5328	a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2
>3a5338	20 48 a9 3a 48 ab 68 28 a2 15 69 20 c0 02 e2 20
>3a5348	a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48
>3a5358	a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 43 02 c2
>3a5368	20 a9 20 00 20 18 00 af 44 02 00 20 d0 02 a9 20
>3a5378	00 20 18 00 af 46 02 00 20 d0 02 a9 20 00 20 18
>3a5388	00 af 48 02 00 20 d0 02 a9 20 00 20 18 00 af 4a
>3a5398	02 00 20 d0 02 a9 20 00 20 18 00 af 4e 02 00 20
>3a53a8	ea 02 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20
>3a53b8	d0 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 2e
>3a53c8	66 3a 28 20 33 02 20 33 02 6b 08 0b 08 c2 20 48
>3a53d8	a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f
>3a53e8	c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 33 02 2b
>3a53f8	28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a5408	69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b
>3a5418	68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15
>3a5428	90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20
>3a5438	a5 0d c5 11 d0 03 4c c5 54 c2 20 18 a5 0d 69 01
>3a5448	00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15
>3a5458	69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2
>3a5468	20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b
>3a5478	c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85
>3a5488	17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5
>3a5498	11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85
>3a54a8	11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01
>3a54b8	00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 33 02
>3a54c8	2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0
>3a54d8	90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9
>3a54e8	46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9
>3a54f8	02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85
>3a5508	11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2
>3a5518	20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85
>3a5528	11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20
>3a5538	a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 cb
>3a5548	54 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69 01
>3a5558	00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90
>3a5568	db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18 00
>3a5578	e2 20 a5 34 20 ea 02 a9 3a 20 18 00 c2 20 a5 32
>3a5588	20 d0 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18
>3a5598	00 a7 32 20 ea 02 22 0d 66 3a e2 20 c6 47 d0 ea
>3a55a8	a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00
>3a55b8	48 ab 68 28 a2 7c 08 20 c0 02 20 33 02 20 4a 02
>3a55c8	a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 33
>3a55d8	02 2b ab 28 6b 4c 31 55 08 8d 90 08 e2 20 bd 00
>3a55e8	00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce 90
>3a55f8	08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b
>3a5608	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d
>3a5618	85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57 08
>3a5628	a0 7c 08 22 e0 55 3a a0 00 00 b9 7c 08 87 32 22
>3a5638	0d 66 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08
>3a5648	c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48
>3a5658	ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b 08
>3a5668	a0 7c 08 22 e0 55 3a c2 20 a5 0d 85 32 a5 0f 85
>3a5678	34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2
>3a5688	20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0 f4
>3a5698	c2 20 a5 32 85 4a a5 34 85 4c 22 b7 60 3a e2 20
>3a56a8	a9 20 20 18 00 22 0d 66 3a 80 c6 20 33 02 ab 2b
>3a56b8	28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31
>3a56c8	f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>3a56d8	af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>3a56e8	4c 02 00 5b e2 20 a9 3a 48 a9 56 48 a9 fa 48 4c
>3a56f8	31 57 ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b 68
>3a5708	28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5
>3a5718	0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af
>3a5728	4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48
>3a5738	ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00 af
>3a5748	41 02 00 8f a2 08 00 af 40 02 00 8f a1 08 00 af
>3a5758	4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08 00 08
>3a5768	0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48
>3a5778	a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c
>3a5788	c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01
>3a5798	00 85 47 80 08 a2 d9 68 20 c0 02 80 35 a5 0d 85
>3a57a8	4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09
>3a57b8	22 b7 60 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01
>3a57c8	00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20
>3a57d8	33 02 20 33 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48
>3a57e8	a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28
>3a57f8	e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02
>3a5808	c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e
>3a5818	46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6
>3a5828	1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9
>3a5838	06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10
>3a5848	a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48
>3a5858	a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 46 69
>3a5868	3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf
>3a5878	87 58 3a 8f 2d 08 00 22 ab 58 3a ab 2b 28 6b 27
>3a5888	4f 2f 4f 33 4f 37 4f 3b 4f 3f 4f 43 4f 47 4f 4b
>3a5898	4f 4f 4f 2b 4f 53 4f 57 4f 5b 4f 23 53 5f 4f 63
>3a58a8	4f 9c 4f 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46 08
>3a58b8	5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 54 5a c2 20
>3a58c8	a5 0d 85 32 a5 0f 85 34 c2 20 22 56 5c 3a c9 ff
>3a58d8	ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85
>3a58e8	4f 80 4c 20 33 02 08 e2 20 48 a9 3a 48 ab 68 28
>3a58f8	c2 10 a2 8b 5a 20 c0 02 4c 54 5a 20 33 02 08 e2
>3a5908	20 48 a9 3a 48 ab 68 28 c2 10 a2 9a 5a 20 c0 02
>3a5918	4c 54 5a e2 20 22 8c 5c 3a c9 ff f0 de 85 4f c9
>3a5928	03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22
>3a5938	84 5b 3a b0 03 4c 1d 5a 87 32 22 0d 66 3a 08 e2
>3a5948	20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34
>3a5958	85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14
>3a5968	f0 7c 29 3f c9 02 d0 03 4c 4b 5a c2 20 29 ff 00
>3a5978	aa e2 20 bf 53 65 3a c9 03 f0 57 c9 02 f0 5f c9
>3a5988	01 f0 67 80 71 c2 20 a5 54 c9 cb 61 f0 26 c9 2f
>3a5998	62 f0 2a c9 af 61 f0 1c c9 b3 61 f0 17 c9 bb 61
>3a59a8	f0 12 c9 a3 61 f0 0d c9 b7 61 f0 08 c9 9f 61 f0
>3a59b8	03 4c 37 59 e2 20 a9 12 85 4f 4c 37 59 e2 20 a9
>3a59c8	16 85 4f 4c 37 59 22 c7 5a 3a 90 60 c9 02 f0 0e
>3a59d8	80 18 a0 02 00 b9 96 08 97 56 22 0d 66 3a a0 01
>3a59e8	00 b9 96 08 97 56 22 0d 66 3a a0 00 00 b9 96 08
>3a59f8	97 56 22 0d 66 3a e2 20 a9 41 20 18 00 a9 20 20
>3a5a08	18 00 a6 32 86 4a a6 34 86 4c 22 b7 60 3a a9 20
>3a5a18	20 18 00 80 37 20 33 02 08 e2 20 48 a9 3a 48 ab
>3a5a28	68 28 c2 10 a2 58 5a 20 c0 02 80 20 20 33 02 08
>3a5a38	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 a8 5a 20 c0
>3a5a48	02 80 09 a5 4f 29 c0 d0 95 4c f2 59 2b ab 28 6b
>3a5a58	41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20
>3a5a68	6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20
>3a5a78	74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e
>3a5a88	2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e
>3a5a98	0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00
>3a5aa8	52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20
>3a5ab8	69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08
>3a5ac8	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f c9
>3a5ad8	12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18
>3a5ae8	a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5
>3a5af8	50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9
>3a5b08	16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9
>3a5b18	01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80
>3a5b28	18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0
>3a5b38	04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2
>3a5b48	10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2 00
>3a5b58	00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2
>3a5b68	20 06 50 26 52 06 50 26 52 06 50 26 52 06 50 26
>3a5b78	52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2
>3a5b88	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48 ab
>3a5b98	68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0
>3a5ba8	00 00 bd 51 62 f0 1b c5 54 d0 0d e2 20 b9 53 64
>3a5bb8	29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab
>3a5bc8	2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a5bd8	68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0
>3a5be8	11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8
>3a5bf8	80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20
>3a5c08	b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41
>3a5c18	b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 45
>3a5c28	5b 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28 a0
>3a5c38	00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68
>3a5c48	18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08
>3a5c58	c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36 a5
>3a5c68	13 85 38 a9 df 60 85 03 a9 3a 00 85 05 22 ce 5b
>3a5c78	3a b0 0d 22 2c 5c 3a a7 03 d0 f2 a9 ff ff 80 02
>3a5c88	a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a5c98	c2 30 a5 15 85 36 a5 17 85 38 a9 6b 65 85 03 a9
>3a5ca8	3a 00 85 05 22 ce 5b 3a b0 22 22 2c 5c 3a c2 20
>3a5cb8	18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2
>3a5cc8	20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 2c 5c 3a
>3a5cd8	e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08
>3a5ce8	c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08
>3a5cf8	00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d
>3a5d08	69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5
>3a5d18	0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32
>3a5d28	69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 50 5d
>3a5d38	3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90
>3a5d48	ec 20 33 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18
>3a5d58	00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28
>3a5d68	c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 b7 60 3a
>3a5d78	a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2
>3a5d88	20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0
>3a5d98	0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c
>3a5da8	48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff
>3a5db8	00 0a aa bf 51 62 3a aa 22 31 60 3a e2 20 a7 00
>3a5dc8	aa bf 53 64 3a 22 0d 66 3a 22 de 5d 3a 20 33 02
>3a5dd8	20 4a 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa
>3a5de8	68 7c ec 5d 1c 5e 37 5e 3e 5e 63 5e 6a 5e 85 5e
>3a5df8	a7 5e b8 5e f5 5e fd 5e 0e 5f 1f 5f 26 5f 4b 5f
>3a5e08	78 5f e4 5e c9 5e 96 5e 6b 5f 75 5f 89 5f b8 5f
>3a5e18	66 5f c9 5f a9 28 20 18 00 22 e0 5f 3a a9 2c 20
>3a5e28	18 00 a9 58 20 18 00 a9 29 20 18 00 4c da 5f 22
>3a5e38	e0 5f 3a 4c da 5f e2 20 48 a9 23 20 18 00 68 29
>3a5e48	c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 ea 5f
>3a5e58	3a 4c da 5f 22 e0 5f 3a 4c da 5f 22 ea 5f 3a 4c
>3a5e68	da 5f a9 28 20 18 00 22 e0 5f 3a a9 29 20 18 00
>3a5e78	a9 2c 20 18 00 a9 59 20 18 00 4c da 5f 22 e0 5f
>3a5e88	3a a9 2c 20 18 00 a9 58 20 18 00 4c da 5f 22 e0
>3a5e98	5f 3a a9 2c 20 18 00 a9 59 20 18 00 4c da 5f 22
>3a5ea8	ea 5f 3a a9 2c 20 18 00 a9 59 20 18 00 4c da 5f
>3a5eb8	22 ea 5f 3a a9 2c 20 18 00 a9 58 20 18 00 4c da
>3a5ec8	5f a9 28 20 18 00 22 ea 5f 3a a9 2c 20 18 00 a9
>3a5ed8	58 20 18 00 a9 29 20 18 00 4c da 5f a9 28 20 18
>3a5ee8	00 22 e0 5f 3a a9 29 20 18 00 4c da 5f a9 41 20
>3a5ef8	18 00 4c de 5f 22 e0 5f 3a a9 2c 20 18 00 a9 53
>3a5f08	20 18 00 4c da 5f a9 5b 20 18 00 22 e0 5f 3a a9
>3a5f18	5d 20 18 00 4c da 5f 22 f8 5f 3a 4c de 5f a9 28
>3a5f28	20 18 00 22 e0 5f 3a a9 2c 20 18 00 a9 53 20 18
>3a5f38	00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00
>3a5f48	4c da 5f a9 5b 20 18 00 22 e0 5f 3a a9 5d 20 18
>3a5f58	00 a9 2c 20 18 00 a9 59 20 18 00 4c da 5f a0 02
>3a5f68	00 80 03 a0 01 00 22 5e 60 3a 4c de 5f 4c de 5f
>3a5f78	22 f8 5f 3a a9 2c 20 18 00 a9 58 20 18 00 4c de
>3a5f88	5f a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01
>3a5f98	00 22 43 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6
>3a5fa8	00 a0 01 00 22 43 02 3a ab 22 0d 66 3a 4c da 5f
>3a5fb8	a9 28 20 18 00 22 ea 5f 3a a9 29 20 18 00 4c da
>3a5fc8	5f a9 5b 20 18 00 22 ea 5f 3a a9 5d 20 18 00 4c
>3a5fd8	da 5f 22 0d 66 3a 28 6b 08 e2 20 a7 00 20 ea 02
>3a5fe8	28 6b 08 c2 30 a7 00 20 d0 02 22 0d 66 3a 28 6b
>3a5ff8	08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28
>3a6008	08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7
>3a6018	00 99 90 08 22 0d 66 3a c8 c0 03 00 d0 f1 22 b7
>3a6028	60 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08
>3a6038	e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8
>3a6048	bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20
>3a6058	20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b
>3a6068	68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64
>3a6078	19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85
>3a6088	18 22 0d 66 3a a7 00 85 19 30 04 64 1a 80 04 a9
>3a6098	ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02
>3a60a8	65 1a 85 1a 22 b7 60 3a 22 0d 66 3a 2b 28 6b 08
>3a60b8	0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a60c8	a5 4c 20 ea 02 e2 20 a9 3a 20 18 00 c2 20 a5 4a
>3a60d8	20 d0 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45
>3a60e8	4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43
>3a60f8	4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c
>3a6108	53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44
>3a6118	45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53
>3a6128	54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42
>3a6138	52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50
>3a6148	48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44
>3a6158	45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43
>3a6168	4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54
>3a6178	59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54
>3a6188	58 41 00 54 58 53 00 54 41 58 00 54 53 58 00 44
>3a6198	45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42
>3a61a8	56 43 00 42 56 53 00 42 43 43 00 42 43 53 00 42
>3a61b8	4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00 53
>3a61c8	54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50
>3a61d8	48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50
>3a61e8	48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57
>3a61f8	41 49 00 58 42 41 00 54 43 53 00 54 53 43 00 54
>3a6208	43 44 00 54 44 43 00 54 58 59 00 54 59 58 00 53
>3a6218	54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57
>3a6228	44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53
>3a6238	45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50
>3a6248	45 41 00 4a 4d 4c 00 00 00 37 61 df 60 1f 62 df
>3a6258	60 bf 61 df 60 ff 60 df 60 47 61 df 60 ff 60 df
>3a6268	61 bf 61 df 60 ff 60 df 60 9f 61 df 60 df 60 df
>3a6278	60 c3 61 df 60 ff 60 df 60 67 61 df 60 1b 61 ff
>3a6288	61 c3 61 df 60 ff 60 df 60 3b 61 e3 60 23 62 e3
>3a6298	60 1f 61 e3 60 03 61 e3 60 4b 61 e3 60 03 61 e3
>3a62a8	61 1f 61 e3 60 03 61 e3 60 a3 61 e3 60 e3 60 e3
>3a62b8	60 1f 61 e3 60 03 61 e3 60 6b 61 e3 60 17 61 03
>3a62c8	62 1f 61 e3 60 03 61 e3 60 3f 61 e7 60 27 62 e7
>3a62d8	60 3b 62 e7 60 07 61 e7 60 4f 61 e7 60 07 61 e7
>3a62e8	61 23 61 e7 60 07 61 e7 60 a7 61 e7 60 e7 60 e7
>3a62f8	60 3f 62 e7 60 07 61 e7 60 6f 61 e7 60 cf 61 07
>3a6308	62 4b 62 e7 60 07 61 e7 60 43 61 eb 60 2b 62 eb
>3a6318	60 c7 61 eb 60 0b 61 eb 60 53 61 eb 60 0b 61 eb
>3a6328	61 23 61 eb 60 0b 61 eb 60 ab 61 eb 60 eb 60 eb
>3a6338	60 c7 61 eb 60 0b 61 eb 60 73 61 eb 60 d3 61 0b
>3a6348	62 23 61 eb 60 0b 61 eb 60 cb 61 ef 60 2f 62 ef
>3a6358	60 27 61 ef 60 0f 61 ef 60 57 61 1f 61 87 61 ef
>3a6368	61 27 61 ef 60 0f 61 ef 60 af 61 ef 60 ef 60 ef
>3a6378	60 27 61 ef 60 0f 61 ef 60 77 61 ef 60 8b 61 0f
>3a6388	62 c7 61 ef 60 c7 61 ef 60 2b 61 f3 60 13 61 f3
>3a6398	60 2b 61 f3 60 13 61 f3 60 5b 61 f3 60 8f 61 f3
>3a63a8	61 2b 61 f3 60 13 61 f3 60 b3 61 f3 60 f3 60 f3
>3a63b8	60 2b 61 f3 60 13 61 f3 60 7b 61 f3 60 93 61 13
>3a63c8	62 2b 61 f3 60 13 61 f3 60 2f 61 f7 60 33 62 f7
>3a63d8	60 2f 61 f7 60 17 61 f7 60 5f 61 f7 60 97 61 f7
>3a63e8	61 2f 61 f7 60 17 61 f7 60 b7 61 f7 60 f7 60 f7
>3a63f8	60 43 62 f7 60 17 61 f7 60 7f 61 f7 60 d7 61 17
>3a6408	62 4b 62 f7 60 17 61 f7 60 33 61 fb 60 37 62 fb
>3a6418	60 33 61 fb 60 1b 61 fb 60 63 61 fb 60 9b 61 fb
>3a6428	61 33 61 fb 60 1b 61 fb 60 bb 61 fb 60 fb 60 fb
>3a6438	60 47 62 fb 60 1b 61 fb 60 83 61 fb 60 db 61 1b
>3a6448	62 3b 61 fb 60 1b 61 fb 60 00 00 13 00 02 09 01
>3a6458	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01
>3a6468	05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01
>3a6478	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05
>3a6488	05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14
>3a6498	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14
>3a64a8	05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01
>3a64b8	01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05
>3a64c8	05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01
>3a64d8	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>3a64e8	05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01
>3a64f8	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>3a6508	05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01
>3a6518	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01
>3a6528	05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01
>3a6538	01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03
>3a6548	05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01
>3a6558	01 02 02 00 01 01 03 01 01 03 01 02 01 01 00 02
>3a6568	02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00
>3a6578	0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58
>3a6588	00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03
>3a6598	64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53
>3a65a8	00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64
>3a65b8	2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53
>3a65c8	29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28
>3a65d8	64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28
>3a65e8	64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64
>3a65f8	64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64
>3a6608	5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00 69 01
>3a6618	00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a 08
>3a6628	00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a
>3a6638	b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00
>3a6648	68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68
>3a6658	28 e2 20 a7 32 f0 0a c9 20 d0 06 22 0d 66 3a 80
>3a6668	f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 0d 66
>3a6678	3a 22 4f 66 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a
>3a6688	aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9
>3a6698	22 f0 06 22 0d 66 3a 80 f2 a9 00 87 32 22 0d 66
>3a66a8	3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a66b8	20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0
>3a66c8	0d 20 68 03 90 0e 22 45 5b 3a a9 01 85 4a 22 0d
>3a66d8	66 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a
>3a66e8	0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2
>3a66f8	20 64 31 22 4f 66 3a a7 32 f0 21 c9 22 d0 06 22
>3a6708	6a 66 3a 80 0a 22 ad 66 3a a5 31 c9 09 b0 0d a7
>3a6718	32 f0 09 c9 20 f0 dc 20 68 03 b0 d7 6b 08 0b 08
>3a6728	c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00
>3a6738	74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f
>3a6748	85 00 85 32 e2 20 22 4f 66 3a c9 00 f0 38 c2 20
>3a6758	a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 0d 66
>3a6768	3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8
>3a6778	80 eb 86 0b a9 00 87 32 22 0d 66 3a a7 08 c9 41
>3a6788	f0 07 22 f7 66 3a 2b 28 6b 22 4f 66 3a a7 32 f0
>3a6798	f5 22 ad 66 3a 22 4f 66 3a a7 32 f0 e9 c2 20 a5
>3a67a8	32 85 11 e2 20 a5 34 85 13 22 0d 66 3a a7 32 f0
>3a67b8	26 c9 20 d0 f4 a9 00 87 32 e6 31 22 0d 66 3a 22
>3a67c8	4f 66 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5
>3a67d8	34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20
>3a67e8	a5 31 d0 0f a2 d9 68 a9 3a 48 ab 20 c0 02 20 33
>3a67f8	02 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08
>3a6808	00 20 d7 49 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff
>3a6818	ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f
>3a6828	54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2
>3a6838	20 a2 ff 68 a9 3a 48 ab 20 c0 02 af 2e 03 00 20
>3a6848	ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20 33
>3a6858	02 20 33 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03
>3a6868	f0 0f a2 d9 68 a9 3a 48 ab 20 c0 02 20 33 02 80
>3a6878	54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20
>3a6888	d7 49 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15
>3a6898	8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25
>3a68a8	e2 20 a2 e9 68 a9 3a 48 ab 20 c0 02 af 2e 03 00
>3a68b8	20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20
>3a68c8	33 02 20 33 02 28 ab 6b 5c 58 21 3a 6b 00 00 00
>3a68d8	00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d
>3a68e8	00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20
>3a68f8	66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f
>3a6908	20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20
>3a6918	50 43 20 20 20 20 20 41 20 20 20 20 58 20 20 20
>3a6928	20 59 20 20 20 20 53 50 20 20 20 44 42 52 20 44
>3a6938	50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43
>3a6948	44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f
>3a6958	00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a6968	48 a9 00 48 ab 68 28 c2 30 20 98 69 a9 ff fe 1b
>3a6978	08 e2 20 48 a9 3a 48 ab 68 28 a2 3c d2 20 c0 02
>3a6988	08 e2 20 48 a9 00 48 ab 68 28 4c 58 21 4c 95 69
>3a6998	08 20 b5 01 20 8e 41 28 60 00 00 00 00 00 00 00
>3a69a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1636 times (26176 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8	4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208	54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218	00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228	4c 49 4e 45 41 52 00 52 45 43 54 00 0d 52 45 41
>3ad238	44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad248	42 41 53 49 43 38 31 36 20 76 30 2e 31 2e 30 2d
>3ad258	61 6c 70 68 61 2b 31 36 30 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
