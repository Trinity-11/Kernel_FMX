
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Sat Aug 08 14:01:59 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 ea 12 38	jsl $3812ea	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 09 07 39	jmp $390709	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 8c 16 39	jmp $39168c	RESTORE         JML IRESTORE
.381008	5c a8 06 39	jmp $3906a8	BREAK           JML IBREAK
.38100c	5c ef 06 39	jmp $3906ef	READY           JML IREADY
.381010	5c 8d 16 39	jmp $39168d	SCINIT          JML ISCINIT
.381014	5c 8e 16 39	jmp $39168e	IOINIT          JML IIOINIT
.381018	5c a2 07 39	jmp $3907a2	PUTC            JML IPUTC
.38101c	5c 8b 07 39	jmp $39078b	PUTS            JML IPUTS
.381020	5c d3 08 39	jmp $3908d3	PUTB            JML IPUTB
.381024	5c 61 41 39	jmp $394161	PUTBLOCK        JML IPUTBLOCK
.381028	5c 8f 16 39	jmp $39168f	SETLFS          JML ISETLFS
.38102c	5c 90 16 39	jmp $391690	SETNAM          JML ISETNAM
.381030	5c 91 16 39	jmp $391691	OPEN            JML IOPEN
.381034	5c 92 16 39	jmp $391692	CLOSE           JML ICLOSE
.381038	5c 0a 07 39	jmp $39070a	SETIN           JML ISETIN
.38103c	5c 13 07 39	jmp $390713	SETOUT          JML ISETOUT
.381040	5c 93 16 39	jmp $391693	GETB            JML IGETB
.381044	5c 0e 41 39	jmp $39410e	GETBLOCK        JML IGETBLOCK
.381048	5c 4c 07 39	jmp $39074c	GETCH           JML IGETCH
.38104c	5c 25 07 39	jmp $390725	GETCHW          JML IGETCHW
.381050	5c 1c 07 39	jmp $39071c	GETCHE          JML IGETCHE
.381054	5c 94 16 39	jmp $391694	GETS            JML IGETS
.381058	5c 95 16 39	jmp $391695	GETLINE         JML IGETLINE
.38105c	5c 96 16 39	jmp $391696	GETFIELD        JML IGETFIELD
.381060	5c 97 16 39	jmp $391697	TRIM            JML ITRIM
.381064	5c 98 16 39	jmp $391698	PRINTC          JML IPRINTC
.381068	5c 99 16 39	jmp $391699	PRINTS          JML IPRINTS
.38106c	5c d4 08 39	jmp $3908d4	PRINTCR         JML IPRINTCR
.381070	5c 9a 16 39	jmp $39169a	PRINTF          JML IPRINTF
.381074	5c 9b 16 39	jmp $39169b	PRINTI          JML IPRINTI
.381078	5c 94 0a 39	jmp $390a94	PRINTH          JML IPRINTH
.38107c	5c 9c 16 39	jmp $39169c	PRINTAI         JML IPRINTAI
.381080	5c b1 0a 39	jmp $390ab1	PRINTAH         JML IPRINTAH
.381084	5c d8 09 39	jmp $3909d8	LOCATE          JML ILOCATE
.381088	5c 9d 16 39	jmp $39169d	PUSHKEY         JML IPUSHKEY
.38108c	5c 9e 16 39	jmp $39169e	PUSHKEYS        JML IPUSHKEYS
.381090	5c 34 09 39	jmp $390934	CSRRIGHT        JML ICSRRIGHT
.381094	5c 67 09 39	jmp $390967	CSRLEFT         JML ICSRLEFT
.381098	5c 8d 09 39	jmp $39098d	CSRUP           JML ICSRUP
.38109c	5c b3 09 39	jmp $3909b3	CSRDOWN         JML ICSRDOWN
.3810a0	5c 23 09 39	jmp $390923	CSRHOME         JML ICSRHOME
.3810a4	5c 24 0a 39	jmp $390a24	SCROLLUP        JML ISCROLLUP
.3810a8	5c ff 0a 39	jmp $390aff	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c ca 0b 39	jmp $390bca	INITCHLUT	    JML IINITCHLUT
.3810b0	5c b4 0f 39	jmp $390fb4	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c b3 10 39	jmp $3910b3	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 1e 12 39	jmp $39121e	TESTSID         JML ITESTSID
.3810bc	5c 93 0f 39	jmp $390f93	INITCURSOR      JML IINITCURSOR
.3810c0	5c 49 0f 39	jmp $390f49	INITFONTSET     JML IINITFONTSET
.3810c4	5c f9 0b 39	jmp $390bf9	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 19 0c 39	jmp $390c19	INITALLLUT      JML IINITALLLUT
.3810cc	5c db 0c 39	jmp $390cdb	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c d4 0d 39	jmp $390dd4	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 0b 0e 39	jmp $390e0b	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 0c 0e 39	jmp $390e0c	INITSPRITE      JML IINITSPRITE
.3810dc	5c ed 12 39	jmp $3912ed	INITCODEC       JML IINITCODEC
.3810e0	5c 69 13 39	jmp $391369	RESETCODEC      JML IRESETCODEC
.3810e4	5c d7 13 39	jmp $3913d7	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 8c 13 39	jmp $39138c	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 1a 37 39	jmp $39371a	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 5a 53 39	jmp $39535a	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c ed 53 39	jmp $3953ed	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 27 54 39	jmp $395427	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c c0 54 39	jmp $3954c0	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 5b 54 39	jmp $39545b	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 6a 55 39	jmp $39556a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c 2c 55 39	jmp $39552c	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 66 55 39	jmp $395566	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 03 56 39	jmp $395603	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 2a 56 39	jmp $39562a	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 2e 56 39	jmp $39562e	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 0f 58 39	jmp $39580f	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c e4 40 39	jmp $3940e4	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c a8 58 39	jmp $3958a8	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c c7 44 39	jmp $3944c7	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 21 0d 39	jmp $390d21	SETSIZES        JML ISETSIZES
.381130	5c d1 59 39	jmp $3959d1	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 33 59 39	jmp $395933	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 87 59 39	jmp $395987	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 58 12	jsr $381258	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 b3 12	jsr $3812b3	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 72 12	jsr $381272	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 eb 12	jsr $3812eb	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 be 12	jsr $3812be	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 c9 12	jsr $3812c9	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 d4 12	jsr $3812d4	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 df 12	jsr $3812df	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	08		php		                PHP
.3811fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3811fd	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381201	29 01		and #$01	                AND #FNX0_INT00_SOF
.381203	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381207	e2 20		sep #$20	                SEP #$20        ; set A short
.381209	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120d	d0 06		bne $381215	                BNE dec_motor                   ; If not zero: decrement the timer
.38120f	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.381213	f0 28		beq $38123d	                BEQ sof_timeout                 ; If zero: move on to the next timer
.381215	af 4e a0 38	lda $38a04e	dec_motor       LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.381219	3a		dec a		                DEC A
.38121a	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.38121e	c9 ff		cmp #$ff	                CMP #$FF                        ; Did it roll over?
.381220	d0 0b		bne $38122d	                BNE chk_motor_end               ; No: check to see if we're a the end
.381222	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.381226	3a		dec a		                DEC A
.381227	8f 4f a0 38	sta $38a04f	                STA @l FDC_MOTOR_TIMER+1
.38122b	80 10		bra $38123d	                BRA sof_timeout                 ; And move on to the next timer
.38122d	af 4e a0 38	lda $38a04e	chk_motor_end   LDA @l FDC_MOTOR_TIMER          ; Check timer
.381231	d0 0a		bne $38123d	                BNE sof_timeout                 ; if it's <>0, move on to the next timer
.381233	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1
.381237	d0 04		bne $38123d	                BNE sof_timeout
.381239	22 dc 61 39	jsl $3961dc	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.38123d					sof_timeout
.38123d	e2 20		sep #$20	                SEP #$20        ; set A short
.38123f	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.381243	f0 11		beq $381256	                BEQ sof_int_done                ; If it's 0, we don't do anything
.381245	3a		dec a		                DEC A                           ; Count down one tick
.381246	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.38124a	d0 0a		bne $381256	                BNE sof_int_done                ; If not 0, we're done
.38124c	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.381250	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.381252	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381256	28		plp		sof_int_done    PLP
.381257	60		rts		                RTS
.381258					TIMER0_INTERRUPT
.381258	e2 20		sep #$20	                SEP #$20        ; set A short
.38125a	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38125e	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381260	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381264	60		rts		                RTS
.381265					TIMER2_INTERRUPT
.381265	e2 20		sep #$20	                SEP #$20        ; set A short
.381267	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38126b	09 20		ora #$20	                ORA #TIMER2TRIGGER
.38126d	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381271	60		rts		                RTS
.381272					MOUSE_INTERRUPT
.381272	e2 20		sep #$20	                SEP #$20        ; set A short
.381274	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381278	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38127a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38127e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.381282	a2 00 00	ldx #$0000	                LDX #$0000
.381285	e2 10		sep #$10	                SEP #$10        ; set X short
.381287	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381289	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38128d	e8		inx		                INX
.38128e	e0 03		cpx #$03	                CPX #$03
.381290	d0 1c		bne $3812ae	                BNE EXIT_FOR_NEXT_VALUE
.381292	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381296	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381298	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.38129c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38129e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3812a2	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3812a4	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3812a8	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3812aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812ac	a2 00		ldx #$00	                LDX #$00
.3812ae					EXIT_FOR_NEXT_VALUE
.3812ae	86 e0		stx $e0		                STX MOUSE_PTR
.3812b0	c2 10		rep #$10	                REP #$10        ; set X long
.3812b2	60		rts		                RTS
.3812b3					FDC_INTERRUPT
.3812b3	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812b7	29 40		and #$40	                AND #FNX0_INT06_FDC
.3812b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3812bd	60		rts		                RTS
.3812be					COM2_INTERRUPT
.3812be	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812c2	29 08		and #$08	                AND #FNX1_INT03_COM2
.3812c4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c8	60		rts		                RTS
.3812c9					COM1_INTERRUPT
.3812c9	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812cd	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812cf	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812d3	60		rts		                RTS
.3812d4					MPU401_INTERRUPT
.3812d4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d8	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812da	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812de	60		rts		                RTS
.3812df					LPT1_INTERRUPT
.3812df	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812e3	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812e5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812e9	60		rts		                RTS
.3812ea					NMI_HANDLER
.3812ea	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812eb					KEYBOARD_INTERRUPT
.3812eb	48		pha		                PHA             ; begin setdp macro
.3812ec	08		php		                PHP
.3812ed	c2 20		rep #$20	                REP #$20        ; set A long
.3812ef	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812f2	5b		tcd		                TCD
.3812f3	28		plp		                PLP
.3812f4	68		pla		                PLA             ; end setdp macro
.3812f5	a2 00 00	ldx #$0000	                ldx #$0000
.3812f8	e2 10		sep #$10	                SEP #$10        ; set X short
.3812fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812fc	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381300	29 01		and #$01	                AND #FNX1_INT00_KBD
.381302	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381306					IRQ_HANDLER_FETCH
.381306	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.38130a	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.38130c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.38130e	29 80		and #$80	                AND #$80
.381310	c9 80		cmp #$80	                CMP #$80
.381312	d0 10		bne $381324	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.381314	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381316	29 7f		and #$7f	                AND #$7F
.381318	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38131a	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.38131c	aa		tax		                TAX
.38131d	bf 80 74 39	lda $397480,x	                LDA @lScanCode_Prefix_Set1, x
.381321	4c c7 13	jmp $3813c7	                JMP KB_WR_2_SCREEN      ; And save it
.381324	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381326	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381328	d0 03		bne $38132d	                BNE NOT_KB_SET_LSHIFT
.38132a	82 ad 00	brl $3813da	                BRL KB_SET_SHIFT
.38132d					NOT_KB_SET_LSHIFT
.38132d	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38132f	d0 03		bne $381334	                BNE NOT_KB_CLR_LSHIFT
.381331	82 af 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381334					NOT_KB_CLR_LSHIFT
.381334	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381336	d0 03		bne $38133b	                BNE NOT_KB_SET_RSHIFT
.381338	82 9f 00	brl $3813da	                BRL KB_SET_SHIFT
.38133b					NOT_KB_SET_RSHIFT
.38133b	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.38133d	d0 03		bne $381342	                BNE NOT_KB_CLR_RSHIFT
.38133f	82 a1 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381342					NOT_KB_CLR_RSHIFT
.381342	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.381344	d0 03		bne $381349	                BNE NOT_KB_SET_CTRL
.381346	82 a3 00	brl $3813ec	                BRL KB_SET_CTRL
.381349					NOT_KB_SET_CTRL
.381349	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.38134b	d0 03		bne $381350	                BNE NOT_KB_CLR_CTRL
.38134d	82 a5 00	brl $3813f5	                BRL KB_CLR_CTRL
.381350					NOT_KB_CLR_CTRL
.381350	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381352	d0 03		bne $381357	                BNE NOT_KB_SET_ALT
.381354	82 a7 00	brl $3813fe	                BRL KB_SET_ALT
.381357					NOT_KB_SET_ALT
.381357	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381359	d0 03		bne $38135e	                BNE NOT_KB_CLR_ALT
.38135b	82 a9 00	brl $381407	                BRL KB_CLR_ALT
.38135e	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381360	d0 03		bne $381365	                BNE NOT_PREFIXED
.381362	82 ab 00	brl $381410	                BRL KB_SET_PREFIX
.381365	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381367	d0 03		bne $38136c	                BNE NOT_KB_SET_NUM
.381369	82 b6 00	brl $381422	                BRL KB_TOG_NUMLOCK
.38136c	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38136e	d0 03		bne $381373	                BNE NOT_KB_SET_SCR
.381370	82 a6 00	brl $381419	                BRL KB_TOG_SCRLOCK
.381373	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381375	d0 03		bne $38137a	                BNE NOT_KB_CAPSLOCK
.381377	82 bc 00	brl $381436	                BRL KB_TOG_CAPLOCK
.38137a	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.38137c	d0 09		bne $381387	                BNE KB_UNPRESSED
.38137e	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381380	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381384	82 b5 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381387	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381389	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.38138b	d0 03		bne $381390	                BNE KB_NORM_SC
.38138d	82 ac 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381390	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.381392	aa		tax		                TAX
.381393	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381395	29 10		and #$10	                AND #$10
.381397	c9 10		cmp #$10	                CMP #$10
.381399	f0 17		beq $3813b2	                BEQ SHIFT_KEY_ON
.38139b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38139d	29 20		and #$20	                AND #$20
.38139f	c9 20		cmp #$20	                CMP #$20
.3813a1	f0 16		beq $3813b9	                BEQ CTRL_KEY_ON
.3813a3	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3813a5	29 40		and #$40	                AND #$40
.3813a7	c9 40		cmp #$40	                CMP #$40
.3813a9	f0 15		beq $3813c0	                BEQ ALT_KEY_ON
.3813ab	bf 00 72 39	lda $397200,x	                LDA @lScanCode_Press_Set1, x
.3813af	82 15 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b2	bf 80 72 39	lda $397280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3813b6	82 0e 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b9	bf 00 73 39	lda $397300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3813bd	82 07 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c0	bf 80 73 39	lda $397380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3813c4	82 00 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c7	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813c9	d0 03		bne $3813ce	                BNE savechar
.3813cb	4c 4c 14	jmp $38144c	                JMP programmerKey       ; Yes: trigger the programmer key
.3813ce	48		pha		savechar        PHA
.3813cf	c2 10		rep #$10	                REP #$10        ; set X long
.3813d1	20 58 14	jsr $381458	                JSR SAVEKEY
.3813d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3813d6	68		pla		                PLA
.3813d7	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813da	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813dc	09 10		ora #$10	                ORA #$10
.3813de	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e0	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813e3	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813e5	29 ef		and #$ef	                AND #$EF
.3813e7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e9	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813ec	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813ee	09 20		ora #$20	                ORA #$20
.3813f0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813f2	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813f5	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813f7	29 df		and #$df	                AND #$DF
.3813f9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813fb	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813fe	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.381400	09 40		ora #$40	                ORA #$40
.381402	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381404	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381407	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.381409	29 bf		and #$bf	                AND #$BF
.38140b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38140d	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381410	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.381412	09 80		ora #$80	                ORA #$80
.381414	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381416	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381419	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.38141b	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.38141d	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38141f	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381422	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381424	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381426	c9 60		cmp #$60	                CMP #$60
.381428	d0 03		bne $38142d	                BNE KB_TOG_NUMLOC2
.38142a	82 63 ff	brl $381390	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.38142d	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.38142f	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381431	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381433	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381436	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381438	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.38143a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38143c					KB_CHECK_B_DONE
.38143c	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381440	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381442	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381444	d0 03		bne $381449	                BNE SET_LED
.381446	4c 06 13	jmp $381306	                JMP IRQ_HANDLER_FETCH
.381449					SET_LED
.381449					KB_DONE
.381449	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144b	60		rts		                RTS
.38144c					programmerKey
.38144c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144e	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.38144f	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381450	ab		plb		                PLB
.381451	7a		ply		                PLY
.381452	fa		plx		                PLX
.381453	68		pla		                PLA
.381454	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381458					SAVEKEY
.381458	e2 20		sep #$20	                SEP #$20        ; set A short
.38145a	48		pha		                PHA                     ; Save the character
.38145b	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.38145d	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38145f	f0 0d		beq $38146e	                BEQ no_caps             ; No... just use the character as-is
.381461	68		pla		                PLA                     ; Get the character back
.381462	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381464	90 09		bcc $38146f	                BLT check_break         ; Yes: just use as-is
.381466	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381468	b0 05		bcs $38146f	                BGE check_break         ; Yes: just us as-is
.38146a	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.38146c	80 01		bra $38146f	                BRA check_break
.38146e	68		pla		no_caps         PLA                     ; Restore the character
.38146f	c9 00		cmp #$00	check_break     CMP #0
.381471	f0 18		beq $38148b	                BEQ done
.381473	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381475	f0 15		beq $38148c	                BEQ flag_break          ; Yes: flag a break
.381477	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381479	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.38147c	b0 0d		bcs $38148b	                BCS done                ; Stop storing - An error should ensue here...
.38147e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381482	e8		inx		                INX
.381483	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381485	a9 00		lda #$00	                LDA #$00
.381487	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.38148b	60		rts		done            RTS
.38148c					flag_break
.38148c	e2 20		sep #$20	                SEP #$20        ; set A short
.38148e	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381490	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381492	60		rts		                RTS
.381493					KBD_GETC
.381493	da		phx		                PHX
.381494	0b		phd		                PHD
.381495	08		php		                PHP
.381496	48		pha		                PHA             ; begin setdp macro
.381497	08		php		                PHP
.381498	c2 20		rep #$20	                REP #$20        ; set A long
.38149a	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38149d	5b		tcd		                TCD
.38149e	28		plp		                PLP
.38149f	68		pla		                PLA             ; end setdp macro
.3814a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814a2	c2 10		rep #$10	                REP #$10        ; set X long
.3814a4	58		cli		                CLI                     ; Make sure interrupts can happen
.3814a5	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.3814a9	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.3814ab	c9 60		cmp #$60	                CMP #KB_CREDITS
.3814ad	d0 0a		bne $3814b9	                BNE check_buffer        ; No: check the key buffer
.3814af	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.3814b1	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3814b5	22 46 16 39	jsl $391646	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.3814b9	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.3814bb	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.3814bd	90 02		bcc $3814c1	                BCC read_buff           ; Yes: a key is present, read it
.3814bf	80 e4		bra $3814a5	                BRA get_wait            ; Otherwise, keep waiting
.3814c1	78		sei		read_buff       SEI                     ; Don't interrupt me!
.3814c2	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.3814c4	e8		inx		                INX                     ; And move to the next key
.3814c5	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814c7	f0 07		beq $3814d0	                BEQ reset_indexes       ; Yes: return to 0 position
.3814c9	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814cb	58		cli		                CLI
.3814cc	28		plp		done            PLP                     ; Restore status and interrupts
.3814cd	2b		pld		                PLD
.3814ce	fa		plx		                PLX
.3814cf	6b		rtl		                RTL
.3814d0	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814d2	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814d4	80 f6		bra $3814cc	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 03 12 39	jsl $391203	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 74 0f 39	jsl $390f74	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 49 0f 39	jsl $390f49	                JSL IINITFONTSET
.3904cd	22 ff 0a 39	jsl $390aff	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 e8 5a 39	jsl $395ae8	                JSL UART_SELECT
.3904d8	22 54 5b 39	jsl $395b54	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 e8 5a 39	jsl $395ae8	                JSL UART_SELECT
.3904e3	22 54 5b 39	jsl $395b54	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 cf 6c	ldx #$6ccf	                LDX #<>greet_msg
.39050d	22 82 07 39	jsl $390782	                JSL IPRINT       ; print the first line
.390511	22 4a 0b 39	jsl $390b4a	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 d4 15 39	jsl $3915d4	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 2d 44 39	jsl $39442d	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 30 61 39	jsl $396130	                JSL FDC_INIT
.390586	22 30 06 39	jsl $390630	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.39058a	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.39058c	f0 10		beq $39059e	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058e	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.390590	f0 1e		beq $3905b0	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390592	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390594	f0 54		beq $3905ea	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390596	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390598	f0 1d		beq $3905b7	                BEQ BOOTSDC           ; Yes: boot via the SDC
.39059a	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.39059c	f0 32		beq $3905d0	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059e	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905a2	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a4	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a6	f0 28		beq $3905d0	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a8	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905aa	f0 0b		beq $3905b7	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905ac	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905ae	f0 3a		beq $3905ea	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905b0	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b4	ea		nop		CREDIT_LOCK     NOP
.3905b5	80 fd		bra $3905b4	                BRA CREDIT_LOCK
.3905b7					BOOTSDC
.3905b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b9	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905bb	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bf	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT         ; Mount the SDC
.3905c3	90 06		bcc $3905cb	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c5	22 66 46 39	jsl $394666	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c9	80 e5		bra $3905b0	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905cb	a2 ac 70	ldx #$70ac	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ce	80 39		bra $390609	                BRA PR_BOOT_ERROR
.3905d0					BOOTIDE
.3905d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d2	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d4	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d8	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905dc	90 07		bcc $3905e5	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905de	22 66 46 39	jsl $394666	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905e2	82 cb ff	brl $3905b0	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e5	a2 c8 70	ldx #$70c8	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e8	80 1f		bra $390609	                BRA PR_BOOT_ERROR
.3905ea	a2 11 71	ldx #$7111	BOOTFLOPPY      LDX #<>fdc_boot
.3905ed	22 82 07 39	jsl $390782	                JSL IPRINT
.3905f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f3	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f5	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f9	22 be 66 39	jsl $3966be	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905fd	90 07		bcc $390606	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905ff	22 66 46 39	jsl $394666	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390603	82 aa ff	brl $3905b0	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390606	a2 eb 70	ldx #$70eb	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390609	22 82 07 39	jsl $390782	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.39060d	a2 87 70	ldx #$7087	                LDX #<>boot_retry     ; Print the boot retry prompt
.390610	22 82 07 39	jsl $390782	                JSL IPRINT
.390614	22 25 07 39	jsl $390725	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390618	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39061a	d0 03		bne $39061f	                BNE chk_r_lc
.39061c	82 5f ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061f	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390621	d0 03		bne $390626	                BNE chk_b_lc
.390623	82 58 ff	brl $39057e	                BRL retry_boot
.390626	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390628	f0 86		beq $3905b0	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.39062a	c9 42		cmp #$42	                CMP #'B'
.39062c	f0 82		beq $3905b0	                BEQ BOOTBASIC
.39062e	80 e4		bra $390614	                BRA boot_wait_key     ; No: keep waiting
.390630					BOOT_MENU
.390630	8b		phb		                PHB
.390631	08		php		                PHP
.390632	e2 20		sep #$20	                SEP #$20        ; set A short
.390634	c2 10		rep #$10	                REP #$10        ; set X long
.390636	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390638	48		pha		                PHA
.390639	ab		plb		                PLB
.39063a	a2 73 06	ldx #$0673	                LDX #<>bootmenu
.39063d	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.390641	c2 10		rep #$10	                REP #$10        ; set X long
.390643	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390646	e2 20		sep #$20	                SEP #$20        ; set A short
.390648	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.39064b	22 d4 15 39	jsl $3915d4	                JSL ILOOP_MS            ; Wait ...
.39064f	88		dey		                DEY                     ; Count down the tenths of seconds
.390650	f0 1c		beq $39066e	                BEQ timeout             ; If we've got to 0, we're done
.390652	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390656	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390658	f0 ee		beq $390648	                BEQ wait_key            ; No: keep waiting until timeout
.39065a	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.39065c	f0 12		beq $390670	                BEQ return              ; Yes: return it
.39065e	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.390660	f0 0e		beq $390670	                BEQ return              ; Yes: return it
.390662	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390664	f0 0a		beq $390670	                BEQ return              ; Yes: return it
.390666	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390668	f0 06		beq $390670	                BEQ return              ; Yes: return it
.39066a	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.39066c	d0 da		bne $390648	                BNE wait_key            ; No: keep waiting
.39066e	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.390670	28		plp		return          PLP
.390671	ab		plb		                PLB
.390672	6b		rtl		                RTL
>390673	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>39067b	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>39068b	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>39069b	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a8					IBREAK
.3906a8	48		pha		                PHA             ; begin setdp macro
.3906a9	08		php		                PHP
.3906aa	c2 20		rep #$20	                REP #$20        ; set A long
.3906ac	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906af	5b		tcd		                TCD
.3906b0	28		plp		                PLP
.3906b1	68		pla		                PLA             ; end setdp macro
.3906b2	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906b3	8f 48 02 00	sta $000248	                STA CPUY
.3906b7	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b8	8f 46 02 00	sta $000246	                STA CPUX
.3906bc	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906bd	8f 44 02 00	sta $000244	                STA CPUA
.3906c1	68		pla		                PLA
.3906c2	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c8	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c9	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906cd	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ce	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906d2	c2 20		rep #$20	                REP #$20        ; set A long
.3906d4	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d5	8f 40 02 00	sta $000240	                STA CPUPC
.3906d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906db	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906dc	8f 42 02 00	sta $000242	                STA CPUPBR
.3906e0	c2 20		rep #$20	                REP #$20        ; set A long
.3906e2	3b		tsc		                TSA             ; Get the stack
.3906e3	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e7	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906ea	1b		tcs		                TAS
.3906eb	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906ef					IREADY
.3906ef	48		pha		                PHA             ; begin setdbr macro
.3906f0	08		php		                PHP
.3906f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f3	a9 39		lda #$39	                LDA #`ready_msg
.3906f5	48		pha		                PHA
.3906f6	ab		plb		                PLB
.3906f7	28		plp		                PLP
.3906f8	68		pla		                PLA             ; end setdbr macro
.3906f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906fb	a2 28 71	ldx #$7128	                LDX #<>ready_msg
.3906fe	22 82 07 39	jsl $390782	                JSL IPRINT
.390702					IREADYWAIT
.390702	22 1c 07 39	jsl $39071c	                JSL IGETCHE
.390706	80 fa		bra $390702	                BRA IREADYWAIT
.390708	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390709	db		stp		IRETURN         STP
.39070a	08		php		ISETIN          PHP
.39070b	e2 20		sep #$20	                SEP #$20        ; set A short
.39070d	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390711	28		plp		                PLP
.390712	6b		rtl		                RTL
.390713	08		php		ISETOUT         PHP
.390714	e2 20		sep #$20	                SEP #$20        ; set A short
.390716	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39071a	28		plp		                PLP
.39071b	6b		rtl		                RTL
.39071c	22 25 07 39	jsl $390725	IGETCHE         JSL IGETCHW
.390720	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.390724	6b		rtl		                RTL
.390725					IGETCHW
.390725	08		php		                PHP
.390726	e2 20		sep #$20	                SEP #$20        ; set A short
.390728	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39072c	f0 17		beq $390745	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072e	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390730	f0 09		beq $39073b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390734	f0 05		beq $39073b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390736	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390738	28		plp		                PLP
.390739	38		sec		                SEC                 ; And return carry set
.39073a	6b		rtl		                RTL
.39073b	22 e8 5a 39	jsl $395ae8	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073f	22 9c 5b 39	jsl $395b9c	                JSL UART_GETC       ; Get the charater from the COM port
.390743	80 04		bra $390749	                BRA done
.390745	22 93 14 38	jsl $381493	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390749	28		plp		done            PLP
.39074a	18		clc		                CLC                 ; Return carry clear for valid data
.39074b	6b		rtl		                RTL
.39074c					IGETCH
.39074c	da		phx		                PHX
.39074d	5a		phy		                PHY
.39074e	8b		phb		                PHB
.39074f	0b		phd		                PHD
.390750	08		php		                PHP
.390751	48		pha		                PHA             ; begin setdbr macro
.390752	08		php		                PHP
.390753	e2 20		sep #$20	                SEP #$20        ; set A short
.390755	a9 00		lda #$00	                LDA #0
.390757	48		pha		                PHA
.390758	ab		plb		                PLB
.390759	28		plp		                PLP
.39075a	68		pla		                PLA             ; end setdbr macro
.39075b	e2 20		sep #$20	                SEP #$20        ; set A short
.39075d	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.390760	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.390762	f0 03		beq $390767	                BEQ getch_console       ; Yes: dispatch on the console
.390764	82 10 00	brl $390777	                BRL ret_nothing         ; Unhandled device: return 0
.390767					getch_console
.390767	c2 20		rep #$20	                REP #$20        ; set A long
.390769	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.39076c	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076f	b0 06		bcs $390777	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.390771	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390775	80 05		bra $39077c	                BRA done                ; And return it
.390777					ret_nothing
.390777	c2 20		rep #$20	                REP #$20        ; set A long
.390779	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.39077c	28		plp		done            PLP
.39077d	2b		pld		                PLD
.39077e	ab		plb		                PLB
.39077f	7a		ply		                PLY
.390780	fa		plx		                PLX
.390781	6b		rtl		                RTL
.390782	22 8b 07 39	jsl $39078b	IPRINT          JSL IPUTS
.390786	22 d4 08 39	jsl $3908d4	                JSL IPRINTCR
.39078a	6b		rtl		                RTL
.39078b	48		pha		IPUTS           PHA
.39078c	08		php		                PHP
.39078d	e2 20		sep #$20	                SEP #$20        ; set A short
.39078f	c2 10		rep #$10	                REP #$10        ; set X long
.390791	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390794	f0 08		beq $39079e	                BEQ iputs_done
.390796	22 a2 07 39	jsl $3907a2	iputs2          JSL IPUTC
.39079a	e8		inx		iputs3          INX
.39079b	4c 91 07	jmp $390791	                JMP iputs1
.39079e	e8		inx		iputs_done      INX
.39079f	28		plp		                PLP
.3907a0	68		pla		                PLA
.3907a1	6b		rtl		                RTL
.3907a2					IPUTC
.3907a2	da		phx		                PHX
.3907a3	5a		phy		                PHY
.3907a4	0b		phd		                PHD
.3907a5	8b		phb		                PHB
.3907a6	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a7	48		pha		                PHA             ; begin setdp macro
.3907a8	08		php		                PHP
.3907a9	c2 20		rep #$20	                REP #$20        ; set A long
.3907ab	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ae	5b		tcd		                TCD
.3907af	28		plp		                PLP
.3907b0	68		pla		                PLA             ; end setdp macro
.3907b1	48		pha		                PHA             ; begin setdbr macro
.3907b2	08		php		                PHP
.3907b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b5	a9 00		lda #$00	                LDA #0
.3907b7	48		pha		                PHA
.3907b8	ab		plb		                PLB
.3907b9	28		plp		                PLP
.3907ba	68		pla		                PLA             ; end setdbr macro
.3907bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3907bd	c2 10		rep #$10	                REP #$10        ; set X long
.3907bf	48		pha		                PHA                 ; Save the character to print
.3907c0	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c4	f0 16		beq $3907dc	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c6	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c8	f0 07		beq $3907d1	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907cc	f0 03		beq $3907d1	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ce	68		pla		                PLA                 ; Otherwise, just exit
.3907cf	80 4f		bra $390820	                BRA done
.3907d1	22 e8 5a 39	jsl $395ae8	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d5	68		pla		                PLA                 ; Recover the character to send
.3907d6	22 bd 5b 39	jsl $395bbd	                JSL UART_PUTC       ; Send the character
.3907da	80 44		bra $390820	                BRA done
.3907dc	68		pla		putc_screen     PLA                 ; Get the character to print
.3907dd	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907df	f0 61		beq $390842	                BEQ go_down
.3907e1	c9 20		cmp #$20	                CMP #$20
.3907e3	90 19		bcc $3907fe	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e5	c9 7f		cmp #$7f	                CMP #$7F
.3907e7	f0 3d		beq $390826	                BEQ do_del
.3907e9	b0 02		bcs $3907ed	                BCS check_A0        ; [$20..$7E]: print it
.3907eb	80 29		bra $390816	                BRA printc
.3907ed	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907ef	90 02		bcc $3907f3	                BCC check_ctrl1
.3907f1	80 23		bra $390816	                BRA printc          ; [$A0..$FF]: print it
.3907f3	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f5	f0 4b		beq $390842	                BEQ go_down         ; ... move the cursor down one row
.3907f7	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f9	f0 59		beq $390854	                BEQ go_left         ; ... move the cursor left one column
.3907fb	4c 20 08	jmp $390820	                JMP done
.3907fe	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.390800	f0 58		beq $39085a	                BEQ do_TAB          ; ... move to the next TAB stop
.390802	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390804	f0 2c		beq $390832	                BEQ backspace       ; ... move the cursor back and replace with a space
.390806	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390808	f0 32		beq $39083c	                BEQ do_cr           ; ... move cursor down and to the first column
.39080a	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.39080c	f0 3a		beq $390848	                BEQ go_up           ; ... move the cursor up one row
.39080e	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.390810	f0 3c		beq $39084e	                BEQ go_right        ; ... move the cursor right one column
.390812	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390814	f0 16		beq $39082c	                BEQ do_ins          ; ... insert a space
.390816	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390818	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081a	87 1f		sta [$1f]	                STA [COLORPOS]
.39081c	22 34 09 39	jsl $390934	                JSL ICSRRIGHT       ; And advance the cursor
.390820	28		plp		done            PLP
.390821	ab		plb		                PLB
.390822	2b		pld		                PLD
.390823	7a		ply		                PLY
.390824	fa		plx		                PLX
.390825	6b		rtl		                RTL
.390826	22 81 08 39	jsl $390881	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082a	80 f4		bra $390820	                BRA done
.39082c	22 a5 08 39	jsl $3908a5	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390830	80 ee		bra $390820	                BRA done
.390832	22 67 09 39	jsl $390967	backspace       JSL ICSRLEFT
.390836	22 81 08 39	jsl $390881	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083a	80 e4		bra $390820	                BRA done
.39083c	22 d4 08 39	jsl $3908d4	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390840	80 de		bra $390820	                BRA done
.390842	22 b3 09 39	jsl $3909b3	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390846	80 d8		bra $390820	                BRA done
.390848	22 8d 09 39	jsl $39098d	go_up           JSL ICSRUP          ; Move the cursor up one line
.39084c	80 d2		bra $390820	                BRA done
.39084e	22 34 09 39	jsl $390934	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390852	80 cc		bra $390820	                BRA done
.390854	22 67 09 39	jsl $390967	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390858	80 c6		bra $390820	                BRA done
.39085a					do_TAB
.39085a	c2 20		rep #$20	                REP #$20        ; set A long
.39085c	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39085e	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390861	18		clc		                CLC
.390862	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390865	aa		tax		                TAX
.390866	a4 1c		ldy $1c		                LDY CURSORY
.390868	e2 20		sep #$20	                SEP #$20        ; set A short
.39086a	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39086c	90 04		bcc $390872	                BCC check_row       ; Yes: check the row
.39086e	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390871	c8		iny		                INY                 ; ... and the next row
.390872	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390874	90 05		bcc $39087b	                BCC do_locate       ; Yes: reposition the cursor
.390876	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP       ; No: scroll the screen
.39087a	88		dey		                DEY                 ; And set the row to the last one
.39087b	22 d8 09 39	jsl $3909d8	do_locate       JSL ILOCATE         ; Set the cursor position
.39087f	80 9f		bra $390820	                BRA done
.390881	da		phx		SCRSHIFTLL      PHX
.390882	5a		phy		                PHY
.390883	48		pha		                PHA
.390884	0b		phd		                PHD
.390885	08		php		                PHP
.390886	48		pha		                PHA             ; begin setdp macro
.390887	08		php		                PHP
.390888	c2 20		rep #$20	                REP #$20        ; set A long
.39088a	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39088d	5b		tcd		                TCD
.39088e	28		plp		                PLP
.39088f	68		pla		                PLA             ; end setdp macro
.390890	c2 30		rep #$30	                REP #$30        ; set A&X long
.390892	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390894	a8		tay		                TAY                 ; Set it as the destination
.390895	aa		tax		                TAX
.390896	e8		inx		                INX                 ; And set the next cell as the source
.390897	38		sec		                SEC                 ; Calculate the length of the block to move
.390898	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39089a	e5 1a		sbc $1a		                SBC CURSORX
.39089c	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39089f	28		plp		                PLP
.3908a0	2b		pld		                PLD
.3908a1	68		pla		                PLA
.3908a2	7a		ply		                PLY
.3908a3	fa		plx		                PLX
.3908a4	6b		rtl		                RTL
.3908a5	da		phx		SCRSHIFTLR      PHX
.3908a6	48		pha		                PHA
.3908a7	0b		phd		                PHD
.3908a8	08		php		                PHP
.3908a9	48		pha		                PHA             ; begin setdp macro
.3908aa	08		php		                PHP
.3908ab	c2 20		rep #$20	                REP #$20        ; set A long
.3908ad	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908b0	5b		tcd		                TCD
.3908b1	28		plp		                PLP
.3908b2	68		pla		                PLA             ; end setdp macro
.3908b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b5	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908b7	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3908ba	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3908bd	a8		tay		                TAY                 ; And set that as the destination address
.3908be	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3908bf	aa		tax		                TAX                 ; And make it the source
.3908c0	38		sec		                SEC                 ; Calculate the length of the block to move
.3908c1	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908c3	e5 1a		sbc $1a		                SBC CURSORX
.3908c5	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3908c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3908ca	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3908cc	87 17		sta [$17]	                STA [CURSORPOS]
.3908ce	28		plp		                PLP
.3908cf	2b		pld		                PLD
.3908d0	68		pla		                PLA
.3908d1	fa		plx		                PLX
.3908d2	6b		rtl		                RTL
.3908d3					IPUTB
.3908d3	6b		rtl		                RTL
.3908d4					IPRINTCR
.3908d4	da		phx		                PHX
.3908d5	5a		phy		                PHY
.3908d6	8b		phb		                PHB
.3908d7	0b		phd		                PHD
.3908d8	08		php		                PHP
.3908d9	48		pha		                PHA             ; begin setdbr macro
.3908da	08		php		                PHP
.3908db	e2 20		sep #$20	                SEP #$20        ; set A short
.3908dd	a9 00		lda #$00	                LDA #0
.3908df	48		pha		                PHA
.3908e0	ab		plb		                PLB
.3908e1	28		plp		                PLP
.3908e2	68		pla		                PLA             ; end setdbr macro
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3908ef	c2 10		rep #$10	                REP #$10        ; set X long
.3908f1	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3908f5	f0 1c		beq $390913	                BEQ scr_printcr
.3908f7	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3908f9	f0 06		beq $390901	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3908fb	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3908fd	f0 02		beq $390901	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3908ff	80 1c		bra $39091d	                BRA done
.390901	22 e8 5a 39	jsl $395ae8	uart_printcr    JSL UART_SELECT
.390905	a9 0d		lda #$0d	                LDA #CHAR_CR
.390907	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.39090b	a9 0a		lda #$0a	                LDA #CHAR_LF
.39090d	22 a2 07 39	jsl $3907a2	                JSL IPUTC
.390911	80 0a		bra $39091d	                BRA done
.390913	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390916	a4 1c		ldy $1c		                LDY CURSORY
.390918	c8		iny		                INY
.390919	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.39091d	28		plp		done            PLP
.39091e	2b		pld		                PLD
.39091f	ab		plb		                PLB
.390920	7a		ply		                PLY
.390921	fa		plx		                PLX
.390922	6b		rtl		                RTL
.390923	da		phx		ICSRHOME        PHX
.390924	5a		phy		                PHY
.390925	08		php		                PHP
.390926	a2 00 00	ldx #$0000	                LDX #0
.390929	a0 00 00	ldy #$0000	                LDY #0
.39092c	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.390930	28		plp		                PLP
.390931	7a		ply		                PLY
.390932	fa		plx		                PLX
.390933	6b		rtl		                RTL
.390934	da		phx		ICSRRIGHT       PHX
.390935	5a		phy		                PHY
.390936	48		pha		                PHA
.390937	0b		phd		                PHD
.390938	08		php		                PHP
.390939	c2 20		rep #$20	                REP #$20        ; set A long
.39093b	c2 10		rep #$10	                REP #$10        ; set X long
.39093d	48		pha		                PHA             ; begin setdp macro
.39093e	08		php		                PHP
.39093f	c2 20		rep #$20	                REP #$20        ; set A long
.390941	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390944	5b		tcd		                TCD
.390945	28		plp		                PLP
.390946	68		pla		                PLA             ; end setdp macro
.390947	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390949	e8		inx		                INX
.39094a	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39094c	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39094e	90 0d		bcc $39095d	                BCC icsrright_nowrap  ; No: just set the position
.390950	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390953	c8		iny		                INY                   ; And move to the next row
.390954	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390956	90 05		bcc $39095d	                BCC icsrright_nowrap  ; No: just set the position
.390958	88		dey		                DEY                   ; Yes: lock to the last row
.390959	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP         ; But scroll the screen up
.39095d					icsrright_nowrap
.39095d	22 d8 09 39	jsl $3909d8	                JSL ILOCATE           ; Set the cursor position
.390961	28		plp		                PLP
.390962	2b		pld		                PLD
.390963	68		pla		                PLA
.390964	7a		ply		                PLY
.390965	fa		plx		                PLX
.390966	6b		rtl		                RTL
.390967					ICSRLEFT
.390967	da		phx		                PHX
.390968	5a		phy		                PHY
.390969	48		pha		                PHA
.39096a	0b		phd		                PHD
.39096b	08		php		                PHP
.39096c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39096e	48		pha		                PHA             ; begin setdp macro
.39096f	08		php		                PHP
.390970	c2 20		rep #$20	                REP #$20        ; set A long
.390972	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390975	5b		tcd		                TCD
.390976	28		plp		                PLP
.390977	68		pla		                PLA             ; end setdp macro
.390978	a5 1a		lda $1a		                LDA CURSORX
.39097a	f0 0b		beq $390987	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39097c	a6 1a		ldx $1a		                LDX CURSORX
.39097e	ca		dex		                DEX
.39097f	86 1a		stx $1a		                STX CURSORX
.390981	a4 1c		ldy $1c		                LDY CURSORY
.390983	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.390987					icsrleft_done_already_zero
.390987	28		plp		                PLP
.390988	2b		pld		                PLD
.390989	68		pla		                PLA
.39098a	7a		ply		                PLY
.39098b	fa		plx		                PLX
.39098c	6b		rtl		                RTL
.39098d					ICSRUP
.39098d	da		phx		                PHX
.39098e	5a		phy		                PHY
.39098f	48		pha		                PHA
.390990	0b		phd		                PHD
.390991	08		php		                PHP
.390992	c2 30		rep #$30	                REP #$30        ; set A&X long
.390994	48		pha		                PHA             ; begin setdp macro
.390995	08		php		                PHP
.390996	c2 20		rep #$20	                REP #$20        ; set A long
.390998	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39099b	5b		tcd		                TCD
.39099c	28		plp		                PLP
.39099d	68		pla		                PLA             ; end setdp macro
.39099e	a5 1c		lda $1c		                LDA CURSORY
.3909a0	f0 0b		beq $3909ad	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909a2	a4 1c		ldy $1c		                LDY CURSORY
.3909a4	88		dey		                DEY
.3909a5	84 1c		sty $1c		                STY CURSORY
.3909a7	a6 1a		ldx $1a		                LDX CURSORX
.3909a9	22 d8 09 39	jsl $3909d8	                JSL ILOCATE
.3909ad					isrup_done_already_zero
.3909ad	28		plp		                PLP
.3909ae	2b		pld		                PLD
.3909af	68		pla		                PLA
.3909b0	7a		ply		                PLY
.3909b1	fa		plx		                PLX
.3909b2	6b		rtl		                RTL
.3909b3	da		phx		ICSRDOWN        PHX
.3909b4	5a		phy		                PHY
.3909b5	0b		phd		                PHD
.3909b6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b8	48		pha		                PHA             ; begin setdp macro
.3909b9	08		php		                PHP
.3909ba	c2 20		rep #$20	                REP #$20        ; set A long
.3909bc	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909bf	5b		tcd		                TCD
.3909c0	28		plp		                PLP
.3909c1	68		pla		                PLA             ; end setdp macro
.3909c2	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3909c4	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3909c6	c8		iny		                INY
.3909c7	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3909c9	90 05		bcc $3909d0	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3909cb	88		dey		                DEY                         ; Yes: go back to the last row
.3909cc	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP               ; But scroll the screen up
.3909d0					icsrdown_noscroll
.3909d0	22 d8 09 39	jsl $3909d8	                JSL ILOCATE                 ; And set the cursor position
.3909d4	2b		pld		                PLD
.3909d5	7a		ply		                PLY
.3909d6	fa		plx		                PLX
.3909d7	6b		rtl		                RTL
.3909d8	48		pha		ILOCATE         PHA
.3909d9	0b		phd		                PHD
.3909da	08		php		                PHP
.3909db	48		pha		                PHA             ; begin setdp macro
.3909dc	08		php		                PHP
.3909dd	c2 20		rep #$20	                REP #$20        ; set A long
.3909df	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3909e2	5b		tcd		                TCD
.3909e3	28		plp		                PLP
.3909e4	68		pla		                PLA             ; end setdp macro
.3909e5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909e7					ilocate_scroll
.3909e7	c4 13		cpy $13		                CPY LINES_VISIBLE
.3909e9	90 07		bcc $3909f2	                BCC ilocate_scrolldone
.3909eb	22 24 0a 39	jsl $390a24	                JSL ISCROLLUP
.3909ef	88		dey		                DEY
.3909f0	80 f5		bra $3909e7	                BRA ilocate_scroll
.3909f2					ilocate_scrolldone
.3909f2	86 1a		stx $1a		                STX CURSORX
.3909f4	84 1c		sty $1c		                STY CURSORY
.3909f6	a5 0c		lda $0c		                LDA SCREENBEGIN
.3909f8					ilocate_row
.3909f8	c0 00 00	cpy #$0000	                CPY #$0
.3909fb	f0 08		beq $390a05	                BEQ ilocate_right
.3909fd	18		clc		ilocate_down    CLC
.3909fe	65 11		adc $11		                ADC COLS_PER_LINE
.390a00	88		dey		                DEY
.390a01	f0 02		beq $390a05	                BEQ ilocate_right
.390a03	80 f8		bra $3909fd	                BRA ilocate_down
.390a05	18		clc		ilocate_right   CLC
.390a06	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a08	85 17		sta $17		                STA CURSORPOS
.390a0a	a4 1c		ldy $1c		                LDY CURSORY
.390a0c	98		tya		                TYA
.390a0d	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a11	8a		txa		                TXA
.390a12	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a16	c2 20		rep #$20	                REP #$20        ; set A long
.390a18	18		clc		                CLC
.390a19	a5 17		lda $17		                LDA CURSORPOS
.390a1b	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a1e	85 1f		sta $1f		                STA COLORPOS
.390a20	28		plp		ilocate_done    PLP
.390a21	2b		pld		                PLD
.390a22	68		pla		                PLA
.390a23	6b		rtl		                RTL
.390a24					ISCROLLUP
.390a24	48		pha		                PHA
.390a25	da		phx		                PHX
.390a26	5a		phy		                PHY
.390a27	8b		phb		                PHB
.390a28	0b		phd		                PHD
.390a29	08		php		                PHP
.390a2a	48		pha		                PHA             ; begin setdp macro
.390a2b	08		php		                PHP
.390a2c	c2 20		rep #$20	                REP #$20        ; set A long
.390a2e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a31	5b		tcd		                TCD
.390a32	28		plp		                PLP
.390a33	68		pla		                PLA             ; end setdp macro
.390a34	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a36	a5 11		lda $11		                LDA COLS_PER_LINE
.390a38	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a3c	a5 13		lda $13		                LDA LINES_VISIBLE
.390a3e	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a42	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a46	85 00		sta $00		                STA TMPPTR1
.390a48	18		clc		                CLC
.390a49	a9 00 a0	lda #$a000	                LDA #$A000
.390a4c	a8		tay		                TAY
.390a4d	65 11		adc $11		                ADC COLS_PER_LINE
.390a4f	aa		tax		                TAX
.390a50	a5 00		lda $00		                LDA TMPPTR1
.390a52	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a55	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a57	18		clc		                CLC
.390a58	a9 00 c0	lda #$c000	                LDA #$C000
.390a5b	a8		tay		                TAY
.390a5c	65 11		adc $11		                ADC COLS_PER_LINE
.390a5e	aa		tax		                TAX
.390a5f	a5 00		lda $00		                LDA TMPPTR1
.390a61	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a64	a5 00		lda $00		                LDA TMPPTR1
.390a66	48		pha		                PHA
.390a67	18		clc		                CLC
.390a68	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390a6b	85 00		sta $00		                STA TMPPTR1
.390a6d	a0 00 00	ldy #$0000	                LDY #0
.390a70	a9 20 00	lda #$0020	                LDA #' '
.390a73	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390a75	c8		iny		                INY
.390a76	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390a78	d0 f9		bne $390a73	                BNE clr_text
.390a7a	68		pla		                PLA
.390a7b	18		clc		                CLC
.390a7c	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390a7f	85 00		sta $00		                STA TMPPTR1
.390a81	a0 00 00	ldy #$0000	                LDY #0
.390a84	a5 1e		lda $1e		                LDA CURCOLOR
.390a86	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390a88	c8		iny		                INY
.390a89	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390a8b	d0 f9		bne $390a86	                BNE clr_color
.390a8d	28		plp		                PLP
.390a8e	2b		pld		                PLD
.390a8f	ab		plb		                PLB
.390a90	7a		ply		                PLY
.390a91	fa		plx		                PLX
.390a92	68		pla		                PLA
.390a93	6b		rtl		                RTL
.390a94	08		php		IPRINTH         PHP
.390a95	48		pha		                PHA
.390a96					iprinth1
.390a96	e2 20		sep #$20	                SEP #$20        ; set A short
.390a98	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390a9b	4a		lsr a		                LSR
.390a9c	4a		lsr a		                LSR
.390a9d	4a		lsr a		                LSR
.390a9e	4a		lsr a		                LSR
.390a9f	22 ee 0a 39	jsl $390aee	                JSL iprint_digit
.390aa3	bd 00 00	lda $0000,x	                LDA #0,b,x
.390aa6	22 ee 0a 39	jsl $390aee	                JSL iprint_digit
.390aaa	ca		dex		                DEX
.390aab	88		dey		                DEY
.390aac	d0 e8		bne $390a96	                BNE iprinth1
.390aae	68		pla		                PLA
.390aaf	28		plp		                PLP
.390ab0	6b		rtl		                RTL
.390ab1					IPRINTAH
.390ab1	48		pha		                PHA
.390ab2	08		php		                PHP
.390ab3	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390ab7	08		php		                PHP                   ; Get the processor status into A
.390ab8	e2 20		sep #$20	                SEP #$20        ; set A short
.390aba	c2 10		rep #$10	                REP #$10        ; set X long
.390abc	68		pla		                PLA
.390abd	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390abf	c9 20		cmp #$20	                CMP #%00100000
.390ac1	f0 14		beq $390ad7	                BEQ eight_bit
.390ac3	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390ac7	4a		lsr a		                LSR A
.390ac8	4a		lsr a		                LSR A
.390ac9	4a		lsr a		                LSR A
.390aca	4a		lsr a		                LSR A
.390acb	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390acf	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390ad3	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390ad7	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390adb	4a		lsr a		                LSR A
.390adc	4a		lsr a		                LSR A
.390add	4a		lsr a		                LSR A
.390ade	4a		lsr a		                LSR A
.390adf	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390ae3	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390ae7	22 ee 0a 39	jsl $390aee	                JSL iprint_digit      ; And print it
.390aeb	28		plp		                PLP
.390aec	68		pla		                PLA
.390aed	6b		rtl		                RTL
.390aee	da		phx		iprint_digit    PHX
.390aef	c2 20		rep #$20	                REP #$20        ; set A long
.390af1	29 0f 00	and #$000f	                AND #$0F
.390af4	aa		tax		                TAX
.390af5	bf 3c 71 39	lda $39713c,x	                LDA hex_digits,X
.390af9	22 a2 07 39	jsl $3907a2	                JSL IPUTC       ; Print the digit
.390afd	fa		plx		                PLX
.390afe	6b		rtl		                RTL
.390aff	48		pha		ICLRSCREEN	    PHA
.390b00	da		phx		                PHX
.390b01	08		php		                PHP
.390b02	e2 20		sep #$20	                SEP #$20        ; set A short
.390b04	c2 10		rep #$10	                REP #$10        ; set X long
.390b06	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b09	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b0b	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b0f	e8		inx		                inx
.390b10	e0 00 20	cpx #$2000	                cpx #$2000
.390b13	d0 f6		bne $390b0b	                bne iclearloop0
.390b15	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b18	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b1c	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b20	e8		inx		                inx
.390b21	e0 00 20	cpx #$2000	                cpx #$2000
.390b24	d0 f6		bne $390b1c	                bne iclearloop1
.390b26	28		plp		                PLP
.390b27	fa		plx		                PLX
.390b28	68		pla		                PLA
.390b29	6b		rtl		                RTL
.390b2a					COPYBYTES42
.390b2a	08		php		                PHP
.390b2b	0b		phd		                PHD
.390b2c	48		pha		                PHA             ; begin setdp macro
.390b2d	08		php		                PHP
.390b2e	c2 20		rep #$20	                REP #$20        ; set A long
.390b30	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b33	5b		tcd		                TCD
.390b34	28		plp		                PLP
.390b35	68		pla		                PLA             ; end setdp macro
.390b36	e2 20		sep #$20	                SEP #$20        ; set A short
.390b38	c2 10		rep #$10	                REP #$10        ; set X long
.390b3a	a0 00 00	ldy #$0000	                LDY #0
.390b3d	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b3f	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b41	c8		iny		                INY
.390b42	c0 2a 00	cpy #$002a	                CPY #42
.390b45	d0 f6		bne $390b3d	                BNE copy_loop
.390b47	2b		pld		                PLD
.390b48	28		plp		                PLP
.390b49	60		rts		                RTS
.390b4a					ICOLORFLAG
.390b4a	48		pha		                PHA
.390b4b	da		phx		                PHX
.390b4c	5a		phy		                PHY
.390b4d	08		php		                PHP
.390b4e	8b		phb		                PHB
.390b4f	0b		phd		                PHD
.390b50	48		pha		                PHA             ; begin setdp macro
.390b51	08		php		                PHP
.390b52	c2 20		rep #$20	                REP #$20        ; set A long
.390b54	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b57	5b		tcd		                TCD
.390b58	28		plp		                PLP
.390b59	68		pla		                PLA             ; end setdp macro
.390b5a	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b5c	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390b5f	85 04		sta $04		                STA TMPPTR2
.390b61	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390b64	85 06		sta $06		                STA TMPPTR2+2
.390b66	a9 13 6e	lda #$6e13	                LDA #<>greet_clr_line1
.390b69	85 00		sta $00		                STA TMPPTR1
.390b6b	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390b6e	85 02		sta $02		                STA TMPPTR1+2
.390b70	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b73	18		clc		                CLC
.390b74	a5 04		lda $04		                LDA TMPPTR2
.390b76	65 11		adc $11		                ADC COLS_PER_LINE
.390b78	85 04		sta $04		                STA TMPPTR2
.390b7a	a9 3d 6e	lda #$6e3d	                LDA #<>greet_clr_line2
.390b7d	85 00		sta $00		                STA TMPPTR1
.390b7f	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390b82	85 02		sta $02		                STA TMPPTR1+2
.390b84	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b87	18		clc		                CLC
.390b88	a5 04		lda $04		                LDA TMPPTR2
.390b8a	65 11		adc $11		                ADC COLS_PER_LINE
.390b8c	85 04		sta $04		                STA TMPPTR2
.390b8e	a9 67 6e	lda #$6e67	                LDA #<>greet_clr_line3
.390b91	85 00		sta $00		                STA TMPPTR1
.390b93	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390b96	85 02		sta $02		                STA TMPPTR1+2
.390b98	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390b9b	18		clc		                CLC
.390b9c	a5 04		lda $04		                LDA TMPPTR2
.390b9e	65 11		adc $11		                ADC COLS_PER_LINE
.390ba0	85 04		sta $04		                STA TMPPTR2
.390ba2	a9 91 6e	lda #$6e91	                LDA #<>greet_clr_line4
.390ba5	85 00		sta $00		                STA TMPPTR1
.390ba7	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390baa	85 02		sta $02		                STA TMPPTR1+2
.390bac	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390baf	18		clc		                CLC
.390bb0	a5 04		lda $04		                LDA TMPPTR2
.390bb2	65 11		adc $11		                ADC COLS_PER_LINE
.390bb4	85 04		sta $04		                STA TMPPTR2
.390bb6	a9 bb 6e	lda #$6ebb	                LDA #<>greet_clr_line5
.390bb9	85 00		sta $00		                STA TMPPTR1
.390bbb	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390bbe	85 02		sta $02		                STA TMPPTR1+2
.390bc0	20 2a 0b	jsr $390b2a	                JSR COPYBYTES42
.390bc3	2b		pld		                PLD
.390bc4	ab		plb		                PLB
.390bc5	28		plp		                PLP
.390bc6	7a		ply		                PLY
.390bc7	fa		plx		                PLX
.390bc8	68		pla		                PLA
.390bc9	6b		rtl		                RTL
.390bca	0b		phd		IINITCHLUT		  PHD
.390bcb	08		php		                PHP
.390bcc	48		pha		                PHA
.390bcd	da		phx		                PHX
.390bce	e2 20		sep #$20	                SEP #$20        ; set A short
.390bd0	e2 10		sep #$10	                SEP #$10        ; set X short
.390bd2	a2 00		ldx #$00					        LDX	#$00
.390bd4	bf e5 6e 39	lda $396ee5,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390bd8	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390bdc	e8		inx		                inx
.390bdd	e0 40		cpx #$40	                cpx #$40
.390bdf	d0 f3		bne $390bd4	                bne lutinitloop0
.390be1	a2 00		ldx #$00	                LDX	#$00
.390be3	bf 25 6f 39	lda $396f25,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390be7	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390beb	e8		inx		                INX
.390bec	e0 40		cpx #$40	                CPX #$40
.390bee	d0 f3		bne $390be3	                bne lutinitloop1
.390bf0	c2 20		rep #$20	                REP #$20        ; set A long
.390bf2	c2 10		rep #$10	                REP #$10        ; set X long
.390bf4	fa		plx		                PLX
.390bf5	68		pla		                PLA
.390bf6	28		plp		                PLP
.390bf7	2b		pld		                PLD
.390bf8	6b		rtl		                RTL
.390bf9					IINITGAMMATABLE
.390bf9	e2 20		sep #$20	                SEP #$20        ; set A short
.390bfb	c2 10		rep #$10	                REP #$10        ; set X long
.390bfd	a2 00 00	ldx #$0000	                ldx #$0000
.390c00	bf 00 76 39	lda $397600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c04	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c08	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c0c	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c10	e8		inx		                inx
.390c11	e0 00 01	cpx #$0100	                cpx #$0100
.390c14	d0 ea		bne $390c00	                bne initgammaloop
.390c16	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c18	6b		rtl		                RTL
.390c19	48		pha		IINITALLLUT     PHA
.390c1a	da		phx		                PHX
.390c1b	a2 00 00	ldx #$0000	                LDX #$0000
.390c1e	e2 20		sep #$20	                SEP #$20        ; set A short
.390c20	a9 00		lda #$00	                LDA #$00
.390c22	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c24					iinit_lut_loop
.390c24	86 02		stx $02		                STX $02
.390c26	a6 0a		ldx $0a		                LDX $0A
.390c28	bf 00 75 39	lda $397500,x	                LDA GAMMA_2_2_Tbl, x
.390c2c	49 55		eor #$55	                EOR  #$55
.390c2e	a6 02		ldx $02		                LDX $02
.390c30	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c34	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c38	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c3c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c40	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c44	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c48	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c4c	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c50	e8		inx		                inx
.390c51	86 02		stx $02		                STX $02
.390c53	a6 0a		ldx $0a		                LDX $0A
.390c55	bf 00 77 39	lda $397700,x	                LDA RANDOM_LUT_Tbl, x
.390c59	a6 02		ldx $02		                LDX $02
.390c5b	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c5f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c63	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c67	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c6b	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c6f	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c73	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c77	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c7b	e8		inx		                inx
.390c7c	86 02		stx $02		                STX $02
.390c7e	a6 0a		ldx $0a		                LDX $0A
.390c80	bf 00 76 39	lda $397600,x	                LDA GAMMA_1_8_Tbl, x
.390c84	49 aa		eor #$aa	                EOR  #$AA
.390c86	a6 02		ldx $02		                LDX $02
.390c88	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c8c	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c90	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c94	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c98	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c9c	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ca0	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ca4	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ca8	e8		inx		                inx
.390ca9	a9 ff		lda #$ff	                LDA #$FF
.390cab	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390caf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cb3	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cb7	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cbb	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cbf	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cc3	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cc7	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ccb	e6 0a		inc $0a		                inc $0A
.390ccd	e8		inx		                inx
.390cce	e0 00 04	cpx #$0400	                cpx #$0400
.390cd1	f0 03		beq $390cd6	                beq iinit_lut_exit
.390cd3	82 4e ff	brl $390c24	                brl iinit_lut_loop
.390cd6					iinit_lut_exit
.390cd6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cd8	fa		plx		                PLX
.390cd9	68		pla		                PLA
.390cda	6b		rtl		                RTL
.390cdb	48		pha		IINITVKYTXTMODE PHA
.390cdc	08		php		                PHP
.390cdd	c2 20		rep #$20	                REP #$20        ; set A long
.390cdf	a9 00 00	lda #$0000	                LDA #0
.390ce2	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390ce6	a9 01 01	lda #$0101	                LDA #$101
.390ce9	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390ced					INITVICKYMODE
.390ced	c2 20		rep #$20	                REP #$20        ; set A long
.390cef	a9 01 00	lda #$0001	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390cf2	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390cf6					INITVICKYBORDER
.390cf6	e2 20		sep #$20	                SEP #$20        ; set A short
.390cf8	a9 20		lda #$20	                LDA #$20
.390cfa	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390cfe	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d02	a9 00		lda #$00	                LDA #$00
.390d04	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d08	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d0a	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d0e	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d10	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d14	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d18	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d1a	22 21 0d 39	jsl $390d21	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d1e	28		plp		                PLP
.390d1f	68		pla		                PLA
.390d20	6b		rtl		                RTL
.390d21					ISETSIZES
.390d21	48		pha		                PHA
.390d22	da		phx		                PHX
.390d23	5a		phy		                PHY
.390d24	8b		phb		                PHB
.390d25	0b		phd		                PHD
.390d26	08		php		                PHP
.390d27	48		pha		                PHA             ; begin setdp macro
.390d28	08		php		                PHP
.390d29	c2 20		rep #$20	                REP #$20        ; set A long
.390d2b	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d2e	5b		tcd		                TCD
.390d2f	28		plp		                PLP
.390d30	68		pla		                PLA             ; end setdp macro
.390d31	48		pha		                PHA             ; begin setdbr macro
.390d32	08		php		                PHP
.390d33	e2 20		sep #$20	                SEP #$20        ; set A short
.390d35	a9 00		lda #$00	                LDA #0
.390d37	48		pha		                PHA
.390d38	ab		plb		                PLB
.390d39	28		plp		                PLP
.390d3a	68		pla		                PLA             ; end setdbr macro
.390d3b	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d3d	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d41	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d43	0a		asl a		                ASL A
.390d44	aa		tax		                TAX                         ; Index to the col/line count in X
.390d45	c2 20		rep #$20	                REP #$20        ; set A long
.390d47	bf c4 0d 39	lda $390dc4,x	                LDA cols_by_res,X           ; Get the number of columns
.390d4b	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390d4d	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390d4f	bf cc 0d 39	lda $390dcc,x	                LDA lines_by_res,X          ; Get the number of lines
.390d53	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390d55	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390d57	e2 20		sep #$20	                SEP #$20        ; set A short
.390d59	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390d5d	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390d5f	f0 5c		beq $390dbd	                BEQ done                    ; No border... the sizes are correct now
.390d61	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390d65	29 3f		and #$3f	                AND #$3F
.390d67	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390d69	d0 04		bne $390d6f	                BNE frac_width
.390d6b	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390d6c	4a		lsr a		                LSR A
.390d6d	80 03		bra $390d72	                BRA store_width
.390d6f	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390d70	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390d71	1a		inc a		                INC A
.390d72	85 00		sta $00		store_width     STA TMPPTR1
.390d74	64 01		stz $01		                STZ TMPPTR1+1
.390d76	e2 20		sep #$20	                SEP #$20        ; set A short
.390d78	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390d7c	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390d7e	f0 04		beq $390d84	                BEQ adjust_width            ; No... just adjust the width of the screen
.390d80	c2 20		rep #$20	                REP #$20        ; set A long
.390d82	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390d84					adjust_width
.390d84	c2 20		rep #$20	                REP #$20        ; set A long
.390d86	38		sec		                SEC
.390d87	a5 11		lda $11		                LDA COLS_PER_LINE
.390d89	e5 00		sbc $00		                SBC TMPPTR1
.390d8b	85 0f		sta $0f		                STA COLS_VISIBLE
.390d8d	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390d91	29 3f 00	and #$003f	                AND #$3F
.390d94	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390d97	d0 04		bne $390d9d	                BNE frac_height
.390d99	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390d9a	4a		lsr a		                LSR A
.390d9b	80 03		bra $390da0	                BRA store_height
.390d9d	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390d9e	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390d9f	1a		inc a		                INC A
.390da0	85 00		sta $00		store_height    STA TMPPTR1
.390da2	64 01		stz $01		                STZ TMPPTR1+1
.390da4	e2 20		sep #$20	                SEP #$20        ; set A short
.390da6	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390daa	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dac	f0 04		beq $390db2	                BEQ adjust_height           ; No... just adjust the height of the screen
.390dae	c2 20		rep #$20	                REP #$20        ; set A long
.390db0	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390db2					adjust_height
.390db2	c2 20		rep #$20	                REP #$20        ; set A long
.390db4	38		sec		                SEC
.390db5	a5 15		lda $15		                LDA LINES_MAX
.390db7	e5 00		sbc $00		                SBC TMPPTR1
.390db9	85 13		sta $13		                STA LINES_VISIBLE
.390dbb	c2 30		rep #$30	                REP #$30        ; set A&X long
.390dbd	28		plp		done            PLP
.390dbe	2b		pld		                PLD
.390dbf	ab		plb		                PLB
.390dc0	7a		ply		                PLY
.390dc1	fa		plx		                PLX
.390dc2	68		pla		                PLA
.390dc3	6b		rtl		                RTL
>390dc4	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390dcc	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390dd4					IINITVKYGRPMODE
.390dd4	48		pha		                PHA
.390dd5	e2 20		sep #$20	                SEP #$20        ; set A short
.390dd7	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390dd9	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390ddd	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ddf	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390de3	a9 c0		lda #$c0	                LDA #$C0
.390de5	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390de9	a9 00		lda #$00	                LDA #$00
.390deb	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390def	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390df1	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390df5	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390df7	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390dfb	a9 c0		lda #$c0	                LDA #$C0
.390dfd	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e01	a9 00		lda #$00	                LDA #$00
.390e03	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e07	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e09	68		pla		                PLA
.390e0a	6b		rtl		                RTL
.390e0b					IINITTILEMODE
.390e0b	6b		rtl		                RTL
.390e0c	48		pha		IINITSPRITE     PHA
.390e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.390e0f	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e11	8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e15	8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e19	8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e1d	8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e21	8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e25	8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e29	8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e2d	8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e31	8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e35	8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e39	8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e3d	8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390e41	8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390e45	8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390e49	8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390e4d	8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390e51	8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390e55	a9 09		lda #$09	                LDA #$09
.390e57	8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390e5b	8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390e5f	8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390e63	8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390e67	8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390e6b	8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390e6f	8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390e73	8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390e77	8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390e7b	8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390e7f	8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390e83	8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390e87	8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390e8b	8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390e8f	8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390e93	8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390e97	8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390e9b	a9 00		lda #$00	                LDA #$00
.390e9d	8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390ea1	a9 04		lda #$04	                LDA #$04
.390ea3	8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390ea7	a9 08		lda #$08	                LDA #$08
.390ea9	8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390ead	a9 0c		lda #$0c	                LDA #$0C
.390eaf	8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390eb3	a9 10		lda #$10	                LDA #$10
.390eb5	8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390eb9	a9 14		lda #$14	                LDA #$14
.390ebb	8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390ebf	a9 18		lda #$18	                LDA #$18
.390ec1	8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390ec5	a9 1c		lda #$1c	                LDA #$1C
.390ec7	8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390ecb	a9 20		lda #$20	                LDA #$20
.390ecd	8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390ed1	a9 24		lda #$24	                LDA #$24
.390ed3	8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390ed7	a9 28		lda #$28	                LDA #$28
.390ed9	8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390edd	a9 2c		lda #$2c	                LDA #$2C
.390edf	8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390ee3	a9 30		lda #$30	                LDA #$30
.390ee5	8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390ee9	a9 34		lda #$34	                LDA #$34
.390eeb	8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390eef	a9 38		lda #$38	                LDA #$38
.390ef1	8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390ef5	a9 3c		lda #$3c	                LDA #$3C
.390ef7	8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390efb	a9 40		lda #$40	                LDA #$40
.390efd	8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f01	a9 00		lda #$00	                LDA #$00
.390f03	8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f07	8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f0b	8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f0f	8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f13	8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f17	8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f1b	8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f1f	8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f23	8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f27	8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f2b	8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f2f	8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f33	8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f37	8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f3b	8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f3f	8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390f43	8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390f47	68		pla		                PLA
.390f48	6b		rtl		                RTL
.390f49					IINITFONTSET
.390f49	e2 20		sep #$20	                SEP #$20        ; set A short
.390f4b	c2 10		rep #$10	                REP #$10        ; set X long
.390f4d	a2 00 00	ldx #$0000	                LDX #$0000
.390f50					initFontsetbranch0
.390f50	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390f54	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390f58	e8		inx		                INX
.390f59	e0 00 08	cpx #$0800	                CPX #$0800
.390f5c	d0 f2		bne $390f50	                BNE initFontsetbranch0
.390f5e	ea		nop		                NOP
.390f5f	a2 00 00	ldx #$0000	                LDX #$0000
.390f62					initFontsetbranch1
.390f62	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390f66	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390f6a	e8		inx		                INX
.390f6b	e0 00 08	cpx #$0800	                CPX #$0800
.390f6e	d0 f2		bne $390f62	                BNE initFontsetbranch1
.390f70	ea		nop		                NOP
.390f71	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f73	6b		rtl		                RTL
.390f74					INITMOUSEPOINTER
.390f74	e2 20		sep #$20	                SEP #$20        ; set A short
.390f76	c2 10		rep #$10	                REP #$10        ; set X long
.390f78	a2 00 00	ldx #$0000	                LDX #$0000
.390f7b					FILL_MOUSE_MARKER
.390f7b	bf 00 78 39	lda $397800,x	                LDA @lMOUSE_POINTER_PTR,X
.390f7f	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390f83	e8		inx		                INX
.390f84	e0 00 01	cpx #$0100	                CPX #$0100
.390f87	d0 f2		bne $390f7b	                BNE FILL_MOUSE_MARKER
.390f89	ea		nop		                nop
.390f8a	a9 01		lda #$01	                LDA #$01
.390f8c	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390f90	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f92	6b		rtl		                RTL
.390f93	48		pha		IINITCURSOR     PHA
.390f94	e2 20		sep #$20	                SEP #$20        ; set A short
.390f96	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390f98	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390f9c	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390f9e	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390fa2	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fa4	a9 00 00	lda #$0000	                LDA #$0000;
.390fa7	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390fab	a9 06 00	lda #$0006	                LDA #$0006;
.390fae	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390fb2	68		pla		                PLA
.390fb3	6b		rtl		                RTL
.390fb4	0b		phd		IINITSUPERIO	  PHD
.390fb5	08		php		                PHP
.390fb6	48		pha		                PHA
.390fb7	e2 20		sep #$20	                SEP #$20        ; set A short
.390fb9	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fbb	8f 23 11 af	sta $af1123	                STA GP10_REG
.390fbf	af 23 11 af	lda $af1123	                LDA GP10_REG
.390fc3	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fc5	8f 24 11 af	sta $af1124	                STA GP11_REG
.390fc9	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fcb	8f 25 11 af	sta $af1125	                STA GP12_REG
.390fcf	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fd1	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390fd5	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390fd7	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390fdb	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390fdd	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390fe1	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390fe3	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390fe7	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390fe9	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390fed	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390fef	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390ff3	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ff5	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390ff9	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390ffb	8f 30 11 af	sta $af1130					        STA GP25_REG
.390fff	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.391001	8f 31 11 af	sta $af1131					        STA GP26_REG
.391005	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.391007	8f 33 11 af	sta $af1133					        STA GP30_REG
.39100b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.39100d	8f 34 11 af	sta $af1134					        STA GP31_REG
.391011	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391013	8f 35 11 af	sta $af1135					        STA GP32_REG
.391017	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.391019	8f 36 11 af	sta $af1136					        STA GP33_REG
.39101d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.39101f	8f 37 11 af	sta $af1137					        STA GP34_REG
.391023	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391025	8f 38 11 af	sta $af1138					        STA GP35_REG
.391029	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.39102b	8f 39 11 af	sta $af1139					        STA GP36_REG
.39102f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.391031	8f 3a 11 af	sta $af113a					        STA GP37_REG
.391035	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391037	8f 3d 11 af	sta $af113d					        STA GP42_REG
.39103b	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.39103d	8f 3e 11 af	sta $af113e					        STA GP43_REG
.391041	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391043	8f 3f 11 af	sta $af113f					        STA GP50_REG
.391047	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.391049	8f 40 11 af	sta $af1140					        STA GP51_REG
.39104d	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.39104f	8f 41 11 af	sta $af1141					        STA GP52_REG
.391053	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391055	8f 42 11 af	sta $af1142					        STA GP53_REG
.391059	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.39105b	8f 43 11 af	sta $af1143					        STA GP54_REG
.39105f	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.391061	8f 44 11 af	sta $af1144					        STA GP55_REG
.391065	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.391067	8f 45 11 af	sta $af1145					        STA GP56_REG
.39106b	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.39106d	8f 46 11 af	sta $af1146					        STA GP57_REG
.391071	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.391073	8f 47 11 af	sta $af1147					        STA GP60_REG
.391077	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.391079	8f 48 11 af	sta $af1148					        STA GP61_REG
.39107d	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.39107f	8f 4b 11 af	sta $af114b					        STA GP1_REG
.391083	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.391085	8f 4c 11 af	sta $af114c					        STA GP2_REG
.391089	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.39108b	8f 4d 11 af	sta $af114d					        STA GP3_REG
.39108f	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.391091	8f 4e 11 af	sta $af114e					        STA GP4_REG
.391095	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.391097	8f 4f 11 af	sta $af114f					        STA GP5_REG
.39109b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.39109d	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910a1	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910a3	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910a7	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910a9	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910ad	c2 20		rep #$20	                REP #$20        ; set A long
.3910af	68		pla		                PLA
.3910b0	28		plp						        PLP
.3910b1	2b		pld					        	PLD
.3910b2	6b		rtl		                RTL
.3910b3	0b		phd		IINITKEYBOARD	  PHD
.3910b4	08		php						        PHP
.3910b5	48		pha						        PHA
.3910b6	da		phx						        PHX
.3910b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3910b9	c2 10		rep #$10	                REP #$10        ; set X long
.3910bb	18		clc		                CLC
.3910bc	20 6c 11	jsr $39116c	                JSR Poll_Inbuf ;
.3910bf	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.3910c1	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.3910c5	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.3910c8	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.3910cc	c9 55		cmp #$55					        CMP #$55
.3910ce	f0 03		beq $3910d3					        BEQ	passAAtest
.3910d0	82 89 00	brl $39115c	                BRL initkb_loop_out
.3910d3					passAAtest
.3910d3	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.3910d5	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.3910d9	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.3910dc	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.3910e0	c9 00		cmp #$00					        CMP #$00			;Should be 00
.3910e2	f0 03		beq $3910e7					        BEQ	passABtest
.3910e4	82 75 00	brl $39115c	                BRL initkb_loop_out
.3910e7					passABtest
.3910e7	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.3910e9	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910ed	20 6c 11	jsr $39116c	                JSR Poll_Inbuf ;
.3910f0	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.3910f2	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3910f6	20 6c 11	jsr $39116c	                JSR Poll_Inbuf ;
.3910f9	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.3910fb	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3910ff	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391102	ca		dex		DLY_LOOP1       DEX
.391103	ea		nop		                NOP
.391104	ea		nop		                NOP
.391105	ea		nop		                NOP
.391106	ea		nop		                NOP
.391107	ea		nop		                NOP
.391108	ea		nop		                NOP
.391109	ea		nop		                NOP
.39110a	ea		nop		                NOP
.39110b	e0 00 00	cpx #$0000	                CPX #$0000
.39110e	d0 f2		bne $391102	                BNE DLY_LOOP1
.391110	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.391113	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391117					DO_CMD_F4_AGAIN
.391117	20 6c 11	jsr $39116c	                JSR Poll_Inbuf ;
.39111a	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.39111c	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.391120	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.391123	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391127	c9 fa		cmp #$fa	                CMP #$FA
.391129	d0 ec		bne $391117	                BNE DO_CMD_F4_AGAIN
.39112b	20 82 11	jsr $391182	                JSR INIT_MOUSE
.39112e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.391132	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391134	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391138	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.39113c	29 01		and #$01	                AND #FNX1_INT00_KBD
.39113e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391142	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391146	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391148	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39114c	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.391150	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.391152	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391156	a2 e1 6f	ldx #$6fe1	                LDX #<>Success_kb_init
.391159	38		sec		                SEC
.39115a	b0 03		bcs $39115f	                BCS InitSuccess
.39115c	a2 f3 6f	ldx #$6ff3	initkb_loop_out LDX #<>Failed_kb_init
.39115f	22 82 07 39	jsl $390782	InitSuccess     JSL IPRINT       ; print Message
.391163	c2 20		rep #$20	                REP #$20        ; set A long
.391165	c2 10		rep #$10	                REP #$10        ; set X long
.391167	fa		plx		                PLX
.391168	68		pla		                PLA
.391169	28		plp						        PLP
.39116a	2b		pld						        PLD
.39116b	6b		rtl		                RTL
.39116c					Poll_Inbuf
.39116c	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.391170	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.391172	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391174	f0 f6		beq $39116c					        BEQ Poll_Inbuf
.391176	60		rts		                RTS
.391177					Poll_Outbuf
.391177	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.39117b	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39117d	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39117f	d0 f6		bne $391177	                BNE Poll_Outbuf
.391181	60		rts		                RTS
.391182					INIT_MOUSE
.391182	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.391185	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.391187	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39118b					DO_CMD_A9_AGAIN
.39118b	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.39118e	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.391190	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391194	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.391197	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.39119b	c9 00		cmp #$00	                CMP #$00
.39119d	d0 ec		bne $39118b	                BNE DO_CMD_A9_AGAIN
.39119f	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.3911a2	a9 20		lda #$20	                LDA #$20
.3911a4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911a8	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.3911ab	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911af	09 02		ora #$02	                ORA #$02
.3911b1	48		pha		                PHA
.3911b2	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.3911b5	a9 60		lda #$60	                LDA #$60
.3911b7	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911bb	20 6c 11	jsr $39116c	                JSR Poll_Inbuf ;
.3911be	68		pla		                PLA
.3911bf	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3911c3	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3911c5	20 e8 11	jsr $3911e8	                JSR MOUSE_WRITE
.3911c8	20 fb 11	jsr $3911fb	                JSR MOUSE_READ
.3911cb	a9 e8		lda #$e8	                LDA #$E8
.3911cd	20 e8 11	jsr $3911e8	                JSR MOUSE_WRITE
.3911d0	20 fb 11	jsr $3911fb	                JSR MOUSE_READ
.3911d3	a9 00		lda #$00	                LDA #$00
.3911d5	20 e8 11	jsr $3911e8	                JSR MOUSE_WRITE
.3911d8	20 fb 11	jsr $3911fb	                JSR MOUSE_READ
.3911db	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.3911dd	20 e8 11	jsr $3911e8	                JSR MOUSE_WRITE
.3911e0	20 fb 11	jsr $3911fb	                JSR MOUSE_READ
.3911e3	a9 00		lda #$00	                LDA #$00
.3911e5	85 e0		sta $e0		                STA MOUSE_PTR
.3911e7	60		rts		                RTS
.3911e8					MOUSE_WRITE
.3911e8	48		pha		                PHA
.3911e9	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.3911ec	a9 d4		lda #$d4	                LDA #$D4
.3911ee	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911f2	20 6c 11	jsr $39116c	                JSR Poll_Inbuf
.3911f5	68		pla		                PLA
.3911f6	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3911fa	60		rts		                RTS
.3911fb					MOUSE_READ
.3911fb	20 77 11	jsr $391177	                JSR Poll_Outbuf ;
.3911fe	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391202	60		rts		                RTS
.391203	48		pha		INITRTC         PHA
.391204	08		php		                PHP
.391205	e2 20		sep #$20	                SEP #$20        ; set A short
.391207	a9 00		lda #$00	                LDA #0
.391209	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39120d	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391211	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391215	09 04		ora #$04	                ORA #%00000100
.391217	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39121b	28		plp		                PLP
.39121c	68		pla		                PLA
.39121d	6b		rtl		                RTL
.39121e					ITESTSID
.39121e	a9 0f		lda #$0f	                LDA #$0F
.391220	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391224	a9 be		lda #$be	                LDA #$BE
.391226	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39122a	a9 f8		lda #$f8	                LDA #$F8
.39122c	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391230	a9 11		lda #$11	                LDA #$11
.391232	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391236	a9 25		lda #$25	                LDA #$25
.391238	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39123c	a9 11		lda #$11	                LDA #$11
.39123e	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391242	a9 08		lda #$08	                LDA #$08
.391244	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391248	a9 00		lda #$00	                LDA #$00
.39124a	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39124e	a9 c6		lda #$c6	                LDA #$C6
.391250	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391254	a9 08		lda #$08	                LDA #$08
.391256	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39125a	a9 00		lda #$00	                LDA #$00
.39125c	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.391260	a9 08		lda #$08	                LDA #$08
.391262	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391266	a9 c6		lda #$c6	                LDA #$C6
.391268	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.39126c	a9 08		lda #$08	                LDA #$08
.39126e	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391272	a9 00		lda #$00	                LDA #$00
.391274	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.391278	a9 08		lda #$08	                LDA #$08
.39127a	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.39127e	a9 c6		lda #$c6	                LDA #$C6
.391280	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391284	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.391286	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39128a	a9 01		lda #$01	                LDA #$01
.39128c	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.391290	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391292	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.391296	a9 08		lda #$08	                LDA #$08
.391298	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39129c	a9 08		lda #$08	                LDA #$08
.39129e	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912a2	a9 0c		lda #$0c	                LDA #$0C
.3912a4	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912a8	a9 04		lda #$04	                LDA #$04
.3912aa	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912ae	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912b0	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912b4	a9 08		lda #$08	                LDA #$08
.3912b6	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912ba	a9 08		lda #$08	                LDA #$08
.3912bc	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3912c0	a9 00		lda #$00	                LDA #$00
.3912c2	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.3912c6	a9 08		lda #$08	                LDA #$08
.3912c8	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.3912cc	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912ce	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.3912d2	a9 08		lda #$08	                LDA #$08
.3912d4	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912d8	a9 08		lda #$08	                LDA #$08
.3912da	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.3912de	a9 10		lda #$10	                LDA #$10
.3912e0	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.3912e4	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.3912e8	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.3912ec	6b		rtl		                RTL
.3912ed	48		pha		IINITCODEC      PHA
.3912ee	c2 20		rep #$20	                REP #$20        ; set A long
.3912f0	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.3912f3	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3912f7	a9 01 00	lda #$0001	                LDA #$0001
.3912fa	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3912fe	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391301	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391304	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391308	a9 01 00	lda #$0001	                LDA #$0001
.39130b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39130f	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391312	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391315	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391319	a9 01 00	lda #$0001	                LDA #$0001
.39131c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391320	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391323	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391326	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39132a	a9 01 00	lda #$0001	                LDA #$0001
.39132d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391331	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391334	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391337	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39133b	a9 01 00	lda #$0001	                LDA #$0001
.39133e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391342	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391345	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391348	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39134c	a9 01 00	lda #$0001	                LDA #$0001
.39134f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391353	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391356	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391359	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39135d	a9 01 00	lda #$0001	                LDA #$0001
.391360	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391364	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.391367	68		pla		                PLA
.391368	6b		rtl		                RTL
.391369					IRESETCODEC
.391369	c2 20		rep #$20	                REP #$20        ; set A long
.39136b	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39136e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391372	a9 01 00	lda #$0001	                LDA #$0001
.391375	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391379	20 7d 13	jsr $39137d	                JSR CODEC_TRF_FINISHED
.39137c	6b		rtl		                RTL
.39137d					CODEC_TRF_FINISHED
.39137d	e2 20		sep #$20	                SEP #$20        ; set A short
.39137f	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391383	29 01		and #$01	                AND #$01
.391385	c9 01		cmp #$01	                CMP #$01
.391387	f0 f6		beq $39137f	                BEQ CODEC_LOOP
.391389	c2 20		rep #$20	                REP #$20        ; set A long
.39138b	60		rts		                RTS
.39138c					IBM_FILL_SCREEN
.39138c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39138e	a9 00 00	lda #$0000	                LDA #$0000
.391391	a2 00 00	ldx #$0000	                LDX #$0000
.391394					BM_FILL_SCREEN_LOOPY
.391394	a0 00 00	ldy #$0000	                LDY #$0000
.391397	e2 20		sep #$20	                SEP #$20        ; set A short
.391399					BM_FILL_SCREEN_LOOPX
.391399	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39139b	c8		iny		                INY
.39139c	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.39139e	d0 f9		bne $391399	                BNE BM_FILL_SCREEN_LOOPX
.3913a0	20 ab 13	jsr $3913ab	                JSR BM_FILL_COMPUTE_Y_DST
.3913a3	e8		inx		                INX
.3913a4	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913a6	d0 ec		bne $391394	                BNE BM_FILL_SCREEN_LOOPY
.3913a8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913aa	6b		rtl		                RTL
.3913ab					BM_FILL_COMPUTE_Y_DST
.3913ab	c2 20		rep #$20	                REP #$20        ; set A long
.3913ad	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913af	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913b3	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913b5	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913b9	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3913bc	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913c0	a9 00 00	lda #$0000	                LDA #$0000
.3913c3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3913c7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913cb	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913cd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913d1	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3913d3	a9 00 00	lda #$0000	                LDA #$0000
.3913d6	60		rts		                RTS
.3913d7					IBMP_PARSER
.3913d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913d9	a0 00 00	ldy #$0000	                LDY #$0000
.3913dc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3913de	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3913e1	f0 03		beq $3913e6	                BEQ IBMP_PARSER_CONT
.3913e3	82 04 01	brl $3914ea	                BRL BMP_PARSER_END_WITH_ERROR
.3913e6					IBMP_PARSER_CONT
.3913e6	a0 02 00	ldy #$0002	                LDY #$0002
.3913e9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3913eb	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3913ef	a0 04 00	ldy #$0004	                LDY #$0004
.3913f2	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.3913f4	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3913f8	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.3913fb	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913ff	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391403	18		clc		                CLC
.391404	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391408	85 50		sta $50		                STA BMP_FILE_SIZE
.39140a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39140e	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391410	a0 12 00	ldy #$0012	                LDY #$0012
.391413	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391415	85 40		sta $40		                STA BMP_X_SIZE
.391417	a0 16 00	ldy #$0016	                LDY #$0016
.39141a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39141c	85 42		sta $42		                STA BMP_Y_SIZE
.39141e	a0 2e 00	ldy #$002e	                LDY #$002E
.391421	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391423	0a		asl a		                ASL A; Multiply by 2
.391424	0a		asl a		                ASL A; Multiply by 2
.391425	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391427	e0 00 00	cpx #$0000	                CPX #$0000
.39142a	d0 05		bne $391431	                BNE BMP_LUT1_PICK
.39142c	20 f2 14	jsr $3914f2	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39142f	80 08		bra $391439	                BRA DONE_TRANSFER_LUT;
.391431					  BMP_LUT1_PICK
.391431	e0 01 00	cpx #$0001	                CPX #$0001
.391434	d0 03		bne $391439	                BNE BMP_LUT2_PICK
.391436	20 22 15	jsr $391522	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391439					  BMP_LUT2_PICK
.391439					  DONE_TRANSFER_LUT
.391439	a5 56		lda $56		                LDA BMP_POSITION_Y
.39143b	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39143f	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391441	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391445	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391449	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39144d	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391451	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391455	a5 54		lda $54		                LDA BMP_POSITION_X
.391457	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39145b	a9 00 00	lda #$0000	                LDA #$0000
.39145e	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391462	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391466	85 f0		sta $f0		                STA USER_TEMP
.391468	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39146c	85 f2		sta $f2		                STA USER_TEMP+2
.39146e	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391470	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391474	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391476	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39147a	a5 f0		lda $f0		                LDA USER_TEMP
.39147c	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391480	a5 f2		lda $f2		                LDA USER_TEMP+2
.391482	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391486	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.39148a	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39148c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391490	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391492	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391494	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391498	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.39149a	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39149e	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914a0	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914a4	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914a6	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914aa	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914ae	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914b0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914b4	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914b6	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914b8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914bc	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3914be	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914c2	18		clc		                CLC
.3914c3	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3914c5	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3914c8	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3914cb	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3914cf	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3914d2	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3914d6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914da	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914dc	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914e0	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914e2	20 52 15	jsr $391552	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3914e5	a2 2f 70	ldx #$702f	                LDX #<>bmp_parser_msg0
.3914e8	80 03		bra $3914ed	                BRA BMP_PARSER_END_NO_ERROR
.3914ea					BMP_PARSER_END_WITH_ERROR
.3914ea	a2 1b 70	ldx #$701b	                LDX #<>bmp_parser_err0
.3914ed					BMP_PARSER_END_NO_ERROR
.3914ed	22 82 07 39	jsl $390782	                JSL IPRINT       ; print the first line
.3914f1	6b		rtl		                RTL
.3914f2					BMP_PARSER_UPDATE_LUT0
.3914f2	38		sec		                SEC
.3914f3	a0 7a 00	ldy #$007a	                LDY #$007A
.3914f6	a2 00 00	ldx #$0000	                LDX #$0000
.3914f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3914fb					BMP_PARSER_UPDATE_LOOP
.3914fb	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3914fd	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391501	c8		iny		                INY
.391502	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391504	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391508	c8		iny		                INY
.391509	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39150b	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39150f	c8		iny		                INY
.391510	a9 80		lda #$80	                LDA #$80
.391512	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391516	c8		iny		                INY ; For the Alpha Value, nobody cares
.391517	e8		inx		                INX
.391518	e8		inx		                INX
.391519	e8		inx		                INX
.39151a	e8		inx		                INX
.39151b	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39151d	d0 dc		bne $3914fb	                BNE BMP_PARSER_UPDATE_LOOP
.39151f	c2 20		rep #$20	                REP #$20        ; set A long
.391521	60		rts		                RTS
.391522					BMP_PARSER_UPDATE_LUT1
.391522	38		sec		                SEC
.391523	a0 36 00	ldy #$0036	                LDY #$0036
.391526	a2 00 00	ldx #$0000	                LDX #$0000
.391529	e2 20		sep #$20	                SEP #$20        ; set A short
.39152b					PALETTE_LUT1_LOOP
.39152b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39152d	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391531	c8		iny		                INY
.391532	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391534	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391538	c8		iny		                INY
.391539	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39153b	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39153f	c8		iny		                INY
.391540	a9 80		lda #$80	                LDA #$80
.391542	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391546	c8		iny		                INY ; For the Alpha Value, nobody cares
.391547	e8		inx		                INX
.391548	e8		inx		                INX
.391549	e8		inx		                INX
.39154a	e8		inx		                INX
.39154b	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39154d	d0 dc		bne $39152b	                BNE PALETTE_LUT1_LOOP
.39154f	c2 20		rep #$20	                REP #$20        ; set A long
.391551	60		rts		                RTS
.391552					BMP_PARSER_DMA_SHIT_OUT
.391552	a2 00 00	ldx #$0000	                LDX #$0000
.391555					BMP_PARSER_LOOPY
.391555	a0 00 00	ldy #$0000	                LDY #$0000
.391558	e2 20		sep #$20	                SEP #$20        ; set A short
.39155a					BMP_PARSER_LOOPX
.39155a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39155c	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39155e	c8		iny		                INY
.39155f	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391561	d0 f7		bne $39155a	                BNE BMP_PARSER_LOOPX
.391563	20 6f 15	jsr $39156f	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391566	20 8a 15	jsr $39158a	                JSR BMP_PARSER_COMPUTE_Y_DST
.391569	e8		inx		                INX
.39156a	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39156c	d0 e7		bne $391555	                BNE BMP_PARSER_LOOPY
.39156e	60		rts		                RTS
.39156f					BMP_PARSER_COMPUTE_Y_SRC
.39156f	c2 20		rep #$20	                REP #$20        ; set A long
.391571	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391573	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391577	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391579	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39157d	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391581	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391583	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391587	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391589	60		rts		                RTS
.39158a					BMP_PARSER_COMPUTE_Y_DST
.39158a	c2 20		rep #$20	                REP #$20        ; set A long
.39158c	18		clc		                CLC
.39158d	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39158f	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391591	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391593	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391595	69 00 00	adc #$0000	                ADC #$0000
.391598	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39159a	60		rts		                RTS
.39159b	ea		nop		ILOOP           NOP
.39159c	ea		nop		                NOP
.39159d	ea		nop		                NOP
.39159e	ea		nop		                NOP
.39159f	ea		nop		                NOP
.3915a0	ea		nop		                NOP
.3915a1	ea		nop		                NOP
.3915a2	ea		nop		                NOP
.3915a3	ea		nop		                NOP
.3915a4	ea		nop		                NOP
.3915a5	6b		rtl		                RTL
.3915a6	22 9b 15 39	jsl $39159b	ILOOP_1         JSL ILOOP
.3915aa	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915ae	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915b2	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915b6	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915ba	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915be	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915c2	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915c6	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915ca	22 9b 15 39	jsl $39159b	                JSL ILOOP
.3915ce	6b		rtl		                RTL
.3915cf	22 a6 15 39	jsl $3915a6	ILOOP_1MS       JSL ILOOP_1
.3915d3	6b		rtl		                RTL
.3915d4	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3915d7	f0 07		beq $3915e0	                BEQ LOOP_MS_END
.3915d9	22 cf 15 39	jsl $3915cf	                JSL ILOOP_1MS
.3915dd	ca		dex		                DEX
.3915de	80 f4		bra $3915d4	                BRA ILOOP_MS
.3915e0	6b		rtl		LOOP_MS_END     RTL
.3915e1					IDELAY
.3915e1	8b		phb		                PHB
.3915e2	08		php		                PHP
.3915e3	48		pha		                PHA             ; begin setdbr macro
.3915e4	08		php		                PHP
.3915e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3915e7	a9 00		lda #$00	                LDA #0
.3915e9	48		pha		                PHA
.3915ea	ab		plb		                PLB
.3915eb	28		plp		                PLP
.3915ec	68		pla		                PLA             ; end setdbr macro
.3915ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3915ef	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.3915f1	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3915f5	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.3915f9	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.3915fb	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3915ff	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391601	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391604	a9 00		lda #$00	                LDA #0
.391606	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.39160a	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39160e	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391612	c2 30		rep #$30	                REP #$30        ; set A&X long
.391614	8a		txa		                TXA
.391615	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391619	98		tya		                TYA
.39161a	e2 20		sep #$20	                SEP #$20        ; set A short
.39161c	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391620	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391622	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391626	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391628	cb		wai		loop            WAI                         ; Wait for an interrupt
.391629	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.39162c	f0 fa		beq $391628	                BEQ loop                    ; Keep checking until it's set
.39162e	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391630	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391634	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391636	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391639	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39163d	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39163f	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391643	28		plp		                PLP
.391644	ab		plb		                PLB
.391645	6b		rtl		                RTL
.391646					SHOW_CREDITS
.391646	48		pha		                PHA
.391647	da		phx		                PHX
.391648	5a		phy		                PHY
.391649	08		php		                PHP
.39164a	e2 20		sep #$20	                SEP #$20        ; set A short
.39164c	c2 10		rep #$10	                REP #$10        ; set X long
.39164e	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391652	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391654	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391658	a2 00 00	ldx #$0000	                LDX #0
.39165b	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39165f	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391663	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391667	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39166b	e8		inx		                INX
.39166c	e0 00 20	cpx #$2000	                CPX #128 * 64
.39166f	d0 ea		bne $39165b	                BNE credit_loop
.391671	22 25 07 39	jsl $390725	                JSL IGETCHW                     ; Wait for a keypress
.391675	22 ff 0a 39	jsl $390aff	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391679	22 23 09 39	jsl $390923	                JSL ICSRHOME                    ; Move cursor to the home position
.39167d	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391681	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391683	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391687	28		plp		                PLP
.391688	7a		ply		                PLY
.391689	fa		plx		                PLX
.39168a	68		pla		                PLA
.39168b	6b		rtl		                RTL
.39168c	00		brk #		IRESTORE        BRK ; Warm boot routine
.39168d	00		brk #		ISCINIT         BRK ;
.39168e	00		brk #		IIOINIT         BRK ;
.39168f	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391690	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391691	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391692	00		brk #		ICLOSE          BRK ; Close a channel
.391693	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391694	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391695	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391696	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391697	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391698	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391699	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39169a	00		brk #		IPRINTF         BRK ; Print a float value
.39169b	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39169c	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39169d	00		brk #		IPUSHKEY        BRK ;
.39169e	00		brk #		IPUSHKEYS       BRK ;
.39169f	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916a0	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916a1	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916a9	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3916b9	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3916c1	12
>3916c2	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3916ca	15
>3916cb	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3916d1	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3916d6	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3916dc	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3916e4	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3916f2	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3916fa	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391708	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391710	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39171e	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391726	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391734	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39173c	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39174a	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391752	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>391760	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391768	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391776	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39177e	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39178c	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391794	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917a2	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917aa	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3917b8	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3917c0	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3917ce	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3917d6	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3917e4	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3917ec	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3917fa	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391802	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391810	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391818	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391826	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39182e	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39183c	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391844	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391852	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39185a	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391868	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391870	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39187e	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391886	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391894	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39189c	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918aa	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918b2	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3918c0	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3918c8	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3918d6	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3918de	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3918ec	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3918f4	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391902	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39190a	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391918	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391920	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39192e	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391936	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391944	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39194c	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39195a	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391962	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391970	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391978	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391986	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39198e	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39199c	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919a4	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919b2	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3919ba	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3919c8	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3919d0	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3919de	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3919e6	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>3919f4	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3919fc	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a0a	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a12	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a20	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a28	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a36	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a3e	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a4c	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a54	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391a62	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391a6a	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391a78	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391a80	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391a8e	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391a96	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391aa4	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391aac	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391aba	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391ac2	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391ad0	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391ad8	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391ae6	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391aee	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391afc	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b04	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b12	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b1a	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b28	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b30	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b3e	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b46	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b54	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391b5c	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391b6a	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391b72	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391b80	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391b88	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391b96	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391b9e	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bac	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bb4	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391bc2	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391bca	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391bd8	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391be0	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391bee	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391bf6	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c04	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c0c	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c1a	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c22	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c30	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c38	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c46	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c4e	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391c5c	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391c64	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391c72	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391c7a	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391c88	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391c90	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391c9e	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391ca6	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cb4	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391cbc	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391cca	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391cd2	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391ce0	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391ce8	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391cf6	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391cfe	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d0c	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d14	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d22	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d2a	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d38	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d40	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d4e	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d56	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391d64	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391d6c	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391d7a	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391d82	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391d90	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391d98	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391da6	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391dae	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391dbc	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391dc4	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391dd2	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391dda	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391de8	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391df0	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391dfe	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e06	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e14	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e1c	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e2a	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e32	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e40	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e48	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e56	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391e5e	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391e6c	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391e74	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391e82	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391e8a	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391e98	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391ea0	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391eae	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391eb6	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391ec4	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391ecc	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391eda	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391ee2	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391ef0	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391ef8	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f06	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f0e	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f1c	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f24	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f32	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f3a	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f48	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f50	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391f5e	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391f66	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391f74	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391f7c	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391f8a	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391f92	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fa0	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391fa8	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391fb6	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391fbe	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391fcc	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391fd4	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391fe2	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391fea	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391ff8	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>392000	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>39200e	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>392016	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>392024	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>39202c	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>39203a	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>392042	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>392050	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>392058	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>392066	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>39206e	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>39207c	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>392084	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>392092	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>39209a	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920a8	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920b0	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3920be	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3920c6	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3920d4	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>3920dc	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>3920ea	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>3920f2	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>392100	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392108	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392116	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39211e	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39212c	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392134	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392142	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>39214a	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392158	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>392160	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>39216e	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>392176	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>392184	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>39218c	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>39219a	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921a2	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921b0	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3921b8	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3921c6	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3921ce	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3921dc	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>3921e4	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>3921f2	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>3921fa	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392208	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392210	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39221e	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392226	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392234	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39223c	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>39224a	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392252	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>392260	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>392268	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>392276	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>39227e	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>39228c	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>392294	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922a2	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922aa	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3922b8	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3922c0	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3922ce	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3922d6	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>3922e4	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>3922ec	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>3922fa	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392302	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392310	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392318	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392326	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39232e	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39233c	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392344	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392352	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39235a	00 87 fa 00
>39235e	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392366	00 88 98 03
>39236a	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392372	00 88 98 03
>392376	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39237e	00 f9 69 00
>392382	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>39238a	80 e8 4a 00
>39238e	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392396	00 f6 9a 00
>39239a	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923a2	1b f2 34 00
>3923a6	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923ae	00 f7 8a 00
>3923b2	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3923ba	00 f6 47 00
>3923be	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923c6	00 f9 69 00
>3923ca	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3923d2	00 f7 a9 00
>3923d6	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3923de	00 87 fa 00
>3923e2	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3923ea	00 f7 a9 00
>3923ee	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3923f6	00 f5 f5 00
>3923fa	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392402	06 b8 d8 03
>392406	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39240e	00 f5 f5 00
>392412	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39241a	06 b8 d8 03
>39241e	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392426	00 f5 f5 00
>39242a	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392432	10 74 f8 03
>392436	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39243e	00 f5 f5 00
>392442	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39244a	00 f5 f5 00
>39244e	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392456	05 c5 d4 03
>39245a	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392462	00 f5 f5 00
>392466	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39246e	04 f9 44 03
>392472	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39247a	05 c5 d4 03
>39247e	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392486	04 f9 44 03
>39248a	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392492	03 87 f7 03
>392496	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39249e	05 c5 d4 03
>3924a2	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924aa	00 f6 28 00
>3924ae	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924b6	05 c5 d4 03
>3924ba	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3924c2	00 f5 f7 01
>3924c6	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924ce	04 f9 44 03
>3924d2	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3924da	00 99 f9 00
>3924de	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>3924e6	00 a8 f7 00
>3924ea	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3924f2	00 99 f9 00
>3924f6	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3924fe	00 a6 f6 00
>392502	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39250a	00 a6 f6 00
>39250e	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392516	00 f6 36 02
>39251a	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392522	00 f6 36 02
>392526	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39252e	00 96 e8 01
>392532	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39253a	00 96 e8 01
>39253e	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392546	02 79 77 03
>39254a	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392552	02 79 77 03
>392556	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39255e	00 a5 2b 02
>392562	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39256a	00 93 3b 02
>39256e	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392576	01 89 3b 03
>39257a	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392582	0a 53 2b 02
>392586	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39258e	00 f6 89 00
>392592	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39259a	00 f6 9a 00
>39259e	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925a6	00 f6 9a 00
>3925aa	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925b2	00 87 4b 01
>3925b6	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3925be	00 78 67 01
>3925c2	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3925ca	02 f8 fc 00
>3925ce	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3925d6	40 f5 f5 00
>3925da	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3925e2	02 79 77 03
>3925e6	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3925ee	40 f5 f5 00
>3925f2	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3925fa	40 f5 f5 00
>3925fe	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392606	00 f9 69 00
>39260a	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392612	00 f9 69 00
>392616	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39261e	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392622	52 23 39 00 5e 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>39262a	6a 23 39 00 76 23 39 00
>392632	82 23 39 00 8e 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39263a	9a 23 39 00 a6 23 39 00
>392642	b2 23 39 00 be 23 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39264a	ca 23 39 00 d6 23 39 00
>392652	e2 23 39 00 ee 23 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39265a	fa 23 39 00 06 24 39 00
>392662	12 24 39 00 1e 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39266a	2a 24 39 00 36 24 39 00
>392672	42 24 39 00 4e 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39267a	5a 24 39 00 66 24 39 00
>392682	72 24 39 00 7e 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39268a	8a 24 39 00 96 24 39 00
>392692	a2 24 39 00 ae 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39269a	ba 24 39 00 c6 24 39 00
>3926a2	d2 24 39 00 de 24 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926aa	ea 24 39 00 f6 24 39 00
>3926b2	02 25 39 00 0e 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3926ba	1a 25 39 00 26 25 39 00
>3926c2	32 25 39 00 3e 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3926ca	4a 25 39 00 56 25 39 00
>3926d2	62 25 39 00 6e 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3926da	7a 25 39 00 86 25 39 00
>3926e2	92 25 39 00 9e 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3926ea	aa 25 39 00 b6 25 39 00
>3926f2	c2 25 39 00 ce 25 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3926fa	da 25 39 00 e6 25 39 00
>392702	f2 25 39 00 fe 25 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39270a	0a 26 39 00 16 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392712	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39271a	00 b1 f5 01
>39271e	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392726	03 f1 f5 00
>39272a	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392732	03 c1 f5 00
>392736	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39273e	00 92 f5 01
>392742	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39274a	00 f1 f9 00
>39274e	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392756	00 f1 f5 00
>39275a	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392762	02 81 f6 01
>392766	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39276e	00 c2 b9 01
>392772	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39277a	05 b2 35 00
>39277e	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392786	1b f2 34 00
>39278a	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392792	01 f5 74 00
>392796	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>39279e	00 61 e3 00
>3927a2	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927aa	00 a4 64 00
>3927ae	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927b6	07 b5 f5 00
>3927ba	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3927c2	00 f3 74 00
>3927c6	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3927ce	00 c3 94 01
>3927d2	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3927da	00 f4 0d 01
>3927de	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3927e6	00 f5 0b 01
>3927ea	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3927f2	00 bf 07 00
>3927f6	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3927fe	00 6d 08 01
>392802	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39280a	00 51 17 01
>39280e	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392816	00 51 17 01
>39281a	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392822	00 53 08 01
>392826	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39282e	00 53 06 01
>392832	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39283a	00 d2 f8 00
>39283e	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392846	00 e2 c7 01
>39284a	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392852	00 f1 9c 00
>392856	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39285e	02 f2 c9 01
>392862	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39286a	03 95 fb 00
>39286e	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392876	04 a1 59 00
>39287a	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392882	03 91 fc 03
>392886	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39288e	02 b4 ec 00
>392892	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39289a	00 93 f7 00
>39289e	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928a6	04 c1 58 00
>3928aa	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928b2	02 c3 6a 00
>3928b6	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3928be	00 62 87 00
>3928c2	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3928ca	00 f3 97 00
>3928ce	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3928d6	00 b3 97 00
>3928da	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3928e2	04 f3 cc 00
>3928e6	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3928ee	00 93 aa 00
>3928f2	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3928fa	00 78 08 01
>3928fe	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392906	00 78 08 01
>39290a	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392912	00 54 27 01
>392916	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39291e	00 61 56 00
>392922	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>39292a	00 75 16 01
>39292e	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392936	00 f5 f6 01
>39293a	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392942	80 f3 e3 00
>392946	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39294e	00 b5 f5 00
>392952	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39295a	80 71 16 00
>39295e	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392966	00 30 55 01
>39296a	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392972	00 62 36 01
>392976	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39297e	02 51 07 00
>392982	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>39298a	00 62 39 00
>39298e	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392996	00 66 27 00
>39299a	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929a2	00 73 46 00
>3929a6	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929ae	00 74 76 01
>3929b2	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3929ba	81 92 38 00
>3929be	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3929c6	02 71 19 00
>3929ca	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3929d2	01 81 09 00
>3929d6	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3929de	00 83 4b 02
>3929e2	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3929ea	05 71 59 00
>3929ee	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3929f6	03 82 39 00
>3929fa	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a02	82 84 17 00
>392a06	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a0e	02 72 16 00
>392a12	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a1a	00 7b 0a 00
>392a1e	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a26	00 85 0c 01
>392a2a	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a32	00 7b 0a 01
>392a36	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a3e	00 79 18 01
>392a42	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a4a	01 73 08 00
>392a4e	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a56	04 77 0a 00
>392a5a	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392a62	00 51 19 00
>392a66	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392a6e	01 74 09 00
>392a72	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392a7a	01 63 28 00
>392a7e	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392a86	00 65 0a 00
>392a8a	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392a92	00 67 29 00
>392a96	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392a9e	00 67 09 00
>392aa2	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392aaa	01 6a 28 00
>392aae	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392ab6	00 55 27 00
>392aba	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392ac2	00 6f 08 00
>392ac6	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392ace	00 7a 07 00
>392ad2	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392ada	06 a2 0d 00
>392ade	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392ae6	00 a3 5f 00
>392aea	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392af2	00 42 27 00
>392af6	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392afe	05 b2 49 00
>392b02	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b0a	00 b2 79 01
>392b0e	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b16	00 7a 1a 00
>392b1a	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b22	00 82 28 01
>392b26	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b2e	02 c3 5f 00
>392b32	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b3a	86 c4 95 01
>392b3e	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b46	00 44 15 00
>392b4a	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b52	00 d1 06 00
>392b56	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392b5e	00 82 37 00
>392b62	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392b6a	00 41 35 00
>392b6e	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392b76	02 32 f5 01
>392b7a	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392b82	00 61 26 00
>392b86	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392b8e	84 3f 05 01
>392b92	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392b9a	01 d1 f6 00
>392b9e	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392ba6	00 41 05 01
>392baa	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bb2	05 f3 e4 00
>392bb6	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392bbe	00 92 f5 01
>392bc2	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392bca	04 f2 e4 01
>392bce	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392bd6	00 45 25 00
>392bda	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392be2	01 a3 36 00
>392be6	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392bee	01 98 05 01
>392bf2	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392bfa	02 a3 f6 01
>392bfe	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c06	00 f6 f8 00
>392c0a	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c12	00 f3 f5 00
>392c16	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c1e	00 94 e5 01
>392c22	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c2a	00 84 44 00
>392c2e	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c36	03 83 18 01
>392c3a	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c42	01 78 08 01
>392c46	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c4e	03 8e 08 01
>392c52	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392c5a	09 f2 46 00
>392c5e	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392c66	00 96 e8 01
>392c6a	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392c72	00 f6 f6 01
>392c76	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392c7e	00 f6 9a 00
>392c82	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392c8a	00 c6 45 00
>392c8e	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392c96	00 f4 b4 00
>392c9a	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392ca2	00 d5 25 00
>392ca6	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cae	0e 21 2d 00
>392cb2	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392cba	00 55 87 02
>392cbe	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392cc6	08 98 87 01
>392cca	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392cd2	04 17 04 03
>392cd6	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392cde	05 77 f9 02
>392ce2	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392cea	02 f4 08 00
>392cee	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392cf6	00 36 05 01
>392cfa	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d02	05 32 55 03
>392d06	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d0e	00 f3 df 00
>392d12	12 27 39 00 1e 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d1a	2a 27 39 00 36 27 39 00 42 27 39 00 4e 27 39 00
>392d2a	5a 27 39 00 66 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d32	72 27 39 00 7e 27 39 00 8a 27 39 00 96 27 39 00
>392d42	a2 27 39 00 ae 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d4a	ba 27 39 00 c6 27 39 00 d2 27 39 00 de 27 39 00
>392d5a	ea 27 39 00 f6 27 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392d62	02 28 39 00 0e 28 39 00 1a 28 39 00 26 28 39 00
>392d72	32 28 39 00 3e 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392d7a	4a 28 39 00 56 28 39 00 62 28 39 00 6e 28 39 00
>392d8a	7a 28 39 00 86 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392d92	92 28 39 00 9e 28 39 00 aa 28 39 00 b6 28 39 00
>392da2	c2 28 39 00 ce 28 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392daa	da 28 39 00 e6 28 39 00 f2 28 39 00 fe 28 39 00
>392dba	0a 29 39 00 16 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392dc2	22 29 39 00 2e 29 39 00 3a 29 39 00 46 29 39 00
>392dd2	52 29 39 00 5e 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392dda	6a 29 39 00 76 29 39 00 82 29 39 00 8e 29 39 00
>392dea	9a 29 39 00 a6 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392df2	b2 29 39 00 be 29 39 00 ca 29 39 00 d6 29 39 00
>392e02	e2 29 39 00 ee 29 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e0a	fa 29 39 00 06 2a 39 00 12 2a 39 00 1e 2a 39 00
>392e1a	2a 2a 39 00 36 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e22	42 2a 39 00 4e 2a 39 00 5a 2a 39 00 66 2a 39 00
>392e32	72 2a 39 00 7e 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e3a	8a 2a 39 00 96 2a 39 00 a2 2a 39 00 ae 2a 39 00
>392e4a	ba 2a 39 00 c6 2a 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e52	d2 2a 39 00 de 2a 39 00 ea 2a 39 00 f6 2a 39 00
>392e62	02 2b 39 00 0e 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392e6a	1a 2b 39 00 26 2b 39 00 32 2b 39 00 3e 2b 39 00
>392e7a	4a 2b 39 00 56 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392e82	62 2b 39 00 6e 2b 39 00 7a 2b 39 00 86 2b 39 00
>392e92	92 2b 39 00 9e 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392e9a	aa 2b 39 00 b6 2b 39 00 c2 2b 39 00 ce 2b 39 00
>392eaa	da 2b 39 00 e6 2b 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392eb2	f2 2b 39 00 fe 2b 39 00 0a 2c 39 00 16 2c 39 00
>392ec2	22 2c 39 00 2e 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392eca	3a 2c 39 00 46 2c 39 00 52 2c 39 00 5e 2c 39 00
>392eda	6a 2c 39 00 76 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392ee2	82 2c 39 00 8e 2c 39 00 9a 2c 39 00 a6 2c 39 00
>392ef2	b2 2c 39 00 be 2c 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392efa	ca 2c 39 00 d6 2c 39 00 e2 2c 39 00 ee 2c 39 00
>392f0a	fa 2c 39 00 06 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f12	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f1a	0d f2 f7 00
>392f1e	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f26	07 f2 f7 00
>392f2a	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f32	07 f2 f6 00
>392f36	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f3e	07 f2 f7 00
>392f42	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f4a	07 f2 f7 00
>392f4e	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f56	07 f2 f7 00
>392f5a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f62	00 00 00 00
>392f66	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f6e	00 00 00 00
>392f72	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f7a	00 00 00 00
>392f7e	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392f86	87 f2 f1 00
>392f8a	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392f92	07 f4 f4 00
>392f96	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392f9e	07 f2 f6 00
>392fa2	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392faa	07 e7 f7 00
>392fae	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392fb6	07 f6 f6 00
>392fba	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392fc2	87 a3 f3 00
>392fc6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fce	00 00 00 00
>392fd2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fda	00 00 00 00
>392fde	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe6	00 00 00 00
>392fea	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392ff2	07 8a 08 00
>392ff6	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392ffe	07 55 14 00
>393002	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>39300a	87 55 04 00
>39300e	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>393016	07 46 1a 00
>39301a	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>393022	07 61 07 00
>393026	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>39302e	90 61 07 00
>393032	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39303a	00 00 00 00
>39303e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393046	00 00 00 00
>39304a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393052	00 00 00 00
>393056	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>39305e	87 f3 f8 00
>393062	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>39306a	07 f6 3a 00
>39306e	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>393076	0c 84 19 00
>39307a	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>393082	07 94 19 00
>393086	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>39308e	87 d1 f8 00
>393092	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>39309a	07 c3 a6 00
>39309e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930a6	00 00 00 00
>3930aa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930b2	00 00 00 00
>3930b6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930be	00 00 00 00
>3930c2	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3930ca	47 f2 df 00
>3930ce	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3930d6	0f a1 df 00
>3930da	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>3930e2	07 f1 78 00
>3930e6	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>3930ee	07 f1 18 00
>3930f2	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>3930fa	07 56 26 00
>3930fe	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393106	07 66 06 00
>39310a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393112	00 00 00 00
>393116	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39311e	00 00 00 00
>393122	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39312a	00 00 00 00
>39312e	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393136	87 85 35 00
>39313a	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393142	87 f3 f4 00
>393146	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39314e	07 f2 c3 00
>393152	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>39315a	08 72 08 00
>39315e	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>393166	07 3f 07 01
>39316a	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>393172	07 4f 05 00
>393176	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39317e	00 00 00 00
>393182	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39318a	00 00 00 00
>39318e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393196	00 00 00 00
>39319a	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931a2	07 7a 05 00
>3931a6	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931ae	07 a5 45 00
>3931b2	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3931ba	08 8f 09 00
>3931be	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3931c6	0c 8f 09 00
>3931ca	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3931d2	07 82 37 00
>3931d6	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>3931de	07 62 2c 01
>3931e2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931ea	00 00 00 00
>3931ee	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931f6	00 00 00 00
>3931fa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393202	00 00 00 00
>393206	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39320e	07 a6 1c 00
>393212	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>39321a	07 72 0b 00
>39321e	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393226	07 72 09 00
>39322a	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393232	07 82 09 00
>393236	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39323e	07 72 0f 00
>393242	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>39324a	07 8f 0a 00
>39324e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393256	00 00 00 00
>39325a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393262	00 00 00 00
>393266	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39326e	00 00 00 00
>393272	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39327a	07 65 1a 00
>39327e	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393286	07 65 1a 00
>39328a	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>393292	07 75 0a 00
>393296	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>39329e	07 65 1a 00
>3932a2	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932aa	07 65 26 00
>3932ae	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932b6	07 55 36 00
>3932ba	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932c2	00 00 00 00
>3932c6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932ce	00 00 00 00
>3932d2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932da	00 00 00 00
>3932de	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>3932e6	07 ff 0f 01
>3932ea	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>3932f2	87 64 18 00
>3932f6	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>3932fe	07 96 0a 00
>393302	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39330a	07 91 2a 00
>39330e	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393316	47 6f 07 00
>39331a	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393322	07 8f 06 02
>393326	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39332e	00 00 00 00
>393332	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39333a	00 00 00 00
>39333e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393346	00 00 00 00
>39334a	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393352	07 55 16 00
>393356	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39335e	07 6a 03 00
>393362	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>39336a	07 42 35 00
>39336e	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393376	07 31 47 01
>39337a	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393382	0a 42 25 00
>393386	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>39338e	07 cf 07 00
>393392	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39339a	00 00 00 00
>39339e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933a6	00 00 00 00
>3933aa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933b2	00 00 00 00
>3933b6	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3933be	8a f2 26 00
>3933c2	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3933ca	07 f2 f5 00
>3933ce	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3933d6	87 11 13 00
>3933da	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>3933e2	87 1d 03 00
>3933e6	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>3933ee	07 81 23 00
>3933f2	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>3933fa	0a f2 f6 01
>3933fe	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393406	00 00 00 00
>39340a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393412	00 00 00 00
>393416	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39341e	00 00 00 00
>393422	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39342a	07 c2 05 00
>39342e	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393436	07 6f 0c 01
>39343a	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393442	07 56 16 00
>393446	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39344e	88 8f 0b 00
>393452	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39345a	87 c3 e5 00
>39345e	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393466	07 f8 16 00
>39346a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393472	00 00 00 00
>393476	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39347e	00 00 00 00
>393482	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39348a	00 00 00 00
>39348e	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>393496	0a f3 03 00
>39349a	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934a2	07 f3 02 00
>3934a6	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934ae	07 1f ff 03
>3934b2	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3934ba	8f 56 84 02
>3934be	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3934c6	0c 34 04 03
>3934ca	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3934d2	07 1f 02 03
>3934d6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934de	00 00 00 00
>3934e2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934ea	00 00 00 00
>3934ee	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934f6	00 00 00 00
>3934fa	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393502	07 12 16 01
>393506	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39350e	07 f6 c9 02
>393512	12 2f 39 00 1e 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39351a	2a 2f 39 00 36 2f 39 00 42 2f 39 00 4e 2f 39 00
>39352a	5a 2f 39 00 66 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393532	72 2f 39 00 7e 2f 39 00 8a 2f 39 00 96 2f 39 00
>393542	a2 2f 39 00 ae 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39354a	ba 2f 39 00 c6 2f 39 00 d2 2f 39 00 de 2f 39 00
>39355a	ea 2f 39 00 f6 2f 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393562	02 30 39 00 0e 30 39 00 1a 30 39 00 26 30 39 00
>393572	32 30 39 00 3e 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39357a	4a 30 39 00 56 30 39 00 62 30 39 00 6e 30 39 00
>39358a	7a 30 39 00 86 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393592	92 30 39 00 9e 30 39 00 aa 30 39 00 b6 30 39 00
>3935a2	c2 30 39 00 ce 30 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935aa	da 30 39 00 e6 30 39 00 f2 30 39 00 fe 30 39 00
>3935ba	0a 31 39 00 16 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3935c2	22 31 39 00 2e 31 39 00 3a 31 39 00 46 31 39 00
>3935d2	52 31 39 00 5e 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3935da	6a 31 39 00 76 31 39 00 82 31 39 00 8e 31 39 00
>3935ea	9a 31 39 00 a6 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>3935f2	b2 31 39 00 be 31 39 00 ca 31 39 00 d6 31 39 00
>393602	e2 31 39 00 ee 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39360a	fa 31 39 00 06 32 39 00 12 32 39 00 1e 32 39 00
>39361a	2a 32 39 00 36 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393622	42 32 39 00 4e 32 39 00 5a 32 39 00 66 32 39 00
>393632	72 32 39 00 7e 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39363a	8a 32 39 00 96 32 39 00 a2 32 39 00 ae 32 39 00
>39364a	ba 32 39 00 c6 32 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393652	d2 32 39 00 de 32 39 00 ea 32 39 00 f6 32 39 00
>393662	02 33 39 00 0e 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39366a	1a 33 39 00 26 33 39 00 32 33 39 00 3e 33 39 00
>39367a	4a 33 39 00 56 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393682	62 33 39 00 6e 33 39 00 7a 33 39 00 86 33 39 00
>393692	92 33 39 00 9e 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39369a	aa 33 39 00 b6 33 39 00 c2 33 39 00 ce 33 39 00
>3936aa	da 33 39 00 e6 33 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936b2	f2 33 39 00 fe 33 39 00 0a 34 39 00 16 34 39 00
>3936c2	22 34 39 00 2e 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3936ca	3a 34 39 00 46 34 39 00 52 34 39 00 5e 34 39 00
>3936da	6a 34 39 00 76 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3936e2	82 34 39 00 8e 34 39 00 9a 34 39 00 a6 34 39 00
>3936f2	b2 34 39 00 be 34 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3936fa	ca 34 39 00 d6 34 39 00 e2 34 39 00 ee 34 39 00
>39370a	fa 34 39 00 06 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393712	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39371a					IOPL2_TONE_TEST
.39371a	e2 20		sep #$20	                SEP #$20        ; set A short
.39371c	c2 10		rep #$10	                REP #$10        ; set X long
.39371e	a2 00 00	ldx #$0000	                LDX #0
.393721					OPL2_TONE_TESTING_L1
.393721	bf 12 37 39	lda $393712,x	                LDA NOTE_INTRO, X
.393725	29 0f		and #$0f	                AND #$F
.393727	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393729	bf 12 37 39	lda $393712,x	                LDA NOTE_INTRO, X
.39372d	29 70		and #$70	                AND #$70
.39372f	4a		lsr a		                LSR A
.393730	4a		lsr a		                LSR A
.393731	4a		lsr a		                LSR A
.393732	4a		lsr a		                LSR A
.393733	85 31		sta $31		                STA OPL2_OCTAVE
.393735	8a		txa		                TXA
.393736	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393738	85 27		sta $27		                STA OPL2_CHANNEL
.39373a	22 0a 39 39	jsl $39390a	                JSL OPL2_PLAYNOTE
.39373e	a0 00 00	ldy #$0000	                LDY #$0000
.393741					OPL2_TONE_TESTING_L2
.393741	ea		nop		                NOP
.393742	ea		nop		                NOP
.393743	ea		nop		                NOP
.393744	ea		nop		                NOP
.393745	c8		iny		                INY
.393746	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393749	d0 f6		bne $393741	                BNE OPL2_TONE_TESTING_L2
.39374b	e8		inx		                INX
.39374c	e0 08 00	cpx #$0008	                CPX #8
.39374f	d0 d0		bne $393721	                BNE OPL2_TONE_TESTING_L1
.393751	6b		rtl		                RTL
.393752					OPL2_INIT
.393752	c2 20		rep #$20	                REP #$20        ; set A long
.393754	a9 00 00	lda #$0000	                LDA #$0000
.393757	85 28		sta $28		                STA OPL2_REG_REGION
.393759	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39375b	85 30		sta $30		                STA OPL2_NOTE
.39375d	85 32		sta $32		                STA OPL2_PARAMETER0
.39375f	85 34		sta $34		                STA OPL2_PARAMETER2
.393761	a9 dc 16	lda #$16dc	                LDA #<>INSTRUMENT_ACCORDN
.393764	85 50		sta $50		                STA RAD_ADDR
.393766	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393769	85 52		sta $52		                STA RAD_ADDR + 2
.39376b	e2 20		sep #$20	                SEP #$20        ; set A short
.39376d	6b		rtl		                RTL
.39376e					OPL2_Reset
.39376e	6b		rtl		                RTL
.39376f					OPL2_Get_FrequencyBlock
.39376f	6b		rtl		                RTL
.393770					OPL2_GET_REGISTER
.393770	48		pha		                PHA             ; begin setdp macro
.393771	08		php		                PHP
.393772	c2 20		rep #$20	                REP #$20        ; set A long
.393774	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393777	5b		tcd		                TCD
.393778	28		plp		                PLP
.393779	68		pla		                PLA             ; end setdp macro
.39377a	c2 20		rep #$20	                REP #$20        ; set A long
.39377c	18		clc		              CLC
.39377d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393780	65 32		adc $32		              ADC OPL2_PARAMETER0
.393782	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393784	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393787	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393789	e2 20		sep #$20	                SEP #$20        ; set A short
.39378b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39378d	6b		rtl		              RTL
.39378e					OPL2_GET_WAVEFORM_SELECT
.39378e	48		pha		                PHA             ; begin setdp macro
.39378f	08		php		                PHP
.393790	c2 20		rep #$20	                REP #$20        ; set A long
.393792	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393795	5b		tcd		                TCD
.393796	28		plp		                PLP
.393797	68		pla		                PLA             ; end setdp macro
.393798	c2 20		rep #$20	                REP #$20        ; set A long
.39379a	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39379d	69 01 00	adc #$0001	              ADC #$0001
.3937a0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937a2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937a5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3937a9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937ab	29 20		and #$20	              AND #$20
.3937ad	6b		rtl		              RTL
.3937ae					OPL2_GET_SCALINGLEVEL
.3937ae	48		pha		                PHA             ; begin setdp macro
.3937af	08		php		                PHP
.3937b0	c2 20		rep #$20	                REP #$20        ; set A long
.3937b2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b5	5b		tcd		                TCD
.3937b6	28		plp		                PLP
.3937b7	68		pla		                PLA             ; end setdp macro
.3937b8	c2 20		rep #$20	                REP #$20        ; set A long
.3937ba	a9 40 00	lda #$0040	              LDA #$0040  ;
.3937bd	85 28		sta $28		              STA OPL2_REG_REGION
.3937bf	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3937c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3937c4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937c6	29 c0		and #$c0	              AND #$C0
.3937c8	4a		lsr a		              LSR A
.3937c9	4a		lsr a		              LSR A
.3937ca	4a		lsr a		              LSR A
.3937cb	4a		lsr a		              LSR A
.3937cc	4a		lsr a		              LSR A
.3937cd	4a		lsr a		              LSR A
.3937ce	6b		rtl		              RTL
.3937cf					OPL2_GET_BLOCK
.3937cf	48		pha		                PHA             ; begin setdp macro
.3937d0	08		php		                PHP
.3937d1	c2 20		rep #$20	                REP #$20        ; set A long
.3937d3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937d6	5b		tcd		                TCD
.3937d7	28		plp		                PLP
.3937d8	68		pla		                PLA             ; end setdp macro
.3937d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3937db	18		clc		              CLC
.3937dc	a5 27		lda $27		              LDA OPL2_CHANNEL
.3937de	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937e0	69 b0		adc #$b0	              ADC #$B0
.3937e2	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3937e4	a9 00		lda #$00	              LDA #$00
.3937e6	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3937e8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3937ea	18		clc		              CLC
.3937eb	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937ee	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3937f0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937f2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937f5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937fb	29 1c		and #$1c	              AND #$1C
.3937fd	4a		lsr a		              LSR A
.3937fe	4a		lsr a		              LSR A
.3937ff	6b		rtl		              RTL
.393800					OPL2_GET_KEYON
.393800	48		pha		                PHA             ; begin setdp macro
.393801	08		php		                PHP
.393802	c2 20		rep #$20	                REP #$20        ; set A long
.393804	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393807	5b		tcd		                TCD
.393808	28		plp		                PLP
.393809	68		pla		                PLA             ; end setdp macro
.39380a	e2 20		sep #$20	                SEP #$20        ; set A short
.39380c	18		clc		              CLC
.39380d	a5 27		lda $27		              LDA OPL2_CHANNEL
.39380f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393811	69 b0		adc #$b0	              ADC #$B0
.393813	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393815	a9 00		lda #$00	              LDA #$00
.393817	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393819	c2 30		rep #$30	                REP #$30        ; set A&X long
.39381b	18		clc		              CLC
.39381c	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39381f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393821	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393823	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393826	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393828	e2 20		sep #$20	                SEP #$20        ; set A short
.39382a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39382c	29 20		and #$20	              AND #$20
.39382e	6b		rtl		              RTL
.39382f					OPL2_GET_FEEDBACK
.39382f	48		pha		                PHA             ; begin setdp macro
.393830	08		php		                PHP
.393831	c2 20		rep #$20	                REP #$20        ; set A long
.393833	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393836	5b		tcd		                TCD
.393837	28		plp		                PLP
.393838	68		pla		                PLA             ; end setdp macro
.393839	e2 20		sep #$20	                SEP #$20        ; set A short
.39383b	18		clc		              CLC
.39383c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39383e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393840	69 c0		adc #$c0	              ADC #$C0
.393842	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393844	a9 00		lda #$00	              LDA #$00
.393846	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393848	c2 30		rep #$30	                REP #$30        ; set A&X long
.39384a	18		clc		              CLC
.39384b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39384e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393850	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393852	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393855	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393857	e2 20		sep #$20	                SEP #$20        ; set A short
.393859	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39385b	29 e0		and #$e0	              AND #$E0
.39385d	4a		lsr a		              LSR
.39385e	6b		rtl		              RTL
.39385f					OPL2_GET_SYNTHMODE
.39385f	48		pha		                PHA             ; begin setdp macro
.393860	08		php		                PHP
.393861	c2 20		rep #$20	                REP #$20        ; set A long
.393863	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393866	5b		tcd		                TCD
.393867	28		plp		                PLP
.393868	68		pla		                PLA             ; end setdp macro
.393869	e2 20		sep #$20	                SEP #$20        ; set A short
.39386b	18		clc		              CLC
.39386c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39386e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393870	69 c0		adc #$c0	              ADC #$C0
.393872	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393874	a9 00		lda #$00	              LDA #$00
.393876	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393878	c2 30		rep #$30	                REP #$30        ; set A&X long
.39387a	18		clc		              CLC
.39387b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39387e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393880	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393882	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393885	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393887	e2 20		sep #$20	                SEP #$20        ; set A short
.393889	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39388b	29 01		and #$01	              AND #$01
.39388d	6b		rtl		              RTL
.39388e					OPL2_GET_DEEPTREMOLO
.39388e	48		pha		                PHA             ; begin setdp macro
.39388f	08		php		                PHP
.393890	c2 20		rep #$20	                REP #$20        ; set A long
.393892	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393895	5b		tcd		                TCD
.393896	28		plp		                PLP
.393897	68		pla		                PLA             ; end setdp macro
.393898	c2 20		rep #$20	                REP #$20        ; set A long
.39389a	a9 bd 00	lda #$00bd	              LDA #$00BD;
.39389d	85 28		sta $28		              STA OPL2_REG_REGION
.39389f	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3938a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938a4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938a6	29 80		and #$80	              AND #$80
.3938a8	6b		rtl		              RTL
.3938a9					OPL2_GET_DEEPVIBRATO
.3938a9	48		pha		                PHA             ; begin setdp macro
.3938aa	08		php		                PHP
.3938ab	c2 20		rep #$20	                REP #$20        ; set A long
.3938ad	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938b0	5b		tcd		                TCD
.3938b1	28		plp		                PLP
.3938b2	68		pla		                PLA             ; end setdp macro
.3938b3	c2 20		rep #$20	                REP #$20        ; set A long
.3938b5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938b8	69 bd 00	adc #$00bd	              ADC #$00BD
.3938bb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938bd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938c0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938c6	29 40		and #$40	              AND #$40
.3938c8	6b		rtl		              RTL
.3938c9					OPL2_GET_PERCUSSION
.3938c9	48		pha		                PHA             ; begin setdp macro
.3938ca	08		php		                PHP
.3938cb	c2 20		rep #$20	                REP #$20        ; set A long
.3938cd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938d0	5b		tcd		                TCD
.3938d1	28		plp		                PLP
.3938d2	68		pla		                PLA             ; end setdp macro
.3938d3	c2 20		rep #$20	                REP #$20        ; set A long
.3938d5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938d8	69 bd 00	adc #$00bd	              ADC #$00BD
.3938db	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938dd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938e0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e6	29 20		and #$20	              AND #$20
.3938e8	6b		rtl		              RTL
.3938e9					OPL2_GET_DRUMS
.3938e9	48		pha		                PHA             ; begin setdp macro
.3938ea	08		php		                PHP
.3938eb	c2 20		rep #$20	                REP #$20        ; set A long
.3938ed	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f0	5b		tcd		                TCD
.3938f1	28		plp		                PLP
.3938f2	68		pla		                PLA             ; end setdp macro
.3938f3	c2 20		rep #$20	                REP #$20        ; set A long
.3938f5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938f8	69 bd 00	adc #$00bd	              ADC #$00BD
.3938fb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938fd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393900	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393902	e2 20		sep #$20	                SEP #$20        ; set A short
.393904	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393906	29 1f		and #$1f	              AND #$1F
.393908	6b		rtl		              RTL
.393909					OPL2_Get_WaveForm
.393909	6b		rtl		                RTL
.39390a					OPL2_PLAYNOTE
.39390a	48		pha		                PHA             ; begin setdp macro
.39390b	08		php		                PHP
.39390c	c2 20		rep #$20	                REP #$20        ; set A long
.39390e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393911	5b		tcd		                TCD
.393912	28		plp		                PLP
.393913	68		pla		                PLA             ; end setdp macro
.393914	e2 20		sep #$20	                SEP #$20        ; set A short
.393916	da		phx		                PHX
.393917	a9 00		lda #$00	                LDA #$00
.393919	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39391b	20 f2 3e	jsr $393ef2	                JSR OPL2_SET_KEYON
.39391e	20 b7 3e	jsr $393eb7	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393921	e2 10		sep #$10	                SEP #$10        ; set X short
.393923	a5 30		lda $30		                LDA OPL2_NOTE
.393925	3a		dec a		                DEC A
.393926	0a		asl a		                ASL A
.393927	aa		tax		                TAX
.393928	bf a1 16 39	lda $3916a1,x	                LDA @lnoteFNumbers,X
.39392c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39392e	e8		inx		                INX
.39392f	bf a1 16 39	lda $3916a1,x	                LDA @lnoteFNumbers,X
.393933	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393935	22 35 3e 39	jsl $393e35	                JSL OPL2_SET_FNUMBER
.393939	a9 01		lda #$01	                LDA #$01
.39393b	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39393d	20 f2 3e	jsr $393ef2	                JSR OPL2_SET_KEYON
.393940	c2 10		rep #$10	                REP #$10        ; set X long
.393942	fa		plx		                PLX
.393943	6b		rtl		                RTL
.393944					OPL2_PLAYDRUM
.393944	6b		rtl		                RTL
.393945					OPL2_SET_INSTRUMENT
.393945	48		pha		                PHA             ; begin setdp macro
.393946	08		php		                PHP
.393947	c2 20		rep #$20	                REP #$20        ; set A long
.393949	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39394c	5b		tcd		                TCD
.39394d	28		plp		                PLP
.39394e	68		pla		                PLA             ; end setdp macro
.39394f	38		sec		              SEC ; Set the WaveFormSelect to True
.393950	22 33 3b 39	jsl $393b33	              JSL OPL2_SET_WAVEFORMSELECT;
.393954	e2 20		sep #$20	                SEP #$20        ; set A short
.393956	c2 10		rep #$10	                REP #$10        ; set X long
.393958	a0 00 00	ldy #$0000	              LDY #$0000
.39395b	a2 00 00	ldx #$0000	              LDX #$0000
.39395e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.393960	85 35		sta $35		              STA OPL2_PARAMETER3
.393962	c8		iny		              INY
.393963	c9 06		cmp #$06	              CMP #$06
.393965	d0 03		bne $39396a	              BNE PERCUSSION_NEXT07
.393967	82 70 01	brl $393ada	              BRL Percussion_6
.39396a					PERCUSSION_NEXT07
.39396a	c9 07		cmp #$07	              CMP #$07
.39396c	d0 03		bne $393971	              BNE PERCUSSION_NEXT08
.39396e	82 44 01	brl $393ab5	              BRL Percussion_7
.393971					PERCUSSION_NEXT08
.393971	c9 08		cmp #$08	              CMP #$08
.393973	d0 03		bne $393978	              BNE PERCUSSION_NEXT09
.393975	82 18 01	brl $393a90	              BRL Percussion_8
.393978					PERCUSSION_NEXT09
.393978	c9 09		cmp #$09	              CMP #$09
.39397a	d0 03		bne $39397f	              BNE PERCUSSION_NEXT0A
.39397c	82 ec 00	brl $393a6b	              BRL Percussion_9
.39397f					PERCUSSION_NEXT0A
.39397f	c9 0a		cmp #$0a	              CMP #$0A
.393981	d0 03		bne $393986	              BNE Percussion_Default
.393983	82 c0 00	brl $393a46	              BRL Percussion_A
.393986					Percussion_Default
.393986	a9 00		lda #$00	              LDA #$00
.393988	85 26		sta $26		              STA OPL2_OPERATOR
.39398a	c2 20		rep #$20	                REP #$20        ; set A long
.39398c	a9 20 00	lda #$0020	              LDA #$0020;
.39398f	85 28		sta $28		              STA OPL2_REG_REGION
.393991	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393994	e2 20		sep #$20	                SEP #$20        ; set A short
.393996	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393998	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39399a	c8		iny		              INY
.39399b	c2 20		rep #$20	                REP #$20        ; set A long
.39399d	a9 40 00	lda #$0040	              LDA #$0040;
.3939a0	85 28		sta $28		              STA OPL2_REG_REGION
.3939a2	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3939a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3939a7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939a9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939ab	c8		iny		              INY
.3939ac	c2 20		rep #$20	                REP #$20        ; set A long
.3939ae	a9 60 00	lda #$0060	              LDA #$0060;
.3939b1	85 28		sta $28		              STA OPL2_REG_REGION
.3939b3	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3939b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3939b8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939ba	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939bc	c8		iny		              INY
.3939bd	c2 20		rep #$20	                REP #$20        ; set A long
.3939bf	a9 80 00	lda #$0080	              LDA #$0080;
.3939c2	85 28		sta $28		              STA OPL2_REG_REGION
.3939c4	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3939c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3939c9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939cb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939cd	c8		iny		              INY
.3939ce	c2 20		rep #$20	                REP #$20        ; set A long
.3939d0	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3939d3	85 28		sta $28		              STA OPL2_REG_REGION
.3939d5	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3939d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3939da	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939dc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939de	c8		iny		              INY
.3939df	e2 10		sep #$10	                SEP #$10        ; set X short
.3939e1	a5 27		lda $27		              LDA OPL2_CHANNEL
.3939e3	29 0f		and #$0f	              AND #$0F
.3939e5	aa		tax		              TAX
.3939e6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.3939e8	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.3939ec	c8		iny		              INY
.3939ed	a9 01		lda #$01	              LDA #$01
.3939ef	85 26		sta $26		              STA OPL2_OPERATOR
.3939f1	c2 20		rep #$20	                REP #$20        ; set A long
.3939f3	a9 20 00	lda #$0020	              LDA #$0020;
.3939f6	85 28		sta $28		              STA OPL2_REG_REGION
.3939f8	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.3939fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3939fd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.3939ff	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a01	c8		iny		              INY
.393a02	c2 20		rep #$20	                REP #$20        ; set A long
.393a04	a9 40 00	lda #$0040	              LDA #$0040;
.393a07	85 28		sta $28		              STA OPL2_REG_REGION
.393a09	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393a0c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a10	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a12	c8		iny		              INY
.393a13	c2 20		rep #$20	                REP #$20        ; set A long
.393a15	a9 60 00	lda #$0060	              LDA #$0060;
.393a18	85 28		sta $28		              STA OPL2_REG_REGION
.393a1a	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393a1d	e2 20		sep #$20	                SEP #$20        ; set A short
.393a1f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a21	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a23	c8		iny		              INY
.393a24	c2 20		rep #$20	                REP #$20        ; set A long
.393a26	a9 80 00	lda #$0080	              LDA #$0080;
.393a29	85 28		sta $28		              STA OPL2_REG_REGION
.393a2b	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393a2e	e2 20		sep #$20	                SEP #$20        ; set A short
.393a30	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a32	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a34	c8		iny		              INY
.393a35	c2 20		rep #$20	                REP #$20        ; set A long
.393a37	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a3a	85 28		sta $28		              STA OPL2_REG_REGION
.393a3c	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393a3f	e2 20		sep #$20	                SEP #$20        ; set A short
.393a41	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a43	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a45	6b		rtl		                RTL
.393a46					Percussion_A
.393a46	e2 20		sep #$20	                SEP #$20        ; set A short
.393a48	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a4a	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a4e	c8		iny		              INY
.393a4f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a51	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a55	c8		iny		              INY
.393a56	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a58	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393a5c	c8		iny		              INY
.393a5d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a5f	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393a63	c8		iny		              INY
.393a64	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a66	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393a6a	6b		rtl		                RTL
.393a6b					Percussion_9
.393a6b	e2 20		sep #$20	                SEP #$20        ; set A short
.393a6d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a6f	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393a73	c8		iny		              INY
.393a74	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a76	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393a7a	c8		iny		              INY
.393a7b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a7d	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393a81	c8		iny		              INY
.393a82	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a84	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393a88	c8		iny		              INY
.393a89	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a8b	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393a8f	6b		rtl		              RTL
.393a90					Percussion_8
.393a90	e2 20		sep #$20	                SEP #$20        ; set A short
.393a92	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a94	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393a98	c8		iny		              INY
.393a99	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a9b	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393a9f	c8		iny		              INY
.393aa0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aa2	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393aa6	c8		iny		              INY
.393aa7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aa9	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393aad	c8		iny		              INY
.393aae	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ab0	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393ab4	6b		rtl		              RTL
.393ab5					Percussion_7
.393ab5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ab7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ab9	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393abd	c8		iny		              INY
.393abe	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ac0	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393ac4	c8		iny		              INY
.393ac5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ac7	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393acb	c8		iny		              INY
.393acc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ace	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393ad2	c8		iny		              INY
.393ad3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ad5	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393ad9	6b		rtl		              RTL
.393ada					Percussion_6
.393ada	e2 20		sep #$20	                SEP #$20        ; set A short
.393adc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ade	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393ae2	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393ae6	c8		iny		              INY
.393ae7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ae9	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393aed	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393af1	c8		iny		              INY
.393af2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393af4	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393af8	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393afc	c8		iny		              INY
.393afd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aff	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b03	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b07	c8		iny		              INY
.393b08	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b0a	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b0e	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b12	6b		rtl		              RTL
.393b13					OPL2_SET_REGISTER
.393b13	48		pha		                PHA             ; begin setdp macro
.393b14	08		php		                PHP
.393b15	c2 20		rep #$20	                REP #$20        ; set A long
.393b17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b1a	5b		tcd		                TCD
.393b1b	28		plp		                PLP
.393b1c	68		pla		                PLA             ; end setdp macro
.393b1d	c2 20		rep #$20	                REP #$20        ; set A long
.393b1f	18		clc		              CLC
.393b20	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b23	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b25	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b27	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b2a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b2c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b2e	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b30	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b32	6b		rtl		              RTL
.393b33					OPL2_SET_WAVEFORMSELECT
.393b33	48		pha		                PHA             ; begin setdp macro
.393b34	08		php		                PHP
.393b35	c2 20		rep #$20	                REP #$20        ; set A long
.393b37	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b3a	5b		tcd		                TCD
.393b3b	28		plp		                PLP
.393b3c	68		pla		                PLA             ; end setdp macro
.393b3d	c2 20		rep #$20	                REP #$20        ; set A long
.393b3f	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b42	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b44	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b47	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b49	e2 20		sep #$20	                SEP #$20        ; set A short
.393b4b	b0 07		bcs $393b54	              BCS OPL2_Set_WaveFormSelect_set
.393b4d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b4f	29 df		and #$df	              AND #$DF
.393b51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b53	6b		rtl		              RTL
.393b54					OPL2_Set_WaveFormSelect_set
.393b54	48		pha		                PHA             ; begin setdp macro
.393b55	08		php		                PHP
.393b56	c2 20		rep #$20	                REP #$20        ; set A long
.393b58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b5b	5b		tcd		                TCD
.393b5c	28		plp		                PLP
.393b5d	68		pla		                PLA             ; end setdp macro
.393b5e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b60	09 20 00	ora #$0020	              ORA #$20
.393b63	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b65	6b		rtl		                RTL
.393b66					OPL2_SET_TREMOLO
.393b66	48		pha		                PHA             ; begin setdp macro
.393b67	08		php		                PHP
.393b68	c2 20		rep #$20	                REP #$20        ; set A long
.393b6a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b6d	5b		tcd		                TCD
.393b6e	28		plp		                PLP
.393b6f	68		pla		                PLA             ; end setdp macro
.393b70	08		php		                PHP ; Push the Carry
.393b71	c2 20		rep #$20	                REP #$20        ; set A long
.393b73	18		clc		                CLC
.393b74	a9 20 00	lda #$0020	                LDA #$0020 ;
.393b77	85 28		sta $28		                STA OPL2_REG_REGION
.393b79	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393b7c	28		plp		                PLP ; Pull the Carry out
.393b7d	e2 20		sep #$20	                SEP #$20        ; set A short
.393b7f	b0 08		bcs $393b89	                BCS OPL2_Set_Tremolo_Set;
.393b81	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b83	29 7f		and #$7f	                AND #$7F
.393b85	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b87	80 06		bra $393b8f	                BRA OPL2_Set_Tremolo_Exit
.393b89					OPL2_Set_Tremolo_Set
.393b89	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b8b	09 80		ora #$80	                ORA #$80
.393b8d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b8f					OPL2_Set_Tremolo_Exit
.393b8f	6b		rtl		                RTL
.393b90					OPL2_GET_TREMOLO
.393b90	48		pha		                PHA             ; begin setdp macro
.393b91	08		php		                PHP
.393b92	c2 20		rep #$20	                REP #$20        ; set A long
.393b94	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b97	5b		tcd		                TCD
.393b98	28		plp		                PLP
.393b99	68		pla		                PLA             ; end setdp macro
.393b9a	c2 20		rep #$20	                REP #$20        ; set A long
.393b9c	a9 20 00	lda #$0020	                LDA #$0020;
.393b9f	85 28		sta $28		                STA OPL2_REG_REGION
.393ba1	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393ba4	e2 20		sep #$20	                SEP #$20        ; set A short
.393ba6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ba8	29 80		and #$80	                AND #$80
.393baa	6b		rtl		                RTL
.393bab					OPL2_SET_VIBRATO
.393bab	48		pha		                PHA             ; begin setdp macro
.393bac	08		php		                PHP
.393bad	c2 20		rep #$20	                REP #$20        ; set A long
.393baf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bb2	5b		tcd		                TCD
.393bb3	28		plp		                PLP
.393bb4	68		pla		                PLA             ; end setdp macro
.393bb5	08		php		                PHP ; Push the Carry
.393bb6	c2 20		rep #$20	                REP #$20        ; set A long
.393bb8	18		clc		                CLC
.393bb9	a9 20 00	lda #$0020	                LDA #$0020;
.393bbc	85 28		sta $28		                STA OPL2_REG_REGION
.393bbe	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393bc1	28		plp		                PLP ; Pull the Carry out
.393bc2	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc4	b0 08		bcs $393bce	                BCS OPL2_Set_Vibrato_Set;
.393bc6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc8	29 bf		and #$bf	                AND #$BF
.393bca	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bcc	80 06		bra $393bd4	                BRA OPL2_Set_Vibrato_Exit
.393bce					OPL2_Set_Vibrato_Set
.393bce	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd0	09 40		ora #$40	                ORA #$40
.393bd2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd4					OPL2_Set_Vibrato_Exit
.393bd4	6b		rtl		                RTL
.393bd5					OPL2_GET_VIBRATO
.393bd5	48		pha		                PHA             ; begin setdp macro
.393bd6	08		php		                PHP
.393bd7	c2 20		rep #$20	                REP #$20        ; set A long
.393bd9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bdc	5b		tcd		                TCD
.393bdd	28		plp		                PLP
.393bde	68		pla		                PLA             ; end setdp macro
.393bdf	c2 20		rep #$20	                REP #$20        ; set A long
.393be1	a9 20 00	lda #$0020	                LDA #$0020;
.393be4	85 28		sta $28		                STA OPL2_REG_REGION
.393be6	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393be9	e2 20		sep #$20	                SEP #$20        ; set A short
.393beb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bed	29 40		and #$40	                AND #$40
.393bef	6b		rtl		                RTL
.393bf0					OPL2_SET_MAINTAINSUSTAIN
.393bf0	48		pha		                PHA             ; begin setdp macro
.393bf1	08		php		                PHP
.393bf2	c2 20		rep #$20	                REP #$20        ; set A long
.393bf4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bf7	5b		tcd		                TCD
.393bf8	28		plp		                PLP
.393bf9	68		pla		                PLA             ; end setdp macro
.393bfa	08		php		              PHP ; Push the Carry
.393bfb	c2 20		rep #$20	                REP #$20        ; set A long
.393bfd	18		clc		              CLC
.393bfe	a9 20 00	lda #$0020	              LDA #$0020;
.393c01	85 28		sta $28		              STA OPL2_REG_REGION
.393c03	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393c06	28		plp		              PLP ; Pull the Carry out
.393c07	e2 20		sep #$20	                SEP #$20        ; set A short
.393c09	b0 08		bcs $393c13	              BCS OPL2_Set_MaintainSustain_Set;
.393c0b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c0d	29 df		and #$df	              AND #$DF
.393c0f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c11	80 06		bra $393c19	              BRA OPL2_Set_MaintainSustain_Exit
.393c13					OPL2_Set_MaintainSustain_Set
.393c13	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c15	09 20		ora #$20	              ORA #$20
.393c17	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c19					OPL2_Set_MaintainSustain_Exit
.393c19	6b		rtl		                RTL
.393c1a					OPL2_GET_MAINTAINSUSTAIN
.393c1a	48		pha		                PHA             ; begin setdp macro
.393c1b	08		php		                PHP
.393c1c	c2 20		rep #$20	                REP #$20        ; set A long
.393c1e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c21	5b		tcd		                TCD
.393c22	28		plp		                PLP
.393c23	68		pla		                PLA             ; end setdp macro
.393c24	c2 20		rep #$20	                REP #$20        ; set A long
.393c26	a9 20 00	lda #$0020	              LDA #$0020;
.393c29	85 28		sta $28		              STA OPL2_REG_REGION
.393c2b	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393c2e	e2 20		sep #$20	                SEP #$20        ; set A short
.393c30	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c32	29 20		and #$20	              AND #$20
.393c34	6b		rtl		                RTL
.393c35					OPL2_SET_ENVELOPESCALING
.393c35	48		pha		                PHA             ; begin setdp macro
.393c36	08		php		                PHP
.393c37	c2 20		rep #$20	                REP #$20        ; set A long
.393c39	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3c	5b		tcd		                TCD
.393c3d	28		plp		                PLP
.393c3e	68		pla		                PLA             ; end setdp macro
.393c3f	08		php		              PHP ; Push the Carry
.393c40	c2 20		rep #$20	                REP #$20        ; set A long
.393c42	18		clc		              CLC
.393c43	a9 20 00	lda #$0020	              LDA #$0020;
.393c46	85 28		sta $28		              STA OPL2_REG_REGION
.393c48	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393c4b	28		plp		              PLP ; Pull the Carry out
.393c4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393c4e	b0 08		bcs $393c58	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c50	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c52	29 ef		and #$ef	              AND #$EF
.393c54	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c56	80 06		bra $393c5e	              BRA OPL2_Set_EnvelopeScaling_Exit
.393c58					OPL2_Set_EnvelopeScaling_Set
.393c58	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c5a	09 10		ora #$10	              ORA #$10
.393c5c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c5e					OPL2_Set_EnvelopeScaling_Exit
.393c5e	6b		rtl		                RTL
.393c5f					OPL2_GET_ENVELOPESCALING
.393c5f	48		pha		                PHA             ; begin setdp macro
.393c60	08		php		                PHP
.393c61	c2 20		rep #$20	                REP #$20        ; set A long
.393c63	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c66	5b		tcd		                TCD
.393c67	28		plp		                PLP
.393c68	68		pla		                PLA             ; end setdp macro
.393c69	c2 20		rep #$20	                REP #$20        ; set A long
.393c6b	a9 20 00	lda #$0020	              LDA #$0020;
.393c6e	85 28		sta $28		              STA OPL2_REG_REGION
.393c70	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393c73	e2 20		sep #$20	                SEP #$20        ; set A short
.393c75	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c77	29 10		and #$10	              AND #$10
.393c79	6b		rtl		                RTL
.393c7a					OPL2_GET_MODFREQMULTIPLE
.393c7a	48		pha		                PHA             ; begin setdp macro
.393c7b	08		php		                PHP
.393c7c	c2 20		rep #$20	                REP #$20        ; set A long
.393c7e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c81	5b		tcd		                TCD
.393c82	28		plp		                PLP
.393c83	68		pla		                PLA             ; end setdp macro
.393c84	c2 20		rep #$20	                REP #$20        ; set A long
.393c86	a9 20 00	lda #$0020	              LDA #$0020;
.393c89	85 28		sta $28		              STA OPL2_REG_REGION
.393c8b	20 71 40	jsr $394071	              JSR OPL2_GET_REG_OFFSET
.393c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393c90	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c92	29 0f		and #$0f	              AND #$0F
.393c94	6b		rtl		              RTL
.393c95					OPL2_SET_MODFREQMULTIPLE
.393c95	48		pha		                PHA             ; begin setdp macro
.393c96	08		php		                PHP
.393c97	c2 20		rep #$20	                REP #$20        ; set A long
.393c99	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c9c	5b		tcd		                TCD
.393c9d	28		plp		                PLP
.393c9e	68		pla		                PLA             ; end setdp macro
.393c9f	c2 20		rep #$20	                REP #$20        ; set A long
.393ca1	a9 20 00	lda #$0020	                LDA #$0020;
.393ca4	85 28		sta $28		                STA OPL2_REG_REGION
.393ca6	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393ca9	e2 20		sep #$20	                SEP #$20        ; set A short
.393cab	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cad	29 0f		and #$0f	                AND #$0F
.393caf	85 32		sta $32		                STA OPL2_PARAMETER0
.393cb1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cb3	29 f0		and #$f0	                AND #$F0
.393cb5	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cb7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cb9	6b		rtl		                RTL
.393cba					OPL2_SET_SCALINGLEVEL
.393cba	48		pha		                PHA             ; begin setdp macro
.393cbb	08		php		                PHP
.393cbc	c2 20		rep #$20	                REP #$20        ; set A long
.393cbe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc1	5b		tcd		                TCD
.393cc2	28		plp		                PLP
.393cc3	68		pla		                PLA             ; end setdp macro
.393cc4	c2 20		rep #$20	                REP #$20        ; set A long
.393cc6	a9 40 00	lda #$0040	                LDA #$0040;
.393cc9	85 28		sta $28		                STA OPL2_REG_REGION
.393ccb	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393cce	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd0	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cd2	29 03		and #$03	                AND #$03
.393cd4	0a		asl a		                ASL
.393cd5	0a		asl a		                ASL
.393cd6	0a		asl a		                ASL
.393cd7	0a		asl a		                ASL
.393cd8	0a		asl a		                ASL
.393cd9	0a		asl a		                ASL
.393cda	85 32		sta $32		                STA OPL2_PARAMETER0
.393cdc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cde	29 3f		and #$3f	                AND #$3F
.393ce0	05 32		ora $32		                ORA OPL2_PARAMETER0
.393ce2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ce4	6b		rtl		                RTL
.393ce5					OPL2_SET_VOLUME
.393ce5	48		pha		                PHA             ; begin setdp macro
.393ce6	08		php		                PHP
.393ce7	c2 20		rep #$20	                REP #$20        ; set A long
.393ce9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cec	5b		tcd		                TCD
.393ced	28		plp		                PLP
.393cee	68		pla		                PLA             ; end setdp macro
.393cef	c2 20		rep #$20	                REP #$20        ; set A long
.393cf1	a9 40 00	lda #$0040	                LDA #$0040  ;
.393cf4	85 28		sta $28		                STA OPL2_REG_REGION
.393cf6	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393cf9	e2 20		sep #$20	                SEP #$20        ; set A short
.393cfb	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393cfd	29 3f		and #$3f	                AND #$3F
.393cff	85 32		sta $32		                STA OPL2_PARAMETER0
.393d01	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d03	29 c0		and #$c0	                AND #$C0
.393d05	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d07	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d09	6b		rtl		                RTL
.393d0a					OPL2_GET_VOLUME
.393d0a	48		pha		                PHA             ; begin setdp macro
.393d0b	08		php		                PHP
.393d0c	c2 20		rep #$20	                REP #$20        ; set A long
.393d0e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d11	5b		tcd		                TCD
.393d12	28		plp		                PLP
.393d13	68		pla		                PLA             ; end setdp macro
.393d14	c2 20		rep #$20	                REP #$20        ; set A long
.393d16	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d19	85 28		sta $28		                STA OPL2_REG_REGION
.393d1b	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393d1e	e2 20		sep #$20	                SEP #$20        ; set A short
.393d20	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d22	29 3f		and #$3f	                AND #$3F
.393d24	6b		rtl		                RTL
.393d25					OPL2_SET_ATTACK
.393d25	48		pha		                PHA             ; begin setdp macro
.393d26	08		php		                PHP
.393d27	c2 20		rep #$20	                REP #$20        ; set A long
.393d29	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d2c	5b		tcd		                TCD
.393d2d	28		plp		                PLP
.393d2e	68		pla		                PLA             ; end setdp macro
.393d2f	c2 20		rep #$20	                REP #$20        ; set A long
.393d31	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d34	85 28		sta $28		                STA OPL2_REG_REGION
.393d36	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393d39	e2 20		sep #$20	                SEP #$20        ; set A short
.393d3b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d3d	29 0f		and #$0f	                AND #$0F
.393d3f	0a		asl a		                ASL
.393d40	0a		asl a		                ASL
.393d41	0a		asl a		                ASL
.393d42	0a		asl a		                ASL
.393d43	85 32		sta $32		                STA OPL2_PARAMETER0
.393d45	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d47	29 0f		and #$0f	                AND #$0F
.393d49	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d4b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d4d	6b		rtl		                RTL
.393d4e					OPL2_GET_ATTACK
.393d4e	48		pha		                PHA             ; begin setdp macro
.393d4f	08		php		                PHP
.393d50	c2 20		rep #$20	                REP #$20        ; set A long
.393d52	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d55	5b		tcd		                TCD
.393d56	28		plp		                PLP
.393d57	68		pla		                PLA             ; end setdp macro
.393d58	c2 20		rep #$20	                REP #$20        ; set A long
.393d5a	a9 60 00	lda #$0060	                LDA #$0060
.393d5d	85 28		sta $28		                STA OPL2_REG_REGION
.393d5f	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393d62	e2 20		sep #$20	                SEP #$20        ; set A short
.393d64	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d66	29 f0		and #$f0	                AND #$F0
.393d68	4a		lsr a		                LSR
.393d69	4a		lsr a		                LSR
.393d6a	4a		lsr a		                LSR
.393d6b	4a		lsr a		                LSR
.393d6c	6b		rtl		                RTL
.393d6d					OPL2_SET_DECAY
.393d6d	48		pha		                PHA             ; begin setdp macro
.393d6e	08		php		                PHP
.393d6f	c2 20		rep #$20	                REP #$20        ; set A long
.393d71	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d74	5b		tcd		                TCD
.393d75	28		plp		                PLP
.393d76	68		pla		                PLA             ; end setdp macro
.393d77	c2 20		rep #$20	                REP #$20        ; set A long
.393d79	a9 60 00	lda #$0060	                LDA #$0060;
.393d7c	85 28		sta $28		                STA OPL2_REG_REGION
.393d7e	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393d81	e2 20		sep #$20	                SEP #$20        ; set A short
.393d83	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d85	29 0f		and #$0f	                AND #$0F
.393d87	85 32		sta $32		                STA OPL2_PARAMETER0
.393d89	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d8b	29 f0		and #$f0	                AND #$F0
.393d8d	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d8f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d91	6b		rtl		                RTL
.393d92					OPL2_GET_DECAY
.393d92	48		pha		                PHA             ; begin setdp macro
.393d93	08		php		                PHP
.393d94	c2 20		rep #$20	                REP #$20        ; set A long
.393d96	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d99	5b		tcd		                TCD
.393d9a	28		plp		                PLP
.393d9b	68		pla		                PLA             ; end setdp macro
.393d9c	c2 20		rep #$20	                REP #$20        ; set A long
.393d9e	a9 60 00	lda #$0060	                LDA #$0060
.393da1	85 28		sta $28		                STA OPL2_REG_REGION
.393da3	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393da6	e2 20		sep #$20	                SEP #$20        ; set A short
.393da8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393daa	29 0f		and #$0f	                AND #$0F
.393dac	6b		rtl		                RTL
.393dad					OPL2_SET_SUSTAIN
.393dad	48		pha		                PHA             ; begin setdp macro
.393dae	08		php		                PHP
.393daf	c2 20		rep #$20	                REP #$20        ; set A long
.393db1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393db4	5b		tcd		                TCD
.393db5	28		plp		                PLP
.393db6	68		pla		                PLA             ; end setdp macro
.393db7	c2 20		rep #$20	                REP #$20        ; set A long
.393db9	a9 80 00	lda #$0080	                LDA #$0080;
.393dbc	85 28		sta $28		                STA OPL2_REG_REGION
.393dbe	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393dc1	e2 20		sep #$20	                SEP #$20        ; set A short
.393dc3	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dc5	29 0f		and #$0f	                AND #$0F
.393dc7	0a		asl a		                ASL
.393dc8	0a		asl a		                ASL
.393dc9	0a		asl a		                ASL
.393dca	0a		asl a		                ASL
.393dcb	85 32		sta $32		                STA OPL2_PARAMETER0
.393dcd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dcf	29 0f		and #$0f	                AND #$0F
.393dd1	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dd3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dd5	6b		rtl		                RTL
.393dd6					OPL2_GET_SUSTAIN
.393dd6	48		pha		                PHA             ; begin setdp macro
.393dd7	08		php		                PHP
.393dd8	c2 20		rep #$20	                REP #$20        ; set A long
.393dda	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ddd	5b		tcd		                TCD
.393dde	28		plp		                PLP
.393ddf	68		pla		                PLA             ; end setdp macro
.393de0	c2 20		rep #$20	                REP #$20        ; set A long
.393de2	a9 80 00	lda #$0080	                LDA #$0080
.393de5	85 28		sta $28		                STA OPL2_REG_REGION
.393de7	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393dea	e2 20		sep #$20	                SEP #$20        ; set A short
.393dec	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dee	29 f0		and #$f0	                AND #$F0
.393df0	4a		lsr a		                LSR
.393df1	4a		lsr a		                LSR
.393df2	4a		lsr a		                LSR
.393df3	4a		lsr a		                LSR
.393df4	6b		rtl		                RTL
.393df5					OPL2_SET_RELEASE
.393df5	48		pha		                PHA             ; begin setdp macro
.393df6	08		php		                PHP
.393df7	c2 20		rep #$20	                REP #$20        ; set A long
.393df9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dfc	5b		tcd		                TCD
.393dfd	28		plp		                PLP
.393dfe	68		pla		                PLA             ; end setdp macro
.393dff	c2 20		rep #$20	                REP #$20        ; set A long
.393e01	a9 80 00	lda #$0080	                LDA #$0080;
.393e04	85 28		sta $28		                STA OPL2_REG_REGION
.393e06	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393e09	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e0d	29 0f		and #$0f	                AND #$0F
.393e0f	85 32		sta $32		                STA OPL2_PARAMETER0
.393e11	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e13	29 f0		and #$f0	                AND #$F0
.393e15	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e17	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e19	6b		rtl		                RTL
.393e1a					OPL2_GET_RELEASE
.393e1a	48		pha		                PHA             ; begin setdp macro
.393e1b	08		php		                PHP
.393e1c	c2 20		rep #$20	                REP #$20        ; set A long
.393e1e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e21	5b		tcd		                TCD
.393e22	28		plp		                PLP
.393e23	68		pla		                PLA             ; end setdp macro
.393e24	c2 20		rep #$20	                REP #$20        ; set A long
.393e26	a9 80 00	lda #$0080	                LDA #$0080
.393e29	85 28		sta $28		                STA OPL2_REG_REGION
.393e2b	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.393e2e	e2 20		sep #$20	                SEP #$20        ; set A short
.393e30	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e32	29 0f		and #$0f	                AND #$0F
.393e34	6b		rtl		                RTL
.393e35					OPL2_SET_FNUMBER
.393e35	48		pha		                PHA             ; begin setdp macro
.393e36	08		php		                PHP
.393e37	c2 20		rep #$20	                REP #$20        ; set A long
.393e39	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e3c	5b		tcd		                TCD
.393e3d	28		plp		                PLP
.393e3e	68		pla		                PLA             ; end setdp macro
.393e3f	e2 20		sep #$20	                SEP #$20        ; set A short
.393e41	18		clc		                CLC
.393e42	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e44	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e46	69 a0		adc #$a0	                ADC #$A0
.393e48	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e4a	a9 00		lda #$00	                LDA #$00
.393e4c	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e4e	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e50	18		clc		                CLC
.393e51	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e54	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e56	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e58	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e5b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e5d	e2 20		sep #$20	                SEP #$20        ; set A short
.393e5f	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393e61	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393e63	18		clc		                CLC
.393e64	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393e66	69 10		adc #$10	                ADC #$10
.393e68	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e6a	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393e6c	29 03		and #$03	                AND #$03
.393e6e	85 33		sta $33		                STA OPL2_PARAMETER1
.393e70	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e72	29 fc		and #$fc	                AND #$FC
.393e74	05 33		ora $33		                ORA OPL2_PARAMETER1
.393e76	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e78	6b		rtl		                RTL
.393e79					OPL2_GET_FNUMBER
.393e79	48		pha		                PHA             ; begin setdp macro
.393e7a	08		php		                PHP
.393e7b	c2 20		rep #$20	                REP #$20        ; set A long
.393e7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e80	5b		tcd		                TCD
.393e81	28		plp		                PLP
.393e82	68		pla		                PLA             ; end setdp macro
.393e83	e2 20		sep #$20	                SEP #$20        ; set A short
.393e85	18		clc		                CLC
.393e86	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e88	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e8a	69 a0		adc #$a0	                ADC #$A0
.393e8c	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e8e	a9 00		lda #$00	                LDA #$00
.393e90	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e92	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e94	18		clc		                CLC
.393e95	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e98	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e9a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e9c	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e9f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ea5	85 32		sta $32		                STA OPL2_PARAMETER0
.393ea7	18		clc		                CLC
.393ea8	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eaa	69 10		adc #$10	                ADC #$10
.393eac	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eae	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eb0	29 03		and #$03	                AND #$03
.393eb2	85 33		sta $33		                STA OPL2_PARAMETER1
.393eb4	6b		rtl		                RTL
.393eb5					OPL2_Set_Frequency
.393eb5	6b		rtl		                RTL
.393eb6					OPL2_Get_Frequency
.393eb6	6b		rtl		                RTL
.393eb7					OPL2_SET_BLOCK
.393eb7	48		pha		                PHA             ; begin setdp macro
.393eb8	08		php		                PHP
.393eb9	c2 20		rep #$20	                REP #$20        ; set A long
.393ebb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ebe	5b		tcd		                TCD
.393ebf	28		plp		                PLP
.393ec0	68		pla		                PLA             ; end setdp macro
.393ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec3	18		clc		                CLC
.393ec4	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ec6	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ec8	69 b0		adc #$b0	                ADC #$B0
.393eca	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ecc	a9 00		lda #$00	                LDA #$00
.393ece	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ed0	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ed2	18		clc		                CLC
.393ed3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ed6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ed8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eda	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393edd	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393edf	e2 20		sep #$20	                SEP #$20        ; set A short
.393ee1	a5 31		lda $31		                LDA OPL2_OCTAVE
.393ee3	29 07		and #$07	                AND #$07
.393ee5	0a		asl a		                ASL
.393ee6	0a		asl a		                ASL
.393ee7	85 31		sta $31		                STA OPL2_OCTAVE
.393ee9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eeb	29 e3		and #$e3	                AND #$E3
.393eed	05 31		ora $31		                ORA OPL2_OCTAVE
.393eef	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ef1	60		rts		                RTS
.393ef2					OPL2_SET_KEYON
.393ef2	48		pha		                PHA             ; begin setdp macro
.393ef3	08		php		                PHP
.393ef4	c2 20		rep #$20	                REP #$20        ; set A long
.393ef6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ef9	5b		tcd		                TCD
.393efa	28		plp		                PLP
.393efb	68		pla		                PLA             ; end setdp macro
.393efc	e2 20		sep #$20	                SEP #$20        ; set A short
.393efe	18		clc		                CLC
.393eff	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f01	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f03	69 b0		adc #$b0	                ADC #$B0
.393f05	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f07	a9 00		lda #$00	                LDA #$00
.393f09	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f0b	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f0d	18		clc		                CLC
.393f0e	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f11	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f13	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f15	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f18	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f1a	e2 20		sep #$20	                SEP #$20        ; set A short
.393f1c	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f1e	29 01		and #$01	                AND #$01
.393f20	f0 02		beq $393f24	                BEQ SET_KEYON_OFF
.393f22	a9 20		lda #$20	                LDA #$20
.393f24					    SET_KEYON_OFF
.393f24	85 32		sta $32		                STA OPL2_PARAMETER0
.393f26	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f28	29 df		and #$df	                AND #$DF
.393f2a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f2c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f2e	60		rts		                RTS
.393f2f					OPL2_SET_FEEDBACK
.393f2f	48		pha		                PHA             ; begin setdp macro
.393f30	08		php		                PHP
.393f31	c2 20		rep #$20	                REP #$20        ; set A long
.393f33	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f36	5b		tcd		                TCD
.393f37	28		plp		                PLP
.393f38	68		pla		                PLA             ; end setdp macro
.393f39	e2 20		sep #$20	                SEP #$20        ; set A short
.393f3b	18		clc		              CLC
.393f3c	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f3e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f40	69 c0		adc #$c0	              ADC #$C0
.393f42	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f44	a9 00		lda #$00	              LDA #$00
.393f46	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f48	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f4a	18		clc		              CLC
.393f4b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f4e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f50	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f52	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f55	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f57	e2 20		sep #$20	                SEP #$20        ; set A short
.393f59	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393f5b	29 07		and #$07	              AND #$07
.393f5d	0a		asl a		              ASL
.393f5e	85 32		sta $32		              STA OPL2_PARAMETER0
.393f60	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f62	29 01		and #$01	              AND #$01
.393f64	05 32		ora $32		              ORA OPL2_PARAMETER0
.393f66	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f68	6b		rtl		                RTL
.393f69					OPL2_SET_SYNTHMODE
.393f69	48		pha		                PHA             ; begin setdp macro
.393f6a	08		php		                PHP
.393f6b	c2 20		rep #$20	                REP #$20        ; set A long
.393f6d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f70	5b		tcd		                TCD
.393f71	28		plp		                PLP
.393f72	68		pla		                PLA             ; end setdp macro
.393f73	08		php		              PHP ; Push the Carry
.393f74	e2 20		sep #$20	                SEP #$20        ; set A short
.393f76	18		clc		              CLC
.393f77	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f79	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f7b	69 c0		adc #$c0	              ADC #$C0
.393f7d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f7f	a9 00		lda #$00	              LDA #$00
.393f81	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f83	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f85	18		clc		              CLC
.393f86	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f89	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f8b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f8d	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f90	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f92	28		plp		              PLP ; Pull the Carry out
.393f93	e2 20		sep #$20	                SEP #$20        ; set A short
.393f95	b0 08		bcs $393f9f	              BCS OPL2_Set_Synthmode_Set;
.393f97	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f99	29 fe		and #$fe	              AND #$FE
.393f9b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f9d	80 06		bra $393fa5	              BRA OPL2_Set_Synthmode_Exit
.393f9f					OPL2_Set_Synthmode_Set
.393f9f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fa1	09 01		ora #$01	              ORA #$01
.393fa3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fa5					OPL2_Set_Synthmode_Exit
.393fa5	6b		rtl		                RTL
.393fa6					OPL2_SET_DEEPTREMOLO
.393fa6	48		pha		                PHA             ; begin setdp macro
.393fa7	08		php		                PHP
.393fa8	c2 20		rep #$20	                REP #$20        ; set A long
.393faa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fad	5b		tcd		                TCD
.393fae	28		plp		                PLP
.393faf	68		pla		                PLA             ; end setdp macro
.393fb0	c2 20		rep #$20	                REP #$20        ; set A long
.393fb2	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393fb5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fb7	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fba	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393fbe	b0 08		bcs $393fc8	              BCS OPL2_Set_DeepTremolo_Set;
.393fc0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fc2	29 7f		and #$7f	              AND #$7F
.393fc4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fc6	80 06		bra $393fce	              BRA OPL2_Set_DeepTremolo_Exit
.393fc8					OPL2_Set_DeepTremolo_Set
.393fc8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fca	09 80		ora #$80	              ORA #$80
.393fcc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fce					OPL2_Set_DeepTremolo_Exit
.393fce	6b		rtl		                RTL
.393fcf					OPL2_SET_DEEPVIBRATO
.393fcf	48		pha		                PHA             ; begin setdp macro
.393fd0	08		php		                PHP
.393fd1	c2 20		rep #$20	                REP #$20        ; set A long
.393fd3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fd6	5b		tcd		                TCD
.393fd7	28		plp		                PLP
.393fd8	68		pla		                PLA             ; end setdp macro
.393fd9	c2 20		rep #$20	                REP #$20        ; set A long
.393fdb	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393fde	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fe0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fe3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fe5	e2 20		sep #$20	                SEP #$20        ; set A short
.393fe7	b0 08		bcs $393ff1	              BCS OPL2_Set_DeepVibrato_Set;
.393fe9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393feb	29 bf		and #$bf	              AND #$BF
.393fed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fef	80 06		bra $393ff7	              BRA OPL2_Set_DeepVibrato_Exit
.393ff1					OPL2_Set_DeepVibrato_Set
.393ff1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ff3	09 40		ora #$40	              ORA #$40
.393ff5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ff7					OPL2_Set_DeepVibrato_Exit
.393ff7	6b		rtl		                RTL
.393ff8					OPL2_SET_PERCUSSION
.393ff8	48		pha		                PHA             ; begin setdp macro
.393ff9	08		php		                PHP
.393ffa	c2 20		rep #$20	                REP #$20        ; set A long
.393ffc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fff	5b		tcd		                TCD
.394000	28		plp		                PLP
.394001	68		pla		                PLA             ; end setdp macro
.394002	c2 20		rep #$20	                REP #$20        ; set A long
.394004	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394007	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394009	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39400c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39400e	e2 20		sep #$20	                SEP #$20        ; set A short
.394010	b0 08		bcs $39401a	                BCS OPL2_Set_Percussion_Set;
.394012	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394014	29 df		and #$df	                AND #$DF
.394016	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394018	80 06		bra $394020	                BRA OPL2_Set_Percussion_Exit
.39401a					OPL2_Set_Percussion_Set
.39401a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39401c	09 20		ora #$20	                ORA #$20
.39401e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394020					OPL2_Set_Percussion_Exit
.394020	6b		rtl		                RTL
.394021					OPL2_SET_DRUMS
.394021	48		pha		                PHA             ; begin setdp macro
.394022	08		php		                PHP
.394023	c2 20		rep #$20	                REP #$20        ; set A long
.394025	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394028	5b		tcd		                TCD
.394029	28		plp		                PLP
.39402a	68		pla		                PLA             ; end setdp macro
.39402b	c2 20		rep #$20	                REP #$20        ; set A long
.39402d	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394030	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394032	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394035	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394037	e2 20		sep #$20	                SEP #$20        ; set A short
.394039	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39403b	29 1f		and #$1f	                AND #$1F
.39403d	85 32		sta $32		                STA OPL2_PARAMETER0
.39403f	49 ff		eor #$ff	                EOR #$FF
.394041	85 33		sta $33		                STA OPL2_PARAMETER1
.394043	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394045	25 33		and $33		                AND OPL2_PARAMETER1
.394047	05 32		ora $32		                ORA OPL2_PARAMETER0
.394049	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39404b	6b		rtl		                RTL
.39404c					OPL2_SET_WAVEFORM
.39404c	48		pha		                PHA             ; begin setdp macro
.39404d	08		php		                PHP
.39404e	c2 20		rep #$20	                REP #$20        ; set A long
.394050	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394053	5b		tcd		                TCD
.394054	28		plp		                PLP
.394055	68		pla		                PLA             ; end setdp macro
.394056	c2 20		rep #$20	                REP #$20        ; set A long
.394058	a9 e0 00	lda #$00e0	                LDA #$00E0;
.39405b	85 28		sta $28		                STA OPL2_REG_REGION
.39405d	20 71 40	jsr $394071	                JSR OPL2_GET_REG_OFFSET
.394060	e2 20		sep #$20	                SEP #$20        ; set A short
.394062	a5 32		lda $32		                LDA OPL2_PARAMETER0
.394064	29 03		and #$03	                AND #$03
.394066	85 32		sta $32		                STA OPL2_PARAMETER0
.394068	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39406a	29 fc		and #$fc	                AND #$FC
.39406c	05 32		ora $32		                ORA OPL2_PARAMETER0
.39406e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394070	6b		rtl		                RTL
.394071					OPL2_GET_REG_OFFSET
.394071	e2 30		sep #$30	                SEP #$30        ; set A&X short
.394073	a5 27		lda $27		                LDA OPL2_CHANNEL
.394075	29 0f		and #$0f	                AND #$0F
.394077	aa		tax		                TAX
.394078	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.39407a	d0 06		bne $394082	                BNE OPL2_Get_Register_Offset_l0
.39407c	bf b9 16 39	lda $3916b9,x	                LDA @lregisterOffsets_operator0, X
.394080	80 04		bra $394086	                BRA OPL2_Get_Register_Offset_exit
.394082					OPL2_Get_Register_Offset_l0
.394082	bf c2 16 39	lda $3916c2,x	                LDA @lregisterOffsets_operator1, X
.394086					OPL2_Get_Register_Offset_exit
.394086	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.394088	a9 00		lda #$00	                LDA #$00
.39408a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39408c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39408e	18		clc		                CLC
.39408f	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.394092	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.394094	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.394096	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394098	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39409b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39409d	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.39409e					ITRACE
.39409e	08		php		                PHP
.39409f	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940a1	8b		phb		                PHB                 ; Print the text
.3940a2	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940a4	aa		tax		                TAX                 ; ... into X
.3940a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a7	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940a9	48		pha		                PHA
.3940aa	ab		plb		                PLB                 ; ... into B
.3940ab	22 8b 07 39	jsl $39078b	                JSL IPUTS           ; Print the string
.3940af	c2 20		rep #$20	                REP #$20        ; set A long
.3940b1	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940b3	83 08		sta $08,s	                STA #8,S
.3940b5	a3 02		lda $02,s	                LDA #2,S
.3940b7	83 06		sta $06,s	                STA #6,S
.3940b9	ab		plb		                PLB
.3940ba	68		pla		                PLA                 ; Clean up the stack
.3940bb	68		pla		                PLA
.3940bc	28		plp		                PLP
.3940bd	6b		rtl		                RTL
.3940be					ISETTIMEOUT
.3940be	8b		phb		                PHB
.3940bf	0b		phd		                PHD
.3940c0	08		php		                PHP
.3940c1	48		pha		                PHA             ; begin setdbr macro
.3940c2	08		php		                PHP
.3940c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3940c5	a9 00		lda #$00	                LDA #0
.3940c7	48		pha		                PHA
.3940c8	ab		plb		                PLB
.3940c9	28		plp		                PLP
.3940ca	68		pla		                PLA             ; end setdbr macro
.3940cb	48		pha		                PHA             ; begin setdp macro
.3940cc	08		php		                PHP
.3940cd	c2 20		rep #$20	                REP #$20        ; set A long
.3940cf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940d2	5b		tcd		                TCD
.3940d3	28		plp		                PLP
.3940d4	68		pla		                PLA             ; end setdp macro
.3940d5	78		sei		                SEI                             ; We don't want to be interrupted
.3940d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3940d8	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.3940da	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.3940dc	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.3940de	85 0c		sta $032c	                STA @b BIOS_FLAGS
.3940e0	28		plp		done            PLP
.3940e1	2b		pld		                PLD
.3940e2	ab		plb		                PLB
.3940e3	6b		rtl		                RTL
.3940e4					ICMDBLOCK
.3940e4	0b		phd		                PHD
.3940e5	08		php		                PHP
.3940e6	48		pha		                PHA             ; begin setdp macro
.3940e7	08		php		                PHP
.3940e8	c2 20		rep #$20	                REP #$20        ; set A long
.3940ea	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940ed	5b		tcd		                TCD
.3940ee	28		plp		                PLP
.3940ef	68		pla		                PLA             ; end setdp macro
.3940f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3940f2	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.3940f4	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.3940f6	d0 06		bne $3940fe	                BNE ret_success             ; No: just return
.3940f8	22 e4 67 39	jsl $3967e4	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.3940fc	90 0c		bcc $39410a	                BCC pass_failure
.3940fe					ret_success
.3940fe	e2 20		sep #$20	                SEP #$20        ; set A short
.394100	64 00		stz $0320	                STZ BIOS_STATUS
.394102	28		plp		                PLP
.394103	2b		pld		                PLD
.394104	38		sec		                SEC
.394105	6b		rtl		                RTL
.394106					ret_failure
.394106	e2 20		sep #$20	                SEP #$20        ; set A short
.394108	85 00		sta $0320	                STA BIOS_STATUS
.39410a	28		plp		pass_failure    PLP
.39410b	2b		pld		                PLD
.39410c	18		clc		                CLC
.39410d	6b		rtl		                RTL
.39410e					IGETBLOCK
.39410e	0b		phd		                PHD
.39410f	8b		phb		                PHB
.394110	08		php		                PHP
.394111	48		pha		                PHA             ; begin setdbr macro
.394112	08		php		                PHP
.394113	e2 20		sep #$20	                SEP #$20        ; set A short
.394115	a9 00		lda #$00	                LDA #0
.394117	48		pha		                PHA
.394118	ab		plb		                PLB
.394119	28		plp		                PLP
.39411a	68		pla		                PLA             ; end setdbr macro
.39411b	48		pha		                PHA             ; begin setdp macro
.39411c	08		php		                PHP
.39411d	c2 20		rep #$20	                REP #$20        ; set A long
.39411f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394122	5b		tcd		                TCD
.394123	28		plp		                PLP
.394124	68		pla		                PLA             ; end setdp macro
.394125	e2 20		sep #$20	                SEP #$20        ; set A short
.394127	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394129	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.39412b	f0 13		beq $394140	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.39412d	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39412f	f0 17		beq $394148	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.394131	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394133	f0 1b		beq $394150	                BEQ hd_getblock
.394135	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394137					ret_failure
.394137	e2 20		sep #$20	                SEP #$20        ; set A short
.394139	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.39413b	28		plp		                PLP
.39413c	ab		plb		                PLB
.39413d	2b		pld		                PLD
.39413e	38		sec		                SEC                                 ; Return failure
.39413f	6b		rtl		                RTL
.394140	22 0e 5d 39	jsl $395d0e	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394144	b0 12		bcs $394158	                BCS ret_success
.394146	80 ef		bra $394137	                BRA ret_failure
.394148	22 ed 65 39	jsl $3965ed	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.39414c	b0 0a		bcs $394158	                BCS ret_success
.39414e	80 e7		bra $394137	                BRA ret_failure
.394150	22 a5 6b 39	jsl $396ba5	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394154	b0 02		bcs $394158	                BCS ret_success
.394156	80 df		bra $394137	                BRA ret_failure
.394158					ret_success
.394158	e2 20		sep #$20	                SEP #$20        ; set A short
.39415a	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.39415c	28		plp		                PLP
.39415d	ab		plb		                PLB
.39415e	2b		pld		                PLD
.39415f	38		sec		                SEC                                 ; Return success
.394160	6b		rtl		                RTL
.394161					IPUTBLOCK
.394161	0b		phd		                PHD
.394162	8b		phb		                PHB
.394163	08		php		                PHP
.394164	48		pha		                PHA             ; begin setdbr macro
.394165	08		php		                PHP
.394166	e2 20		sep #$20	                SEP #$20        ; set A short
.394168	a9 00		lda #$00	                LDA #0
.39416a	48		pha		                PHA
.39416b	ab		plb		                PLB
.39416c	28		plp		                PLP
.39416d	68		pla		                PLA             ; end setdbr macro
.39416e	48		pha		                PHA             ; begin setdp macro
.39416f	08		php		                PHP
.394170	c2 20		rep #$20	                REP #$20        ; set A long
.394172	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394175	5b		tcd		                TCD
.394176	28		plp		                PLP
.394177	68		pla		                PLA             ; end setdp macro
.394178	e2 20		sep #$20	                SEP #$20        ; set A short
.39417a	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.39417c	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.39417e	f0 13		beq $394193	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.394180	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.394182	f0 17		beq $39419b	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.394184	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394186	f0 1b		beq $3941a3	                BEQ hd_putblock
.394188	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.39418a					ret_failure
.39418a	e2 20		sep #$20	                SEP #$20        ; set A short
.39418c	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.39418e	28		plp		                PLP
.39418f	ab		plb		                PLB
.394190	2b		pld		                PLD
.394191	18		clc		                CLC                                 ; Return failure
.394192	6b		rtl		                RTL
.394193	22 ae 5d 39	jsl $395dae	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.394197	90 f1		bcc $39418a	                BCC ret_failure
.394199	80 10		bra $3941ab	                BRA ret_success
.39419b	22 52 66 39	jsl $396652	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.39419f	90 e9		bcc $39418a	                BCC ret_failure
.3941a1	80 08		bra $3941ab	                BRA ret_success
.3941a3	22 36 6c 39	jsl $396c36	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941a7	90 e1		bcc $39418a	                BCC ret_failure
.3941a9	80 00		bra $3941ab	                BRA ret_success
.3941ab					ret_success
.3941ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ad	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941af	28		plp		                PLP
.3941b0	ab		plb		                PLB
.3941b1	2b		pld		                PLD
.3941b2	38		sec		                SEC                                 ; Return success
.3941b3	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941b4					DOS_DIROPEN
.3941b4	da		phx		                PHX
.3941b5	5a		phy		                PHY
.3941b6	0b		phd		                PHD
.3941b7	8b		phb		                PHB
.3941b8	08		php		                PHP
.3941b9	48		pha		                PHA             ; begin setdbr macro
.3941ba	08		php		                PHP
.3941bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3941bd	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941bf	48		pha		                PHA
.3941c0	ab		plb		                PLB
.3941c1	28		plp		                PLP
.3941c2	68		pla		                PLA             ; end setdbr macro
.3941c3	48		pha		                PHA             ; begin setdp macro
.3941c4	08		php		                PHP
.3941c5	c2 20		rep #$20	                REP #$20        ; set A long
.3941c7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941ca	5b		tcd		                TCD
.3941cb	28		plp		                PLP
.3941cc	68		pla		                PLA             ; end setdp macro
.3941cd	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.3941d0	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.3941d3	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3941d6	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3941d9	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.3941dc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3941de	85 18		sta $0338	                STA DOS_DIR_PTR
.3941e0	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941e3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3941e5	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3941e9	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.3941ec	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.3941ee	d0 24		bne $394214	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.3941f0					fetch_fat12
.3941f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f2	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.3941f4	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.3941f7	c2 20		rep #$20	                REP #$20        ; set A long
.3941f9	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.3941fb	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941fd	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3941ff	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394201	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394204	85 02		sta $0322	                STA BIOS_LBA
.394206	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394209	85 04		sta $0324	                STA BIOS_LBA+2
.39420b	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39420f	b0 1f		bcs $394230	                BCS do_success              ; If sucessful, set the directory cursor
.394211	82 80 16	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394214					fetch_fat32
.394214	e2 20		sep #$20	                SEP #$20        ; set A short
.394216	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394218	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39421b	c2 20		rep #$20	                REP #$20        ; set A long
.39421d	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394220	85 10		sta $0330	                STA DOS_CLUS_ID
.394222	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394225	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394227	22 43 47 39	jsl $394743	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39422b	b0 03		bcs $394230	                BCS do_success              ; If successful: set the directory cursor
.39422d	82 64 16	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394230	82 68 16	brl $39589b	do_success      BRL IF_SUCCESS
.394233					DOS_DIRFIRST
.394233	0b		phd		                PHD
.394234	08		php		                PHP
.394235	48		pha		                PHA             ; begin setdp macro
.394236	08		php		                PHP
.394237	c2 20		rep #$20	                REP #$20        ; set A long
.394239	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39423c	5b		tcd		                TCD
.39423d	28		plp		                PLP
.39423e	68		pla		                PLA             ; end setdp macro
.39423f	c2 20		rep #$20	                REP #$20        ; set A long
.394241	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394244	85 18		sta $0338	                STA DOS_DIR_PTR
.394246	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394249	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39424b	28		plp		                PLP
.39424c	2b		pld		                PLD
.39424d	6b		rtl		                RTL
.39424e					DOS_DIRNEXT
.39424e	da		phx		                PHX
.39424f	5a		phy		                PHY
.394250	0b		phd		                PHD
.394251	8b		phb		                PHB
.394252	08		php		                PHP
.394253	48		pha		                PHA             ; begin setdbr macro
.394254	08		php		                PHP
.394255	e2 20		sep #$20	                SEP #$20        ; set A short
.394257	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394259	48		pha		                PHA
.39425a	ab		plb		                PLB
.39425b	28		plp		                PLP
.39425c	68		pla		                PLA             ; end setdbr macro
.39425d	48		pha		                PHA             ; begin setdp macro
.39425e	08		php		                PHP
.39425f	c2 20		rep #$20	                REP #$20        ; set A long
.394261	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394264	5b		tcd		                TCD
.394265	28		plp		                PLP
.394266	68		pla		                PLA             ; end setdp macro
.394267	c2 20		rep #$20	                REP #$20        ; set A long
.394269	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.39426a	a5 18		lda $0338	                LDA DOS_DIR_PTR
.39426c	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.39426f	85 18		sta $0338	                STA DOS_DIR_PTR
.394271	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394273	69 00 00	adc #$0000	                ADC #0
.394276	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394278	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.394279	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.39427c	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.39427e	85 28		sta $0348	                STA DOS_TEMP
.394280	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.394283	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.394285	85 2a		sta $034a	                STA DOS_TEMP+2
.394287	30 0c		bmi $394295	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.394289	f0 03		beq $39428e	                BEQ check_lower
.39428b	82 0d 16	brl $39589b	                BRL IF_SUCCESS
.39428e	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394290	f0 03		beq $394295	                BEQ get_next_block
.394292	82 06 16	brl $39589b	                BRL IF_SUCCESS
.394295					get_next_block
.394295	e2 20		sep #$20	                SEP #$20        ; set A short
.394297	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39429a	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.39429c	f0 38		beq $3942d6	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.39429e					next_sector
.39429e	c2 20		rep #$20	                REP #$20        ; set A long
.3942a0	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942a3	1a		inc a		                INC A
.3942a4	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942a7	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942aa	d0 07		bne $3942b3	                BNE read_sector
.3942ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3942ae	a9 00		lda #$00	                LDA #0
.3942b0	82 dd 15	brl $395890	                BRL IF_FAILURE
.3942b3					read_sector
.3942b3	c2 20		rep #$20	                REP #$20        ; set A long
.3942b5	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3942b8	85 02		sta $0322	                STA BIOS_LBA
.3942ba	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942bd	85 04		sta $0324	                STA BIOS_LBA+2
.3942bf	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3942c2	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942c4	85 18		sta $0338	                STA DOS_DIR_PTR
.3942c6	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942c9	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942cb	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942cd	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.3942d1	b0 39		bcs $39430c	                BCS do_success              ; If successful: set the directory cursor
.3942d3	82 be 15	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3942d6					next_cluster
.3942d6	c2 20		rep #$20	                REP #$20        ; set A long
.3942d8	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.3942db	85 10		sta $0330	                STA DOS_CLUS_ID
.3942dd	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942e0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942e2	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3942e5	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942e7	85 18		sta $0338	                STA DOS_DIR_PTR
.3942e9	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942ec	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942ee	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942f0	22 4e 4b 39	jsl $394b4e	                JSL NEXTCLUSTER             ; Try to find the next cluster
.3942f4	b0 03		bcs $3942f9	                BCS set_next
.3942f6	82 9b 15	brl $395894	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.3942f9	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.3942fb	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3942fe	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394300	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394303	22 43 47 39	jsl $394743	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394307	b0 03		bcs $39430c	                BCS do_success              ; If successful: set the directory cursor
.394309	82 88 15	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39430c	82 8c 15	brl $39589b	do_success      BRL IF_SUCCESS
.39430f					DOS_DIRFINDFREE
.39430f	da		phx		                PHX
.394310	5a		phy		                PHY
.394311	0b		phd		                PHD
.394312	8b		phb		                PHB
.394313	08		php		                PHP
.394314	48		pha		                PHA             ; begin setdbr macro
.394315	08		php		                PHP
.394316	e2 20		sep #$20	                SEP #$20        ; set A short
.394318	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39431a	48		pha		                PHA
.39431b	ab		plb		                PLB
.39431c	28		plp		                PLP
.39431d	68		pla		                PLA             ; end setdbr macro
.39431e	48		pha		                PHA             ; begin setdp macro
.39431f	08		php		                PHP
.394320	c2 20		rep #$20	                REP #$20        ; set A long
.394322	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394325	5b		tcd		                TCD
.394326	28		plp		                PLP
.394327	68		pla		                PLA             ; end setdp macro
.394328	22 2c 55 39	jsl $39552c	                JSL IF_DIROPEN
.39432c	b0 06		bcs $394334	                BCS start_walk
.39432e	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394331	82 28 00	brl $39435c	                BRL ret_failure
.394334	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394337					chk_entry
.394337	e2 20		sep #$20	                SEP #$20        ; set A short
.394339	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.39433b	f0 1c		beq $394359	                BEQ ret_success             ; If 0: we have a blank... return it
.39433d	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39433f	f0 18		beq $394359	                BEQ ret_success             ; Yes: return it
.394341	22 66 55 39	jsl $395566	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394345	b0 ed		bcs $394334	                BCS start_walk              ; If we got one, start walking it
.394347	22 5f 43 39	jsl $39435f	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.39434b	90 0f		bcc $39435c	                BCC ret_failure             ; If that didn't work, return the failure
.39434d	c2 20		rep #$20	                REP #$20        ; set A long
.39434f	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.394352	85 18		sta $0338	                STA DOS_DIR_PTR
.394354	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394357	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394359	82 3f 15	brl $39589b	ret_success     BRL IF_SUCCESS
.39435c	82 31 15	brl $395890	ret_failure     BRL IF_FAILURE
.39435f					DOS_DIRAPPEND
.39435f	da		phx		                PHX
.394360	8b		phb		                PHB
.394361	0b		phd		                PHD
.394362	08		php		                PHP
.394363	48		pha		                PHA             ; begin setdbr macro
.394364	08		php		                PHP
.394365	e2 20		sep #$20	                SEP #$20        ; set A short
.394367	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394369	48		pha		                PHA
.39436a	ab		plb		                PLB
.39436b	28		plp		                PLP
.39436c	68		pla		                PLA             ; end setdbr macro
.39436d	48		pha		                PHA             ; begin setdp macro
.39436e	08		php		                PHP
.39436f	c2 20		rep #$20	                REP #$20        ; set A long
.394371	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394374	5b		tcd		                TCD
.394375	28		plp		                PLP
.394376	68		pla		                PLA             ; end setdp macro
.394377	e2 20		sep #$20	                SEP #$20        ; set A short
.394379	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.39437c	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.39437e	f0 09		beq $394389	                BEQ clr_sector                  ; Yes: clear out the directory data
.394380					ret_failure
.394380	e2 20		sep #$20	                SEP #$20        ; set A short
.394382	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.394384	85 0e		sta $032e	                STA DOS_STATUS
.394386	82 3e 00	brl $3943c7	                BRL pass_failure
.394389					clr_sector
.394389	c2 20		rep #$20	                REP #$20        ; set A long
.39438b	a9 00 00	lda #$0000	                LDA #0
.39438e	a2 00 00	ldx #$0000	                LDX #0
.394391	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.394394	e8		inx		                INX
.394395	e8		inx		                INX
.394396	e0 00 02	cpx #$0200	                CPX #512
.394399	d0 f6		bne $394391	                BNE clr_loop
.39439b	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.39439e	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943a0	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943a3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943a5	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943a8	85 10		sta $0330	                STA DOS_CLUS_ID
.3943aa	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943ad	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943af	22 42 4f 39	jsl $394f42	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943b3	90 12		bcc $3943c7	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943b5	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3943b8	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943bb	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3943be	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3943c1	28		plp		ret_success     PLP
.3943c2	2b		pld		                PLD
.3943c3	ab		plb		                PLB
.3943c4	fa		plx		                PLX
.3943c5	38		sec		                SEC
.3943c6	6b		rtl		                RTL
.3943c7	28		plp		pass_failure    PLP
.3943c8	2b		pld		                PLD
.3943c9	ab		plb		                PLB
.3943ca	fa		plx		                PLX
.3943cb	18		clc		                CLC
.3943cc	6b		rtl		                RTL
.3943cd					DOS_DIRWRITE
.3943cd	da		phx		                PHX
.3943ce	5a		phy		                PHY
.3943cf	0b		phd		                PHD
.3943d0	8b		phb		                PHB
.3943d1	08		php		                PHP
.3943d2	48		pha		                PHA             ; begin setdbr macro
.3943d3	08		php		                PHP
.3943d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3943d6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943d8	48		pha		                PHA
.3943d9	ab		plb		                PLB
.3943da	28		plp		                PLP
.3943db	68		pla		                PLA             ; end setdbr macro
.3943dc	48		pha		                PHA             ; begin setdp macro
.3943dd	08		php		                PHP
.3943de	c2 20		rep #$20	                REP #$20        ; set A long
.3943e0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943e3	5b		tcd		                TCD
.3943e4	28		plp		                PLP
.3943e5	68		pla		                PLA             ; end setdp macro
.3943e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3943e8	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3943eb	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.3943ed	f0 1f		beq $39440e	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.3943ef					write_sector
.3943ef	c2 20		rep #$20	                REP #$20        ; set A long
.3943f1	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.3943f4	85 02		sta $0322	                STA BIOS_LBA
.3943f6	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943f9	85 04		sta $0324	                STA BIOS_LBA+2
.3943fb	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3943fe	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394400	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394403	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394405	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394409	b0 1f		bcs $39442a	                BCS ret_success
.39440b	82 82 14	brl $395890	ret_failure     BRL IF_FAILURE
.39440e					write_cluster
.39440e	c2 20		rep #$20	                REP #$20        ; set A long
.394410	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394413	85 10		sta $0330	                STA DOS_CLUS_ID
.394415	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394418	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39441a	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39441d	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39441f	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394422	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394424	22 80 47 39	jsl $394780	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394428	90 e1		bcc $39440b	                BCC ret_failure
.39442a	82 6e 14	brl $39589b	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.39442d					DOS_INIT
.39442d	8b		phb		                PHB
.39442e	0b		phd		                PHD
.39442f	08		php		                PHP
.394430	48		pha		                PHA             ; begin setdbr macro
.394431	08		php		                PHP
.394432	e2 20		sep #$20	                SEP #$20        ; set A short
.394434	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394436	48		pha		                PHA
.394437	ab		plb		                PLB
.394438	28		plp		                PLP
.394439	68		pla		                PLA             ; end setdbr macro
.39443a	48		pha		                PHA             ; begin setdp macro
.39443b	08		php		                PHP
.39443c	c2 20		rep #$20	                REP #$20        ; set A long
.39443e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394441	5b		tcd		                TCD
.394442	28		plp		                PLP
.394443	68		pla		                PLA             ; end setdp macro
.394444	c2 20		rep #$20	                REP #$20        ; set A long
.394446	a9 d8 47	lda #$47d8	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394449	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39444d	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.394450	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394454	e2 20		sep #$20	                SEP #$20        ; set A short
.394456	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394458	85 01		sta $0321	                STA BIOS_DEV
.39445a	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39445c	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.394460	a9 00		lda #$00	                LDA #0
.394462	a2 00 00	ldx #$0000	                LDX #0
.394465	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394468	e8		inx		                INX
.394469	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39446c	d0 f7		bne $394465	                BNE fd_zero_loop
.39446e	a9 00		lda #$00	                LDA #0
.394470	a2 00 00	ldx #$0000	                LDX #0
.394473	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.394476	e8		inx		                INX
.394477	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.39447a	d0 f7		bne $394473	                BNE sect_zero_loop
.39447c	c2 20		rep #$20	                REP #$20        ; set A long
.39447e	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.394481	85 20		sta $0340	                STA @b DOS_FD_PTR
.394483	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394486	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394488	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.39448b	85 28		sta $0348	                STA @b DOS_TEMP
.39448d	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.394490	85 2a		sta $034a	                STA @b DOS_TEMP+2
.394492	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394495	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394498	a5 28		lda $0348	                LDA @b DOS_TEMP
.39449a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39449c	c8		iny		                INY
.39449d	c8		iny		                INY
.39449e	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3944a0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3944a2	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.3944a3	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.3944a5	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3944a8	85 20		sta $0340	                STA @b DOS_FD_PTR
.3944aa	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3944ac	69 00 00	adc #$0000	                ADC #0
.3944af	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3944b1	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.3944b2	a5 28		lda $0348	                LDA @b DOS_TEMP
.3944b4	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.3944b7	85 28		sta $0348	                STA @b DOS_TEMP
.3944b9	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3944bb	69 00 00	adc #$0000	                ADC #0
.3944be	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3944c0	ca		dex		                DEX                     ; Count down the descriptors...
.3944c1	d0 d2		bne $394495	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.3944c3	28		plp		                PLP
.3944c4	2b		pld		                PLD
.3944c5	ab		plb		                PLB
.3944c6	6b		rtl		                RTL
.3944c7					DOS_MOUNT
.3944c7	8b		phb		                PHB
.3944c8	0b		phd		                PHD
.3944c9	08		php		                PHP
.3944ca	48		pha		                PHA             ; begin setdbr macro
.3944cb	08		php		                PHP
.3944cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3944ce	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944d0	48		pha		                PHA
.3944d1	ab		plb		                PLB
.3944d2	28		plp		                PLP
.3944d3	68		pla		                PLA             ; end setdbr macro
.3944d4	48		pha		                PHA             ; begin setdp macro
.3944d5	08		php		                PHP
.3944d6	c2 20		rep #$20	                REP #$20        ; set A long
.3944d8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944db	5b		tcd		                TCD
.3944dc	28		plp		                PLP
.3944dd	68		pla		                PLA             ; end setdp macro
.3944de	e2 20		sep #$20	                SEP #$20        ; set A short
.3944e0	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.3944e2	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.3944e6	d0 03		bne $3944eb	                BNE try_mount           ; No: try to moount it
.3944e8	82 69 01	brl $394654	                BRL ret_success         ; Yes: just return success
.3944eb	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.3944ef	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3944f1	f0 1f		beq $394512	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.3944f3	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.3944f5	f0 26		beq $39451d	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.3944f7	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.3944f9	f0 0b		beq $394506	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3944fb	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3944fd	85 0e		sta $032e	                STA DOS_STATUS
.3944ff	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394501	85 00		sta $0320	                STA BIOS_STATUS
.394503	82 57 01	brl $39465d	                BRL ret_failure
.394506	22 be 66 39	jsl $3966be	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.39450a	b0 03		bcs $39450f	                BCS fdc_success
.39450c	82 4e 01	brl $39465d	                BRL ret_failure
.39450f	82 42 01	brl $394654	fdc_success     BRL ret_success
.394512	22 cc 5c 39	jsl $395ccc	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394516	b0 10		bcs $394528	                BCS get_mbr             ; Continue if success
.394518	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39451a	82 40 01	brl $39465d	                BRL ret_failure
.39451d	22 b0 6a 39	jsl $396ab0	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394521	b0 05		bcs $394528	                BCS get_mbr             ; Continue if success
.394523	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394525	82 35 01	brl $39465d	                BRL ret_failure
.394528					get_mbr
.394528	c2 30		rep #$30	                REP #$30        ; set A&X long
.39452a	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39452c	64 04		stz $0324	                STZ BIOS_LBA+2
.39452e	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.394531	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394533	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394536	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394538	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.39453c	b0 07		bcs $394545	                BCS chk_signature       ; If success, check the signature bytes
.39453e	e2 20		sep #$20	                SEP #$20        ; set A short
.394540	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394542	82 18 01	brl $39465d	                BRL ret_failure
.394545					chk_signature
.394545	e2 20		sep #$20	                SEP #$20        ; set A short
.394547	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.39454a	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39454c	d0 07		bne $394555	                BNE not_mbr             ; No: signal we could find the MBR
.39454e	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.394551	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394553	f0 05		beq $39455a	                BEQ chk_part_type       ; Yes: we have an MBR
.394555	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394557	82 03 01	brl $39465d	                BRL ret_failure
.39455a	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39455d	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39455f	f0 05		beq $394566	                BEQ get_LBA             ; Is FAT32 with LBA?
.394561	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394563	82 f7 00	brl $39465d	                BRL ret_failure
.394566	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394569	c2 20		rep #$20	                REP #$20        ; set A long
.39456b	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39456e	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.394571	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394574	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.394577	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.39457a	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.39457d	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.394580	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394583	e2 20		sep #$20	                SEP #$20        ; set A short
.394585	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394587	8d 00 a0	sta $38a000	                STA DEVICE
.39458a	a9 00		lda #$00	                LDA #0
.39458c	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39458f	c2 20		rep #$20	                REP #$20        ; set A long
.394591	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394594	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394596	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394599	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39459b	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39459e	85 02		sta $0322	                STA BIOS_LBA
.3945a0	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3945a3	85 04		sta $0324	                STA BIOS_LBA+2
.3945a5	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3945a9	b0 1c		bcs $3945c7	                BCS get_first_sec       ; Got it? Start parsing it
.3945ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ad	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3945af	82 ab 00	brl $39465d	                BRL ret_failure
.3945b2					chk_bpb_sig
.3945b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b4	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3945b7	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945b9	d0 07		bne $3945c2	                BNE not_bpb             ; No: signal we could find the volume ID
.3945bb	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3945be	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945c0	f0 05		beq $3945c7	                BEQ get_first_sec       ; Yes: we have an volume ID
.3945c2	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3945c4	82 96 00	brl $39465d	                BRL ret_failure
.3945c7					get_first_sec
.3945c7	c2 20		rep #$20	                REP #$20        ; set A long
.3945c9	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3945cc	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3945cf	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.3945d2	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3945d5	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3945d8	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.3945db	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3945dc	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3945df	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.3945e2	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.3945e5	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3945e8	69 00 00	adc #$0000	                ADC #0
.3945eb	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3945ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3945f0	a2 00 00	ldx #$0000	                LDX #0
.3945f3	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.3945f7	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3945fb	e8		inx		                INX
.3945fc	e0 04 00	cpx #$0004	                CPX #4
.3945ff	d0 f2		bne $3945f3	                BNE cpy_secperfat
.394601	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394604	0a		asl a		                ASL A
.394605	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394608	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.39460b	2a		rol a		                ROL A
.39460c	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39460f	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394612	2a		rol a		                ROL A
.394613	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394616	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394619	2a		rol a		                ROL A
.39461a	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39461d	18		clc		                CLC
.39461e	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.394621	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394624	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394627	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.39462a	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.39462d	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.394630	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394633	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394636	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394639	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.39463c	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39463f	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394642	e2 20		sep #$20	                SEP #$20        ; set A short
.394644	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394647	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.39464a	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.39464c	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.39464f	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.394651	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394654					ret_success
.394654	e2 20		sep #$20	                SEP #$20        ; set A short
.394656	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394658	28		plp		                PLP
.394659	2b		pld		                PLD
.39465a	ab		plb		                PLB
.39465b	38		sec		                SEC
.39465c	6b		rtl		                RTL
.39465d					ret_failure
.39465d	e2 20		sep #$20	                SEP #$20        ; set A short
.39465f	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394661	28		plp		                PLP
.394662	2b		pld		                PLD
.394663	ab		plb		                PLB
.394664	18		clc		                CLC
.394665	6b		rtl		                RTL
.394666					DOS_TESTBOOT
.394666	8b		phb		                PHB
.394667	0b		phd		                PHD
.394668	da		phx		                PHX
.394669	08		php		                PHP
.39466a	48		pha		                PHA             ; begin setdbr macro
.39466b	08		php		                PHP
.39466c	e2 20		sep #$20	                SEP #$20        ; set A short
.39466e	a9 00		lda #$00	                LDA #0
.394670	48		pha		                PHA
.394671	ab		plb		                PLB
.394672	28		plp		                PLP
.394673	68		pla		                PLA             ; end setdbr macro
.394674	48		pha		                PHA             ; begin setdp macro
.394675	08		php		                PHP
.394676	c2 20		rep #$20	                REP #$20        ; set A long
.394678	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39467b	5b		tcd		                TCD
.39467c	28		plp		                PLP
.39467d	68		pla		                PLA             ; end setdp macro
.39467e	c2 10		rep #$10	                REP #$10        ; set X long
.394680					chk_dev
.394680	e2 20		sep #$20	                SEP #$20        ; set A short
.394682	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394684	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394686	f0 24		beq $3946ac	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394688	c2 30		rep #$30	                REP #$30        ; set A&X long
.39468a	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.39468d	85 02		sta $0322	                STA @b BIOS_LBA
.39468f	85 04		sta $0324	                STA @b BIOS_LBA+2
.394691	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394694	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394696	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394699	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.39469b	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.39469f	b0 03		bcs $3946a4	                BCS chk_mbr_brl
.3946a1	82 47 00	brl $3946eb	                BRL done                    ; If failed... just return
.3946a4					chk_mbr_brl
.3946a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3946a6	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3946aa	80 04		bra $3946b0	                BRA chk_brl
.3946ac	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3946b0	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3946b2	f0 06		beq $3946ba	                BEQ chk_magic               ; Yes: check for the magic text
.3946b4	c9 82		cmp #$82	                CMP #$82
.3946b6	f0 02		beq $3946ba	                BEQ chk_magic
.3946b8	80 31		bra $3946eb	                BRA done                    ; No: just return
.3946ba	a2 00 00	ldx #$0000	chk_magic       LDX #0
.3946bd	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3946c1	df f0 46 39	cmp $3946f0,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3946c5	d0 24		bne $3946eb	                BNE done                    ; If it's not equal, just return
.3946c7	e8		inx		                INX                         ; Otherwise, check the next one
.3946c8	e0 08 00	cpx #$0008	                CPX #8
.3946cb	d0 f0		bne $3946bd	                BNE magic_loop              ; Until we've checked all 8 bytes
.3946cd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3946cf	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3946d2	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3946d5	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3946d8	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3946db	e2 20		sep #$20	                SEP #$20        ; set A short
.3946dd	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3946df	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3946e1	f0 04		beq $3946e7	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3946e3	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3946e7	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3946eb	28		plp		done            PLP
.3946ec	2b		pld		                PLD
.3946ed	ab		plb		                PLB
.3946ee	fa		plx		                PLX
.3946ef	6b		rtl		                RTL
>3946f0	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3946f8					DOS_CALC_LBA
.3946f8	8b		phb		                PHB
.3946f9	0b		phd		                PHD
.3946fa	08		php		                PHP
.3946fb	48		pha		                PHA             ; begin setdbr macro
.3946fc	08		php		                PHP
.3946fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3946ff	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394701	48		pha		                PHA
.394702	ab		plb		                PLB
.394703	28		plp		                PLP
.394704	68		pla		                PLA             ; end setdbr macro
.394705	48		pha		                PHA             ; begin setdp macro
.394706	08		php		                PHP
.394707	c2 20		rep #$20	                REP #$20        ; set A long
.394709	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39470c	5b		tcd		                TCD
.39470d	28		plp		                PLP
.39470e	68		pla		                PLA             ; end setdp macro
.39470f	c2 20		rep #$20	                REP #$20        ; set A long
.394711	38		sec		                SEC
.394712	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394714	e9 02 00	sbc #$0002	                SBC #2
.394717	85 28		sta $0348	                STA DOS_TEMP
.394719	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39471b	e9 00 00	sbc #$0000	                SBC #0
.39471e	85 2a		sta $034a	                STA DOS_TEMP+2
.394720	e2 10		sep #$10	                SEP #$10        ; set X short
.394722	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394725	e0 01		cpx #$01	mult_loop       CPX #1
.394727	f0 07		beq $394730	                BEQ add_offset
.394729	06 28		asl $0348	                ASL DOS_TEMP
.39472b	26 28		rol $0348	                ROL DOS_TEMP
.39472d	ca		dex		                DEX
.39472e	80 f5		bra $394725	                BRA mult_loop
.394730	18		clc		add_offset      CLC
.394731	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394733	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394736	85 02		sta $0322	                STA BIOS_LBA
.394738	a5 2a		lda $034a	                LDA DOS_TEMP+2
.39473a	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.39473d	85 04		sta $0324	                STA BIOS_LBA+2
.39473f	28		plp		                PLP
.394740	2b		pld		                PLD
.394741	ab		plb		                PLB
.394742	6b		rtl		                RTL
.394743					DOS_GETCLUSTER
.394743	8b		phb		                PHB
.394744	0b		phd		                PHD
.394745	08		php		                PHP
.394746	48		pha		                PHA             ; begin setdbr macro
.394747	08		php		                PHP
.394748	e2 20		sep #$20	                SEP #$20        ; set A short
.39474a	a9 00		lda #$00	                LDA #0
.39474c	48		pha		                PHA
.39474d	ab		plb		                PLB
.39474e	28		plp		                PLP
.39474f	68		pla		                PLA             ; end setdbr macro
.394750	48		pha		                PHA             ; begin setdp macro
.394751	08		php		                PHP
.394752	c2 20		rep #$20	                REP #$20        ; set A long
.394754	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394757	5b		tcd		                TCD
.394758	28		plp		                PLP
.394759	68		pla		                PLA             ; end setdp macro
.39475a	c2 20		rep #$20	                REP #$20        ; set A long
.39475c	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39475e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394760	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394762	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394764	22 f8 46 39	jsl $3946f8	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394768	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39476c	90 09		bcc $394777	                BCC ret_failure
.39476e					ret_success
.39476e	e2 20		sep #$20	                SEP #$20        ; set A short
.394770	64 0e		stz $032e	                STZ DOS_STATUS
.394772	28		plp		                PLP
.394773	2b		pld		                PLD
.394774	ab		plb		                PLB
.394775	38		sec		                SEC
.394776	6b		rtl		                RTL
.394777					ret_failure
.394777	e2 20		sep #$20	                SEP #$20        ; set A short
.394779	85 0e		sta $032e	                STA DOS_STATUS
.39477b	28		plp		                PLP
.39477c	2b		pld		                PLD
.39477d	ab		plb		                PLB
.39477e	18		clc		                CLC
.39477f	6b		rtl		                RTL
.394780					DOS_PUTCLUSTER
.394780	8b		phb		                PHB
.394781	0b		phd		                PHD
.394782	08		php		                PHP
.394783	48		pha		                PHA             ; begin setdbr macro
.394784	08		php		                PHP
.394785	e2 20		sep #$20	                SEP #$20        ; set A short
.394787	a9 00		lda #$00	                LDA #0
.394789	48		pha		                PHA
.39478a	ab		plb		                PLB
.39478b	28		plp		                PLP
.39478c	68		pla		                PLA             ; end setdbr macro
.39478d	48		pha		                PHA             ; begin setdp macro
.39478e	08		php		                PHP
.39478f	c2 20		rep #$20	                REP #$20        ; set A long
.394791	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394794	5b		tcd		                TCD
.394795	28		plp		                PLP
.394796	68		pla		                PLA             ; end setdp macro
.394797	c2 20		rep #$20	                REP #$20        ; set A long
.394799	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39479b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39479d	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39479f	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947a1	22 f8 46 39	jsl $3946f8	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3947a5	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3947a9	90 09		bcc $3947b4	                BCC ret_failure
.3947ab					ret_success
.3947ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3947ad	64 0e		stz $032e	                STZ DOS_STATUS
.3947af	28		plp		                PLP
.3947b0	2b		pld		                PLD
.3947b1	ab		plb		                PLB
.3947b2	38		sec		                SEC
.3947b3	6b		rtl		                RTL
.3947b4					ret_failure
.3947b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3947b6	85 0e		sta $032e	                STA DOS_STATUS
.3947b8	28		plp		                PLP
.3947b9	2b		pld		                PLD
.3947ba	ab		plb		                PLB
.3947bb	18		clc		                CLC
.3947bc	6b		rtl		                RTL
>3947bd	40 46 00			DOS_FDC_NAME    .null "@F"
.3947c0					DOS_FDC_DESC
>3947c0	bd 47 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947c4	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3947c5	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3947c9	40 53 00			DOS_SDC_NAME    .null "@S"
.3947cc					DOS_SDC_DESC
>3947cc	c9 47 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947d0	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3947d1	c0 47 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3947d5	40 48 00			DOS_HDC_NAME    .null "@H"
.3947d8					DOS_HD_DESC
>3947d8	d5 47 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3947dc	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3947dd	cc 47 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3947e1					DOS_PARSE_DEV
.3947e1	8b		phb		                PHB
.3947e2	0b		phd		                PHD
.3947e3	08		php		                PHP
.3947e4	48		pha		                PHA             ; begin setdbr macro
.3947e5	08		php		                PHP
.3947e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947ea	48		pha		                PHA
.3947eb	ab		plb		                PLB
.3947ec	28		plp		                PLP
.3947ed	68		pla		                PLA             ; end setdbr macro
.3947ee	48		pha		                PHA             ; begin setdp macro
.3947ef	08		php		                PHP
.3947f0	c2 20		rep #$20	                REP #$20        ; set A long
.3947f2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947f5	5b		tcd		                TCD
.3947f6	28		plp		                PLP
.3947f7	68		pla		                PLA             ; end setdp macro
.3947f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3947fa	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3947fe	85 28		sta $0348	                STA DOS_TEMP
.394800	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394804	85 2a		sta $034a	                STA DOS_TEMP+2
.394806	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394809	85 48		sta $0368	                STA DOS_STR2_PTR
.39480b	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39480e	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394810	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394813	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394815	85 44		sta $0364	                STA DOS_STR1_PTR
.394817	c8		iny		                INY
.394818	c8		iny		                INY
.394819	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39481b	85 46		sta $0366	                STA DOS_STR1_PTR+2
.39481d	e2 20		sep #$20	                SEP #$20        ; set A short
.39481f	a0 00 00	ldy #$0000	                LDY #0
.394822	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394824	f0 24		beq $39484a	                BEQ found                   ; If it's NULL, we found a match
.394826	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394828	d0 03		bne $39482d	                BNE next_device             ; If no match, try to load the next device
.39482a	c8		iny		                INY                         ; Go to the next character
.39482b	80 f5		bra $394822	                BRA cmp_loop
.39482d					next_device
.39482d	c2 20		rep #$20	                REP #$20        ; set A long
.39482f	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394832	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394834	48		pha		                PHA
.394835	c8		iny		                INY
.394836	c8		iny		                INY
.394837	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394839	85 2a		sta $034a	                STA DOS_TEMP+2
.39483b	68		pla		                PLA
.39483c	85 28		sta $0348	                STA DOS_TEMP
.39483e	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394840	d0 ce		bne $394810	                BNE dev_loop                ; No: check this device
.394842	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394844	d0 ca		bne $394810	                BNE dev_loop
.394846	28		plp		done            PLP                         ; Otherwise, return having not found a match
.394847	2b		pld		                PLD
.394848	ab		plb		                PLB
.394849	6b		rtl		                RTL
.39484a	22 5b 48 39	jsl $39485b	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.39484e	e2 20		sep #$20	                SEP #$20        ; set A short
.394850	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394853	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394855	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394859	80 eb		bra $394846	                BRA done
.39485b					DOS_ADJUSTPATH
.39485b	da		phx		                PHX
.39485c	5a		phy		                PHY
.39485d	8b		phb		                PHB
.39485e	0b		phd		                PHD
.39485f	08		php		                PHP
.394860	48		pha		                PHA             ; begin setdbr macro
.394861	08		php		                PHP
.394862	e2 20		sep #$20	                SEP #$20        ; set A short
.394864	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394866	48		pha		                PHA
.394867	ab		plb		                PLB
.394868	28		plp		                PLP
.394869	68		pla		                PLA             ; end setdbr macro
.39486a	48		pha		                PHA             ; begin setdp macro
.39486b	08		php		                PHP
.39486c	c2 20		rep #$20	                REP #$20        ; set A long
.39486e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394871	5b		tcd		                TCD
.394872	28		plp		                PLP
.394873	68		pla		                PLA             ; end setdp macro
.394874	c2 30		rep #$30	                REP #$30        ; set A&X long
.394876	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394878	98		tya		                TYA                             ; Compute the address of the first source byte
.394879	18		clc		                CLC
.39487a	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39487d	aa		tax		                TAX
.39487e	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394881	a8		tay		                TAY
.394882	38		sec		                SEC                             ; Compute the number of bytes to copy
.394883	a9 00 01	lda #$0100	                LDA #256
.394886	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394888	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39488b	28		plp		                PLP
.39488c	2b		pld		                PLD
.39488d	ab		plb		                PLB
.39488e	7a		ply		                PLY
.39488f	fa		plx		                PLX
.394890	6b		rtl		                RTL
.394891					DOS_PARSE_PATH
.394891	8b		phb		                PHB
.394892	0b		phd		                PHD
.394893	08		php		                PHP
.394894	48		pha		                PHA             ; begin setdbr macro
.394895	08		php		                PHP
.394896	e2 20		sep #$20	                SEP #$20        ; set A short
.394898	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39489a	48		pha		                PHA
.39489b	ab		plb		                PLB
.39489c	28		plp		                PLP
.39489d	68		pla		                PLA             ; end setdbr macro
.39489e	48		pha		                PHA             ; begin setdp macro
.39489f	08		php		                PHP
.3948a0	c2 20		rep #$20	                REP #$20        ; set A long
.3948a2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948a5	5b		tcd		                TCD
.3948a6	28		plp		                PLP
.3948a7	68		pla		                PLA             ; end setdp macro
.3948a8	c2 10		rep #$10	                REP #$10        ; set X long
.3948aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ac	a2 00 00	ldx #$0000	                LDX #0
.3948af	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3948b1	f0 1b		beq $3948ce	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3948b3	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3948b5	b0 05		bcs $3948bc	                BGE check_case          ; No: check the case
.3948b7	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3948b9	82 64 00	brl $394920	                BRL ret_failure
.3948bc	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3948be	90 08		bcc $3948c8	                BLT next_char
.3948c0	c9 7b		cmp #$7b	                CMP #'z'+1
.3948c2	b0 04		bcs $3948c8	                BGE next_char
.3948c4	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3948c6	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3948c8	e8		inx		next_char       INX                     ; Move to the next character
.3948c9	e0 00 01	cpx #$0100	                CPX #$100
.3948cc	d0 e1		bne $3948af	                BNE upcase_loop
.3948ce	22 e1 47 39	jsl $3947e1	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3948d2	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3948d4	c9 3a		cmp #$3a	                CMP #':'
.3948d6	d0 07		bne $3948df	                BNE clr_name            ; If not colon, treat it as a file name
.3948d8	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3948db	22 5b 48 39	jsl $39485b	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3948df	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3948e2	a9 20		lda #$20	                LDA #' '
.3948e4	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3948e7	c8		iny		                INY
.3948e8	c0 0b 00	cpy #$000b	                CPY #11
.3948eb	d0 f7		bne $3948e4	                BNE clr_loop
.3948ed	a2 00 00	ldx #$0000	                LDX #0
.3948f0	a0 00 00	ldy #$0000	                LDY #0
.3948f3	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3948f5	f0 20		beq $394917	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3948f7	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3948f9	f0 0a		beq $394905	                BEQ cpy_ext             ; And move to the extension
.3948fb	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3948fe	e8		inx		                INX
.3948ff	c8		iny		                INY                     ; Move to the next character
.394900	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394903	d0 ee		bne $3948f3	                BNE cpy_name_loop       ; No: process this one
.394905	e8		inx		cpy_ext         INX                     ; Skip the dot
.394906	a0 08 00	ldy #$0008	                LDY #8
.394909	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39490b	f0 0a		beq $394917	                BEQ ret_success         ; If it's NULL, we've finished
.39490d	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394910	e8		inx		                INX
.394911	c8		iny		                INY                     ; Move to the next character
.394912	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394915	d0 f2		bne $394909	                BNE cpy_ext_loop        ; No: process this one
.394917					ret_success
.394917	e2 20		sep #$20	                SEP #$20        ; set A short
.394919	64 0e		stz $032e	                STZ DOS_STATUS
.39491b	28		plp		                PLP
.39491c	2b		pld		                PLD
.39491d	ab		plb		                PLB
.39491e	38		sec		                SEC
.39491f	6b		rtl		                RTL
.394920					ret_failure
.394920	e2 20		sep #$20	                SEP #$20        ; set A short
.394922	85 0e		sta $032e	                STA DOS_STATUS
.394924	28		plp		                PLP
.394925	2b		pld		                PLD
.394926	ab		plb		                PLB
.394927	18		clc		                CLC
.394928	6b		rtl		                RTL
.394929					DOS_FINDFILE
.394929	8b		phb		                PHB
.39492a	0b		phd		                PHD
.39492b	08		php		                PHP
.39492c	48		pha		                PHA             ; begin setdbr macro
.39492d	08		php		                PHP
.39492e	e2 20		sep #$20	                SEP #$20        ; set A short
.394930	a9 00		lda #$00	                LDA #0
.394932	48		pha		                PHA
.394933	ab		plb		                PLB
.394934	28		plp		                PLP
.394935	68		pla		                PLA             ; end setdbr macro
.394936	48		pha		                PHA             ; begin setdp macro
.394937	08		php		                PHP
.394938	c2 20		rep #$20	                REP #$20        ; set A long
.39493a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39493d	5b		tcd		                TCD
.39493e	28		plp		                PLP
.39493f	68		pla		                PLA             ; end setdp macro
.394940	c2 30		rep #$30	                REP #$30        ; set A&X long
.394942	22 91 48 39	jsl $394891	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394946	b0 05		bcs $39494d	                BCS mount                       ; If success: try to open the directory
.394948	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394949	2b		pld		                PLD
.39494a	ab		plb		                PLB
.39494b	18		clc		                CLC
.39494c	6b		rtl		                RTL
.39494d	22 c7 44 39	jsl $3944c7	mount           JSL DOS_MOUNT
.394951					get_directory
.394951	c2 20		rep #$20	                REP #$20        ; set A long
.394953	22 b4 41 39	jsl $3941b4	                JSL DOS_DIROPEN                 ; Get the directory
.394957	b0 07		bcs $394960	                BCS scan_entries                ; If success: start scanning the directory entries
.394959	e2 20		sep #$20	                SEP #$20        ; set A short
.39495b	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39495d	82 47 00	brl $3949a7	                BRL ret_failure
.394960	22 33 42 39	jsl $394233	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394964					scan_loop
.394964	e2 20		sep #$20	                SEP #$20        ; set A short
.394966	a0 00 00	ldy #$0000	                LDY #0
.394969	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39496b	d0 05		bne $394972	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39496d	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39496f	82 35 00	brl $3949a7	                BRL ret_failure
.394972	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394974	f0 26		beq $39499c	                BEQ next_entry                  ; Go to the next entry
.394976	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394979	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39497b	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39497d	d0 1d		bne $39499c	                BNE next_entry                  ; Yes: skip it!
.39497f	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394981	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394983	f0 17		beq $39499c	                BEQ next_entry                  ; Yes: skip it!
.394985	a2 00 00	ldx #$0000	                LDX #0
.394988	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39498b	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.39498d	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394991	d0 09		bne $39499c	                BNE next_entry                  ; If not equal: try the next entry
.394993	c8		iny		                INY                             ; Advance to the next character
.394994	e8		inx		                INX
.394995	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394998	f0 16		beq $3949b0	                BEQ match                       ; Yes: we have a match!
.39499a	80 ef		bra $39498b	                BRA scan_cmp_loop               ; No: keep checking
.39499c	22 4e 42 39	jsl $39424e	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3949a0	90 05		bcc $3949a7	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3949a2	82 bf ff	brl $394964	                BRL scan_loop                   ; If found: keep scanning
.3949a5	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3949a7					ret_failure
.3949a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3949a9	85 0e		sta $032e	                STA DOS_STATUS
.3949ab	28		plp		                PLP
.3949ac	2b		pld		                PLD
.3949ad	ab		plb		                PLB
.3949ae	18		clc		                CLC
.3949af	6b		rtl		                RTL
.3949b0					match
.3949b0	c2 20		rep #$20	                REP #$20        ; set A long
.3949b2	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3949b5	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949b7	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3949b9	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3949bc	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949be	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949c0					ret_success
.3949c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3949c2	64 0e		stz $032e	                STZ DOS_STATUS
.3949c4	28		plp		                PLP
.3949c5	2b		pld		                PLD
.3949c6	ab		plb		                PLB
.3949c7	38		sec		                SEC
.3949c8	6b		rtl		                RTL
.3949c9					DOS_READFILE
.3949c9	8b		phb		                PHB
.3949ca	0b		phd		                PHD
.3949cb	08		php		                PHP
.3949cc	48		pha		                PHA             ; begin setdbr macro
.3949cd	08		php		                PHP
.3949ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d0	a9 00		lda #$00	                LDA #0
.3949d2	48		pha		                PHA
.3949d3	ab		plb		                PLB
.3949d4	28		plp		                PLP
.3949d5	68		pla		                PLA             ; end setdbr macro
.3949d6	48		pha		                PHA             ; begin setdp macro
.3949d7	08		php		                PHP
.3949d8	c2 20		rep #$20	                REP #$20        ; set A long
.3949da	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949dd	5b		tcd		                TCD
.3949de	28		plp		                PLP
.3949df	68		pla		                PLA             ; end setdp macro
.3949e0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949e2	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3949e4	48		pha		                PHA
.3949e5	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3949e7	48		pha		                PHA
.3949e8	22 29 49 39	jsl $394929	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3949ec	68		pla		                PLA
.3949ed	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3949ef	68		pla		                PLA
.3949f0	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3949f2	90 0f		bcc $394a03	                BCC pass_failure                    ; If found: try to load the cluster
.3949f4	22 43 47 39	jsl $394743	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.3949f8	90 09		bcc $394a03	                BCC pass_failure                    ; If there's an error... pass it up the chain
.3949fa					ret_success
.3949fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3949fc	64 0e		stz $032e	                STZ DOS_STATUS
.3949fe	28		plp		                PLP
.3949ff	2b		pld		                PLD
.394a00	ab		plb		                PLB
.394a01	38		sec		                SEC
.394a02	6b		rtl		                RTL
.394a03	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394a04	2b		pld		                PLD
.394a05	ab		plb		                PLB
.394a06	18		clc		                CLC
.394a07	6b		rtl		                RTL
.394a08					ENTRYFORCLUS12
.394a08	8b		phb		                PHB
.394a09	0b		phd		                PHD
.394a0a	08		php		                PHP
.394a0b	48		pha		                PHA             ; begin setdbr macro
.394a0c	08		php		                PHP
.394a0d	e2 20		sep #$20	                SEP #$20        ; set A short
.394a0f	a9 00		lda #$00	                LDA #0
.394a11	48		pha		                PHA
.394a12	ab		plb		                PLB
.394a13	28		plp		                PLP
.394a14	68		pla		                PLA             ; end setdbr macro
.394a15	48		pha		                PHA             ; begin setdp macro
.394a16	08		php		                PHP
.394a17	c2 20		rep #$20	                REP #$20        ; set A long
.394a19	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a1c	5b		tcd		                TCD
.394a1d	28		plp		                PLP
.394a1e	68		pla		                PLA             ; end setdp macro
.394a1f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a21	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394a23	0a		asl a		                ASL A
.394a24	85 28		sta $0348	                STA DOS_TEMP
.394a26	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a28	2a		rol a		                ROL A
.394a29	85 2a		sta $034a	                STA DOS_TEMP+2
.394a2b	18		clc		                CLC
.394a2c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a2e	65 28		adc $0348	                ADC DOS_TEMP
.394a30	85 28		sta $0348	                STA DOS_TEMP
.394a32	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a34	65 2a		adc $034a	                ADC DOS_TEMP+2
.394a36	85 2a		sta $034a	                STA DOS_TEMP+2
.394a38	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394a3a	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394a3c	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394a3e	29 ff 03	and #$03ff	                AND #$003FF
.394a41	aa		tax		                TAX
.394a42	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a44	66 28		ror $0348	                ROR DOS_TEMP
.394a46	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a48	66 28		ror $0348	                ROR DOS_TEMP
.394a4a	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a4c	66 28		ror $0348	                ROR DOS_TEMP
.394a4e	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a50	66 28		ror $0348	                ROR DOS_TEMP
.394a52	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a54	66 28		ror $0348	                ROR DOS_TEMP
.394a56	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a58	66 28		ror $0348	                ROR DOS_TEMP
.394a5a	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a5c	66 28		ror $0348	                ROR DOS_TEMP
.394a5e	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a60	66 28		ror $0348	                ROR DOS_TEMP
.394a62	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394a64	66 28		ror $0348	                ROR DOS_TEMP
.394a66	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394a67	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394a6b	65 28		adc $0348	                ADC DOS_TEMP
.394a6d	85 24		sta $0344	                STA DOS_FAT_LBA
.394a6f	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394a73	65 2a		adc $034a	                ADC DOS_TEMP+2
.394a75	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a77	28		plp		                PLP
.394a78	2b		pld		                PLD
.394a79	ab		plb		                PLB
.394a7a	6b		rtl		                RTL
.394a7b					FATFORCLUSTER12
.394a7b	8b		phb		                PHB
.394a7c	0b		phd		                PHD
.394a7d	08		php		                PHP
.394a7e	48		pha		                PHA             ; begin setdbr macro
.394a7f	08		php		                PHP
.394a80	e2 20		sep #$20	                SEP #$20        ; set A short
.394a82	a9 00		lda #$00	                LDA #0
.394a84	48		pha		                PHA
.394a85	ab		plb		                PLB
.394a86	28		plp		                PLP
.394a87	68		pla		                PLA             ; end setdbr macro
.394a88	48		pha		                PHA             ; begin setdp macro
.394a89	08		php		                PHP
.394a8a	c2 20		rep #$20	                REP #$20        ; set A long
.394a8c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a8f	5b		tcd		                TCD
.394a90	28		plp		                PLP
.394a91	68		pla		                PLA             ; end setdp macro
.394a92	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a94	a2 00 00	ldx #$0000	                LDX #0
.394a97	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394a9a	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394a9e	e8		inx		                INX
.394a9f	e8		inx		                INX
.394aa0	e0 00 04	cpx #$0400	                CPX #1024
.394aa3	d0 f5		bne $394a9a	                BNE clr_loop
.394aa5	22 08 4a 39	jsl $394a08	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394aa9	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394aab	85 02		sta $0322	                STA BIOS_LBA
.394aad	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394aaf	85 04		sta $0324	                STA BIOS_LBA+2
.394ab1	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394ab4	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ab6	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394ab9	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394abb	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394abf	90 17		bcc $394ad8	                BCC error
.394ac1	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394ac3	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394ac6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ac8	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394acb	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394acd	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394ad1	90 05		bcc $394ad8	                BCC error
.394ad3	28		plp		                PLP
.394ad4	2b		pld		                PLD
.394ad5	ab		plb		                PLB
.394ad6	38		sec		                SEC
.394ad7	6b		rtl		                RTL
.394ad8					error
.394ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.394ada	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394adc	85 0e		sta $032e	                STA DOS_STATUS
.394ade	28		plp		                PLP
.394adf	2b		pld		                PLD
.394ae0	ab		plb		                PLB
.394ae1	18		clc		                CLC
.394ae2	6b		rtl		                RTL
.394ae3					FATFORCLUSTER32
.394ae3	8b		phb		                PHB
.394ae4	0b		phd		                PHD
.394ae5	48		pha		                PHA             ; begin setdbr macro
.394ae6	08		php		                PHP
.394ae7	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae9	a9 00		lda #$00	                LDA #0
.394aeb	48		pha		                PHA
.394aec	ab		plb		                PLB
.394aed	28		plp		                PLP
.394aee	68		pla		                PLA             ; end setdbr macro
.394aef	48		pha		                PHA             ; begin setdp macro
.394af0	08		php		                PHP
.394af1	c2 20		rep #$20	                REP #$20        ; set A long
.394af3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394af6	5b		tcd		                TCD
.394af7	28		plp		                PLP
.394af8	68		pla		                PLA             ; end setdp macro
.394af9	c2 30		rep #$30	                REP #$30        ; set A&X long
.394afb	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394afd	85 24		sta $0344	                STA DOS_FAT_LBA
.394aff	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b01	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b03	a2 07 00	ldx #$0007	                LDX #7
.394b06	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394b08	66 24		ror $0344	                ROR DOS_FAT_LBA
.394b0a	ca		dex		                DEX
.394b0b	d0 f9		bne $394b06	                BNE div_loop
.394b0d	18		clc		                CLC
.394b0e	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394b10	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394b14	85 24		sta $0344	                STA DOS_FAT_LBA
.394b16	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b18	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394b1c	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b1e	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394b20	85 02		sta $0322	                STA BIOS_LBA
.394b22	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b24	85 04		sta $0324	                STA BIOS_LBA+2
.394b26	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394b29	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b2b	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b2e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b30	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394b34	b0 06		bcs $394b3c	                BCS find_entry
.394b36	e2 20		sep #$20	                SEP #$20        ; set A short
.394b38	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b3a	80 0e		bra $394b4a	                BRA ret_failure
.394b3c					find_entry
.394b3c	c2 20		rep #$20	                REP #$20        ; set A long
.394b3e	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b40	0a		asl a		                ASL A
.394b41	0a		asl a		                ASL A                           ; * 4
.394b42	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394b45	aa		tax		                TAX                             ; X should be the offset within the sector
.394b46	2b		pld		ret_success     PLD
.394b47	ab		plb		                PLB
.394b48	38		sec		                SEC                             ; return success
.394b49	6b		rtl		                RTL
.394b4a	2b		pld		ret_failure     PLD
.394b4b	ab		plb		                PLB
.394b4c	18		clc		                CLC                             ; Return failure
.394b4d	6b		rtl		                RTL
.394b4e					NEXTCLUSTER
.394b4e	08		php		                PHP
.394b4f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b51	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b55	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b57	d0 08		bne $394b61	                BNE fat32                       ; No: assume it's FAT32
.394b59	22 6f 4b 39	jsl $394b6f	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394b5d	90 0d		bcc $394b6c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b5f	80 06		bra $394b67	                BRA ret_success
.394b61	22 d7 4b 39	jsl $394bd7	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394b65	90 05		bcc $394b6c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b67	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b69	28		plp		                PLP
.394b6a	38		sec		                SEC
.394b6b	6b		rtl		                RTL
.394b6c	28		plp		pass_failure    PLP
.394b6d	18		clc		                CLC
.394b6e	6b		rtl		                RTL
.394b6f					NEXTCLUSTER12
.394b6f	8b		phb		                    PHB
.394b70	0b		phd		                    PHD
.394b71	08		php		                    PHP
.394b72	48		pha		                PHA             ; begin setdbr macro
.394b73	08		php		                PHP
.394b74	e2 20		sep #$20	                SEP #$20        ; set A short
.394b76	a9 00		lda #$00	                LDA #0
.394b78	48		pha		                PHA
.394b79	ab		plb		                PLB
.394b7a	28		plp		                PLP
.394b7b	68		pla		                PLA             ; end setdbr macro
.394b7c	48		pha		                PHA             ; begin setdp macro
.394b7d	08		php		                PHP
.394b7e	c2 20		rep #$20	                REP #$20        ; set A long
.394b80	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b83	5b		tcd		                TCD
.394b84	28		plp		                PLP
.394b85	68		pla		                PLA             ; end setdp macro
.394b86	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b88	22 7b 4a 39	jsl $394a7b	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394b8c	b0 03		bcs $394b91	                    BCS chk_clus_id
.394b8e	82 41 00	brl $394bd2	                    BRL pass_failure
.394b91	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394b93	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394b96	d0 0d		bne $394ba5	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394b98					is_even
.394b98	c2 20		rep #$20	                REP #$20        ; set A long
.394b9a	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394b9e	29 ff 0f	and #$0fff	                    AND #$0FFF
.394ba1	85 28		sta $0348	                    STA DOS_TEMP
.394ba3	80 0c		bra $394bb1	                    BRA check_id
.394ba5					is_odd
.394ba5	c2 20		rep #$20	                REP #$20        ; set A long
.394ba7	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394bab	4a		lsr a		                    LSR A
.394bac	4a		lsr a		                    LSR A
.394bad	4a		lsr a		                    LSR A
.394bae	4a		lsr a		                    LSR A
.394baf	85 28		sta $0348	                    STA DOS_TEMP
.394bb1					check_id
.394bb1	c2 20		rep #$20	                REP #$20        ; set A long
.394bb3	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394bb5	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394bb8	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394bbb	f0 0f		beq $394bcc	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394bbd	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394bbf	85 10		sta $0330	                    STA DOS_CLUS_ID
.394bc1	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394bc3					ret_success
.394bc3	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc5	64 0e		stz $032e	                    STZ DOS_STATUS
.394bc7	28		plp		                    PLP
.394bc8	2b		pld		                    PLD
.394bc9	ab		plb		                    PLB
.394bca	38		sec		                    SEC
.394bcb	6b		rtl		                    RTL
.394bcc					no_more
.394bcc	e2 20		sep #$20	                SEP #$20        ; set A short
.394bce	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394bd0	85 0e		sta $032e	                    STA DOS_STATUS
.394bd2	28		plp		pass_failure        PLP
.394bd3	2b		pld		                    PLD
.394bd4	ab		plb		                    PLB
.394bd5	18		clc		                    CLC
.394bd6	6b		rtl		                    RTL
.394bd7					NEXTCLUSTER32
.394bd7	8b		phb		                PHB
.394bd8	0b		phd		                PHD
.394bd9	08		php		                PHP
.394bda	48		pha		                PHA             ; begin setdbr macro
.394bdb	08		php		                PHP
.394bdc	e2 20		sep #$20	                SEP #$20        ; set A short
.394bde	a9 00		lda #$00	                LDA #0
.394be0	48		pha		                PHA
.394be1	ab		plb		                PLB
.394be2	28		plp		                PLP
.394be3	68		pla		                PLA             ; end setdbr macro
.394be4	48		pha		                PHA             ; begin setdp macro
.394be5	08		php		                PHP
.394be6	c2 20		rep #$20	                REP #$20        ; set A long
.394be8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394beb	5b		tcd		                TCD
.394bec	28		plp		                PLP
.394bed	68		pla		                PLA             ; end setdp macro
.394bee	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bf0	22 e3 4a 39	jsl $394ae3	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394bf4	90 33		bcc $394c29	                BCC ret_failure                 ; If it did not work, return the error
.394bf6	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394bfa	85 28		sta $0348	                STA DOS_TEMP
.394bfc	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394c00	85 2a		sta $034a	                STA DOS_TEMP+2
.394c02	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394c04	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394c07	d0 0d		bne $394c16	                BNE found_next
.394c09	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c0b	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394c0e	d0 06		bne $394c16	                BNE found_next                  ; No: return this cluster as the next
.394c10	e2 20		sep #$20	                SEP #$20        ; set A short
.394c12	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394c14	80 13		bra $394c29	                BRA ret_failure
.394c16					found_next
.394c16	c2 20		rep #$20	                REP #$20        ; set A long
.394c18	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394c1a	85 10		sta $0330	                STA DOS_CLUS_ID
.394c1c	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c1e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c20					ret_success
.394c20	e2 20		sep #$20	                SEP #$20        ; set A short
.394c22	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394c24	28		plp		                PLP
.394c25	2b		pld		                PLD
.394c26	ab		plb		                PLB
.394c27	38		sec		                SEC
.394c28	6b		rtl		                RTL
.394c29					ret_failure
.394c29	e2 20		sep #$20	                SEP #$20        ; set A short
.394c2b	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394c2d	28		plp		                PLP
.394c2e	2b		pld		                PLD
.394c2f	ab		plb		                PLB
.394c30	18		clc		                CLC
.394c31	6b		rtl		                RTL
.394c32					DOS_READNEXT
.394c32	08		php		                PHP
.394c33	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c35	22 4e 4b 39	jsl $394b4e	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394c39	90 09		bcc $394c44	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394c3b	22 43 47 39	jsl $394743	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394c3f	90 03		bcc $394c44	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394c41	28		plp		ret_success     PLP
.394c42	38		sec		                SEC
.394c43	6b		rtl		                RTL
.394c44	28		plp		pass_failure    PLP
.394c45	18		clc		                CLC
.394c46	6b		rtl		                RTL
.394c47					DOS_FREECLUS
.394c47	08		php		                PHP
.394c48	48		pha		                PHA             ; begin setdp macro
.394c49	08		php		                PHP
.394c4a	c2 20		rep #$20	                REP #$20        ; set A long
.394c4c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c4f	5b		tcd		                TCD
.394c50	28		plp		                PLP
.394c51	68		pla		                PLA             ; end setdp macro
.394c52	e2 20		sep #$20	                SEP #$20        ; set A short
.394c54	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c58	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c5a	d0 08		bne $394c64	                BNE fat32                       ; No: assume it's FAT32
.394c5c	22 d8 4c 39	jsl $394cd8	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394c60	90 0d		bcc $394c6f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c62	80 06		bra $394c6a	                BRA ret_success
.394c64	22 b0 4d 39	jsl $394db0	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394c68	90 05		bcc $394c6f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c6a	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c6c	28		plp		                PLP
.394c6d	38		sec		                SEC
.394c6e	6b		rtl		                RTL
.394c6f	28		plp		pass_failure    PLP
.394c70	18		clc		                CLC
.394c71	6b		rtl		                RTL
.394c72					FDC_READ2FAT12
.394c72	8b		phb		                    PHB
.394c73	0b		phd		                    PHD
.394c74	08		php		                    PHP
.394c75	48		pha		                PHA             ; begin setdbr macro
.394c76	08		php		                PHP
.394c77	e2 20		sep #$20	                SEP #$20        ; set A short
.394c79	a9 00		lda #$00	                LDA #0
.394c7b	48		pha		                PHA
.394c7c	ab		plb		                PLB
.394c7d	28		plp		                PLP
.394c7e	68		pla		                PLA             ; end setdbr macro
.394c7f	48		pha		                PHA             ; begin setdp macro
.394c80	08		php		                PHP
.394c81	c2 20		rep #$20	                REP #$20        ; set A long
.394c83	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c86	5b		tcd		                TCD
.394c87	28		plp		                PLP
.394c88	68		pla		                PLA             ; end setdp macro
.394c89	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c8b	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394c8e	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394c90	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394c93	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394c95	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394c97	85 02		sta $0322	                    STA BIOS_LBA
.394c99	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394c9b	85 04		sta $0324	                    STA BIOS_LBA+2
.394c9d	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394ca1	b0 07		bcs $394caa	                    BCS inc_sect2                   ; If success: start getting the second sector
.394ca3	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca5	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394ca7	82 1c 00	brl $394cc6	                    BRL ret_failure
.394caa					inc_sect2
.394caa	c2 20		rep #$20	                REP #$20        ; set A long
.394cac	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394cae	d0 02		bne $394cb2	                    BNE inc_buff_ptr
.394cb0	e6 04		inc $0324	                    INC BIOS_LBA+2
.394cb2	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394cb5	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394cb7	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394cba	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394cbc	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394cc0	b0 0d		bcs $394ccf	                    BCS ret_success                 ; If success, return success
.394cc2	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc4	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394cc6					ret_failure
.394cc6	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc8	85 00		sta $0320	                    STA BIOS_STATUS
.394cca	28		plp		                    PLP
.394ccb	2b		pld		                    PLD
.394ccc	ab		plb		                    PLB
.394ccd	18		clc		                    CLC
.394cce	6b		rtl		                    RTL
.394ccf					ret_success
.394ccf	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd1	64 00		stz $0320	                    STZ BIOS_STATUS
.394cd3	28		plp		                    PLP
.394cd4	2b		pld		                    PLD
.394cd5	ab		plb		                    PLB
.394cd6	38		sec		                    SEC
.394cd7	6b		rtl		                    RTL
.394cd8					DOS_FREECLUS12
.394cd8	da		phx		                PHX
.394cd9	8b		phb		                PHB
.394cda	0b		phd		                PHD
.394cdb	08		php		                PHP
.394cdc	48		pha		                PHA             ; begin setdbr macro
.394cdd	08		php		                PHP
.394cde	e2 20		sep #$20	                SEP #$20        ; set A short
.394ce0	a9 00		lda #$00	                LDA #0
.394ce2	48		pha		                PHA
.394ce3	ab		plb		                PLB
.394ce4	28		plp		                PLP
.394ce5	68		pla		                PLA             ; end setdbr macro
.394ce6	48		pha		                PHA             ; begin setdp macro
.394ce7	08		php		                PHP
.394ce8	c2 20		rep #$20	                REP #$20        ; set A long
.394cea	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ced	5b		tcd		                TCD
.394cee	28		plp		                PLP
.394cef	68		pla		                PLA             ; end setdp macro
.394cf0	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cf2	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394cf5	85 10		sta $0330	                STA DOS_CLUS_ID
.394cf7	a9 00 00	lda #$0000	                LDA #0
.394cfa	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cfc	22 08 4a 39	jsl $394a08	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394d00	22 72 4c 39	jsl $394c72	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394d04	b0 07		bcs $394d0d	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394d06	e2 20		sep #$20	                SEP #$20        ; set A short
.394d08	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d0a	82 99 00	brl $394da6	                BRL ret_failure
.394d0d					start_of_fat
.394d0d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d0f	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d11	89 01 00	bit #$0001	                BIT #1
.394d14	d0 09		bne $394d1f	                BNE is_odd
.394d16	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394d1a	29 ff 0f	and #$0fff	                AND #$0FFF
.394d1d	80 08		bra $394d27	                BRA chk_available
.394d1f	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394d23	4a		lsr a		                LSR A
.394d24	4a		lsr a		                LSR A
.394d25	4a		lsr a		                LSR A
.394d26	4a		lsr a		                LSR A
.394d27					chk_available
.394d27	85 28		sta $0348	                STA DOS_TEMP
.394d29	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394d2c	f0 03		beq $394d31	                BEQ chk_found
.394d2e	82 39 00	brl $394d6a	                BRL next_cluster                ; No: advance to the next cluster
.394d31	8a		txa		chk_found       TXA
.394d32	85 2a		sta $034a	                STA DOS_TEMP+2
.394d34	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d36	89 01 00	bit #$0001	                BIT #1
.394d39	d0 0d		bne $394d48	                BNE is_odd2
.394d3b					is_even2
.394d3b	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394d3f	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394d42	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394d46	80 0b		bra $394d53	                BRA write_fat
.394d48					is_odd2
.394d48	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394d4c	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394d4f	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394d53	22 6d 4e 39	jsl $394e6d	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394d57	b0 07		bcs $394d60	                BCS ret_success                 ; If success: return success
.394d59	e2 20		sep #$20	                SEP #$20        ; set A short
.394d5b	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394d5d	82 46 00	brl $394da6	                BRL ret_failure
.394d60					ret_success
.394d60	e2 20		sep #$20	                SEP #$20        ; set A short
.394d62	64 0e		stz $032e	                STZ DOS_STATUS
.394d64	28		plp		                PLP
.394d65	2b		pld		                PLD
.394d66	ab		plb		                PLB
.394d67	fa		plx		                PLX
.394d68	38		sec		                SEC
.394d69	6b		rtl		                RTL
.394d6a					next_cluster
.394d6a	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394d6c	d0 02		bne $394d70	                BNE calc_entry
.394d6e	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d70	22 08 4a 39	jsl $394a08	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394d74	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394d77	f0 03		beq $394d7c	                BEQ chk_end_of_fat
.394d79	82 93 ff	brl $394d0f	                BRL chk_cluster                 ; No: go back and check it too
.394d7c					chk_end_of_fat
.394d7c	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394d7e	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394d82	d0 0f		bne $394d93	                BNE next_2
.394d84	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394d86	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394d8a	d0 07		bne $394d93	                BNE next_2                      ; No: get the next to sectors
.394d8c	e2 20		sep #$20	                SEP #$20        ; set A short
.394d8e	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394d90	82 13 00	brl $394da6	                BRL ret_failure
.394d93					next_2
.394d93	22 72 4c 39	jsl $394c72	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394d97	90 06		bcc $394d9f	                BCC fat_fail                    ; If failed: return error
.394d99	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394d9c	82 70 ff	brl $394d0f	                BRL chk_cluster                 ; And start checking from there
.394d9f					fat_fail
.394d9f	e2 20		sep #$20	                SEP #$20        ; set A short
.394da1	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394da3	82 00 00	brl $394da6	                BRL ret_failure
.394da6					ret_failure
.394da6	e2 20		sep #$20	                SEP #$20        ; set A short
.394da8	85 0e		sta $032e	                STA DOS_STATUS
.394daa	28		plp		                PLP
.394dab	2b		pld		                PLD
.394dac	ab		plb		                PLB
.394dad	fa		plx		                PLX
.394dae	18		clc		                CLC
.394daf	6b		rtl		                RTL
.394db0					DOS_FREECLUS32
.394db0	8b		phb		                PHB
.394db1	0b		phd		                PHD
.394db2	08		php		                PHP
.394db3	48		pha		                PHA             ; begin setdbr macro
.394db4	08		php		                PHP
.394db5	e2 20		sep #$20	                SEP #$20        ; set A short
.394db7	a9 00		lda #$00	                LDA #0
.394db9	48		pha		                PHA
.394dba	ab		plb		                PLB
.394dbb	28		plp		                PLP
.394dbc	68		pla		                PLA             ; end setdbr macro
.394dbd	48		pha		                PHA             ; begin setdp macro
.394dbe	08		php		                PHP
.394dbf	c2 20		rep #$20	                REP #$20        ; set A long
.394dc1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dc4	5b		tcd		                TCD
.394dc5	28		plp		                PLP
.394dc6	68		pla		                PLA             ; end setdp macro
.394dc7	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dc9	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394dcc	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394dce	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394dd1	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394dd3	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394dd7	85 02		sta $0322	                STA BIOS_LBA
.394dd9	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394ddd	85 04		sta $0324	                STA BIOS_LBA+2
.394ddf	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394de3	b0 07		bcs $394dec	                BCS initial_entry               ; If OK: set the initial entry to check
.394de5	e2 20		sep #$20	                SEP #$20        ; set A short
.394de7	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394de9	82 5e 00	brl $394e4a	                BRL ret_failure
.394dec					initial_entry
.394dec	c2 20		rep #$20	                REP #$20        ; set A long
.394dee	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394df1	85 10		sta $0330	                STA DOS_CLUS_ID
.394df3	a9 00 00	lda #$0000	                LDA #0
.394df6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394df8	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394dfb	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394dff	d0 06		bne $394e07	                BNE next_entry                  ; No: move to the next entry
.394e01	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394e05	f0 29		beq $394e30	                BEQ found_free                  ; Yes: go to allocate and return it
.394e07	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394e09	d0 02		bne $394e0d	                BNE inc_ptr
.394e0b	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e0d	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394e0e	e8		inx		                INX
.394e0f	e8		inx		                INX
.394e10	e8		inx		                INX
.394e11	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394e14	90 e5		bcc $394dfb	                BLT chk_entry                   ; No: check this entry
.394e16	18		clc		                CLC                             ; Point to the next sector in the FAT
.394e17	a5 02		lda $0322	                LDA BIOS_LBA
.394e19	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394e1c	85 02		sta $0322	                STA BIOS_LBA
.394e1e	a5 04		lda $0324	                LDA BIOS_LBA+2
.394e20	69 00 00	adc #$0000	                ADC #0
.394e23	85 04		sta $0324	                STA BIOS_LBA+2
.394e25	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394e29	b0 00		bcs $394e2b	                BCS set_ptr                     ; If OK: set the pointer and check it
.394e2b	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394e2e	80 cb		bra $394dfb	                BRA chk_entry                   ; Check this entry
.394e30					found_free
.394e30	c2 20		rep #$20	                REP #$20        ; set A long
.394e32	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394e35	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394e39	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394e3c	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394e40	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e44	b0 0d		bcs $394e53	                BCS ret_success                 ; If OK: return success
.394e46	e2 20		sep #$20	                SEP #$20        ; set A short
.394e48	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394e4a					ret_failure
.394e4a	e2 20		sep #$20	                SEP #$20        ; set A short
.394e4c	85 0e		sta $032e	                STA DOS_STATUS
.394e4e	28		plp		                PLP
.394e4f	2b		pld		                PLD
.394e50	ab		plb		                PLB
.394e51	18		clc		                CLC
.394e52	6b		rtl		                RTL
.394e53					ret_success
.394e53	e2 20		sep #$20	                SEP #$20        ; set A short
.394e55	64 0e		stz $032e	                STZ DOS_STATUS
.394e57	28		plp		                PLP
.394e58	2b		pld		                PLD
.394e59	ab		plb		                PLB
.394e5a	38		sec		                SEC
.394e5b	6b		rtl		                RTL
.394e5c					DELCLUSTER
.394e5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5e	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394e62	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394e64	d0 04		bne $394e6a	                BNE fat32                       ; No: assume it's FAT32
.394e66	5c b4 4e 39	jmp $394eb4	fat12           JML DELCLUSTER12
.394e6a	4c 02 4f	jmp $394f02	fat32           JMP DELCLUSTER32
.394e6d					WRITEFAT12
.394e6d	8b		phb		                PHB
.394e6e	0b		phd		                PHD
.394e6f	48		pha		                PHA             ; begin setdbr macro
.394e70	08		php		                PHP
.394e71	e2 20		sep #$20	                SEP #$20        ; set A short
.394e73	a9 00		lda #$00	                LDA #0
.394e75	48		pha		                PHA
.394e76	ab		plb		                PLB
.394e77	28		plp		                PLP
.394e78	68		pla		                PLA             ; end setdbr macro
.394e79	48		pha		                PHA             ; begin setdp macro
.394e7a	08		php		                PHP
.394e7b	c2 20		rep #$20	                REP #$20        ; set A long
.394e7d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e80	5b		tcd		                TCD
.394e81	28		plp		                PLP
.394e82	68		pla		                PLA             ; end setdp macro
.394e83	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e85	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394e88	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e8a	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394e8d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e8f	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394e91	85 02		sta $0322	                STA BIOS_LBA
.394e93	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394e95	85 04		sta $0324	                STA BIOS_LBA+2
.394e97	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394e9b	90 14		bcc $394eb1	                BCC done
.394e9d	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ea0	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ea2	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ea5	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ea7	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394ea9	d0 02		bne $394ead	                BNE put_second
.394eab	e6 04		inc $0324	                INC BIOS_LBA+2
.394ead	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394eb1	2b		pld		done            PLD
.394eb2	ab		plb		                PLB
.394eb3	6b		rtl		                RTL
.394eb4					DELCLUSTER12
.394eb4	8b		phb		                PHB
.394eb5	0b		phd		                PHD
.394eb6	08		php		                PHP
.394eb7	48		pha		                PHA             ; begin setdbr macro
.394eb8	08		php		                PHP
.394eb9	e2 20		sep #$20	                SEP #$20        ; set A short
.394ebb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ebd	48		pha		                PHA
.394ebe	ab		plb		                PLB
.394ebf	28		plp		                PLP
.394ec0	68		pla		                PLA             ; end setdbr macro
.394ec1	48		pha		                PHA             ; begin setdp macro
.394ec2	08		php		                PHP
.394ec3	c2 20		rep #$20	                REP #$20        ; set A long
.394ec5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ec8	5b		tcd		                TCD
.394ec9	28		plp		                PLP
.394eca	68		pla		                PLA             ; end setdp macro
.394ecb	c2 30		rep #$30	                REP #$30        ; set A&X long
.394ecd	22 7b 4a 39	jsl $394a7b	                JSL FATFORCLUSTER12
.394ed1	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394ed2	89 01 00	bit #$0001	                BIT #1
.394ed5	d0 08		bne $394edf	                BNE is_odd
.394ed7	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394eda	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394edd	80 06		bra $394ee5	                BRA save_update
.394edf	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394ee2	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394ee5	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394ee8	22 6d 4e 39	jsl $394e6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394eec	b0 0b		bcs $394ef9	                BCS ret_success
.394eee					ret_failure
.394eee	e2 20		sep #$20	                SEP #$20        ; set A short
.394ef0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ef2	85 0e		sta $032e	                STA DOS_STATUS
.394ef4	28		plp		                PLP
.394ef5	2b		pld		                PLD
.394ef6	ab		plb		                PLB
.394ef7	18		clc		                CLC
.394ef8	6b		rtl		                RTL
.394ef9					ret_success
.394ef9	e2 20		sep #$20	                SEP #$20        ; set A short
.394efb	64 0e		stz $032e	                STZ DOS_STATUS
.394efd	28		plp		                PLP
.394efe	2b		pld		                PLD
.394eff	ab		plb		                PLB
.394f00	38		sec		                SEC
.394f01	6b		rtl		                RTL
.394f02					DELCLUSTER32
.394f02	8b		phb		                PHB
.394f03	0b		phd		                PHD
.394f04	08		php		                PHP
.394f05	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f07	48		pha		                PHA             ; begin setdbr macro
.394f08	08		php		                PHP
.394f09	e2 20		sep #$20	                SEP #$20        ; set A short
.394f0b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f0d	48		pha		                PHA
.394f0e	ab		plb		                PLB
.394f0f	28		plp		                PLP
.394f10	68		pla		                PLA             ; end setdbr macro
.394f11	48		pha		                PHA             ; begin setdp macro
.394f12	08		php		                PHP
.394f13	c2 20		rep #$20	                REP #$20        ; set A long
.394f15	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f18	5b		tcd		                TCD
.394f19	28		plp		                PLP
.394f1a	68		pla		                PLA             ; end setdp macro
.394f1b	22 e3 4a 39	jsl $394ae3	                JSL FATFORCLUSTER32
.394f1f	a9 00 00	lda #$0000	                LDA #0
.394f22	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394f25	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394f28	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f2c	b0 0b		bcs $394f39	                BCS ret_success
.394f2e					ret_failure
.394f2e	e2 20		sep #$20	                SEP #$20        ; set A short
.394f30	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394f32	85 0e		sta $032e	                STA DOS_STATUS
.394f34	28		plp		                PLP
.394f35	2b		pld		                PLD
.394f36	ab		plb		                PLB
.394f37	18		clc		                CLC
.394f38	6b		rtl		                RTL
.394f39					ret_success
.394f39	e2 20		sep #$20	                SEP #$20        ; set A short
.394f3b	64 0e		stz $032e	                STZ DOS_STATUS
.394f3d	28		plp		                PLP
.394f3e	2b		pld		                PLD
.394f3f	ab		plb		                PLB
.394f40	38		sec		                SEC
.394f41	6b		rtl		                RTL
.394f42					DOS_APPENDCLUS
.394f42	8b		phb		                PHB
.394f43	0b		phd		                PHD
.394f44	08		php		                PHP
.394f45	48		pha		                PHA             ; begin setdbr macro
.394f46	08		php		                PHP
.394f47	e2 20		sep #$20	                SEP #$20        ; set A short
.394f49	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f4b	48		pha		                PHA
.394f4c	ab		plb		                PLB
.394f4d	28		plp		                PLP
.394f4e	68		pla		                PLA             ; end setdbr macro
.394f4f	48		pha		                PHA             ; begin setdp macro
.394f50	08		php		                PHP
.394f51	c2 20		rep #$20	                REP #$20        ; set A long
.394f53	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f56	5b		tcd		                TCD
.394f57	28		plp		                PLP
.394f58	68		pla		                PLA             ; end setdp macro
.394f59	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f5b	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394f5d	48		pha		                PHA
.394f5e	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394f60	48		pha		                PHA
.394f61	22 47 4c 39	jsl $394c47	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394f65	b0 09		bcs $394f70	                BCS save_cluster                ; If we got a cluster, write the data to it
.394f67	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394f68	85 10		sta $0330	                STA DOS_CLUS_ID
.394f6a	68		pla		                PLA
.394f6b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f6d	82 7d 00	brl $394fed	                BRL pass_failure                ; Pass the failure back up the chain
.394f70	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394f72	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394f75	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f77	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394f7a	22 80 47 39	jsl $394780	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394f7e	90 e7		bcc $394f67	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394f80	68		pla		                PLA                             ; Restore the cluster of the file
.394f81	85 10		sta $0330	                STA DOS_CLUS_ID
.394f83	68		pla		                PLA
.394f84	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f86	22 4e 4b 39	jsl $394b4e	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394f8a	b0 fa		bcs $394f86	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394f8c	e2 20		sep #$20	                SEP #$20        ; set A short
.394f8e	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f92	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394f94	d0 3d		bne $394fd3	                BNE fat32                       ; No: assume it's FAT32
.394f96					fat12
.394f96	c2 20		rep #$20	                REP #$20        ; set A long
.394f98	22 08 4a 39	jsl $394a08	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394f9c	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394f9e	89 01 00	bit #$0001	                BIT #1
.394fa1	d0 11		bne $394fb4	                BNE is_odd
.394fa3	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394fa6	29 ff 0f	and #$0fff	                AND #$0FFF
.394fa9	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394fac	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394faf	29 00 f0	and #$f000	                AND #$F000
.394fb2	80 10		bra $394fc4	                BRA update_fat12
.394fb4	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394fb7	0a		asl a		                ASL A
.394fb8	0a		asl a		                ASL A
.394fb9	0a		asl a		                ASL A
.394fba	0a		asl a		                ASL A
.394fbb	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394fbe	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394fc1	29 0f 00	and #$000f	                AND #$000F
.394fc4	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394fc7	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394fca	22 6d 4e 39	jsl $394e6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394fce	b0 22		bcs $394ff2	                BCS ret_success
.394fd0	82 1a 00	brl $394fed	                BRL pass_failure
.394fd3					fat32
.394fd3	c2 20		rep #$20	                REP #$20        ; set A long
.394fd5	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394fd8	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394fdb	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394fde	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394fe1	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394fe5	b0 0b		bcs $394ff2	                BCS ret_success
.394fe7	e2 20		sep #$20	                SEP #$20        ; set A short
.394fe9	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394feb	85 0e		sta $032e	                STA DOS_STATUS
.394fed	28		plp		pass_failure    PLP
.394fee	2b		pld		                PLD
.394fef	ab		plb		                PLB
.394ff0	18		clc		                CLC
.394ff1	6b		rtl		                RTL
.394ff2					ret_success
.394ff2	e2 20		sep #$20	                SEP #$20        ; set A short
.394ff4	64 0e		stz $032e	                STZ DOS_STATUS
.394ff6	28		plp		                PLP
.394ff7	2b		pld		                PLD
.394ff8	ab		plb		                PLB
.394ff9	38		sec		                SEC
.394ffa	6b		rtl		                RTL
.394ffb					BCD2BIN
.394ffb	8b		phb		                PHB
.394ffc	0b		phd		                PHD
.394ffd	08		php		                PHP
.394ffe	48		pha		                PHA             ; begin setdbr macro
.394fff	08		php		                PHP
.395000	e2 20		sep #$20	                SEP #$20        ; set A short
.395002	a9 00		lda #$00	                LDA #0
.395004	48		pha		                PHA
.395005	ab		plb		                PLB
.395006	28		plp		                PLP
.395007	68		pla		                PLA             ; end setdbr macro
.395008	48		pha		                PHA             ; begin setdp macro
.395009	08		php		                PHP
.39500a	c2 20		rep #$20	                REP #$20        ; set A long
.39500c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39500f	5b		tcd		                TCD
.395010	28		plp		                PLP
.395011	68		pla		                PLA             ; end setdp macro
.395012	c2 30		rep #$30	                REP #$30        ; set A&X long
.395014	85 28		sta $0348	                STA DOS_TEMP
.395016	29 0f 00	and #$000f	                AND #$000F
.395019	85 2a		sta $034a	                STA DOS_TEMP+2
.39501b	a5 28		lda $0348	                LDA DOS_TEMP
.39501d	4a		lsr a		                LSR A
.39501e	4a		lsr a		                LSR A
.39501f	4a		lsr a		                LSR A
.395020	4a		lsr a		                LSR A
.395021	85 28		sta $0348	                STA DOS_TEMP
.395023	29 0f 00	and #$000f	                AND #$000F
.395026	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.39502a	a9 0a 00	lda #$000a	                LDA #10
.39502d	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395031	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395035	18		clc		                CLC
.395036	65 2a		adc $034a	                ADC DOS_TEMP+2
.395038	85 2a		sta $034a	                STA DOS_TEMP+2
.39503a	a5 28		lda $0348	                LDA DOS_TEMP
.39503c	4a		lsr a		                LSR A
.39503d	4a		lsr a		                LSR A
.39503e	4a		lsr a		                LSR A
.39503f	4a		lsr a		                LSR A
.395040	85 28		sta $0348	                STA DOS_TEMP
.395042	29 0f 00	and #$000f	                AND #$000F
.395045	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395049	a9 64 00	lda #$0064	                LDA #100
.39504c	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395050	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395054	18		clc		                CLC
.395055	65 2a		adc $034a	                ADC DOS_TEMP+2
.395057	85 2a		sta $034a	                STA DOS_TEMP+2
.395059	a5 28		lda $0348	                LDA DOS_TEMP
.39505b	4a		lsr a		                LSR A
.39505c	4a		lsr a		                LSR A
.39505d	4a		lsr a		                LSR A
.39505e	4a		lsr a		                LSR A
.39505f	29 0f 00	and #$000f	                AND #$000F
.395062	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395066	a9 e8 03	lda #$03e8	                LDA #1000
.395069	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39506d	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395071	18		clc		                CLC
.395072	65 2a		adc $034a	                ADC DOS_TEMP+2
.395074	28		plp		                PLP
.395075	2b		pld		                PLD
.395076	ab		plb		                PLB
.395077	6b		rtl		                RTL
.395078					DOS_RTCCREATE
.395078	8b		phb		                PHB
.395079	0b		phd		                PHD
.39507a	08		php		                PHP
.39507b	48		pha		                PHA             ; begin setdbr macro
.39507c	08		php		                PHP
.39507d	e2 20		sep #$20	                SEP #$20        ; set A short
.39507f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395081	48		pha		                PHA
.395082	ab		plb		                PLB
.395083	28		plp		                PLP
.395084	68		pla		                PLA             ; end setdbr macro
.395085	48		pha		                PHA             ; begin setdp macro
.395086	08		php		                PHP
.395087	c2 20		rep #$20	                REP #$20        ; set A long
.395089	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39508c	5b		tcd		                TCD
.39508d	28		plp		                PLP
.39508e	68		pla		                PLA             ; end setdp macro
.39508f	c2 10		rep #$10	                REP #$10        ; set X long
.395091	e2 20		sep #$20	                SEP #$20        ; set A short
.395093	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.395097	09 08		ora #$08	                ORA #%00001000
.395099	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39509d	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.3950a1	85 29		sta $0349	                STA DOS_TEMP+1
.3950a3	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.3950a7	85 28		sta $0348	                STA DOS_TEMP
.3950a9	c2 20		rep #$20	                REP #$20        ; set A long
.3950ab	a5 28		lda $0348	                LDA DOS_TEMP
.3950ad	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.3950b1	85 28		sta $0348	                STA DOS_TEMP
.3950b3	38		sec		                SEC                         ; Year is relative to 1980
.3950b4	e9 bc 07	sbc #$07bc	                SBC #1980
.3950b7	c2 20		rep #$20	                REP #$20        ; set A long
.3950b9	0a		asl a		                ASL A
.3950ba	0a		asl a		                ASL A
.3950bb	0a		asl a		                ASL A
.3950bc	0a		asl a		                ASL A
.3950bd	0a		asl a		                ASL A
.3950be	0a		asl a		                ASL A
.3950bf	0a		asl a		                ASL A
.3950c0	0a		asl a		                ASL A
.3950c1	0a		asl a		                ASL A
.3950c2	29 00 fe	and #$fe00	                AND #$FE00
.3950c5	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3950c8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3950cc	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3950d0	c2 20		rep #$20	                REP #$20        ; set A long
.3950d2	29 ff 00	and #$00ff	                AND #$00FF
.3950d5	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.3950d9	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3950dc	0a		asl a		                ASL A
.3950dd	0a		asl a		                ASL A
.3950de	0a		asl a		                ASL A
.3950df	0a		asl a		                ASL A
.3950e0	0a		asl a		                ASL A
.3950e1	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3950e4	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3950e7	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3950e9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ed	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3950f1	c2 20		rep #$20	                REP #$20        ; set A long
.3950f3	29 ff 00	and #$00ff	                AND #$00FF
.3950f6	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.3950fa	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3950fd	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395100	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395102	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395104	e2 20		sep #$20	                SEP #$20        ; set A short
.395106	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.39510a	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39510c	c2 20		rep #$20	                REP #$20        ; set A long
.39510e	29 ff 00	and #$00ff	                AND #$00FF
.395111	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.395115	c2 20		rep #$20	                REP #$20        ; set A long
.395117	0a		asl a		                ASL A
.395118	0a		asl a		                ASL A
.395119	0a		asl a		                ASL A
.39511a	0a		asl a		                ASL A
.39511b	0a		asl a		                ASL A
.39511c	0a		asl a		                ASL A
.39511d	0a		asl a		                ASL A
.39511e	0a		asl a		                ASL A
.39511f	0a		asl a		                ASL A
.395120	0a		asl a		                ASL A
.395121	0a		asl a		                ASL A
.395122	29 00 f8	and #$f800	                AND #$F800
.395125	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395128	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39512a	e2 20		sep #$20	                SEP #$20        ; set A short
.39512c	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.395130	c2 20		rep #$20	                REP #$20        ; set A long
.395132	29 ff 00	and #$00ff	                AND #$00FF
.395135	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.395139	c2 20		rep #$20	                REP #$20        ; set A long
.39513b	0a		asl a		                ASL A
.39513c	0a		asl a		                ASL A
.39513d	0a		asl a		                ASL A
.39513e	0a		asl a		                ASL A
.39513f	0a		asl a		                ASL A
.395140	29 e0 07	and #$07e0	                AND #$07E0
.395143	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395146	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395148	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39514a	e2 20		sep #$20	                SEP #$20        ; set A short
.39514c	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.395150	c2 20		rep #$20	                REP #$20        ; set A long
.395152	29 ff 00	and #$00ff	                AND #$00FF
.395155	22 fb 4f 39	jsl $394ffb	                JSL BCD2BIN                 ; Convert it to binary
.395159	c2 20		rep #$20	                REP #$20        ; set A long
.39515b	29 1f 00	and #$001f	                AND #$001F
.39515e	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395161	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395163	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395165	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395169	29 f7 00	and #$00f7	                AND #%11110111
.39516c	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395170	28		plp		                PLP
.395171	2b		pld		                PLD
.395172	ab		plb		                PLB
.395173	6b		rtl		                RTL
.395174					DOS_CREATE
.395174	8b		phb		                PHB
.395175	0b		phd		                PHD
.395176	08		php		                PHP
.395177	48		pha		                PHA             ; begin setdbr macro
.395178	08		php		                PHP
.395179	e2 20		sep #$20	                SEP #$20        ; set A short
.39517b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39517d	48		pha		                PHA
.39517e	ab		plb		                PLB
.39517f	28		plp		                PLP
.395180	68		pla		                PLA             ; end setdbr macro
.395181	48		pha		                PHA             ; begin setdp macro
.395182	08		php		                PHP
.395183	c2 20		rep #$20	                REP #$20        ; set A long
.395185	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395188	5b		tcd		                TCD
.395189	28		plp		                PLP
.39518a	68		pla		                PLA             ; end setdp macro
.39518b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39518d	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.395190	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395192	85 28		sta $0348	                STA DOS_TEMP
.395194	c8		iny		                INY
.395195	c8		iny		                INY
.395196	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395198	85 2a		sta $034a	                STA DOS_TEMP+2
.39519a	e2 20		sep #$20	                SEP #$20        ; set A short
.39519c	a0 00 00	ldy #$0000	                LDY #0
.39519f	a2 00 00	ldx #$0000	                LDX #0
.3951a2	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3951a4	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3951a6	f0 04		beq $3951ac	                BEQ find_file                   ; If it's NULL, we're done
.3951a8	e8		inx		                INX
.3951a9	c8		iny		                INY
.3951aa	80 f6		bra $3951a2	                BRA path_loop
.3951ac	22 91 48 39	jsl $394891	find_file       JSL DOS_PARSE_PATH
.3951b0	22 29 49 39	jsl $394929	                JSL DOS_FINDFILE
.3951b4	90 07		bcc $3951bd	                BCC set_device
.3951b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3951b8	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3951ba	82 d2 00	brl $39528f	                BRL ret_failure
.3951bd					set_device
.3951bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3951bf	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3951c2	a5 01		lda $0321	                LDA BIOS_DEV
.3951c4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951c6					validate_name
.3951c6	22 47 4c 39	jsl $394c47	                JSL DOS_FREECLUS
.3951ca	b0 03		bcs $3951cf	                BCS save_data
.3951cc	82 c4 00	brl $395293	                BRL pass_failure
.3951cf					save_data
.3951cf	c2 20		rep #$20	                REP #$20        ; set A long
.3951d1	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3951d4	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3951d6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951d8	c8		iny		                INY
.3951d9	c8		iny		                INY
.3951da	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3951dc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951de	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3951e1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951e3	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3951e5	c8		iny		                INY
.3951e6	c8		iny		                INY
.3951e7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951e9	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3951eb	22 80 47 39	jsl $394780	                JSL DOS_PUTCLUSTER
.3951ef	b0 00		bcs $3951f1	                BCS find_dir
.3951f1					find_dir
.3951f1	c2 20		rep #$20	                REP #$20        ; set A long
.3951f3	22 0f 43 39	jsl $39430f	                JSL DOS_DIRFINDFREE
.3951f7	b0 1a		bcs $395213	                BCS set_entry
.3951f9	c2 20		rep #$20	                REP #$20        ; set A long
.3951fb	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3951fe	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.395200	85 10		sta $0330	                STA DOS_CLUS_ID
.395202	c8		iny		                INY
.395203	c8		iny		                INY
.395204	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395206	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395208	22 02 4f 39	jsl $394f02	                JSL DELCLUSTER32                ; Delete the cluster
.39520c	e2 20		sep #$20	                SEP #$20        ; set A short
.39520e	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.395210	82 7c 00	brl $39528f	                BRL ret_failure
.395213					set_entry
.395213	e2 20		sep #$20	                SEP #$20        ; set A short
.395215	a0 00 00	ldy #$0000	                LDY #0
.395218	a9 00		lda #$00	                LDA #0                          ; NULL
.39521a	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39521c	c8		iny		                INY
.39521d	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.395220	d0 f8		bne $39521a	                BNE copy_dir_loop
.395222	a0 00 00	ldy #$0000	                LDY #0
.395225	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395228	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39522a	c8		iny		                INY
.39522b	c0 0b 00	cpy #$000b	                CPY #11
.39522e	d0 f5		bne $395225	                BNE name_loop
.395230	c2 20		rep #$20	                REP #$20        ; set A long
.395232	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395235	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395237	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39523a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39523c	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39523f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395241	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395244	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395246	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395249	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39524b	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39524e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395250	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395253	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395255	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395258	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39525a	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39525d	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.395260	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395262	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395265	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395267	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.39526a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39526c	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39526f	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395271	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395274	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395276	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395279	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39527b	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.39527e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395280	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395283	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395285	c2 20		rep #$20	                REP #$20        ; set A long
.395287	22 cd 43 39	jsl $3943cd	                JSL DOS_DIRWRITE
.39528b	b0 0b		bcs $395298	                BCS ret_success
.39528d	80 04		bra $395293	                BRA pass_failure
.39528f					ret_failure
.39528f	e2 20		sep #$20	                SEP #$20        ; set A short
.395291	85 0e		sta $032e	                STA DOS_STATUS
.395293	28		plp		pass_failure    PLP
.395294	2b		pld		                PLD
.395295	ab		plb		                PLB
.395296	18		clc		                CLC
.395297	6b		rtl		                RTL
.395298					ret_success
.395298	e2 20		sep #$20	                SEP #$20        ; set A short
.39529a	64 0e		stz $032e	                STZ DOS_STATUS
.39529c	28		plp		                PLP
.39529d	2b		pld		                PLD
.39529e	ab		plb		                PLB
.39529f	38		sec		                SEC
.3952a0	6b		rtl		                RTL
.3952a1					DOS_COPYPATH
.3952a1	da		phx		                PHX
.3952a2	5a		phy		                PHY
.3952a3	8b		phb		                PHB
.3952a4	0b		phd		                PHD
.3952a5	08		php		                PHP
.3952a6	48		pha		                PHA             ; begin setdbr macro
.3952a7	08		php		                PHP
.3952a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3952aa	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952ac	48		pha		                PHA
.3952ad	ab		plb		                PLB
.3952ae	28		plp		                PLP
.3952af	68		pla		                PLA             ; end setdbr macro
.3952b0	48		pha		                PHA             ; begin setdp macro
.3952b1	08		php		                PHP
.3952b2	c2 20		rep #$20	                REP #$20        ; set A long
.3952b4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952b7	5b		tcd		                TCD
.3952b8	28		plp		                PLP
.3952b9	68		pla		                PLA             ; end setdp macro
.3952ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3952bc	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3952bf	a2 00 00	ldx #$0000	                LDX #0
.3952c2	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3952c4	e8		inx		                INX
.3952c5	e8		inx		                INX
.3952c6	e0 00 01	cpx #$0100	                CPX #256
.3952c9	d0 f7		bne $3952c2	                BNE clr_loop
.3952cb	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3952cd	d0 04		bne $3952d3	                BNE get_path            ; No: attempt to fetch the path
.3952cf	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3952d1	f0 27		beq $3952fa	                BEQ done                ; Yes: return an empty buffer
.3952d3	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3952d6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d8	85 28		sta $0348	                STA DOS_TEMP
.3952da	c8		iny		                INY
.3952db	c8		iny		                INY
.3952dc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952de	85 2a		sta $034a	                STA DOS_TEMP+2
.3952e0	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3952e2	d0 04		bne $3952e8	                BNE start_copy          ; No: start copying it
.3952e4	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3952e6	f0 12		beq $3952fa	                BEQ done                ; Yes: return an empty buffer
.3952e8					start_copy
.3952e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3952ea	a2 00 00	ldx #$0000	                LDX #0
.3952ed	a0 00 00	ldy #$0000	                LDY #0
.3952f0	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3952f2	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3952f4	f0 04		beq $3952fa	                BEQ done
.3952f6	e8		inx		                INX
.3952f7	c8		iny		                INY
.3952f8	d0 f6		bne $3952f0	                BNE loop
.3952fa	28		plp		done            PLP
.3952fb	2b		pld		                PLD
.3952fc	ab		plb		                PLB
.3952fd	7a		ply		                PLY
.3952fe	fa		plx		                PLX
.3952ff	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395300					DOS_TEST
.395300	8b		phb		                PHB
.395301	0b		phd		                PHD
.395302	08		php		                PHP
.395303	48		pha		                PHA             ; begin setdbr macro
.395304	08		php		                PHP
.395305	e2 20		sep #$20	                SEP #$20        ; set A short
.395307	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395309	48		pha		                PHA
.39530a	ab		plb		                PLB
.39530b	28		plp		                PLP
.39530c	68		pla		                PLA             ; end setdbr macro
.39530d	48		pha		                PHA             ; begin setdp macro
.39530e	08		php		                PHP
.39530f	c2 20		rep #$20	                REP #$20        ; set A long
.395311	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395314	5b		tcd		                TCD
.395315	28		plp		                PLP
.395316	68		pla		                PLA             ; end setdp macro
.395317	c2 30		rep #$30	                REP #$30        ; set A&X long
.395319	a9 3f 53	lda #$533f	                LDA #<>src_file
.39531c	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395320	a9 39 00	lda #$0039	                LDA #`src_file
.395323	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395327	a9 4c 53	lda #$534c	                LDA #<>dst_file
.39532a	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39532e	a9 39 00	lda #$0039	                LDA #`dst_file
.395331	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395335	22 d1 59 39	jsl $3959d1	                JSL IF_COPY
.395339	b0 00		bcs $39533b	                BCS done
.39533b	28		plp		done            PLP
.39533c	2b		pld		                PLD
.39533d	ab		plb		                PLB
.39533e	6b		rtl		                RTL
>39533f	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395347	2e 62 61 73 00
>39534c	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395354	32 2e 62 61 73 00
.39535a					IF_OPEN
.39535a	da		phx		                PHX
.39535b	5a		phy		                PHY
.39535c	0b		phd		                PHD
.39535d	8b		phb		                PHB
.39535e	08		php		                PHP
.39535f	48		pha		                PHA             ; begin setdbr macro
.395360	08		php		                PHP
.395361	e2 20		sep #$20	                SEP #$20        ; set A short
.395363	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395365	48		pha		                PHA
.395366	ab		plb		                PLB
.395367	28		plp		                PLP
.395368	68		pla		                PLA             ; end setdbr macro
.395369	48		pha		                PHA             ; begin setdp macro
.39536a	08		php		                PHP
.39536b	c2 20		rep #$20	                REP #$20        ; set A long
.39536d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395370	5b		tcd		                TCD
.395371	28		plp		                PLP
.395372	68		pla		                PLA             ; end setdp macro
.395373	e2 20		sep #$20	                SEP #$20        ; set A short
.395375	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395378	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39537a	89 38		bit #$38	                BIT #FD_STAT_OPEN
.39537c	f0 05		beq $395383	                BEQ ok_to_open
.39537e	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395380	82 0d 05	brl $395890	                BRL IF_FAILURE
.395383	22 a1 52 39	jsl $3952a1	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395387	22 29 49 39	jsl $394929	                JSL DOS_FINDFILE                ; Attempt to find the file
.39538b	b0 03		bcs $395390	                BCS is_found                    ; If OK: we found the file
.39538d	82 04 05	brl $395894	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395390					is_found
.395390	e2 20		sep #$20	                SEP #$20        ; set A short
.395392	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395395	a5 01		lda $0321	                LDA BIOS_DEV
.395397	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395399	c2 20		rep #$20	                REP #$20        ; set A long
.39539b	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.39539e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a0	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953a2	c8		iny		                INY
.3953a3	c8		iny		                INY
.3953a4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a6	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953a8	22 43 47 39	jsl $394743	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3953ac	b0 03		bcs $3953b1	                BCS read_cluster
.3953ae	82 e3 04	brl $395894	                BRL IF_PASSFAILURE
.3953b1	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3953b4	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953b6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953b8	c8		iny		                INY
.3953b9	c8		iny		                INY
.3953ba	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953bc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953be	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3953c1	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953c3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953c5	c8		iny		                INY
.3953c6	c8		iny		                INY
.3953c7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953c9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953cb	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3953ce	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3953d0	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3953d3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953d5	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3953d8	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3953da	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3953dd	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953df	e2 20		sep #$20	                SEP #$20        ; set A short
.3953e1	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3953e4	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3953e6	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3953e8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953ea	82 ae 04	brl $39589b	                BRL IF_SUCCESS
.3953ed					IF_CREATE
.3953ed	da		phx		                PHX
.3953ee	5a		phy		                PHY
.3953ef	0b		phd		                PHD
.3953f0	8b		phb		                PHB
.3953f1	08		php		                PHP
.3953f2	48		pha		                PHA             ; begin setdbr macro
.3953f3	08		php		                PHP
.3953f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3953f6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953f8	48		pha		                PHA
.3953f9	ab		plb		                PLB
.3953fa	28		plp		                PLP
.3953fb	68		pla		                PLA             ; end setdbr macro
.3953fc	48		pha		                PHA             ; begin setdp macro
.3953fd	08		php		                PHP
.3953fe	c2 20		rep #$20	                REP #$20        ; set A long
.395400	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395403	5b		tcd		                TCD
.395404	28		plp		                PLP
.395405	68		pla		                PLA             ; end setdp macro
.395406	22 74 51 39	jsl $395174	                JSL DOS_CREATE                  ; Attempt to create the file
.39540a	90 18		bcc $395424	                BCC pass_failure                ; If it fails: pass the failure up the chain
.39540c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39540e	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395411	a9 00 00	lda #$0000	                LDA #0
.395414	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395416	c8		iny		                INY
.395417	c8		iny		                INY
.395418	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39541a	e2 20		sep #$20	                SEP #$20        ; set A short
.39541c	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39541f	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395421	82 77 04	brl $39589b	                BRL IF_SUCCESS
.395424	82 69 04	brl $395890	pass_failure    BRL IF_FAILURE
.395427					IF_CLOSE
.395427	da		phx		                PHX
.395428	5a		phy		                PHY
.395429	0b		phd		                PHD
.39542a	8b		phb		                PHB
.39542b	08		php		                PHP
.39542c	48		pha		                PHA             ; begin setdbr macro
.39542d	08		php		                PHP
.39542e	e2 20		sep #$20	                SEP #$20        ; set A short
.395430	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395432	48		pha		                PHA
.395433	ab		plb		                PLB
.395434	28		plp		                PLP
.395435	68		pla		                PLA             ; end setdbr macro
.395436	48		pha		                PHA             ; begin setdp macro
.395437	08		php		                PHP
.395438	c2 20		rep #$20	                REP #$20        ; set A long
.39543a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39543d	5b		tcd		                TCD
.39543e	28		plp		                PLP
.39543f	68		pla		                PLA             ; end setdp macro
.395440	e2 20		sep #$20	                SEP #$20        ; set A short
.395442	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395445	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395447	89 02		bit #$02	                BIT #FD_STAT_WRITE
.395449	f0 09		beq $395454	                BEQ set_flag                    ; No, just mark it closed
.39544b	22 c0 54 39	jsl $3954c0	                JSL IF_WRITE                    ; Attempt to write the cluster
.39544f	b0 03		bcs $395454	                BCS set_flag
.395451	82 40 04	brl $395894	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395454	22 87 59 39	jsl $395987	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395458	82 40 04	brl $39589b	                BRL IF_SUCCESS
.39545b					IF_READ
.39545b	da		phx		                PHX
.39545c	5a		phy		                PHY
.39545d	0b		phd		                PHD
.39545e	8b		phb		                PHB
.39545f	08		php		                PHP
.395460	48		pha		                PHA             ; begin setdbr macro
.395461	08		php		                PHP
.395462	e2 20		sep #$20	                SEP #$20        ; set A short
.395464	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395466	48		pha		                PHA
.395467	ab		plb		                PLB
.395468	28		plp		                PLP
.395469	68		pla		                PLA             ; end setdbr macro
.39546a	48		pha		                PHA             ; begin setdp macro
.39546b	08		php		                PHP
.39546c	c2 20		rep #$20	                REP #$20        ; set A long
.39546e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395471	5b		tcd		                TCD
.395472	28		plp		                PLP
.395473	68		pla		                PLA             ; end setdp macro
.395474	c2 10		rep #$10	                REP #$10        ; set X long
.395476	e2 20		sep #$20	                SEP #$20        ; set A short
.395478					get_dev
.395478	e2 20		sep #$20	                SEP #$20        ; set A short
.39547a	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39547d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39547f	85 01		sta $0321	                STA BIOS_DEV
.395481	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395485	c2 20		rep #$20	                REP #$20        ; set A long
.395487	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39548a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39548c	85 10		sta $0330	                STA DOS_CLUS_ID
.39548e	c8		iny		                INY
.39548f	c8		iny		                INY
.395490	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395492	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395494	22 4e 4b 39	jsl $394b4e	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395498	90 13		bcc $3954ad	                BCC pass_failure                ; If not OK: pass the failure up the chain
.39549a	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39549d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39549f	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3954a1	c8		iny		                INY
.3954a2	c8		iny		                INY
.3954a3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954a5	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3954a7	22 43 47 39	jsl $394743	                JSL DOS_GETCLUSTER              ; Get the cluster
.3954ab	b0 03		bcs $3954b0	                BCS ret_success                 ; If ok: return success
.3954ad					pass_failure
.3954ad	82 e4 03	brl $395894	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3954b0	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3954b3	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954b5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954b7	c8		iny		                INY
.3954b8	c8		iny		                INY
.3954b9	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954bb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954bd	82 db 03	brl $39589b	                BRL IF_SUCCESS
.3954c0					IF_WRITE
.3954c0	da		phx		                PHX
.3954c1	5a		phy		                PHY
.3954c2	0b		phd		                PHD
.3954c3	8b		phb		                PHB
.3954c4	08		php		                PHP
.3954c5	48		pha		                PHA             ; begin setdbr macro
.3954c6	08		php		                PHP
.3954c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3954c9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954cb	48		pha		                PHA
.3954cc	ab		plb		                PLB
.3954cd	28		plp		                PLP
.3954ce	68		pla		                PLA             ; end setdbr macro
.3954cf	48		pha		                PHA             ; begin setdp macro
.3954d0	08		php		                PHP
.3954d1	c2 20		rep #$20	                REP #$20        ; set A long
.3954d3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954d6	5b		tcd		                TCD
.3954d7	28		plp		                PLP
.3954d8	68		pla		                PLA             ; end setdp macro
.3954d9	c2 10		rep #$10	                REP #$10        ; set X long
.3954db	e2 20		sep #$20	                SEP #$20        ; set A short
.3954dd	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3954e0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954e2	85 01		sta $0321	                STA BIOS_DEV
.3954e4	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3954e8	c2 20		rep #$20	                REP #$20        ; set A long
.3954ea	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3954ed	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954ef	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3954f1	c8		iny		                INY
.3954f2	c8		iny		                INY
.3954f3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954f5	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3954f7	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3954fa	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954fc	85 10		sta $0330	                STA DOS_CLUS_ID
.3954fe	c8		iny		                INY
.3954ff	c8		iny		                INY
.395500	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395502	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395504	d0 1a		bne $395520	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395506	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395508	d0 16		bne $395520	                BNE rewrite_cluster
.39550a	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39550d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39550f	85 10		sta $0330	                STA DOS_CLUS_ID
.395511	c8		iny		                INY
.395512	c8		iny		                INY
.395513	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395515	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395517	22 42 4f 39	jsl $394f42	                JSL DOS_APPENDCLUS              ; Append the cluster
.39551b	b0 0c		bcs $395529	                BCS ret_success                 ; If OK: return success
.39551d	82 74 03	brl $395894	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395520	22 80 47 39	jsl $394780	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395524	b0 03		bcs $395529	                BCS ret_success                 ; If ok: return success
.395526	82 6b 03	brl $395894	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395529	82 6f 03	brl $39589b	ret_success     BRL IF_SUCCESS
.39552c					IF_DIROPEN
.39552c	da		phx		                PHX
.39552d	5a		phy		                PHY
.39552e	0b		phd		                PHD
.39552f	8b		phb		                PHB
.395530	08		php		                PHP
.395531	48		pha		                PHA             ; begin setdbr macro
.395532	08		php		                PHP
.395533	e2 20		sep #$20	                SEP #$20        ; set A short
.395535	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395537	48		pha		                PHA
.395538	ab		plb		                PLB
.395539	28		plp		                PLP
.39553a	68		pla		                PLA             ; end setdbr macro
.39553b	48		pha		                PHA             ; begin setdp macro
.39553c	08		php		                PHP
.39553d	c2 20		rep #$20	                REP #$20        ; set A long
.39553f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395542	5b		tcd		                TCD
.395543	28		plp		                PLP
.395544	68		pla		                PLA             ; end setdp macro
.395545	c2 30		rep #$30	                REP #$30        ; set A&X long
.395547	22 a1 52 39	jsl $3952a1	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.39554b	22 91 48 39	jsl $394891	                JSL DOS_PARSE_PATH          ; Parse the path
.39554f	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395553	b0 03		bcs $395558	                BCS get_root_dir            ; If successful: get the root directory
.395555	82 3c 03	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395558					get_root_dir
.395558	c2 30		rep #$30	                REP #$30        ; set A&X long
.39555a	22 b4 41 39	jsl $3941b4	                JSL DOS_DIROPEN
.39555e	b0 03		bcs $395563	                BCS success
.395560	82 31 03	brl $395894	                BRL IF_PASSFAILURE
.395563	82 35 03	brl $39589b	success         BRL IF_SUCCESS
.395566					IF_DIRNEXT
.395566	5c 4e 42 39	jmp $39424e	                JML DOS_DIRNEXT
.39556a					IF_DELETE
.39556a	da		phx		                PHX
.39556b	5a		phy		                PHY
.39556c	0b		phd		                PHD
.39556d	8b		phb		                PHB
.39556e	08		php		                PHP
.39556f	48		pha		                PHA             ; begin setdbr macro
.395570	08		php		                PHP
.395571	e2 20		sep #$20	                SEP #$20        ; set A short
.395573	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395575	48		pha		                PHA
.395576	ab		plb		                PLB
.395577	28		plp		                PLP
.395578	68		pla		                PLA             ; end setdbr macro
.395579	48		pha		                PHA             ; begin setdp macro
.39557a	08		php		                PHP
.39557b	c2 20		rep #$20	                REP #$20        ; set A long
.39557d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395580	5b		tcd		                TCD
.395581	28		plp		                PLP
.395582	68		pla		                PLA             ; end setdp macro
.395583	c2 30		rep #$30	                REP #$30        ; set A&X long
.395585	22 29 49 39	jsl $394929	                JSL DOS_FINDFILE
.395589	b0 03		bcs $39558e	                BCS get_first_clus
.39558b	82 06 03	brl $395894	                BRL IF_PASSFAILURE
.39558e					get_first_clus
.39558e	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395591	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395593	85 10		sta $0330	                STA DOS_CLUS_ID
.395595	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395598	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39559a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39559c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39559e	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3955a1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3955a3	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3955a6	22 4e 4b 39	jsl $394b4e	del_loop        JSL NEXTCLUSTER
.3955aa	90 2f		bcc $3955db	                BCC del_one
.3955ac	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955ae	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3955b1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3955b3	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3955b6	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3955b9	85 10		sta $0330	                STA DOS_CLUS_ID
.3955bb	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3955be	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955c0	22 02 4f 39	jsl $394f02	                JSL DELCLUSTER32
.3955c4	b0 03		bcs $3955c9	                BCS go_next
.3955c6	82 cb 02	brl $395894	                BRL IF_PASSFAILURE
.3955c9					go_next
.3955c9	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3955cc	85 10		sta $0330	                STA DOS_CLUS_ID
.3955ce	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3955d1	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3955d4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955d6	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3955d9	80 cb		bra $3955a6	                BRA del_loop
.3955db					del_one
.3955db	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3955de	85 10		sta $0330	                STA DOS_CLUS_ID
.3955e0	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3955e3	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955e5	22 5c 4e 39	jsl $394e5c	                JSL DELCLUSTER
.3955e9	b0 03		bcs $3955ee	                BCS free_dir_entry
.3955eb	82 a6 02	brl $395894	                BRL IF_PASSFAILURE
.3955ee					free_dir_entry
.3955ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3955f0	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3955f3	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3955f5	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3955f7	22 cd 43 39	jsl $3943cd	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3955fb	b0 03		bcs $395600	                BCS ret_success
.3955fd	82 94 02	brl $395894	                BRL IF_PASSFAILURE
.395600	82 98 02	brl $39589b	ret_success     BRL IF_SUCCESS
.395603					IF_DIRREAD
.395603	da		phx		                PHX
.395604	5a		phy		                PHY
.395605	0b		phd		                PHD
.395606	8b		phb		                PHB
.395607	08		php		                PHP
.395608	48		pha		                PHA             ; begin setdbr macro
.395609	08		php		                PHP
.39560a	e2 20		sep #$20	                SEP #$20        ; set A short
.39560c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39560e	48		pha		                PHA
.39560f	ab		plb		                PLB
.395610	28		plp		                PLP
.395611	68		pla		                PLA             ; end setdbr macro
.395612	48		pha		                PHA             ; begin setdp macro
.395613	08		php		                PHP
.395614	c2 20		rep #$20	                REP #$20        ; set A long
.395616	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395619	5b		tcd		                TCD
.39561a	28		plp		                PLP
.39561b	68		pla		                PLA             ; end setdp macro
.39561c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39561e	22 29 49 39	jsl $394929	                JSL DOS_FINDFILE
.395622	b0 03		bcs $395627	                BCS success
.395624	82 69 02	brl $395890	                BRL IF_FAILURE
.395627	82 71 02	brl $39589b	success         BRL IF_SUCCESS
.39562a					IF_DIRWRITE
.39562a	5c cd 43 39	jmp $3943cd	                JML DOS_DIRWRITE
.39562e					IF_LOAD
.39562e	da		phx		                PHX
.39562f	5a		phy		                PHY
.395630	0b		phd		                PHD
.395631	8b		phb		                PHB
.395632	08		php		                PHP
.395633	48		pha		                PHA             ; begin setdbr macro
.395634	08		php		                PHP
.395635	e2 20		sep #$20	                SEP #$20        ; set A short
.395637	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395639	48		pha		                PHA
.39563a	ab		plb		                PLB
.39563b	28		plp		                PLP
.39563c	68		pla		                PLA             ; end setdbr macro
.39563d	48		pha		                PHA             ; begin setdp macro
.39563e	08		php		                PHP
.39563f	c2 20		rep #$20	                REP #$20        ; set A long
.395641	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395644	5b		tcd		                TCD
.395645	28		plp		                PLP
.395646	68		pla		                PLA             ; end setdp macro
.395647	c2 30		rep #$30	                REP #$30        ; set A&X long
.395649	22 5a 53 39	jsl $39535a	                JSL IF_OPEN
.39564d	b0 03		bcs $395652	                BCS setup                   ; If success: start setting things up
.39564f	82 42 02	brl $395894	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395652					setup
.395652	c2 20		rep #$20	                REP #$20        ; set A long
.395654	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395657	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395659	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39565b	c8		iny		                INY
.39565c	c8		iny		                INY
.39565d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39565f	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395661	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395664	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395666	85 30		sta $0350	                STA DOS_SRC_PTR
.395668	c8		iny		                INY
.395669	c8		iny		                INY
.39566a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39566c	85 32		sta $0352	                STA DOS_SRC_PTR+2
.39566e	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395670	c9 40 00	cmp #$0040	                CMP #$0040
.395673	b0 04		bcs $395679	                BGE load_by_type            ; No: try to load it by type
.395675	5c 43 57 39	jmp $395743	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395679	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.39567c	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.39567f					type_loop
.39567f	e2 20		sep #$20	                SEP #$20        ; set A short
.395681	bf c5 56 39	lda $3956c5,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395685	f0 37		beq $3956be	                BEQ no_match                ; If NULL... we didn't get a match
.395687	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.39568a	d0 28		bne $3956b4	                BNE next_entry              ; If they don't match, try the next entry
.39568c	bf c6 56 39	lda $3956c6,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395690	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395693	d0 1f		bne $3956b4	                BNE next_entry              ; If they don't match, try the next entry
.395695	bf c7 56 39	lda $3956c7,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395699	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.39569c	d0 16		bne $3956b4	                BNE next_entry              ; If they don't match, try the next entry
.39569e	c2 20		rep #$20	                REP #$20        ; set A long
.3956a0	bf c8 56 39	lda $3956c8,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3956a4	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3956a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3956a8	bf ca 56 39	lda $3956ca,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3956ac	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3956ae	a2 00 00	ldx #$0000	                LDX #0
.3956b1	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3956b4					next_entry
.3956b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956b6	8a		txa		                TXA
.3956b7	18		clc		                CLC
.3956b8	69 06 00	adc #$0006	                ADC #6
.3956bb	aa		tax		                TAX
.3956bc	80 c1		bra $39567f	                BRA type_loop               ; And check it against the file
.3956be					no_match
.3956be	e2 20		sep #$20	                SEP #$20        ; set A short
.3956c0	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3956c2	82 cb 01	brl $395890	                BRL IF_FAILURE
>3956c5	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3956c8	cc 56				                .word <>IF_LOADPGX
>3956ca	39				                .byte `IF_LOADPGX
>3956cb	00				                .byte 0
.3956cc					IF_LOADPGX
.3956cc	c2 10		rep #$10	                REP #$10        ; set X long
.3956ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3956d0	a0 00 00	ldy #$0000	                LDY #0
.3956d3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3956d5	c9 50		cmp #$50	                CMP #'P'
.3956d7	d0 15		bne $3956ee	                BNE fail_sig                        ; If not found, fail
.3956d9	c8		iny		                INY
.3956da	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956dc	c9 47		cmp #$47	                CMP #'G'
.3956de	d0 0e		bne $3956ee	                BNE fail_sig
.3956e0	c8		iny		                INY
.3956e1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956e3	c9 58		cmp #$58	                CMP #'X'
.3956e5	d0 07		bne $3956ee	                BNE fail_sig
.3956e7	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3956e8	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956ea	c9 01		cmp #$01	                CMP #$01
.3956ec	f0 06		beq $3956f4	                BEQ get_dest                        ; All passes: go to get the destination address
.3956ee	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3956f0	22 90 58 39	jsl $395890	                JSL IF_FAILURE
.3956f4					get_dest
.3956f4	c2 20		rep #$20	                REP #$20        ; set A long
.3956f6	c8		iny		                INY
.3956f7	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3956f9	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3956fb	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3956fd	c8		iny		                INY
.3956fe	c8		iny		                INY
.3956ff	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395701	85 36		sta $0356	                STA DOS_DST_PTR+2
.395703	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395705	c8		iny		                INY                                 ; Point to the first data byte
.395706	c8		iny		                INY
.395707					copy_loop
.395707	e2 20		sep #$20	                SEP #$20        ; set A short
.395709	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.39570b	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39570d	c2 20		rep #$20	                REP #$20        ; set A long
.39570f	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395711	d0 02		bne $395715	                BNE dec_file_size
.395713	e6 34		inc $0354	                INC DOS_DST_PTR
.395715	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395716	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395718	e9 01 00	sbc #$0001	                SBC #1
.39571b	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39571d	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39571f	e9 00 00	sbc #$0000	                SBC #0
.395722	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395724	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395726	d0 04		bne $39572c	                BNE next_byte
.395728	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39572a	f0 14		beq $395740	                BEQ done                            ; Yes: we're done
.39572c	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39572d	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395730	d0 d5		bne $395707	                BNE copy_loop                       ; No: keep copying
.395732	22 32 4c 39	jsl $394c32	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395736	b0 03		bcs $39573b	                BCS next_cluster
.395738	82 59 01	brl $395894	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.39573b	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.39573e	80 c7		bra $395707	                BRA copy_loop                       ; Go back to copying
.395740	82 58 01	brl $39589b	done            BRL IF_SUCCESS
.395743					IF_LOADRAW
.395743	c2 30		rep #$30	                REP #$30        ; set A&X long
.395745	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395748					copy_loop
.395748	e2 20		sep #$20	                SEP #$20        ; set A short
.39574a	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39574c	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39574e	c2 20		rep #$20	                REP #$20        ; set A long
.395750	38		sec		                SEC                         ; Count down the number of bytes left
.395751	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395753	e9 01 00	sbc #$0001	                SBC #1
.395756	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395758	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39575a	e9 00 00	sbc #$0000	                SBC #0
.39575d	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39575f	d0 04		bne $395765	                BNE continue
.395761	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395763	f0 1b		beq $395780	                BEQ close_file              ; If not: we're done
.395765	c8		iny		continue        INY
.395766	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395769	d0 dd		bne $395748	                BNE copy_loop               ; No: keep processing the bytes
.39576b	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.39576c	a5 34		lda $0354	                LDA DOS_DST_PTR
.39576e	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395771	85 34		sta $0354	                STA DOS_DST_PTR
.395773	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395775	69 00 00	adc #$0000	                ADC #0
.395778	85 36		sta $0356	                STA DOS_DST_PTR+2
.39577a	22 5b 54 39	jsl $39545b	                JSL IF_READ                 ; Yes: load the next cluster
.39577e	b0 c5		bcs $395745	                BCS copy_cluster            ; And start copying it
.395780					close_file
.395780	82 18 01	brl $39589b	ret_success     BRL IF_SUCCESS
.395783					IF_NULLBUFFER
.395783	5a		phy		                PHY
.395784	8b		phb		                PHB
.395785	0b		phd		                PHD
.395786	08		php		                PHP
.395787	48		pha		                PHA             ; begin setdbr macro
.395788	08		php		                PHP
.395789	e2 20		sep #$20	                SEP #$20        ; set A short
.39578b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39578d	48		pha		                PHA
.39578e	ab		plb		                PLB
.39578f	28		plp		                PLP
.395790	68		pla		                PLA             ; end setdbr macro
.395791	48		pha		                PHA             ; begin setdp macro
.395792	08		php		                PHP
.395793	c2 20		rep #$20	                REP #$20        ; set A long
.395795	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395798	5b		tcd		                TCD
.395799	28		plp		                PLP
.39579a	68		pla		                PLA             ; end setdp macro
.39579b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39579d	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3957a0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957a2	85 28		sta $0348	                STA DOS_TEMP
.3957a4	c8		iny		                INY
.3957a5	c8		iny		                INY
.3957a6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957a8	85 2a		sta $034a	                STA DOS_TEMP+2
.3957aa	a0 00 00	ldy #$0000	                LDY #0
.3957ad	a9 00 00	lda #$0000	                LDA #0
.3957b0	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3957b2	c8		iny		                INY
.3957b3	c8		iny		                INY
.3957b4	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3957b7	d0 f7		bne $3957b0	                BNE loop
.3957b9	28		plp		                PLP
.3957ba	2b		pld		                PLD
.3957bb	ab		plb		                PLB
.3957bc	7a		ply		                PLY
.3957bd	6b		rtl		                RTL
.3957be					IF_COPY2BUFF
.3957be	5a		phy		                PHY
.3957bf	8b		phb		                PHB
.3957c0	0b		phd		                PHD
.3957c1	08		php		                PHP
.3957c2	48		pha		                PHA             ; begin setdbr macro
.3957c3	08		php		                PHP
.3957c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3957c8	48		pha		                PHA
.3957c9	ab		plb		                PLB
.3957ca	28		plp		                PLP
.3957cb	68		pla		                PLA             ; end setdbr macro
.3957cc	48		pha		                PHA             ; begin setdp macro
.3957cd	08		php		                PHP
.3957ce	c2 20		rep #$20	                REP #$20        ; set A long
.3957d0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957d3	5b		tcd		                TCD
.3957d4	28		plp		                PLP
.3957d5	68		pla		                PLA             ; end setdp macro
.3957d6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957d8	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3957db	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957dd	85 28		sta $0348	                STA DOS_TEMP
.3957df	c8		iny		                INY
.3957e0	c8		iny		                INY
.3957e1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957e3	85 2a		sta $034a	                STA DOS_TEMP+2
.3957e5	a0 00 00	ldy #$0000	                LDY #0
.3957e8					copy_loop
.3957e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3957ea	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3957ec	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3957ee	c2 20		rep #$20	                REP #$20        ; set A long
.3957f0	c8		iny		                INY                         ; Count it
.3957f1	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.3957f4	f0 14		beq $39580a	                BEQ done                    ; Yes: we're done
.3957f6	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3957f8	c5 38		cmp $0358	                CMP DOS_END_PTR
.3957fa	d0 06		bne $395802	                BNE next_byte
.3957fc	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3957fe	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395800	f0 08		beq $39580a	                BEQ done                    ; Yes: we're done
.395802	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.395804	d0 e2		bne $3957e8	                BNE copy_loop
.395806	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395808	80 de		bra $3957e8	                BRA copy_loop               ; And try this next byte
.39580a	28		plp		done            PLP
.39580b	2b		pld		                PLD
.39580c	ab		plb		                PLB
.39580d	7a		ply		                PLY
.39580e	6b		rtl		                RTL
.39580f					IF_SAVE
.39580f	da		phx		                PHX
.395810	5a		phy		                PHY
.395811	0b		phd		                PHD
.395812	8b		phb		                PHB
.395813	08		php		                PHP
.395814	48		pha		                PHA             ; begin setdbr macro
.395815	08		php		                PHP
.395816	e2 20		sep #$20	                SEP #$20        ; set A short
.395818	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39581a	48		pha		                PHA
.39581b	ab		plb		                PLB
.39581c	28		plp		                PLP
.39581d	68		pla		                PLA             ; end setdbr macro
.39581e	48		pha		                PHA             ; begin setdp macro
.39581f	08		php		                PHP
.395820	c2 20		rep #$20	                REP #$20        ; set A long
.395822	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395825	5b		tcd		                TCD
.395826	28		plp		                PLP
.395827	68		pla		                PLA             ; end setdp macro
.395828	c2 30		rep #$30	                REP #$30        ; set A&X long
.39582a	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39582d	38		sec		                SEC
.39582e	a5 38		lda $0358	                LDA DOS_END_PTR
.395830	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395832	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395834	c8		iny		                INY
.395835	c8		iny		                INY
.395836	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395838	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.39583a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39583c	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39583f	18		clc		                CLC
.395840	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395842	69 01 00	adc #$0001	                ADC #1
.395845	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395847	90 09		bcc $395852	                BCC first_block
.395849	c8		iny		                INY
.39584a	c8		iny		                INY
.39584b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39584d	69 00 00	adc #$0000	                ADC #0
.395850	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395852	22 83 57 39	jsl $395783	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395856	22 be 57 39	jsl $3957be	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.39585a	22 ed 53 39	jsl $3953ed	                JSL IF_CREATE           ; Create file.
.39585e	b0 03		bcs $395863	                BCS check_for_end
.395860	82 31 00	brl $395894	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395863	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395865	c5 38		cmp $0358	                CMP DOS_END_PTR
.395867	d0 06		bne $39586f	                BNE next_block
.395869	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39586b	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39586d	f0 1d		beq $39588c	                BEQ done                ; Yes: we're done
.39586f	22 83 57 39	jsl $395783	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395873	22 be 57 39	jsl $3957be	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395877	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.39587a	a9 00 00	lda #$0000	                LDA #0
.39587d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39587f	c8		iny		                INY
.395880	c8		iny		                INY
.395881	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395883	22 c0 54 39	jsl $3954c0	                JSL IF_WRITE            ; Append to the file
.395887	b0 da		bcs $395863	                BCS check_for_end       ; And try again
.395889	82 08 00	brl $395894	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.39588c	5c 9b 58 39	jmp $39589b	done            JML IF_SUCCESS
.395890					IF_FAILURE
.395890	e2 20		sep #$20	                SEP #$20        ; set A short
.395892	85 0e		sta $032e	                STA DOS_STATUS
.395894	28		plp		IF_PASSFAILURE  PLP
.395895	18		clc		                CLC
.395896	ab		plb		                PLB
.395897	2b		pld		                PLD
.395898	7a		ply		                PLY
.395899	fa		plx		                PLX
.39589a	6b		rtl		                RTL
.39589b					IF_SUCCESS
.39589b	e2 20		sep #$20	                SEP #$20        ; set A short
.39589d	64 00		stz $0320	                STZ BIOS_STATUS
.39589f	64 0e		stz $032e	                STZ DOS_STATUS
.3958a1	28		plp		                PLP
.3958a2	38		sec		                SEC
.3958a3	ab		plb		                PLB
.3958a4	2b		pld		                PLD
.3958a5	7a		ply		                PLY
.3958a6	fa		plx		                PLX
.3958a7	6b		rtl		                RTL
.3958a8					IF_RUN
.3958a8	da		phx		                PHX
.3958a9	5a		phy		                PHY
.3958aa	0b		phd		                PHD
.3958ab	8b		phb		                PHB
.3958ac	08		php		                PHP
.3958ad	48		pha		                PHA             ; begin setdbr macro
.3958ae	08		php		                PHP
.3958af	e2 20		sep #$20	                SEP #$20        ; set A short
.3958b1	a9 00		lda #$00	                LDA #0
.3958b3	48		pha		                PHA
.3958b4	ab		plb		                PLB
.3958b5	28		plp		                PLP
.3958b6	68		pla		                PLA             ; end setdbr macro
.3958b7	48		pha		                PHA             ; begin setdp macro
.3958b8	08		php		                PHP
.3958b9	c2 20		rep #$20	                REP #$20        ; set A long
.3958bb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958be	5b		tcd		                TCD
.3958bf	28		plp		                PLP
.3958c0	68		pla		                PLA             ; end setdp macro
.3958c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3958c3	c2 10		rep #$10	                REP #$10        ; set X long
.3958c5	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3958c7	a2 00 00	ldx #$0000	                LDX #0
.3958ca	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3958ce	e8		inx		                INX
.3958cf	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3958d2	d0 f6		bne $3958ca	                BNE clr_fd_loop
.3958d4	c2 20		rep #$20	                REP #$20        ; set A long
.3958d6	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3958d9	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3958dd	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3958e0	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3958e4	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3958e6	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3958ea	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3958ec	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3958f0	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3958f3	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3958f5	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3958f7	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.3958fa	85 20		sta $0340	                STA DOS_FD_PTR
.3958fc	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3958ff	85 22		sta $0342	                STA DOS_FD_PTR+2
.395901	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395904	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395908	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39590c	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.395910	b0 14		bcs $395926	                BCS try_execute
.395912	82 7f ff	brl $395894	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395915					chk_execute
.395915	c2 20		rep #$20	                REP #$20        ; set A long
.395917	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395919	d0 0b		bne $395926	                BNE try_execute                         ; If so: call it
.39591b	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39591d	d0 07		bne $395926	                BNE try_execute
.39591f	e2 20		sep #$20	                SEP #$20        ; set A short
.395921	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395923	82 6a ff	brl $395890	                BRL IF_FAILURE
.395926					try_execute
.395926	e2 20		sep #$20	                SEP #$20        ; set A short
.395928	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.39592a	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.39592c	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395930	82 68 ff	brl $39589b	                BRL IF_SUCCESS                          ; Return success
.395933					IF_ALLOCFD
.395933	da		phx		                PHX
.395934	5a		phy		                PHY
.395935	0b		phd		                PHD
.395936	8b		phb		                PHB
.395937	08		php		                PHP
.395938	48		pha		                PHA             ; begin setdbr macro
.395939	08		php		                PHP
.39593a	e2 20		sep #$20	                SEP #$20        ; set A short
.39593c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39593e	48		pha		                PHA
.39593f	ab		plb		                PLB
.395940	28		plp		                PLP
.395941	68		pla		                PLA             ; end setdbr macro
.395942	48		pha		                PHA             ; begin setdp macro
.395943	08		php		                PHP
.395944	c2 20		rep #$20	                REP #$20        ; set A long
.395946	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395949	5b		tcd		                TCD
.39594a	28		plp		                PLP
.39594b	68		pla		                PLA             ; end setdp macro
.39594c	c2 10		rep #$10	                REP #$10        ; set X long
.39594e	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395951					chk_fd
.395951	e2 20		sep #$20	                SEP #$20        ; set A short
.395953	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395956	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395958	f0 14		beq $39596e	                BEQ found                           ; No: flag and return the found descriptor
.39595a					next_fd
.39595a	c2 20		rep #$20	                REP #$20        ; set A long
.39595c	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39595d	18		clc		                CLC
.39595e	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395961	aa		tax		                TAX
.395962	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395965	90 ea		bcc $395951	                BLT chk_fd                          ; No: check this new file descriptor
.395967	e2 20		sep #$20	                SEP #$20        ; set A short
.395969	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.39596b	82 22 ff	brl $395890	                BRL IF_FAILURE
.39596e	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395970	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395973	c2 20		rep #$20	                REP #$20        ; set A long
.395975	8a		txa		                TXA
.395976	18		clc		                CLC
.395977	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.39597a	85 20		sta $0340	                STA @b DOS_FD_PTR
.39597c	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.39597f	69 00 00	adc #$0000	                ADC #0
.395982	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395984	82 14 ff	brl $39589b	                BRL IF_SUCCESS                      ; Return this file descriptor
.395987					IF_FREEFD
.395987	da		phx		                PHX
.395988	5a		phy		                PHY
.395989	0b		phd		                PHD
.39598a	8b		phb		                PHB
.39598b	08		php		                PHP
.39598c	48		pha		                PHA             ; begin setdbr macro
.39598d	08		php		                PHP
.39598e	e2 20		sep #$20	                SEP #$20        ; set A short
.395990	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395992	48		pha		                PHA
.395993	ab		plb		                PLB
.395994	28		plp		                PLP
.395995	68		pla		                PLA             ; end setdbr macro
.395996	48		pha		                PHA             ; begin setdp macro
.395997	08		php		                PHP
.395998	c2 20		rep #$20	                REP #$20        ; set A long
.39599a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39599d	5b		tcd		                TCD
.39599e	28		plp		                PLP
.39599f	68		pla		                PLA             ; end setdp macro
.3959a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3959a2	c2 10		rep #$10	                REP #$10        ; set X long
.3959a4	a9 00		lda #$00	                LDA #0
.3959a6	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3959a8	82 f0 fe	brl $39589b	                BRL IF_SUCCESS
.3959ab					DOS_SRC2DST
.3959ab	da		phx		                PHX
.3959ac	5a		phy		                PHY
.3959ad	0b		phd		                PHD
.3959ae	8b		phb		                PHB
.3959af	08		php		                PHP
.3959b0	48		pha		                PHA             ; begin setdp macro
.3959b1	08		php		                PHP
.3959b2	c2 20		rep #$20	                REP #$20        ; set A long
.3959b4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959b7	5b		tcd		                TCD
.3959b8	28		plp		                PLP
.3959b9	68		pla		                PLA             ; end setdp macro
.3959ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3959bc	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3959bf	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3959c1	aa		tax		                TAX                                     ; X := source buffer address
.3959c2	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3959c4	a8		tay		                TAY                                     ; Y := destination buffer address
.3959c5	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3959c8	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.3959cb	28		plp		                PLP
.3959cc	ab		plb		                PLB
.3959cd	2b		pld		                PLD
.3959ce	7a		ply		                PLY
.3959cf	fa		plx		                PLX
.3959d0	6b		rtl		                RTL
.3959d1					IF_COPY
.3959d1	da		phx		                PHX
.3959d2	5a		phy		                PHY
.3959d3	0b		phd		                PHD
.3959d4	8b		phb		                PHB
.3959d5	08		php		                PHP
.3959d6	48		pha		                PHA             ; begin setdbr macro
.3959d7	08		php		                PHP
.3959d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3959da	a9 00		lda #$00	                LDA #0
.3959dc	48		pha		                PHA
.3959dd	ab		plb		                PLB
.3959de	28		plp		                PLP
.3959df	68		pla		                PLA             ; end setdbr macro
.3959e0	48		pha		                PHA             ; begin setdp macro
.3959e1	08		php		                PHP
.3959e2	c2 20		rep #$20	                REP #$20        ; set A long
.3959e4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959e7	5b		tcd		                TCD
.3959e8	28		plp		                PLP
.3959e9	68		pla		                PLA             ; end setdp macro
.3959ea	22 33 59 39	jsl $395933	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.3959ee	b0 03		bcs $3959f3	                BCS set_src_path
.3959f0	82 a1 fe	brl $395894	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.3959f3					set_src_path
.3959f3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3959f5	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.3959f8	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.3959fa	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3959fc	c8		iny		                INY
.3959fd	c8		iny		                INY
.3959fe	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395a00	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a02					alloc_dest
.395a02	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a04	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395a06	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395a08	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a0a	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395a0c	22 33 59 39	jsl $395933	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395a10	b0 0f		bcs $395a21	                BCS set_paths                   ; If everything is ok... start setting the paths
.395a12	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a14	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a16	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a18	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a1a	22 87 59 39	jsl $395987	                JSL IF_FREEFD                   ; And free it
.395a1e	82 73 fe	brl $395894	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395a21					set_paths
.395a21	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a23	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395a25	85 34		sta $0354	                STA @b DOS_DST_PTR
.395a27	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a29	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395a2b	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395a2e	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395a30	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a32	c8		iny		                INY
.395a33	c8		iny		                INY
.395a34	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395a36	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a38	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a3a	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a3c	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a3e	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a40	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395a44	b0 0f		bcs $395a55	                BCS src_open                    ; If success, work with the openned file
.395a46	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a48	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a4a	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a4c	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a4e	22 87 59 39	jsl $395987	                JSL IF_FREEFD                   ; And free it
.395a52	82 bd ff	brl $395a12	                BRL err_free_src_fd             ; Free the source file descriptor
.395a55	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395a58	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a5a	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a5c	c8		iny		                INY
.395a5d	c8		iny		                INY
.395a5e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a60	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a62	22 ab 59 39	jsl $3959ab	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395a66	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a68	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a6a	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a6c	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a6e	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395a72	b0 0f		bcs $395a83	                BCS read_next                   ; If sucessful, try to get the next cluster
.395a74	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a76	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a78	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a7a	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a7c	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395a80	82 c3 ff	brl $395a46	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395a83					read_next
.395a83	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a85	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a87	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a89	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a8b	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395a8f	b0 19		bcs $395aaa	                BCS copy2dest                   ; If successful, copy the sector
.395a91	e2 20		sep #$20	                SEP #$20        ; set A short
.395a93	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395a95	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395a97	f0 32		beq $395acb	                BEQ file_copied                 ; Yes: we're done copying
.395a99					err_dest_close
.395a99	c2 20		rep #$20	                REP #$20        ; set A long
.395a9b	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a9d	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a9f	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395aa1	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395aa3	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395aa7	82 ca ff	brl $395a74	                BRL err_src_close               ; Close the source and throw an error
.395aaa					copy2dest
.395aaa	22 ab 59 39	jsl $3959ab	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395aae	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395ab1	a9 00 00	lda #$0000	                LDA #0
.395ab4	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ab6	c8		iny		                INY
.395ab7	c8		iny		                INY
.395ab8	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395aba	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395abc	85 20		sta $0340	                STA @b DOS_FD_PTR
.395abe	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ac0	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ac2	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395ac6	90 d1		bcc $395a99	                BCC err_dest_close              ; If error: close all files and throw the error
.395ac8	82 b8 ff	brl $395a83	                BRL read_next                   ; Otherwise: repeat the loop
.395acb					file_copied
.395acb	c2 20		rep #$20	                REP #$20        ; set A long
.395acd	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395acf	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ad1	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ad3	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ad5	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395ad9	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395adb	85 20		sta $0340	                STA @b DOS_FD_PTR
.395add	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395adf	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ae1	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395ae5	82 b3 fd	brl $39589b	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395ae8					UART_SELECT
.395ae8	08		php		            PHP
.395ae9	c2 20		rep #$20	                REP #$20        ; set A long
.395aeb	c9 02 00	cmp #$0002	            CMP #2
.395aee	f0 07		beq $395af7	            BEQ is_COM2
.395af0	c2 20		rep #$20	                REP #$20        ; set A long
.395af2	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395af5	80 05		bra $395afc	            BRA setaddr
.395af7					is_COM2
.395af7	c2 20		rep #$20	                REP #$20        ; set A long
.395af9	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395afc	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395b00	e2 20		sep #$20	                SEP #$20        ; set A short
.395b02	a9 af		lda #$af	            LDA #`UART1_BASE
.395b04	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395b08	28		plp		            PLP
.395b09	6b		rtl		            RTL
.395b0a					UART_SETBPS
.395b0a	08		php		            PHP
.395b0b	0b		phd		            PHD
.395b0c	48		pha		                PHA             ; begin setdp macro
.395b0d	08		php		                PHP
.395b0e	c2 20		rep #$20	                REP #$20        ; set A long
.395b10	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b13	5b		tcd		                TCD
.395b14	28		plp		                PLP
.395b15	68		pla		                PLA             ; end setdp macro
.395b16	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b18	48		pha		            PHA
.395b19	e2 20		sep #$20	                SEP #$20        ; set A short
.395b1b	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395b1e	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b20	09 80		ora #$80	            ORA #LCR_DLB
.395b22	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b24	c2 20		rep #$20	                REP #$20        ; set A long
.395b26	68		pla		            PLA
.395b27	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395b2a	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395b2c	e2 20		sep #$20	                SEP #$20        ; set A short
.395b2e	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395b31	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b33	49 80		eor #$80	            EOR #LCR_DLB
.395b35	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b37	2b		pld		            PLD
.395b38	28		plp		            PLP
.395b39	6b		rtl		            RTL
.395b3a					UART_SETLCR
.395b3a	08		php		            PHP
.395b3b	0b		phd		            PHD
.395b3c	48		pha		                PHA             ; begin setdp macro
.395b3d	08		php		                PHP
.395b3e	c2 20		rep #$20	                REP #$20        ; set A long
.395b40	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b43	5b		tcd		                TCD
.395b44	28		plp		                PLP
.395b45	68		pla		                PLA             ; end setdp macro
.395b46	e2 20		sep #$20	                SEP #$20        ; set A short
.395b48	c2 10		rep #$10	                REP #$10        ; set X long
.395b4a	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395b4c	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395b4f	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b51	2b		pld		            PLD
.395b52	28		plp		            PLP
.395b53	6b		rtl		            RTL
.395b54					UART_INIT
.395b54	08		php		            PHP
.395b55	0b		phd		            PHD
.395b56	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b58	48		pha		                PHA             ; begin setdp macro
.395b59	08		php		                PHP
.395b5a	c2 20		rep #$20	                REP #$20        ; set A long
.395b5c	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b5f	5b		tcd		                TCD
.395b60	28		plp		                PLP
.395b61	68		pla		                PLA             ; end setdp macro
.395b62	a9 01 00	lda #$0001	            LDA #UART_115200
.395b65	22 0a 5b 39	jsl $395b0a	            JSL UART_SETBPS
.395b69	e2 20		sep #$20	                SEP #$20        ; set A short
.395b6b	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395b6d	22 3a 5b 39	jsl $395b3a	            JSL UART_SETLCR
.395b71	a9 e1		lda #$e1	            LDA #%11100001
.395b73	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395b76	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b78	2b		pld		            PLD
.395b79	28		plp		            PLP
.395b7a	6b		rtl		            RTL
.395b7b					UART_HASBYT
.395b7b	08		php		            PHP
.395b7c	0b		phd		            PHD
.395b7d	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b7f	48		pha		                PHA             ; begin setdp macro
.395b80	08		php		                PHP
.395b81	c2 20		rep #$20	                REP #$20        ; set A long
.395b83	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b86	5b		tcd		                TCD
.395b87	28		plp		                PLP
.395b88	68		pla		                PLA             ; end setdp macro
.395b89	e2 20		sep #$20	                SEP #$20        ; set A short
.395b8b	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395b8e	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395b90	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395b92	d0 04		bne $395b98	            BNE ret_true            ; If flag is set, return true
.395b94	2b		pld		ret_false   PLD                     ; Return false
.395b95	28		plp		            PLP
.395b96	18		clc		            CLC
.395b97	6b		rtl		            RTL
.395b98	2b		pld		ret_true    PLD                     ; Return true
.395b99	28		plp		            PLP
.395b9a	38		sec		            SEC
.395b9b	6b		rtl		            RTL
.395b9c					UART_GETC
.395b9c	08		php		            PHP
.395b9d	0b		phd		            PHD
.395b9e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ba0	48		pha		                PHA             ; begin setdp macro
.395ba1	08		php		                PHP
.395ba2	c2 20		rep #$20	                REP #$20        ; set A long
.395ba4	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ba7	5b		tcd		                TCD
.395ba8	28		plp		                PLP
.395ba9	68		pla		                PLA             ; end setdp macro
.395baa	e2 20		sep #$20	                SEP #$20        ; set A short
.395bac	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395baf	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395bb1	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395bb3	f0 fa		beq $395baf	            BEQ wait_getc           ; If the flag is clear, wait
.395bb5	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395bb8	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bba	2b		pld		            PLD
.395bbb	28		plp		            PLP
.395bbc	6b		rtl		            RTL
.395bbd					UART_PUTC
.395bbd	08		php		            PHP
.395bbe	0b		phd		            PHD
.395bbf	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bc1	48		pha		                PHA             ; begin setdp macro
.395bc2	08		php		                PHP
.395bc3	c2 20		rep #$20	                REP #$20        ; set A long
.395bc5	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bc8	5b		tcd		                TCD
.395bc9	28		plp		                PLP
.395bca	68		pla		                PLA             ; end setdp macro
.395bcb	e2 20		sep #$20	                SEP #$20        ; set A short
.395bcd	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395bce	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395bd1	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395bd3	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395bd5	f0 fa		beq $395bd1	            BEQ wait_putc
.395bd7	68		pla		            PLA
.395bd8	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395bdb	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bdd	2b		pld		            PLD
.395bde	28		plp		            PLP
.395bdf	6b		rtl		            RTL
.395be0					UART_PUTS
.395be0	08		php		            PHP
.395be1	e2 20		sep #$20	                SEP #$20        ; set A short
.395be3	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395be6	f0 07		beq $395bef	            BEQ done
.395be8	22 bd 5b 39	jsl $395bbd	            JSL UART_PUTC
.395bec	e8		inx		            INX
.395bed	80 f4		bra $395be3	            BRA put_loop
.395bef	28		plp		done        PLP
.395bf0	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395bf1					JOYSTICK_SET_NES_MODE
.395bf1	e2 20		sep #$20	                SEP #$20        ; set A short
.395bf3	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395bf7	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395bf9	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395bfd	6b		rtl		          RTL
.395bfe					JOYSTICK_SET_SNES_MODE
.395bfe	e2 20		sep #$20	                SEP #$20        ; set A short
.395c00	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c04	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395c06	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395c08	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c0c	6b		rtl		          RTL
.395c0d					JOYSTICK_ENABLE_NES_SNES_PORT0
.395c0d	e2 20		sep #$20	                SEP #$20        ; set A short
.395c0f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c13	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c15	09 01		ora #$01	          ORA #NES_SNES_EN0
.395c17	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c1b	6b		rtl		          RTL
.395c1c					JOYSTICK_ENABLE_NES_SNES_PORT1
.395c1c	e2 20		sep #$20	                SEP #$20        ; set A short
.395c1e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c22	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395c24	09 02		ora #$02	          ORA #NES_SNES_EN1
.395c26	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c2a	6b		rtl		          RTL
.395c2b					JOYSTICK_DISABLE_NES_SNES_PORT0
.395c2b	e2 20		sep #$20	                SEP #$20        ; set A short
.395c2d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c31	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c33	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c37	6b		rtl		          RTL
.395c38					JOYSTICK_DISABLE_NES_SNES_PORT1
.395c38	e2 20		sep #$20	                SEP #$20        ; set A short
.395c3a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c3e	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395c40	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c44	6b		rtl		          RTL
.395c45					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395c45	e2 20		sep #$20	                SEP #$20        ; set A short
.395c47	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c4b	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395c4d	c9 00		cmp #$00	          CMP #$00
.395c4f	f0 14		beq $395c65	          BEQ END_OF_JOYSTICK_POLL
.395c51	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c55	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395c57	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c5b					JOYSTICK_POLLING_ISNOTOVER
.395c5b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395c5f	29 40		and #$40	          AND #NES_SNES_DONE
.395c61	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395c63	d0 f6		bne $395c5b	          BNE JOYSTICK_POLLING_ISNOTOVER
.395c65					END_OF_JOYSTICK_POLL
.395c65	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395c66					SDC_TEST
.395c66	8b		phb		                PHB
.395c67	0b		phd		                PHD
.395c68	08		php		                PHP
.395c69	48		pha		                PHA             ; begin setdbr macro
.395c6a	08		php		                PHP
.395c6b	e2 20		sep #$20	                SEP #$20        ; set A short
.395c6d	a9 00		lda #$00	                LDA #0
.395c6f	48		pha		                PHA
.395c70	ab		plb		                PLB
.395c71	28		plp		                PLP
.395c72	68		pla		                PLA             ; end setdbr macro
.395c73	48		pha		                PHA             ; begin setdp macro
.395c74	08		php		                PHP
.395c75	c2 20		rep #$20	                REP #$20        ; set A long
.395c77	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c7a	5b		tcd		                TCD
.395c7b	28		plp		                PLP
.395c7c	68		pla		                PLA             ; end setdp macro
.395c7d	e2 20		sep #$20	                SEP #$20        ; set A short
.395c7f	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395c81	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395c84	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395c88	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395c8c	22 cc 5c 39	jsl $395ccc	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395c90	b0 03		bcs $395c95	                BCS init_ok
.395c92	82 15 00	brl $395caa	                BRL done
.395c95	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395c97	85 01		sta $0321	                STA BIOS_DEV
.395c99	22 c7 44 39	jsl $3944c7	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395c9d	b0 03		bcs $395ca2	                BCS mount_ok
.395c9f	82 08 00	brl $395caa	                BRL done
.395ca2	22 2c 55 39	jsl $39552c	mount_ok        JSL IF_DIROPEN
.395ca6	b0 02		bcs $395caa	                BCS all_ok
.395ca8	80 00		bra $395caa	                BRA done
.395caa					all_ok
.395caa	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395cae	28		plp		                PLP
.395caf	2b		pld		                PLD
.395cb0	ab		plb		                PLB
.395cb1	6b		rtl		                RTL
.395cb2					SDC_WAITBUSY
.395cb2	08		php		                PHP
.395cb3	e2 20		sep #$20	                SEP #$20        ; set A short
.395cb5	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395cb9	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395cbb	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395cbd	f0 f6		beq $395cb5	                BEQ wait_xact
.395cbf	28		plp		                PLP
.395cc0	6b		rtl		                RTL
.395cc1					SDC_RESET
.395cc1	08		php		                PHP
.395cc2	e2 20		sep #$20	                SEP #$20        ; set A short
.395cc4	a9 01		lda #$01	                LDA #1
.395cc6	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395cca	28		plp		                PLP
.395ccb	6b		rtl		                RTL
.395ccc	0b		phd		SDC_INIT        PHD
.395ccd	8b		phb		                PHB
.395cce	08		php		                PHP
.395ccf	48		pha		                PHA             ; begin setdbr macro
.395cd0	08		php		                PHP
.395cd1	e2 20		sep #$20	                SEP #$20        ; set A short
.395cd3	a9 00		lda #$00	                LDA #0
.395cd5	48		pha		                PHA
.395cd6	ab		plb		                PLB
.395cd7	28		plp		                PLP
.395cd8	68		pla		                PLA             ; end setdbr macro
.395cd9	48		pha		                PHA             ; begin setdp macro
.395cda	08		php		                PHP
.395cdb	c2 20		rep #$20	                REP #$20        ; set A long
.395cdd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ce0	5b		tcd		                TCD
.395ce1	28		plp		                PLP
.395ce2	68		pla		                PLA             ; end setdp macro
.395ce3	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce5	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395ce7	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395ceb	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395ced	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395cf1	22 b2 5c 39	jsl $395cb2	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395cf5	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395cf9	d0 07		bne $395d02	                BNE ret_error                       ; Is there one? Process the error
.395cfb	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395cfd	28		plp		                PLP
.395cfe	ab		plb		                PLB
.395cff	2b		pld		                PLD
.395d00	38		sec		                SEC
.395d01	6b		rtl		                RTL
.395d02	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d05	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395d07	85 00		sta $0320	                STA BIOS_STATUS
.395d09	28		plp		                PLP
.395d0a	ab		plb		                PLB
.395d0b	2b		pld		                PLD
.395d0c	18		clc		                CLC
.395d0d	6b		rtl		                RTL
.395d0e					SDC_GETBLOCK
.395d0e	0b		phd		                PHD
.395d0f	8b		phb		                PHB
.395d10	08		php		                PHP
.395d11	48		pha		                PHA             ; begin setdbr macro
.395d12	08		php		                PHP
.395d13	e2 20		sep #$20	                SEP #$20        ; set A short
.395d15	a9 00		lda #$00	                LDA #0
.395d17	48		pha		                PHA
.395d18	ab		plb		                PLB
.395d19	28		plp		                PLP
.395d1a	68		pla		                PLA             ; end setdbr macro
.395d1b	48		pha		                PHA             ; begin setdp macro
.395d1c	08		php		                PHP
.395d1d	c2 20		rep #$20	                REP #$20        ; set A long
.395d1f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d22	5b		tcd		                TCD
.395d23	28		plp		                PLP
.395d24	68		pla		                PLA             ; end setdp macro
.395d25	e2 20		sep #$20	                SEP #$20        ; set A short
.395d27	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395d2b	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395d2d	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d31	a9 00		lda #$00	                LDA #0
.395d33	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395d37	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395d39	0a		asl a		                ASL A
.395d3a	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395d3e	a5 03		lda $0323	                LDA BIOS_LBA+1
.395d40	2a		rol a		                ROL A
.395d41	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395d45	a5 04		lda $0324	                LDA BIOS_LBA+2
.395d47	2a		rol a		                ROL A
.395d48	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395d4c	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395d4e	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395d52	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d54	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d58	22 b2 5c 39	jsl $395cb2	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395d5c	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d60	d0 36		bne $395d98	                BNE ret_error                       ; Is there one? Process the error
.395d62	e2 20		sep #$20	                SEP #$20        ; set A short
.395d64	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395d68	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395d6a	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395d6e	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395d70	c2 10		rep #$10	                REP #$10        ; set X long
.395d72	a0 00 00	ldy #$0000	                LDY #0
.395d75	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395d79	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395d7b	c8		iny		                INY                                 ; Advance to the next byte
.395d7c	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395d7f	d0 f4		bne $395d75	                BNE loop_rd                         ; No: keep reading
.395d81	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d85	d0 11		bne $395d98	                BNE ret_error                       ; Is there one? Process the error
.395d87	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d89	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d8d	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d8f	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d93	28		plp		                PLP
.395d94	ab		plb		                PLB
.395d95	2b		pld		                PLD
.395d96	38		sec		                SEC
.395d97	6b		rtl		                RTL
.395d98	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d9b	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395d9d	85 00		sta $0320	                STA BIOS_STATUS
.395d9f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395da3	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395da5	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395da9	28		plp		                PLP
.395daa	ab		plb		                PLB
.395dab	2b		pld		                PLD
.395dac	18		clc		                CLC
.395dad	6b		rtl		                RTL
.395dae					SDC_PUTBLOCK
.395dae	0b		phd		                PHD
.395daf	8b		phb		                PHB
.395db0	08		php		                PHP
.395db1	48		pha		                PHA             ; begin setdbr macro
.395db2	08		php		                PHP
.395db3	e2 20		sep #$20	                SEP #$20        ; set A short
.395db5	a9 00		lda #$00	                LDA #0
.395db7	48		pha		                PHA
.395db8	ab		plb		                PLB
.395db9	28		plp		                PLP
.395dba	68		pla		                PLA             ; end setdbr macro
.395dbb	48		pha		                PHA             ; begin setdp macro
.395dbc	08		php		                PHP
.395dbd	c2 20		rep #$20	                REP #$20        ; set A long
.395dbf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395dc2	5b		tcd		                TCD
.395dc3	28		plp		                PLP
.395dc4	68		pla		                PLA             ; end setdp macro
.395dc5	e2 20		sep #$20	                SEP #$20        ; set A short
.395dc7	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395dcb	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395dcd	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395dd1	c2 10		rep #$10	                REP #$10        ; set X long
.395dd3	a0 00 00	ldy #$0000	                LDY #0
.395dd6	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395dd8	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395ddc	c8		iny		                INY                                 ; Advance to the next byte
.395ddd	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395de0	d0 f4		bne $395dd6	                BNE loop_wr                         ; No: keep writing
.395de2	a9 00		lda #$00	                LDA #0
.395de4	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395de8	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395dea	0a		asl a		                ASL A
.395deb	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395def	a5 03		lda $0323	                LDA BIOS_LBA+1
.395df1	2a		rol a		                ROL A
.395df2	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395df6	a5 04		lda $0324	                LDA BIOS_LBA+2
.395df8	2a		rol a		                ROL A
.395df9	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395dfd	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395dff	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e03	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e05	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e09	22 b2 5c 39	jsl $395cb2	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e0d	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e11	d0 11		bne $395e24	                BNE ret_error                       ; Is there one? Process the error
.395e13	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e15	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e19	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e1b	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e1f	28		plp		                PLP
.395e20	ab		plb		                PLB
.395e21	2b		pld		                PLD
.395e22	38		sec		                SEC
.395e23	6b		rtl		                RTL
.395e24	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e27	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e29	85 00		sta $0320	                STA BIOS_STATUS
.395e2b	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e2f	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e31	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e35	28		plp		                PLP
.395e36	ab		plb		                PLB
.395e37	2b		pld		                PLD
.395e38	18		clc		                CLC
.395e39	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395e3a					FDC_TEST
.395e3a	8b		phb		                    PHB
.395e3b	0b		phd		                    PHD
.395e3c	08		php		                    PHP
.395e3d	48		pha		                PHA             ; begin setdbr macro
.395e3e	08		php		                PHP
.395e3f	e2 20		sep #$20	                SEP #$20        ; set A short
.395e41	a9 00		lda #$00	                LDA #0
.395e43	48		pha		                PHA
.395e44	ab		plb		                PLB
.395e45	28		plp		                PLP
.395e46	68		pla		                PLA             ; end setdbr macro
.395e47	48		pha		                PHA             ; begin setdp macro
.395e48	08		php		                PHP
.395e49	c2 20		rep #$20	                REP #$20        ; set A long
.395e4b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e4e	5b		tcd		                TCD
.395e4f	28		plp		                PLP
.395e50	68		pla		                PLA             ; end setdp macro
.395e51	e2 20		sep #$20	                SEP #$20        ; set A short
.395e53	a9 f0		lda #$f0	                    LDA #$F0
.395e55	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395e58	22 ff 0a 39	jsl $390aff	                    JSL ICLRSCREEN
.395e5c	22 23 09 39	jsl $390923	                    JSL ICSRHOME
.395e60	c2 30		rep #$30	                REP #$30        ; set A&X long
.395e62	22 30 61 39	jsl $396130	                    JSL FDC_Init
.395e66	b0 03		bcs $395e6b	                    BCS init_ok
.395e68	82 20 00	brl $395e8b	                    BRL motor_off
.395e6b	22 27 68 39	jsl $396827	init_ok             JSL FDC_CHK_MEDIA
.395e6f	90 03		bcc $395e74	                    BCC no_media
.395e71	82 03 00	brl $395e77	                    BRL is_ok1
.395e74					no_media
.395e74	82 14 00	brl $395e8b	                    BRL motor_off
.395e77	22 be 66 39	jsl $3966be	is_ok1              JSL FDC_MOUNT
.395e7b	90 03		bcc $395e80	                    BCC mount_err
.395e7d	82 03 00	brl $395e83	                    BRL is_ok2
.395e80					mount_err
.395e80	82 08 00	brl $395e8b	                    BRL motor_off
.395e83	22 97 5e 39	jsl $395e97	is_ok2              JSL FDC_TEST_PUTBLOCK
.395e87	b0 02		bcs $395e8b	                    BCS all_ok
.395e89	80 00		bra $395e8b	                    BRA motor_off
.395e8b					all_ok
.395e8b	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395e8f	22 dc 61 39	jsl $3961dc	                    JSL FDC_Motor_Off
.395e93	28		plp		                    PLP
.395e94	2b		pld		                    PLD
.395e95	ab		plb		                    PLB
.395e96	6b		rtl		                    RTL
.395e97					FDC_TEST_PUTBLOCK
.395e97	e2 20		sep #$20	                SEP #$20        ; set A short
.395e99	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395e9b	a2 00 00	ldx #$0000	                    LDX #0
.395e9e	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395ea2	1a		inc a		                    INC A
.395ea3	e8		inx		                    INX
.395ea4	e0 00 02	cpx #$0200	                    CPX #512
.395ea7	d0 f5		bne $395e9e	                    BNE init_loop
.395ea9	c2 20		rep #$20	                REP #$20        ; set A long
.395eab	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395eae	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395eb2	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395eb5	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395eb9	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395ebc	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395ec0	a9 00 00	lda #$0000	                    LDA #0
.395ec3	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395ec7	22 52 66 39	jsl $396652	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395ecb	6b		rtl		                    RTL
>395ecc	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395ed4	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395ee4	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395ee8					FDC_Check_RQM
.395ee8	0b		phd		                    PHD
.395ee9	08		php		                    PHP
.395eea	48		pha		                PHA             ; begin setdp macro
.395eeb	08		php		                PHP
.395eec	c2 20		rep #$20	                REP #$20        ; set A long
.395eee	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ef1	5b		tcd		                TCD
.395ef2	28		plp		                PLP
.395ef3	68		pla		                PLA             ; end setdp macro
.395ef4	e2 20		sep #$20	                SEP #$20        ; set A short
.395ef6	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ef8	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395efc	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395efe	30 12		bmi $395f12	                    BMI time_out            ; If so: signal a time out
.395f00	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f04	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f06	f0 f4		beq $395efc	                    BEQ loop
.395f08	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f0a	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f0e	28		plp		                    PLP
.395f0f	2b		pld		                    PLD
.395f10	38		sec		                    SEC
.395f11	60		rts		                    RTS
.395f12	28		plp		time_out            PLP
.395f13	2b		pld		                    PLD
.395f14	18		clc		                    CLC
.395f15	60		rts		                    RTS
.395f16					FDC_Check_DRV0_BSY
.395f16	0b		phd		                    PHD
.395f17	08		php		                    PHP
.395f18	48		pha		                PHA             ; begin setdp macro
.395f19	08		php		                PHP
.395f1a	c2 20		rep #$20	                REP #$20        ; set A long
.395f1c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f1f	5b		tcd		                TCD
.395f20	28		plp		                PLP
.395f21	68		pla		                PLA             ; end setdp macro
.395f22	e2 20		sep #$20	                SEP #$20        ; set A short
.395f24	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f26	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f2a	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f2c	30 12		bmi $395f40	                    BMI time_out            ; If so: signal a time out
.395f2e	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f32	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395f34	d0 f4		bne $395f2a	                    BNE loop
.395f36	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f38	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f3c	28		plp		                    PLP
.395f3d	2b		pld		                    PLD
.395f3e	38		sec		                    SEC
.395f3f	60		rts		                    RTS
.395f40	28		plp		time_out            PLP
.395f41	2b		pld		                    PLD
.395f42	18		clc		                    CLC
.395f43	60		rts		                    RTS
.395f44					FDC_Check_CMD_BSY
.395f44	0b		phd		                    PHD
.395f45	08		php		                    PHP
.395f46	48		pha		                PHA             ; begin setdp macro
.395f47	08		php		                PHP
.395f48	c2 20		rep #$20	                REP #$20        ; set A long
.395f4a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f4d	5b		tcd		                TCD
.395f4e	28		plp		                PLP
.395f4f	68		pla		                PLA             ; end setdp macro
.395f50	e2 20		sep #$20	                SEP #$20        ; set A short
.395f52	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f54	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f58	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f5a	30 12		bmi $395f6e	                    BMI time_out            ; If so: signal a time out
.395f5c	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f60	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395f62	d0 f4		bne $395f58	                    BNE loop
.395f64	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f66	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f6a	28		plp		                    PLP
.395f6b	2b		pld		                    PLD
.395f6c	38		sec		                    SEC
.395f6d	60		rts		                    RTS
.395f6e	28		plp		time_out            PLP
.395f6f	2b		pld		                    PLD
.395f70	18		clc		                    CLC
.395f71	60		rts		                    RTS
.395f72					FDC_Can_Read_Data
.395f72	0b		phd		                    PHD
.395f73	08		php		                    PHP
.395f74	48		pha		                PHA             ; begin setdp macro
.395f75	08		php		                PHP
.395f76	c2 20		rep #$20	                REP #$20        ; set A long
.395f78	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f7b	5b		tcd		                TCD
.395f7c	28		plp		                PLP
.395f7d	68		pla		                PLA             ; end setdp macro
.395f7e	e2 20		sep #$20	                SEP #$20        ; set A short
.395f80	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f82	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f86	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f88	30 14		bmi $395f9e	                    BMI time_out            ; If so: signal a time out
.395f8a	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f8e	29 40		and #$40	                    AND #FDC_MSR_DIO
.395f90	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395f92	d0 f2		bne $395f86	                    BNE loop
.395f94	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f96	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395f9a	28		plp		                    PLP
.395f9b	2b		pld		                    PLD
.395f9c	38		sec		                    SEC
.395f9d	60		rts		                    RTS
.395f9e	28		plp		time_out            PLP
.395f9f	2b		pld		                    PLD
.395fa0	18		clc		                    CLC
.395fa1	60		rts		                    RTS
.395fa2					FDC_CAN_WRITE
.395fa2	0b		phd		                    PHD
.395fa3	08		php		                    PHP
.395fa4	48		pha		                PHA             ; begin setdp macro
.395fa5	08		php		                PHP
.395fa6	c2 20		rep #$20	                REP #$20        ; set A long
.395fa8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fab	5b		tcd		                TCD
.395fac	28		plp		                PLP
.395fad	68		pla		                PLA             ; end setdp macro
.395fae	e2 20		sep #$20	                SEP #$20        ; set A short
.395fb0	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fb2	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395fb6	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fb8	30 14		bmi $395fce	                    BMI time_out            ; If so: signal a time out
.395fba	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fbe	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fc0	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395fc2	d0 f2		bne $395fb6	                    BNE loop
.395fc4	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fc6	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.395fca	28		plp		                    PLP
.395fcb	2b		pld		                    PLD
.395fcc	38		sec		                    SEC
.395fcd	60		rts		                    RTS
.395fce	28		plp		time_out            PLP
.395fcf	2b		pld		                    PLD
.395fd0	18		clc		                    CLC
.395fd1	60		rts		                    RTS
.395fd2					FDC_DELAY_10MS
.395fd2	da		phx		                    PHX
.395fd3	08		php		                    PHP
.395fd4	c2 10		rep #$10	                REP #$10        ; set X long
.395fd6	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395fd9	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395fda	ca		dex		                    DEX
.395fdb	e0 00 00	cpx #$0000	                    CPX #0
.395fde	d0 f9		bne $395fd9	                    BNE loop
.395fe0	28		plp		                    PLP
.395fe1	fa		plx		                    PLX
.395fe2	6b		rtl		                    RTL
.395fe3					FDC_COMMAND
.395fe3	da		phx		                    PHX
.395fe4	8b		phb		                    PHB
.395fe5	0b		phd		                    PHD
.395fe6	08		php		                    PHP
.395fe7	48		pha		                PHA             ; begin setdbr macro
.395fe8	08		php		                PHP
.395fe9	e2 20		sep #$20	                SEP #$20        ; set A short
.395feb	a9 00		lda #$00	                LDA #0
.395fed	48		pha		                PHA
.395fee	ab		plb		                PLB
.395fef	28		plp		                PLP
.395ff0	68		pla		                PLA             ; end setdbr macro
.395ff1	48		pha		                PHA             ; begin setdp macro
.395ff2	08		php		                PHP
.395ff3	c2 20		rep #$20	                REP #$20        ; set A long
.395ff5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ff8	5b		tcd		                TCD
.395ff9	28		plp		                PLP
.395ffa	68		pla		                PLA             ; end setdp macro
.395ffb	22 d2 5f 39	jsl $395fd2	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395fff	e2 30		sep #$30	                SEP #$30        ; set A&X short
.396001	a2 00		ldx #$00	                    LDX #0
.396003	a9 00		lda #$00	                    LDA #0
.396005	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.396008	e8		inx		                    INX
.396009	e0 10		cpx #$10	                    CPX #16
.39600b	d0 f8		bne $396005	                    BNE clr_results
.39600d	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.396011	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396013	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396015	f0 04		beq $39601b	                    BEQ start_send                          ; If so, start sending
.396017	22 30 61 39	jsl $396130	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.39601b					start_send
.39601b	e2 10		sep #$10	                SEP #$10        ; set X short
.39601d	a2 00		ldx #$00	                    LDX #0
.39601f	20 e8 5e	jsr $395ee8	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.396022	b0 03		bcs $396027	                    BCS send_param
.396024	82 5e 00	brl $396085	                    BRL time_out                            ; If there was a timeout, flag the time out
.396027	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.39602a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.39602e	22 d2 5f 39	jsl $395fd2	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.396032	e8		inx		                    INX                                     ; Advance to the next byte
.396033	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.396036	d0 e7		bne $39601f	                    BNE send_loop                           ; Keep sending until we've sent them all
.396038	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.39603b	d0 03		bne $396040	                    BNE chk_data_dir
.39603d	82 80 00	brl $3960c0	                    BRL result_phase                        ; If 0: we just want a result
.396040	10 3c		bpl $39607e	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.396042					wr_data
.396042	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396044	30 03		bmi $396049	                    BMI wr_chk_rqm
.396046	82 3c 00	brl $396085	                    BRL time_out                            ; If not, raise an error
.396049	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.39604d	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.39604f	f0 f1		beq $396042	                    BEQ wr_data_rdy
.396051	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.396053	d0 03		bne $396058	                    BNE wr_data_phase                       ; If so: transfer the data
.396055	82 68 00	brl $3960c0	                    BRL result_phase                          ; If not: it's an error
.396058					wr_data_phase
.396058	c2 10		rep #$10	                REP #$10        ; set X long
.39605a	a0 00 00	ldy #$0000	                    LDY #0
.39605d	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39605f	30 03		bmi $396064	                    BMI wr_chk_nondma
.396061	82 21 00	brl $396085	                    BRL time_out                            ; If not, raise an error
.396064	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396068	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39606a	f0 54		beq $3960c0	                    BEQ result_phase                        ; If not: break out to result phase
.39606c	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.39606e	f0 ed		beq $39605d	                    BEQ wr_data_loop                        ; No: keep waiting
.396070	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.396072	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.396076	c8		iny		                    INY                                     ; Move to the next position
.396077	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39607a	d0 e1		bne $39605d	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.39607c	80 42		bra $3960c0	                    BRA result_phase                        ; ready for the result phase
.39607e	20 72 5f	jsr $395f72	rd_data             JSR FDC_Can_Read_Data
.396081	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396083	30 07		bmi $39608c	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.396085					time_out
.396085	e2 20		sep #$20	                SEP #$20        ; set A short
.396087	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396089	82 9c 00	brl $396128	                    BRL pass_error
.39608c	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.396090	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396092	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396094	d0 eb		bne $396081	                    BNE rd_data_rdy
.396096	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39609a	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39609c	d0 03		bne $3960a1	                    BNE rd_data_phase                       ; If so: transfer the data
.39609e	82 83 00	brl $396124	                    BRL error                               ; If not: it's an error
.3960a1					rd_data_phase
.3960a1	c2 10		rep #$10	                REP #$10        ; set X long
.3960a3	a0 00 00	ldy #$0000	                    LDY #0
.3960a6	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960a8	10 db		bpl $396085	                    BPL time_out                            ; If not: throw a timeout error
.3960aa	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.3960ae	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960b0	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3960b2	d0 f2		bne $3960a6	                    BNE rd_data_loop
.3960b4	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.3960b8	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.3960ba	c8		iny		                    INY                                     ; Move to the next position
.3960bb	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3960be	d0 e6		bne $3960a6	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.3960c0	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.3960c3	f0 34		beq $3960f9	                    BEQ chk_busy                            ; Then we're done
.3960c5	e2 10		sep #$10	                SEP #$10        ; set X short
.3960c7	a2 00		ldx #$00	                    LDX #0
.3960c9	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3960cb	22 be 40 39	jsl $3940be	                    JSL ISETTIMEOUT
.3960cf	20 72 5f	jsr $395f72	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3960d2	90 b1		bcc $396085	                    BCC time_out                            ; If there was a time out, raise an error
.3960d4	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3960d8	20 72 5f	jsr $395f72	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3960db	90 a8		bcc $396085	                    BCC time_out                            ; If there was a time out, raise an error
.3960dd	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3960e1	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3960e4	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM
.3960e7	90 9c		bcc $396085	                    BCC time_out                            ; If there was a time out, flag the error
.3960e9	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3960ed	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3960ef	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3960f1	d0 06		bne $3960f9	                    BNE chk_busy
.3960f3	e8		inx		                    INX                                     ; Move to the next result positions
.3960f4	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3960f7	d0 e4		bne $3960dd	                    BNE read_result                         ; And keep looping until we've read all
.3960f9					chk_busy
.3960f9	c2 10		rep #$10	                REP #$10        ; set X long
.3960fb	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3960fe	22 d4 15 39	jsl $3915d4	                    JSL ILOOP_MS
.396102	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396106	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396108	f0 12		beq $39611c	                    BEQ done                                ; If not set: we're done
.39610a	20 72 5f	jsr $395f72	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39610d	b0 03		bcs $396112	                    BCS get_result_byte
.39610f	82 73 ff	brl $396085	                    BRL time_out                            ; If there was a time out, flag the error
.396112	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396116	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396119	e8		inx		                    INX
.39611a	80 dd		bra $3960f9	                    BRA chk_busy                            ; And keep checking
.39611c					done
.39611c	64 20		stz $0320	                    STZ BIOS_STATUS
.39611e	28		plp		                    PLP
.39611f	2b		pld		                    PLD
.396120	ab		plb		                    PLB
.396121	fa		plx		                    PLX
.396122	38		sec		                    SEC
.396123	6b		rtl		                    RTL
.396124					error
.396124	e2 20		sep #$20	                SEP #$20        ; set A short
.396126	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396128	85 20		sta $0320	pass_error          STA BIOS_STATUS
.39612a	28		plp		                    PLP
.39612b	2b		pld		                    PLD
.39612c	ab		plb		                    PLB
.39612d	fa		plx		                    PLX
.39612e	18		clc		                    CLC
.39612f	6b		rtl		                    RTL
.396130					FDC_Init
.396130	08		php		                    PHP
.396131	c2 10		rep #$10	                REP #$10        ; set X long
.396133	e2 20		sep #$20	                SEP #$20        ; set A short
.396135	a9 00		lda #$00	                    LDA #0
.396137	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.39613b	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.39613e	a0 00 00	ldy #$0000	                    LDY #0
.396141	22 e1 15 39	jsl $3915e1	                    JSL IDELAY
.396145	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396147	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.39614b	ea		nop		                    NOP
.39614c	ea		nop		                    NOP
.39614d	ea		nop		                    NOP
.39614e	ea		nop		                    NOP
.39614f	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.396151	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396155	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.396157	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.39615b	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39615e	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.396161	22 e1 15 39	jsl $3915e1	                    JSL IDELAY
.396165	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.396169	90 21		bcc $39618c	                    BCC pass_failure
.39616b	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.39616f	90 1b		bcc $39618c	                    BCC pass_failure
.396171	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.396175	90 15		bcc $39618c	                    BCC pass_failure
.396177	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.39617b	90 0f		bcc $39618c	                    BCC pass_failure
.39617d	22 fe 62 39	jsl $3962fe	                    JSL FDC_Configure_Command
.396181	90 09		bcc $39618c	                    BCC pass_failure
.396183	22 a5 62 39	jsl $3962a5	                    JSL FDC_Specify_Command
.396187	90 03		bcc $39618c	                    BCC pass_failure
.396189	28		plp		                    PLP
.39618a	38		sec		                    SEC
.39618b	6b		rtl		                    RTL
.39618c	28		plp		pass_failure        PLP
.39618d	18		clc		                    CLC
.39618e	6b		rtl		                    RTL
.39618f					FDC_MOTOR_NEEDED
.39618f	08		php		                    PHP
.396190	c2 20		rep #$20	                REP #$20        ; set A long
.396192	78		sei		                    SEI                         ; Turn off interrupts
.396193	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396196	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39619a	e2 20		sep #$20	                SEP #$20        ; set A short
.39619c	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3961a0	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3961a2	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3961a6	28		plp		                    PLP
.3961a7	6b		rtl		                    RTL
.3961a8					FDC_Motor_On
.3961a8	08		php		                    PHP
.3961a9	22 8f 61 39	jsl $39618f	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3961ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3961af	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3961b3	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3961b5	d0 1f		bne $3961d6	                    BNE done                    ; If so: skip
.3961b7	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3961b9	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961bd	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3961c0	90 17		bcc $3961d9	                    BCC time_out
.3961c2	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3961c5	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3961c8	22 e1 15 39	jsl $3915e1	                    JSL IDELAY
.3961cc	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3961d0	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3961d2	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3961d6	28		plp		done                PLP
.3961d7	38		sec		                    SEC
.3961d8	6b		rtl		                    RTL
.3961d9	28		plp		time_out            PLP                         ; Return a timeout error
.3961da	18		clc		                    CLC
.3961db	6b		rtl		                    RTL
.3961dc					FDC_Motor_Off
.3961dc	08		php		                    PHP
.3961dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3961df	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3961e1	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3961e5	c2 20		rep #$20	                REP #$20        ; set A long
.3961e7	78		sei		                    SEI                         ; Turn off interrupts
.3961e8	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3961eb	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3961ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3961f1	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3961f5	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3961f7	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3961fb	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3961ff	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.396201	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396205	28		plp		                    PLP
.396206	6b		rtl		                    RTL
.396207					FDC_Recalibrate_Command
.396207	0b		phd		                    PHD
.396208	08		php		                    PHP
.396209	48		pha		                PHA             ; begin setdp macro
.39620a	08		php		                PHP
.39620b	c2 20		rep #$20	                REP #$20        ; set A long
.39620d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396210	5b		tcd		                TCD
.396211	28		plp		                PLP
.396212	68		pla		                PLA             ; end setdp macro
.396213	22 8f 61 39	jsl $39618f	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396217	e2 20		sep #$20	                SEP #$20        ; set A short
.396219	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.39621b	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39621e	a5 00		lda $0300	                    LDA FDC_DRIVE
.396220	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396223	a9 02		lda #$02	                    LDA #2
.396225	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396228	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.39622b	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39622e	22 e3 5f 39	jsl $395fe3	                    JSL FDC_COMMAND             ; Issue the command
.396232	90 04		bcc $396238	                    BCC pass_failure            ; If failure, pass the failure up
.396234	28		plp		                    PLP
.396235	2b		pld		                    PLD
.396236	38		sec		                    SEC
.396237	6b		rtl		                    RTL
.396238	28		plp		pass_failure        PLP
.396239	2b		pld		                    PLD
.39623a	18		clc		                    CLC
.39623b	6b		rtl		                    RTL
.39623c					FDC_Sense_Int_Status
.39623c	8b		phb		                    PHB
.39623d	0b		phd		                    PHD
.39623e	08		php		                    PHP
.39623f	48		pha		                PHA             ; begin setdbr macro
.396240	08		php		                PHP
.396241	e2 20		sep #$20	                SEP #$20        ; set A short
.396243	a9 00		lda #$00	                LDA #0
.396245	48		pha		                PHA
.396246	ab		plb		                PLB
.396247	28		plp		                PLP
.396248	68		pla		                PLA             ; end setdbr macro
.396249	48		pha		                PHA             ; begin setdp macro
.39624a	08		php		                PHP
.39624b	c2 20		rep #$20	                REP #$20        ; set A long
.39624d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396250	5b		tcd		                TCD
.396251	28		plp		                PLP
.396252	68		pla		                PLA             ; end setdp macro
.396253	c2 30		rep #$30	                REP #$30        ; set A&X long
.396255	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396258	22 d4 15 39	jsl $3915d4	                    JSL ILOOP_MS
.39625c	e2 20		sep #$20	                SEP #$20        ; set A short
.39625e	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.396260	a9 ff		lda #$ff	                    LDA #$FF
.396262	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396264	20 44 5f	jsr $395f44	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396267	90 30		bcc $396299	                    BCC time_out                        ; If there was a time out, raise an error
.396269	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39626c	90 2b		bcc $396299	                    BCC time_out                        ; If there was a time out, raise an error
.39626e	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.396270	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396274	20 72 5f	jsr $395f72	                    JSR FDC_Can_Read_Data
.396277	90 20		bcc $396299	                    BCC time_out                        ; If there was a time out, raise an error
.396279	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39627c	90 1b		bcc $396299	                    BCC time_out                        ; If there was a time out, raise an error
.39627e	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396282	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396284	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396287	90 10		bcc $396299	                    BCC time_out                        ; If there was a time out, raise an error
.396289	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39628d	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39628f	e2 20		sep #$20	                SEP #$20        ; set A short
.396291	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396294	28		plp		                    PLP
.396295	2b		pld		                    PLD
.396296	ab		plb		                    PLB
.396297	38		sec		                    SEC
.396298	6b		rtl		                    RTL
.396299					time_out
.396299	e2 20		sep #$20	                SEP #$20        ; set A short
.39629b	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.39629d	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3962a0	28		plp		                    PLP
.3962a1	2b		pld		                    PLD
.3962a2	ab		plb		                    PLB
.3962a3	18		clc		                    CLC
.3962a4	6b		rtl		                    RTL
.3962a5					FDC_Specify_Command
.3962a5	8b		phb		                    PHB
.3962a6	0b		phd		                    PHD
.3962a7	08		php		                    PHP
.3962a8	48		pha		                PHA             ; begin setdbr macro
.3962a9	08		php		                PHP
.3962aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3962ac	a9 00		lda #$00	                LDA #0
.3962ae	48		pha		                PHA
.3962af	ab		plb		                PLB
.3962b0	28		plp		                PLP
.3962b1	68		pla		                PLA             ; end setdbr macro
.3962b2	48		pha		                PHA             ; begin setdp macro
.3962b3	08		php		                PHP
.3962b4	c2 20		rep #$20	                REP #$20        ; set A long
.3962b6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962b9	5b		tcd		                TCD
.3962ba	28		plp		                PLP
.3962bb	68		pla		                PLA             ; end setdp macro
.3962bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3962be	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3962c1	22 d4 15 39	jsl $3915d4	                    JSL ILOOP_MS
.3962c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3962c7	20 44 5f	jsr $395f44	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3962ca	90 26		bcc $3962f2	                    BCC time_out            ; If there was a time out, raise an error
.3962cc	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962cf	90 21		bcc $3962f2	                    BCC time_out            ; If there was a time out, raise an error
.3962d1	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3962d3	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962d7	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962da	90 16		bcc $3962f2	                    BCC time_out            ; If there was a time out, raise an error
.3962dc	a9 cf		lda #$cf	                    LDA #$CF
.3962de	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962e2	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962e5	90 0b		bcc $3962f2	                    BCC time_out            ; If there was a time out, raise an error
.3962e7	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3962e9	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962ed	28		plp		                    PLP
.3962ee	2b		pld		                    PLD
.3962ef	ab		plb		                    PLB
.3962f0	38		sec		                    SEC
.3962f1	6b		rtl		                    RTL
.3962f2					time_out
.3962f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3962f4	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3962f6	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3962f9	28		plp		                    PLP
.3962fa	2b		pld		                    PLD
.3962fb	ab		plb		                    PLB
.3962fc	18		clc		                    CLC
.3962fd	6b		rtl		                    RTL
.3962fe					FDC_Configure_Command
.3962fe	8b		phb		                    PHB
.3962ff	0b		phd		                    PHD
.396300	08		php		                    PHP
.396301	48		pha		                PHA             ; begin setdbr macro
.396302	08		php		                PHP
.396303	e2 20		sep #$20	                SEP #$20        ; set A short
.396305	a9 00		lda #$00	                LDA #0
.396307	48		pha		                PHA
.396308	ab		plb		                PLB
.396309	28		plp		                PLP
.39630a	68		pla		                PLA             ; end setdbr macro
.39630b	48		pha		                PHA             ; begin setdp macro
.39630c	08		php		                PHP
.39630d	c2 20		rep #$20	                REP #$20        ; set A long
.39630f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396312	5b		tcd		                TCD
.396313	28		plp		                PLP
.396314	68		pla		                PLA             ; end setdp macro
.396315	c2 30		rep #$30	                REP #$30        ; set A&X long
.396317	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39631a	22 d4 15 39	jsl $3915d4	                    JSL ILOOP_MS
.39631e	e2 20		sep #$20	                SEP #$20        ; set A short
.396320	20 44 5f	jsr $395f44	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396323	90 36		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.396325	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396328	90 31		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.39632a	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39632c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396330	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396333	90 26		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.396335	a9 00		lda #$00	                    LDA #$00
.396337	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39633b	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39633e	90 1b		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.396340	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396342	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396346	20 e8 5e	jsr $395ee8	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396349	90 10		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.39634b	a9 00		lda #$00	                    LDA #$00
.39634d	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396351	20 44 5f	jsr $395f44	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396354	90 05		bcc $39635b	                    BCC time_out            ; If there was a time out, raise an error
.396356	28		plp		                    PLP
.396357	2b		pld		                    PLD
.396358	ab		plb		                    PLB
.396359	38		sec		                    SEC
.39635a	6b		rtl		                    RTL
.39635b					time_out
.39635b	e2 20		sep #$20	                SEP #$20        ; set A short
.39635d	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39635f	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396362	28		plp		                    PLP
.396363	2b		pld		                    PLD
.396364	ab		plb		                    PLB
.396365	18		clc		                    CLC
.396366	6b		rtl		                    RTL
.396367					FDC_Read_ID_Command
.396367	8b		phb		                    PHB
.396368	0b		phd		                    PHD
.396369	08		php		                    PHP
.39636a	48		pha		                PHA             ; begin setdbr macro
.39636b	08		php		                PHP
.39636c	e2 20		sep #$20	                SEP #$20        ; set A short
.39636e	a9 00		lda #$00	                LDA #0
.396370	48		pha		                PHA
.396371	ab		plb		                PLB
.396372	28		plp		                PLP
.396373	68		pla		                PLA             ; end setdbr macro
.396374	48		pha		                PHA             ; begin setdp macro
.396375	08		php		                PHP
.396376	c2 20		rep #$20	                REP #$20        ; set A long
.396378	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39637b	5b		tcd		                TCD
.39637c	28		plp		                PLP
.39637d	68		pla		                PLA             ; end setdp macro
.39637e	e2 20		sep #$20	                SEP #$20        ; set A short
.396380	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396382	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396385	a9 01		lda #$01	                    LDA #1
.396387	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39638a	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39638d	a9 07		lda #$07	                    LDA #7
.39638f	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396392	22 e3 5f 39	jsl $395fe3	                    JSL FDC_COMMAND                     ; Issue the command
.396396	90 27		bcc $3963bf	                    BCC pass_failure
.396398	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.39639b	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39639d	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3963a0	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3963a2	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3963a5	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3963a7	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3963aa	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3963ac	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3963af	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3963b1	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3963b4	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3963b6	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3963b9	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3963bb	28		plp		                    PLP
.3963bc	2b		pld		                    PLD
.3963bd	ab		plb		                    PLB
.3963be	6b		rtl		                    RTL
.3963bf	28		plp		pass_failure        PLP
.3963c0	2b		pld		                    PLD
.3963c1	ab		plb		                    PLB
.3963c2	18		clc		                    CLC
.3963c3	6b		rtl		                    RTL
.3963c4					FDC_DumpReg_Command
.3963c4	0b		phd		                    PHD
.3963c5	08		php		                    PHP
.3963c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3963c8	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3963ca	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3963cd	a9 01		lda #$01	                    LDA #1
.3963cf	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3963d2	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3963d5	a9 0a		lda #$0a	                    LDA #10
.3963d7	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3963da	22 e3 5f 39	jsl $395fe3	                    JSL FDC_COMMAND                     ; Issue the command
.3963de	90 03		bcc $3963e3	                    BCC pass_failure
.3963e0	28		plp		                    PLP
.3963e1	2b		pld		                    PLD
.3963e2	6b		rtl		                    RTL
.3963e3	28		plp		pass_failure        PLP
.3963e4	2b		pld		                    PLD
.3963e5	18		clc		                    CLC
.3963e6	6b		rtl		                    RTL
.3963e7					FDC_Seek_Track
.3963e7	8b		phb		                    PHB
.3963e8	0b		phd		                    PHD
.3963e9	08		php		                    PHP
.3963ea	48		pha		                PHA             ; begin setdbr macro
.3963eb	08		php		                PHP
.3963ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3963ee	a9 00		lda #$00	                LDA #0
.3963f0	48		pha		                PHA
.3963f1	ab		plb		                PLB
.3963f2	28		plp		                PLP
.3963f3	68		pla		                PLA             ; end setdbr macro
.3963f4	48		pha		                PHA             ; begin setdp macro
.3963f5	08		php		                PHP
.3963f6	c2 20		rep #$20	                REP #$20        ; set A long
.3963f8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963fb	5b		tcd		                TCD
.3963fc	28		plp		                PLP
.3963fd	68		pla		                PLA             ; end setdp macro
.3963fe	22 8f 61 39	jsl $39618f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396402	e2 20		sep #$20	                SEP #$20        ; set A short
.396404	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396406	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396409	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39640b	29 01		and #$01	                    AND #$01
.39640d	0a		asl a		                    ASL A
.39640e	0a		asl a		                    ASL A
.39640f	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396411	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396414	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396416	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396419	a9 03		lda #$03	                    LDA #3
.39641b	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39641e	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396421	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396424	22 e3 5f 39	jsl $395fe3	                    JSL FDC_COMMAND                     ; Issue the command
.396428	90 05		bcc $39642f	                    BCC pass_failure
.39642a	28		plp		                    PLP
.39642b	2b		pld		                    PLD
.39642c	ab		plb		                    PLB
.39642d	38		sec		                    SEC
.39642e	6b		rtl		                    RTL
.39642f	28		plp		pass_failure        PLP
.396430	2b		pld		                    PLD
.396431	ab		plb		                    PLB
.396432	18		clc		                    CLC
.396433	6b		rtl		                    RTL
.396434					FDC_Read_Sector
.396434	8b		phb		                    PHB
.396435	0b		phd		                    PHD
.396436	08		php		                    PHP
.396437	48		pha		                PHA             ; begin setdbr macro
.396438	08		php		                PHP
.396439	e2 20		sep #$20	                SEP #$20        ; set A short
.39643b	a9 00		lda #$00	                LDA #0
.39643d	48		pha		                PHA
.39643e	ab		plb		                PLB
.39643f	28		plp		                PLP
.396440	68		pla		                PLA             ; end setdbr macro
.396441	48		pha		                PHA             ; begin setdp macro
.396442	08		php		                PHP
.396443	c2 20		rep #$20	                REP #$20        ; set A long
.396445	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396448	5b		tcd		                TCD
.396449	28		plp		                PLP
.39644a	68		pla		                PLA             ; end setdp macro
.39644b	22 8f 61 39	jsl $39618f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39644f	e2 20		sep #$20	                SEP #$20        ; set A short
.396451	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396453	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396455	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396458	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39645a	29 01		and #$01	                    AND #$01
.39645c	0a		asl a		                    ASL A
.39645d	0a		asl a		                    ASL A
.39645e	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396460	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396463	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396465	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396468	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39646a	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39646d	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39646f	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396472	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396474	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396477	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396479	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39647c	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39647e	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396481	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396483	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396486	a9 09		lda #$09	                    LDA #9
.396488	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39648b	a9 01		lda #$01	                    LDA #1
.39648d	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.396490	a9 07		lda #$07	                    LDA #7
.396492	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396495	22 e3 5f 39	jsl $395fe3	command             JSL FDC_COMMAND                     ; Issue the command
.396499	08		php		                    PHP
.39649a	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39649d	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39649f	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3964a2	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3964a4	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3964a7	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3964a9	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3964ac	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3964ae	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3964b1	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3964b3	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3964b6	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3964b8	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3964bb	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3964bd	28		plp		                    PLP
.3964be	90 04		bcc $3964c4	                    BCC pass_failure
.3964c0	28		plp		done                PLP
.3964c1	2b		pld		                    PLD
.3964c2	ab		plb		                    PLB
.3964c3	6b		rtl		                    RTL
.3964c4	28		plp		pass_failure        PLP
.3964c5	2b		pld		                    PLD
.3964c6	ab		plb		                    PLB
.3964c7	18		clc		                    CLC
.3964c8	6b		rtl		                    RTL
.3964c9					FDC_Write_Sector
.3964c9	8b		phb		                    PHB
.3964ca	0b		phd		                    PHD
.3964cb	08		php		                    PHP
.3964cc	48		pha		                PHA             ; begin setdbr macro
.3964cd	08		php		                PHP
.3964ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3964d0	a9 00		lda #$00	                LDA #0
.3964d2	48		pha		                PHA
.3964d3	ab		plb		                PLB
.3964d4	28		plp		                PLP
.3964d5	68		pla		                PLA             ; end setdbr macro
.3964d6	48		pha		                PHA             ; begin setdp macro
.3964d7	08		php		                PHP
.3964d8	c2 20		rep #$20	                REP #$20        ; set A long
.3964da	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964dd	5b		tcd		                TCD
.3964de	28		plp		                PLP
.3964df	68		pla		                PLA             ; end setdp macro
.3964e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3964e2	22 8f 61 39	jsl $39618f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964e6	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3964e8	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3964ea	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964ed	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964ef	29 01		and #$01	                    AND #$01
.3964f1	0a		asl a		                    ASL A
.3964f2	0a		asl a		                    ASL A
.3964f3	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964f5	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964f8	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3964fa	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964fd	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3964ff	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396502	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396504	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396507	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396509	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39650c	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39650e	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396511	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396513	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396516	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396518	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39651b	a9 09		lda #$09	                    LDA #9
.39651d	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396520	a9 ff		lda #$ff	                    LDA #$FF
.396522	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396525	a9 07		lda #$07	                    LDA #7
.396527	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39652a	22 e3 5f 39	jsl $395fe3	command             JSL FDC_COMMAND                     ; Issue the command
.39652e	08		php		                    PHP
.39652f	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396532	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396534	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396537	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396539	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39653c	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39653e	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396541	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396543	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396546	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396548	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39654b	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39654d	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396550	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396552	28		plp		check_status        PLP
.396553	90 04		bcc $396559	                    BCC pass_failure
.396555	28		plp		done                PLP
.396556	2b		pld		                    PLD
.396557	ab		plb		                    PLB
.396558	6b		rtl		                    RTL
.396559	28		plp		pass_failure        PLP
.39655a	2b		pld		                    PLD
.39655b	ab		plb		                    PLB
.39655c	18		clc		                    CLC
.39655d	6b		rtl		                    RTL
.39655e					DIVIDE32
.39655e	da		phx		                    PHX
.39655f	5a		phy		                    PHY
.396560	0b		phd		                    PHD
.396561	08		php		                    PHP
.396562	48		pha		                PHA             ; begin setdp macro
.396563	08		php		                PHP
.396564	c2 20		rep #$20	                REP #$20        ; set A long
.396566	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396569	5b		tcd		                TCD
.39656a	28		plp		                PLP
.39656b	68		pla		                PLA             ; end setdp macro
.39656c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39656e	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.396570	64 0a		stz $0316	                    STZ REMAINDER+2
.396572	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396575	06 00		asl $030c	loop                ASL DIVIDEND
.396577	26 02		rol $030e	                    ROL DIVIDEND+2
.396579	26 08		rol $0314	                    ROL REMAINDER
.39657b	26 0a		rol $0316	                    ROL REMAINDER+2
.39657d	a5 08		lda $0314	                    LDA REMAINDER
.39657f	38		sec		                    SEC
.396580	e5 04		sbc $0310	                    SBC DIVISOR
.396582	a8		tay		                    TAY
.396583	a5 0a		lda $0316	                    LDA REMAINDER+2
.396585	e5 06		sbc $0312	                    SBC DIVISOR+2
.396587	90 06		bcc $39658f	                    BCC skip
.396589	85 0a		sta $0316	                    STA REMAINDER+2
.39658b	84 08		sty $0314	                    STY REMAINDER
.39658d	e6 00		inc $030c	                    INC DIVIDEND
.39658f	ca		dex		skip                DEX
.396590	d0 e3		bne $396575	                    BNE loop
.396592	28		plp		                    PLP
.396593	2b		pld		                    PLD
.396594	7a		ply		                    PLY
.396595	fa		plx		                    PLX
.396596	60		rts		                    RTS
.396597					LBA2CHS
.396597	8b		phb		                    PHB
.396598	0b		phd		                    PHD
.396599	08		php		                    PHP
.39659a	48		pha		                PHA             ; begin setdbr macro
.39659b	08		php		                PHP
.39659c	e2 20		sep #$20	                SEP #$20        ; set A short
.39659e	a9 00		lda #$00	                LDA #0
.3965a0	48		pha		                PHA
.3965a1	ab		plb		                PLB
.3965a2	28		plp		                PLP
.3965a3	68		pla		                PLA             ; end setdbr macro
.3965a4	48		pha		                PHA             ; begin setdp macro
.3965a5	08		php		                PHP
.3965a6	c2 20		rep #$20	                REP #$20        ; set A long
.3965a8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965ab	5b		tcd		                TCD
.3965ac	28		plp		                PLP
.3965ad	68		pla		                PLA             ; end setdp macro
.3965ae	c2 30		rep #$30	                REP #$30        ; set A&X long
.3965b0	a5 22		lda $0322	                    LDA BIOS_LBA
.3965b2	85 0c		sta $030c	                    STA DIVIDEND
.3965b4	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3965b6	85 0e		sta $030e	                    STA DIVIDEND+2
.3965b8	a9 24 00	lda #$0024	                    LDA #36
.3965bb	85 10		sta $0310	                    STA DIVISOR
.3965bd	64 12		stz $0312	                    STZ DIVISOR+2
.3965bf	20 5e 65	jsr $39655e	                    JSR DIVIDE32
.3965c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3965c4	a5 0c		lda $030c	                    LDA DIVIDEND
.3965c6	85 02		sta $0302	                    STA FDC_CYLINDER
.3965c8	c2 20		rep #$20	                REP #$20        ; set A long
.3965ca	a5 14		lda $0314	                    LDA REMAINDER
.3965cc	85 0c		sta $030c	                    STA DIVIDEND
.3965ce	a5 16		lda $0316	                    LDA REMAINDER+2
.3965d0	85 0e		sta $030e	                    STA DIVIDEND+2
.3965d2	a9 12 00	lda #$0012	                    LDA #18
.3965d5	85 10		sta $0310	                    STA DIVISOR
.3965d7	64 12		stz $0312	                    STZ DIVISOR+2
.3965d9	20 5e 65	jsr $39655e	                    JSR DIVIDE32
.3965dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3965de	a5 0c		lda $030c	                    LDA DIVIDEND
.3965e0	29 01		and #$01	                    AND #$01
.3965e2	85 01		sta $0301	                    STA FDC_HEAD
.3965e4	a5 14		lda $0314	                    LDA REMAINDER
.3965e6	1a		inc a		                    INC A
.3965e7	85 03		sta $0303	                    STA FDC_SECTOR
.3965e9	28		plp		                    PLP
.3965ea	2b		pld		                    PLD
.3965eb	ab		plb		                    PLB
.3965ec	6b		rtl		                    RTL
.3965ed					FDC_GETBLOCK
.3965ed	8b		phb		                    PHB
.3965ee	0b		phd		                    PHD
.3965ef	08		php		                    PHP
.3965f0	48		pha		                PHA             ; begin setdbr macro
.3965f1	08		php		                PHP
.3965f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3965f4	a9 00		lda #$00	                LDA #0
.3965f6	48		pha		                PHA
.3965f7	ab		plb		                PLB
.3965f8	28		plp		                PLP
.3965f9	68		pla		                PLA             ; end setdbr macro
.3965fa	48		pha		                PHA             ; begin setdp macro
.3965fb	08		php		                PHP
.3965fc	c2 20		rep #$20	                REP #$20        ; set A long
.3965fe	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396601	5b		tcd		                TCD
.396602	28		plp		                PLP
.396603	68		pla		                PLA             ; end setdp macro
.396604	e2 20		sep #$20	                SEP #$20        ; set A short
.396606	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396608	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.39660b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39660d	22 97 65 39	jsl $396597	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396611	e2 20		sep #$20	                SEP #$20        ; set A short
.396613	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396615	f0 29		beq $396640	                    BEQ read_failure
.396617					try_read
.396617	c2 20		rep #$20	                REP #$20        ; set A long
.396619	22 34 64 39	jsl $396434	                    JSL FDC_Read_Sector         ; Read the sector
.39661d	90 14		bcc $396633	                    BCC retry
.39661f	e2 20		sep #$20	                SEP #$20        ; set A short
.396621	a5 06		lda $0306	                    LDA FDC_ST0
.396623	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396625	d0 19		bne $396640	                    BNE read_failure
.396627					ret_success
.396627	e2 20		sep #$20	                SEP #$20        ; set A short
.396629	a9 00		lda #$00	                    LDA #0
.39662b	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39662e	28		plp		                    PLP
.39662f	2b		pld		                    PLD
.396630	ab		plb		                    PLB
.396631	38		sec		                    SEC
.396632	6b		rtl		                    RTL
.396633					retry
.396633	e2 20		sep #$20	                SEP #$20        ; set A short
.396635	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396638	30 13		bmi $39664d	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.39663a	22 30 61 39	jsl $396130	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39663e	80 d7		bra $396617	                    BRA try_read                ; And try the read again
.396640					read_failure
.396640	e2 20		sep #$20	                SEP #$20        ; set A short
.396642	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396644	80 04		bra $39664a	                    BRA ret_failure
.396646					seek_failure
.396646	e2 20		sep #$20	                SEP #$20        ; set A short
.396648	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39664a	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39664d	28		plp		pass_failure        PLP
.39664e	2b		pld		                    PLD
.39664f	ab		plb		                    PLB
.396650	18		clc		                    CLC
.396651	6b		rtl		                    RTL
.396652					FDC_PUTBLOCK
.396652	8b		phb		                    PHB
.396653	0b		phd		                    PHD
.396654	08		php		                    PHP
.396655	48		pha		                PHA             ; begin setdbr macro
.396656	08		php		                PHP
.396657	e2 20		sep #$20	                SEP #$20        ; set A short
.396659	a9 00		lda #$00	                LDA #0
.39665b	48		pha		                PHA
.39665c	ab		plb		                PLB
.39665d	28		plp		                PLP
.39665e	68		pla		                PLA             ; end setdbr macro
.39665f	48		pha		                PHA             ; begin setdp macro
.396660	08		php		                PHP
.396661	c2 20		rep #$20	                REP #$20        ; set A long
.396663	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396666	5b		tcd		                TCD
.396667	28		plp		                PLP
.396668	68		pla		                PLA             ; end setdp macro
.396669	e2 20		sep #$20	                SEP #$20        ; set A short
.39666b	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39666d	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.396670	c2 30		rep #$30	                REP #$30        ; set A&X long
.396672	22 97 65 39	jsl $396597	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396676	22 c9 64 39	jsl $3964c9	retry               JSL FDC_Write_Sector        ; Write the sector
.39667a	b0 03		bcs $39667f	                    BCS chk_st0
.39667c	82 28 00	brl $3966a7	                    BRL attempt_retry
.39667f					chk_st0
.39667f	e2 20		sep #$20	                SEP #$20        ; set A short
.396681	a5 06		lda $0306	                    LDA FDC_ST0
.396683	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396685	d0 0c		bne $396693	                    BNE write_failure
.396687					ret_success
.396687	e2 20		sep #$20	                SEP #$20        ; set A short
.396689	a9 00		lda #$00	                    LDA #0
.39668b	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39668e	28		plp		                    PLP
.39668f	2b		pld		                    PLD
.396690	ab		plb		                    PLB
.396691	38		sec		                    SEC
.396692	6b		rtl		                    RTL
.396693					write_failure
.396693	e2 20		sep #$20	                SEP #$20        ; set A short
.396695	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396697	89 02		bit #$02	                    BIT #FDC_ST1_NW
.396699	f0 04		beq $39669f	                    BEQ generic_err
.39669b	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39669d	80 17		bra $3966b6	                    BRA ret_failure
.39669f	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3966a1	d0 e4		bne $396687	                    BNE ret_success
.3966a3	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3966a5	d0 e0		bne $396687	                    BNE ret_success
.3966a7					attempt_retry
.3966a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a9	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3966ac	d0 c8		bne $396676	                    BNE retry                           ; And retry unless we have none left
.3966ae	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3966b0	80 04		bra $3966b6	                    BRA ret_failure
.3966b2					seek_failure
.3966b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b4	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3966b6					ret_failure
.3966b6	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3966b9	28		plp		pass_failure        PLP
.3966ba	2b		pld		                    PLD
.3966bb	ab		plb		                    PLB
.3966bc	18		clc		                    CLC
.3966bd	6b		rtl		                    RTL
.3966be					FDC_MOUNT
.3966be	8b		phb		                    PHB
.3966bf	0b		phd		                    PHD
.3966c0	08		php		                    PHP
.3966c1	48		pha		                PHA             ; begin setdbr macro
.3966c2	08		php		                PHP
.3966c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c5	a9 00		lda #$00	                LDA #0
.3966c7	48		pha		                PHA
.3966c8	ab		plb		                PLB
.3966c9	28		plp		                PLP
.3966ca	68		pla		                PLA             ; end setdbr macro
.3966cb	48		pha		                PHA             ; begin setdp macro
.3966cc	08		php		                PHP
.3966cd	c2 20		rep #$20	                REP #$20        ; set A long
.3966cf	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966d2	5b		tcd		                TCD
.3966d3	28		plp		                PLP
.3966d4	68		pla		                PLA             ; end setdp macro
.3966d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3966d7	c2 10		rep #$10	                REP #$10        ; set X long
.3966d9	a9 00		lda #$00	                    LDA #0
.3966db	a2 00 00	ldx #$0000	                    LDX #0
.3966de	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3966e2	e8		inx		                    INX
.3966e3	e0 00 02	cpx #$0200	                    CPX #512
.3966e6	d0 f6		bne $3966de	                    BNE zero_loop
.3966e8	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3966ea	85 00		sta $0300	                    STA FDC_DRIVE
.3966ec	22 a8 61 39	jsl $3961a8	                    JSL FDC_Motor_On                        ; Turn the motor on
.3966f0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966f2	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3966f5	85 22		sta $0322	                    STA BIOS_LBA
.3966f7	85 24		sta $0324	                    STA BIOS_LBA+2
.3966f9	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3966fc	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3966fe	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396701	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396703	22 ed 65 39	jsl $3965ed	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396707	b0 03		bcs $39670c	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396709	82 d3 00	brl $3967df	                    BRL pass_failure                        ; Pass the error up the chain
.39670c					parse_boot
.39670c	e2 20		sep #$20	                SEP #$20        ; set A short
.39670e	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396710	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396714	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396716	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39671a	e2 20		sep #$20	                SEP #$20        ; set A short
.39671c	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396720	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396724	c2 20		rep #$20	                REP #$20        ; set A long
.396726	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396729	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39672d	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396731	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396735	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396739	a9 00 00	lda #$0000	                    LDA #0
.39673c	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396740	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396743	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396747	18		clc		                    CLC
.396748	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39674c	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.396750	a9 00 00	lda #$0000	                    LDA #0
.396753	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396757	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.39675b	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39675c	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.396760	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396764	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396768	a9 00 00	lda #$0000	                    LDA #0
.39676b	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39676f	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396773	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.396777	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396778	4a		lsr a		                    LSR A
.396779	4a		lsr a		                    LSR A
.39677a	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.39677b	18		clc		                    CLC
.39677c	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396780	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396784	a9 00 00	lda #$0000	                    LDA #0
.396787	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39678b	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39678f	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396793	a9 00 00	lda #$0000	                    LDA #0
.396796	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39679a	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39679e	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3967a2	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3967a5	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3967a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3967ab	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3967af	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3967b1	80 14		bra $3967c7	                    BRA no_volume_id                        ; No: there is no volume ID
.3967b3					is_extended
.3967b3	c2 20		rep #$20	                REP #$20        ; set A long
.3967b5	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3967b9	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3967bd	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3967c1	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3967c5	80 0d		bra $3967d4	                    BRA ret_success
.3967c7					no_volume_id
.3967c7	c2 20		rep #$20	                REP #$20        ; set A long
.3967c9	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3967cc	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3967d0	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3967d4					ret_success
.3967d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3967d6	a9 00		lda #$00	                    LDA #0
.3967d8	85 20		sta $0320	                    STA BIOS_STATUS
.3967da	28		plp		                    PLP
.3967db	2b		pld		                    PLD
.3967dc	ab		plb		                    PLB
.3967dd	38		sec		                    SEC
.3967de	6b		rtl		                    RTL
.3967df	28		plp		pass_failure        PLP
.3967e0	2b		pld		                    PLD
.3967e1	ab		plb		                    PLB
.3967e2	18		clc		                    CLC
.3967e3	6b		rtl		                    RTL
.3967e4					FDC_CMDBLOCK
.3967e4	8b		phb		                    PHB
.3967e5	0b		phd		                    PHD
.3967e6	08		php		                    PHP
.3967e7	48		pha		                PHA             ; begin setdbr macro
.3967e8	08		php		                PHP
.3967e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3967eb	a9 00		lda #$00	                LDA #0
.3967ed	48		pha		                PHA
.3967ee	ab		plb		                PLB
.3967ef	28		plp		                PLP
.3967f0	68		pla		                PLA             ; end setdbr macro
.3967f1	48		pha		                PHA             ; begin setdp macro
.3967f2	08		php		                PHP
.3967f3	c2 20		rep #$20	                REP #$20        ; set A long
.3967f5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967f8	5b		tcd		                TCD
.3967f9	28		plp		                PLP
.3967fa	68		pla		                PLA             ; end setdp macro
.3967fb	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3967fd	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3967ff	f0 0f		beq $396810	                    BEQ motor_on
.396801	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396803	f0 11		beq $396816	                    BEQ motor_off
.396805	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396807	f0 13		beq $39681c	                    BEQ recalibrate
.396809	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39680b	28		plp		                    PLP
.39680c	2b		pld		                    PLD
.39680d	ab		plb		                    PLB
.39680e	38		sec		                    SEC
.39680f	6b		rtl		                    RTL
.396810	22 a8 61 39	jsl $3961a8	motor_on            JSL FDC_Motor_On
.396814	80 f3		bra $396809	                    BRA ret_success
.396816	22 dc 61 39	jsl $3961dc	motor_off           JSL FDC_Motor_Off
.39681a	80 ed		bra $396809	                    BRA ret_success
.39681c	22 07 62 39	jsl $396207	recalibrate         JSL FDC_Recalibrate_Command
.396820	b0 e7		bcs $396809	                    BCS ret_success
.396822	28		plp		pass_failure        PLP
.396823	2b		pld		                    PLD
.396824	ab		plb		                    PLB
.396825	18		clc		                    CLC
.396826	6b		rtl		                    RTL
.396827					FDC_CHK_MEDIA
.396827	0b		phd		                    PHD
.396828	08		php		                    PHP
.396829	48		pha		                PHA             ; begin setdp macro
.39682a	08		php		                PHP
.39682b	c2 20		rep #$20	                REP #$20        ; set A long
.39682d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396830	5b		tcd		                TCD
.396831	28		plp		                PLP
.396832	68		pla		                PLA             ; end setdp macro
.396833	22 a8 61 39	jsl $3961a8	                    JSL FDC_Motor_On                ; Turn on the motor
.396837	e2 20		sep #$20	                SEP #$20        ; set A short
.396839	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39683d	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39683f	f0 42		beq $396883	                    BEQ ret_true                    ; If not: assume the disk is present
.396841	a9 00		lda #$00	                    LDA #0
.396843	85 00		sta $0300	                    STA FDC_DRIVE
.396845	a9 00		lda #$00	                    LDA #0
.396847	85 01		sta $0301	                    STA FDC_HEAD
.396849	a9 50		lda #$50	                    LDA #80
.39684b	85 02		sta $0302	                    STA FDC_CYLINDER
.39684d	22 e7 63 39	jsl $3963e7	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396851	90 34		bcc $396887	                    BCC ret_false                   ; If fail: return false
.396853	c2 10		rep #$10	                REP #$10        ; set X long
.396855	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396858	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39685b	22 e1 15 39	jsl $3915e1	                    JSL IDELAY
.39685f	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.396863	a5 06		lda $0306	                    LDA FDC_ST0
.396865	29 d0		and #$d0	                    AND #%11010000
.396867	d0 1e		bne $396887	                    BNE ret_false
.396869	22 07 62 39	jsl $396207	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39686d	90 18		bcc $396887	                    BCC ret_false                   ; If fail: return false
.39686f	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396872	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396875	22 e1 15 39	jsl $3915e1	                    JSL IDELAY
.396879	22 3c 62 39	jsl $39623c	                    JSL FDC_Sense_Int_Status
.39687d	a5 06		lda $0306	                    LDA FDC_ST0
.39687f	29 d0		and #$d0	                    AND #%11010000
.396881	d0 04		bne $396887	                    BNE ret_false
.396883					ret_true
.396883	28		plp		                    PLP
.396884	2b		pld		                    PLD
.396885	38		sec		                    SEC
.396886	6b		rtl		                    RTL
.396887					ret_false
.396887	28		plp		                    PLP
.396888	2b		pld		                    PLD
.396889	18		clc		                    CLC
.39688a	6b		rtl		                    RTL
.39688b					FDC_WRITEVBR
.39688b	8b		phb		                    PHB
.39688c	0b		phd		                    PHD
.39688d	08		php		                    PHP
.39688e	48		pha		                PHA             ; begin setdbr macro
.39688f	08		php		                PHP
.396890	e2 20		sep #$20	                SEP #$20        ; set A short
.396892	a9 00		lda #$00	                LDA #0
.396894	48		pha		                PHA
.396895	ab		plb		                PLB
.396896	28		plp		                PLP
.396897	68		pla		                PLA             ; end setdbr macro
.396898	48		pha		                PHA             ; begin setdp macro
.396899	08		php		                PHP
.39689a	c2 20		rep #$20	                REP #$20        ; set A long
.39689c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39689f	5b		tcd		                TCD
.3968a0	28		plp		                PLP
.3968a1	68		pla		                PLA             ; end setdp macro
.3968a2	22 be 66 39	jsl $3966be	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3968a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3968a8	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3968ab	a2 00 00	ldx #$0000	                    LDX #0
.3968ae	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3968b2	e8		inx		                    INX
.3968b3	e8		inx		                    INX
.3968b4	e0 00 02	cpx #$0200	                    CPX #512
.3968b7	d0 f5		bne $3968ae	                    BNE clr_loop
.3968b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3968bb	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3968be	bf 21 69 39	lda $396921,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3968c2	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3968c6	e8		inx		                    INX
.3968c7	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3968ca	d0 f2		bne $3968be	                    BNE copy_loop
.3968cc	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3968cf	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3968d2	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3968d4	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3968d8	f0 07		beq $3968e1	                    BEQ path_copy_done
.3968da	e8		inx		                    INX
.3968db	c8		iny		                    INY
.3968dc	c0 80 00	cpy #$0080	                    CPY #128
.3968df	d0 f1		bne $3968d2	                    BNE path_copy_loop
.3968e1					path_copy_done
.3968e1	c2 20		rep #$20	                REP #$20        ; set A long
.3968e3	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3968e6	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3968ea	c2 20		rep #$20	                REP #$20        ; set A long
.3968ec	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3968ef	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3968f1	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3968f4	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3968f6	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3968f9	85 02		sta $0322	                    STA BIOS_LBA
.3968fb	85 04		sta $0324	                    STA BIOS_LBA+2
.3968fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3968ff	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396901	85 01		sta $0321	                    STA BIOS_DEV
.396903	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396907	b0 09		bcs $396912	                    BCS ret_success
.396909	22 dc 61 39	jsl $3961dc	                    JSL FDC_Motor_Off
.39690d	28		plp		                    PLP                         ; Return the failure
.39690e	2b		pld		                    PLD
.39690f	ab		plb		                    PLB
.396910	18		clc		                    CLC
.396911	6b		rtl		                    RTL
.396912	22 dc 61 39	jsl $3961dc	ret_success         JSL FDC_Motor_Off
.396916	e2 20		sep #$20	                SEP #$20        ; set A short
.396918	a9 00		lda #$00	                    LDA #0
.39691a	85 00		sta $0320	                    STA BIOS_STATUS
.39691c	28		plp		                    PLP
.39691d	2b		pld		                    PLD
.39691e	ab		plb		                    PLB
.39691f	38		sec		                    SEC
.396920	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396921					FDC_VBR_BEGIN
>396921	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396924	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>39692c	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39692e	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>39692f	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396931	02				num_fat             .byte 2                 ; Number of FATs
>396932	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396934	40 0b				total_sectors       .word 2880              ; Total sectors
>396936	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396937	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396939	12 00				sec_per_track       .word 18                ; Sectors per track
>39693b	02 00				num_head            .word 2                 ; Number of heads
>39693d	00 00 00 00			ignore2             .dword 0
>396941	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396945	00 00				ignore3             .word 0
>396947	29				boot_signature      .byte $29
>396948	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39694c	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396954	20 20 20
>396957	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.39695f	80 40		bra $3969a1	                    BRA vbr_start
>396961					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3969a1					vbr_start
.3969a1	c2 20		rep #$20	                REP #$20        ; set A long
.3969a3	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3969a6	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3969aa	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3969ad	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3969b1	22 a8 58 39	jsl $3958a8	                    JSL IF_RUN              ; And try to execute the binary file
.3969b5	b0 0c		bcs $3969c3	                    BCS lock                ; If it returned success... lock up... I guess?
.3969b7					error
.3969b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3969b9	4b		phk		                    PHK                     ; Otherwise, print an error message
.3969ba	ab		plb		                    PLB
.3969bb	62 08 00	per $3969c6	                    PER message
.3969be	fa		plx		                    PLX
.3969bf	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3969c3	ea		nop		lock                NOP                     ; And lock up
.3969c4	80 fd		bra $3969c3	                    BRA lock
>3969c6	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3969ce	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3969de	65 20 62 69 6e 61 72 79 2e 0d 00
.3969e9					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3969e9					IDE_TEST
.3969e9	08		php		                PHP
.3969ea	c2 20		rep #$20	                REP #$20        ; set A long
.3969ec	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3969ef	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969f3	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3969f6	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969fa	22 17 6b 39	jsl $396b17	                JSL IDE_IDENTIFY
.3969fe	b0 03		bcs $396a03	                BCS id_ok
.396a00	82 ab 00	brl $396aae	                BRL done
.396a03					id_ok
.396a03	c2 10		rep #$10	                REP #$10        ; set X long
.396a05	e2 20		sep #$20	                SEP #$20        ; set A short
.396a07	a0 28 00	ldy #$0028	                LDY #40
.396a0a	a2 36 00	ldx #$0036	                LDX #27*2
.396a0d	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396a11	22 18 10 38	jsl $381018	                JSL PUTC
.396a15	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a19	22 18 10 38	jsl $381018	                JSL PUTC
.396a1d	e8		inx		                INX
.396a1e	e8		inx		                INX
.396a1f	88		dey		                DEY
.396a20	88		dey		                DEY
.396a21	d0 ea		bne $396a0d	                BNE pr_model
.396a23	c2 10		rep #$10	                REP #$10        ; set X long
.396a25	e2 20		sep #$20	                SEP #$20        ; set A short
.396a27	a0 14 00	ldy #$0014	                LDY #20
.396a2a	a2 14 00	ldx #$0014	                LDX #10*2
.396a2d	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396a31	22 18 10 38	jsl $381018	                JSL PUTC
.396a35	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a39	22 18 10 38	jsl $381018	                JSL PUTC
.396a3d	e8		inx		                INX
.396a3e	e8		inx		                INX
.396a3f	88		dey		                DEY
.396a40	88		dey		                DEY
.396a41	d0 ea		bne $396a2d	                BNE pr_serial
.396a43	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396a47	c2 30		rep #$30	                REP #$30        ; set A&X long
.396a49	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396a4c	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a50	a9 00 00	lda #$0000	                LDA #0
.396a53	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a57	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396a5a	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a5e	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a61	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a65	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396a68	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396a6b	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396a6f	e8		inx		                INX
.396a70	e8		inx		                INX
.396a71	e0 00 02	cpx #$0200	                CPX #512
.396a74	d0 f5		bne $396a6b	                BNE init_loop
.396a76	22 36 6c 39	jsl $396c36	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396a7a	b0 06		bcs $396a82	                BCS read_sect1
.396a7c	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396a80	80 2c		bra $396aae	                BRA done
.396a82	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396a85	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a89	a9 00 00	lda #$0000	                LDA #0
.396a8c	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a90	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396a93	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a97	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396a9a	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a9e	22 a5 6b 39	jsl $396ba5	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396aa2	b0 06		bcs $396aaa	                BCS all_ok
.396aa4	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396aa8	80 04		bra $396aae	                BRA done
.396aaa					all_ok
.396aaa	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396aae	28		plp		done            PLP
.396aaf	6b		rtl		                RTL
.396ab0					IDE_INIT
.396ab0	e2 20		sep #$20	                SEP #$20        ; set A short
.396ab2	20 d3 6a	jsr $396ad3	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396ab5	a9 00		lda #$00	              LDA #$00
.396ab7	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396abb	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396abf	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396ac3	a9 01		lda #$01	              LDA #$01
.396ac5	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396ac9	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396acb	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396acf	20 f1 6a	jsr $396af1	              JSR IDE_DRV_READY_NOTBUSY
.396ad2	6b		rtl		              RTL
.396ad3					IDE_DRIVE_BSY
.396ad3	08		php		                PHP
.396ad4	e2 20		sep #$20	                SEP #$20        ; set A short
.396ad6	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396ada	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396adc	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396ade	f0 f6		beq $396ad6	                BEQ loop
.396ae0	28		plp		                PLP
.396ae1	60		rts		                RTS
.396ae2					IDE_DRIVE_READY
.396ae2	08		php		                PHP
.396ae3	e2 20		sep #$20	                SEP #$20        ; set A short
.396ae5	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396ae9	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396aeb	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396aed	d0 f6		bne $396ae5	                BNE loop
.396aef	28		plp		                PLP
.396af0	60		rts		                RTS
.396af1					IDE_DRV_READY_NOTBUSY
.396af1	08		php		                PHP
.396af2	e2 20		sep #$20	                SEP #$20        ; set A short
.396af4	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396af8	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396afa	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396afc	d0 f6		bne $396af4	                BNE loop                            ; No: keep waiting
.396afe	28		plp		ret_success     PLP                                 ; Return success
.396aff	38		sec		                SEC
.396b00	60		rts		                RTS
.396b01	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396b05	28		plp		                PLP                                 ; Return failure
.396b06	18		clc		                CLC
.396b07	60		rts		                RTS
.396b08					IDE_NOT_DRQ
.396b08	08		php		                PHP
.396b09	e2 20		sep #$20	                SEP #$20        ; set A short
.396b0b	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396b0f	29 08		and #$08	                AND #IDE_STAT_DRQ
.396b11	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396b13	d0 f6		bne $396b0b	                BNE loop                ; No: keep waiting
.396b15	28		plp		                PLP
.396b16	60		rts		                RTS
.396b17					IDE_IDENTIFY
.396b17	5a		phy		                PHY
.396b18	8b		phb		                PHB
.396b19	0b		phd		                PHD
.396b1a	08		php		                PHP
.396b1b	48		pha		                PHA             ; begin setdbr macro
.396b1c	08		php		                PHP
.396b1d	e2 20		sep #$20	                SEP #$20        ; set A short
.396b1f	a9 00		lda #$00	                LDA #0
.396b21	48		pha		                PHA
.396b22	ab		plb		                PLB
.396b23	28		plp		                PLP
.396b24	68		pla		                PLA             ; end setdbr macro
.396b25	48		pha		                PHA             ; begin setdp macro
.396b26	08		php		                PHP
.396b27	c2 20		rep #$20	                REP #$20        ; set A long
.396b29	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b2c	5b		tcd		                TCD
.396b2d	28		plp		                PLP
.396b2e	68		pla		                PLA             ; end setdp macro
.396b2f	e2 20		sep #$20	                SEP #$20        ; set A short
.396b31	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b34	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b36	29 07		and #$07	                AND #$07
.396b38	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396b3a	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b3e	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b41	e2 20		sep #$20	                SEP #$20        ; set A short
.396b43	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396b45	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b49	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b4d	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b51	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b55	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396b57	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396b5b	f0 29		beq $396b86	                BEQ no_media                    ; If 0: there is no drive
.396b5d	20 d3 6a	jsr $396ad3	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396b60	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b63	90 2d		bcc $396b92	                BCC ret_failure                 ; If an error occurred, return it
.396b65	c2 30		rep #$30	                REP #$30        ; set A&X long
.396b67	a0 00 00	ldy #$0000	                LDY #0
.396b6a	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b6e	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b70	c8		iny		                INY                             ; Move to the next position
.396b71	c8		iny		                INY
.396b72	c0 00 02	cpy #$0200	                CPY #512
.396b75	d0 f3		bne $396b6a	                BNE read_loop
.396b77					ret_success
.396b77	e2 20		sep #$20	                SEP #$20        ; set A short
.396b79	a9 00		lda #$00	                LDA #0
.396b7b	85 00		sta $0320	                STA BIOS_STATUS
.396b7d	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b80	28		plp		                PLP                             ; Return success
.396b81	2b		pld		                PLD
.396b82	ab		plb		                PLB
.396b83	7a		ply		                PLY
.396b84	38		sec		                SEC
.396b85	6b		rtl		                RTL
.396b86					no_media
.396b86	e2 20		sep #$20	                SEP #$20        ; set A short
.396b88	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396b8a	80 0a		bra $396b96	                BRA pass_failure
.396b8c					not_ata
.396b8c	e2 20		sep #$20	                SEP #$20        ; set A short
.396b8e	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396b90	80 04		bra $396b96	                BRA pass_failure
.396b92					ret_failure
.396b92	e2 20		sep #$20	                SEP #$20        ; set A short
.396b94	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396b96	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396b98	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396b9c	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b9f	28		plp		                PLP
.396ba0	2b		pld		                PLD
.396ba1	ab		plb		                PLB
.396ba2	7a		ply		                PLY
.396ba3	18		clc		                CLC
.396ba4	6b		rtl		                RTL
.396ba5					IDE_GETBLOCK
.396ba5	5a		phy		                PHY
.396ba6	8b		phb		                PHB
.396ba7	0b		phd		                PHD
.396ba8	08		php		                PHP
.396ba9	48		pha		                PHA             ; begin setdbr macro
.396baa	08		php		                PHP
.396bab	e2 20		sep #$20	                SEP #$20        ; set A short
.396bad	a9 00		lda #$00	                LDA #0
.396baf	48		pha		                PHA
.396bb0	ab		plb		                PLB
.396bb1	28		plp		                PLP
.396bb2	68		pla		                PLA             ; end setdbr macro
.396bb3	48		pha		                PHA             ; begin setdp macro
.396bb4	08		php		                PHP
.396bb5	c2 20		rep #$20	                REP #$20        ; set A long
.396bb7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396bba	5b		tcd		                TCD
.396bbb	28		plp		                PLP
.396bbc	68		pla		                PLA             ; end setdp macro
.396bbd	e2 20		sep #$20	                SEP #$20        ; set A short
.396bbf	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396bc2	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396bc4	29 07		and #$07	                AND #$07
.396bc6	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396bc8	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396bcc	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396bcf	e2 20		sep #$20	                SEP #$20        ; set A short
.396bd1	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396bd3	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396bd7	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396bd9	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396bdd	a5 03		lda $0323	                LDA BIOS_LBA+1
.396bdf	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396be3	a5 04		lda $0324	                LDA BIOS_LBA+2
.396be5	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396be9	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396beb	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396bef	ea		nop		                NOP                             ; Wait about 500ns
.396bf0	ea		nop		                NOP
.396bf1	ea		nop		                NOP
.396bf2	ea		nop		                NOP
.396bf3	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bf6	90 2b		bcc $396c23	                BCC ret_failure                 ; If an error occurred, return it
.396bf8	e2 20		sep #$20	                SEP #$20        ; set A short
.396bfa	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396bfe	a0 00 00	ldy #$0000	                LDY #0
.396c01	c2 20		rep #$20	                REP #$20        ; set A long
.396c03	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c07	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c09	c8		iny		                INY                             ; Move to the next position
.396c0a	c8		iny		                INY
.396c0b	c0 00 02	cpy #$0200	                CPY #512
.396c0e	d0 f3		bne $396c03	                BNE read_loop
.396c10	ea		nop		                NOP                             ; Wait about 500ns
.396c11	ea		nop		                NOP
.396c12	ea		nop		                NOP
.396c13	ea		nop		                NOP
.396c14					ret_success
.396c14	e2 20		sep #$20	                SEP #$20        ; set A short
.396c16	a9 00		lda #$00	                LDA #0
.396c18	85 00		sta $0320	                STA BIOS_STATUS
.396c1a	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c1d	28		plp		                PLP                             ; Return success
.396c1e	2b		pld		                PLD
.396c1f	ab		plb		                PLB
.396c20	7a		ply		                PLY
.396c21	38		sec		                SEC
.396c22	6b		rtl		                RTL
.396c23					ret_failure
.396c23	e2 20		sep #$20	                SEP #$20        ; set A short
.396c25	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c29	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c2c	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c2e	85 00		sta $0320	                STA BIOS_STATUS
.396c30	28		plp		                PLP
.396c31	2b		pld		                PLD
.396c32	ab		plb		                PLB
.396c33	7a		ply		                PLY
.396c34	18		clc		                CLC
.396c35	6b		rtl		                RTL
.396c36					IDE_PUTBLOCK
.396c36	5a		phy		                PHY
.396c37	8b		phb		                PHB
.396c38	0b		phd		                PHD
.396c39	08		php		                PHP
.396c3a	48		pha		                PHA             ; begin setdbr macro
.396c3b	08		php		                PHP
.396c3c	e2 20		sep #$20	                SEP #$20        ; set A short
.396c3e	a9 00		lda #$00	                LDA #0
.396c40	48		pha		                PHA
.396c41	ab		plb		                PLB
.396c42	28		plp		                PLP
.396c43	68		pla		                PLA             ; end setdbr macro
.396c44	48		pha		                PHA             ; begin setdp macro
.396c45	08		php		                PHP
.396c46	c2 20		rep #$20	                REP #$20        ; set A long
.396c48	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c4b	5b		tcd		                TCD
.396c4c	28		plp		                PLP
.396c4d	68		pla		                PLA             ; end setdp macro
.396c4e	e2 20		sep #$20	                SEP #$20        ; set A short
.396c50	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c53	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c55	29 07		and #$07	                AND #$07
.396c57	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396c59	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c5d	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c60	e2 20		sep #$20	                SEP #$20        ; set A short
.396c62	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396c64	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c68	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396c6a	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c6e	a5 03		lda $0323	                LDA BIOS_LBA+1
.396c70	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c74	a5 04		lda $0324	                LDA BIOS_LBA+2
.396c76	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c7a	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396c7c	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396c80	ea		nop		                NOP                             ; Wait about 500ns
.396c81	ea		nop		                NOP
.396c82	ea		nop		                NOP
.396c83	ea		nop		                NOP
.396c84	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c87	90 33		bcc $396cbc	                BCC ret_failure                 ; If an error occurred, return it
.396c89	c2 30		rep #$30	                REP #$30        ; set A&X long
.396c8b	a0 00 00	ldy #$0000	                LDY #0
.396c8e	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396c90	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396c94	c8		iny		                INY                             ; Move to the next position
.396c95	c8		iny		                INY
.396c96	c0 00 02	cpy #$0200	                CPY #512
.396c99	d0 f3		bne $396c8e	                BNE read_loop
.396c9b	ea		nop		                NOP                             ; Wait about 500ns
.396c9c	ea		nop		                NOP
.396c9d	ea		nop		                NOP
.396c9e	ea		nop		                NOP
.396c9f	20 f1 6a	jsr $396af1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396ca2	90 18		bcc $396cbc	                BCC ret_failure                 ; If an error occurred, return it
.396ca4	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396ca8	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396cab	d0 0f		bne $396cbc	                BNE ret_failure                 ; If error: return failure
.396cad					ret_success
.396cad	e2 20		sep #$20	                SEP #$20        ; set A short
.396caf	a9 00		lda #$00	                LDA #0
.396cb1	85 00		sta $0320	                STA BIOS_STATUS
.396cb3	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cb6	28		plp		                PLP                             ; Return success
.396cb7	2b		pld		                PLD
.396cb8	ab		plb		                PLB
.396cb9	7a		ply		                PLY
.396cba	38		sec		                SEC
.396cbb	6b		rtl		                RTL
.396cbc					ret_failure
.396cbc	e2 20		sep #$20	                SEP #$20        ; set A short
.396cbe	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396cc2	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cc5	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cc7	85 00		sta $0320	                STA BIOS_STATUS
.396cc9	28		plp		                PLP
.396cca	2b		pld		                PLD
.396ccb	ab		plb		                PLB
.396ccc	7a		ply		                PLY
.396ccd	18		clc		                CLC
.396cce	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396ccf					KERNEL_DATA
>396ccf	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396cd7	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396ce7	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396cf7	58 20 0d
>396cfa	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396d02	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396d12	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396d22	20 20 0d
>396d25	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396d2d	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396d3d	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396d4d	20 20 0d
>396d50	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396d58	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396d68	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396d78	20 20 0d
>396d7b	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396d83	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396d93	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396da3	20 20 0d
>396da6	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396dae	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396dbe	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396dce	0d
>396dcf	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396dd7	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396de7	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396df4	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+833 (2020-08-08)"
>396dfc	6c 70 68 61 2b 38 33 33 20 28 32 30 32 30 2d 30
>396e0c	38 2d 30 38 29

;******  Return to file: src\kernel.asm

>396e11	0d 00				                .text $0D,$00
.396e13					old_pc_style_stat
>396e13	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e1b	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396e2b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e3b	fd fd
>396e3d	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e45	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396e55	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e65	fd fd
>396e67	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e6f	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396e7f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e8f	fd fd
>396e91	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396e99	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ea9	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396eb9	fd fd
>396ebb	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ec3	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ed3	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ee3	fd fd
>396ee5	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396ee9	00 00 80 ff			                .text $00, $00, $80, $FF
>396eed	00 80 00 ff			                .text $00, $80, $00, $FF
>396ef1	80 00 00 ff			                .text $80, $00, $00, $FF
>396ef5	00 80 80 ff			                .text $00, $80, $80, $FF
>396ef9	80 80 00 ff			                .text $80, $80, $00, $FF
>396efd	80 00 80 ff			                .text $80, $00, $80, $FF
>396f01	80 80 80 ff			                .text $80, $80, $80, $FF
>396f05	00 45 ff ff			                .text $00, $45, $FF, $FF
>396f09	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f0d	00 00 20 ff			                .text $00, $00, $20, $FF
>396f11	00 20 00 ff			                .text $00, $20, $00, $FF
>396f15	20 00 00 ff			                .text $20, $00, $00, $FF
>396f19	20 20 20 ff			                .text $20, $20, $20, $FF
>396f1d	40 40 40 ff			                .text $40, $40, $40, $FF
>396f21	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396f25	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396f29	00 00 80 ff			                .text $00, $00, $80, $FF
>396f2d	00 80 00 ff			                .text $00, $80, $00, $FF
>396f31	80 00 00 ff			                .text $80, $00, $00, $FF
>396f35	00 20 20 ff			                .text $00, $20, $20, $FF
>396f39	20 20 00 ff			                .text $20, $20, $00, $FF
>396f3d	20 00 20 ff			                .text $20, $00, $20, $FF
>396f41	20 20 20 ff			                .text $20, $20, $20, $FF
>396f45	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396f49	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f4d	00 00 20 ff			                .text $00, $00, $20, $FF
>396f51	00 20 00 ff			                .text $00, $20, $00, $FF
>396f55	40 00 00 ff			                .text $40, $00, $00, $FF
>396f59	10 10 10 ff			                .text $10, $10, $10, $FF
>396f5d	40 40 40 ff			                .text $40, $40, $40, $FF
>396f61	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396f65	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396f6d	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396f7d	00
>396f7e	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396f86	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396f96	00
>396f97	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396f9f	20 45 78 65 63 75 74 65 64 2e 0d 00
>396fab	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396fb3	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396fc3	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396fcb	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396fdb	64 2e 2e 2e 0d 00
>396fe1	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396fe9	20 50 72 65 73 65 6e 74 0d 00
>396ff3	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396ffb	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>39700b	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39701b	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397023	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39702f	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397037	45 44 2e 00
>39703b	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397043	47 20 42 4d 50 20 50 41 52 53 45 52 00
>397050	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397058	50 72 65 73 65 6e 74 3a 00
>397061	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397069	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397079	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397087	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39708f	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>39709f	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>3970ac	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>3970b4	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3970c4	72 64 2e 00
>3970c8	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>3970d0	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3970e0	49 44 45 20 64 72 69 76 65 2e 00
>3970eb	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>3970f3	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397103	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397111	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397119	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397128	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397130	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397138	52 4f 52 00
>39713c	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397144	38 39 41 42 43 44 45 46 00
>39714d					.align 256
>397200	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397228	27 60 00 5c 7a 78 63 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397238	00 20 00 81 82 83 84 85
>397240	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397248	11 00 00 9d 00 1d 00 00
>397250	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	8c 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397288	26 2a 28 29 5f 2b 08 09
>397290	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397298	4f 50 7b 7d 0d 00 41 53
>3972a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3972a8	22 7e 00 5c 5a 58 43 56
>3972b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>397328	27 60 00 5c 7a 78 03 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397388	37 38 39 30 2d 3d 08 09
>397390	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397398	6f 70 5b 5d 0d 00 61 73
>3973a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3973a8	27 60 00 5c 7a 78 63 76
>3973b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397418	6f 70 5b 5d 0d 00 61 73
>397420	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397428	27 60 00 5c 7a 78 63 76
>397430	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397488	00 00 00 00 00 00 00 00
>397490	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397498	00 00 00 00 00 00 00 00
>3974a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3974a8	00 00 00 00 00 00 00 00
>3974b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 00 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3974c8	11 00 00 9d 00 1d 00 00
>3974d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500					.align 256
>397500	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397508	34 37 3a 3d 3f 41 44 46
>397510	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397518	57 58 5a 5b 5d 5e 60 61
>397520	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397528	6d 6f 70 71 72 73 75 76
>397530	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397538	80 81 82 83 84 85 86 87
>397540	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397548	8f 90 91 92 93 93 94 95
>397550	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397558	9d 9e 9e 9f a0 a1 a2 a2
>397560	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397568	a9 aa ab ab ac ad ae ae
>397570	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397578	b5 b5 b6 b7 b7 b8 b9 b9
>397580	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397588	bf c0 c0 c1 c2 c2 c3 c4
>397590	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397598	c9 ca ca cb cb cc cd cd
>3975a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3975a8	d2 d3 d4 d4 d5 d5 d6 d6
>3975b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3975b8	db dc dc dd de de df df
>3975c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3975c8	e4 e4 e5 e5 e6 e6 e7 e7
>3975d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3975d8	ec ec ed ed ee ee ef ef
>3975e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3975e8	f4 f4 f5 f5 f6 f6 f7 f7
>3975f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3975f8	fb fc fc fd fd fe fe ff
>397600					.align 256
>397600	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397608	25 27 2a 2c 2e 30 32 34
>397610	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397618	44 46 47 49 4a 4c 4d 4f
>397620	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397628	5b 5c 5d 5e 60 61 62 63
>397630	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397638	6d 6e 70 71 72 73 74 75
>397640	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397648	7e 7f 80 81 82 83 84 84
>397650	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397658	8d 8e 8e 8f 90 91 92 93
>397660	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397668	9a 9b 9c 9d 9e 9f 9f a0
>397670	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397678	a7 a8 a9 aa aa ab ac ad
>397680	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397688	b3 b4 b5 b6 b6 b7 b8 b8
>397690	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397698	bf bf c0 c1 c2 c2 c3 c4
>3976a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3976a8	ca ca cb cc cc cd ce ce
>3976b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3976b8	d4 d5 d6 d6 d7 d7 d8 d9
>3976c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3976c8	de df e0 e0 e1 e1 e2 e3
>3976d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3976d8	e8 e9 e9 ea ea eb ec ec
>3976e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3976e8	f1 f2 f3 f3 f4 f4 f5 f5
>3976f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3976f8	fb fb fc fc fd fd fe ff
>397700					.align 256
>397700	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397708	83 dd ce 39 cd c5 3b 15
>397710	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397718	87 12 31 65 89 27 88 42
>397720	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397728	94 ce 56 ec fe da 58 c9
>397730	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397738	d0 10 2c b2 4b ea 32 61
>397740	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397748	a1 e6 ca 2d b3 ce b0 79
>397750	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397758	5f e3 fb bd 15 2e be f5
>397760	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397768	8d 8f 2c 80 0a 5e 99 36
>397770	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397778	13 52 44 2f e3 ef 44 a2
>397780	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397788	be 23 02 58 0a 52 5e b4
>397790	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397798	d5 cf 3e df c4 9e da bb
>3977a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3977a8	77 7d b1 3b 4a 68 35 6e
>3977b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3977b8	b5 8f 44 63 55 6f e1 50
>3977c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3977c8	57 74 b9 bd 05 14 50 eb
>3977d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3977d8	44 bc ec db 22 58 fc be
>3977e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3977e8	24 aa 82 11 5c 9f 43 4d
>3977f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3977f8	3e 3d 66 7e 0a 1c 6b 74
>397800					.align 16
>397800	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397808	01 01 01 00 00 00 00 00
>397810	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397818	ff ff ff 01 00 00 00 00
>397820	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397828	01 55 ff ff 01 00 00 00
>397830	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397838	ff ff ff ff 01 00 00 00
>397840	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397848	ff ff 01 ff ff 01 00 00
>397850	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397858	01 ff ff 01 ff 01 00 00
>397860	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397868	ff 01 ff ff ff 01 00 00
>397870	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397878	ff ff ff ff ff 01 01 00
>397880	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397888	ff ff ff ff 01 ff ff 01
>397890	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397898	ff ff ff ff ff ff ff 01
>3978a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3978a8	55 55 01 ff ff 55 01 00
>3978b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3978b8	01 01 55 ff 55 01 00 00
>3978c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3978c8	01 55 55 55 01 00 00 00
>3978d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3978d8	01 55 55 01 00 00 00 00
>3978e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3978e8	00 01 01 00 00 00 00 00
>3978f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3978f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 1a 67 3a 5c 2c 4d 3a		.binary "binaries/basic816.bin"
>3a0008	5c f8 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 6b 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 10 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a01f8	8f 24 02 af 60 08 e2 20 48 48 a9 00 22 3c 10 00
>3a0208	68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60
>3a0218	08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00
>3a0228	af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2
>3a0238	20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00
>3a0248	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0258	a5 b4 1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4
>3a0268	2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0278	28 e2 20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0
>3a0288	07 af b3 08 00 20 28 00 af b2 08 00 29 80 f0 07
>3a0298	af b3 08 00 20 fd 01 af b2 08 00 29 40 f0 14 af
>3a02a8	b3 08 00 20 18 02 af b3 08 00 c9 0d d0 05 a9 0a
>3a02b8	20 18 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06
>3a02c8	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a02d8	4a 4a 4a 4a 4a 20 ea 02 68 29 ff 00 20 ea 02 68
>3a02e8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 01 03
>3a02f8	68 20 01 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a0308	aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da
>3a0318	5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a
>3a0328	48 ab bd 00 00 f0 06 20 fd 01 e8 80 f5 c2 30 2b
>3a0338	ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a0348	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0358	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0368	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0378	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0388	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0398	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a03a8	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a03b8	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a03c8	00 f0 09 20 b2 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a03d8	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a03e8	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03f8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a0408	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0418	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a0428	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a0438	00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0448	08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f
>3a0458	10 01 00 af 14 01 00 85 21 64 23 af 16 01 00 85
>3a0468	27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2
>3a0478	20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02
>3a0488	60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48
>3a0498	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a04a8	29 ff 00 20 b8 18 e2 20 dc d2 08 08 e2 20 a5 25
>3a04b8	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04c8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a04d8	e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20
>3a04e8	a5 23 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04f8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a0508	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0518	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a0528	20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0
>3a0538	29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9
>3a0548	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a0558	ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a0568	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a0578	00 20 b8 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9
>3a0588	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a0598	00 c9 26 f0 44 e2 20 a7 00 20 57 03 90 76 20 d6
>3a05a8	03 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05b8	69 00 00 85 23 20 5d 1b 80 db 08 c2 20 48 a9 00
>3a05c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a05d8	00 20 b8 18 e2 20 dc d2 08 20 5d 1b a7 00 c9 48
>3a05e8	f0 04 c9 68 d0 d4 20 5d 1b e2 20 a7 00 20 68 03
>3a05f8	90 22 20 89 03 c2 20 06 21 26 23 06 21 26 23 06
>3a0608	21 26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20
>3a0618	5d 1b 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8
>3a0628	e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0638	88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0648	00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85
>3a0658	02 20 7e 1b a7 00 20 57 03 90 0c 20 81 05 c2 20
>3a0668	a5 21 85 d5 20 7e 1b c2 20 a5 00 85 18 e2 20 a5
>3a0678	02 85 1a 20 8f 06 e2 20 20 00 07 c9 00 f0 05 20
>3a0688	89 08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a
>3a0698	85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a06a8	00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a06b8	c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a06c8	c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a06d8	0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a06e8	5d 1b 80 b3 a7 00 c9 3a d0 03 20 5d 1b a9 03 85
>3a06f8	1c a9 8e 20 89 08 28 60 08 0b 08 c2 20 48 a9 00
>3a0708	08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 3e 08 a5
>3a0718	1c d0 03 4c a3 07 c2 20 a5 18 85 00 e2 20 a5 1a
>3a0728	85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0738	c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0
>3a0748	05 20 c5 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00
>3a0758	c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04
>3a0768	20 48 40 b0 09 e2 20 20 d5 07 c9 00 d0 11 c2 20
>3a0778	a5 00 85 04 e2 20 a5 02 85 06 20 5d 1b 80 a9 c9
>3a0788	81 d0 18 20 1f 06 c9 00 f0 14 89 80 10 0b 20 2a
>3a0798	09 c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2
>3a07a8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a07b8	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 e2 20
>3a07c8	20 5d 1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2
>3a07d8	30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 54 09
>3a07e8	85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00
>3a07f8	b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85
>3a0808	0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 b2 03
>3a0818	d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28
>3a0828	60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69
>3a0838	00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 c2 30 a9 54 09 85 08 a9 3a 00 85 0a 64
>3a0858	0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c
>3a0868	90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a
>3a0878	69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28
>3a0888	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87
>3a0898	00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00
>3a08a8	85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2
>3a08b8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69
>3a08d8	54 09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08e8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a08f8	20 cd 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08
>3a0908	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0918	a9 3a 48 ab 68 28 c2 30 20 cd 08 bd 04 00 2b ab
>3a0928	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0938	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cd 08
>3a0948	bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0
>3a0958	8b 21 00 00 03 01 12 d0 ca 21 00 00 02 01 14 d0
>3a0968	d8 21 00 00 02 01 16 d0 f1 21 00 00 02 03 18 d0
>3a0978	04 22 00 00 00 01 1c d0 00 00 00 00 04 01 1e d0
>3a0988	46 22 00 00 04 01 20 d0 7c 22 00 00 04 01 22 d0
>3a0998	61 22 00 00 05 03 24 d0 35 22 00 00 06 03 28 d0
>3a09a8	17 22 00 00 07 02 2c d0 26 22 00 00 ff 01 2f d0
>3a09b8	00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33 d0
>3a09c8	41 32 00 00 20 05 37 d0 46 36 00 00 20 03 3d d0
>3a09d8	91 35 00 00 20 04 41 d0 31 35 00 00 20 03 46 d0
>3a09e8	28 35 00 00 20 02 4a d0 c0 34 00 00 50 04 4d d0
>3a09f8	00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57 d0
>3a0a08	03 34 00 00 20 06 5d d0 7c 34 00 00 20 03 64 d0
>3a0a18	58 32 00 00 50 02 68 d0 00 00 00 00 50 04 6b d0
>3a0a28	00 00 00 00 20 04 70 d0 4c 33 00 00 20 02 75 d0
>3a0a38	52 32 00 00 20 04 78 d0 55 32 00 00 50 05 7d d0
>3a0a48	00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89 d0
>3a0a58	4f 32 00 00 20 03 8e d0 87 35 00 00 20 04 92 d0
>3a0a68	22 32 00 00 20 04 97 d0 b2 31 00 00 20 05 9c d0
>3a0a78	48 31 00 00 20 05 a2 d0 d5 30 00 00 20 03 a8 d0
>3a0a88	d1 30 00 00 20 04 ac d0 b2 2f 00 00 20 04 b1 d0
>3a0a98	c4 30 00 00 20 07 b6 d0 c8 30 00 00 20 03 be d0
>3a0aa8	05 2f 00 00 20 04 c2 d0 6e 2e 00 00 04 02 c7 d0
>3a0ab8	cf 22 00 00 04 02 ca d0 b2 22 00 00 04 02 cd d0
>3a0ac8	97 22 00 00 30 01 d0 d0 e0 37 00 00 30 03 d2 d0
>3a0ad8	fa 3b 00 00 30 04 d6 d0 4a 3c 00 00 30 05 db d0
>3a0ae8	db 3c 00 00 30 05 e1 d0 8d 3c 00 00 30 04 e7 d0
>3a0af8	1a 3d 00 00 30 03 ec d0 6f 3d 00 00 30 03 f0 d0
>3a0b08	b4 3d 00 00 30 03 f4 d0 3d 3e 00 00 30 03 f8 d0
>3a0b18	c6 3e 00 00 30 03 fc d0 f6 3e 00 00 30 04 00 d1
>3a0b28	69 3b 00 00 30 03 05 d1 08 3b 00 00 30 04 09 d1
>3a0b38	b7 3a 00 00 30 03 0e d1 61 3a 00 00 30 05 12 d1
>3a0b48	98 39 00 00 30 06 18 d1 b7 38 00 00 30 04 1f d1
>3a0b58	02 38 00 00 10 03 24 d1 84 3f 00 00 10 03 28 d1
>3a0b68	4f 3f 00 00 10 04 2c d1 10 49 00 00 10 04 31 d1
>3a0b78	9b 3f 00 00 10 03 36 d1 37 46 00 00 20 05 3a d1
>3a0b88	e2 47 00 00 10 04 40 d1 bd 48 00 00 20 05 45 d1
>3a0b98	c7 49 00 00 20 03 4b d1 e6 4a 00 00 10 04 4f d1
>3a0ba8	53 4a 00 00 20 06 54 d1 5c 4b 00 00 20 04 5b d1
>3a0bb8	77 4c 00 00 10 07 60 d1 4c 3f 00 00 20 03 68 d1
>3a0bc8	fa 2d 00 00 20 05 6c d1 2c 2d 00 00 20 09 72 d1
>3a0bd8	51 24 00 00 20 09 7c d1 ec 23 00 00 20 0a 86 d1
>3a0be8	1a 24 00 00 20 07 91 d1 59 23 00 00 30 08 99 d1
>3a0bf8	0b 37 00 00 20 07 a2 d1 ee 22 00 00 30 08 aa d1
>3a0c08	78 37 00 00 20 08 b3 d1 62 25 00 00 20 08 bc d1
>3a0c18	be 24 00 00 20 06 c5 d1 1a 26 00 00 20 09 cc d1
>3a0c28	d0 26 00 00 20 04 d6 d1 63 28 00 00 20 04 db d1
>3a0c38	a9 28 00 00 20 04 e0 d1 0f 29 00 00 20 06 e5 d1
>3a0c48	b5 29 00 00 20 08 ec d1 42 2a 00 00 20 0a f5 d1
>3a0c58	76 2a 00 00 20 07 00 d2 99 2b 00 00 20 07 08 d2
>3a0c68	27 2c 00 00 20 08 10 d2 a3 2c 00 00 20 06 19 d2
>3a0c78	e2 2c 00 00 00 00 00 00 00 00 00 00 08 0b 08 c2
>3a0c88	20 48 a9 00 08 5b 68 28 c2 30 a9 ff ff 85 b8 e2
>3a0c98	20 a9 37 85 ba c2 20 64 b5 64 bb e2 20 64 b7 64
>3a0ca8	bd 2b 28 60 5a 08 e2 20 85 e8 c2 10 86 8d c2 20
>3a0cb8	a5 0e 48 a5 0c 48 a5 12 48 a5 10 48 20 5c 0d b0
>3a0cc8	03 20 e0 0c 20 e8 0e c2 20 68 85 10 68 85 12 68
>3a0cd8	85 0c 68 85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00
>3a0ce8	08 5b 68 28 e2 20 a6 8d ca 86 0c e8 c2 30 38 a5
>3a0cf8	b8 e5 0c 85 be e2 20 a5 ba e9 00 85 c0 20 e8 0e
>3a0d08	e2 20 a5 e8 a0 00 00 97 c1 a9 00 a0 01 00 97 c1
>3a0d18	a0 02 00 97 c1 c2 20 a9 00 00 97 c1 c2 20 18 a5
>3a0d28	b8 69 01 00 a0 05 00 97 c1 e2 20 c8 c8 a5 ba 69
>3a0d38	00 97 c1 c2 20 a5 be 85 b5 e2 20 a5 c0 85 b7 c2
>3a0d48	20 38 a5 c1 e9 01 00 85 b8 e2 20 a5 c3 e9 00 85
>3a0d58	ba 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0d68	c2 30 c2 20 a5 bb 85 c7 e2 20 a5 bd 85 c9 a5 c7
>3a0d78	d0 17 e2 20 a5 c9 d0 11 c2 20 a9 00 00 85 cd e2
>3a0d88	20 a9 00 85 cf 2b 28 18 60 c2 20 a0 05 00 b7 c7
>3a0d98	85 ca e2 20 c8 c8 b7 c7 85 cc c2 20 18 a5 c7 65
>3a0da8	8d 85 0c e2 20 a5 c9 69 00 85 0e c2 20 18 a5 0c
>3a0db8	69 08 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5
>3a0dc8	0c c5 ca d0 28 e2 20 a5 0e c5 cc d0 20 c2 20 a5
>3a0dd8	cd d0 5d e2 20 a5 cf d0 57 c2 20 a0 02 00 b7 c7
>3a0de8	85 bb e2 20 c8 c8 b7 c7 85 bd 4c 99 0e c2 20 a5
>3a0df8	0c 69 08 00 85 10 e2 20 a5 0e 69 00 85 12 e2 20
>3a0e08	a5 c4 c5 10 b0 3e 90 08 c2 20 a5 c4 c5 10 b0 34
>3a0e18	c2 20 a5 c7 85 cd e2 20 a5 c9 85 cf c2 20 a0 02
>3a0e28	00 b7 cd 85 c7 e2 20 c8 c8 b7 cd 85 c9 4c 76 0d
>3a0e38	c2 20 a0 02 00 b7 c7 97 cd e2 20 c8 c8 b7 c7 97
>3a0e48	cd 4c 99 0e c2 20 a0 05 00 b7 c7 97 0c e2 20 c8
>3a0e58	c8 b7 c7 97 0c c2 20 a0 02 00 b7 c7 97 0c e2 20
>3a0e68	c8 c8 b7 c7 97 0c c2 20 a5 cd d0 14 e2 20 a5 cd
>3a0e78	d0 0e c2 20 a5 0c 85 bb e2 20 a5 0e 85 bd 80 11
>3a0e88	c2 20 a0 02 00 a5 0c 97 cd e2 20 c8 c8 a5 0e 97
>3a0e98	cd c2 20 a5 c7 85 c1 e2 20 a5 c9 85 c3 c2 20 a5
>3a0ea8	c1 85 b5 e2 20 a5 c3 85 b7 c2 20 a0 05 00 a5 0c
>3a0eb8	97 c1 e2 20 c8 c8 a5 0e 97 c1 c2 20 a0 02 00 a9
>3a0ec8	00 00 97 c1 e2 20 c8 c8 97 c1 e2 20 a5 e8 e2 20
>3a0ed8	a0 00 00 97 c1 a0 01 00 a9 00 97 c1 2b 28 38 60
>3a0ee8	08 c2 20 38 a5 be e9 08 00 85 c1 e2 20 a5 c0 e9
>3a0ef8	00 85 c3 28 60 08 e2 20 a5 c3 f0 04 c9 38 b0 12
>3a0f08	c2 20 a5 c1 f0 0c e2 20 a0 01 00 b7 c1 1a 97 c1
>3a0f18	28 60 00 ea 08 e2 20 a5 c3 f0 04 c9 38 b0 17 c2
>3a0f28	20 a5 c1 f0 11 e2 20 a0 01 00 b7 c1 3a 97 c1 d0
>3a0f38	03 20 40 0f 28 60 00 ea 08 c2 20 a5 bb d0 21 e2
>3a0f48	20 a5 bd d0 1b a5 c3 85 bd c2 20 a5 c1 85 bb a9
>3a0f58	00 00 a0 02 00 97 c1 c8 c8 e2 20 97 c1 4c 27 10
>3a0f68	e2 20 a5 bd c5 c3 90 28 c2 20 a5 bb c5 c1 90 20
>3a0f78	c2 20 a5 bb a0 02 00 97 c1 e2 20 c8 c8 a5 bd 97
>3a0f88	c1 c2 20 a5 c1 85 bb e2 20 a5 c3 85 bd 4c 27 10
>3a0f98	c2 20 a5 bb 85 08 e2 20 a5 bd 85 0a e2 20 a0 04
>3a0fa8	00 b7 08 c5 c6 90 32 d0 0b c2 20 a0 02 00 b7 08
>3a0fb8	c5 c4 90 25 c2 20 a0 02 00 b7 08 97 c1 e2 20 c8
>3a0fc8	c8 b7 08 97 c1 c2 20 a5 c1 a0 02 00 97 08 e2 20
>3a0fd8	a5 c3 c8 c8 97 08 4c 27 10 c2 20 a0 02 00 b7 08
>3a0fe8	d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7
>3a0ff8	08 85 0c e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85
>3a1008	08 80 99 c2 20 a5 c1 a0 02 00 97 08 e2 20 c8 c8
>3a1018	a5 c3 97 08 a9 00 97 c1 c2 20 a0 02 00 97 c1 20
>3a1028	2c 10 28 60 08 c2 20 a5 bb 85 c1 e2 20 a5 bd 85
>3a1038	c3 c2 20 a5 c1 d0 09 e2 20 a5 c3 d0 03 4c cf 10
>3a1048	c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85
>3a1058	0e c2 20 a0 05 00 b7 c1 85 10 e2 20 c8 c8 b7 c1
>3a1068	85 12 c2 20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12
>3a1078	f0 1f c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7
>3a1088	c1 85 0e c2 20 a5 0c 85 c1 e2 20 a5 0e 85 c3 80
>3a1098	a0 c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1
>3a10a8	85 0e c2 20 a0 02 00 b7 0c 97 c1 e2 20 c8 c8 b7
>3a10b8	0c 97 c1 c2 20 a0 05 00 b7 0c 97 c1 e2 20 c8 c8
>3a10c8	b7 0c 97 c1 4c 48 10 28 60 08 c2 10 e2 20 64 14
>3a10d8	a5 e0 1a 1a 85 15 e2 20 a5 e1 85 16 c5 ba 90 29
>3a10e8	f0 08 c2 20 a5 14 c5 b8 90 1f 08 c2 20 48 a9 00
>3a10f8	08 5b 68 28 e2 20 a9 03 8f d1 08 00 c2 20 29 ff
>3a1108	00 20 b8 18 e2 20 dc d2 08 28 60 c9 00 d0 05 c0
>3a1118	01 00 f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5
>3a1128	23 10 1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23
>3a1138	49 ff ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64
>3a1148	12 a2 1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5
>3a1158	12 65 12 85 12 ca 10 ed d8 e2 20 20 d1 10 a0 00
>3a1168	00 a5 0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03
>3a1178	00 b5 10 29 f0 4a 4a 4a 4a 20 13 11 b5 10 29 0f
>3a1188	20 13 11 ca 10 eb c0 01 00 d0 0c a9 20 87 14 a0
>3a1198	01 00 a9 30 97 14 c8 a9 00 97 14 28 60 00 ea 08
>3a11a8	e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7
>3a11b8	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a11c8	20 c2 10 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68
>3a11d8	28 a6 21 20 a7 11 84 0c 08 c2 20 48 e2 20 a5 29
>3a11e8	48 ab c2 20 68 28 a6 27 20 a7 11 c2 20 98 38 65
>3a11f8	0c aa e2 20 a9 02 20 ac 0c c2 20 a5 b5 85 08 e2
>3a1208	20 a5 b7 85 0a a0 00 00 08 c2 20 48 e2 20 a5 23
>3a1218	48 ab c2 20 68 28 a6 21 bd 00 00 f0 06 97 08 e8
>3a1228	c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab c2
>3a1238	20 68 28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80 f5
>3a1248	c2 20 a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85 25
>3a1258	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1268	28 c2 30 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68
>3a1278	28 a6 21 20 a7 11 98 aa e8 e2 20 a9 02 20 ac 0c
>3a1288	c2 20 a5 be 85 08 e2 20 a5 c0 85 0a a0 00 00 b7
>3a1298	21 97 08 f0 03 c8 80 f7 a5 08 85 21 a5 09 85 22
>3a12a8	a5 0a 85 23 a9 00 85 24 ab 2b 28 60 08 e2 20 c2
>3a12b8	10 a0 00 00 b7 21 f0 05 c8 80 f9 84 90 c2 30 c4
>3a12c8	27 90 13 f0 11 a5 8d 30 0d f0 0b c4 8d b0 12 a5
>3a12d8	27 d0 0e 4c 35 13 20 d1 10 e2 20 a9 00 87 14 80
>3a12e8	39 20 d1 10 c2 30 18 a5 21 65 27 85 21 a5 23 69
>3a12f8	00 00 85 23 a0 00 00 e2 20 a7 21 97 14 f0 1b c2
>3a1308	20 18 a5 21 69 01 00 85 21 a5 23 69 00 00 85 23
>3a1318	c8 c4 8d d0 e2 a9 00 00 97 14 c2 20 a5 14 85 21
>3a1328	a5 16 85 23 e2 20 a9 02 85 25 20 5c 12 28 60 48
>3a1338	5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9
>3a1348	00 00 85 00 85 18 a9 36 00 85 02 85 1a ad 8a 0f
>3a1358	30 20 a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57 f0
>3a1368	02 b0 05 20 99 13 80 e5 28 2b 7a 68 60 20 3a 1c
>3a1378	80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01
>3a1388	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a1398	08 08 c2 30 85 21 64 23 20 22 11 a5 14 1a 85 21
>3a13a8	a5 16 85 23 20 bb 36 18 a5 18 69 04 00 85 00 a5
>3a13b8	1a 69 00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20
>3a13c8	d8 13 90 fb e2 20 a9 0d 20 18 00 20 3a 1c 28 60
>3a13d8	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a13e8	48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30
>3a13f8	05 20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69
>3a1408	54 09 85 08 a9 3a 00 69 00 00 85 0a 08 e2 20 48
>3a1418	a9 3a 48 ab 68 28 a0 02 00 b7 08 aa 20 c0 02 c2
>3a1428	20 20 5d 1b ab 2b 28 18 60 ab 2b 28 38 60 08 c2
>3a1438	20 a9 ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21
>3a1448	85 23 85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b
>3a1458	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1468	00 48 ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00
>3a1478	bd 02 00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20
>3a1488	38 98 e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08
>3a1498	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a14a8	ab 68 28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9
>3a14b8	00 00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00
>3a14c8	9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2
>3a14d8	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a14e8	68 28 e2 20 c2 10 5a a4 1f 99 00 00 88 84 1f 7a
>3a14f8	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1508	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>3a1518	a4 1f c8 84 1f b9 00 00 c2 20 29 ff 00 7a ab 2b
>3a1528	28 60 08 e2 20 a9 01 20 d3 14 28 60 5a 08 8b 08
>3a1538	e2 20 48 a9 00 48 ab 68 28 e2 20 a4 1f b9 01 00
>3a1548	c9 01 d0 08 c2 20 e6 1f ab 28 7a 60 08 c2 20 48
>3a1558	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1568	29 ff 00 20 b8 18 e2 20 dc d2 08 08 0b 8b c2 20
>3a1578	48 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1588	00 48 ab 68 28 e2 20 c2 10 a4 1f c0 ff 7f f0 11
>3a1598	20 dd 08 85 0c b9 01 00 20 dd 08 c5 0c f0 02 90
>3a15a8	08 c2 20 68 ab 2b 28 18 60 c2 20 68 ab 2b 28 38
>3a15b8	60 4c 81 05 08 e2 20 a9 00 8f 00 4d 00 a2 01 00
>3a15c8	20 66 17 20 dd 04 c2 20 a5 21 9f 00 4d 00 e2 20
>3a15d8	af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 7e 1b
>3a15e8	e2 20 a7 00 c9 8d f0 09 c9 2c d0 0a 20 5d 1b 80
>3a15f8	cf 20 5d 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1608	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a1618	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1628	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a1638	20 dc d2 08 08 20 c6 42 90 23 e2 20 a5 e8 29 80
>3a1648	d0 06 20 1c 41 4c 63 16 e2 20 a9 8c 20 6a 1c 20
>3a1658	2a 15 20 bc 15 20 ad 45 20 34 15 28 60 08 c2 20
>3a1668	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a1678	20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 0b 08 c2
>3a1688	20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 5d 1b a0
>3a1698	00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2
>3a16a8	20 a9 02 a6 0c e8 20 ac 0c a0 00 00 c4 0c f0 29
>3a16b8	a7 00 97 be c8 20 5d 1b 80 f2 08 c2 20 48 a9 00
>3a16c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a16d8	00 20 b8 18 e2 20 dc d2 08 a9 00 97 be c2 20 a5
>3a16e8	be 85 21 e2 20 a5 c0 85 23 a9 02 85 25 20 5d 1b
>3a16f8	2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 07 09
>3a1708	85 2d 20 2a 15 08 e2 20 48 a9 00 48 ab 68 28 20
>3a1718	1f 17 20 34 15 28 60 20 5d 1b 6c 2d 08 08 0b 8b
>3a1728	c2 20 48 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a2
>3a1738	27 08 20 94 14 a2 21 08 20 94 14 20 fc 14 20 07
>3a1748	09 85 2d 08 e2 20 48 a9 00 48 ab 68 28 20 63 17
>3a1758	a2 21 08 20 56 14 68 ab 2b 28 60 6c 2d 08 08 08
>3a1768	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1778	ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c 29 18 30
>3a1788	33 c9 20 d0 03 4c 23 18 c9 3a b0 04 c9 30 b0 56
>3a1798	c9 26 f0 52 c9 22 d0 03 4c 3c 18 c9 5b b0 07 c9
>3a17a8	41 90 03 4c 48 18 c9 7b b0 07 c9 61 90 03 4c 48
>3a17b8	18 4c 29 18 c9 8c f0 40 c9 8d f0 41 20 2a 09 c9
>3a17c8	30 d0 0c 20 fb 16 a2 21 08 20 56 14 4c 7e 17 c9
>3a17d8	00 d0 4e a7 00 a6 1f e0 ff 7f f0 05 20 73 15 b0
>3a17e8	12 20 d3 14 80 35 c2 20 20 b9 15 a2 21 08 20 56
>3a17f8	14 80 83 20 25 17 80 dd 20 d3 14 80 1e e2 20 a4
>3a1808	1f c0 ff 7f f0 46 a4 1f b9 01 00 c9 01 f0 3d c9
>3a1818	8c f0 05 20 25 17 80 ee 20 fc 14 20 5d 1b 4c 7e
>3a1828	17 a6 1f e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20
>3a1838	25 17 80 ed 20 84 16 a2 21 08 20 56 14 4c 7e 17
>3a1848	20 3c 16 a2 21 08 20 56 14 4c 7e 17 a2 21 08 20
>3a1858	94 14 fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab
>3a1868	68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd
>3a1878	5f 85 31 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1888	5b 68 28 c2 30 92 31 c6 31 c6 31 2b 28 60 08 c2
>3a1898	30 29 ff 00 20 7f 18 28 60 08 0b 08 c2 20 48 a9
>3a18a8	00 08 5b 68 28 c2 30 e6 31 e6 31 b2 31 2b 28 60
>3a18b8	8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a18c8	48 a9 00 48 ab 68 28 c2 20 85 21 a9 00 00 85 23
>3a18d8	e2 20 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 12
>3a18e8	19 85 e5 20 63 42 c2 20 a5 d5 85 21 a5 d7 85 23
>3a18f8	e2 20 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 16
>3a1908	19 85 e5 20 63 42 28 2b ab 60 45 52 52 00 45 52
>3a1918	4c 00 e2 20 c2 10 20 33 02 af d1 08 00 0a c2 20
>3a1928	29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be 6c
>3a1938	19 20 c0 02 c2 20 a5 d5 f0 27 a2 9a 19 20 c0 02
>3a1948	08 e2 20 48 a9 00 48 ab 68 28 c2 20 af d5 08 00
>3a1958	8f 21 08 00 a9 00 00 8f 23 08 00 20 db 36 20 33
>3a1968	02 4c 40 21 9e 19 a1 19 a7 19 b4 19 c2 19 d0 19
>3a1978	e3 19 f9 19 09 1a 18 1a 25 1a 36 1a 45 1a 52 1a
>3a1988	60 1a 6f 1a 80 1a 99 1a ad 1a c1 1a d7 1a eb 1a
>3a1998	06 1b 20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53
>3a19a8	79 6e 74 61 78 20 65 72 72 6f 72 00 4f 75 74 20
>3a19b8	6f 66 20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d
>3a19c8	69 73 6d 61 74 63 68 00 56 61 72 69 61 62 6c 65
>3a19d8	20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20
>3a19e8	6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>3a19f8	00 53 74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77
>3a1a08	00 53 74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00
>3a1a18	4f 75 74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c
>3a1a28	65 67 61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69
>3a1a38	6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74
>3a1a48	20 61 20 6e 75 6d 62 65 72 00 4d 61 74 68 20 6f
>3a1a58	76 65 72 66 6c 6f 77 00 4d 61 74 68 20 75 6e 64
>3a1a68	65 72 66 6c 6f 77 00 44 69 76 69 73 69 6f 6e 20
>3a1a78	62 79 20 7a 65 72 6f 00 55 6e 61 62 6c 65 20 74
>3a1a88	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>3a1a98	00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20
>3a1aa8	66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 73
>3a1ab8	61 76 65 20 66 69 6c 65 00 55 6e 61 62 6c 65 20
>3a1ac8	74 6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00 43
>3a1ad8	6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66 69
>3a1ae8	6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 75 70 64
>3a1af8	61 74 65 20 64 69 72 65 63 74 6f 72 79 00 43 6f
>3a1b08	75 6c 64 20 6e 6f 74 20 63 6f 70 79 20 74 68 65
>3a1b18	20 66 69 6c 65 00 08 0b 08 c2 20 48 a9 00 08 5b
>3a1b28	68 28 e2 20 a9 00 85 d0 2b 28 60 0b 08 08 c2 20
>3a1b38	48 a9 00 08 5b 68 28 08 c2 20 a9 1a 19 8f d2 08
>3a1b48	00 e2 20 a9 3a 8f d4 08 00 28 20 87 35 20 c8 30
>3a1b58	64 2f 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1b68	28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69
>3a1b78	00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1b88	68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02
>3a1b98	80 05 20 5d 1b 80 ed 2b 28 60 08 e2 20 a7 00 f0
>3a1ba8	09 c9 3a f0 05 20 5d 1b 80 f3 28 60 08 e2 20 64
>3a1bb8	34 a7 00 f0 19 c5 35 f0 2c c9 98 f0 1e c9 9c f0
>3a1bc8	1a c9 9b f0 1a c9 9d f0 16 20 5d 1b 80 e3 20 3a
>3a1bd8	1c c2 20 a5 d5 f0 1d e2 20 80 d6 e6 34 80 ea c6
>3a1be8	34 30 30 80 e4 a5 33 30 06 a5 34 f0 02 80 da 20
>3a1bf8	5d 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1c08	a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a1c18	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1c28	02 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a1c38	d2 08 08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18 65
>3a1c48	0c 85 18 a5 1a 69 00 00 85 1a a0 02 00 b7 18 85
>3a1c58	d5 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a1c68	28 60 08 e2 20 48 20 7e 1b 68 e2 20 c7 00 d0 08
>3a1c78	20 5d 1b 20 7e 1b 28 60 08 c2 20 48 a9 00 08 5b
>3a1c88	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a1c98	b8 18 e2 20 dc d2 08 08 e2 20 20 7e 1b e2 20 a7
>3a1ca8	00 f0 10 c9 3a f0 0c c5 35 f0 05 20 5d 1b 80 ef
>3a1cb8	28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0
>3a1cc8	0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a
>3a1cd8	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 36
>3a1ce8	14 e2 20 a9 00 85 da ad 8a 0f 30 4b a7 00 c9 3a
>3a1cf8	d0 03 20 5d 1b 20 7e 1b a7 00 d0 03 4c 89 1d 20
>3a1d08	3e 03 b0 52 a7 00 10 10 20 2a 09 85 0c c9 20 d0
>3a1d18	03 4c 77 1d a5 d0 f0 51 08 c2 20 48 a9 00 08 5b
>3a1d28	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a1d38	b8 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a1d48	28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 b8
>3a1d58	18 e2 20 dc d2 08 20 91 35 4c 89 1d 08 e2 20 48
>3a1d68	a9 00 48 ab 68 28 6c 2d 08 a5 0c c9 10 d0 a9 a7
>3a1d78	00 20 07 09 c2 20 85 2d 20 36 14 20 5d 1b 20 64
>3a1d88	1d ab 2b 28 60 08 58 20 1e 1b 20 5d 18 e2 20 9c
>3a1d98	8a 0f c2 20 a5 18 85 00 a5 1a 85 02 4c cb 1d 08
>3a1da8	c2 20 a0 02 00 b7 18 85 d5 e2 20 a5 da c9 03 f0
>3a1db8	12 c2 20 18 a5 18 69 04 00 85 00 e2 20 a5 1a 69
>3a1dc8	00 85 02 c2 20 20 d9 1c e2 20 a5 da c9 03 f0 f3
>3a1dd8	c9 00 d0 31 e2 20 20 7e 1b a7 00 f0 28 c9 3a f0
>3a1de8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1df8	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a1e08	20 5d 1b 80 be 28 60 08 58 e2 20 a9 80 85 d0 9c
>3a1e18	8a 0f 20 5d 18 c2 30 64 2f a0 02 00 b7 18 f0 29
>3a1e28	20 a7 1d e2 20 a5 da c9 01 f0 1e c9 02 f0 ea c9
>3a1e38	03 f0 e6 c2 20 a0 00 00 18 a5 18 77 18 85 18 e2
>3a1e48	20 a5 1a 69 00 85 1a 80 d0 e2 20 a9 00 85 d0 28
>3a1e58	60 08 c2 30 c2 20 a9 00 00 85 08 a9 36 00 85 0a
>3a1e68	c2 20 a0 02 00 b7 08 f0 31 c5 21 f0 1e b0 2b c2
>3a1e78	20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5 0a 69
>3a1e88	00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08 85
>3a1e98	18 e2 20 a5 0a 85 1a 28 38 60 28 18 60 08 e2 20
>3a1ea8	a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e
>3a1eb8	c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2 20
>3a1ec8	a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00 85 08
>3a1ed8	e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20 a7
>3a1ee8	0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02 f0
>3a1ef8	26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e e9
>3a1f08	00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2 20 a5
>3a1f18	0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2 20 18
>3a1f28	a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e c2 20
>3a1f38	18 a5 d7 69 04 00 85 00 e2 20 a5 d9 69 00 85 02
>3a1f48	a0 00 00 c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9
>3a1f58	e9 00 85 d9 20 a5 1e 20 87 35 28 60 08 08 c2 20
>3a1f68	48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d7 18 a5
>3a1f78	d7 69 04 00 85 08 e2 20 a5 d9 69 00 85 0a e2 20
>3a1f88	a0 00 00 b7 18 97 08 f0 03 c8 80 f7 c2 20 98 18
>3a1f98	69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d7 c2 20
>3a1fa8	18 a5 d7 65 0c 85 0c e2 20 a5 d9 69 00 85 d9 c2
>3a1fb8	20 a5 0c 85 d7 c2 20 a0 00 00 a9 00 00 97 d7 c8
>3a1fc8	c0 05 00 d0 f8 20 87 35 28 60 0b 08 08 c2 20 48
>3a1fd8	a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9 36 00
>3a1fe8	85 0a a0 02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0
>3a1ff8	00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a
>3a2008	a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01 00 28
>3a2018	2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00 85 10
>3a2028	a0 00 00 e2 20 b7 18 f0 07 c2 20 e6 10 c8 80 f3
>3a2038	c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d7 69 04 00
>3a2048	85 0c a5 d9 69 00 00 85 0e 18 a5 d7 65 10 85 d7
>3a2058	a5 d9 69 00 00 85 d9 18 a5 d7 69 04 00 85 08 a5
>3a2068	d9 69 00 00 85 0a 20 e4 1e c2 20 a5 10 a0 00 00
>3a2078	97 00 a5 d5 a0 02 00 97 00 18 a5 00 69 04 00 85
>3a2088	00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7 18 97
>3a2098	00 f0 03 c8 80 f7 20 87 35 28 60 08 c2 30 85 d5
>3a20a8	20 d2 1f c9 00 00 f0 2c c9 01 00 f0 22 c2 20 a5
>3a20b8	08 48 a5 0a 48 20 21 1f 68 85 0a 68 85 08 a5 18
>3a20c8	85 00 a5 1a 85 02 20 7e 1b e2 20 a7 00 f0 0a 20
>3a20d8	20 20 80 05 a5 d5 20 64 1f 28 60 8b 08 08 e2 20
>3a20e8	48 a9 3a 48 ab 68 28 a2 20 d2 20 c0 02 28 ab 60
>3a20f8	08 e2 30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0
>3a2108	02 80 f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a2118	28 c2 30 64 d5 a9 00 4f 85 18 a9 00 00 85 1a 20
>3a2128	41 06 c2 20 a5 d5 d0 05 20 8d 1d 80 07 20 a3 20
>3a2138	28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 e3
>3a2148	20 20 08 00 20 0c 00 a9 00 00 20 1c 00 20 0d 21
>3a2158	b0 ef 80 ea e2 20 a5 25 c5 2b d0 06 c2 20 29 ff
>3a2168	00 60 c2 20 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2178	a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a2188	dc d2 08 20 5c 21 c2 20 c9 00 00 f0 27 c9 02 00
>3a2198	d0 03 4c ba 11 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a21a8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a21b8	20 dc d2 08 18 a5 21 65 27 85 21 a5 23 65 29 85
>3a21c8	23 60 38 a5 21 e5 27 85 21 a5 23 e5 29 85 23 60
>3a21d8	a5 21 8f 08 01 00 a5 27 8f 0a 01 00 af 0c 01 00
>3a21e8	85 21 af 0e 01 00 85 23 60 a5 21 8f 12 01 00 a5
>3a21f8	27 8f 10 01 00 af 14 01 00 85 21 60 a5 21 8f 12
>3a2208	01 00 a5 27 8f 10 01 00 af 16 01 00 85 21 60 c2
>3a2218	20 a5 21 25 27 85 21 a5 23 25 29 85 23 60 c2 20
>3a2228	a5 21 05 27 85 21 a5 23 05 29 85 23 60 c2 20 a5
>3a2238	21 49 ff ff 85 21 a5 23 49 ff ff 85 23 60 c2 20
>3a2248	a5 23 c5 29 90 0b a5 21 c5 27 90 05 64 21 64 23
>3a2258	60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 90
>3a2268	0b a5 27 c5 21 90 05 64 21 64 23 60 a9 ff ff 85
>3a2278	21 85 23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21
>3a2288	d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2
>3a2298	20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff
>3a22a8	85 21 85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29
>3a22b8	90 10 d0 06 a5 21 c5 27 90 08 a9 ff ff 85 21 85
>3a22c8	23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90 0f f0
>3a22d8	05 64 21 64 23 60 a5 21 c5 27 f0 02 b0 f3 a9 ff
>3a22e8	ff 85 21 85 23 60 08 e2 20 20 66 17 20 2c 05 20
>3a22f8	0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 6a 1c
>3a2308	20 66 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05
>3a2318	27 48 a9 2c 20 6a 1c 20 66 17 20 2c 05 20 0a 04
>3a2328	a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f
>3a2338	0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f 04
>3a2348	08 af af 0e 08 af 29 f7 8f 0e 08 af 20 a2 1b 28
>3a2358	60 08 e2 20 20 66 17 20 2c 05 20 0a 04 a5 21 0a
>3a2368	0a 0a 0a 05 27 48 a9 2c 20 6a 1c 20 66 17 20 2c
>3a2378	05 20 0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20
>3a2388	6a 1c 20 66 17 20 89 04 20 40 04 c2 20 a5 21 85
>3a2398	90 a5 27 85 21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a
>3a23a8	05 27 48 c2 20 a5 90 85 21 20 0a 04 e2 20 a5 21
>3a23b8	0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08
>3a23c8	af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08 af
>3a23d8	68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af 20
>3a23e8	a2 1b 28 60 08 20 66 17 20 2c 05 e2 20 a5 21 29
>3a23f8	0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 6a 1c 20 66
>3a2408	17 20 2c 05 a5 21 29 0f 0f 53 08 00 8f 1e 00 00
>3a2418	28 60 08 e2 20 20 66 17 20 2c 05 a5 21 48 a9 2c
>3a2428	20 6a 1c 20 66 17 20 2c 05 a5 21 48 a9 2c 20 6a
>3a2438	1c 20 66 17 20 2c 05 a5 21 8f 0d 00 af 68 8f 0e
>3a2448	00 af 68 8f 0f 00 af 28 60 08 e2 20 20 66 17 20
>3a2458	89 04 a5 21 f0 16 a9 01 8f 04 00 af a9 20 8f 08
>3a2468	00 af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04
>3a2478	00 af 22 2c 11 00 a9 2c 85 35 20 9f 1c 90 35 20
>3a2488	5d 1b 20 66 17 20 2c 05 a5 21 48 a9 2c 20 6a 1c
>3a2498	20 66 17 20 2c 05 a5 21 48 a9 2c 20 6a 1c 20 66
>3a24a8	17 20 2c 05 a5 21 8f 05 00 af 68 8f 06 00 af 68
>3a24b8	8f 07 00 af 28 60 08 c2 20 20 66 17 20 2c 05 a9
>3a24c8	af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa bf 4e 25
>3a24d8	3a 85 9c a9 2c 00 20 6a 1c 20 66 17 20 2c 05 a5
>3a24e8	21 0a 0a 18 65 9c 85 9c a9 2c 00 20 6a 1c 20 66
>3a24f8	17 20 2c 05 a0 02 00 a5 21 e2 20 97 9c a9 2c 20
>3a2508	6a 1c 20 66 17 20 2c 05 a0 01 00 a5 21 e2 20 97
>3a2518	9c a9 2c 20 6a 1c 20 66 17 20 2c 05 a0 00 00 a5
>3a2528	21 e2 20 97 9c 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2538	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 b8
>3a2548	18 e2 20 dc d2 08 00 20 00 24 00 28 00 2c 00 30
>3a2558	00 34 00 38 00 3c 40 1f 80 1f da 5a 08 20 66 17
>3a2568	20 89 04 c2 20 a5 21 89 00 01 d0 17 af 00 00 af
>3a2578	89 00 01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f
>3a2588	01 00 af c2 20 a5 21 8f 00 00 af 4a 4a 4a 4a 4a
>3a2598	4a 4a 29 ff 00 0a aa c2 20 bf ea 25 3a 8f 08 f0
>3a25a8	3a bf f2 25 3a 8f 0a f0 3a af 08 f0 3a 8f 08 01
>3a25b8	00 af 0a f0 3a 8f 0a 01 00 af 0c 01 00 8f 0c f0
>3a25c8	3a e2 20 af 0e 01 00 8f 0e f0 3a 22 2c 11 00 c2
>3a25d8	20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00 28 7a
>3a25e8	fa 60 80 02 20 03 40 01 90 01 e0 01 58 02 f0 00
>3a25f8	2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00 1e 00
>3a2608	32 00 48 00 5c 00 20 00 2a 00 34 00 43 00 16 00
>3a2618	34 00 08 c2 20 20 66 17 20 2c 05 c2 20 a5 21 85
>3a2628	53 a9 2c 00 20 6a 1c 20 66 17 20 2c 05 e2 20 a5
>3a2638	53 d0 05 a5 21 0a 80 04 a5 21 38 2a 8f 00 01 af
>3a2648	c2 20 a9 2c 00 85 35 20 9f 1c b0 18 c2 20 08 c2
>3a2658	20 a9 00 00 85 21 a9 b0 00 85 23 e2 20 a9 00 85
>3a2668	25 28 80 08 c2 20 20 5d 1b 20 66 17 e2 20 38 a5
>3a2678	23 8f 02 f0 3a e9 b0 30 30 8f 03 01 af 8f 06 f0
>3a2688	3a a5 21 8f 00 f0 3a 8f 01 01 af 8f 04 f0 3a a5
>3a2698	22 8f 02 01 af 8f 05 f0 3a 8f 01 f0 3a a9 00 8f
>3a26a8	07 f0 3a 8f 03 f0 3a 28 60 08 c2 20 48 a9 00 08
>3a26b8	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a26c8	20 b8 18 e2 20 dc d2 08 08 c2 20 af 04 f0 3a 8f
>3a26d8	05 04 af af 0c f0 3a 8f 08 04 af e2 20 af 06 f0
>3a26e8	3a 8f 07 04 af af 0e f0 3a 8f 0a 04 af a9 00 8f
>3a26f8	01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>3a2708	00 8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00
>3a2718	af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85
>3a2728	0c af 0e 01 00 69 00 00 85 0e 18 a5 0c 6f 00 f0
>3a2738	3a 85 9c a5 0e 6f 02 f0 3a 85 9e e2 20 a5 53 87
>3a2748	9c 28 60 c2 20 a9 01 00 85 db 38 a5 5f e5 57 85
>3a2758	67 10 0b 49 ff ff 1a 85 67 a9 ff ff 85 db a9 01
>3a2768	00 85 dd 38 a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a
>3a2778	85 6b a9 ff ff 85 dd a5 6b c5 67 b0 04 a5 67 80
>3a2788	06 a5 6b 49 ff ff 1a 48 0a 68 6a 85 6f 20 0f 27
>3a2798	a5 57 c5 5f d0 06 a5 5b c5 63 f0 36 a5 6f 85 73
>3a27a8	a5 67 49 ff ff 1a c5 73 10 10 f0 0e 38 a5 6f e5
>3a27b8	6b 85 6f 18 a5 57 65 db 85 57 a5 73 c5 6b 10 cd
>3a27c8	f0 cb 18 a5 6f 65 67 85 6f 18 a5 5b 65 dd 85 5b
>3a27d8	80 bb 60 08 a9 00 00 8f 00 04 af c2 20 a5 5b 8f
>3a27e8	08 01 00 af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00
>3a27f8	65 57 85 0c e2 20 af 0e 01 00 69 00 85 0e c2 20
>3a2808	18 af 04 f0 3a 65 0c 8f 05 04 af e2 20 af 06 f0
>3a2818	3a 65 0e 8f 07 04 af c2 20 38 a5 5f e5 57 85 0c
>3a2828	8f 08 04 af 38 af 08 f0 3a 8f 0e 04 af 38 a5 63
>3a2838	e5 5b 8f 0a 04 af a9 01 00 8f 0c 04 af e2 20 af
>3a2848	53 08 00 8f 01 04 af a9 87 8f 00 04 af af 01 04
>3a2858	af 30 fa a9 00 8f 00 04 af 28 60 08 08 c2 20 48
>3a2868	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a2878	c2 30 20 66 17 20 89 04 a5 21 85 53 a9 2c 00 20
>3a2888	6a 1c 20 66 17 20 89 04 a5 21 85 57 a9 2c 00 20
>3a2898	6a 1c 20 66 17 20 2c 05 a5 21 85 5b 20 0f 27 28
>3a28a8	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a28b8	a9 00 48 ab 68 28 c2 30 20 66 17 20 89 04 a5 21
>3a28c8	85 57 a9 2c 00 20 6a 1c 20 66 17 20 89 04 a5 21
>3a28d8	85 5b a9 2c 00 20 6a 1c 20 66 17 20 89 04 a5 21
>3a28e8	85 5f a9 2c 00 20 6a 1c 20 66 17 20 89 04 a5 21
>3a28f8	85 63 a9 2c 00 20 6a 1c 20 66 17 20 2c 05 a5 21
>3a2908	85 53 20 4b 27 28 60 08 08 c2 20 48 a9 00 08 5b
>3a2918	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 66
>3a2928	17 20 89 04 a5 21 85 57 a9 2c 00 20 6a 1c 20 66
>3a2938	17 20 89 04 a5 21 85 5b a9 2c 00 20 6a 1c 20 66
>3a2948	17 20 89 04 a5 21 85 5f a9 2c 00 20 6a 1c 20 66
>3a2958	17 20 89 04 a5 21 85 63 a9 2c 00 20 6a 1c 20 66
>3a2968	17 20 2c 05 a5 21 85 53 20 db 27 28 60 08 e2 20
>3a2978	a5 21 c9 40 b0 18 0a 0a 0a 18 69 00 85 9c a9 0c
>3a2988	69 00 85 9d a9 af 69 00 85 9e 64 9f 28 60 08 c2
>3a2998	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a29a8	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 e2 20
>3a29b8	20 66 17 20 2c 05 20 75 29 a5 21 8f 0e f0 3a a9
>3a29c8	2c 20 6a 1c 20 66 17 20 2c 05 a5 21 c9 08 b0 4b
>3a29d8	48 a9 2c 20 6a 1c 20 66 17 20 89 04 c2 20 38 a5
>3a29e8	21 e9 00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2
>3a29f8	20 a5 21 a0 01 00 97 9c e2 20 a5 23 c8 c8 97 9c
>3a2a08	af 0e f0 3a aa bf 10 f0 3a 29 f1 85 0c 68 0a 29
>3a2a18	0e 05 0c 87 9c 9f 10 f0 3a 28 60 08 c2 20 48 a9
>3a2a28	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a2a38	ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 20 66 17
>3a2a48	20 2c 05 20 75 29 a9 2c 00 20 6a 1c 20 66 17 20
>3a2a58	89 04 a5 21 a0 04 00 97 9c a9 2c 00 20 6a 1c 20
>3a2a68	66 17 20 89 04 a5 21 a0 06 00 97 9c 28 60 08 c2
>3a2a78	20 20 66 17 20 2c 05 20 75 29 a5 21 8f 0e f0 3a
>3a2a88	a9 2c 00 20 6a 1c 20 66 17 20 89 04 a5 21 48 a9
>3a2a98	2c 00 85 35 20 9f 1c b0 1e af 0e f0 3a aa bf 10
>3a2aa8	f0 3a 29 fe 00 85 0c 68 29 01 00 05 0c 9f 10 f0
>3a2ab8	3a e2 20 87 9c 80 35 c2 20 20 5d 1b 20 66 17 20
>3a2ac8	2c 05 a5 21 c9 08 00 b0 25 0a 0a 0a 0a 85 0c 68
>3a2ad8	29 01 00 05 0c 85 0c af 0e f0 3a aa e2 20 bf 10
>3a2ae8	f0 3a 29 8e 05 0c 87 9c 9f 10 f0 3a 28 60 08 c2
>3a2af8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a2b08	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20
>3a2b18	a5 21 c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02 01
>3a2b28	18 ad 04 01 69 80 02 85 9c a9 af 00 85 9e 28 60
>3a2b38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a2b48	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08
>3a2b58	c2 20 a5 21 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d
>3a2b68	02 01 18 ad 04 01 69 00 02 85 9c a9 af 00 85 9e
>3a2b78	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2b88	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a2b98	08 08 c2 20 20 66 17 20 2c 05 20 15 2b c2 20 a5
>3a2ba8	9e 48 a5 9c 48 a9 2c 00 20 6a 1c 20 66 17 20 2c
>3a2bb8	05 c2 20 a5 21 48 a9 2c 00 20 6a 1c 20 66 17 20
>3a2bc8	2c 05 c2 20 a5 21 48 a9 2c 00 20 6a 1c 20 66 17
>3a2bd8	20 89 04 c2 20 a5 21 85 5b a5 23 85 5d 68 85 57
>3a2be8	68 85 53 68 85 9c 68 85 9e a5 5b 87 9c e2 20 38
>3a2bf8	a5 5d e9 b0 a0 02 00 97 9c c2 20 a5 57 d0 11 a5
>3a2c08	59 d0 0d e2 20 a5 53 29 07 a0 03 00 97 9c 80 0d
>3a2c18	e2 20 a5 53 29 07 09 08 a0 03 00 97 9c 28 60 08
>3a2c28	c2 20 20 66 17 20 2c 05 20 57 2b c2 20 a5 9e 48
>3a2c38	a5 9c 48 a9 2c 00 20 6a 1c 20 66 17 20 89 04 c2
>3a2c48	20 a5 21 48 a9 2c 00 20 6a 1c 20 66 17 20 89 04
>3a2c58	c2 20 a5 21 48 a9 2c 00 20 6a 1c 20 66 17 20 89
>3a2c68	04 c2 20 a5 21 85 5b a5 23 85 5d 68 85 57 68 85
>3a2c78	53 68 85 9c 68 85 9e a5 5b a0 01 00 97 9c e2 20
>3a2c88	38 a5 5d e9 b0 c8 c8 97 9c c2 20 a5 53 a0 04 00
>3a2c98	97 9c a5 57 a0 06 00 97 9c 28 60 08 c2 20 20 66
>3a2ca8	17 20 2c 05 20 57 2b c2 20 a5 9e 48 a5 9c 48 a9
>3a2cb8	2c 00 20 6a 1c 20 66 17 20 89 04 c2 20 68 85 9c
>3a2cc8	68 85 9e a5 21 d0 06 e2 20 a9 00 80 04 e2 20 a9
>3a2cd8	01 e2 20 a0 00 00 97 9c 28 60 08 c2 20 20 66 17
>3a2ce8	20 2c 05 20 57 2b a5 9e 48 a5 9c 48 a9 2c 00 20
>3a2cf8	6a 1c 20 66 17 20 89 04 a5 21 48 a9 2c 00 20 6a
>3a2d08	1c 20 66 17 20 89 04 a5 21 85 57 68 85 53 68 85
>3a2d18	9c 68 85 9e a5 53 a0 08 00 97 9c a5 57 a0 0a 00
>3a2d28	97 9c 28 60 08 20 7e 1b e2 20 a7 00 d0 03 4c d4
>3a2d38	2d c9 3a d0 03 4c d4 2d c9 22 d0 0b 20 84 16 20
>3a2d48	bb 36 a9 3b 20 6a 1c 20 3e 03 90 41 20 c6 42 90
>3a2d58	3c a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20
>3a2d68	a5 e8 c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08 c2
>3a2d78	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a2d88	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20
>3a2d98	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2da8	20 29 ff 00 20 b8 18 e2 20 dc d2 08 c2 20 a9 00
>3a2db8	4c 85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 5c
>3a2dc8	12 c2 20 20 63 42 a9 0d 00 20 18 00 28 60 ea c2
>3a2dd8	20 a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00
>3a2de8	00 85 02 20 81 05 c2 20 a5 3e 85 00 a5 40 85 02
>3a2df8	80 cf 08 20 7e 1b e2 20 a7 00 f0 49 c9 3a f0 45
>3a2e08	20 3e 03 90 42 20 c6 42 90 3d 20 14 00 e2 20 8f
>3a2e18	00 4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21
>3a2e28	a9 00 00 85 23 e2 20 a9 02 85 25 20 5c 12 20 63
>3a2e38	42 20 7e 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07
>3a2e48	20 5d 1b 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2e58	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8
>3a2e68	18 e2 20 dc d2 08 08 20 66 17 20 89 04 e2 20 a9
>3a2e78	5c 85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2
>3a2e88	20 a9 2c 85 35 20 9f 1c 90 41 20 5d 1b 20 66 17
>3a2e98	20 dd 04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20
>3a2ea8	9f 1c 90 27 20 5d 1b 20 66 17 20 dd 04 c2 20 a5
>3a2eb8	21 85 57 e2 20 a9 2c 85 35 20 9f 1c 90 0d 20 5d
>3a2ec8	1b 20 66 17 20 dd 04 c2 20 a4 21 a6 57 a5 53 0b
>3a2ed8	8b 08 22 a0 08 00 28 ab 2b 20 a2 1b 28 60 08 c2
>3a2ee8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a2ef8	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 e2 20
>3a2f08	20 7e 1b 20 c6 42 90 64 a9 8c 20 6a 1c a9 01 20
>3a2f18	d3 14 a2 01 00 a9 00 8f 00 4d 00 20 66 17 20 dd
>3a2f28	04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a
>3a2f38	8f 00 4d 00 30 55 e8 e8 20 7e 1b a7 00 c9 2c f0
>3a2f48	25 c9 8d d0 27 20 5d 1b 20 74 43 c2 20 a5 be 85
>3a2f58	21 e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85
>3a2f68	25 20 63 42 28 60 20 5d 1b 4c 23 2f 08 c2 20 48
>3a2f78	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a2f88	29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a2f98	00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29
>3a2fa8	ff 00 20 b8 18 e2 20 dc d2 08 08 20 7e 1b e2 20
>3a2fb8	a7 00 f0 28 c9 3a f0 24 20 3e 03 90 21 20 c6 42
>3a2fc8	90 1c 20 05 30 20 63 42 20 7e 1b a7 00 f0 0d c9
>3a2fd8	3a f0 09 c9 2c d0 07 20 5d 1b 80 cf 28 60 08 c2
>3a2fe8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2ff8	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 a5 02
>3a3008	85 40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2 20
>3a3018	a5 38 d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85 02
>3a3028	a5 3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a
>3a3038	f0 4f c9 2c d0 03 20 5d 1b 20 7e 1b a7 00 c9 22
>3a3048	f0 4e 20 57 03 b0 4e 08 c2 20 48 a9 00 08 5b 68
>3a3058	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8
>3a3068	18 e2 20 dc d2 08 c2 20 a9 00 00 85 18 a9 36 00
>3a3078	85 1a 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85
>3a3088	02 e2 20 a9 80 85 33 a9 a8 85 35 20 b4 1b 80 a9
>3a3098	20 84 16 80 03 20 b9 15 c2 20 a5 00 85 36 a5 02
>3a30a8	85 38 a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5 44
>3a30b8	85 1a a5 3e 85 00 a5 40 85 02 28 60 20 a2 1b 60
>3a30c8	64 36 64 38 64 3a 64 3c 60 20 24 00 60 20 66 17
>3a30d8	c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22
>3a30e8	20 5d 1b 20 66 17 c2 20 a5 24 d0 35 68 85 08 68
>3a30f8	85 0a c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23 97
>3a3108	08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3118	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a3128	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3138	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3148	20 66 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9
>3a3158	2c d0 19 20 5d 1b 20 66 17 c2 20 a5 23 d0 2c 68
>3a3168	85 08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48
>3a3178	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a3188	29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3198	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a31a8	ff 00 20 b8 18 e2 20 dc d2 08 20 66 17 c2 20 a5
>3a31b8	23 48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 5d 1b
>3a31c8	20 66 17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68
>3a31d8	85 08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48
>3a31e8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a31f8	29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3208	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a3218	ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3228	08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff
>3a3238	00 20 b8 18 e2 20 dc d2 08 08 e2 20 a7 00 f0 05
>3a3248	20 5d 1b 80 f7 28 60 08 28 60 08 28 60 08 28 60
>3a3258	08 c2 20 a5 1a 20 7f 18 a5 18 20 7f 18 a5 02 48
>3a3268	a5 00 48 20 a2 1b a5 02 20 7f 18 a5 00 20 7f 18
>3a3278	68 85 00 68 85 02 20 7e 1b 20 c6 42 b0 1f 08 c2
>3a3288	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00
>3a3298	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 e2 20 a5
>3a32a8	e8 20 96 18 a5 e7 20 96 18 c2 20 a5 e5 20 7f 18
>3a32b8	20 7e 1b e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0
>3a32c8	04 c9 01 f0 00 20 5d 1b 20 66 17 20 63 42 e2 20
>3a32d8	a9 99 20 6a 1c 20 66 17 c2 20 a5 25 20 7f 18 a5
>3a32e8	23 20 7f 18 a5 21 20 7f 18 e2 20 a9 9a 85 35 20
>3a32f8	9f 1c 90 1b 20 5d 1b 20 66 17 e2 20 a5 25 20 7f
>3a3308	18 c2 20 a5 23 20 7f 18 a5 21 20 7f 18 80 14 c2
>3a3318	20 a9 00 00 20 7f 18 a9 00 00 20 7f 18 a9 01 00
>3a3328	20 7f 18 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3338	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a3348	20 dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28
>3a3358	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8
>3a3368	c2 20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10
>3a3378	00 85 e8 c2 20 5a 20 1c 41 7a c2 20 b9 00 00 85
>3a3388	27 b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a
>3a3398	20 8b 21 20 63 42 7a c2 20 b9 06 00 85 27 b9 08
>3a33a8	00 85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30
>3a33b8	0a 20 cf 22 20 76 04 f0 28 80 08 20 b2 22 20 76
>3a33c8	04 f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9
>3a33d8	16 00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80
>3a33e8	17 a2 21 08 20 94 14 c2 20 18 a5 31 69 1a 00 85
>3a33f8	31 a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5
>3a3408	1a 48 20 7e 1b 20 81 05 a5 21 f0 26 20 59 1e 90
>3a3418	42 e2 20 a9 02 85 da 20 a2 1b c2 20 68 20 7f 18
>3a3428	68 20 7f 18 a5 02 20 7f 18 a5 00 20 7f 18 e6 2f
>3a3438	28 60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3448	a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a3458	dc d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3468	20 a9 06 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a3478	20 dc d2 08 08 c2 30 a5 2f f0 1e 20 a1 18 85 00
>3a3488	20 a1 18 85 02 20 a1 18 85 18 20 a1 18 85 1a c6
>3a3498	2f e2 20 a9 03 85 da 28 60 08 c2 20 48 a9 00 08
>3a34a8	5b 68 28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00
>3a34b8	20 b8 18 e2 20 dc d2 08 08 20 66 17 20 76 04 f0
>3a34c8	1c e2 20 a9 94 20 6a 1c 20 81 05 20 76 04 f0 12
>3a34d8	20 59 1e 90 2c e2 20 a9 02 85 da 80 03 20 a2 1b
>3a34e8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a34f8	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a3508	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f
>3a3518	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3528	08 e2 20 a9 01 85 da 28 60 08 20 7e 1b 20 81 05
>3a3538	a5 21 f0 0d 20 59 1e 90 27 e2 20 a9 02 85 da 28
>3a3548	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3558	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3568	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1
>3a3578	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 20
>3a3588	36 14 20 84 0c 20 1b 40 60 08 a7 00 10 03 20 5d
>3a3598	1b 20 c6 42 b0 03 4c 08 36 e2 20 20 be 1c c9 8c
>3a35a8	d0 0e a9 8c 20 6a 1c a9 00 8f 00 4d 00 20 bc 15
>3a35b8	20 7e 1b e2 20 a7 00 c9 87 f0 03 4c 08 36 20 5d
>3a35c8	1b a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 66 17
>3a35d8	68 85 e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b
>3a35e8	20 8e 40 90 3a c2 20 a0 09 00 b7 08 85 be e2 20
>3a35f8	c8 c8 b7 08 85 c0 20 55 45 80 03 20 63 42 28 60
>3a3608	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3618	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08
>3a3628	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08
>3a3638	00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 e2
>3a3648	20 20 be 1c c9 00 f0 66 20 66 17 e2 20 a5 25 c9
>3a3658	ff f0 14 c9 02 d0 05 20 bb 36 80 0b c9 00 d0 05
>3a3668	20 db 36 80 02 80 4a 20 7e 1b a7 00 f0 40 c9 3a
>3a3678	f0 3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9 00
>3a3688	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3698	00 20 b8 18 e2 20 dc d2 08 a9 09 20 18 00 20 5d
>3a36a8	1b 20 7e 1b a7 00 f0 09 c9 3a f0 05 80 9a 20 33
>3a36b8	02 28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a36c8	20 c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6
>3a36d8	ab 28 60 08 c2 20 20 22 11 a5 14 85 21 a5 16 85
>3a36e8	23 20 bb 36 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29
>3a36f8	0f 18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14
>3a3708	c8 28 60 e2 20 a9 8c 20 6a 1c 08 20 66 17 e2 20
>3a3718	c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 d1 10 a0
>3a3728	00 00 af 06 08 af 20 ee 36 a9 2f 97 14 c8 af 09
>3a3738	08 af 20 ee 36 a9 2f 97 14 c8 af 0f 08 af 20 ee
>3a3748	36 af 0a 08 af 20 ee 36 a9 00 97 14 af 0e 08 af
>3a3758	29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23
>3a3768	e2 20 a9 02 85 25 20 5c 12 28 e2 20 20 5d 1b 60
>3a3778	e2 20 a9 8c 20 6a 1c 08 20 66 17 e2 20 c2 10 af
>3a3788	0e 08 af 09 08 8f 0e 08 af 20 d1 10 a0 00 00 af
>3a3798	04 08 af 29 7f 20 ee 36 a9 3a 97 14 c8 af 02 08
>3a37a8	af 20 ee 36 a9 3a 97 14 c8 af 00 08 af 20 ee 36
>3a37b8	a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20
>3a37c8	a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 5c
>3a37d8	12 28 e2 20 20 5d 1b 60 08 c2 20 20 66 17 20 89
>3a37e8	04 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85
>3a37f8	23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 6a
>3a3808	1c 08 c2 30 20 66 17 20 b3 04 c2 20 a5 23 48 a5
>3a3818	21 48 20 7e 1b e2 20 a7 00 c9 2c f0 03 4c 79 38
>3a3828	20 5d 1b 20 66 17 20 dd 04 c2 20 a5 21 48 20 7e
>3a3838	1b e2 20 a7 00 c9 2c f0 03 4c 79 38 20 5d 1b 20
>3a3848	66 17 20 dd 04 c2 20 a5 21 85 8d e2 20 a5 23 85
>3a3858	8f c2 20 68 85 27 a9 00 00 85 29 68 85 21 68 85
>3a3868	23 e2 20 a9 02 85 25 20 b4 12 e2 20 20 5d 1b 28
>3a3878	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3888	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3898	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a38a8	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 e2
>3a38b8	20 a9 8c 20 6a 1c 08 c2 30 20 66 17 e2 20 a5 25
>3a38c8	c9 02 f0 03 4c 3b 39 c2 20 a5 23 48 a5 21 48 20
>3a38d8	7e 1b e2 20 a7 00 c9 2c f0 03 4c 5a 39 20 5d 1b
>3a38e8	20 66 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85
>3a38f8	8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2
>3a3908	20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5
>3a3918	8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00 85
>3a3928	27 85 29 e2 20 a9 00 85 2b 20 b4 12 e2 20 20 5d
>3a3938	1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3948	04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a3958	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3968	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a3978	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3988	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3998	e2 20 a9 8c 20 6a 1c 08 c2 30 20 66 17 e2 20 a5
>3a39a8	25 c9 02 f0 03 4c 04 3a c2 20 a5 23 48 a5 21 48
>3a39b8	20 7e 1b e2 20 a7 00 c9 2c f0 03 4c 23 3a 20 5d
>3a39c8	1b 20 66 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21
>3a39d8	85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20
>3a39e8	a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02
>3a39f8	85 25 20 b4 12 e2 20 20 5d 1b 28 60 08 c2 20 48
>3a3a08	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3a18	29 ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3a28	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3a38	ff 00 20 b8 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3a48	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3a58	00 20 b8 18 e2 20 dc d2 08 e2 20 a9 8c 20 6a 1c
>3a3a68	20 66 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5
>3a3a78	00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20
>3a3a88	81 05 a5 3e 85 00 a5 40 85 02 e2 20 20 5d 1b 60
>3a3a98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3aa8	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 e2
>3a3ab8	20 a9 8c 20 6a 1c 08 20 66 17 c2 10 e2 20 a5 25
>3a3ac8	c9 00 d0 1d 20 22 11 c2 20 a5 14 85 21 a5 16 85
>3a3ad8	23 e2 20 a9 02 85 25 20 5c 12 28 e2 20 20 5d 1b
>3a3ae8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3af8	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a3b08	e2 20 a9 8c 20 6a 1c 08 20 66 17 20 b3 04 c2 20
>3a3b18	64 0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24
>3a3b28	d0 03 c8 80 f3 b7 21 20 68 03 90 1e c2 20 06 0c
>3a3b38	26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20
>3a3b48	20 89 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21
>3a3b58	a5 0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 5d 1b
>3a3b68	60 e2 20 a9 8c 20 6a 1c 08 20 66 17 20 89 04 20
>3a3b78	d1 10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa
>3a3b88	bf 00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa
>3a3b98	bf 00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5
>3a3ba8	24 85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5
>3a3bb8	23 d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85
>3a3bc8	23 a5 17 85 24 a9 02 85 25 20 5c 12 28 e2 20 20
>3a3bd8	5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3be8	04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a3bf8	d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2 20 a5 25
>3a3c08	c9 02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20 a7 11
>3a3c18	ab 84 21 c2 20 64 23 e2 20 a9 00 85 25 e2 20 20
>3a3c28	5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3c38	04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a3c48	d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2 20 a5 25
>3a3c58	c9 00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e
>3a3c68	e2 20 20 5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3c78	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a3c88	e2 20 dc d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2
>3a3c98	20 a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0
>3a3ca8	02 00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20
>3a3cb8	20 5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3cc8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a3cd8	dc d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2 20 a5
>3a3ce8	25 c9 00 d0 0e c2 20 a7 21 85 21 64 23 e2 20 20
>3a3cf8	5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3d08	04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a3d18	d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2 20 a5 25
>3a3d28	c9 00 d0 24 20 d1 10 a5 21 87 14 a9 00 a0 01 00
>3a3d38	97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a3d48	85 25 e2 20 20 5d 1b 60 08 c2 20 48 a9 00 08 5b
>3a3d58	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a3d68	b8 18 e2 20 dc d2 08 e2 20 a9 8c 20 6a 1c 20 66
>3a3d78	17 e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64
>3a3d88	23 64 24 a9 00 85 25 e2 20 20 5d 1b 60 08 c2 20
>3a3d98	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3da8	20 29 ff 00 20 b8 18 e2 20 dc d2 08 e2 20 a9 8c
>3a3db8	20 6a 1c 20 66 17 e2 20 a5 25 c9 00 d0 39 e2 20
>3a3dc8	a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 d1
>3a3dd8	10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14
>3a3de8	88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85
>3a3df8	23 e2 20 20 5d 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a3e08	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8
>3a3e18	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3e28	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a3e38	e2 20 dc d2 08 e2 20 a9 8c 20 6a 1c 20 66 17 e2
>3a3e48	20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0
>3a3e58	4e a5 22 d0 4a c2 10 20 d1 10 a4 21 e2 20 a9 00
>3a3e68	97 14 88 30 07 a9 09 97 14 88 10 fb a9 02 85 25
>3a3e78	c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 5d 1b 60
>3a3e88	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3e98	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08
>3a3ea8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3eb8	00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 e2 20
>3a3ec8	a9 8c 20 6a 1c 20 66 17 20 89 04 c2 20 a5 23 10
>3a3ed8	17 49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85
>3a3ee8	21 a5 23 69 00 00 85 23 e2 20 20 5d 1b 60 e2 20
>3a3ef8	a9 8c 20 6a 1c 20 66 17 e2 20 a5 25 c9 00 d0 25
>3a3f08	c2 20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85
>3a3f18	23 a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2
>3a3f28	20 20 5d 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3f38	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2
>3a3f48	20 dc d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00 08
>3a3f58	5b 68 28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 36
>3a3f68	85 d9 c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00 97
>3a3f78	d7 a0 04 00 97 d7 20 33 1b 2b 28 60 8b 08 c2 20
>3a3f88	a9 00 00 85 18 a9 36 00 85 1a 20 33 1b 20 0f 1e
>3a3f98	28 ab 60 08 c2 20 64 53 a9 ff 7f 85 57 20 33 02
>3a3fa8	20 be 1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a
>3a3fb8	20 7e 1b 20 81 05 a5 21 85 53 20 be 1c 29 ff 00
>3a3fc8	c9 00 00 f0 12 c9 81 00 d0 2a 20 6a 1c 20 7e 1b
>3a3fd8	20 81 05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02 48
>3a3fe8	a5 00 48 20 37 13 68 85 00 68 85 02 68 85 18 68
>3a3ff8	85 1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4008	a9 02 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a4018	dc d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a4028	64 e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5
>3a4038	d7 69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60
>3a4048	c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04
>3a4058	c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60
>3a4068	08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13
>3a4078	c8 c0 08 00 d0 f2 b7 e5 20 b2 03 20 48 40 b0 03
>3a4088	28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00
>3a4098	00 b7 e5 f0 0b 20 b2 03 9f 00 4e 00 c8 e8 80 f1
>3a40a8	a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9
>3a40b8	00 85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0
>3a40c8	4d e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17
>3a40d8	c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00
>3a40e8	85 0e 20 68 40 b0 2a a0 0d 00 c2 20 b7 08 85 0c
>3a40f8	c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e
>3a4108	c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18
>3a4118	60 28 38 60 08 20 8e 40 b0 1f 08 c2 20 48 a9 00
>3a4128	08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff
>3a4138	00 20 b8 18 e2 20 dc d2 08 c2 30 a0 09 00 b7 08
>3a4148	85 21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85
>3a4158	25 28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20
>3a4168	a5 e1 69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5 b8
>3a4178	90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a4188	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a4198	08 c2 20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20 a5
>3a41a8	08 85 df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5 25
>3a41b8	c5 e8 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a41c8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a41d8	dc d2 08 c2 10 20 5b 41 c2 30 18 a5 be 69 01 00
>3a41e8	85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00 97
>3a41f8	08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20 b2
>3a4208	03 20 48 40 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>3a4218	a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2 a0
>3a4228	0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5 be
>3a4238	85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25 97
>3a4248	be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20 a5
>3a4258	23 85 c0 20 e8 0e 20 fd 0e 80 ea 08 c2 30 a5 e2
>3a4268	d0 06 e2 20 a5 e4 f0 05 20 8e 40 b0 05 20 b3 41
>3a4278	80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5
>3a4288	21 97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08
>3a4298	85 be c8 c8 e2 20 b7 08 85 c0 20 e8 0e 20 1c 0f
>3a42a8	e2 20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 be
>3a42b8	e2 20 a5 23 85 c0 20 e8 0e 20 fd 0e 80 bc 08 20
>3a42c8	7e 1b e2 20 a7 00 20 3e 03 90 42 c2 20 a5 00 85
>3a42d8	e5 e2 20 a5 02 85 e7 20 5d 1b a7 00 f0 0d c9 24
>3a42e8	f0 14 c9 25 f0 09 20 48 40 b0 ec a9 00 80 0c 20
>3a42f8	5d 1b a9 00 80 05 20 5d 1b a9 02 85 e8 20 be 1c
>3a4308	c9 8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18 60
>3a4318	08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c
>3a4328	a5 23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25
>3a4338	c2 20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20
>3a4348	49 ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c
>3a4358	e2 20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0
>3a4368	e5 e2 20 06 26 66 23 66 22 66 21 60 08 20 e8 0e
>3a4378	c2 20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00
>3a4388	4d 00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf
>3a4398	00 4d 00 85 27 a9 00 00 85 29 20 d8 21 e8 e8 88
>3a43a8	d0 eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 d8
>3a43b8	21 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06
>3a43c8	0c 38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0
>3a43d8	29 e2 20 a5 e8 09 80 a6 21 20 ac 0c e2 20 af 00
>3a43e8	4d 00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d 00
>3a43f8	97 be e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9 00
>3a4408	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a4418	00 20 b8 18 e2 20 dc d2 08 e2 20 38 a5 be 67 be
>3a4428	85 08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64 0b
>3a4438	c2 20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85
>3a4448	0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01
>3a4458	00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08
>3a4468	c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af
>3a4478	00 4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be c5 8d
>3a4488	f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a4498	8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2
>3a44a8	08 c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21
>3a44b8	64 22 64 23 64 24 b7 be 85 27 64 28 64 29 64 2a
>3a44c8	a5 21 c5 27 b0 68 20 d8 21 c2 20 18 a5 08 65 21
>3a44d8	85 08 a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2
>3a44e8	20 18 bf 00 4d 00 85 8e 65 08 85 08 a5 09 69 00
>3a44f8	85 09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26
>3a4508	0a 06 08 26 0a e2 20 38 a5 08 65 8d 85 08 a5 09
>3a4518	69 00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08
>3a4528	65 be 85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2
>3a4538	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a4548	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 08 20 e8
>3a4558	0e e2 20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25
>3a4568	48 c2 20 a5 23 48 a5 21 48 20 6e 44 68 85 21 68
>3a4578	85 23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00
>3a4588	a5 23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4598	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a45a8	e2 20 dc d2 08 08 20 e8 0e f4 00 00 f4 00 00 e2
>3a45b8	20 48 20 6e 44 e2 20 68 c2 20 68 68 c2 20 a7 08
>3a45c8	85 21 a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7 c1
>3a45d8	29 7f 85 25 28 60 da 0b 08 08 c2 20 48 a9 00 08
>3a45e8	5b 68 28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00 d0
>3a45f8	0c a5 21 89 00 fc d0 05 20 db 36 80 2e a2 0a 00
>3a4608	46 23 66 21 ca d0 f9 20 db 36 e2 20 a9 4b 20 18
>3a4618	00 c2 20 80 16 a2 14 00 46 23 66 21 ca d0 f9 20
>3a4628	db 36 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b
>3a4638	08 c2 30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20
>3a4648	20 be 1c c9 00 f0 08 20 66 17 20 b3 04 80 11 c2
>3a4658	20 a9 00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20
>3a4668	20 98 47 22 08 11 00 b0 22 20 49 48 08 c2 20 48
>3a4678	a9 00 08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20
>3a4688	29 ff 00 20 b8 18 e2 20 dc d2 08 20 33 02 08 c2
>3a4698	20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0
>3a46a8	03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18
>3a46b8	89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f
>3a46c8	c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8
>3a46d8	c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20
>3a46e8	18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00
>3a46f8	b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 21 08
>3a4708	00 c8 c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08
>3a4718	00 20 de 45 a9 09 20 18 00 a0 0b 00 b7 18 89 08
>3a4728	d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9
>3a4738	53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea 20 33
>3a4748	02 20 4a 02 22 0c 11 00 90 03 82 41 ff 20 49 48
>3a4758	08 c2 20 48 a9 00 08 5b 68 28 20 a2 1b 28 2b 60
>3a4768	08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f
>3a4778	f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09
>3a4788	20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae
>3a4798	0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 50
>3a47a8	f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97
>3a47b8	20 c8 c0 1e 00 d0 f8 c2 20 a9 50 f0 8f 5e f2 3a
>3a47c8	a9 3a 00 8f 60 f2 3a af 21 08 00 8f 52 f2 3a af
>3a47d8	23 08 00 8f 54 f2 3a 28 2b 60 08 c2 30 20 7e 1b
>3a47e8	20 66 17 20 b3 04 20 98 47 e2 20 a9 2c 85 35 20
>3a47f8	9f 1c b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03
>3a4808	00 80 17 20 5d 1b 20 66 17 20 89 04 c2 20 a5 21
>3a4818	8f 54 03 00 a5 23 8f 56 03 00 22 18 11 00 b0 1f
>3a4828	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1
>3a4838	08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 28
>3a4848	60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a4858	20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 21
>3a4868	a9 00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9 3a
>3a4878	85 e7 c2 20 a9 ac 48 85 e5 20 63 42 e2 20 af 20
>3a4888	03 00 85 21 a9 00 85 22 85 23 85 24 a9 00 85 25
>3a4898	85 e8 a9 3a 85 e7 c2 20 a9 b4 48 85 e5 20 63 42
>3a48a8	28 2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53
>3a48b8	53 54 41 54 00 08 c2 30 20 7e 1b 20 66 17 20 b3
>3a48c8	04 a5 21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff ff
>3a48d8	8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 b8
>3a48e8	18 20 49 48 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a48f8	a9 11 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20
>3a4908	dc d2 08 20 b8 18 28 60 08 c2 30 20 7e 1b 20 66
>3a4918	17 20 b3 04 20 98 47 a9 00 00 8f 54 03 00 a9 01
>3a4928	00 8f 56 03 00 20 4f 3f 22 18 11 00 b0 22 20 49
>3a4938	48 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>3a4948	d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08
>3a4958	20 49 48 c2 20 a2 12 00 18 bf 50 f2 3a 69 00 00
>3a4968	85 90 bf 52 f2 3a 69 01 00 85 92 e2 20 a9 00 87
>3a4978	90 c2 20 a9 00 00 85 78 a9 01 00 85 7a a2 00 00
>3a4988	e2 20 a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00
>3a4998	4f e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00
>3a49a8	9d 00 4f 20 0d 21 e6 78 d0 d3 e6 7a 80 cf e0 00
>3a49b8	00 f0 0a e2 20 a9 00 9d 00 4f 20 0d 21 28 60 08
>3a49c8	c2 30 20 7e 1b 20 66 17 20 b3 04 20 98 47 e2 20
>3a49d8	a9 2c 20 6a 1c c2 20 20 66 17 20 89 04 a5 21 8f
>3a49e8	50 03 00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20
>3a49f8	6a 1c 20 66 17 20 89 04 a5 21 8f 58 03 00 a5 23
>3a4a08	8f 5a 03 00 22 1c 11 00 b0 22 20 49 48 08 c2 20
>3a4a18	48 a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2
>3a4a28	20 29 ff 00 20 b8 18 e2 20 dc d2 08 20 49 48 28
>3a4a38	60 da 5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00
>3a4a48	04 f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 7e
>3a4a58	1b 20 66 17 20 b3 04 20 98 47 a9 00 00 85 a4 e2
>3a4a68	20 a9 01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9
>3a4a78	a9 ff ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff
>3a4a88	ff 85 57 a9 ff 7f 85 59 20 37 13 e2 20 a9 80 85
>3a4a98	b2 c2 20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f
>3a4aa8	58 03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03
>3a4ab8	00 22 1c 11 00 b0 22 20 49 48 08 c2 20 48 a9 00
>3a4ac8	08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff
>3a4ad8	00 20 b8 18 e2 20 dc d2 08 20 49 48 28 60 08 c2
>3a4ae8	30 20 7e 1b 20 66 17 20 b3 04 20 39 4a 22 04 11
>3a4af8	00 b0 22 20 49 48 08 c2 20 48 a9 00 08 5b 68 28
>3a4b08	e2 20 a9 13 8f d1 08 00 c2 20 29 ff 00 20 b8 18
>3a4b18	e2 20 dc d2 08 20 49 48 28 60 da 08 e2 20 c9 61
>3a4b28	90 08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00
>3a4b38	00 df 4d 4b 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa
>3a4b48	6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c
>3a4b58	5b 5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a4b68	30 20 66 17 20 b3 04 20 39 4a 22 10 11 00 b0 22
>3a4b78	20 49 48 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4b88	14 8f d1 08 00 c2 20 29 ff 00 20 b8 18 e2 20 dc
>3a4b98	d2 08 e2 20 a9 2c 20 6a 1c c2 20 20 66 17 20 b3
>3a4ba8	04 ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00
>3a4bb8	a9 20 95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00
>3a4bc8	b7 21 f0 6d c9 2e f0 30 22 22 4b 3a b0 1f 08 c2
>3a4bd8	20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00
>3a4be8	c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 95 7c c8
>3a4bf8	e8 c0 08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0 31
>3a4c08	22 22 4b 3a b0 22 20 49 48 08 c2 20 48 a9 00 08
>3a4c18	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a4c28	20 b8 18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00 d0
>3a4c38	cb a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00
>3a4c48	d0 f5 22 14 11 00 b0 22 20 49 48 08 c2 20 48 a9
>3a4c58	00 08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29
>3a4c68	ff 00 20 b8 18 e2 20 dc d2 08 20 49 48 28 60 08
>3a4c78	08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 66 17 20
>3a4c88	b3 04 a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2 20
>3a4c98	a9 2c 20 6a 1c c2 20 20 66 17 20 b3 04 a5 21 8f
>3a4ca8	68 03 00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f 08
>3a4cb8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1 08
>3a4cc8	00 c2 20 29 ff 00 20 b8 18 e2 20 dc d2 08 28 60
>3a4cd8	5c 95 66 3a 5c e6 64 3a 5c 96 66 3a 5c 12 56 3a
>3a4ce8	5c 6f 56 3a 5c a2 55 3a 5c 28 55 3a 5c a5 5a 3a
>3a4cf8	5c 93 51 3a 5c c0 54 3a 5c 7b 54 3a 5c 05 54 3a
>3a4d08	5c a4 65 3a 5c a1 52 3a 5c f7 50 3a 5c 1f 66 3a
>3a4d18	5c cf 51 3a 5c 98 66 3a 5c 91 66 3a 5c be 53 3a
>3a4d28	5c 99 66 3a 18 fb c2 20 a9 ff fe 1b 58 5c 39 4d
>3a4d38	3a c2 30 22 f7 50 3a 20 08 00 20 0c 00 8b e2 20
>3a4d48	a9 00 48 ab a2 00 4f 20 c1 03 ab 22 dc 4c 3a 22
>3a4d58	e4 4c 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2
>3a4d68	70 4d 20 c0 02 ab 28 6b 41 20 3c 73 74 61 72 74
>3a4d78	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41
>3a4d88	73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61
>3a4d98	6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73
>3a4da8	74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69
>3a4db8	66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70
>3a4dc8	61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20
>3a4dd8	6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74
>3a4de8	61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73
>3a4df8	61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72
>3a4e08	61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65
>3a4e18	6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c
>3a4e28	6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d
>3a4e38	6f 72 79 20 77 69 74 68 20 61 20 62 79 74 65 0d
>3a4e48	0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53
>3a4e58	74 61 72 74 20 65 78 65 63 75 74 69 6f 6e 20 61
>3a4e68	74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20
>3a4e78	5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70
>3a4e88	20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69
>3a4e98	6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20
>3a4ea8	74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e
>3a4eb8	20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72
>3a4ec8	74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20
>3a4ed8	5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20
>3a4ee8	66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65
>3a4ef8	6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44
>3a4f08	20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20
>3a4f18	5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20
>3a4f28	3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20
>3a4f38	44 75 6d 70 20 74 68 65 20 76 61 6c 75 65 20 69
>3a4f48	6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69
>3a4f58	73 70 6c 61 79 20 74 68 65 20 76 61 6c 75 65 73
>3a4f68	20 6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72
>3a4f78	73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58
>3a4f88	3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e
>3a4f98	20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e
>3a4fa8	0d 20 20 43 68 61 6e 67 65 20 74 68 65 20 63 6f
>3a4fb8	6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20 72 65
>3a4fc8	67 69 73 74 65 72 73 0d 0d 53 20 20 20 20 20 53
>3a4fd8	41 56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c
>3a4fe8	65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a4ff8	0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a5008	20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20
>3a5018	20 54 72 61 6e 73 66 65 72 20 28 63 6f 70 79 29
>3a5028	20 64 61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d
>3a5038	6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20
>3a5048	53 65 74 20 74 68 65 20 72 65 67 69 73 74 65 72
>3a5058	20 77 69 64 74 68 20 66 6c 61 67 73 20 66 6f 72
>3a5068	20 74 68 65 20 64 69 73 61 73 73 65 6d 62 6c 65
>3a5078	72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f
>3a5088	20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74
>3a5098	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a50a8	2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61 20 69
>3a50b8	6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69
>3a50c8	73 70 6c 61 79 20 61 20 73 68 6f 72 74 20 68 65
>3a50d8	6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20
>3a50e8	48 a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08
>3a50f8	e2 20 48 a9 3a 48 ab 68 28 a2 d6 66 20 c0 02 e2
>3a5108	20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20
>3a5118	48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 43 02
>3a5128	c2 20 a9 20 00 20 18 00 af 44 02 00 20 d0 02 a9
>3a5138	20 00 20 18 00 af 46 02 00 20 d0 02 a9 20 00 20
>3a5148	18 00 af 48 02 00 20 d0 02 a9 20 00 20 18 00 af
>3a5158	4a 02 00 20 d0 02 a9 20 00 20 18 00 af 4e 02 00
>3a5168	20 ea 02 a9 20 00 20 18 00 20 18 00 af 4c 02 00
>3a5178	20 d0 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22
>3a5188	ef 63 3a 28 20 33 02 20 33 02 6b 08 0b 08 c2 20
>3a5198	48 a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5
>3a51a8	0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 33 02
>3a51b8	2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5
>3a51c8	0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08
>3a51d8	5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5
>3a51e8	15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2
>3a51f8	20 a5 0d c5 11 d0 03 4c 86 52 c2 20 18 a5 0d 69
>3a5208	01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5
>3a5218	15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3
>3a5228	c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85
>3a5238	1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17
>3a5248	85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20
>3a5258	a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00
>3a5268	85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9
>3a5278	01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 33
>3a5288	02 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9
>3a5298	a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48
>3a52a8	a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31
>3a52b8	c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01
>3a52c8	85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32
>3a52d8	e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01
>3a52e8	85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2
>3a52f8	20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22
>3a5308	8c 52 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69
>3a5318	01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00
>3a5328	90 db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18
>3a5338	00 e2 20 a5 34 20 ea 02 a9 3a 20 18 00 c2 20 a5
>3a5348	32 20 d0 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20
>3a5358	18 00 a7 32 20 ea 02 22 ce 63 3a e2 20 c6 47 d0
>3a5368	ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9
>3a5378	00 48 ab 68 28 a2 7c 08 20 c0 02 20 33 02 20 4a
>3a5388	02 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20
>3a5398	33 02 2b ab 28 6b 4c f2 52 08 8d 90 08 e2 20 bd
>3a53a8	00 00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce
>3a53b8	90 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08
>3a53c8	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5
>3a53d8	0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57
>3a53e8	08 a0 7c 08 22 a1 53 3a a0 00 00 b9 7c 08 87 32
>3a53f8	22 ce 63 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b
>3a5408	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00
>3a5418	48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b
>3a5428	08 a0 7c 08 22 a1 53 3a c2 20 a5 0d 85 32 a5 0f
>3a5438	85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c
>3a5448	e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0
>3a5458	f4 c2 20 a5 32 85 4a a5 34 85 4c 22 78 5e 3a e2
>3a5468	20 a9 20 20 18 00 22 ce 63 3a 80 c6 20 33 02 ab
>3a5478	2b 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5488	31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02
>3a5498	00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b
>3a54a8	af 4c 02 00 5b e2 20 a9 3a 48 a9 54 48 a9 bb 48
>3a54b8	4c f2 54 ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b
>3a54c8	68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00
>3a54d8	a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>3a54e8	af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00
>3a54f8	48 ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00
>3a5508	af 41 02 00 8f a2 08 00 af 40 02 00 8f a1 08 00
>3a5518	af 4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08 00
>3a5528	08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20
>3a5538	48 a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0
>3a5548	0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9
>3a5558	01 00 85 47 80 08 a2 9a 66 20 c0 02 80 35 a5 0d
>3a5568	85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0
>3a5578	09 22 78 5e 3a a9 20 20 18 00 c2 20 18 a5 4a 69
>3a5588	01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9
>3a5598	20 33 02 20 33 02 ab 2b 28 6b 08 0b 8b 08 e2 20
>3a55a8	48 a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68
>3a55b8	28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42
>3a55c8	02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15
>3a55d8	8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26
>3a55e8	a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02
>3a55f8	c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2
>3a5608	10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a5618	48 a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 07
>3a5628	67 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa
>3a5638	bf 48 56 3a 8f 2d 08 00 22 6c 56 3a ab 2b 28 6b
>3a5648	e8 4c f0 4c f4 4c f8 4c fc 4c 00 4d 04 4d 08 4d
>3a5658	0c 4d 10 4d ec 4c 14 4d 18 4d 1c 4d e4 50 20 4d
>3a5668	24 4d 5d 4d 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46
>3a5678	08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 15 58 c2
>3a5688	20 a5 0d 85 32 a5 0f 85 34 c2 20 22 17 5a 3a c9
>3a5698	ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13
>3a56a8	85 4f 80 4c 20 33 02 08 e2 20 48 a9 3a 48 ab 68
>3a56b8	28 c2 10 a2 4c 58 20 c0 02 4c 15 58 20 33 02 08
>3a56c8	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 5b 58 20 c0
>3a56d8	02 4c 15 58 e2 20 22 4d 5a 3a c9 ff f0 de 85 4f
>3a56e8	c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00
>3a56f8	22 45 59 3a b0 03 4c de 57 87 32 22 ce 63 3a 08
>3a5708	e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5
>3a5718	34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9
>3a5728	14 f0 7c 29 3f c9 02 d0 03 4c 0c 58 c2 20 29 ff
>3a5738	00 aa e2 20 bf 14 63 3a c9 03 f0 57 c9 02 f0 5f
>3a5748	c9 01 f0 67 80 71 c2 20 a5 54 c9 8c 5f f0 26 c9
>3a5758	f0 5f f0 2a c9 70 5f f0 1c c9 74 5f f0 17 c9 7c
>3a5768	5f f0 12 c9 64 5f f0 0d c9 78 5f f0 08 c9 60 5f
>3a5778	f0 03 4c f8 56 e2 20 a9 12 85 4f 4c f8 56 e2 20
>3a5788	a9 16 85 4f 4c f8 56 22 88 58 3a 90 60 c9 02 f0
>3a5798	0e 80 18 a0 02 00 b9 96 08 97 56 22 ce 63 3a a0
>3a57a8	01 00 b9 96 08 97 56 22 ce 63 3a a0 00 00 b9 96
>3a57b8	08 97 56 22 ce 63 3a e2 20 a9 41 20 18 00 a9 20
>3a57c8	20 18 00 a6 32 86 4a a6 34 86 4c 22 78 5e 3a a9
>3a57d8	20 20 18 00 80 37 20 33 02 08 e2 20 48 a9 3a 48
>3a57e8	ab 68 28 c2 10 a2 19 58 20 c0 02 80 20 20 33 02
>3a57f8	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 69 58 20
>3a5808	c0 02 80 09 a5 4f 29 c0 d0 95 4c b3 57 2b ab 28
>3a5818	6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65
>3a5828	20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72
>3a5838	20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f
>3a5848	6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63
>3a5858	2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d
>3a5868	00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74
>3a5878	20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00
>3a5888	08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f
>3a5898	c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20
>3a58a8	18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38
>3a58b8	a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f
>3a58c8	c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26
>3a58d8	a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16
>3a58e8	80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff
>3a58f8	d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b
>3a5908	c2 10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2
>3a5918	00 00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2
>3a5928	c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06 50
>3a5938	26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08
>3a5948	c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a5958	ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00
>3a5968	a0 00 00 bd 12 60 f0 1b c5 54 d0 0d e2 20 b9 14
>3a5978	62 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38
>3a5988	ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08
>3a5998	5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03
>3a59a8	f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b
>3a59b8	c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2
>3a59c8	20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9
>3a59d8	41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22
>3a59e8	06 59 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a59f8	a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a
>3a5a08	68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b
>3a5a18	08 c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36
>3a5a28	a5 13 85 38 a9 a0 5e 85 03 a9 3a 00 85 05 22 8f
>3a5a38	59 3a b0 0d 22 ed 59 3a a7 03 d0 f2 a9 ff ff 80
>3a5a48	02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a5a58	28 c2 30 a5 15 85 36 a5 17 85 38 a9 2c 63 85 03
>3a5a68	a9 3a 00 85 05 22 8f 59 3a b0 22 22 ed 59 3a c2
>3a5a78	20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05
>3a5a88	e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 ed 59
>3a5a98	3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b
>3a5aa8	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4
>3a5ab8	08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5
>3a5ac8	0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20
>3a5ad8	a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5
>3a5ae8	32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 11
>3a5af8	5b 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11
>3a5b08	90 ec 20 33 02 2b ab 28 6b 08 0b e2 20 a9 41 20
>3a5b18	18 00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68
>3a5b28	28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 78 5e
>3a5b38	3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18
>3a5b48	e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2
>3a5b58	d0 0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0
>3a5b68	0c 48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29
>3a5b78	ff 00 0a aa bf 12 60 3a aa 22 f2 5d 3a e2 20 a7
>3a5b88	00 aa bf 14 62 3a 22 ce 63 3a 22 9f 5b 3a 20 33
>3a5b98	02 20 4a 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10
>3a5ba8	aa 68 7c ad 5b dd 5b f8 5b ff 5b 24 5c 2b 5c 46
>3a5bb8	5c 68 5c 79 5c b6 5c be 5c cf 5c e0 5c e7 5c 0c
>3a5bc8	5d 39 5d a5 5c 8a 5c 57 5c 2c 5d 36 5d 4a 5d 79
>3a5bd8	5d 27 5d 8a 5d a9 28 20 18 00 22 a1 5d 3a a9 2c
>3a5be8	20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c 9b 5d
>3a5bf8	22 a1 5d 3a 4c 9b 5d e2 20 48 a9 23 20 18 00 68
>3a5c08	29 c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 ab
>3a5c18	5d 3a 4c 9b 5d 22 a1 5d 3a 4c 9b 5d 22 ab 5d 3a
>3a5c28	4c 9b 5d a9 28 20 18 00 22 a1 5d 3a a9 29 20 18
>3a5c38	00 a9 2c 20 18 00 a9 59 20 18 00 4c 9b 5d 22 a1
>3a5c48	5d 3a a9 2c 20 18 00 a9 58 20 18 00 4c 9b 5d 22
>3a5c58	a1 5d 3a a9 2c 20 18 00 a9 59 20 18 00 4c 9b 5d
>3a5c68	22 ab 5d 3a a9 2c 20 18 00 a9 59 20 18 00 4c 9b
>3a5c78	5d 22 ab 5d 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a5c88	9b 5d a9 28 20 18 00 22 ab 5d 3a a9 2c 20 18 00
>3a5c98	a9 58 20 18 00 a9 29 20 18 00 4c 9b 5d a9 28 20
>3a5ca8	18 00 22 a1 5d 3a a9 29 20 18 00 4c 9b 5d a9 41
>3a5cb8	20 18 00 4c 9f 5d 22 a1 5d 3a a9 2c 20 18 00 a9
>3a5cc8	53 20 18 00 4c 9b 5d a9 5b 20 18 00 22 a1 5d 3a
>3a5cd8	a9 5d 20 18 00 4c 9b 5d 22 b9 5d 3a 4c 9f 5d a9
>3a5ce8	28 20 18 00 22 a1 5d 3a a9 2c 20 18 00 a9 53 20
>3a5cf8	18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18
>3a5d08	00 4c 9b 5d a9 5b 20 18 00 22 a1 5d 3a a9 5d 20
>3a5d18	18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 9b 5d a0
>3a5d28	02 00 80 03 a0 01 00 22 1f 5e 3a 4c 9f 5d 4c 9f
>3a5d38	5d 22 b9 5d 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a5d48	9f 5d a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0
>3a5d58	01 00 22 43 02 3a a9 2c 20 18 00 a9 23 20 18 00
>3a5d68	a6 00 a0 01 00 22 43 02 3a ab 22 ce 63 3a 4c 9b
>3a5d78	5d a9 28 20 18 00 22 ab 5d 3a a9 29 20 18 00 4c
>3a5d88	9b 5d a9 5b 20 18 00 22 ab 5d 3a a9 5d 20 18 00
>3a5d98	4c 9b 5d 22 ce 63 3a 28 6b 08 e2 20 a7 00 20 ea
>3a5da8	02 28 6b 08 c2 30 a7 00 20 d0 02 22 ce 63 3a 28
>3a5db8	6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68
>3a5dc8	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00
>3a5dd8	a7 00 99 90 08 22 ce 63 3a c8 c0 03 00 d0 f1 22
>3a5de8	78 5e 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10
>3a5df8	08 e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00
>3a5e08	e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9
>3a5e18	20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08
>3a5e28	5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06
>3a5e38	64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00
>3a5e48	85 18 22 ce 63 3a a7 00 85 19 30 04 64 1a 80 04
>3a5e58	a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5
>3a5e68	02 65 1a 85 1a 22 78 5e 3a 22 ce 63 3a 2b 28 6b
>3a5e78	08 0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a5e88	20 a5 4c 20 ea 02 e2 20 a9 3a 20 18 00 c2 20 a5
>3a5e98	4a 20 d0 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00
>3a5ea8	45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00
>3a5eb8	43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00
>3a5ec8	4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00
>3a5ed8	44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00
>3a5ee8	53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00
>3a5ef8	42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00
>3a5f08	50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00
>3a5f18	44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00
>3a5f28	43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00
>3a5f38	54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00
>3a5f48	54 58 41 00 54 58 53 00 54 41 58 00 54 53 58 00
>3a5f58	44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00
>3a5f68	42 56 43 00 42 56 53 00 42 43 43 00 42 43 53 00
>3a5f78	42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00
>3a5f88	53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00
>3a5f98	50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00
>3a5fa8	50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00
>3a5fb8	57 41 49 00 58 42 41 00 54 43 53 00 54 53 43 00
>3a5fc8	54 43 44 00 54 44 43 00 54 58 59 00 54 59 58 00
>3a5fd8	53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00
>3a5fe8	57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00
>3a5ff8	53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00
>3a6008	50 45 41 00 4a 4d 4c 00 00 00 f8 5e a0 5e e0 5f
>3a6018	a0 5e 80 5f a0 5e c0 5e a0 5e 08 5f a0 5e c0 5e
>3a6028	a0 5f 80 5f a0 5e c0 5e a0 5e 60 5f a0 5e a0 5e
>3a6038	a0 5e 84 5f a0 5e c0 5e a0 5e 28 5f a0 5e dc 5e
>3a6048	c0 5f 84 5f a0 5e c0 5e a0 5e fc 5e a4 5e e4 5f
>3a6058	a4 5e e0 5e a4 5e c4 5e a4 5e 0c 5f a4 5e c4 5e
>3a6068	a4 5f e0 5e a4 5e c4 5e a4 5e 64 5f a4 5e a4 5e
>3a6078	a4 5e e0 5e a4 5e c4 5e a4 5e 2c 5f a4 5e d8 5e
>3a6088	c4 5f e0 5e a4 5e c4 5e a4 5e 00 5f a8 5e e8 5f
>3a6098	a8 5e fc 5f a8 5e c8 5e a8 5e 10 5f a8 5e c8 5e
>3a60a8	a8 5f e4 5e a8 5e c8 5e a8 5e 68 5f a8 5e a8 5e
>3a60b8	a8 5e 00 60 a8 5e c8 5e a8 5e 30 5f a8 5e 90 5f
>3a60c8	c8 5f 0c 60 a8 5e c8 5e a8 5e 04 5f ac 5e ec 5f
>3a60d8	ac 5e 88 5f ac 5e cc 5e ac 5e 14 5f ac 5e cc 5e
>3a60e8	ac 5f e4 5e ac 5e cc 5e ac 5e 6c 5f ac 5e ac 5e
>3a60f8	ac 5e 88 5f ac 5e cc 5e ac 5e 34 5f ac 5e 94 5f
>3a6108	cc 5f e4 5e ac 5e cc 5e ac 5e 8c 5f b0 5e f0 5f
>3a6118	b0 5e e8 5e b0 5e d0 5e b0 5e 18 5f e0 5e 48 5f
>3a6128	b0 5f e8 5e b0 5e d0 5e b0 5e 70 5f b0 5e b0 5e
>3a6138	b0 5e e8 5e b0 5e d0 5e b0 5e 38 5f b0 5e 4c 5f
>3a6148	d0 5f 88 5f b0 5e 88 5f b0 5e ec 5e b4 5e d4 5e
>3a6158	b4 5e ec 5e b4 5e d4 5e b4 5e 1c 5f b4 5e 50 5f
>3a6168	b4 5f ec 5e b4 5e d4 5e b4 5e 74 5f b4 5e b4 5e
>3a6178	b4 5e ec 5e b4 5e d4 5e b4 5e 3c 5f b4 5e 54 5f
>3a6188	d4 5f ec 5e b4 5e d4 5e b4 5e f0 5e b8 5e f4 5f
>3a6198	b8 5e f0 5e b8 5e d8 5e b8 5e 20 5f b8 5e 58 5f
>3a61a8	b8 5f f0 5e b8 5e d8 5e b8 5e 78 5f b8 5e b8 5e
>3a61b8	b8 5e 04 60 b8 5e d8 5e b8 5e 40 5f b8 5e 98 5f
>3a61c8	d8 5f 0c 60 b8 5e d8 5e b8 5e f4 5e bc 5e f8 5f
>3a61d8	bc 5e f4 5e bc 5e dc 5e bc 5e 24 5f bc 5e 5c 5f
>3a61e8	bc 5f f4 5e bc 5e dc 5e bc 5e 7c 5f bc 5e bc 5e
>3a61f8	bc 5e 08 60 bc 5e dc 5e bc 5e 44 5f bc 5e 9c 5f
>3a6208	dc 5f fc 5e bc 5e dc 5e bc 5e 00 00 13 00 02 09
>3a6218	01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6228	01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09
>3a6238	01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6248	05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09
>3a6258	14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6268	14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09
>3a6278	01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c
>3a6288	05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09
>3a6298	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a62a8	05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09
>3a62b8	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a62c8	05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09
>3a62d8	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a62e8	01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09
>3a62f8	01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a6308	03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02
>3a6318	01 01 02 02 00 01 01 03 01 01 03 01 02 01 01 00
>3a6328	02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58
>3a6338	00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c
>3a6348	58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00
>3a6358	03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c
>3a6368	53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64
>3a6378	64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c
>3a6388	53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10
>3a6398	28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00
>3a63a8	28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64
>3a63b8	64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64
>3a63c8	64 5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00 69
>3a63d8	01 00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a
>3a63e8	08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00
>3a63f8	0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18
>3a6408	00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b
>3a6418	68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 ce 63 3a
>3a6428	80 f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 ce
>3a6438	63 3a 22 10 64 3a c2 30 a5 31 c2 20 29 ff 00 0a
>3a6448	0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14
>3a6458	c9 22 f0 06 22 ce 63 3a 80 f2 a9 00 87 32 22 ce
>3a6468	63 3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28
>3a6478	e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a
>3a6488	f0 0d 20 68 03 90 0e 22 06 59 3a a9 01 85 4a 22
>3a6498	ce 63 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00
>3a64a8	0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b
>3a64b8	e2 20 64 31 22 10 64 3a a7 32 f0 21 c9 22 d0 06
>3a64c8	22 2b 64 3a 80 0a 22 6e 64 3a a5 31 c9 09 b0 0d
>3a64d8	a7 32 f0 09 c9 20 f0 dc 20 68 03 b0 d7 6b 08 0b
>3a64e8	08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31
>3a64f8	00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00
>3a6508	4f 85 00 85 32 e2 20 22 10 64 3a c9 00 f0 38 c2
>3a6518	20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 ce
>3a6528	63 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03
>3a6538	e8 80 eb 86 0b a9 00 87 32 22 ce 63 3a a7 08 c9
>3a6548	41 f0 07 22 b8 64 3a 2b 28 6b 22 10 64 3a a7 32
>3a6558	f0 f5 22 6e 64 3a 22 10 64 3a a7 32 f0 e9 c2 20
>3a6568	a5 32 85 11 e2 20 a5 34 85 13 22 ce 63 3a a7 32
>3a6578	f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 ce 63 3a
>3a6588	22 10 64 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20
>3a6598	a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2
>3a65a8	20 a5 31 d0 0f a2 9a 66 a9 3a 48 ab 20 c0 02 20
>3a65b8	33 02 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23
>3a65c8	08 00 20 98 47 e2 20 a5 31 c9 01 d0 0f c2 20 a9
>3a65d8	ff ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11
>3a65e8	8f 54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25
>3a65f8	e2 20 a2 c0 66 a9 3a 48 ab 20 c0 02 af 2e 03 00
>3a6608	20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20
>3a6618	33 02 20 33 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9
>3a6628	03 f0 0f a2 9a 66 a9 3a 48 ab 20 c0 02 20 33 02
>3a6638	80 54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a6648	20 98 47 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5
>3a6658	15 8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0
>3a6668	25 e2 20 a2 aa 66 a9 3a 48 ab 20 c0 02 af 2e 03
>3a6678	00 20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02
>3a6688	20 33 02 20 33 02 28 ab 6b 5c 40 21 3a 6b 00 00
>3a6698	00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d
>3a66a8	0d 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65
>3a66b8	20 66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74
>3a66c8	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20
>3a66d8	20 50 43 20 20 20 20 20 41 20 20 20 20 58 20 20
>3a66e8	20 20 59 20 20 20 20 53 50 20 20 20 44 42 52 20
>3a66f8	44 50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41
>3a6708	43 44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e
>3a6718	3f 00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a6728	20 48 a9 00 48 ab 68 28 c2 30 20 59 67 a9 ff fe
>3a6738	1b 08 e2 20 48 a9 3a 48 ab 68 28 a2 28 d2 20 c0
>3a6748	02 08 e2 20 48 a9 00 48 ab 68 28 4c 40 21 4c 56
>3a6758	67 08 20 b5 01 20 4f 3f 28 60 00 00 00 00 00 00
>3a6768	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1672 times (26752 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 50 49 58
>3ad1c8	4d 41 50 00 43 4c 52 50 49 58 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208	54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218	00 54 49 4c 45 41 54 00 0d 52 45 41 44 59 0d 00
>3ad228	43 32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49
>3ad238	43 38 31 36 20 76 30 2e 31 2e 30 2d 61 6c 70 68
>3ad248	61 2b 31 31 33 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
