
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Sat May 30 09:03:23 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 96 12 38	jsl $381296	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 28 11 38	jsl $381128	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 4d 06 39	jmp $39064d	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 0e 14 39	jmp $39140e	RESTORE         JML IRESTORE
.381008	5c ec 05 39	jmp $3905ec	BREAK           JML IBREAK
.38100c	5c 33 06 39	jmp $390633	READY           JML IREADY
.381010	5c 0f 14 39	jmp $39140f	SCINIT          JML ISCINIT
.381014	5c 10 14 39	jmp $391410	IOINIT          JML IIOINIT
.381018	5c b0 06 39	jmp $3906b0	PUTC            JML IPUTC
.38101c	5c 99 06 39	jmp $390699	PUTS            JML IPUTS
.381020	5c d5 07 39	jmp $3907d5	PUTB            JML IPUTB
.381024	5c be 3e 39	jmp $393ebe	PUTBLOCK        JML IPUTBLOCK
.381028	5c 11 14 39	jmp $391411	SETLFS          JML ISETLFS
.38102c	5c 12 14 39	jmp $391412	SETNAM          JML ISETNAM
.381030	5c 13 14 39	jmp $391413	OPEN            JML IOPEN
.381034	5c 14 14 39	jmp $391414	CLOSE           JML ICLOSE
.381038	5c 4e 06 39	jmp $39064e	SETIN           JML ISETIN
.38103c	5c 57 06 39	jmp $390657	SETOUT          JML ISETOUT
.381040	5c 15 14 39	jmp $391415	GETB            JML IGETB
.381044	5c 6b 3e 39	jmp $393e6b	GETBLOCK        JML IGETBLOCK
.381048	5c 16 14 39	jmp $391416	GETCH           JML IGETCH
.38104c	5c 69 06 39	jmp $390669	GETCHW          JML IGETCHW
.381050	5c 60 06 39	jmp $390660	GETCHE          JML IGETCHE
.381054	5c 17 14 39	jmp $391417	GETS            JML IGETS
.381058	5c 18 14 39	jmp $391418	GETLINE         JML IGETLINE
.38105c	5c 19 14 39	jmp $391419	GETFIELD        JML IGETFIELD
.381060	5c 1a 14 39	jmp $39141a	TRIM            JML ITRIM
.381064	5c 1b 14 39	jmp $39141b	PRINTC          JML IPRINTC
.381068	5c 1c 14 39	jmp $39141c	PRINTS          JML IPRINTS
.38106c	5c d6 07 39	jmp $3907d6	PRINTCR         JML IPRINTCR
.381070	5c 1d 14 39	jmp $39141d	PRINTF          JML IPRINTF
.381074	5c 1e 14 39	jmp $39141e	PRINTI          JML IPRINTI
.381078	5c 4e 09 39	jmp $39094e	PRINTH          JML IPRINTH
.38107c	5c 1f 14 39	jmp $39141f	PRINTAI         JML IPRINTAI
.381080	5c 6b 09 39	jmp $39096b	PRINTAH         JML IPRINTAH
.381084	5c da 08 39	jmp $3908da	LOCATE          JML ILOCATE
.381088	5c 20 14 39	jmp $391420	PUSHKEY         JML IPUSHKEY
.38108c	5c 21 14 39	jmp $391421	PUSHKEYS        JML IPUSHKEYS
.381090	5c 36 08 39	jmp $390836	CSRRIGHT        JML ICSRRIGHT
.381094	5c 69 08 39	jmp $390869	CSRLEFT         JML ICSRLEFT
.381098	5c 8f 08 39	jmp $39088f	CSRUP           JML ICSRUP
.38109c	5c b5 08 39	jmp $3908b5	CSRDOWN         JML ICSRDOWN
.3810a0	5c 25 08 39	jmp $390825	CSRHOME         JML ICSRHOME
.3810a4	5c 26 09 39	jmp $390926	SCROLLUP        JML ISCROLLUP
.3810a8	5c b9 09 39	jmp $3909b9	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 1c 0a 39	jmp $390a1c	INITCHLUT	    JML IINITCHLUT
.3810b0	5c 36 0d 39	jmp $390d36	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c 35 0e 39	jmp $390e35	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c a0 0f 39	jmp $390fa0	TESTSID         JML ITESTSID
.3810bc	5c 15 0d 39	jmp $390d15	INITCURSOR      JML IINITCURSOR
.3810c0	5c cb 0c 39	jmp $390ccb	INITFONTSET     JML IINITFONTSET
.3810c4	5c 4b 0a 39	jmp $390a4b	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 6b 0a 39	jmp $390a6b	INITALLLUT      JML IINITALLLUT
.3810cc	5c 2d 0b 39	jmp $390b2d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 56 0b 39	jmp $390b56	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 8d 0b 39	jmp $390b8d	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 8e 0b 39	jmp $390b8e	INITSPRITE      JML IINITSPRITE
.3810dc	5c 6f 10 39	jmp $39106f	INITCODEC       JML IINITCODEC
.3810e0	5c eb 10 39	jmp $3910eb	RESETCODEC      JML IRESETCODEC
.3810e4	5c 59 11 39	jmp $391159	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 0e 11 39	jmp $39110e	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 9d 34 39	jmp $39349d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c e2 4f 39	jmp $394fe2	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 75 50 39	jmp $395075	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c af 50 39	jmp $3950af	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 3c 51 39	jmp $39513c	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c e8 50 39	jmp $3950e8	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c e2 51 39	jmp $3951e2	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c a4 51 39	jmp $3951a4	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c de 51 39	jmp $3951de	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 7b 52 39	jmp $39527b	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c a2 52 39	jmp $3952a2	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c a6 52 39	jmp $3952a6	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 87 54 39	jmp $395487	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 41 3e 39	jmp $393e41	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 20 55 39	jmp $395520	F_RUN           JML IF_RUN          ; Load an run a binary file

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381128					IRQ_HANDLER
.381128	e2 20		sep #$20	                SEP #$20        ; set A short
.38112a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38112e	c9 00		cmp #$00	                CMP #$00
.381130	f0 4a		beq $38117c	                BEQ CHECK_PENDING_REG1
.381132	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381136	29 01		and #$01	                AND #FNX0_INT00_SOF
.381138	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38113a	d0 09		bne $381145	                BNE SERVICE_NEXT_IRQ2
.38113c	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381140	20 e6 11	jsr $3811e6	                JSR SOF_INTERRUPT
.381143	e2 20		sep #$20	                SEP #$20        ; set A short
.381145					SERVICE_NEXT_IRQ2
.381145	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381149	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38114b	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38114d	d0 09		bne $381158	                BNE SERVICE_NEXT_IRQ6
.38114f	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381153	20 04 12	jsr $381204	                JSR TIMER0_INTERRUPT
.381156	e2 20		sep #$20	                SEP #$20        ; set A short
.381158					SERVICE_NEXT_IRQ6
.381158	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115c	29 40		and #$40	                AND #FNX0_INT06_FDC
.38115e	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381160	d0 09		bne $38116b	                BNE SERVICE_NEXT_IRQ7
.381162	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381166	20 5f 12	jsr $38125f	                JSR FDC_INTERRUPT
.381169	e2 20		sep #$20	                SEP #$20        ; set A short
.38116b					SERVICE_NEXT_IRQ7
.38116b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38116f	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381171	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381173	d0 07		bne $38117c	                BNE CHECK_PENDING_REG1
.381175	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381179	20 1e 12	jsr $38121e	                JSR MOUSE_INTERRUPT
.38117c					CHECK_PENDING_REG1
.38117c	e2 20		sep #$20	                SEP #$20        ; set A short
.38117e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381182	c9 00		cmp #$00	                CMP #$00
.381184	f0 5d		beq $3811e3	                BEQ EXIT_IRQ_HANDLE
.381186					SERVICE_NEXT_IRQ8
.381186	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118a	29 01		and #$01	                AND #FNX1_INT00_KBD
.38118c	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.38118e	d0 09		bne $381199	                BNE SERVICE_NEXT_IRQ11
.381190	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381194	20 97 12	jsr $381297	                JSR KEYBOARD_INTERRUPT
.381197	e2 20		sep #$20	                SEP #$20        ; set A short
.381199					SERVICE_NEXT_IRQ11
.381199	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119d	29 08		and #$08	                AND #FNX1_INT03_COM2
.38119f	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811a1	d0 09		bne $3811ac	                BNE SERVICE_NEXT_IRQ12
.3811a3	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a7	20 6a 12	jsr $38126a	                JSR COM2_INTERRUPT
.3811aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ac					SERVICE_NEXT_IRQ12
.3811ac	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b0	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811b2	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811b4	d0 09		bne $3811bf	                BNE SERVICE_NEXT_IRQ13
.3811b6	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ba	20 75 12	jsr $381275	                JSR COM1_INTERRUPT
.3811bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3811bf					SERVICE_NEXT_IRQ13
.3811bf	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c3	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811c5	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811c7	d0 09		bne $3811d2	                BNE SERVICE_NEXT_IRQ14
.3811c9	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811cd	20 80 12	jsr $381280	                JSR MPU401_INTERRUPT
.3811d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d2					SERVICE_NEXT_IRQ14
.3811d2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d6	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811d8	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811da	d0 07		bne $3811e3	                BNE EXIT_IRQ_HANDLE
.3811dc	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e0	20 8b 12	jsr $38128b	                JSR LPT1_INTERRUPT
.3811e3					EXIT_IRQ_HANDLE
.3811e3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811e5	6b		rtl		                RTL
.3811e6					SOF_INTERRUPT
.3811e6	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ea	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811ec	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f0	c2 20		rep #$20	                REP #$20        ; set A long
.3811f2	af 4e e0 38	lda $38e04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.3811f6	f0 0b		beq $381203	                BEQ sof_int_done                ; If it's zero, do nothing
.3811f8	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.3811f9	8f 4e e0 38	sta $38e04e	                STA @l FDC_MOTOR_TIMER
.3811fd	d0 04		bne $381203	                BNE sof_int_done                ; If it's not zero, we're done for this tick
.3811ff	22 ac 5b 39	jsl $395bac	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381203	60		rts		sof_int_done    RTS
.381204					TIMER0_INTERRUPT
.381204	e2 20		sep #$20	                SEP #$20        ; set A short
.381206	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38120a	09 80		ora #$80	                ORA #TIMER0TRIGGER
.38120c	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381210	60		rts		                RTS
.381211					TIMER2_INTERRUPT
.381211	e2 20		sep #$20	                SEP #$20        ; set A short
.381213	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381217	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381219	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38121d	60		rts		                RTS
.38121e					MOUSE_INTERRUPT
.38121e	e2 20		sep #$20	                SEP #$20        ; set A short
.381220	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381224	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381226	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38122a	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38122e	a2 00 00	ldx #$0000	                LDX #$0000
.381231	e2 10		sep #$10	                SEP #$10        ; set X short
.381233	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381235	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381239	e8		inx		                INX
.38123a	e0 03		cpx #$03	                CPX #$03
.38123c	d0 1c		bne $38125a	                BNE EXIT_FOR_NEXT_VALUE
.38123e	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381242	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381244	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381248	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38124a	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38124e	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.381250	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381254	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381256	e2 20		sep #$20	                SEP #$20        ; set A short
.381258	a2 00		ldx #$00	                LDX #$00
.38125a					EXIT_FOR_NEXT_VALUE
.38125a	86 e0		stx $e0		                STX MOUSE_PTR
.38125c	c2 10		rep #$10	                REP #$10        ; set X long
.38125e	60		rts		                RTS
.38125f					FDC_INTERRUPT
.38125f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381263	29 40		and #$40	                AND #FNX0_INT06_FDC
.381265	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381269	60		rts		                RTS
.38126a					COM2_INTERRUPT
.38126a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38126e	29 08		and #$08	                AND #FNX1_INT03_COM2
.381270	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381274	60		rts		                RTS
.381275					COM1_INTERRUPT
.381275	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381279	29 10		and #$10	                AND #FNX1_INT04_COM1
.38127b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38127f	60		rts		                RTS
.381280					MPU401_INTERRUPT
.381280	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381284	29 20		and #$20	                AND #FNX1_INT05_MPU401
.381286	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38128a	60		rts		                RTS
.38128b					LPT1_INTERRUPT
.38128b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38128f	29 40		and #$40	                AND #FNX1_INT06_LPT
.381291	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381295	60		rts		                RTS
.381296					NMI_HANDLER
.381296	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.381297					KEYBOARD_INTERRUPT
.381297	48		pha		                PHA             ; begin setdp macro
.381298	08		php		                PHP
.381299	c2 20		rep #$20	                REP #$20        ; set A long
.38129b	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38129e	5b		tcd		                TCD
.38129f	28		plp		                PLP
.3812a0	68		pla		                PLA             ; end setdp macro
.3812a1	a2 00 00	ldx #$0000	                ldx #$0000
.3812a4	e2 10		sep #$10	                SEP #$10        ; set X short
.3812a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3812a8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812ac	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812ae	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b2					IRQ_HANDLER_FETCH
.3812b2	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812b6	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812b8	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812ba	29 80		and #$80	                AND #$80
.3812bc	c9 80		cmp #$80	                CMP #$80
.3812be	d0 10		bne $3812d0	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812c0	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812c2	29 7f		and #$7f	                AND #$7F
.3812c4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812c6	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812c8	aa		tax		                TAX
.3812c9	bf 80 6d 39	lda $396d80,x	                LDA @lScanCode_Prefix_Set1, x
.3812cd	4c 73 13	jmp $381373	                JMP KB_WR_2_SCREEN      ; And save it
.3812d0	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812d2	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3812d4	d0 03		bne $3812d9	                BNE NOT_KB_SET_LSHIFT
.3812d6	82 ad 00	brl $381386	                BRL KB_SET_SHIFT
.3812d9					NOT_KB_SET_LSHIFT
.3812d9	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3812db	d0 03		bne $3812e0	                BNE NOT_KB_CLR_LSHIFT
.3812dd	82 af 00	brl $38138f	                BRL KB_CLR_SHIFT
.3812e0					NOT_KB_CLR_LSHIFT
.3812e0	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3812e2	d0 03		bne $3812e7	                BNE NOT_KB_SET_RSHIFT
.3812e4	82 9f 00	brl $381386	                BRL KB_SET_SHIFT
.3812e7					NOT_KB_SET_RSHIFT
.3812e7	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3812e9	d0 03		bne $3812ee	                BNE NOT_KB_CLR_RSHIFT
.3812eb	82 a1 00	brl $38138f	                BRL KB_CLR_SHIFT
.3812ee					NOT_KB_CLR_RSHIFT
.3812ee	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3812f0	d0 03		bne $3812f5	                BNE NOT_KB_SET_CTRL
.3812f2	82 a3 00	brl $381398	                BRL KB_SET_CTRL
.3812f5					NOT_KB_SET_CTRL
.3812f5	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3812f7	d0 03		bne $3812fc	                BNE NOT_KB_CLR_CTRL
.3812f9	82 a5 00	brl $3813a1	                BRL KB_CLR_CTRL
.3812fc					NOT_KB_CLR_CTRL
.3812fc	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3812fe	d0 03		bne $381303	                BNE NOT_KB_SET_ALT
.381300	82 a7 00	brl $3813aa	                BRL KB_SET_ALT
.381303					NOT_KB_SET_ALT
.381303	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381305	d0 03		bne $38130a	                BNE NOT_KB_CLR_ALT
.381307	82 a9 00	brl $3813b3	                BRL KB_CLR_ALT
.38130a	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38130c	d0 03		bne $381311	                BNE NOT_PREFIXED
.38130e	82 ab 00	brl $3813bc	                BRL KB_SET_PREFIX
.381311	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381313	d0 03		bne $381318	                BNE NOT_KB_SET_NUM
.381315	82 b6 00	brl $3813ce	                BRL KB_TOG_NUMLOCK
.381318	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38131a	d0 03		bne $38131f	                BNE NOT_KB_SET_SCR
.38131c	82 a6 00	brl $3813c5	                BRL KB_TOG_SCRLOCK
.38131f	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381321	d0 03		bne $381326	                BNE NOT_KB_CAPSLOCK
.381323	82 bc 00	brl $3813e2	                BRL KB_TOG_CAPLOCK
.381326	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381328	d0 09		bne $381333	                BNE KB_UNPRESSED
.38132a	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38132c	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381330	82 b5 00	brl $3813e8	                BRL KB_CHECK_B_DONE
.381333	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381335	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381337	d0 03		bne $38133c	                BNE KB_NORM_SC
.381339	82 ac 00	brl $3813e8	                BRL KB_CHECK_B_DONE
.38133c	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38133e	aa		tax		                TAX
.38133f	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381341	29 10		and #$10	                AND #$10
.381343	c9 10		cmp #$10	                CMP #$10
.381345	f0 17		beq $38135e	                BEQ SHIFT_KEY_ON
.381347	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381349	29 20		and #$20	                AND #$20
.38134b	c9 20		cmp #$20	                CMP #$20
.38134d	f0 16		beq $381365	                BEQ CTRL_KEY_ON
.38134f	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381351	29 40		and #$40	                AND #$40
.381353	c9 40		cmp #$40	                CMP #$40
.381355	f0 15		beq $38136c	                BEQ ALT_KEY_ON
.381357	bf 00 6b 39	lda $396b00,x	                LDA @lScanCode_Press_Set1, x
.38135b	82 15 00	brl $381373	                BRL KB_WR_2_SCREEN
.38135e	bf 80 6b 39	lda $396b80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.381362	82 0e 00	brl $381373	                BRL KB_WR_2_SCREEN
.381365	bf 00 6c 39	lda $396c00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381369	82 07 00	brl $381373	                BRL KB_WR_2_SCREEN
.38136c	bf 80 6c 39	lda $396c80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.381370	82 00 00	brl $381373	                BRL KB_WR_2_SCREEN
.381373	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.381375	d0 03		bne $38137a	                BNE savechar
.381377	4c f8 13	jmp $3813f8	                JMP programmerKey       ; Yes: trigger the programmer key
.38137a	48		pha		savechar        PHA
.38137b	c2 10		rep #$10	                REP #$10        ; set X long
.38137d	20 04 14	jsr $381404	                JSR SAVEKEY
.381380	e2 20		sep #$20	                SEP #$20        ; set A short
.381382	68		pla		                PLA
.381383	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.381386	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.381388	09 10		ora #$10	                ORA #$10
.38138a	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38138c	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.38138f	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.381391	29 ef		and #$ef	                AND #$EF
.381393	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381395	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.381398	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.38139a	09 20		ora #$20	                ORA #$20
.38139c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38139e	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813a1	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813a3	29 df		and #$df	                AND #$DF
.3813a5	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813a7	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813aa	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813ac	09 40		ora #$40	                ORA #$40
.3813ae	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b0	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813b3	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813b5	29 bf		and #$bf	                AND #$BF
.3813b7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b9	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813bc	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813be	09 80		ora #$80	                ORA #$80
.3813c0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c2	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813c5	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813c7	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813c9	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813cb	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813ce	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813d0	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813d2	c9 60		cmp #$60	                CMP #$60
.3813d4	d0 03		bne $3813d9	                BNE KB_TOG_NUMLOC2
.3813d6	82 63 ff	brl $38133c	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.3813d9	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.3813db	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3813dd	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813df	4c e8 13	jmp $3813e8	                JMP KB_CHECK_B_DONE
.3813e2	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3813e4	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3813e6	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813e8					KB_CHECK_B_DONE
.3813e8	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3813ec	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3813ee	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3813f0	d0 03		bne $3813f5	                BNE SET_LED
.3813f2	4c b2 12	jmp $3812b2	                JMP IRQ_HANDLER_FETCH
.3813f5					SET_LED
.3813f5					KB_DONE
.3813f5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813f7	60		rts		                RTS
.3813f8					programmerKey
.3813f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813fa	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3813fb	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3813fc	ab		plb		                PLB
.3813fd	7a		ply		                PLY
.3813fe	fa		plx		                PLX
.3813ff	68		pla		                PLA
.381400	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381404					SAVEKEY
.381404	e2 20		sep #$20	                SEP #$20        ; set A short
.381406	48		pha		                PHA                     ; Save the character
.381407	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381409	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38140b	f0 0d		beq $38141a	                BEQ no_caps             ; No... just use the character as-is
.38140d	68		pla		                PLA                     ; Get the character back
.38140e	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381410	90 09		bcc $38141b	                BLT check_break         ; Yes: just use as-is
.381412	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381414	b0 05		bcs $38141b	                BGE check_break         ; Yes: just us as-is
.381416	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381418	80 01		bra $38141b	                BRA check_break
.38141a	68		pla		no_caps         PLA                     ; Restore the character
.38141b	c9 00		cmp #$00	check_break     CMP #0
.38141d	f0 18		beq $381437	                BEQ done
.38141f	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381421	f0 15		beq $381438	                BEQ flag_break          ; Yes: flag a break
.381423	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381425	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381428	b0 0d		bcs $381437	                BCS done                ; Stop storing - An error should ensue here...
.38142a	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38142e	e8		inx		                INX
.38142f	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381431	a9 00		lda #$00	                LDA #$00
.381433	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381437	60		rts		done            RTS
.381438					flag_break
.381438	e2 20		sep #$20	                SEP #$20        ; set A short
.38143a	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.38143c	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38143e	60		rts		                RTS
.38143f					KBD_GETC
.38143f	da		phx		                PHX
.381440	0b		phd		                PHD
.381441	08		php		                PHP
.381442	48		pha		                PHA             ; begin setdp macro
.381443	08		php		                PHP
.381444	c2 20		rep #$20	                REP #$20        ; set A long
.381446	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381449	5b		tcd		                TCD
.38144a	28		plp		                PLP
.38144b	68		pla		                PLA             ; end setdp macro
.38144c	e2 20		sep #$20	                SEP #$20        ; set A short
.38144e	c2 10		rep #$10	                REP #$10        ; set X long
.381450	58		cli		                CLI                     ; Make sure interrupts can happen
.381451	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381455	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381457	c9 60		cmp #$60	                CMP #KB_CREDITS
.381459	d0 0a		bne $381465	                BNE check_buffer        ; No: check the key buffer
.38145b	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.38145d	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381461	22 c8 13 39	jsl $3913c8	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381465	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381467	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381469	90 02		bcc $38146d	                BCC read_buff           ; Yes: a key is present, read it
.38146b	80 e4		bra $381451	                BRA get_wait            ; Otherwise, keep waiting
.38146d	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38146e	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381470	e8		inx		                INX                     ; And move to the next key
.381471	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381473	f0 07		beq $38147c	                BEQ reset_indexes       ; Yes: return to 0 position
.381475	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381477	58		cli		                CLI
.381478	28		plp		done            PLP                     ; Restore status and interrupts
.381479	2b		pld		                PLD
.38147a	fa		plx		                PLX
.38147b	6b		rtl		                RTL
.38147c	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.38147e	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381480	80 f6		bra $381478	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC                       ; clear the carry flag
.390401	fb		xce		                XCE                       ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END            ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	22 85 0f 39	jsl $390f85	                JSL INITRTC               ; Initialize the RTC
.390449	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044b	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044e	85 0c		sta $0c		                STA SCREENBEGIN
.390450	85 17		sta $17		                STA CURSORPOS
.390452	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390455	85 1f		sta $1f		                STA COLORPOS
.390457	e2 20		sep #$20	                SEP #$20        ; set A short
.390459	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.39045b	85 0e		sta $0e		                STA SCREENBEGIN+2
.39045d	85 19		sta $19		                STA CURSORPOS+2
.39045f	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.390461	85 21		sta $21		                STA COLORPOS+2
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 00		lda #$00	                LDA #$00
.390467	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39046a	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39046c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390470	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390472	8f 00 f1 af	sta $aff100	                STA $AFF100
.390476	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	c2 30		rep #$30	                REP #$30        ; set A&X long
.390484	a2 48 00	ldx #$0048	                LDX #72
.390487	86 0f		stx $0f		                STX COLS_VISIBLE
.390489	a0 34 00	ldy #$0034	                LDY #52
.39048c	84 13		sty $13		                STY LINES_VISIBLE
.39048e	a2 80 00	ldx #$0080	                LDX #128
.390491	86 11		stx $11		                STX COLS_PER_LINE
.390493	a0 40 00	ldy #$0040	                LDY #64
.390496	84 15		sty $15		                STY LINES_MAX
.390498	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.39049b	85 1e		sta $1e		                STA CURCOLOR
.39049d	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904a1	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a5	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a9	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904ad	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904b1	22 f6 0c 39	jsl $390cf6	                JSL INITMOUSEPOINTER
.3904b5	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b9	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904bd	22 cb 0c 39	jsl $390ccb	                JSL IINITFONTSET
.3904c1	22 b9 09 39	jsl $3909b9	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c5	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c8	22 ab 55 39	jsl $3955ab	                JSL UART_SELECT
.3904cc	22 17 56 39	jsl $395617	                JSL UART_INIT
.3904d0	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904d3	22 ab 55 39	jsl $3955ab	                JSL UART_SELECT
.3904d7	22 17 56 39	jsl $395617	                JSL UART_INIT
.3904db	a9 00 00	lda #$0000	                LDA #0
.3904de	22 38 10 38	jsl $381038	                JSL SETIN
.3904e2	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e6	c2 20		rep #$20	                REP #$20        ; set A long
.3904e8	a2 00 00	ldx #$0000	                LDX #0
.3904eb	a0 00 00	ldy #$0000	                LDY #0
.3904ee	22 da 08 39	jsl $3908da	                JSL ILOCATE
.3904f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f4					greet
.3904f4	48		pha		                PHA             ; begin setdbr macro
.3904f5	08		php		                PHP
.3904f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f8	a9 39		lda #$39	                LDA #`greet_msg
.3904fa	48		pha		                PHA
.3904fb	ab		plb		                PLB
.3904fc	28		plp		                PLP
.3904fd	68		pla		                PLA             ; end setdbr macro
.3904fe	a2 58 66	ldx #$6658	                LDX #<>greet_msg
.390501	22 90 06 39	jsl $390690	                JSL IPRINT       ; print the first line
.390505	22 e4 09 39	jsl $3909e4	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390509	48		pha		                PHA             ; begin setdp macro
.39050a	08		php		                PHP
.39050b	c2 20		rep #$20	                REP #$20        ; set A long
.39050d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390510	5b		tcd		                TCD
.390511	28		plp		                PLP
.390512	68		pla		                PLA             ; end setdp macro
.390513	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390517	e2 20		sep #$20	                SEP #$20        ; set A short
.390519	c2 10		rep #$10	                REP #$10        ; set X long
.39051b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39051d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390521	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390523	8f 00 f1 af	sta $aff100	                STA $AFF100
.390527	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390548	22 56 13 39	jsl $391356	          		 	JSL ILOOP_MS
.39054c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390552	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390553	e2 20		sep #$20	                SEP #$20        ; set A short
.390555	c2 10		rep #$10	                REP #$10        ; set X long
.390557	48		pha		                PHA             ; begin setdbr macro
.390558	08		php		                PHP
.390559	e2 20		sep #$20	                SEP #$20        ; set A short
.39055b	a9 39		lda #$39	                LDA #`greet_msg
.39055d	48		pha		                PHA
.39055e	ab		plb		                PLB
.39055f	28		plp		                PLP
.390560	68		pla		                PLA             ; end setdbr macro
.390561	a2 00 00	ldx #$0000	                LDX #0
.390564	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390568	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.39056c	e8		inx		                INX
.39056d	e0 00 10	cpx #$1000	                CPX #$1000
.390570	d0 f2		bne $390564	                BNE jmpcopy
.390572	22 8b 41 39	jsl $39418b	                JSL DOS_INIT          ; Initialize the "disc operating system"
.390576	22 06 5b 39	jsl $395b06	                JSL FDC_INIT
.39057a	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39057e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390580	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390582	f0 28		beq $3905ac	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390584	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390586	f0 0b		beq $390593	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390588	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39058a	f0 3a		beq $3905c6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.39058c	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390590	ea		nop		CREDIT_LOCK     NOP
.390591	80 fd		bra $390590	                BRA CREDIT_LOCK
.390593					BOOTSDC
.390593	e2 20		sep #$20	                SEP #$20        ; set A short
.390595	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.390597	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39059b	22 bc 41 39	jsl $3941bc	                JSL DOS_MOUNT         ; Mount the SDC
.39059f	90 06		bcc $3905a7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905a1	22 4d 43 39	jsl $39434d	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905a5	80 e5		bra $39058c	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905a7	a2 0f 6a	ldx #$6a0f	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905aa	80 39		bra $3905e5	                BRA PR_BOOT_ERROR
.3905ac					BOOTIDE
.3905ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ae	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905b0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905b4	22 bc 41 39	jsl $3941bc	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905b8	90 07		bcc $3905c1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905ba	22 4d 43 39	jsl $39434d	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905be	82 cb ff	brl $39058c	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c1	a2 2b 6a	ldx #$6a2b	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905c4	80 1f		bra $3905e5	                BRA PR_BOOT_ERROR
.3905c6	a2 74 6a	ldx #$6a74	BOOTFLOPPY      LDX #<>fdc_boot
.3905c9	22 90 06 39	jsl $390690	                JSL IPRINT
.3905cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3905cf	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905d1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d5	22 44 60 39	jsl $396044	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905d9	90 07		bcc $3905e2	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905db	22 4d 43 39	jsl $39434d	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905df	82 aa ff	brl $39058c	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905e2	a2 4e 6a	ldx #$6a4e	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905e5	22 90 06 39	jsl $390690	PR_BOOT_ERROR   JSL IPRINT
.3905e9	ea		nop		LOOP_FOREVER    NOP
.3905ea	80 fd		bra $3905e9	                BRA LOOP_FOREVER
.3905ec					IBREAK
.3905ec	48		pha		                PHA             ; begin setdp macro
.3905ed	08		php		                PHP
.3905ee	c2 20		rep #$20	                REP #$20        ; set A long
.3905f0	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905f3	5b		tcd		                TCD
.3905f4	28		plp		                PLP
.3905f5	68		pla		                PLA             ; end setdp macro
.3905f6	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905f7	8f 48 02 00	sta $000248	                STA CPUY
.3905fb	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905fc	8f 46 02 00	sta $000246	                STA CPUX
.390600	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390601	8f 44 02 00	sta $000244	                STA CPUA
.390605	68		pla		                PLA
.390606	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.39060a	e2 20		sep #$20	                SEP #$20        ; set A short
.39060c	68		pla		                PLA             ; Pull Data Bank (8 bits)
.39060d	8f 4e 02 00	sta $00024e	                STA CPUDBR
.390611	68		pla		                PLA             ; Pull Flags (8 bits)
.390612	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390616	c2 20		rep #$20	                REP #$20        ; set A long
.390618	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390619	8f 40 02 00	sta $000240	                STA CPUPC
.39061d	e2 20		sep #$20	                SEP #$20        ; set A short
.39061f	68		pla		                PLA             ; Pull Program Bank (8 bits)
.390620	8f 42 02 00	sta $000242	                STA CPUPBR
.390624	c2 20		rep #$20	                REP #$20        ; set A long
.390626	3b		tsc		                TSA             ; Get the stack
.390627	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.39062b	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39062e	1b		tcs		                TAS
.39062f	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390633					IREADY
.390633	48		pha		                PHA             ; begin setdbr macro
.390634	08		php		                PHP
.390635	e2 20		sep #$20	                SEP #$20        ; set A short
.390637	a9 39		lda #$39	                LDA #`ready_msg
.390639	48		pha		                PHA
.39063a	ab		plb		                PLB
.39063b	28		plp		                PLP
.39063c	68		pla		                PLA             ; end setdbr macro
.39063d	e2 20		sep #$20	                SEP #$20        ; set A short
.39063f	a2 8c 6a	ldx #$6a8c	                LDX #<>ready_msg
.390642	22 90 06 39	jsl $390690	                JSL IPRINT
.390646					IREADYWAIT
.390646	22 60 06 39	jsl $390660	                JSL IGETCHE
.39064a	80 fa		bra $390646	                BRA IREADYWAIT
.39064c	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.39064d	db		stp		IRETURN         STP
.39064e	08		php		ISETIN          PHP
.39064f	e2 20		sep #$20	                SEP #$20        ; set A short
.390651	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390655	28		plp		                PLP
.390656	6b		rtl		                RTL
.390657	08		php		ISETOUT         PHP
.390658	e2 20		sep #$20	                SEP #$20        ; set A short
.39065a	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39065e	28		plp		                PLP
.39065f	6b		rtl		                RTL
.390660	22 69 06 39	jsl $390669	IGETCHE         JSL IGETCHW
.390664	22 b0 06 39	jsl $3906b0	                JSL IPUTC
.390668	6b		rtl		                RTL
.390669					IGETCHW
.390669	08		php		                PHP
.39066a	e2 20		sep #$20	                SEP #$20        ; set A short
.39066c	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390670	f0 17		beq $390689	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390672	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390674	f0 09		beq $39067f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390676	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390678	f0 05		beq $39067f	                BEQ getc_uart       ; Yes: handle reading from the UART
.39067a	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39067c	28		plp		                PLP
.39067d	38		sec		                SEC                 ; And return carry set
.39067e	6b		rtl		                RTL
.39067f	22 ab 55 39	jsl $3955ab	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390683	22 5f 56 39	jsl $39565f	                JSL UART_GETC       ; Get the charater from the COM port
.390687	80 04		bra $39068d	                BRA done
.390689	22 3f 14 38	jsl $38143f	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39068d	28		plp		done            PLP
.39068e	18		clc		                CLC                 ; Return carry clear for valid data
.39068f	6b		rtl		                RTL
.390690	22 99 06 39	jsl $390699	IPRINT          JSL IPUTS
.390694	22 d6 07 39	jsl $3907d6	                JSL IPRINTCR
.390698	6b		rtl		                RTL
.390699	48		pha		IPUTS           PHA
.39069a	08		php		                PHP
.39069b	e2 20		sep #$20	                SEP #$20        ; set A short
.39069d	c2 10		rep #$10	                REP #$10        ; set X long
.39069f	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906a2	f0 08		beq $3906ac	                BEQ iputs_done
.3906a4	22 b0 06 39	jsl $3906b0	iputs2          JSL IPUTC
.3906a8	e8		inx		iputs3          INX
.3906a9	4c 9f 06	jmp $39069f	                JMP iputs1
.3906ac	e8		inx		iputs_done      INX
.3906ad	28		plp		                PLP
.3906ae	68		pla		                PLA
.3906af	6b		rtl		                RTL
.3906b0					IPUTC
.3906b0	da		phx		                PHX
.3906b1	5a		phy		                PHY
.3906b2	0b		phd		                PHD
.3906b3	8b		phb		                PHB
.3906b4	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3906b5	48		pha		                PHA             ; begin setdp macro
.3906b6	08		php		                PHP
.3906b7	c2 20		rep #$20	                REP #$20        ; set A long
.3906b9	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906bc	5b		tcd		                TCD
.3906bd	28		plp		                PLP
.3906be	68		pla		                PLA             ; end setdp macro
.3906bf	48		pha		                PHA             ; begin setdbr macro
.3906c0	08		php		                PHP
.3906c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c3	a9 00		lda #$00	                LDA #0
.3906c5	48		pha		                PHA
.3906c6	ab		plb		                PLB
.3906c7	28		plp		                PLP
.3906c8	68		pla		                PLA             ; end setdbr macro
.3906c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906cb	c2 10		rep #$10	                REP #$10        ; set X long
.3906cd	48		pha		                PHA                 ; Save the character to print
.3906ce	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906d2	f0 16		beq $3906ea	                BEQ putc_screen     ; If it's 0: print to the screen
.3906d4	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906d6	f0 07		beq $3906df	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906d8	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906da	f0 03		beq $3906df	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906dc	68		pla		                PLA                 ; Otherwise, just exit
.3906dd	80 4f		bra $39072e	                BRA done
.3906df	22 ab 55 39	jsl $3955ab	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3906e3	68		pla		                PLA                 ; Recover the character to send
.3906e4	22 80 56 39	jsl $395680	                JSL UART_PUTC       ; Send the character
.3906e8	80 44		bra $39072e	                BRA done
.3906ea	68		pla		putc_screen     PLA                 ; Get the character to print
.3906eb	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906ed	f0 61		beq $390750	                BEQ go_down
.3906ef	c9 20		cmp #$20	                CMP #$20
.3906f1	90 19		bcc $39070c	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906f3	c9 7f		cmp #$7f	                CMP #$7F
.3906f5	f0 3d		beq $390734	                BEQ do_del
.3906f7	b0 02		bcs $3906fb	                BCS check_A0        ; [$20..$7E]: print it
.3906f9	80 29		bra $390724	                BRA printc
.3906fb	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3906fd	90 02		bcc $390701	                BCC check_ctrl1
.3906ff	80 23		bra $390724	                BRA printc          ; [$A0..$FF]: print it
.390701	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.390703	f0 4b		beq $390750	                BEQ go_down         ; ... move the cursor down one row
.390705	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390707	f0 59		beq $390762	                BEQ go_left         ; ... move the cursor left one column
.390709	4c 2e 07	jmp $39072e	                JMP done
.39070c	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.39070e	f0 58		beq $390768	                BEQ do_TAB          ; ... move to the next TAB stop
.390710	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390712	f0 2c		beq $390740	                BEQ backspace       ; ... move the cursor back and replace with a space
.390714	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390716	f0 32		beq $39074a	                BEQ do_cr           ; ... move cursor down and to the first column
.390718	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.39071a	f0 3a		beq $390756	                BEQ go_up           ; ... move the cursor up one row
.39071c	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39071e	f0 3c		beq $39075c	                BEQ go_right        ; ... move the cursor right one column
.390720	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390722	f0 16		beq $39073a	                BEQ do_ins          ; ... insert a space
.390724	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390726	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390728	87 1f		sta [$1f]	                STA [COLORPOS]
.39072a	22 36 08 39	jsl $390836	                JSL ICSRRIGHT       ; And advance the cursor
.39072e	28		plp		done            PLP
.39072f	ab		plb		                PLB
.390730	2b		pld		                PLD
.390731	7a		ply		                PLY
.390732	fa		plx		                PLX
.390733	6b		rtl		                RTL
.390734	22 8f 07 39	jsl $39078f	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390738	80 f4		bra $39072e	                BRA done
.39073a	22 b2 07 39	jsl $3907b2	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39073e	80 ee		bra $39072e	                BRA done
.390740	22 69 08 39	jsl $390869	backspace       JSL ICSRLEFT
.390744	22 8f 07 39	jsl $39078f	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390748	80 e4		bra $39072e	                BRA done
.39074a	22 d6 07 39	jsl $3907d6	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39074e	80 de		bra $39072e	                BRA done
.390750	22 b5 08 39	jsl $3908b5	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390754	80 d8		bra $39072e	                BRA done
.390756	22 8f 08 39	jsl $39088f	go_up           JSL ICSRUP          ; Move the cursor up one line
.39075a	80 d2		bra $39072e	                BRA done
.39075c	22 36 08 39	jsl $390836	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390760	80 cc		bra $39072e	                BRA done
.390762	22 69 08 39	jsl $390869	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390766	80 c6		bra $39072e	                BRA done
.390768					do_TAB
.390768	c2 20		rep #$20	                REP #$20        ; set A long
.39076a	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39076c	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39076f	18		clc		                CLC
.390770	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390773	aa		tax		                TAX
.390774	a4 1c		ldy $1c		                LDY CURSORY
.390776	e2 20		sep #$20	                SEP #$20        ; set A short
.390778	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39077a	90 04		bcc $390780	                BCC check_row       ; Yes: check the row
.39077c	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39077f	c8		iny		                INY                 ; ... and the next row
.390780	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390782	90 05		bcc $390789	                BCC do_locate       ; Yes: reposition the cursor
.390784	22 26 09 39	jsl $390926	                JSL ISCROLLUP       ; No: scroll the screen
.390788	88		dey		                DEY                 ; And set the row to the last one
.390789	22 da 08 39	jsl $3908da	do_locate       JSL ILOCATE         ; Set the cursor position
.39078d	80 9f		bra $39072e	                BRA done
.39078f	da		phx		SCRSHIFTLL      PHX
.390790	5a		phy		                PHY
.390791	48		pha		                PHA
.390792	08		php		                PHP
.390793	48		pha		                PHA             ; begin setdp macro
.390794	08		php		                PHP
.390795	c2 20		rep #$20	                REP #$20        ; set A long
.390797	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39079a	5b		tcd		                TCD
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA             ; end setdp macro
.39079d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39079f	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907a1	a8		tay		                TAY                 ; Set it as the destination
.3907a2	aa		tax		                TAX
.3907a3	e8		inx		                INX                 ; And set the next cell as the source
.3907a4	38		sec		                SEC                 ; Calculate the length of the block to move
.3907a5	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.3907a8	e5 1a		sbc $1a		                SBC CURSORX
.3907aa	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907ad	28		plp		                PLP
.3907ae	68		pla		                PLA
.3907af	7a		ply		                PLY
.3907b0	fa		plx		                PLX
.3907b1	6b		rtl		                RTL
.3907b2	da		phx		SCRSHIFTLR      PHX
.3907b3	48		pha		                PHA
.3907b4	08		php		                PHP
.3907b5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907b7	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907b9	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3907bc	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3907bf	a8		tay		                TAY                 ; And set that as the destination address
.3907c0	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3907c1	aa		tax		                TAX                 ; And make it the source
.3907c2	38		sec		                SEC                 ; Calculate the length of the block to move
.3907c3	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.3907c6	e5 1a		sbc $1a		                SBC CURSORX
.3907c8	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3907cd	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907cf	87 17		sta [$17]	                STA [CURSORPOS]
.3907d1	28		plp		                PLP
.3907d2	68		pla		                PLA
.3907d3	fa		plx		                PLX
.3907d4	6b		rtl		                RTL
.3907d5					IPUTB
.3907d5	6b		rtl		                RTL
.3907d6					IPRINTCR
.3907d6	da		phx		                PHX
.3907d7	5a		phy		                PHY
.3907d8	8b		phb		                PHB
.3907d9	0b		phd		                PHD
.3907da	08		php		                PHP
.3907db	48		pha		                PHA             ; begin setdbr macro
.3907dc	08		php		                PHP
.3907dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3907df	a9 00		lda #$00	                LDA #0
.3907e1	48		pha		                PHA
.3907e2	ab		plb		                PLB
.3907e3	28		plp		                PLP
.3907e4	68		pla		                PLA             ; end setdbr macro
.3907e5	48		pha		                PHA             ; begin setdp macro
.3907e6	08		php		                PHP
.3907e7	c2 20		rep #$20	                REP #$20        ; set A long
.3907e9	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ec	5b		tcd		                TCD
.3907ed	28		plp		                PLP
.3907ee	68		pla		                PLA             ; end setdp macro
.3907ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3907f1	c2 10		rep #$10	                REP #$10        ; set X long
.3907f3	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907f7	f0 1c		beq $390815	                BEQ scr_printcr
.3907f9	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907fb	f0 06		beq $390803	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907fd	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907ff	f0 02		beq $390803	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390801	80 1c		bra $39081f	                BRA done
.390803	22 ab 55 39	jsl $3955ab	uart_printcr    JSL UART_SELECT
.390807	a9 0d		lda #$0d	                LDA #CHAR_CR
.390809	22 b0 06 39	jsl $3906b0	                JSL IPUTC
.39080d	a9 0a		lda #$0a	                LDA #CHAR_LF
.39080f	22 b0 06 39	jsl $3906b0	                JSL IPUTC
.390813	80 0a		bra $39081f	                BRA done
.390815	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390818	a4 1c		ldy $1c		                LDY CURSORY
.39081a	c8		iny		                INY
.39081b	22 da 08 39	jsl $3908da	                JSL ILOCATE
.39081f	28		plp		done            PLP
.390820	2b		pld		                PLD
.390821	ab		plb		                PLB
.390822	7a		ply		                PLY
.390823	fa		plx		                PLX
.390824	6b		rtl		                RTL
.390825	da		phx		ICSRHOME        PHX
.390826	5a		phy		                PHY
.390827	08		php		                PHP
.390828	a2 00 00	ldx #$0000	                LDX #0
.39082b	a0 00 00	ldy #$0000	                LDY #0
.39082e	22 da 08 39	jsl $3908da	                JSL ILOCATE
.390832	28		plp		                PLP
.390833	7a		ply		                PLY
.390834	fa		plx		                PLX
.390835	6b		rtl		                RTL
.390836	da		phx		ICSRRIGHT       PHX
.390837	5a		phy		                PHY
.390838	48		pha		                PHA
.390839	0b		phd		                PHD
.39083a	08		php		                PHP
.39083b	c2 20		rep #$20	                REP #$20        ; set A long
.39083d	c2 10		rep #$10	                REP #$10        ; set X long
.39083f	48		pha		                PHA             ; begin setdp macro
.390840	08		php		                PHP
.390841	c2 20		rep #$20	                REP #$20        ; set A long
.390843	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390846	5b		tcd		                TCD
.390847	28		plp		                PLP
.390848	68		pla		                PLA             ; end setdp macro
.390849	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39084b	e8		inx		                INX
.39084c	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39084e	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390850	90 0d		bcc $39085f	                BCC icsrright_nowrap  ; No: just set the position
.390852	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390855	c8		iny		                INY                   ; And move to the next row
.390856	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390858	90 05		bcc $39085f	                BCC icsrright_nowrap  ; No: just set the position
.39085a	88		dey		                DEY                   ; Yes: lock to the last row
.39085b	22 26 09 39	jsl $390926	                JSL ISCROLLUP         ; But scroll the screen up
.39085f					icsrright_nowrap
.39085f	22 da 08 39	jsl $3908da	                JSL ILOCATE           ; Set the cursor position
.390863	28		plp		                PLP
.390864	2b		pld		                PLD
.390865	68		pla		                PLA
.390866	7a		ply		                PLY
.390867	fa		plx		                PLX
.390868	6b		rtl		                RTL
.390869					ICSRLEFT
.390869	da		phx		                PHX
.39086a	5a		phy		                PHY
.39086b	48		pha		                PHA
.39086c	0b		phd		                PHD
.39086d	08		php		                PHP
.39086e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390870	48		pha		                PHA             ; begin setdp macro
.390871	08		php		                PHP
.390872	c2 20		rep #$20	                REP #$20        ; set A long
.390874	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390877	5b		tcd		                TCD
.390878	28		plp		                PLP
.390879	68		pla		                PLA             ; end setdp macro
.39087a	a5 1a		lda $1a		                LDA CURSORX
.39087c	f0 0b		beq $390889	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39087e	a6 1a		ldx $1a		                LDX CURSORX
.390880	ca		dex		                DEX
.390881	86 1a		stx $1a		                STX CURSORX
.390883	a4 1c		ldy $1c		                LDY CURSORY
.390885	22 da 08 39	jsl $3908da	                JSL ILOCATE
.390889					icsrleft_done_already_zero
.390889	28		plp		                PLP
.39088a	2b		pld		                PLD
.39088b	68		pla		                PLA
.39088c	7a		ply		                PLY
.39088d	fa		plx		                PLX
.39088e	6b		rtl		                RTL
.39088f					ICSRUP
.39088f	da		phx		                PHX
.390890	5a		phy		                PHY
.390891	48		pha		                PHA
.390892	0b		phd		                PHD
.390893	08		php		                PHP
.390894	c2 30		rep #$30	                REP #$30        ; set A&X long
.390896	48		pha		                PHA             ; begin setdp macro
.390897	08		php		                PHP
.390898	c2 20		rep #$20	                REP #$20        ; set A long
.39089a	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39089d	5b		tcd		                TCD
.39089e	28		plp		                PLP
.39089f	68		pla		                PLA             ; end setdp macro
.3908a0	a5 1c		lda $1c		                LDA CURSORY
.3908a2	f0 0b		beq $3908af	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3908a4	a4 1c		ldy $1c		                LDY CURSORY
.3908a6	88		dey		                DEY
.3908a7	84 1c		sty $1c		                STY CURSORY
.3908a9	a6 1a		ldx $1a		                LDX CURSORX
.3908ab	22 da 08 39	jsl $3908da	                JSL ILOCATE
.3908af					isrup_done_already_zero
.3908af	28		plp		                PLP
.3908b0	2b		pld		                PLD
.3908b1	68		pla		                PLA
.3908b2	7a		ply		                PLY
.3908b3	fa		plx		                PLX
.3908b4	6b		rtl		                RTL
.3908b5	da		phx		ICSRDOWN        PHX
.3908b6	5a		phy		                PHY
.3908b7	0b		phd		                PHD
.3908b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ba	48		pha		                PHA             ; begin setdp macro
.3908bb	08		php		                PHP
.3908bc	c2 20		rep #$20	                REP #$20        ; set A long
.3908be	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908c1	5b		tcd		                TCD
.3908c2	28		plp		                PLP
.3908c3	68		pla		                PLA             ; end setdp macro
.3908c4	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3908c6	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3908c8	c8		iny		                INY
.3908c9	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3908cb	90 05		bcc $3908d2	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3908cd	88		dey		                DEY                         ; Yes: go back to the last row
.3908ce	22 26 09 39	jsl $390926	                JSL ISCROLLUP               ; But scroll the screen up
.3908d2					icsrdown_noscroll
.3908d2	22 da 08 39	jsl $3908da	                JSL ILOCATE                 ; And set the cursor position
.3908d6	2b		pld		                PLD
.3908d7	7a		ply		                PLY
.3908d8	fa		plx		                PLX
.3908d9	6b		rtl		                RTL
.3908da	48		pha		ILOCATE         PHA
.3908db	0b		phd		                PHD
.3908dc	08		php		                PHP
.3908dd	48		pha		                PHA             ; begin setdp macro
.3908de	08		php		                PHP
.3908df	c2 20		rep #$20	                REP #$20        ; set A long
.3908e1	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908e4	5b		tcd		                TCD
.3908e5	28		plp		                PLP
.3908e6	68		pla		                PLA             ; end setdp macro
.3908e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908e9					ilocate_scroll
.3908e9	c4 13		cpy $13		                CPY LINES_VISIBLE
.3908eb	90 07		bcc $3908f4	                BCC ilocate_scrolldone
.3908ed	22 26 09 39	jsl $390926	                JSL ISCROLLUP
.3908f1	88		dey		                DEY
.3908f2	80 f5		bra $3908e9	                BRA ilocate_scroll
.3908f4					ilocate_scrolldone
.3908f4	86 1a		stx $1a		                STX CURSORX
.3908f6	84 1c		sty $1c		                STY CURSORY
.3908f8	a5 0c		lda $0c		                LDA SCREENBEGIN
.3908fa					ilocate_row
.3908fa	c0 00 00	cpy #$0000	                CPY #$0
.3908fd	f0 08		beq $390907	                BEQ ilocate_right
.3908ff	18		clc		ilocate_down    CLC
.390900	65 11		adc $11		                ADC COLS_PER_LINE
.390902	88		dey		                DEY
.390903	f0 02		beq $390907	                BEQ ilocate_right
.390905	80 f8		bra $3908ff	                BRA ilocate_down
.390907	18		clc		ilocate_right   CLC
.390908	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.39090a	85 17		sta $17		                STA CURSORPOS
.39090c	a4 1c		ldy $1c		                LDY CURSORY
.39090e	98		tya		                TYA
.39090f	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390913	8a		txa		                TXA
.390914	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390918	c2 20		rep #$20	                REP #$20        ; set A long
.39091a	18		clc		                CLC
.39091b	a5 17		lda $17		                LDA CURSORPOS
.39091d	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390920	85 1f		sta $1f		                STA COLORPOS
.390922	28		plp		ilocate_done    PLP
.390923	2b		pld		                PLD
.390924	68		pla		                PLA
.390925	6b		rtl		                RTL
.390926					ISCROLLUP
.390926	48		pha		                PHA
.390927	da		phx		                PHX
.390928	5a		phy		                PHY
.390929	8b		phb		                PHB
.39092a	08		php		                PHP
.39092b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39092d	18		clc		                CLC
.39092e	a0 00 a0	ldy #$a000	                LDY #$A000
.390931	a2 80 a0	ldx #$a080	                LDX #$A080
.390934	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390937	54 af af	mvn $af,$af	                MVN $AF,$AF
.39093a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39093c	a0 00 c0	ldy #$c000	                LDY #$C000
.39093f	a2 80 c0	ldx #$c080	                LDX #$C080
.390942	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390945	54 af af	mvn $af,$af	                MVN $AF,$AF
.390948	28		plp		                PLP
.390949	ab		plb		                PLB
.39094a	7a		ply		                PLY
.39094b	fa		plx		                PLX
.39094c	68		pla		                PLA
.39094d	6b		rtl		                RTL
.39094e	08		php		IPRINTH         PHP
.39094f	48		pha		                PHA
.390950					iprinth1
.390950	e2 20		sep #$20	                SEP #$20        ; set A short
.390952	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390955	4a		lsr a		                LSR
.390956	4a		lsr a		                LSR
.390957	4a		lsr a		                LSR
.390958	4a		lsr a		                LSR
.390959	22 a8 09 39	jsl $3909a8	                JSL iprint_digit
.39095d	bd 00 00	lda $0000,x	                LDA #0,b,x
.390960	22 a8 09 39	jsl $3909a8	                JSL iprint_digit
.390964	ca		dex		                DEX
.390965	88		dey		                DEY
.390966	d0 e8		bne $390950	                BNE iprinth1
.390968	68		pla		                PLA
.390969	28		plp		                PLP
.39096a	6b		rtl		                RTL
.39096b					IPRINTAH
.39096b	48		pha		                PHA
.39096c	08		php		                PHP
.39096d	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390971	08		php		                PHP                   ; Get the processor status into A
.390972	e2 20		sep #$20	                SEP #$20        ; set A short
.390974	c2 10		rep #$10	                REP #$10        ; set X long
.390976	68		pla		                PLA
.390977	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390979	c9 20		cmp #$20	                CMP #%00100000
.39097b	f0 14		beq $390991	                BEQ eight_bit
.39097d	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390981	4a		lsr a		                LSR A
.390982	4a		lsr a		                LSR A
.390983	4a		lsr a		                LSR A
.390984	4a		lsr a		                LSR A
.390985	22 a8 09 39	jsl $3909a8	                JSL iprint_digit      ; And print it
.390989	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.39098d	22 a8 09 39	jsl $3909a8	                JSL iprint_digit      ; And print it
.390991	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390995	4a		lsr a		                LSR A
.390996	4a		lsr a		                LSR A
.390997	4a		lsr a		                LSR A
.390998	4a		lsr a		                LSR A
.390999	22 a8 09 39	jsl $3909a8	                JSL iprint_digit      ; And print it
.39099d	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.3909a1	22 a8 09 39	jsl $3909a8	                JSL iprint_digit      ; And print it
.3909a5	28		plp		                PLP
.3909a6	68		pla		                PLA
.3909a7	6b		rtl		                RTL
.3909a8	da		phx		iprint_digit    PHX
.3909a9	c2 20		rep #$20	                REP #$20        ; set A long
.3909ab	29 0f 00	and #$000f	                AND #$0F
.3909ae	aa		tax		                TAX
.3909af	bf a0 6a 39	lda $396aa0,x	                LDA hex_digits,X
.3909b3	22 b0 06 39	jsl $3906b0	                JSL IPUTC       ; Print the digit
.3909b7	fa		plx		                PLX
.3909b8	6b		rtl		                RTL
.3909b9	48		pha		ICLRSCREEN	    PHA
.3909ba	da		phx		                PHX
.3909bb	08		php		                PHP
.3909bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3909be	c2 10		rep #$10	                REP #$10        ; set X long
.3909c0	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.3909c3	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.3909c5	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.3909c9	e8		inx		                inx
.3909ca	e0 00 20	cpx #$2000	                cpx #$2000
.3909cd	d0 f6		bne $3909c5	                bne iclearloop0
.3909cf	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.3909d2	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.3909d6	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.3909da	e8		inx		                inx
.3909db	e0 00 20	cpx #$2000	                cpx #$2000
.3909de	d0 f6		bne $3909d6	                bne iclearloop1
.3909e0	28		plp		                PLP
.3909e1	fa		plx		                PLX
.3909e2	68		pla		                PLA
.3909e3	6b		rtl		                RTL
.3909e4	48		pha		ICOLORFLAG      PHA
.3909e5	da		phx		                PHX
.3909e6	08		php		                PHP
.3909e7	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3909e9	a2 00		ldx #$00	                LDX #$00
.3909eb	bf 9c 67 39	lda $39679c,x	iclearloop2	    LDA @lgreet_clr_line1,x
.3909ef	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.3909f3	bf c6 67 39	lda $3967c6,x	                LDA @lgreet_clr_line2,x
.3909f7	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.3909fb	bf f0 67 39	lda $3967f0,x	                LDA @lgreet_clr_line3,x
.3909ff	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390a03	bf 1a 68 39	lda $39681a,x	                LDA @lgreet_clr_line4,x
.390a07	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390a0b	bf 44 68 39	lda $396844,x	                LDA @lgreet_clr_line5,x
.390a0f	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390a13	e8		inx		                inx
.390a14	e0 2a		cpx #$2a	                cpx #42
.390a16	d0 d3		bne $3909eb	                bne iclearloop2
.390a18	28		plp		                PLP
.390a19	fa		plx		                PLX
.390a1a	68		pla		                PLA
.390a1b	6b		rtl		                RTL
.390a1c	0b		phd		IINITCHLUT		  PHD
.390a1d	08		php		                PHP
.390a1e	48		pha		                PHA
.390a1f	da		phx		                PHX
.390a20	e2 20		sep #$20	                SEP #$20        ; set A short
.390a22	e2 10		sep #$10	                SEP #$10        ; set X short
.390a24	a2 00		ldx #$00					        LDX	#$00
.390a26	bf 6e 68 39	lda $39686e,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390a2a	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a2e	e8		inx		                inx
.390a2f	e0 40		cpx #$40	                cpx #$40
.390a31	d0 f3		bne $390a26	                bne lutinitloop0
.390a33	a2 00		ldx #$00	                LDX	#$00
.390a35	bf ae 68 39	lda $3968ae,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390a39	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a3d	e8		inx		                INX
.390a3e	e0 40		cpx #$40	                CPX #$40
.390a40	d0 f3		bne $390a35	                bne lutinitloop1
.390a42	c2 20		rep #$20	                REP #$20        ; set A long
.390a44	c2 10		rep #$10	                REP #$10        ; set X long
.390a46	fa		plx		                PLX
.390a47	68		pla		                PLA
.390a48	28		plp		                PLP
.390a49	2b		pld		                PLD
.390a4a	6b		rtl		                RTL
.390a4b					IINITGAMMATABLE
.390a4b	e2 20		sep #$20	                SEP #$20        ; set A short
.390a4d	c2 10		rep #$10	                REP #$10        ; set X long
.390a4f	a2 00 00	ldx #$0000	                ldx #$0000
.390a52	bf 00 6f 39	lda $396f00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a56	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a5a	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a5e	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a62	e8		inx		                inx
.390a63	e0 00 01	cpx #$0100	                cpx #$0100
.390a66	d0 ea		bne $390a52	                bne initgammaloop
.390a68	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a6a	6b		rtl		                RTL
.390a6b	48		pha		IINITALLLUT     PHA
.390a6c	da		phx		                PHX
.390a6d	a2 00 00	ldx #$0000	                LDX #$0000
.390a70	e2 20		sep #$20	                SEP #$20        ; set A short
.390a72	a9 00		lda #$00	                LDA #$00
.390a74	85 0a		sta $0a		                STA $0A     ; Temp Location
.390a76					iinit_lut_loop
.390a76	86 02		stx $02		                STX $02
.390a78	a6 0a		ldx $0a		                LDX $0A
.390a7a	bf 00 6e 39	lda $396e00,x	                LDA GAMMA_2_2_Tbl, x
.390a7e	49 55		eor #$55	                EOR  #$55
.390a80	a6 02		ldx $02		                LDX $02
.390a82	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a86	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a8a	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a8e	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a92	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a96	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a9a	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a9e	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aa2	e8		inx		                inx
.390aa3	86 02		stx $02		                STX $02
.390aa5	a6 0a		ldx $0a		                LDX $0A
.390aa7	bf 00 70 39	lda $397000,x	                LDA RANDOM_LUT_Tbl, x
.390aab	a6 02		ldx $02		                LDX $02
.390aad	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ab1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ab5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ab9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390abd	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ac1	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ac5	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ac9	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390acd	e8		inx		                inx
.390ace	86 02		stx $02		                STX $02
.390ad0	a6 0a		ldx $0a		                LDX $0A
.390ad2	bf 00 6f 39	lda $396f00,x	                LDA GAMMA_1_8_Tbl, x
.390ad6	49 aa		eor #$aa	                EOR  #$AA
.390ad8	a6 02		ldx $02		                LDX $02
.390ada	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ade	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ae2	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ae6	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390aea	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390aee	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390af2	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390af6	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390afa	e8		inx		                inx
.390afb	a9 ff		lda #$ff	                LDA #$FF
.390afd	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b01	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b05	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b09	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b0d	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b11	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b15	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b19	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b1d	e6 0a		inc $0a		                inc $0A
.390b1f	e8		inx		                inx
.390b20	e0 00 04	cpx #$0400	                cpx #$0400
.390b23	f0 03		beq $390b28	                beq iinit_lut_exit
.390b25	82 4e ff	brl $390a76	                brl iinit_lut_loop
.390b28					iinit_lut_exit
.390b28	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b2a	fa		plx		                PLX
.390b2b	68		pla		                PLA
.390b2c	6b		rtl		                RTL
.390b2d	48		pha		IINITVKYTXTMODE PHA
.390b2e	e2 20		sep #$20	                SEP #$20        ; set A short
.390b30	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390b32	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b36	a9 20		lda #$20	                LDA #$20
.390b38	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b3c	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b40	a9 00		lda #$00	                LDA #$00
.390b42	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b46	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390b48	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b4c	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390b4e	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b52	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b54	68		pla		                PLA
.390b55	6b		rtl		                RTL
.390b56					IINITVKYGRPMODE
.390b56	48		pha		                PHA
.390b57	e2 20		sep #$20	                SEP #$20        ; set A short
.390b59	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b5b	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390b5f	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390b61	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390b65	a9 c0		lda #$c0	                LDA #$C0
.390b67	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390b6b	a9 00		lda #$00	                LDA #$00
.390b6d	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390b71	a9 80		lda #$80	                LDA #$80
.390b73	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390b77	a9 02		lda #$02	                LDA #$02
.390b79	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b7d	a9 e0		lda #$e0	                LDA #$E0
.390b7f	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390b83	a9 01		lda #$01	                LDA #$01
.390b85	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390b89	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b8b	68		pla		                PLA
.390b8c	6b		rtl		                RTL
.390b8d					IINITTILEMODE
.390b8d	6b		rtl		                RTL
.390b8e	48		pha		IINITSPRITE     PHA
.390b8f	e2 20		sep #$20	                SEP #$20        ; set A short
.390b91	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b93	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b97	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b9b	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b9f	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390ba3	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390ba7	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390bab	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390baf	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390bb3	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390bb7	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390bbb	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390bbf	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390bc3	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390bc7	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390bcb	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390bcf	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390bd3	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390bd7	a9 09		lda #$09	                LDA #$09
.390bd9	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390bdd	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390be1	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390be5	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390be9	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390bed	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390bf1	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390bf5	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390bf9	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390bfd	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390c01	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390c05	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390c09	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390c0d	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390c11	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390c15	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390c19	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390c1d	a9 00		lda #$00	                LDA #$00
.390c1f	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390c23	a9 04		lda #$04	                LDA #$04
.390c25	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390c29	a9 08		lda #$08	                LDA #$08
.390c2b	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390c2f	a9 0c		lda #$0c	                LDA #$0C
.390c31	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390c35	a9 10		lda #$10	                LDA #$10
.390c37	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390c3b	a9 14		lda #$14	                LDA #$14
.390c3d	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390c41	a9 18		lda #$18	                LDA #$18
.390c43	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390c47	a9 1c		lda #$1c	                LDA #$1C
.390c49	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390c4d	a9 20		lda #$20	                LDA #$20
.390c4f	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390c53	a9 24		lda #$24	                LDA #$24
.390c55	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390c59	a9 28		lda #$28	                LDA #$28
.390c5b	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390c5f	a9 2c		lda #$2c	                LDA #$2C
.390c61	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390c65	a9 30		lda #$30	                LDA #$30
.390c67	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390c6b	a9 34		lda #$34	                LDA #$34
.390c6d	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390c71	a9 38		lda #$38	                LDA #$38
.390c73	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390c77	a9 3c		lda #$3c	                LDA #$3C
.390c79	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c7d	a9 40		lda #$40	                LDA #$40
.390c7f	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390c83	a9 00		lda #$00	                LDA #$00
.390c85	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390c89	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390c8d	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390c91	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c95	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c99	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c9d	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390ca1	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390ca5	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390ca9	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390cad	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390cb1	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390cb5	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390cb9	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390cbd	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390cc1	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390cc5	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390cc9	68		pla		                PLA
.390cca	6b		rtl		                RTL
.390ccb					IINITFONTSET
.390ccb	e2 20		sep #$20	                SEP #$20        ; set A short
.390ccd	c2 10		rep #$10	                REP #$10        ; set X long
.390ccf	a2 00 00	ldx #$0000	                LDX #$0000
.390cd2					initFontsetbranch0
.390cd2	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390cd6	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390cda	e8		inx		                INX
.390cdb	e0 00 08	cpx #$0800	                CPX #$0800
.390cde	d0 f2		bne $390cd2	                BNE initFontsetbranch0
.390ce0	ea		nop		                NOP
.390ce1	a2 00 00	ldx #$0000	                LDX #$0000
.390ce4					initFontsetbranch1
.390ce4	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390ce8	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390cec	e8		inx		                INX
.390ced	e0 00 08	cpx #$0800	                CPX #$0800
.390cf0	d0 f2		bne $390ce4	                BNE initFontsetbranch1
.390cf2	ea		nop		                NOP
.390cf3	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cf5	6b		rtl		                RTL
.390cf6					INITMOUSEPOINTER
.390cf6	e2 20		sep #$20	                SEP #$20        ; set A short
.390cf8	c2 10		rep #$10	                REP #$10        ; set X long
.390cfa	a2 00 00	ldx #$0000	                LDX #$0000
.390cfd					FILL_MOUSE_MARKER
.390cfd	bf 00 71 39	lda $397100,x	                LDA @lMOUSE_POINTER_PTR,X
.390d01	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390d05	e8		inx		                INX
.390d06	e0 00 01	cpx #$0100	                CPX #$0100
.390d09	d0 f2		bne $390cfd	                BNE FILL_MOUSE_MARKER
.390d0b	ea		nop		                nop
.390d0c	a9 01		lda #$01	                LDA #$01
.390d0e	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390d12	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d14	6b		rtl		                RTL
.390d15	48		pha		IINITCURSOR     PHA
.390d16	e2 20		sep #$20	                SEP #$20        ; set A short
.390d18	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390d1a	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390d1e	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390d20	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390d24	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d26	a9 00 00	lda #$0000	                LDA #$0000;
.390d29	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390d2d	a9 06 00	lda #$0006	                LDA #$0006;
.390d30	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390d34	68		pla		                PLA
.390d35	6b		rtl		                RTL
.390d36	0b		phd		IINITSUPERIO	  PHD
.390d37	08		php		                PHP
.390d38	48		pha		                PHA
.390d39	e2 20		sep #$20	                SEP #$20        ; set A short
.390d3b	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d3d	8f 23 11 af	sta $af1123	                STA GP10_REG
.390d41	af 23 11 af	lda $af1123	                LDA GP10_REG
.390d45	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d47	8f 24 11 af	sta $af1124	                STA GP11_REG
.390d4b	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d4d	8f 25 11 af	sta $af1125	                STA GP12_REG
.390d51	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d53	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390d57	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390d59	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390d5d	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390d5f	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390d63	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390d65	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390d69	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390d6b	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390d6f	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390d71	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390d75	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d77	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390d7b	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d7d	8f 30 11 af	sta $af1130					        STA GP25_REG
.390d81	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d83	8f 31 11 af	sta $af1131					        STA GP26_REG
.390d87	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d89	8f 33 11 af	sta $af1133					        STA GP30_REG
.390d8d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d8f	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d93	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d95	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d99	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d9b	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d9f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390da1	8f 37 11 af	sta $af1137					        STA GP34_REG
.390da5	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390da7	8f 38 11 af	sta $af1138					        STA GP35_REG
.390dab	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390dad	8f 39 11 af	sta $af1139					        STA GP36_REG
.390db1	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390db3	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390db7	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390db9	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390dbd	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390dbf	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390dc3	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390dc5	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390dc9	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390dcb	8f 40 11 af	sta $af1140					        STA GP51_REG
.390dcf	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390dd1	8f 41 11 af	sta $af1141					        STA GP52_REG
.390dd5	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390dd7	8f 42 11 af	sta $af1142					        STA GP53_REG
.390ddb	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390ddd	8f 43 11 af	sta $af1143					        STA GP54_REG
.390de1	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390de3	8f 44 11 af	sta $af1144					        STA GP55_REG
.390de7	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390de9	8f 45 11 af	sta $af1145					        STA GP56_REG
.390ded	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390def	8f 46 11 af	sta $af1146					        STA GP57_REG
.390df3	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390df5	8f 47 11 af	sta $af1147					        STA GP60_REG
.390df9	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390dfb	8f 48 11 af	sta $af1148					        STA GP61_REG
.390dff	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390e01	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390e05	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390e07	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390e0b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390e0d	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390e11	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390e13	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390e17	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390e19	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390e1d	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390e1f	8f 50 11 af	sta $af1150					        STA GP6_REG
.390e23	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390e25	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390e29	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390e2b	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390e2f	c2 20		rep #$20	                REP #$20        ; set A long
.390e31	68		pla		                PLA
.390e32	28		plp						        PLP
.390e33	2b		pld					        	PLD
.390e34	6b		rtl		                RTL
.390e35	0b		phd		IINITKEYBOARD	  PHD
.390e36	08		php						        PHP
.390e37	48		pha						        PHA
.390e38	da		phx						        PHX
.390e39	e2 20		sep #$20	                SEP #$20        ; set A short
.390e3b	c2 10		rep #$10	                REP #$10        ; set X long
.390e3d	18		clc		                CLC
.390e3e	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf ;
.390e41	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390e43	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390e47	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390e4a	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390e4e	c9 55		cmp #$55					        CMP #$55
.390e50	f0 03		beq $390e55					        BEQ	passAAtest
.390e52	82 89 00	brl $390ede	                BRL initkb_loop_out
.390e55					passAAtest
.390e55	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390e57	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390e5b	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390e5e	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390e62	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390e64	f0 03		beq $390e69					        BEQ	passABtest
.390e66	82 75 00	brl $390ede	                BRL initkb_loop_out
.390e69					passABtest
.390e69	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390e6b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e6f	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf ;
.390e72	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390e74	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e78	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf ;
.390e7b	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e7d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e81	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e84	ca		dex		DLY_LOOP1       DEX
.390e85	ea		nop		                NOP
.390e86	ea		nop		                NOP
.390e87	ea		nop		                NOP
.390e88	ea		nop		                NOP
.390e89	ea		nop		                NOP
.390e8a	ea		nop		                NOP
.390e8b	ea		nop		                NOP
.390e8c	ea		nop		                NOP
.390e8d	e0 00 00	cpx #$0000	                CPX #$0000
.390e90	d0 f2		bne $390e84	                BNE DLY_LOOP1
.390e92	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390e95	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e99					DO_CMD_F4_AGAIN
.390e99	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf ;
.390e9c	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e9e	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390ea2	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390ea5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ea9	c9 fa		cmp #$fa	                CMP #$FA
.390eab	d0 ec		bne $390e99	                BNE DO_CMD_F4_AGAIN
.390ead	20 04 0f	jsr $390f04	                JSR INIT_MOUSE
.390eb0	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390eb4	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390eb6	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390eba	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390ebe	29 01		and #$01	                AND #FNX1_INT00_KBD
.390ec0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390ec4	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390ec8	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390eca	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390ece	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390ed2	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390ed4	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390ed8	a2 6a 69	ldx #$696a	                LDX #<>Success_kb_init
.390edb	38		sec		                SEC
.390edc	b0 03		bcs $390ee1	                BCS InitSuccess
.390ede	a2 7c 69	ldx #$697c	initkb_loop_out LDX #<>Failed_kb_init
.390ee1	22 90 06 39	jsl $390690	InitSuccess     JSL IPRINT       ; print Message
.390ee5	c2 20		rep #$20	                REP #$20        ; set A long
.390ee7	c2 10		rep #$10	                REP #$10        ; set X long
.390ee9	fa		plx		                PLX
.390eea	68		pla		                PLA
.390eeb	28		plp						        PLP
.390eec	2b		pld						        PLD
.390eed	6b		rtl		                RTL
.390eee					Poll_Inbuf
.390eee	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390ef2	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390ef4	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390ef6	f0 f6		beq $390eee					        BEQ Poll_Inbuf
.390ef8	60		rts		                RTS
.390ef9					Poll_Outbuf
.390ef9	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390efd	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390eff	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390f01	d0 f6		bne $390ef9	                BNE Poll_Outbuf
.390f03	60		rts		                RTS
.390f04					INIT_MOUSE
.390f04	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f07	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390f09	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f0d					DO_CMD_A9_AGAIN
.390f0d	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f10	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390f12	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f16	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390f19	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390f1d	c9 00		cmp #$00	                CMP #$00
.390f1f	d0 ec		bne $390f0d	                BNE DO_CMD_A9_AGAIN
.390f21	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f24	a9 20		lda #$20	                LDA #$20
.390f26	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f2a	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390f2d	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390f31	09 02		ora #$02	                ORA #$02
.390f33	48		pha		                PHA
.390f34	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f37	a9 60		lda #$60	                LDA #$60
.390f39	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f3d	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf ;
.390f40	68		pla		                PLA
.390f41	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f45	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390f47	20 6a 0f	jsr $390f6a	                JSR MOUSE_WRITE
.390f4a	20 7d 0f	jsr $390f7d	                JSR MOUSE_READ
.390f4d	a9 e8		lda #$e8	                LDA #$E8
.390f4f	20 6a 0f	jsr $390f6a	                JSR MOUSE_WRITE
.390f52	20 7d 0f	jsr $390f7d	                JSR MOUSE_READ
.390f55	a9 00		lda #$00	                LDA #$00
.390f57	20 6a 0f	jsr $390f6a	                JSR MOUSE_WRITE
.390f5a	20 7d 0f	jsr $390f7d	                JSR MOUSE_READ
.390f5d	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390f5f	20 6a 0f	jsr $390f6a	                JSR MOUSE_WRITE
.390f62	20 7d 0f	jsr $390f7d	                JSR MOUSE_READ
.390f65	a9 00		lda #$00	                LDA #$00
.390f67	85 e0		sta $e0		                STA MOUSE_PTR
.390f69	60		rts		                RTS
.390f6a					MOUSE_WRITE
.390f6a	48		pha		                PHA
.390f6b	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f6e	a9 d4		lda #$d4	                LDA #$D4
.390f70	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f74	20 ee 0e	jsr $390eee	                JSR Poll_Inbuf
.390f77	68		pla		                PLA
.390f78	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f7c	60		rts		                RTS
.390f7d					MOUSE_READ
.390f7d	20 f9 0e	jsr $390ef9	                JSR Poll_Outbuf ;
.390f80	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390f84	60		rts		                RTS
.390f85	48		pha		INITRTC         PHA
.390f86	08		php		                PHP
.390f87	e2 20		sep #$20	                SEP #$20        ; set A short
.390f89	a9 00		lda #$00	                LDA #0
.390f8b	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390f8f	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390f93	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390f97	09 04		ora #$04	                ORA #%00000100
.390f99	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390f9d	28		plp		                PLP
.390f9e	68		pla		                PLA
.390f9f	6b		rtl		                RTL
.390fa0					ITESTSID
.390fa0	a9 0f		lda #$0f	                LDA #$0F
.390fa2	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390fa6	a9 be		lda #$be	                LDA #$BE
.390fa8	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390fac	a9 f8		lda #$f8	                LDA #$F8
.390fae	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390fb2	a9 11		lda #$11	                LDA #$11
.390fb4	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390fb8	a9 25		lda #$25	                LDA #$25
.390fba	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390fbe	a9 11		lda #$11	                LDA #$11
.390fc0	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390fc4	a9 08		lda #$08	                LDA #$08
.390fc6	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fca	a9 00		lda #$00	                LDA #$00
.390fcc	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390fd0	a9 c6		lda #$c6	                LDA #$C6
.390fd2	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390fd6	a9 08		lda #$08	                LDA #$08
.390fd8	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390fdc	a9 00		lda #$00	                LDA #$00
.390fde	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390fe2	a9 08		lda #$08	                LDA #$08
.390fe4	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390fe8	a9 c6		lda #$c6	                LDA #$C6
.390fea	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390fee	a9 08		lda #$08	                LDA #$08
.390ff0	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390ff4	a9 00		lda #$00	                LDA #$00
.390ff6	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390ffa	a9 08		lda #$08	                LDA #$08
.390ffc	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.391000	a9 c6		lda #$c6	                LDA #$C6
.391002	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391006	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.391008	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39100c	a9 01		lda #$01	                LDA #$01
.39100e	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.391012	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391014	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.391018	a9 08		lda #$08	                LDA #$08
.39101a	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39101e	a9 08		lda #$08	                LDA #$08
.391020	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.391024	a9 0c		lda #$0c	                LDA #$0C
.391026	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.39102a	a9 04		lda #$04	                LDA #$04
.39102c	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.391030	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391032	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.391036	a9 08		lda #$08	                LDA #$08
.391038	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39103c	a9 08		lda #$08	                LDA #$08
.39103e	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391042	a9 00		lda #$00	                LDA #$00
.391044	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391048	a9 08		lda #$08	                LDA #$08
.39104a	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.39104e	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391050	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391054	a9 08		lda #$08	                LDA #$08
.391056	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39105a	a9 08		lda #$08	                LDA #$08
.39105c	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391060	a9 10		lda #$10	                LDA #$10
.391062	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391066	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39106a	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39106e	6b		rtl		                RTL
.39106f	48		pha		IINITCODEC      PHA
.391070	c2 20		rep #$20	                REP #$20        ; set A long
.391072	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391075	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391079	a9 01 00	lda #$0001	                LDA #$0001
.39107c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391080	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.391083	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391086	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39108a	a9 01 00	lda #$0001	                LDA #$0001
.39108d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391091	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.391094	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391097	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39109b	a9 01 00	lda #$0001	                LDA #$0001
.39109e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910a2	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910a5	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.3910a8	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910ac	a9 01 00	lda #$0001	                LDA #$0001
.3910af	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910b3	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910b6	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.3910b9	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910bd	a9 01 00	lda #$0001	                LDA #$0001
.3910c0	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910c4	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910c7	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.3910ca	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910ce	a9 01 00	lda #$0001	                LDA #$0001
.3910d1	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910d5	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910d8	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.3910db	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910df	a9 01 00	lda #$0001	                LDA #$0001
.3910e2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910e6	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910e9	68		pla		                PLA
.3910ea	6b		rtl		                RTL
.3910eb					IRESETCODEC
.3910eb	c2 20		rep #$20	                REP #$20        ; set A long
.3910ed	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3910f0	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910f4	a9 01 00	lda #$0001	                LDA #$0001
.3910f7	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910fb	20 ff 10	jsr $3910ff	                JSR CODEC_TRF_FINISHED
.3910fe	6b		rtl		                RTL
.3910ff					CODEC_TRF_FINISHED
.3910ff	e2 20		sep #$20	                SEP #$20        ; set A short
.391101	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391105	29 01		and #$01	                AND #$01
.391107	c9 01		cmp #$01	                CMP #$01
.391109	f0 f6		beq $391101	                BEQ CODEC_LOOP
.39110b	c2 20		rep #$20	                REP #$20        ; set A long
.39110d	60		rts		                RTS
.39110e					IBM_FILL_SCREEN
.39110e	c2 30		rep #$30	                REP #$30        ; set A&X long
.391110	a9 00 00	lda #$0000	                LDA #$0000
.391113	a2 00 00	ldx #$0000	                LDX #$0000
.391116					BM_FILL_SCREEN_LOOPY
.391116	a0 00 00	ldy #$0000	                LDY #$0000
.391119	e2 20		sep #$20	                SEP #$20        ; set A short
.39111b					BM_FILL_SCREEN_LOOPX
.39111b	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39111d	c8		iny		                INY
.39111e	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391120	d0 f9		bne $39111b	                BNE BM_FILL_SCREEN_LOOPX
.391122	20 2d 11	jsr $39112d	                JSR BM_FILL_COMPUTE_Y_DST
.391125	e8		inx		                INX
.391126	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.391128	d0 ec		bne $391116	                BNE BM_FILL_SCREEN_LOOPY
.39112a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39112c	6b		rtl		                RTL
.39112d					BM_FILL_COMPUTE_Y_DST
.39112d	c2 20		rep #$20	                REP #$20        ; set A long
.39112f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391131	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391135	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391137	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39113b	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39113e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391142	a9 00 00	lda #$0000	                LDA #$0000
.391145	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391149	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39114d	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39114f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391153	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391155	a9 00 00	lda #$0000	                LDA #$0000
.391158	60		rts		                RTS
.391159					IBMP_PARSER
.391159	c2 30		rep #$30	                REP #$30        ; set A&X long
.39115b	a0 00 00	ldy #$0000	                LDY #$0000
.39115e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391160	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391163	f0 03		beq $391168	                BEQ IBMP_PARSER_CONT
.391165	82 04 01	brl $39126c	                BRL BMP_PARSER_END_WITH_ERROR
.391168					IBMP_PARSER_CONT
.391168	a0 02 00	ldy #$0002	                LDY #$0002
.39116b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39116d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391171	a0 04 00	ldy #$0004	                LDY #$0004
.391174	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391176	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39117a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39117d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391181	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391185	18		clc		                CLC
.391186	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39118a	85 50		sta $50		                STA BMP_FILE_SIZE
.39118c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391190	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391192	a0 12 00	ldy #$0012	                LDY #$0012
.391195	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391197	85 40		sta $40		                STA BMP_X_SIZE
.391199	a0 16 00	ldy #$0016	                LDY #$0016
.39119c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39119e	85 42		sta $42		                STA BMP_Y_SIZE
.3911a0	a0 2e 00	ldy #$002e	                LDY #$002E
.3911a3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3911a5	0a		asl a		                ASL A; Multiply by 2
.3911a6	0a		asl a		                ASL A; Multiply by 2
.3911a7	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3911a9	e0 00 00	cpx #$0000	                CPX #$0000
.3911ac	d0 05		bne $3911b3	                BNE BMP_LUT1_PICK
.3911ae	20 74 12	jsr $391274	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3911b1	80 08		bra $3911bb	                BRA DONE_TRANSFER_LUT;
.3911b3					  BMP_LUT1_PICK
.3911b3	e0 01 00	cpx #$0001	                CPX #$0001
.3911b6	d0 03		bne $3911bb	                BNE BMP_LUT2_PICK
.3911b8	20 a4 12	jsr $3912a4	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3911bb					  BMP_LUT2_PICK
.3911bb					  DONE_TRANSFER_LUT
.3911bb	a5 56		lda $56		                LDA BMP_POSITION_Y
.3911bd	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3911c1	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3911c3	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3911c7	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3911cb	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3911cf	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3911d3	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3911d7	a5 54		lda $54		                LDA BMP_POSITION_X
.3911d9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3911dd	a9 00 00	lda #$0000	                LDA #$0000
.3911e0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911e4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3911e8	85 f0		sta $f0		                STA USER_TEMP
.3911ea	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3911ee	85 f2		sta $f2		                STA USER_TEMP+2
.3911f0	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3911f2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3911f6	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3911f8	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3911fc	a5 f0		lda $f0		                LDA USER_TEMP
.3911fe	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391202	a5 f2		lda $f2		                LDA USER_TEMP+2
.391204	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391208	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.39120c	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39120e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391212	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391214	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391216	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39121a	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.39121c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391220	a5 50		lda $50		                LDA BMP_FILE_SIZE
.391222	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391226	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391228	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39122c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391230	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391232	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391236	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391238	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39123a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39123e	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391240	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391244	18		clc		                CLC
.391245	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391247	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39124a	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39124d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391251	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391254	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391258	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39125c	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39125e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391262	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391264	20 d4 12	jsr $3912d4	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391267	a2 b8 69	ldx #$69b8	                LDX #<>bmp_parser_msg0
.39126a	80 03		bra $39126f	                BRA BMP_PARSER_END_NO_ERROR
.39126c					BMP_PARSER_END_WITH_ERROR
.39126c	a2 a4 69	ldx #$69a4	                LDX #<>bmp_parser_err0
.39126f					BMP_PARSER_END_NO_ERROR
.39126f	22 90 06 39	jsl $390690	                JSL IPRINT       ; print the first line
.391273	6b		rtl		                RTL
.391274					BMP_PARSER_UPDATE_LUT0
.391274	38		sec		                SEC
.391275	a0 7a 00	ldy #$007a	                LDY #$007A
.391278	a2 00 00	ldx #$0000	                LDX #$0000
.39127b	e2 20		sep #$20	                SEP #$20        ; set A short
.39127d					BMP_PARSER_UPDATE_LOOP
.39127d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39127f	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391283	c8		iny		                INY
.391284	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391286	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39128a	c8		iny		                INY
.39128b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39128d	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391291	c8		iny		                INY
.391292	a9 80		lda #$80	                LDA #$80
.391294	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391298	c8		iny		                INY ; For the Alpha Value, nobody cares
.391299	e8		inx		                INX
.39129a	e8		inx		                INX
.39129b	e8		inx		                INX
.39129c	e8		inx		                INX
.39129d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39129f	d0 dc		bne $39127d	                BNE BMP_PARSER_UPDATE_LOOP
.3912a1	c2 20		rep #$20	                REP #$20        ; set A long
.3912a3	60		rts		                RTS
.3912a4					BMP_PARSER_UPDATE_LUT1
.3912a4	38		sec		                SEC
.3912a5	a0 36 00	ldy #$0036	                LDY #$0036
.3912a8	a2 00 00	ldx #$0000	                LDX #$0000
.3912ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3912ad					PALETTE_LUT1_LOOP
.3912ad	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3912af	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3912b3	c8		iny		                INY
.3912b4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3912b6	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3912ba	c8		iny		                INY
.3912bb	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3912bd	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3912c1	c8		iny		                INY
.3912c2	a9 80		lda #$80	                LDA #$80
.3912c4	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3912c8	c8		iny		                INY ; For the Alpha Value, nobody cares
.3912c9	e8		inx		                INX
.3912ca	e8		inx		                INX
.3912cb	e8		inx		                INX
.3912cc	e8		inx		                INX
.3912cd	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3912cf	d0 dc		bne $3912ad	                BNE PALETTE_LUT1_LOOP
.3912d1	c2 20		rep #$20	                REP #$20        ; set A long
.3912d3	60		rts		                RTS
.3912d4					BMP_PARSER_DMA_SHIT_OUT
.3912d4	a2 00 00	ldx #$0000	                LDX #$0000
.3912d7					BMP_PARSER_LOOPY
.3912d7	a0 00 00	ldy #$0000	                LDY #$0000
.3912da	e2 20		sep #$20	                SEP #$20        ; set A short
.3912dc					BMP_PARSER_LOOPX
.3912dc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3912de	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3912e0	c8		iny		                INY
.3912e1	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3912e3	d0 f7		bne $3912dc	                BNE BMP_PARSER_LOOPX
.3912e5	20 f1 12	jsr $3912f1	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3912e8	20 0c 13	jsr $39130c	                JSR BMP_PARSER_COMPUTE_Y_DST
.3912eb	e8		inx		                INX
.3912ec	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3912ee	d0 e7		bne $3912d7	                BNE BMP_PARSER_LOOPY
.3912f0	60		rts		                RTS
.3912f1					BMP_PARSER_COMPUTE_Y_SRC
.3912f1	c2 20		rep #$20	                REP #$20        ; set A long
.3912f3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3912f5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912f9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3912fb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912ff	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391303	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391305	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391309	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39130b	60		rts		                RTS
.39130c					BMP_PARSER_COMPUTE_Y_DST
.39130c	c2 20		rep #$20	                REP #$20        ; set A long
.39130e	18		clc		                CLC
.39130f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391311	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391313	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391315	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391317	69 00 00	adc #$0000	                ADC #$0000
.39131a	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39131c	60		rts		                RTS
.39131d	ea		nop		ILOOP           NOP
.39131e	ea		nop		                NOP
.39131f	ea		nop		                NOP
.391320	ea		nop		                NOP
.391321	ea		nop		                NOP
.391322	ea		nop		                NOP
.391323	ea		nop		                NOP
.391324	ea		nop		                NOP
.391325	ea		nop		                NOP
.391326	ea		nop		                NOP
.391327	6b		rtl		                RTL
.391328	22 1d 13 39	jsl $39131d	ILOOP_1         JSL ILOOP
.39132c	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391330	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391334	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391338	22 1d 13 39	jsl $39131d	                JSL ILOOP
.39133c	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391340	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391344	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391348	22 1d 13 39	jsl $39131d	                JSL ILOOP
.39134c	22 1d 13 39	jsl $39131d	                JSL ILOOP
.391350	6b		rtl		                RTL
.391351	22 28 13 39	jsl $391328	ILOOP_1MS       JSL ILOOP_1
.391355	6b		rtl		                RTL
.391356	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391359	f0 07		beq $391362	                BEQ LOOP_MS_END
.39135b	22 51 13 39	jsl $391351	                JSL ILOOP_1MS
.39135f	ca		dex		                DEX
.391360	80 f4		bra $391356	                BRA ILOOP_MS
.391362	6b		rtl		LOOP_MS_END     RTL
.391363					IDELAY
.391363	8b		phb		                PHB
.391364	08		php		                PHP
.391365	48		pha		                PHA             ; begin setdbr macro
.391366	08		php		                PHP
.391367	e2 20		sep #$20	                SEP #$20        ; set A short
.391369	a9 00		lda #$00	                LDA #0
.39136b	48		pha		                PHA
.39136c	ab		plb		                PLB
.39136d	28		plp		                PLP
.39136e	68		pla		                PLA             ; end setdbr macro
.39136f	e2 20		sep #$20	                SEP #$20        ; set A short
.391371	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391373	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391377	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39137b	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39137d	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391381	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391383	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391386	a9 00		lda #$00	                LDA #0
.391388	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.39138c	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391390	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391394	c2 30		rep #$30	                REP #$30        ; set A&X long
.391396	8a		txa		                TXA
.391397	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39139b	98		tya		                TYA
.39139c	e2 20		sep #$20	                SEP #$20        ; set A short
.39139e	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.3913a2	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.3913a4	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3913a8	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.3913aa	cb		wai		loop            WAI                         ; Wait for an interrupt
.3913ab	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3913ae	f0 fa		beq $3913aa	                BEQ loop                    ; Keep checking until it's set
.3913b0	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3913b2	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3913b6	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3913b8	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3913bb	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3913bf	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3913c1	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3913c5	28		plp		                PLP
.3913c6	ab		plb		                PLB
.3913c7	6b		rtl		                RTL
.3913c8					SHOW_CREDITS
.3913c8	48		pha		                PHA
.3913c9	da		phx		                PHX
.3913ca	5a		phy		                PHY
.3913cb	08		php		                PHP
.3913cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3913ce	c2 10		rep #$10	                REP #$10        ; set X long
.3913d0	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3913d4	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3913d6	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3913da	a2 00 00	ldx #$0000	                LDX #0
.3913dd	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3913e1	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3913e5	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3913e9	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3913ed	e8		inx		                INX
.3913ee	e0 00 20	cpx #$2000	                CPX #128 * 64
.3913f1	d0 ea		bne $3913dd	                BNE credit_loop
.3913f3	22 69 06 39	jsl $390669	                JSL IGETCHW                     ; Wait for a keypress
.3913f7	22 b9 09 39	jsl $3909b9	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3913fb	22 25 08 39	jsl $390825	                JSL ICSRHOME                    ; Move cursor to the home position
.3913ff	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391403	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391405	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391409	28		plp		                PLP
.39140a	7a		ply		                PLY
.39140b	fa		plx		                PLX
.39140c	68		pla		                PLA
.39140d	6b		rtl		                RTL
.39140e	00		brk #		IRESTORE        BRK ; Warm boot routine
.39140f	00		brk #		ISCINIT         BRK ;
.391410	00		brk #		IIOINIT         BRK ;
.391411	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391412	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391413	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391414	00		brk #		ICLOSE          BRK ; Close a channel
.391415	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391416	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391417	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391418	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391419	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39141a	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39141b	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39141c	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39141d	00		brk #		IPRINTF         BRK ; Print a float value
.39141e	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39141f	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391420	00		brk #		IPUSHKEY        BRK ;
.391421	00		brk #		IPUSHKEYS       BRK ;
.391422	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391423	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>391424	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39142c	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39143c	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391444	12
>391445	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39144d	15
>39144e	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391454	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391459	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39145f	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391467	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391475	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39147d	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39148b	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391493	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3914a1	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3914a9	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3914b7	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3914bf	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3914cd	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3914d5	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3914e3	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3914eb	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3914f9	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>391501	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39150f	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391517	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391525	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>39152d	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39153b	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391543	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391551	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391559	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391567	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39156f	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39157d	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391585	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391593	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39159b	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3915a9	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3915b1	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3915bf	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3915c7	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3915d5	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3915dd	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3915eb	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3915f3	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>391601	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391609	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391617	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39161f	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>39162d	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391635	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391643	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39164b	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391659	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391661	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39166f	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391677	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391685	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39168d	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39169b	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3916a3	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3916b1	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3916b9	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3916c7	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3916cf	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3916dd	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3916e5	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3916f3	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3916fb	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391709	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391711	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39171f	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391727	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391735	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>39173d	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>39174b	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391753	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391761	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391769	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391777	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39177f	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>39178d	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391795	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3917a3	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3917ab	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3917b9	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3917c1	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3917cf	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3917d7	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>3917e5	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>3917ed	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>3917fb	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391803	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391811	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391819	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391827	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>39182f	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>39183d	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391845	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391853	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>39185b	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391869	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391871	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>39187f	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391887	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391895	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>39189d	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3918ab	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3918b3	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3918c1	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3918c9	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3918d7	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3918df	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>3918ed	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>3918f5	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391903	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>39190b	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391919	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391921	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>39192f	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391937	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391945	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>39194d	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>39195b	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391963	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391971	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391979	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391987	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>39198f	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>39199d	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3919a5	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3919b3	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3919bb	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3919c9	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3919d1	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>3919df	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>3919e7	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>3919f5	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>3919fd	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391a0b	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391a13	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391a21	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391a29	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391a37	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391a3f	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391a4d	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391a55	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391a63	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391a6b	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391a79	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391a81	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391a8f	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391a97	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391aa5	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391aad	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391abb	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391ac3	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391ad1	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391ad9	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391ae7	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391aef	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391afd	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391b05	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391b13	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391b1b	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391b29	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391b31	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391b3f	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391b47	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391b55	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391b5d	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391b6b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391b73	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391b81	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391b89	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391b97	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391b9f	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391bad	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391bb5	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391bc3	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391bcb	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391bd9	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391be1	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391bef	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391bf7	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391c05	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391c0d	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391c1b	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391c23	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391c31	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391c39	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391c47	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391c4f	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391c5d	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391c65	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391c73	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391c7b	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391c89	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391c91	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391c9f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391ca7	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391cb5	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391cbd	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391ccb	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391cd3	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391ce1	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391ce9	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391cf7	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391cff	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391d0d	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391d15	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391d23	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391d2b	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391d39	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391d41	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391d4f	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391d57	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391d65	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391d6d	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391d7b	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391d83	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391d91	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391d99	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391da7	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391daf	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391dbd	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391dc5	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391dd3	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391ddb	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391de9	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391df1	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391dff	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391e07	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391e15	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391e1d	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391e2b	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391e33	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391e41	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391e49	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391e57	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391e5f	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391e6d	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391e75	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391e83	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391e8b	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391e99	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391ea1	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391eaf	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391eb7	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391ec5	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391ecd	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391edb	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391ee3	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391ef1	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391ef9	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391f07	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391f0f	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391f1d	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391f25	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391f33	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391f3b	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391f49	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391f51	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391f5f	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391f67	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391f75	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391f7d	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391f8b	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391f93	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391fa1	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391fa9	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391fb7	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391fbf	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391fcd	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391fd5	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391fe3	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391feb	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391ff9	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>392001	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>39200f	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>392017	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>392025	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>39202d	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39203b	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392043	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392051	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392059	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392067	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39206f	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39207d	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392085	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392093	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39209b	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>3920a9	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>3920b1	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3920bf	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3920c7	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>3920d5	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3920dd	00 87 fa 00
>3920e1	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3920e9	00 88 98 03
>3920ed	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3920f5	00 88 98 03
>3920f9	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392101	00 f9 69 00
>392105	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>39210d	80 e8 4a 00
>392111	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392119	00 f6 9a 00
>39211d	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392125	1b f2 34 00
>392129	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>392131	00 f7 8a 00
>392135	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>39213d	00 f6 47 00
>392141	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392149	00 f9 69 00
>39214d	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392155	00 f7 a9 00
>392159	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392161	00 87 fa 00
>392165	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39216d	00 f7 a9 00
>392171	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392179	00 f5 f5 00
>39217d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392185	06 b8 d8 03
>392189	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392191	00 f5 f5 00
>392195	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39219d	06 b8 d8 03
>3921a1	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921a9	00 f5 f5 00
>3921ad	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3921b5	10 74 f8 03
>3921b9	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921c1	00 f5 f5 00
>3921c5	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921cd	00 f5 f5 00
>3921d1	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3921d9	05 c5 d4 03
>3921dd	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921e5	00 f5 f5 00
>3921e9	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3921f1	04 f9 44 03
>3921f5	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3921fd	05 c5 d4 03
>392201	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392209	04 f9 44 03
>39220d	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392215	03 87 f7 03
>392219	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392221	05 c5 d4 03
>392225	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>39222d	00 f6 28 00
>392231	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392239	05 c5 d4 03
>39223d	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392245	00 f5 f7 01
>392249	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392251	04 f9 44 03
>392255	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39225d	00 99 f9 00
>392261	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392269	00 a8 f7 00
>39226d	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392275	00 99 f9 00
>392279	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392281	00 a6 f6 00
>392285	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39228d	00 a6 f6 00
>392291	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392299	00 f6 36 02
>39229d	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3922a5	00 f6 36 02
>3922a9	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3922b1	00 96 e8 01
>3922b5	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3922bd	00 96 e8 01
>3922c1	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3922c9	02 79 77 03
>3922cd	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3922d5	02 79 77 03
>3922d9	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3922e1	00 a5 2b 02
>3922e5	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3922ed	00 93 3b 02
>3922f1	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3922f9	01 89 3b 03
>3922fd	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392305	0a 53 2b 02
>392309	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>392311	00 f6 89 00
>392315	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39231d	00 f6 9a 00
>392321	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392329	00 f6 9a 00
>39232d	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392335	00 87 4b 01
>392339	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392341	00 78 67 01
>392345	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39234d	02 f8 fc 00
>392351	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392359	40 f5 f5 00
>39235d	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392365	02 79 77 03
>392369	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392371	40 f5 f5 00
>392375	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39237d	40 f5 f5 00
>392381	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392389	00 f9 69 00
>39238d	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392395	00 f9 69 00
>392399	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3923a1	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>3923a5	d5 20 39 00 e1 20 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3923ad	ed 20 39 00 f9 20 39 00
>3923b5	05 21 39 00 11 21 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3923bd	1d 21 39 00 29 21 39 00
>3923c5	35 21 39 00 41 21 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3923cd	4d 21 39 00 59 21 39 00
>3923d5	65 21 39 00 71 21 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3923dd	7d 21 39 00 89 21 39 00
>3923e5	95 21 39 00 a1 21 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3923ed	ad 21 39 00 b9 21 39 00
>3923f5	c5 21 39 00 d1 21 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3923fd	dd 21 39 00 e9 21 39 00
>392405	f5 21 39 00 01 22 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39240d	0d 22 39 00 19 22 39 00
>392415	25 22 39 00 31 22 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39241d	3d 22 39 00 49 22 39 00
>392425	55 22 39 00 61 22 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>39242d	6d 22 39 00 79 22 39 00
>392435	85 22 39 00 91 22 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>39243d	9d 22 39 00 a9 22 39 00
>392445	b5 22 39 00 c1 22 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39244d	cd 22 39 00 d9 22 39 00
>392455	e5 22 39 00 f1 22 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39245d	fd 22 39 00 09 23 39 00
>392465	15 23 39 00 21 23 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39246d	2d 23 39 00 39 23 39 00
>392475	45 23 39 00 51 23 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39247d	5d 23 39 00 69 23 39 00
>392485	75 23 39 00 81 23 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39248d	8d 23 39 00 99 23 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392495	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39249d	00 b1 f5 01
>3924a1	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3924a9	03 f1 f5 00
>3924ad	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3924b5	03 c1 f5 00
>3924b9	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3924c1	00 92 f5 01
>3924c5	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3924cd	00 f1 f9 00
>3924d1	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3924d9	00 f1 f5 00
>3924dd	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3924e5	02 81 f6 01
>3924e9	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3924f1	00 c2 b9 01
>3924f5	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3924fd	05 b2 35 00
>392501	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392509	1b f2 34 00
>39250d	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392515	01 f5 74 00
>392519	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392521	00 61 e3 00
>392525	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>39252d	00 a4 64 00
>392531	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392539	07 b5 f5 00
>39253d	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392545	00 f3 74 00
>392549	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392551	00 c3 94 01
>392555	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39255d	00 f4 0d 01
>392561	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392569	00 f5 0b 01
>39256d	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392575	00 bf 07 00
>392579	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392581	00 6d 08 01
>392585	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39258d	00 51 17 01
>392591	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392599	00 51 17 01
>39259d	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3925a5	00 53 08 01
>3925a9	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3925b1	00 53 06 01
>3925b5	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3925bd	00 d2 f8 00
>3925c1	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3925c9	00 e2 c7 01
>3925cd	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3925d5	00 f1 9c 00
>3925d9	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3925e1	02 f2 c9 01
>3925e5	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3925ed	03 95 fb 00
>3925f1	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3925f9	04 a1 59 00
>3925fd	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392605	03 91 fc 03
>392609	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392611	02 b4 ec 00
>392615	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39261d	00 93 f7 00
>392621	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392629	04 c1 58 00
>39262d	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392635	02 c3 6a 00
>392639	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392641	00 62 87 00
>392645	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39264d	00 f3 97 00
>392651	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392659	00 b3 97 00
>39265d	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392665	04 f3 cc 00
>392669	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392671	00 93 aa 00
>392675	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39267d	00 78 08 01
>392681	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392689	00 78 08 01
>39268d	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392695	00 54 27 01
>392699	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3926a1	00 61 56 00
>3926a5	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3926ad	00 75 16 01
>3926b1	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3926b9	00 f5 f6 01
>3926bd	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3926c5	80 f3 e3 00
>3926c9	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3926d1	00 b5 f5 00
>3926d5	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3926dd	80 71 16 00
>3926e1	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3926e9	00 30 55 01
>3926ed	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3926f5	00 62 36 01
>3926f9	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>392701	02 51 07 00
>392705	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>39270d	00 62 39 00
>392711	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392719	00 66 27 00
>39271d	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392725	00 73 46 00
>392729	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392731	00 74 76 01
>392735	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>39273d	81 92 38 00
>392741	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392749	02 71 19 00
>39274d	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392755	01 81 09 00
>392759	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392761	00 83 4b 02
>392765	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>39276d	05 71 59 00
>392771	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392779	03 82 39 00
>39277d	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392785	82 84 17 00
>392789	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392791	02 72 16 00
>392795	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>39279d	00 7b 0a 00
>3927a1	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3927a9	00 85 0c 01
>3927ad	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3927b5	00 7b 0a 01
>3927b9	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3927c1	00 79 18 01
>3927c5	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3927cd	01 73 08 00
>3927d1	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3927d9	04 77 0a 00
>3927dd	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>3927e5	00 51 19 00
>3927e9	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>3927f1	01 74 09 00
>3927f5	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>3927fd	01 63 28 00
>392801	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392809	00 65 0a 00
>39280d	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392815	00 67 29 00
>392819	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392821	00 67 09 00
>392825	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>39282d	01 6a 28 00
>392831	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392839	00 55 27 00
>39283d	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392845	00 6f 08 00
>392849	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392851	00 7a 07 00
>392855	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>39285d	06 a2 0d 00
>392861	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392869	00 a3 5f 00
>39286d	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392875	00 42 27 00
>392879	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392881	05 b2 49 00
>392885	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>39288d	00 b2 79 01
>392891	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392899	00 7a 1a 00
>39289d	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3928a5	00 82 28 01
>3928a9	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3928b1	02 c3 5f 00
>3928b5	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3928bd	86 c4 95 01
>3928c1	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3928c9	00 44 15 00
>3928cd	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3928d5	00 d1 06 00
>3928d9	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>3928e1	00 82 37 00
>3928e5	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>3928ed	00 41 35 00
>3928f1	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>3928f9	02 32 f5 01
>3928fd	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392905	00 61 26 00
>392909	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392911	84 3f 05 01
>392915	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>39291d	01 d1 f6 00
>392921	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392929	00 41 05 01
>39292d	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392935	05 f3 e4 00
>392939	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392941	00 92 f5 01
>392945	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>39294d	04 f2 e4 01
>392951	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392959	00 45 25 00
>39295d	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392965	01 a3 36 00
>392969	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392971	01 98 05 01
>392975	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>39297d	02 a3 f6 01
>392981	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392989	00 f6 f8 00
>39298d	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392995	00 f3 f5 00
>392999	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3929a1	00 94 e5 01
>3929a5	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3929ad	00 84 44 00
>3929b1	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3929b9	03 83 18 01
>3929bd	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3929c5	01 78 08 01
>3929c9	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3929d1	03 8e 08 01
>3929d5	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>3929dd	09 f2 46 00
>3929e1	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3929e9	00 96 e8 01
>3929ed	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>3929f5	00 f6 f6 01
>3929f9	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392a01	00 f6 9a 00
>392a05	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392a0d	00 c6 45 00
>392a11	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392a19	00 f4 b4 00
>392a1d	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392a25	00 d5 25 00
>392a29	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392a31	0e 21 2d 00
>392a35	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392a3d	00 55 87 02
>392a41	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392a49	08 98 87 01
>392a4d	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392a55	04 17 04 03
>392a59	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392a61	05 77 f9 02
>392a65	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392a6d	02 f4 08 00
>392a71	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392a79	00 36 05 01
>392a7d	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392a85	05 32 55 03
>392a89	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392a91	00 f3 df 00
>392a95	95 24 39 00 a1 24 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392a9d	ad 24 39 00 b9 24 39 00 c5 24 39 00 d1 24 39 00
>392aad	dd 24 39 00 e9 24 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392ab5	f5 24 39 00 01 25 39 00 0d 25 39 00 19 25 39 00
>392ac5	25 25 39 00 31 25 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392acd	3d 25 39 00 49 25 39 00 55 25 39 00 61 25 39 00
>392add	6d 25 39 00 79 25 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392ae5	85 25 39 00 91 25 39 00 9d 25 39 00 a9 25 39 00
>392af5	b5 25 39 00 c1 25 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392afd	cd 25 39 00 d9 25 39 00 e5 25 39 00 f1 25 39 00
>392b0d	fd 25 39 00 09 26 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392b15	15 26 39 00 21 26 39 00 2d 26 39 00 39 26 39 00
>392b25	45 26 39 00 51 26 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392b2d	5d 26 39 00 69 26 39 00 75 26 39 00 81 26 39 00
>392b3d	8d 26 39 00 99 26 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392b45	a5 26 39 00 b1 26 39 00 bd 26 39 00 c9 26 39 00
>392b55	d5 26 39 00 e1 26 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392b5d	ed 26 39 00 f9 26 39 00 05 27 39 00 11 27 39 00
>392b6d	1d 27 39 00 29 27 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392b75	35 27 39 00 41 27 39 00 4d 27 39 00 59 27 39 00
>392b85	65 27 39 00 71 27 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392b8d	7d 27 39 00 89 27 39 00 95 27 39 00 a1 27 39 00
>392b9d	ad 27 39 00 b9 27 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392ba5	c5 27 39 00 d1 27 39 00 dd 27 39 00 e9 27 39 00
>392bb5	f5 27 39 00 01 28 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392bbd	0d 28 39 00 19 28 39 00 25 28 39 00 31 28 39 00
>392bcd	3d 28 39 00 49 28 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392bd5	55 28 39 00 61 28 39 00 6d 28 39 00 79 28 39 00
>392be5	85 28 39 00 91 28 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392bed	9d 28 39 00 a9 28 39 00 b5 28 39 00 c1 28 39 00
>392bfd	cd 28 39 00 d9 28 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392c05	e5 28 39 00 f1 28 39 00 fd 28 39 00 09 29 39 00
>392c15	15 29 39 00 21 29 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392c1d	2d 29 39 00 39 29 39 00 45 29 39 00 51 29 39 00
>392c2d	5d 29 39 00 69 29 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392c35	75 29 39 00 81 29 39 00 8d 29 39 00 99 29 39 00
>392c45	a5 29 39 00 b1 29 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392c4d	bd 29 39 00 c9 29 39 00 d5 29 39 00 e1 29 39 00
>392c5d	ed 29 39 00 f9 29 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392c65	05 2a 39 00 11 2a 39 00 1d 2a 39 00 29 2a 39 00
>392c75	35 2a 39 00 41 2a 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392c7d	4d 2a 39 00 59 2a 39 00 65 2a 39 00 71 2a 39 00
>392c8d	7d 2a 39 00 89 2a 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392c95	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392c9d	0d f2 f7 00
>392ca1	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392ca9	07 f2 f7 00
>392cad	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392cb5	07 f2 f6 00
>392cb9	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392cc1	07 f2 f7 00
>392cc5	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392ccd	07 f2 f7 00
>392cd1	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392cd9	07 f2 f7 00
>392cdd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ce5	00 00 00 00
>392ce9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cf1	00 00 00 00
>392cf5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cfd	00 00 00 00
>392d01	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392d09	87 f2 f1 00
>392d0d	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392d15	07 f4 f4 00
>392d19	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392d21	07 f2 f6 00
>392d25	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392d2d	07 e7 f7 00
>392d31	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392d39	07 f6 f6 00
>392d3d	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392d45	87 a3 f3 00
>392d49	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d51	00 00 00 00
>392d55	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d5d	00 00 00 00
>392d61	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d69	00 00 00 00
>392d6d	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392d75	07 8a 08 00
>392d79	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392d81	07 55 14 00
>392d85	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392d8d	87 55 04 00
>392d91	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392d99	07 46 1a 00
>392d9d	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392da5	07 61 07 00
>392da9	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392db1	90 61 07 00
>392db5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dbd	00 00 00 00
>392dc1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dc9	00 00 00 00
>392dcd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dd5	00 00 00 00
>392dd9	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392de1	87 f3 f8 00
>392de5	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392ded	07 f6 3a 00
>392df1	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392df9	0c 84 19 00
>392dfd	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392e05	07 94 19 00
>392e09	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392e11	87 d1 f8 00
>392e15	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392e1d	07 c3 a6 00
>392e21	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e29	00 00 00 00
>392e2d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e35	00 00 00 00
>392e39	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e41	00 00 00 00
>392e45	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392e4d	47 f2 df 00
>392e51	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392e59	0f a1 df 00
>392e5d	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392e65	07 f1 78 00
>392e69	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392e71	07 f1 18 00
>392e75	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392e7d	07 56 26 00
>392e81	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392e89	07 66 06 00
>392e8d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e95	00 00 00 00
>392e99	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea1	00 00 00 00
>392ea5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ead	00 00 00 00
>392eb1	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392eb9	87 85 35 00
>392ebd	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392ec5	87 f3 f4 00
>392ec9	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392ed1	07 f2 c3 00
>392ed5	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392edd	08 72 08 00
>392ee1	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392ee9	07 3f 07 01
>392eed	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392ef5	07 4f 05 00
>392ef9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f01	00 00 00 00
>392f05	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f0d	00 00 00 00
>392f11	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f19	00 00 00 00
>392f1d	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392f25	07 7a 05 00
>392f29	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392f31	07 a5 45 00
>392f35	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392f3d	08 8f 09 00
>392f41	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392f49	0c 8f 09 00
>392f4d	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392f55	07 82 37 00
>392f59	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392f61	07 62 2c 01
>392f65	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f6d	00 00 00 00
>392f71	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f79	00 00 00 00
>392f7d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f85	00 00 00 00
>392f89	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392f91	07 a6 1c 00
>392f95	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392f9d	07 72 0b 00
>392fa1	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392fa9	07 72 09 00
>392fad	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392fb5	07 82 09 00
>392fb9	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392fc1	07 72 0f 00
>392fc5	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392fcd	07 8f 0a 00
>392fd1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fd9	00 00 00 00
>392fdd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe5	00 00 00 00
>392fe9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff1	00 00 00 00
>392ff5	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392ffd	07 65 1a 00
>393001	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393009	07 65 1a 00
>39300d	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>393015	07 75 0a 00
>393019	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>393021	07 65 1a 00
>393025	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>39302d	07 65 26 00
>393031	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>393039	07 55 36 00
>39303d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393045	00 00 00 00
>393049	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393051	00 00 00 00
>393055	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39305d	00 00 00 00
>393061	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393069	07 ff 0f 01
>39306d	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393075	87 64 18 00
>393079	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393081	07 96 0a 00
>393085	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39308d	07 91 2a 00
>393091	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393099	47 6f 07 00
>39309d	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>3930a5	07 8f 06 02
>3930a9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930b1	00 00 00 00
>3930b5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930bd	00 00 00 00
>3930c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930c9	00 00 00 00
>3930cd	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3930d5	07 55 16 00
>3930d9	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3930e1	07 6a 03 00
>3930e5	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3930ed	07 42 35 00
>3930f1	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3930f9	07 31 47 01
>3930fd	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393105	0a 42 25 00
>393109	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>393111	07 cf 07 00
>393115	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39311d	00 00 00 00
>393121	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393129	00 00 00 00
>39312d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393135	00 00 00 00
>393139	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393141	8a f2 26 00
>393145	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>39314d	07 f2 f5 00
>393151	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393159	87 11 13 00
>39315d	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393165	87 1d 03 00
>393169	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393171	07 81 23 00
>393175	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39317d	0a f2 f6 01
>393181	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393189	00 00 00 00
>39318d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393195	00 00 00 00
>393199	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a1	00 00 00 00
>3931a5	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>3931ad	07 c2 05 00
>3931b1	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>3931b9	07 6f 0c 01
>3931bd	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3931c5	07 56 16 00
>3931c9	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3931d1	88 8f 0b 00
>3931d5	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3931dd	87 c3 e5 00
>3931e1	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3931e9	07 f8 16 00
>3931ed	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931f5	00 00 00 00
>3931f9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393201	00 00 00 00
>393205	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39320d	00 00 00 00
>393211	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>393219	0a f3 03 00
>39321d	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393225	07 f3 02 00
>393229	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>393231	07 1f ff 03
>393235	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>39323d	8f 56 84 02
>393241	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393249	0c 34 04 03
>39324d	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393255	07 1f 02 03
>393259	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393261	00 00 00 00
>393265	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39326d	00 00 00 00
>393271	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393279	00 00 00 00
>39327d	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393285	07 12 16 01
>393289	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393291	07 f6 c9 02
>393295	95 2c 39 00 a1 2c 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39329d	ad 2c 39 00 b9 2c 39 00 c5 2c 39 00 d1 2c 39 00
>3932ad	dd 2c 39 00 e9 2c 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3932b5	f5 2c 39 00 01 2d 39 00 0d 2d 39 00 19 2d 39 00
>3932c5	25 2d 39 00 31 2d 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3932cd	3d 2d 39 00 49 2d 39 00 55 2d 39 00 61 2d 39 00
>3932dd	6d 2d 39 00 79 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3932e5	85 2d 39 00 91 2d 39 00 9d 2d 39 00 a9 2d 39 00
>3932f5	b5 2d 39 00 c1 2d 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3932fd	cd 2d 39 00 d9 2d 39 00 e5 2d 39 00 f1 2d 39 00
>39330d	fd 2d 39 00 09 2e 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393315	15 2e 39 00 21 2e 39 00 2d 2e 39 00 39 2e 39 00
>393325	45 2e 39 00 51 2e 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>39332d	5d 2e 39 00 69 2e 39 00 75 2e 39 00 81 2e 39 00
>39333d	8d 2e 39 00 99 2e 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393345	a5 2e 39 00 b1 2e 39 00 bd 2e 39 00 c9 2e 39 00
>393355	d5 2e 39 00 e1 2e 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39335d	ed 2e 39 00 f9 2e 39 00 05 2f 39 00 11 2f 39 00
>39336d	1d 2f 39 00 29 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393375	35 2f 39 00 41 2f 39 00 4d 2f 39 00 59 2f 39 00
>393385	65 2f 39 00 71 2f 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39338d	7d 2f 39 00 89 2f 39 00 95 2f 39 00 a1 2f 39 00
>39339d	ad 2f 39 00 b9 2f 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3933a5	c5 2f 39 00 d1 2f 39 00 dd 2f 39 00 e9 2f 39 00
>3933b5	f5 2f 39 00 01 30 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3933bd	0d 30 39 00 19 30 39 00 25 30 39 00 31 30 39 00
>3933cd	3d 30 39 00 49 30 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3933d5	55 30 39 00 61 30 39 00 6d 30 39 00 79 30 39 00
>3933e5	85 30 39 00 91 30 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3933ed	9d 30 39 00 a9 30 39 00 b5 30 39 00 c1 30 39 00
>3933fd	cd 30 39 00 d9 30 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393405	e5 30 39 00 f1 30 39 00 fd 30 39 00 09 31 39 00
>393415	15 31 39 00 21 31 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39341d	2d 31 39 00 39 31 39 00 45 31 39 00 51 31 39 00
>39342d	5d 31 39 00 69 31 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393435	75 31 39 00 81 31 39 00 8d 31 39 00 99 31 39 00
>393445	a5 31 39 00 b1 31 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39344d	bd 31 39 00 c9 31 39 00 d5 31 39 00 e1 31 39 00
>39345d	ed 31 39 00 f9 31 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393465	05 32 39 00 11 32 39 00 1d 32 39 00 29 32 39 00
>393475	35 32 39 00 41 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39347d	4d 32 39 00 59 32 39 00 65 32 39 00 71 32 39 00
>39348d	7d 32 39 00 89 32 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393495	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39349d					IOPL2_TONE_TEST
.39349d	e2 20		sep #$20	                SEP #$20        ; set A short
.39349f	c2 10		rep #$10	                REP #$10        ; set X long
.3934a1	a2 00 00	ldx #$0000	                LDX #0
.3934a4					OPL2_TONE_TESTING_L1
.3934a4	bf 95 34 39	lda $393495,x	                LDA NOTE_INTRO, X
.3934a8	29 0f		and #$0f	                AND #$F
.3934aa	85 30		sta $30		                STA OPL2_NOTE ; start at C
.3934ac	bf 95 34 39	lda $393495,x	                LDA NOTE_INTRO, X
.3934b0	29 70		and #$70	                AND #$70
.3934b2	4a		lsr a		                LSR A
.3934b3	4a		lsr a		                LSR A
.3934b4	4a		lsr a		                LSR A
.3934b5	4a		lsr a		                LSR A
.3934b6	85 31		sta $31		                STA OPL2_OCTAVE
.3934b8	8a		txa		                TXA
.3934b9	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3934bb	85 27		sta $27		                STA OPL2_CHANNEL
.3934bd	22 8d 36 39	jsl $39368d	                JSL OPL2_PLAYNOTE
.3934c1	a0 00 00	ldy #$0000	                LDY #$0000
.3934c4					OPL2_TONE_TESTING_L2
.3934c4	ea		nop		                NOP
.3934c5	ea		nop		                NOP
.3934c6	ea		nop		                NOP
.3934c7	ea		nop		                NOP
.3934c8	c8		iny		                INY
.3934c9	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3934cc	d0 f6		bne $3934c4	                BNE OPL2_TONE_TESTING_L2
.3934ce	e8		inx		                INX
.3934cf	e0 08 00	cpx #$0008	                CPX #8
.3934d2	d0 d0		bne $3934a4	                BNE OPL2_TONE_TESTING_L1
.3934d4	6b		rtl		                RTL
.3934d5					OPL2_INIT
.3934d5	c2 20		rep #$20	                REP #$20        ; set A long
.3934d7	a9 00 00	lda #$0000	                LDA #$0000
.3934da	85 28		sta $28		                STA OPL2_REG_REGION
.3934dc	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3934de	85 30		sta $30		                STA OPL2_NOTE
.3934e0	85 32		sta $32		                STA OPL2_PARAMETER0
.3934e2	85 34		sta $34		                STA OPL2_PARAMETER2
.3934e4	a9 5f 14	lda #$145f	                LDA #<>INSTRUMENT_ACCORDN
.3934e7	85 50		sta $50		                STA RAD_ADDR
.3934e9	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3934ec	85 52		sta $52		                STA RAD_ADDR + 2
.3934ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3934f0	6b		rtl		                RTL
.3934f1					OPL2_Reset
.3934f1	6b		rtl		                RTL
.3934f2					OPL2_Get_FrequencyBlock
.3934f2	6b		rtl		                RTL
.3934f3					OPL2_GET_REGISTER
.3934f3	48		pha		                PHA             ; begin setdp macro
.3934f4	08		php		                PHP
.3934f5	c2 20		rep #$20	                REP #$20        ; set A long
.3934f7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934fa	5b		tcd		                TCD
.3934fb	28		plp		                PLP
.3934fc	68		pla		                PLA             ; end setdp macro
.3934fd	c2 20		rep #$20	                REP #$20        ; set A long
.3934ff	18		clc		              CLC
.393500	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393503	65 32		adc $32		              ADC OPL2_PARAMETER0
.393505	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393507	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39350a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39350c	e2 20		sep #$20	                SEP #$20        ; set A short
.39350e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393510	6b		rtl		              RTL
.393511					OPL2_GET_WAVEFORM_SELECT
.393511	48		pha		                PHA             ; begin setdp macro
.393512	08		php		                PHP
.393513	c2 20		rep #$20	                REP #$20        ; set A long
.393515	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393518	5b		tcd		                TCD
.393519	28		plp		                PLP
.39351a	68		pla		                PLA             ; end setdp macro
.39351b	c2 20		rep #$20	                REP #$20        ; set A long
.39351d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393520	69 01 00	adc #$0001	              ADC #$0001
.393523	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393525	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393528	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39352a	e2 20		sep #$20	                SEP #$20        ; set A short
.39352c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39352e	29 20		and #$20	              AND #$20
.393530	6b		rtl		              RTL
.393531					OPL2_GET_SCALINGLEVEL
.393531	48		pha		                PHA             ; begin setdp macro
.393532	08		php		                PHP
.393533	c2 20		rep #$20	                REP #$20        ; set A long
.393535	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393538	5b		tcd		                TCD
.393539	28		plp		                PLP
.39353a	68		pla		                PLA             ; end setdp macro
.39353b	c2 20		rep #$20	                REP #$20        ; set A long
.39353d	a9 40 00	lda #$0040	              LDA #$0040  ;
.393540	85 28		sta $28		              STA OPL2_REG_REGION
.393542	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393545	e2 20		sep #$20	                SEP #$20        ; set A short
.393547	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393549	29 c0		and #$c0	              AND #$C0
.39354b	4a		lsr a		              LSR A
.39354c	4a		lsr a		              LSR A
.39354d	4a		lsr a		              LSR A
.39354e	4a		lsr a		              LSR A
.39354f	4a		lsr a		              LSR A
.393550	4a		lsr a		              LSR A
.393551	6b		rtl		              RTL
.393552					OPL2_GET_BLOCK
.393552	48		pha		                PHA             ; begin setdp macro
.393553	08		php		                PHP
.393554	c2 20		rep #$20	                REP #$20        ; set A long
.393556	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393559	5b		tcd		                TCD
.39355a	28		plp		                PLP
.39355b	68		pla		                PLA             ; end setdp macro
.39355c	e2 20		sep #$20	                SEP #$20        ; set A short
.39355e	18		clc		              CLC
.39355f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393561	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393563	69 b0		adc #$b0	              ADC #$B0
.393565	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393567	a9 00		lda #$00	              LDA #$00
.393569	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39356b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39356d	18		clc		              CLC
.39356e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393571	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393573	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393575	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393578	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39357a	e2 20		sep #$20	                SEP #$20        ; set A short
.39357c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39357e	29 1c		and #$1c	              AND #$1C
.393580	4a		lsr a		              LSR A
.393581	4a		lsr a		              LSR A
.393582	6b		rtl		              RTL
.393583					OPL2_GET_KEYON
.393583	48		pha		                PHA             ; begin setdp macro
.393584	08		php		                PHP
.393585	c2 20		rep #$20	                REP #$20        ; set A long
.393587	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39358a	5b		tcd		                TCD
.39358b	28		plp		                PLP
.39358c	68		pla		                PLA             ; end setdp macro
.39358d	e2 20		sep #$20	                SEP #$20        ; set A short
.39358f	18		clc		              CLC
.393590	a5 27		lda $27		              LDA OPL2_CHANNEL
.393592	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393594	69 b0		adc #$b0	              ADC #$B0
.393596	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393598	a9 00		lda #$00	              LDA #$00
.39359a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39359c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39359e	18		clc		              CLC
.39359f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935a2	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3935a4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935a6	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935a9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3935ad	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935af	29 20		and #$20	              AND #$20
.3935b1	6b		rtl		              RTL
.3935b2					OPL2_GET_FEEDBACK
.3935b2	48		pha		                PHA             ; begin setdp macro
.3935b3	08		php		                PHP
.3935b4	c2 20		rep #$20	                REP #$20        ; set A long
.3935b6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935b9	5b		tcd		                TCD
.3935ba	28		plp		                PLP
.3935bb	68		pla		                PLA             ; end setdp macro
.3935bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3935be	18		clc		              CLC
.3935bf	a5 27		lda $27		              LDA OPL2_CHANNEL
.3935c1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3935c3	69 c0		adc #$c0	              ADC #$C0
.3935c5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3935c7	a9 00		lda #$00	              LDA #$00
.3935c9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3935cb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3935cd	18		clc		              CLC
.3935ce	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935d1	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3935d3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935d5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935d8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935da	e2 20		sep #$20	                SEP #$20        ; set A short
.3935dc	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935de	29 e0		and #$e0	              AND #$E0
.3935e0	4a		lsr a		              LSR
.3935e1	6b		rtl		              RTL
.3935e2					OPL2_GET_SYNTHMODE
.3935e2	48		pha		                PHA             ; begin setdp macro
.3935e3	08		php		                PHP
.3935e4	c2 20		rep #$20	                REP #$20        ; set A long
.3935e6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935e9	5b		tcd		                TCD
.3935ea	28		plp		                PLP
.3935eb	68		pla		                PLA             ; end setdp macro
.3935ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3935ee	18		clc		              CLC
.3935ef	a5 27		lda $27		              LDA OPL2_CHANNEL
.3935f1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3935f3	69 c0		adc #$c0	              ADC #$C0
.3935f5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3935f7	a9 00		lda #$00	              LDA #$00
.3935f9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3935fb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3935fd	18		clc		              CLC
.3935fe	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393601	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393603	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393605	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393608	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39360a	e2 20		sep #$20	                SEP #$20        ; set A short
.39360c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39360e	29 01		and #$01	              AND #$01
.393610	6b		rtl		              RTL
.393611					OPL2_GET_DEEPTREMOLO
.393611	48		pha		                PHA             ; begin setdp macro
.393612	08		php		                PHP
.393613	c2 20		rep #$20	                REP #$20        ; set A long
.393615	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393618	5b		tcd		                TCD
.393619	28		plp		                PLP
.39361a	68		pla		                PLA             ; end setdp macro
.39361b	c2 20		rep #$20	                REP #$20        ; set A long
.39361d	a9 bd 00	lda #$00bd	              LDA #$00BD;
.393620	85 28		sta $28		              STA OPL2_REG_REGION
.393622	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393625	e2 20		sep #$20	                SEP #$20        ; set A short
.393627	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393629	29 80		and #$80	              AND #$80
.39362b	6b		rtl		              RTL
.39362c					OPL2_GET_DEEPVIBRATO
.39362c	48		pha		                PHA             ; begin setdp macro
.39362d	08		php		                PHP
.39362e	c2 20		rep #$20	                REP #$20        ; set A long
.393630	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393633	5b		tcd		                TCD
.393634	28		plp		                PLP
.393635	68		pla		                PLA             ; end setdp macro
.393636	c2 20		rep #$20	                REP #$20        ; set A long
.393638	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39363b	69 bd 00	adc #$00bd	              ADC #$00BD
.39363e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393640	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393643	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393645	e2 20		sep #$20	                SEP #$20        ; set A short
.393647	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393649	29 40		and #$40	              AND #$40
.39364b	6b		rtl		              RTL
.39364c					OPL2_GET_PERCUSSION
.39364c	48		pha		                PHA             ; begin setdp macro
.39364d	08		php		                PHP
.39364e	c2 20		rep #$20	                REP #$20        ; set A long
.393650	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393653	5b		tcd		                TCD
.393654	28		plp		                PLP
.393655	68		pla		                PLA             ; end setdp macro
.393656	c2 20		rep #$20	                REP #$20        ; set A long
.393658	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39365b	69 bd 00	adc #$00bd	              ADC #$00BD
.39365e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393660	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393663	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393665	e2 20		sep #$20	                SEP #$20        ; set A short
.393667	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393669	29 20		and #$20	              AND #$20
.39366b	6b		rtl		              RTL
.39366c					OPL2_GET_DRUMS
.39366c	48		pha		                PHA             ; begin setdp macro
.39366d	08		php		                PHP
.39366e	c2 20		rep #$20	                REP #$20        ; set A long
.393670	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393673	5b		tcd		                TCD
.393674	28		plp		                PLP
.393675	68		pla		                PLA             ; end setdp macro
.393676	c2 20		rep #$20	                REP #$20        ; set A long
.393678	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39367b	69 bd 00	adc #$00bd	              ADC #$00BD
.39367e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393680	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393683	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393685	e2 20		sep #$20	                SEP #$20        ; set A short
.393687	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393689	29 1f		and #$1f	              AND #$1F
.39368b	6b		rtl		              RTL
.39368c					OPL2_Get_WaveForm
.39368c	6b		rtl		                RTL
.39368d					OPL2_PLAYNOTE
.39368d	48		pha		                PHA             ; begin setdp macro
.39368e	08		php		                PHP
.39368f	c2 20		rep #$20	                REP #$20        ; set A long
.393691	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393694	5b		tcd		                TCD
.393695	28		plp		                PLP
.393696	68		pla		                PLA             ; end setdp macro
.393697	e2 20		sep #$20	                SEP #$20        ; set A short
.393699	da		phx		                PHX
.39369a	a9 00		lda #$00	                LDA #$00
.39369c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39369e	20 75 3c	jsr $393c75	                JSR OPL2_SET_KEYON
.3936a1	20 3a 3c	jsr $393c3a	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3936a4	e2 10		sep #$10	                SEP #$10        ; set X short
.3936a6	a5 30		lda $30		                LDA OPL2_NOTE
.3936a8	3a		dec a		                DEC A
.3936a9	0a		asl a		                ASL A
.3936aa	aa		tax		                TAX
.3936ab	bf 24 14 39	lda $391424,x	                LDA @lnoteFNumbers,X
.3936af	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3936b1	e8		inx		                INX
.3936b2	bf 24 14 39	lda $391424,x	                LDA @lnoteFNumbers,X
.3936b6	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3936b8	22 b8 3b 39	jsl $393bb8	                JSL OPL2_SET_FNUMBER
.3936bc	a9 01		lda #$01	                LDA #$01
.3936be	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3936c0	20 75 3c	jsr $393c75	                JSR OPL2_SET_KEYON
.3936c3	c2 10		rep #$10	                REP #$10        ; set X long
.3936c5	fa		plx		                PLX
.3936c6	6b		rtl		                RTL
.3936c7					OPL2_PLAYDRUM
.3936c7	6b		rtl		                RTL
.3936c8					OPL2_SET_INSTRUMENT
.3936c8	48		pha		                PHA             ; begin setdp macro
.3936c9	08		php		                PHP
.3936ca	c2 20		rep #$20	                REP #$20        ; set A long
.3936cc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936cf	5b		tcd		                TCD
.3936d0	28		plp		                PLP
.3936d1	68		pla		                PLA             ; end setdp macro
.3936d2	38		sec		              SEC ; Set the WaveFormSelect to True
.3936d3	22 b6 38 39	jsl $3938b6	              JSL OPL2_SET_WAVEFORMSELECT;
.3936d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936d9	c2 10		rep #$10	                REP #$10        ; set X long
.3936db	a0 00 00	ldy #$0000	              LDY #$0000
.3936de	a2 00 00	ldx #$0000	              LDX #$0000
.3936e1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3936e3	85 35		sta $35		              STA OPL2_PARAMETER3
.3936e5	c8		iny		              INY
.3936e6	c9 06		cmp #$06	              CMP #$06
.3936e8	d0 03		bne $3936ed	              BNE PERCUSSION_NEXT07
.3936ea	82 70 01	brl $39385d	              BRL Percussion_6
.3936ed					PERCUSSION_NEXT07
.3936ed	c9 07		cmp #$07	              CMP #$07
.3936ef	d0 03		bne $3936f4	              BNE PERCUSSION_NEXT08
.3936f1	82 44 01	brl $393838	              BRL Percussion_7
.3936f4					PERCUSSION_NEXT08
.3936f4	c9 08		cmp #$08	              CMP #$08
.3936f6	d0 03		bne $3936fb	              BNE PERCUSSION_NEXT09
.3936f8	82 18 01	brl $393813	              BRL Percussion_8
.3936fb					PERCUSSION_NEXT09
.3936fb	c9 09		cmp #$09	              CMP #$09
.3936fd	d0 03		bne $393702	              BNE PERCUSSION_NEXT0A
.3936ff	82 ec 00	brl $3937ee	              BRL Percussion_9
.393702					PERCUSSION_NEXT0A
.393702	c9 0a		cmp #$0a	              CMP #$0A
.393704	d0 03		bne $393709	              BNE Percussion_Default
.393706	82 c0 00	brl $3937c9	              BRL Percussion_A
.393709					Percussion_Default
.393709	a9 00		lda #$00	              LDA #$00
.39370b	85 26		sta $26		              STA OPL2_OPERATOR
.39370d	c2 20		rep #$20	                REP #$20        ; set A long
.39370f	a9 20 00	lda #$0020	              LDA #$0020;
.393712	85 28		sta $28		              STA OPL2_REG_REGION
.393714	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393717	e2 20		sep #$20	                SEP #$20        ; set A short
.393719	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39371b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39371d	c8		iny		              INY
.39371e	c2 20		rep #$20	                REP #$20        ; set A long
.393720	a9 40 00	lda #$0040	              LDA #$0040;
.393723	85 28		sta $28		              STA OPL2_REG_REGION
.393725	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393728	e2 20		sep #$20	                SEP #$20        ; set A short
.39372a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39372c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39372e	c8		iny		              INY
.39372f	c2 20		rep #$20	                REP #$20        ; set A long
.393731	a9 60 00	lda #$0060	              LDA #$0060;
.393734	85 28		sta $28		              STA OPL2_REG_REGION
.393736	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393739	e2 20		sep #$20	                SEP #$20        ; set A short
.39373b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39373d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39373f	c8		iny		              INY
.393740	c2 20		rep #$20	                REP #$20        ; set A long
.393742	a9 80 00	lda #$0080	              LDA #$0080;
.393745	85 28		sta $28		              STA OPL2_REG_REGION
.393747	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.39374a	e2 20		sep #$20	                SEP #$20        ; set A short
.39374c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39374e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393750	c8		iny		              INY
.393751	c2 20		rep #$20	                REP #$20        ; set A long
.393753	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393756	85 28		sta $28		              STA OPL2_REG_REGION
.393758	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.39375b	e2 20		sep #$20	                SEP #$20        ; set A short
.39375d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39375f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393761	c8		iny		              INY
.393762	e2 10		sep #$10	                SEP #$10        ; set X short
.393764	a5 27		lda $27		              LDA OPL2_CHANNEL
.393766	29 0f		and #$0f	              AND #$0F
.393768	aa		tax		              TAX
.393769	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39376b	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39376f	c8		iny		              INY
.393770	a9 01		lda #$01	              LDA #$01
.393772	85 26		sta $26		              STA OPL2_OPERATOR
.393774	c2 20		rep #$20	                REP #$20        ; set A long
.393776	a9 20 00	lda #$0020	              LDA #$0020;
.393779	85 28		sta $28		              STA OPL2_REG_REGION
.39377b	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.39377e	e2 20		sep #$20	                SEP #$20        ; set A short
.393780	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393782	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393784	c8		iny		              INY
.393785	c2 20		rep #$20	                REP #$20        ; set A long
.393787	a9 40 00	lda #$0040	              LDA #$0040;
.39378a	85 28		sta $28		              STA OPL2_REG_REGION
.39378c	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.39378f	e2 20		sep #$20	                SEP #$20        ; set A short
.393791	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393793	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393795	c8		iny		              INY
.393796	c2 20		rep #$20	                REP #$20        ; set A long
.393798	a9 60 00	lda #$0060	              LDA #$0060;
.39379b	85 28		sta $28		              STA OPL2_REG_REGION
.39379d	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3937a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937a2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3937a4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937a6	c8		iny		              INY
.3937a7	c2 20		rep #$20	                REP #$20        ; set A long
.3937a9	a9 80 00	lda #$0080	              LDA #$0080;
.3937ac	85 28		sta $28		              STA OPL2_REG_REGION
.3937ae	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3937b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3937b5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937b7	c8		iny		              INY
.3937b8	c2 20		rep #$20	                REP #$20        ; set A long
.3937ba	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3937bd	85 28		sta $28		              STA OPL2_REG_REGION
.3937bf	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3937c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3937c4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3937c6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937c8	6b		rtl		                RTL
.3937c9					Percussion_A
.3937c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3937cb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937cd	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3937d1	c8		iny		              INY
.3937d2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3937d4	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3937d8	c8		iny		              INY
.3937d9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3937db	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3937df	c8		iny		              INY
.3937e0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3937e2	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3937e6	c8		iny		              INY
.3937e7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3937e9	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3937ed	6b		rtl		                RTL
.3937ee					Percussion_9
.3937ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937f2	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3937f6	c8		iny		              INY
.3937f7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3937f9	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3937fd	c8		iny		              INY
.3937fe	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393800	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393804	c8		iny		              INY
.393805	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393807	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.39380b	c8		iny		              INY
.39380c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39380e	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393812	6b		rtl		              RTL
.393813					Percussion_8
.393813	e2 20		sep #$20	                SEP #$20        ; set A short
.393815	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393817	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.39381b	c8		iny		              INY
.39381c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39381e	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393822	c8		iny		              INY
.393823	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393825	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393829	c8		iny		              INY
.39382a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39382c	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393830	c8		iny		              INY
.393831	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393833	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393837	6b		rtl		              RTL
.393838					Percussion_7
.393838	e2 20		sep #$20	                SEP #$20        ; set A short
.39383a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39383c	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393840	c8		iny		              INY
.393841	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393843	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393847	c8		iny		              INY
.393848	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39384a	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.39384e	c8		iny		              INY
.39384f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393851	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393855	c8		iny		              INY
.393856	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393858	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.39385c	6b		rtl		              RTL
.39385d					Percussion_6
.39385d	e2 20		sep #$20	                SEP #$20        ; set A short
.39385f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393861	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393865	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393869	c8		iny		              INY
.39386a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39386c	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393870	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393874	c8		iny		              INY
.393875	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393877	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.39387b	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.39387f	c8		iny		              INY
.393880	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393882	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393886	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.39388a	c8		iny		              INY
.39388b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39388d	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393891	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393895	6b		rtl		              RTL
.393896					OPL2_SET_REGISTER
.393896	48		pha		                PHA             ; begin setdp macro
.393897	08		php		                PHP
.393898	c2 20		rep #$20	                REP #$20        ; set A long
.39389a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39389d	5b		tcd		                TCD
.39389e	28		plp		                PLP
.39389f	68		pla		                PLA             ; end setdp macro
.3938a0	c2 20		rep #$20	                REP #$20        ; set A long
.3938a2	18		clc		              CLC
.3938a3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938a6	65 32		adc $32		              ADC OPL2_PARAMETER0
.3938a8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938aa	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938ad	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938af	e2 20		sep #$20	                SEP #$20        ; set A short
.3938b1	a5 33		lda $33		              LDA OPL2_PARAMETER1
.3938b3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938b5	6b		rtl		              RTL
.3938b6					OPL2_SET_WAVEFORMSELECT
.3938b6	48		pha		                PHA             ; begin setdp macro
.3938b7	08		php		                PHP
.3938b8	c2 20		rep #$20	                REP #$20        ; set A long
.3938ba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938bd	5b		tcd		                TCD
.3938be	28		plp		                PLP
.3938bf	68		pla		                PLA             ; end setdp macro
.3938c0	c2 20		rep #$20	                REP #$20        ; set A long
.3938c2	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3938c5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938c7	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938ca	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3938ce	b0 07		bcs $3938d7	              BCS OPL2_Set_WaveFormSelect_set
.3938d0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938d2	29 df		and #$df	              AND #$DF
.3938d4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938d6	6b		rtl		              RTL
.3938d7					OPL2_Set_WaveFormSelect_set
.3938d7	48		pha		                PHA             ; begin setdp macro
.3938d8	08		php		                PHP
.3938d9	c2 20		rep #$20	                REP #$20        ; set A long
.3938db	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938de	5b		tcd		                TCD
.3938df	28		plp		                PLP
.3938e0	68		pla		                PLA             ; end setdp macro
.3938e1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e3	09 20 00	ora #$0020	              ORA #$20
.3938e6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938e8	6b		rtl		                RTL
.3938e9					OPL2_SET_TREMOLO
.3938e9	48		pha		                PHA             ; begin setdp macro
.3938ea	08		php		                PHP
.3938eb	c2 20		rep #$20	                REP #$20        ; set A long
.3938ed	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f0	5b		tcd		                TCD
.3938f1	28		plp		                PLP
.3938f2	68		pla		                PLA             ; end setdp macro
.3938f3	08		php		                PHP ; Push the Carry
.3938f4	c2 20		rep #$20	                REP #$20        ; set A long
.3938f6	18		clc		                CLC
.3938f7	a9 20 00	lda #$0020	                LDA #$0020 ;
.3938fa	85 28		sta $28		                STA OPL2_REG_REGION
.3938fc	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.3938ff	28		plp		                PLP ; Pull the Carry out
.393900	e2 20		sep #$20	                SEP #$20        ; set A short
.393902	b0 08		bcs $39390c	                BCS OPL2_Set_Tremolo_Set;
.393904	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393906	29 7f		and #$7f	                AND #$7F
.393908	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39390a	80 06		bra $393912	                BRA OPL2_Set_Tremolo_Exit
.39390c					OPL2_Set_Tremolo_Set
.39390c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39390e	09 80		ora #$80	                ORA #$80
.393910	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393912					OPL2_Set_Tremolo_Exit
.393912	6b		rtl		                RTL
.393913					OPL2_GET_TREMOLO
.393913	48		pha		                PHA             ; begin setdp macro
.393914	08		php		                PHP
.393915	c2 20		rep #$20	                REP #$20        ; set A long
.393917	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39391a	5b		tcd		                TCD
.39391b	28		plp		                PLP
.39391c	68		pla		                PLA             ; end setdp macro
.39391d	c2 20		rep #$20	                REP #$20        ; set A long
.39391f	a9 20 00	lda #$0020	                LDA #$0020;
.393922	85 28		sta $28		                STA OPL2_REG_REGION
.393924	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393927	e2 20		sep #$20	                SEP #$20        ; set A short
.393929	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39392b	29 80		and #$80	                AND #$80
.39392d	6b		rtl		                RTL
.39392e					OPL2_SET_VIBRATO
.39392e	48		pha		                PHA             ; begin setdp macro
.39392f	08		php		                PHP
.393930	c2 20		rep #$20	                REP #$20        ; set A long
.393932	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393935	5b		tcd		                TCD
.393936	28		plp		                PLP
.393937	68		pla		                PLA             ; end setdp macro
.393938	08		php		                PHP ; Push the Carry
.393939	c2 20		rep #$20	                REP #$20        ; set A long
.39393b	18		clc		                CLC
.39393c	a9 20 00	lda #$0020	                LDA #$0020;
.39393f	85 28		sta $28		                STA OPL2_REG_REGION
.393941	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393944	28		plp		                PLP ; Pull the Carry out
.393945	e2 20		sep #$20	                SEP #$20        ; set A short
.393947	b0 08		bcs $393951	                BCS OPL2_Set_Vibrato_Set;
.393949	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39394b	29 bf		and #$bf	                AND #$BF
.39394d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39394f	80 06		bra $393957	                BRA OPL2_Set_Vibrato_Exit
.393951					OPL2_Set_Vibrato_Set
.393951	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393953	09 40		ora #$40	                ORA #$40
.393955	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393957					OPL2_Set_Vibrato_Exit
.393957	6b		rtl		                RTL
.393958					OPL2_GET_VIBRATO
.393958	48		pha		                PHA             ; begin setdp macro
.393959	08		php		                PHP
.39395a	c2 20		rep #$20	                REP #$20        ; set A long
.39395c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39395f	5b		tcd		                TCD
.393960	28		plp		                PLP
.393961	68		pla		                PLA             ; end setdp macro
.393962	c2 20		rep #$20	                REP #$20        ; set A long
.393964	a9 20 00	lda #$0020	                LDA #$0020;
.393967	85 28		sta $28		                STA OPL2_REG_REGION
.393969	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.39396c	e2 20		sep #$20	                SEP #$20        ; set A short
.39396e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393970	29 40		and #$40	                AND #$40
.393972	6b		rtl		                RTL
.393973					OPL2_SET_MAINTAINSUSTAIN
.393973	48		pha		                PHA             ; begin setdp macro
.393974	08		php		                PHP
.393975	c2 20		rep #$20	                REP #$20        ; set A long
.393977	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39397a	5b		tcd		                TCD
.39397b	28		plp		                PLP
.39397c	68		pla		                PLA             ; end setdp macro
.39397d	08		php		              PHP ; Push the Carry
.39397e	c2 20		rep #$20	                REP #$20        ; set A long
.393980	18		clc		              CLC
.393981	a9 20 00	lda #$0020	              LDA #$0020;
.393984	85 28		sta $28		              STA OPL2_REG_REGION
.393986	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393989	28		plp		              PLP ; Pull the Carry out
.39398a	e2 20		sep #$20	                SEP #$20        ; set A short
.39398c	b0 08		bcs $393996	              BCS OPL2_Set_MaintainSustain_Set;
.39398e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393990	29 df		and #$df	              AND #$DF
.393992	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393994	80 06		bra $39399c	              BRA OPL2_Set_MaintainSustain_Exit
.393996					OPL2_Set_MaintainSustain_Set
.393996	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393998	09 20		ora #$20	              ORA #$20
.39399a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39399c					OPL2_Set_MaintainSustain_Exit
.39399c	6b		rtl		                RTL
.39399d					OPL2_GET_MAINTAINSUSTAIN
.39399d	48		pha		                PHA             ; begin setdp macro
.39399e	08		php		                PHP
.39399f	c2 20		rep #$20	                REP #$20        ; set A long
.3939a1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939a4	5b		tcd		                TCD
.3939a5	28		plp		                PLP
.3939a6	68		pla		                PLA             ; end setdp macro
.3939a7	c2 20		rep #$20	                REP #$20        ; set A long
.3939a9	a9 20 00	lda #$0020	              LDA #$0020;
.3939ac	85 28		sta $28		              STA OPL2_REG_REGION
.3939ae	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3939b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3939b3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939b5	29 20		and #$20	              AND #$20
.3939b7	6b		rtl		                RTL
.3939b8					OPL2_SET_ENVELOPESCALING
.3939b8	48		pha		                PHA             ; begin setdp macro
.3939b9	08		php		                PHP
.3939ba	c2 20		rep #$20	                REP #$20        ; set A long
.3939bc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939bf	5b		tcd		                TCD
.3939c0	28		plp		                PLP
.3939c1	68		pla		                PLA             ; end setdp macro
.3939c2	08		php		              PHP ; Push the Carry
.3939c3	c2 20		rep #$20	                REP #$20        ; set A long
.3939c5	18		clc		              CLC
.3939c6	a9 20 00	lda #$0020	              LDA #$0020;
.3939c9	85 28		sta $28		              STA OPL2_REG_REGION
.3939cb	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3939ce	28		plp		              PLP ; Pull the Carry out
.3939cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3939d1	b0 08		bcs $3939db	              BCS OPL2_Set_EnvelopeScaling_Set;
.3939d3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939d5	29 ef		and #$ef	              AND #$EF
.3939d7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939d9	80 06		bra $3939e1	              BRA OPL2_Set_EnvelopeScaling_Exit
.3939db					OPL2_Set_EnvelopeScaling_Set
.3939db	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939dd	09 10		ora #$10	              ORA #$10
.3939df	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939e1					OPL2_Set_EnvelopeScaling_Exit
.3939e1	6b		rtl		                RTL
.3939e2					OPL2_GET_ENVELOPESCALING
.3939e2	48		pha		                PHA             ; begin setdp macro
.3939e3	08		php		                PHP
.3939e4	c2 20		rep #$20	                REP #$20        ; set A long
.3939e6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e9	5b		tcd		                TCD
.3939ea	28		plp		                PLP
.3939eb	68		pla		                PLA             ; end setdp macro
.3939ec	c2 20		rep #$20	                REP #$20        ; set A long
.3939ee	a9 20 00	lda #$0020	              LDA #$0020;
.3939f1	85 28		sta $28		              STA OPL2_REG_REGION
.3939f3	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.3939f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3939f8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939fa	29 10		and #$10	              AND #$10
.3939fc	6b		rtl		                RTL
.3939fd					OPL2_GET_MODFREQMULTIPLE
.3939fd	48		pha		                PHA             ; begin setdp macro
.3939fe	08		php		                PHP
.3939ff	c2 20		rep #$20	                REP #$20        ; set A long
.393a01	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a04	5b		tcd		                TCD
.393a05	28		plp		                PLP
.393a06	68		pla		                PLA             ; end setdp macro
.393a07	c2 20		rep #$20	                REP #$20        ; set A long
.393a09	a9 20 00	lda #$0020	              LDA #$0020;
.393a0c	85 28		sta $28		              STA OPL2_REG_REGION
.393a0e	20 f4 3d	jsr $393df4	              JSR OPL2_GET_REG_OFFSET
.393a11	e2 20		sep #$20	                SEP #$20        ; set A short
.393a13	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a15	29 0f		and #$0f	              AND #$0F
.393a17	6b		rtl		              RTL
.393a18					OPL2_SET_MODFREQMULTIPLE
.393a18	48		pha		                PHA             ; begin setdp macro
.393a19	08		php		                PHP
.393a1a	c2 20		rep #$20	                REP #$20        ; set A long
.393a1c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a1f	5b		tcd		                TCD
.393a20	28		plp		                PLP
.393a21	68		pla		                PLA             ; end setdp macro
.393a22	c2 20		rep #$20	                REP #$20        ; set A long
.393a24	a9 20 00	lda #$0020	                LDA #$0020;
.393a27	85 28		sta $28		                STA OPL2_REG_REGION
.393a29	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393a2c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a2e	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393a30	29 0f		and #$0f	                AND #$0F
.393a32	85 32		sta $32		                STA OPL2_PARAMETER0
.393a34	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a36	29 f0		and #$f0	                AND #$F0
.393a38	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a3a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a3c	6b		rtl		                RTL
.393a3d					OPL2_SET_SCALINGLEVEL
.393a3d	48		pha		                PHA             ; begin setdp macro
.393a3e	08		php		                PHP
.393a3f	c2 20		rep #$20	                REP #$20        ; set A long
.393a41	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a44	5b		tcd		                TCD
.393a45	28		plp		                PLP
.393a46	68		pla		                PLA             ; end setdp macro
.393a47	c2 20		rep #$20	                REP #$20        ; set A long
.393a49	a9 40 00	lda #$0040	                LDA #$0040;
.393a4c	85 28		sta $28		                STA OPL2_REG_REGION
.393a4e	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393a51	e2 20		sep #$20	                SEP #$20        ; set A short
.393a53	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a55	29 03		and #$03	                AND #$03
.393a57	0a		asl a		                ASL
.393a58	0a		asl a		                ASL
.393a59	0a		asl a		                ASL
.393a5a	0a		asl a		                ASL
.393a5b	0a		asl a		                ASL
.393a5c	0a		asl a		                ASL
.393a5d	85 32		sta $32		                STA OPL2_PARAMETER0
.393a5f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a61	29 3f		and #$3f	                AND #$3F
.393a63	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a65	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a67	6b		rtl		                RTL
.393a68					OPL2_SET_VOLUME
.393a68	48		pha		                PHA             ; begin setdp macro
.393a69	08		php		                PHP
.393a6a	c2 20		rep #$20	                REP #$20        ; set A long
.393a6c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a6f	5b		tcd		                TCD
.393a70	28		plp		                PLP
.393a71	68		pla		                PLA             ; end setdp macro
.393a72	c2 20		rep #$20	                REP #$20        ; set A long
.393a74	a9 40 00	lda #$0040	                LDA #$0040  ;
.393a77	85 28		sta $28		                STA OPL2_REG_REGION
.393a79	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393a7c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a7e	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393a80	29 3f		and #$3f	                AND #$3F
.393a82	85 32		sta $32		                STA OPL2_PARAMETER0
.393a84	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a86	29 c0		and #$c0	                AND #$C0
.393a88	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a8a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a8c	6b		rtl		                RTL
.393a8d					OPL2_GET_VOLUME
.393a8d	48		pha		                PHA             ; begin setdp macro
.393a8e	08		php		                PHP
.393a8f	c2 20		rep #$20	                REP #$20        ; set A long
.393a91	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a94	5b		tcd		                TCD
.393a95	28		plp		                PLP
.393a96	68		pla		                PLA             ; end setdp macro
.393a97	c2 20		rep #$20	                REP #$20        ; set A long
.393a99	a9 40 00	lda #$0040	                LDA #$0040  ;
.393a9c	85 28		sta $28		                STA OPL2_REG_REGION
.393a9e	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393aa1	e2 20		sep #$20	                SEP #$20        ; set A short
.393aa3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aa5	29 3f		and #$3f	                AND #$3F
.393aa7	6b		rtl		                RTL
.393aa8					OPL2_SET_ATTACK
.393aa8	48		pha		                PHA             ; begin setdp macro
.393aa9	08		php		                PHP
.393aaa	c2 20		rep #$20	                REP #$20        ; set A long
.393aac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aaf	5b		tcd		                TCD
.393ab0	28		plp		                PLP
.393ab1	68		pla		                PLA             ; end setdp macro
.393ab2	c2 20		rep #$20	                REP #$20        ; set A long
.393ab4	a9 60 00	lda #$0060	                LDA #$0060  ;
.393ab7	85 28		sta $28		                STA OPL2_REG_REGION
.393ab9	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393abc	e2 20		sep #$20	                SEP #$20        ; set A short
.393abe	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393ac0	29 0f		and #$0f	                AND #$0F
.393ac2	0a		asl a		                ASL
.393ac3	0a		asl a		                ASL
.393ac4	0a		asl a		                ASL
.393ac5	0a		asl a		                ASL
.393ac6	85 32		sta $32		                STA OPL2_PARAMETER0
.393ac8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aca	29 0f		and #$0f	                AND #$0F
.393acc	05 32		ora $32		                ORA OPL2_PARAMETER0
.393ace	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ad0	6b		rtl		                RTL
.393ad1					OPL2_GET_ATTACK
.393ad1	48		pha		                PHA             ; begin setdp macro
.393ad2	08		php		                PHP
.393ad3	c2 20		rep #$20	                REP #$20        ; set A long
.393ad5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ad8	5b		tcd		                TCD
.393ad9	28		plp		                PLP
.393ada	68		pla		                PLA             ; end setdp macro
.393adb	c2 20		rep #$20	                REP #$20        ; set A long
.393add	a9 60 00	lda #$0060	                LDA #$0060
.393ae0	85 28		sta $28		                STA OPL2_REG_REGION
.393ae2	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393ae5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ae7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ae9	29 f0		and #$f0	                AND #$F0
.393aeb	4a		lsr a		                LSR
.393aec	4a		lsr a		                LSR
.393aed	4a		lsr a		                LSR
.393aee	4a		lsr a		                LSR
.393aef	6b		rtl		                RTL
.393af0					OPL2_SET_DECAY
.393af0	48		pha		                PHA             ; begin setdp macro
.393af1	08		php		                PHP
.393af2	c2 20		rep #$20	                REP #$20        ; set A long
.393af4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393af7	5b		tcd		                TCD
.393af8	28		plp		                PLP
.393af9	68		pla		                PLA             ; end setdp macro
.393afa	c2 20		rep #$20	                REP #$20        ; set A long
.393afc	a9 60 00	lda #$0060	                LDA #$0060;
.393aff	85 28		sta $28		                STA OPL2_REG_REGION
.393b01	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393b04	e2 20		sep #$20	                SEP #$20        ; set A short
.393b06	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b08	29 0f		and #$0f	                AND #$0F
.393b0a	85 32		sta $32		                STA OPL2_PARAMETER0
.393b0c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b0e	29 f0		and #$f0	                AND #$F0
.393b10	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b12	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b14	6b		rtl		                RTL
.393b15					OPL2_GET_DECAY
.393b15	48		pha		                PHA             ; begin setdp macro
.393b16	08		php		                PHP
.393b17	c2 20		rep #$20	                REP #$20        ; set A long
.393b19	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b1c	5b		tcd		                TCD
.393b1d	28		plp		                PLP
.393b1e	68		pla		                PLA             ; end setdp macro
.393b1f	c2 20		rep #$20	                REP #$20        ; set A long
.393b21	a9 60 00	lda #$0060	                LDA #$0060
.393b24	85 28		sta $28		                STA OPL2_REG_REGION
.393b26	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393b29	e2 20		sep #$20	                SEP #$20        ; set A short
.393b2b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b2d	29 0f		and #$0f	                AND #$0F
.393b2f	6b		rtl		                RTL
.393b30					OPL2_SET_SUSTAIN
.393b30	48		pha		                PHA             ; begin setdp macro
.393b31	08		php		                PHP
.393b32	c2 20		rep #$20	                REP #$20        ; set A long
.393b34	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b37	5b		tcd		                TCD
.393b38	28		plp		                PLP
.393b39	68		pla		                PLA             ; end setdp macro
.393b3a	c2 20		rep #$20	                REP #$20        ; set A long
.393b3c	a9 80 00	lda #$0080	                LDA #$0080;
.393b3f	85 28		sta $28		                STA OPL2_REG_REGION
.393b41	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393b44	e2 20		sep #$20	                SEP #$20        ; set A short
.393b46	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b48	29 0f		and #$0f	                AND #$0F
.393b4a	0a		asl a		                ASL
.393b4b	0a		asl a		                ASL
.393b4c	0a		asl a		                ASL
.393b4d	0a		asl a		                ASL
.393b4e	85 32		sta $32		                STA OPL2_PARAMETER0
.393b50	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b52	29 0f		and #$0f	                AND #$0F
.393b54	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b56	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b58	6b		rtl		                RTL
.393b59					OPL2_GET_SUSTAIN
.393b59	48		pha		                PHA             ; begin setdp macro
.393b5a	08		php		                PHP
.393b5b	c2 20		rep #$20	                REP #$20        ; set A long
.393b5d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b60	5b		tcd		                TCD
.393b61	28		plp		                PLP
.393b62	68		pla		                PLA             ; end setdp macro
.393b63	c2 20		rep #$20	                REP #$20        ; set A long
.393b65	a9 80 00	lda #$0080	                LDA #$0080
.393b68	85 28		sta $28		                STA OPL2_REG_REGION
.393b6a	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393b6d	e2 20		sep #$20	                SEP #$20        ; set A short
.393b6f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b71	29 f0		and #$f0	                AND #$F0
.393b73	4a		lsr a		                LSR
.393b74	4a		lsr a		                LSR
.393b75	4a		lsr a		                LSR
.393b76	4a		lsr a		                LSR
.393b77	6b		rtl		                RTL
.393b78					OPL2_SET_RELEASE
.393b78	48		pha		                PHA             ; begin setdp macro
.393b79	08		php		                PHP
.393b7a	c2 20		rep #$20	                REP #$20        ; set A long
.393b7c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b7f	5b		tcd		                TCD
.393b80	28		plp		                PLP
.393b81	68		pla		                PLA             ; end setdp macro
.393b82	c2 20		rep #$20	                REP #$20        ; set A long
.393b84	a9 80 00	lda #$0080	                LDA #$0080;
.393b87	85 28		sta $28		                STA OPL2_REG_REGION
.393b89	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393b8c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b8e	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b90	29 0f		and #$0f	                AND #$0F
.393b92	85 32		sta $32		                STA OPL2_PARAMETER0
.393b94	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b96	29 f0		and #$f0	                AND #$F0
.393b98	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b9a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b9c	6b		rtl		                RTL
.393b9d					OPL2_GET_RELEASE
.393b9d	48		pha		                PHA             ; begin setdp macro
.393b9e	08		php		                PHP
.393b9f	c2 20		rep #$20	                REP #$20        ; set A long
.393ba1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba4	5b		tcd		                TCD
.393ba5	28		plp		                PLP
.393ba6	68		pla		                PLA             ; end setdp macro
.393ba7	c2 20		rep #$20	                REP #$20        ; set A long
.393ba9	a9 80 00	lda #$0080	                LDA #$0080
.393bac	85 28		sta $28		                STA OPL2_REG_REGION
.393bae	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393bb1	e2 20		sep #$20	                SEP #$20        ; set A short
.393bb3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bb5	29 0f		and #$0f	                AND #$0F
.393bb7	6b		rtl		                RTL
.393bb8					OPL2_SET_FNUMBER
.393bb8	48		pha		                PHA             ; begin setdp macro
.393bb9	08		php		                PHP
.393bba	c2 20		rep #$20	                REP #$20        ; set A long
.393bbc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bbf	5b		tcd		                TCD
.393bc0	28		plp		                PLP
.393bc1	68		pla		                PLA             ; end setdp macro
.393bc2	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc4	18		clc		                CLC
.393bc5	a5 27		lda $27		                LDA OPL2_CHANNEL
.393bc7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393bc9	69 a0		adc #$a0	                ADC #$A0
.393bcb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393bcd	a9 00		lda #$00	                LDA #$00
.393bcf	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393bd1	c2 30		rep #$30	                REP #$30        ; set A&X long
.393bd3	18		clc		                CLC
.393bd4	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393bd7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393bd9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bdb	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393bde	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393be0	e2 20		sep #$20	                SEP #$20        ; set A short
.393be2	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393be4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393be6	18		clc		                CLC
.393be7	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393be9	69 10		adc #$10	                ADC #$10
.393beb	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bed	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393bef	29 03		and #$03	                AND #$03
.393bf1	85 33		sta $33		                STA OPL2_PARAMETER1
.393bf3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bf5	29 fc		and #$fc	                AND #$FC
.393bf7	05 33		ora $33		                ORA OPL2_PARAMETER1
.393bf9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bfb	6b		rtl		                RTL
.393bfc					OPL2_GET_FNUMBER
.393bfc	48		pha		                PHA             ; begin setdp macro
.393bfd	08		php		                PHP
.393bfe	c2 20		rep #$20	                REP #$20        ; set A long
.393c00	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c03	5b		tcd		                TCD
.393c04	28		plp		                PLP
.393c05	68		pla		                PLA             ; end setdp macro
.393c06	e2 20		sep #$20	                SEP #$20        ; set A short
.393c08	18		clc		                CLC
.393c09	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c0b	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c0d	69 a0		adc #$a0	                ADC #$A0
.393c0f	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c11	a9 00		lda #$00	                LDA #$00
.393c13	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c15	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c17	18		clc		                CLC
.393c18	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c1b	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c1d	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c1f	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c22	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c24	e2 20		sep #$20	                SEP #$20        ; set A short
.393c26	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c28	85 32		sta $32		                STA OPL2_PARAMETER0
.393c2a	18		clc		                CLC
.393c2b	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393c2d	69 10		adc #$10	                ADC #$10
.393c2f	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c31	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c33	29 03		and #$03	                AND #$03
.393c35	85 33		sta $33		                STA OPL2_PARAMETER1
.393c37	6b		rtl		                RTL
.393c38					OPL2_Set_Frequency
.393c38	6b		rtl		                RTL
.393c39					OPL2_Get_Frequency
.393c39	6b		rtl		                RTL
.393c3a					OPL2_SET_BLOCK
.393c3a	48		pha		                PHA             ; begin setdp macro
.393c3b	08		php		                PHP
.393c3c	c2 20		rep #$20	                REP #$20        ; set A long
.393c3e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c41	5b		tcd		                TCD
.393c42	28		plp		                PLP
.393c43	68		pla		                PLA             ; end setdp macro
.393c44	e2 20		sep #$20	                SEP #$20        ; set A short
.393c46	18		clc		                CLC
.393c47	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c49	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c4b	69 b0		adc #$b0	                ADC #$B0
.393c4d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c4f	a9 00		lda #$00	                LDA #$00
.393c51	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c53	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c55	18		clc		                CLC
.393c56	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c59	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c5b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c5d	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c60	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c62	e2 20		sep #$20	                SEP #$20        ; set A short
.393c64	a5 31		lda $31		                LDA OPL2_OCTAVE
.393c66	29 07		and #$07	                AND #$07
.393c68	0a		asl a		                ASL
.393c69	0a		asl a		                ASL
.393c6a	85 31		sta $31		                STA OPL2_OCTAVE
.393c6c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c6e	29 e3		and #$e3	                AND #$E3
.393c70	05 31		ora $31		                ORA OPL2_OCTAVE
.393c72	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c74	60		rts		                RTS
.393c75					OPL2_SET_KEYON
.393c75	48		pha		                PHA             ; begin setdp macro
.393c76	08		php		                PHP
.393c77	c2 20		rep #$20	                REP #$20        ; set A long
.393c79	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c7c	5b		tcd		                TCD
.393c7d	28		plp		                PLP
.393c7e	68		pla		                PLA             ; end setdp macro
.393c7f	e2 20		sep #$20	                SEP #$20        ; set A short
.393c81	18		clc		                CLC
.393c82	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c84	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c86	69 b0		adc #$b0	                ADC #$B0
.393c88	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c8a	a9 00		lda #$00	                LDA #$00
.393c8c	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c8e	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c90	18		clc		                CLC
.393c91	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c94	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c96	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c98	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c9b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c9d	e2 20		sep #$20	                SEP #$20        ; set A short
.393c9f	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393ca1	29 01		and #$01	                AND #$01
.393ca3	f0 02		beq $393ca7	                BEQ SET_KEYON_OFF
.393ca5	a9 20		lda #$20	                LDA #$20
.393ca7					    SET_KEYON_OFF
.393ca7	85 32		sta $32		                STA OPL2_PARAMETER0
.393ca9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cab	29 df		and #$df	                AND #$DF
.393cad	05 32		ora $32		                ORA OPL2_PARAMETER0
.393caf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cb1	60		rts		                RTS
.393cb2					OPL2_SET_FEEDBACK
.393cb2	48		pha		                PHA             ; begin setdp macro
.393cb3	08		php		                PHP
.393cb4	c2 20		rep #$20	                REP #$20        ; set A long
.393cb6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cb9	5b		tcd		                TCD
.393cba	28		plp		                PLP
.393cbb	68		pla		                PLA             ; end setdp macro
.393cbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393cbe	18		clc		              CLC
.393cbf	a5 27		lda $27		              LDA OPL2_CHANNEL
.393cc1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393cc3	69 c0		adc #$c0	              ADC #$C0
.393cc5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393cc7	a9 00		lda #$00	              LDA #$00
.393cc9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393ccb	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ccd	18		clc		              CLC
.393cce	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393cd1	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393cd3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393cd5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393cd8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393cda	e2 20		sep #$20	                SEP #$20        ; set A short
.393cdc	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393cde	29 07		and #$07	              AND #$07
.393ce0	0a		asl a		              ASL
.393ce1	85 32		sta $32		              STA OPL2_PARAMETER0
.393ce3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ce5	29 01		and #$01	              AND #$01
.393ce7	05 32		ora $32		              ORA OPL2_PARAMETER0
.393ce9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ceb	6b		rtl		                RTL
.393cec					OPL2_SET_SYNTHMODE
.393cec	48		pha		                PHA             ; begin setdp macro
.393ced	08		php		                PHP
.393cee	c2 20		rep #$20	                REP #$20        ; set A long
.393cf0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cf3	5b		tcd		                TCD
.393cf4	28		plp		                PLP
.393cf5	68		pla		                PLA             ; end setdp macro
.393cf6	08		php		              PHP ; Push the Carry
.393cf7	e2 20		sep #$20	                SEP #$20        ; set A short
.393cf9	18		clc		              CLC
.393cfa	a5 27		lda $27		              LDA OPL2_CHANNEL
.393cfc	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393cfe	69 c0		adc #$c0	              ADC #$C0
.393d00	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393d02	a9 00		lda #$00	              LDA #$00
.393d04	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393d06	c2 30		rep #$30	                REP #$30        ; set A&X long
.393d08	18		clc		              CLC
.393d09	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393d0c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393d0e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d10	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d13	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d15	28		plp		              PLP ; Pull the Carry out
.393d16	e2 20		sep #$20	                SEP #$20        ; set A short
.393d18	b0 08		bcs $393d22	              BCS OPL2_Set_Synthmode_Set;
.393d1a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d1c	29 fe		and #$fe	              AND #$FE
.393d1e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d20	80 06		bra $393d28	              BRA OPL2_Set_Synthmode_Exit
.393d22					OPL2_Set_Synthmode_Set
.393d22	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d24	09 01		ora #$01	              ORA #$01
.393d26	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d28					OPL2_Set_Synthmode_Exit
.393d28	6b		rtl		                RTL
.393d29					OPL2_SET_DEEPTREMOLO
.393d29	48		pha		                PHA             ; begin setdp macro
.393d2a	08		php		                PHP
.393d2b	c2 20		rep #$20	                REP #$20        ; set A long
.393d2d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d30	5b		tcd		                TCD
.393d31	28		plp		                PLP
.393d32	68		pla		                PLA             ; end setdp macro
.393d33	c2 20		rep #$20	                REP #$20        ; set A long
.393d35	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393d38	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d3a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d3d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d3f	e2 20		sep #$20	                SEP #$20        ; set A short
.393d41	b0 08		bcs $393d4b	              BCS OPL2_Set_DeepTremolo_Set;
.393d43	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d45	29 7f		and #$7f	              AND #$7F
.393d47	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d49	80 06		bra $393d51	              BRA OPL2_Set_DeepTremolo_Exit
.393d4b					OPL2_Set_DeepTremolo_Set
.393d4b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d4d	09 80		ora #$80	              ORA #$80
.393d4f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d51					OPL2_Set_DeepTremolo_Exit
.393d51	6b		rtl		                RTL
.393d52					OPL2_SET_DEEPVIBRATO
.393d52	48		pha		                PHA             ; begin setdp macro
.393d53	08		php		                PHP
.393d54	c2 20		rep #$20	                REP #$20        ; set A long
.393d56	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d59	5b		tcd		                TCD
.393d5a	28		plp		                PLP
.393d5b	68		pla		                PLA             ; end setdp macro
.393d5c	c2 20		rep #$20	                REP #$20        ; set A long
.393d5e	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393d61	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d63	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d66	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d68	e2 20		sep #$20	                SEP #$20        ; set A short
.393d6a	b0 08		bcs $393d74	              BCS OPL2_Set_DeepVibrato_Set;
.393d6c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d6e	29 bf		and #$bf	              AND #$BF
.393d70	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d72	80 06		bra $393d7a	              BRA OPL2_Set_DeepVibrato_Exit
.393d74					OPL2_Set_DeepVibrato_Set
.393d74	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d76	09 40		ora #$40	              ORA #$40
.393d78	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d7a					OPL2_Set_DeepVibrato_Exit
.393d7a	6b		rtl		                RTL
.393d7b					OPL2_SET_PERCUSSION
.393d7b	48		pha		                PHA             ; begin setdp macro
.393d7c	08		php		                PHP
.393d7d	c2 20		rep #$20	                REP #$20        ; set A long
.393d7f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d82	5b		tcd		                TCD
.393d83	28		plp		                PLP
.393d84	68		pla		                PLA             ; end setdp macro
.393d85	c2 20		rep #$20	                REP #$20        ; set A long
.393d87	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393d8a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d8c	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d8f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d91	e2 20		sep #$20	                SEP #$20        ; set A short
.393d93	b0 08		bcs $393d9d	                BCS OPL2_Set_Percussion_Set;
.393d95	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d97	29 df		and #$df	                AND #$DF
.393d99	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d9b	80 06		bra $393da3	                BRA OPL2_Set_Percussion_Exit
.393d9d					OPL2_Set_Percussion_Set
.393d9d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d9f	09 20		ora #$20	                ORA #$20
.393da1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393da3					OPL2_Set_Percussion_Exit
.393da3	6b		rtl		                RTL
.393da4					OPL2_SET_DRUMS
.393da4	48		pha		                PHA             ; begin setdp macro
.393da5	08		php		                PHP
.393da6	c2 20		rep #$20	                REP #$20        ; set A long
.393da8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dab	5b		tcd		                TCD
.393dac	28		plp		                PLP
.393dad	68		pla		                PLA             ; end setdp macro
.393dae	c2 20		rep #$20	                REP #$20        ; set A long
.393db0	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393db3	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393db5	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393db8	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393dba	e2 20		sep #$20	                SEP #$20        ; set A short
.393dbc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393dbe	29 1f		and #$1f	                AND #$1F
.393dc0	85 32		sta $32		                STA OPL2_PARAMETER0
.393dc2	49 ff		eor #$ff	                EOR #$FF
.393dc4	85 33		sta $33		                STA OPL2_PARAMETER1
.393dc6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dc8	25 33		and $33		                AND OPL2_PARAMETER1
.393dca	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dcc	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dce	6b		rtl		                RTL
.393dcf					OPL2_SET_WAVEFORM
.393dcf	48		pha		                PHA             ; begin setdp macro
.393dd0	08		php		                PHP
.393dd1	c2 20		rep #$20	                REP #$20        ; set A long
.393dd3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dd6	5b		tcd		                TCD
.393dd7	28		plp		                PLP
.393dd8	68		pla		                PLA             ; end setdp macro
.393dd9	c2 20		rep #$20	                REP #$20        ; set A long
.393ddb	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393dde	85 28		sta $28		                STA OPL2_REG_REGION
.393de0	20 f4 3d	jsr $393df4	                JSR OPL2_GET_REG_OFFSET
.393de3	e2 20		sep #$20	                SEP #$20        ; set A short
.393de5	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393de7	29 03		and #$03	                AND #$03
.393de9	85 32		sta $32		                STA OPL2_PARAMETER0
.393deb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ded	29 fc		and #$fc	                AND #$FC
.393def	05 32		ora $32		                ORA OPL2_PARAMETER0
.393df1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393df3	6b		rtl		                RTL
.393df4					OPL2_GET_REG_OFFSET
.393df4	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393df6	a5 27		lda $27		                LDA OPL2_CHANNEL
.393df8	29 0f		and #$0f	                AND #$0F
.393dfa	aa		tax		                TAX
.393dfb	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393dfd	d0 06		bne $393e05	                BNE OPL2_Get_Register_Offset_l0
.393dff	bf 3c 14 39	lda $39143c,x	                LDA @lregisterOffsets_operator0, X
.393e03	80 04		bra $393e09	                BRA OPL2_Get_Register_Offset_exit
.393e05					OPL2_Get_Register_Offset_l0
.393e05	bf 45 14 39	lda $391445,x	                LDA @lregisterOffsets_operator1, X
.393e09					OPL2_Get_Register_Offset_exit
.393e09	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e0b	a9 00		lda #$00	                LDA #$00
.393e0d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e0f	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e11	18		clc		                CLC
.393e12	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e15	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e17	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393e19	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e1b	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e1e	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e20	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
.393e21					ITRACE
.393e21	08		php		                PHP
.393e22	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e24	8b		phb		                PHB                 ; Print the text
.393e25	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393e27	aa		tax		                TAX                 ; ... into X
.393e28	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2a	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393e2c	48		pha		                PHA
.393e2d	ab		plb		                PLB                 ; ... into B
.393e2e	22 99 06 39	jsl $390699	                JSL IPUTS           ; Print the string
.393e32	c2 20		rep #$20	                REP #$20        ; set A long
.393e34	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393e36	83 08		sta $08,s	                STA #8,S
.393e38	a3 02		lda $02,s	                LDA #2,S
.393e3a	83 06		sta $06,s	                STA #6,S
.393e3c	ab		plb		                PLB
.393e3d	68		pla		                PLA                 ; Clean up the stack
.393e3e	68		pla		                PLA
.393e3f	28		plp		                PLP
.393e40	6b		rtl		                RTL
.393e41					ICMDBLOCK
.393e41	0b		phd		                PHD
.393e42	08		php		                PHP
.393e43	48		pha		                PHA             ; begin setdp macro
.393e44	08		php		                PHP
.393e45	c2 20		rep #$20	                REP #$20        ; set A long
.393e47	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e4a	5b		tcd		                TCD
.393e4b	28		plp		                PLP
.393e4c	68		pla		                PLA             ; end setdp macro
.393e4d	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4f	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393e51	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393e53	d0 06		bne $393e5b	                BNE ret_success             ; No: just return
.393e55	22 6a 61 39	jsl $39616a	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393e59	90 0c		bcc $393e67	                BCC pass_failure
.393e5b					ret_success
.393e5b	e2 20		sep #$20	                SEP #$20        ; set A short
.393e5d	64 00		stz $0320	                STZ BIOS_STATUS
.393e5f	28		plp		                PLP
.393e60	2b		pld		                PLD
.393e61	38		sec		                SEC
.393e62	6b		rtl		                RTL
.393e63					ret_failure
.393e63	e2 20		sep #$20	                SEP #$20        ; set A short
.393e65	85 00		sta $0320	                STA BIOS_STATUS
.393e67	28		plp		pass_failure    PLP
.393e68	2b		pld		                PLD
.393e69	18		clc		                CLC
.393e6a	6b		rtl		                RTL
.393e6b					IGETBLOCK
.393e6b	0b		phd		                PHD
.393e6c	8b		phb		                PHB
.393e6d	08		php		                PHP
.393e6e	48		pha		                PHA             ; begin setdbr macro
.393e6f	08		php		                PHP
.393e70	e2 20		sep #$20	                SEP #$20        ; set A short
.393e72	a9 00		lda #$00	                LDA #0
.393e74	48		pha		                PHA
.393e75	ab		plb		                PLB
.393e76	28		plp		                PLP
.393e77	68		pla		                PLA             ; end setdbr macro
.393e78	48		pha		                PHA             ; begin setdp macro
.393e79	08		php		                PHP
.393e7a	c2 20		rep #$20	                REP #$20        ; set A long
.393e7c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e7f	5b		tcd		                TCD
.393e80	28		plp		                PLP
.393e81	68		pla		                PLA             ; end setdp macro
.393e82	e2 20		sep #$20	                SEP #$20        ; set A short
.393e84	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393e86	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393e88	f0 13		beq $393e9d	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393e8a	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393e8c	f0 17		beq $393ea5	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393e8e	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393e90	f0 1b		beq $393ead	                BEQ hd_getblock
.393e92	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393e94					ret_failure
.393e94	e2 20		sep #$20	                SEP #$20        ; set A short
.393e96	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393e98	28		plp		                PLP
.393e99	ab		plb		                PLB
.393e9a	2b		pld		                PLD
.393e9b	38		sec		                SEC                                 ; Return failure
.393e9c	6b		rtl		                RTL
.393e9d	22 d1 57 39	jsl $3957d1	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393ea1	b0 12		bcs $393eb5	                BCS ret_success
.393ea3	80 ef		bra $393e94	                BRA ret_failure
.393ea5	22 76 5f 39	jsl $395f76	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393ea9	b0 0a		bcs $393eb5	                BCS ret_success
.393eab	80 e7		bra $393e94	                BRA ret_failure
.393ead	22 2e 65 39	jsl $39652e	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393eb1	b0 02		bcs $393eb5	                BCS ret_success
.393eb3	80 df		bra $393e94	                BRA ret_failure
.393eb5					ret_success
.393eb5	e2 20		sep #$20	                SEP #$20        ; set A short
.393eb7	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393eb9	28		plp		                PLP
.393eba	ab		plb		                PLB
.393ebb	2b		pld		                PLD
.393ebc	38		sec		                SEC                                 ; Return success
.393ebd	6b		rtl		                RTL
.393ebe					IPUTBLOCK
.393ebe	0b		phd		                PHD
.393ebf	8b		phb		                PHB
.393ec0	08		php		                PHP
.393ec1	48		pha		                PHA             ; begin setdbr macro
.393ec2	08		php		                PHP
.393ec3	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec5	a9 00		lda #$00	                LDA #0
.393ec7	48		pha		                PHA
.393ec8	ab		plb		                PLB
.393ec9	28		plp		                PLP
.393eca	68		pla		                PLA             ; end setdbr macro
.393ecb	48		pha		                PHA             ; begin setdp macro
.393ecc	08		php		                PHP
.393ecd	c2 20		rep #$20	                REP #$20        ; set A long
.393ecf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ed2	5b		tcd		                TCD
.393ed3	28		plp		                PLP
.393ed4	68		pla		                PLA             ; end setdp macro
.393ed5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ed7	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393ed9	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393edb	f0 13		beq $393ef0	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393edd	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393edf	f0 17		beq $393ef8	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393ee1	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393ee3	f0 1b		beq $393f00	                BEQ hd_putblock
.393ee5	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393ee7					ret_failure
.393ee7	e2 20		sep #$20	                SEP #$20        ; set A short
.393ee9	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393eeb	28		plp		                PLP
.393eec	ab		plb		                PLB
.393eed	2b		pld		                PLD
.393eee	18		clc		                CLC                                 ; Return failure
.393eef	6b		rtl		                RTL
.393ef0	22 71 58 39	jsl $395871	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393ef4	90 f1		bcc $393ee7	                BCC ret_failure
.393ef6	80 10		bra $393f08	                BRA ret_success
.393ef8	22 db 5f 39	jsl $395fdb	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393efc	90 e9		bcc $393ee7	                BCC ret_failure
.393efe	80 08		bra $393f08	                BRA ret_success
.393f00	22 bf 65 39	jsl $3965bf	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393f04	90 e1		bcc $393ee7	                BCC ret_failure
.393f06	80 00		bra $393f08	                BRA ret_success
.393f08					ret_success
.393f08	e2 20		sep #$20	                SEP #$20        ; set A short
.393f0a	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393f0c	28		plp		                PLP
.393f0d	ab		plb		                PLB
.393f0e	2b		pld		                PLD
.393f0f	38		sec		                SEC                                 ; Return success
.393f10	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393f11					DOS_DIROPEN
.393f11	da		phx		                PHX
.393f12	5a		phy		                PHY
.393f13	0b		phd		                PHD
.393f14	8b		phb		                PHB
.393f15	08		php		                PHP
.393f16	48		pha		                PHA             ; begin setdbr macro
.393f17	08		php		                PHP
.393f18	e2 20		sep #$20	                SEP #$20        ; set A short
.393f1a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393f1c	48		pha		                PHA
.393f1d	ab		plb		                PLB
.393f1e	28		plp		                PLP
.393f1f	68		pla		                PLA             ; end setdbr macro
.393f20	48		pha		                PHA             ; begin setdp macro
.393f21	08		php		                PHP
.393f22	c2 20		rep #$20	                REP #$20        ; set A long
.393f24	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f27	5b		tcd		                TCD
.393f28	28		plp		                PLP
.393f29	68		pla		                PLA             ; end setdp macro
.393f2a	ad 20 e0	lda $38e020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393f2d	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393f30	ad 22 e0	lda $38e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393f33	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.393f36	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393f39	85 1c		sta $033c	                STA DOS_BUFF_PTR
.393f3b	85 18		sta $0338	                STA DOS_DIR_PTR
.393f3d	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.393f40	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393f42	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393f44	e2 20		sep #$20	                SEP #$20        ; set A short
.393f46	ad 01 e0	lda $38e001	                LDA FILE_SYSTEM             ; Check the file system
.393f49	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393f4b	d0 24		bne $393f71	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393f4d					fetch_fat12
.393f4d	e2 20		sep #$20	                SEP #$20        ; set A short
.393f4f	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393f51	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.393f54	c2 20		rep #$20	                REP #$20        ; set A long
.393f56	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393f58	85 06		sta $0326	                STA BIOS_BUFF_PTR
.393f5a	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393f5c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393f5e	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393f61	85 02		sta $0322	                STA BIOS_LBA
.393f63	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.393f66	85 04		sta $0324	                STA BIOS_LBA+2
.393f68	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393f6c	b0 1f		bcs $393f8d	                BCS do_success              ; If sucessful, set the directory cursor
.393f6e	82 9b 15	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393f71					fetch_fat32
.393f71	e2 20		sep #$20	                SEP #$20        ; set A short
.393f73	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393f75	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.393f78	c2 20		rep #$20	                REP #$20        ; set A long
.393f7a	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.393f7d	85 10		sta $0330	                STA DOS_CLUS_ID
.393f7f	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.393f82	85 12		sta $0332	                STA DOS_CLUS_ID+2
.393f84	22 dc 43 39	jsl $3943dc	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393f88	b0 03		bcs $393f8d	                BCS do_success              ; If successful: set the directory cursor
.393f8a	82 7f 15	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393f8d	82 83 15	brl $395513	do_success      BRL IF_SUCCESS
.393f90					DOS_DIRFIRST
.393f90	0b		phd		                PHD
.393f91	08		php		                PHP
.393f92	48		pha		                PHA             ; begin setdp macro
.393f93	08		php		                PHP
.393f94	c2 20		rep #$20	                REP #$20        ; set A long
.393f96	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f99	5b		tcd		                TCD
.393f9a	28		plp		                PLP
.393f9b	68		pla		                PLA             ; end setdp macro
.393f9c	c2 20		rep #$20	                REP #$20        ; set A long
.393f9e	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.393fa1	85 18		sta $0338	                STA DOS_DIR_PTR
.393fa3	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.393fa6	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393fa8	28		plp		                PLP
.393fa9	2b		pld		                PLD
.393faa	6b		rtl		                RTL
.393fab					DOS_DIRNEXT
.393fab	da		phx		                PHX
.393fac	5a		phy		                PHY
.393fad	0b		phd		                PHD
.393fae	8b		phb		                PHB
.393faf	08		php		                PHP
.393fb0	48		pha		                PHA             ; begin setdbr macro
.393fb1	08		php		                PHP
.393fb2	e2 20		sep #$20	                SEP #$20        ; set A short
.393fb4	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393fb6	48		pha		                PHA
.393fb7	ab		plb		                PLB
.393fb8	28		plp		                PLP
.393fb9	68		pla		                PLA             ; end setdbr macro
.393fba	48		pha		                PHA             ; begin setdp macro
.393fbb	08		php		                PHP
.393fbc	c2 20		rep #$20	                REP #$20        ; set A long
.393fbe	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fc1	5b		tcd		                TCD
.393fc2	28		plp		                PLP
.393fc3	68		pla		                PLA             ; end setdp macro
.393fc4	c2 20		rep #$20	                REP #$20        ; set A long
.393fc6	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393fc7	a5 18		lda $0338	                LDA DOS_DIR_PTR
.393fc9	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393fcc	85 18		sta $0338	                STA DOS_DIR_PTR
.393fce	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393fd0	69 00 00	adc #$0000	                ADC #0
.393fd3	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393fd5	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393fd6	a9 00 e3	lda #$e300	                LDA #<>DOS_DIR_CLUSTER_END
.393fd9	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393fdb	85 28		sta $0348	                STA DOS_TEMP
.393fdd	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER_END
.393fe0	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393fe2	85 2a		sta $034a	                STA DOS_TEMP+2
.393fe4	30 0c		bmi $393ff2	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393fe6	f0 03		beq $393feb	                BEQ check_lower
.393fe8	82 28 15	brl $395513	                BRL IF_SUCCESS
.393feb	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393fed	f0 03		beq $393ff2	                BEQ get_next_block
.393fef	82 21 15	brl $395513	                BRL IF_SUCCESS
.393ff2					get_next_block
.393ff2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff4	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393ff7	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393ff9	f0 38		beq $394033	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393ffb					next_sector
.393ffb	c2 20		rep #$20	                REP #$20        ; set A long
.393ffd	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.394000	1a		inc a		                INC A
.394001	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.394004	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394007	d0 07		bne $394010	                BNE read_sector
.394009	e2 20		sep #$20	                SEP #$20        ; set A short
.39400b	a9 00		lda #$00	                LDA #0
.39400d	82 f8 14	brl $395508	                BRL IF_FAILURE
.394010					read_sector
.394010	c2 20		rep #$20	                REP #$20        ; set A long
.394012	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.394015	85 02		sta $0322	                STA BIOS_LBA
.394017	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.39401a	85 04		sta $0324	                STA BIOS_LBA+2
.39401c	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.39401f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394021	85 18		sta $0338	                STA DOS_DIR_PTR
.394023	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394026	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394028	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39402a	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.39402e	b0 39		bcs $394069	                BCS do_success              ; If successful: set the directory cursor
.394030	82 d9 14	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394033					next_cluster
.394033	c2 20		rep #$20	                REP #$20        ; set A long
.394035	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394038	85 10		sta $0330	                STA DOS_CLUS_ID
.39403a	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.39403d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39403f	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.394042	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394044	85 18		sta $0338	                STA DOS_DIR_PTR
.394046	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394049	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39404b	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39404d	22 e7 47 39	jsl $3947e7	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394051	b0 03		bcs $394056	                BCS set_next
.394053	82 b6 14	brl $39550c	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394056	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394058	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.39405b	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39405d	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.394060	22 dc 43 39	jsl $3943dc	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394064	b0 03		bcs $394069	                BCS do_success              ; If successful: set the directory cursor
.394066	82 a3 14	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394069	82 a7 14	brl $395513	do_success      BRL IF_SUCCESS
.39406c					DOS_DIRFINDFREE
.39406c	da		phx		                PHX
.39406d	5a		phy		                PHY
.39406e	0b		phd		                PHD
.39406f	8b		phb		                PHB
.394070	08		php		                PHP
.394071	48		pha		                PHA             ; begin setdbr macro
.394072	08		php		                PHP
.394073	e2 20		sep #$20	                SEP #$20        ; set A short
.394075	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394077	48		pha		                PHA
.394078	ab		plb		                PLB
.394079	28		plp		                PLP
.39407a	68		pla		                PLA             ; end setdbr macro
.39407b	48		pha		                PHA             ; begin setdp macro
.39407c	08		php		                PHP
.39407d	c2 20		rep #$20	                REP #$20        ; set A long
.39407f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394082	5b		tcd		                TCD
.394083	28		plp		                PLP
.394084	68		pla		                PLA             ; end setdp macro
.394085	22 a4 51 39	jsl $3951a4	                JSL IF_DIROPEN
.394089	b0 06		bcs $394091	                BCS start_walk
.39408b	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.39408e	82 28 00	brl $3940b9	                BRL ret_failure
.394091	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394094					chk_entry
.394094	e2 20		sep #$20	                SEP #$20        ; set A short
.394096	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394098	f0 1c		beq $3940b6	                BEQ ret_success             ; If 0: we have a blank... return it
.39409a	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39409c	f0 18		beq $3940b6	                BEQ ret_success             ; Yes: return it
.39409e	22 de 51 39	jsl $3951de	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3940a2	b0 ed		bcs $394091	                BCS start_walk              ; If we got one, start walking it
.3940a4	22 bc 40 39	jsl $3940bc	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3940a8	90 0f		bcc $3940b9	                BCC ret_failure             ; If that didn't work, return the failure
.3940aa	c2 20		rep #$20	                REP #$20        ; set A long
.3940ac	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3940af	85 18		sta $0338	                STA DOS_DIR_PTR
.3940b1	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3940b4	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940b6	82 5a 14	brl $395513	ret_success     BRL IF_SUCCESS
.3940b9	82 4c 14	brl $395508	ret_failure     BRL IF_FAILURE
.3940bc					DOS_DIRAPPEND
.3940bc	da		phx		                PHX
.3940bd	8b		phb		                PHB
.3940be	0b		phd		                PHD
.3940bf	08		php		                PHP
.3940c0	48		pha		                PHA             ; begin setdbr macro
.3940c1	08		php		                PHP
.3940c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3940c4	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940c6	48		pha		                PHA
.3940c7	ab		plb		                PLB
.3940c8	28		plp		                PLP
.3940c9	68		pla		                PLA             ; end setdbr macro
.3940ca	48		pha		                PHA             ; begin setdp macro
.3940cb	08		php		                PHP
.3940cc	c2 20		rep #$20	                REP #$20        ; set A long
.3940ce	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940d1	5b		tcd		                TCD
.3940d2	28		plp		                PLP
.3940d3	68		pla		                PLA             ; end setdp macro
.3940d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3940d6	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE
.3940d9	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3940db	f0 09		beq $3940e6	                BEQ clr_sector                  ; Yes: clear out the directory data
.3940dd					ret_failure
.3940dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3940df	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3940e1	85 0e		sta $032e	                STA DOS_STATUS
.3940e3	82 3f 00	brl $394125	                BRL pass_failure
.3940e6					clr_sector
.3940e6	c2 20		rep #$20	                REP #$20        ; set A long
.3940e8	a9 00 00	lda #$0000	                LDA #0
.3940eb	a2 00 00	ldx #$0000	                LDX #0
.3940ee	9f 00 e1 37	sta $37e100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3940f2	e8		inx		                INX
.3940f3	e8		inx		                INX
.3940f4	e0 00 02	cpx #$0200	                CPX #512
.3940f7	d0 f5		bne $3940ee	                BNE clr_loop
.3940f9	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3940fc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3940fe	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394101	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394103	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.394106	85 10		sta $0330	                STA DOS_CLUS_ID
.394108	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.39410b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39410d	22 db 4b 39	jsl $394bdb	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394111	90 12		bcc $394125	                BCC pass_failure                ; If there was an error, pass it up the chain
.394113	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.394116	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.394119	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.39411c	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.39411f	28		plp		ret_success     PLP
.394120	2b		pld		                PLD
.394121	ab		plb		                PLB
.394122	fa		plx		                PLX
.394123	38		sec		                SEC
.394124	6b		rtl		                RTL
.394125	28		plp		pass_failure    PLP
.394126	2b		pld		                PLD
.394127	ab		plb		                PLB
.394128	fa		plx		                PLX
.394129	18		clc		                CLC
.39412a	6b		rtl		                RTL
.39412b					DOS_DIRWRITE
.39412b	da		phx		                PHX
.39412c	5a		phy		                PHY
.39412d	0b		phd		                PHD
.39412e	8b		phb		                PHB
.39412f	08		php		                PHP
.394130	48		pha		                PHA             ; begin setdbr macro
.394131	08		php		                PHP
.394132	e2 20		sep #$20	                SEP #$20        ; set A short
.394134	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394136	48		pha		                PHA
.394137	ab		plb		                PLB
.394138	28		plp		                PLP
.394139	68		pla		                PLA             ; end setdbr macro
.39413a	48		pha		                PHA             ; begin setdp macro
.39413b	08		php		                PHP
.39413c	c2 20		rep #$20	                REP #$20        ; set A long
.39413e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394141	5b		tcd		                TCD
.394142	28		plp		                PLP
.394143	68		pla		                PLA             ; end setdp macro
.394144	e2 20		sep #$20	                SEP #$20        ; set A short
.394146	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394149	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39414b	f0 1f		beq $39416c	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39414d					write_sector
.39414d	c2 20		rep #$20	                REP #$20        ; set A long
.39414f	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394152	85 02		sta $0322	                STA BIOS_LBA
.394154	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394157	85 04		sta $0324	                STA BIOS_LBA+2
.394159	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39415c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39415e	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394161	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394163	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394167	b0 1f		bcs $394188	                BCS ret_success
.394169	82 9c 13	brl $395508	ret_failure     BRL IF_FAILURE
.39416c					write_cluster
.39416c	c2 20		rep #$20	                REP #$20        ; set A long
.39416e	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394171	85 10		sta $0330	                STA DOS_CLUS_ID
.394173	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394176	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394178	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39417b	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39417d	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394180	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394182	22 19 44 39	jsl $394419	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394186	90 e1		bcc $394169	                BCC ret_failure
.394188	82 88 13	brl $395513	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38e000				DOS_HIGH_VARIABLES      = $38E000
=$38e000				DEVICE                  = $38E000       ; 1 byte - The number of the block device
=$38e001				FILE_SYSTEM             = $38E001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38e002				PARTITION               = $38E002       ; 1 byte - The number of the partitions on the device
=$38e003				SECTORS_PER_CLUSTER     = $38E003       ; 1 byte - The number of sectors in a cluster
=$38e004				FIRSTSECTOR             = $38E004       ; 4 bytes - The LBA of the first sector on the volume
=$38e008				SECTORCOUNT             = $38E008       ; 4 bytes - The number of sectors in the volume
=$38e00c				NUM_RSRV_SEC            = $38E00C       ; 2 bytes - The number of hidden or reserved sectors
=$38e00e				CLUSTER_SIZE            = $38E00E       ; 2 bytes - The size of a cluster in bytes
=$38e010				SEC_PER_FAT             = $38E010       ; 4 bytes - The number of sectors per FAT
=$38e014				FAT_BEGIN_LBA           = $38E014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38e018				FAT2_BEGIN_LBA          = $38E018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38e01c				CLUSTER_BEGIN_LBA       = $38E01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38e020				ROOT_DIR_FIRST_CLUSTER  = $38E020       ; 4 bytes - The number of the first cluster in the root directory
=$38e024				ROOT_DIR_MAX_ENTRY      = $38E024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38e026				VOLUME_ID               = $38E026       ; 4 bytes - The ID of the volume
=$38e02a				DOS_CURR_CLUS           = $38E02A       ; 4 bytes - The current cluster (for delete)
=$38e02e				DOS_NEXT_CLUS           = $38E02E       ; 4 bytes - The next cluster in a file (for delete)
=$38e032				DOS_DIR_BLOCK_ID        = $38E032       ; 4 bytes - The ID of the current directory block
=$38e036				DOS_NEW_CLUSTER         = $38E036       ; 4 bytes - Space to store a newly written cluster ID
=$38e03a				DOS_SHORT_NAME          = $38E03A       ; 11 bytes - The short name for a desired file
=$38e045				DOS_DIR_TYPE            = $38E045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38e046				DOS_CURR_DIR_ID         = $38E046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38e04a				DOS_DEV_NAMES           = $38E04A       ; 4 byte - pointer to the linked list of device names
=$38e04e				FDC_MOTOR_TIMER         = $38E04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$37e100				DOS_DIR_CLUSTER         = $37E100       ; 512 bytes - A buffer for directory entries
=$37e300				DOS_DIR_CLUSTER_END     = $37E300       ; The byte just past the end of the directory cluster buffer
=$37e300				DOS_SECTOR              = $37E300       ; 512 bytes - A buffer for block device read/write
=$37e500				DOS_SECTOR_END          = $37E500       ; The byte just past the end of the cluster buffer
=$37e500				DOS_FAT_SECTORS         = $37E500       ; 1024 bytes - two sectors worth of the FAT
=$37e900				DOS_FAT_SECTORS_END     = $37E900       ; The byte just past the end of the FAT buffers
=$37e900				DOS_SPARE_SECTOR        = $37E900       ; A spare 512 byte buffer for loading sectors
=$37eb00				DOS_SPARE_SECTOR_END    = $37EB00
=$37eb00				DOS_SPARE_FD            = $37EB00       ; A spare file descriptor buffer
.39418b					DOS_INIT
.39418b	8b		phb		                PHB
.39418c	0b		phd		                PHD
.39418d	08		php		                PHP
.39418e	48		pha		                PHA             ; begin setdbr macro
.39418f	08		php		                PHP
.394190	e2 20		sep #$20	                SEP #$20        ; set A short
.394192	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394194	48		pha		                PHA
.394195	ab		plb		                PLB
.394196	28		plp		                PLP
.394197	68		pla		                PLA             ; end setdbr macro
.394198	48		pha		                PHA             ; begin setdp macro
.394199	08		php		                PHP
.39419a	c2 20		rep #$20	                REP #$20        ; set A long
.39419c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39419f	5b		tcd		                TCD
.3941a0	28		plp		                PLP
.3941a1	68		pla		                PLA             ; end setdp macro
.3941a2	c2 20		rep #$20	                REP #$20        ; set A long
.3941a4	a9 71 44	lda #$4471	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3941a7	8f 4a e0 38	sta $38e04a	                STA @l DOS_DEV_NAMES
.3941ab	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3941ae	8f 4c e0 38	sta $38e04c	                STA @l DOS_DEV_NAMES+2
.3941b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3941b4	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3941b6	85 01		sta $0321	                STA BIOS_DEV
.3941b8	28		plp		                PLP
.3941b9	2b		pld		                PLD
.3941ba	ab		plb		                PLB
.3941bb	6b		rtl		                RTL
.3941bc					DOS_MOUNT
.3941bc	8b		phb		                PHB
.3941bd	0b		phd		                PHD
.3941be	08		php		                PHP
.3941bf	48		pha		                PHA             ; begin setdbr macro
.3941c0	08		php		                PHP
.3941c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3941c3	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941c5	48		pha		                PHA
.3941c6	ab		plb		                PLB
.3941c7	28		plp		                PLP
.3941c8	68		pla		                PLA             ; end setdbr macro
.3941c9	48		pha		                PHA             ; begin setdp macro
.3941ca	08		php		                PHP
.3941cb	c2 20		rep #$20	                REP #$20        ; set A long
.3941cd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941d0	5b		tcd		                TCD
.3941d1	28		plp		                PLP
.3941d2	68		pla		                PLA             ; end setdp macro
.3941d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3941d5	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.3941d7	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3941d9	f0 1f		beq $3941fa	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.3941db	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.3941dd	f0 26		beq $394205	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.3941df	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.3941e1	f0 0b		beq $3941ee	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3941e3	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3941e5	85 0e		sta $032e	                STA DOS_STATUS
.3941e7	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.3941e9	85 00		sta $0320	                STA BIOS_STATUS
.3941eb	82 56 01	brl $394344	                BRL ret_failure
.3941ee	22 44 60 39	jsl $396044	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.3941f2	b0 03		bcs $3941f7	                BCS fdc_success
.3941f4	82 4d 01	brl $394344	                BRL ret_failure
.3941f7	82 41 01	brl $39433b	fdc_success     BRL ret_success
.3941fa	22 8f 57 39	jsl $39578f	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3941fe	b0 10		bcs $394210	                BCS get_mbr             ; Continue if success
.394200	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394202	82 3f 01	brl $394344	                BRL ret_failure
.394205	22 39 64 39	jsl $396439	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394209	b0 05		bcs $394210	                BCS get_mbr             ; Continue if success
.39420b	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39420d	82 34 01	brl $394344	                BRL ret_failure
.394210					get_mbr
.394210	c2 30		rep #$30	                REP #$30        ; set A&X long
.394212	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.394214	64 04		stz $0324	                STZ BIOS_LBA+2
.394216	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.394219	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39421b	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.39421e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394220	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.394224	b0 07		bcs $39422d	                BCS chk_signature       ; If success, check the signature bytes
.394226	e2 20		sep #$20	                SEP #$20        ; set A short
.394228	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.39422a	82 17 01	brl $394344	                BRL ret_failure
.39422d					chk_signature
.39422d	e2 20		sep #$20	                SEP #$20        ; set A short
.39422f	af fe e4 37	lda $37e4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394233	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394235	d0 08		bne $39423f	                BNE not_mbr             ; No: signal we could find the MBR
.394237	af ff e4 37	lda $37e4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39423b	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39423d	f0 05		beq $394244	                BEQ chk_part_type       ; Yes: we have an MBR
.39423f	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394241	82 00 01	brl $394344	                BRL ret_failure
.394244	af c2 e4 37	lda $37e4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.394248	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39424a	f0 05		beq $394251	                BEQ get_LBA             ; Is FAT32 with LBA?
.39424c	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.39424e	82 f3 00	brl $394344	                BRL ret_failure
.394251	8d 01 e0	sta $38e001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394254	c2 20		rep #$20	                REP #$20        ; set A long
.394256	af c6 e4 37	lda $37e4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39425a	8d 04 e0	sta $38e004	                STA FIRSTSECTOR
.39425d	af c8 e4 37	lda $37e4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394261	8d 06 e0	sta $38e006	                STA FIRSTSECTOR+2
.394264	af cb e4 37	lda $37e4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394268	8d 08 e0	sta $38e008	                STA SECTORCOUNT
.39426b	af cd e4 37	lda $37e4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39426f	8d 0a e0	sta $38e00a	                STA SECTORCOUNT+2
.394272	e2 20		sep #$20	                SEP #$20        ; set A short
.394274	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394276	8d 00 e0	sta $38e000	                STA DEVICE
.394279	a9 00		lda #$00	                LDA #0
.39427b	8d 02 e0	sta $38e002	                STA PARTITION           ; For the moment, we only support the first partition
.39427e	c2 20		rep #$20	                REP #$20        ; set A long
.394280	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.394283	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394285	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.394288	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39428a	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.39428d	85 02		sta $0322	                STA BIOS_LBA
.39428f	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.394292	85 04		sta $0324	                STA BIOS_LBA+2
.394294	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394298	b0 1e		bcs $3942b8	                BCS get_first_sec       ; Got it? Start parsing it
.39429a	e2 20		sep #$20	                SEP #$20        ; set A short
.39429c	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39429e	82 a3 00	brl $394344	                BRL ret_failure
.3942a1					chk_bpb_sig
.3942a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3942a3	af fe e4 37	lda $37e4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3942a7	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3942a9	d0 08		bne $3942b3	                BNE not_bpb             ; No: signal we could find the volume ID
.3942ab	af ff e4 37	lda $37e4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3942af	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3942b1	f0 05		beq $3942b8	                BEQ get_first_sec       ; Yes: we have an volume ID
.3942b3	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3942b5	82 8c 00	brl $394344	                BRL ret_failure
.3942b8					get_first_sec
.3942b8	c2 20		rep #$20	                REP #$20        ; set A long
.3942ba	af 2c e3 37	lda $37e32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3942be	8d 20 e0	sta $38e020	                STA ROOT_DIR_FIRST_CLUSTER
.3942c1	af 2e e3 37	lda $37e32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.3942c5	8d 22 e0	sta $38e022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3942c8	af 0e e3 37	lda $37e30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3942cc	8d 0c e0	sta $38e00c	                STA NUM_RSRV_SEC
.3942cf	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3942d0	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.3942d3	6d 0c e0	adc $38e00c	                ADC NUM_RSRV_SEC
.3942d6	8d 14 e0	sta $38e014	                STA FAT_BEGIN_LBA
.3942d9	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.3942dc	69 00 00	adc #$0000	                ADC #0
.3942df	8d 16 e0	sta $38e016	                STA FAT_BEGIN_LBA+2
.3942e2	af 24 e3 37	lda $37e324	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.3942e6	8d 10 e0	sta $38e010	                STA SEC_PER_FAT
.3942e9	af 26 e3 37	lda $37e326	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.3942ed	8d 12 e0	sta $38e012	                STA SEC_PER_FAT+2
.3942f0	ad 10 e0	lda $38e010	                LDA SEC_PER_FAT
.3942f3	0a		asl a		                ASL A
.3942f4	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.3942f7	ad 12 e0	lda $38e012	                LDA SEC_PER_FAT+2
.3942fa	2a		rol a		                ROL A
.3942fb	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.3942fe	18		clc		                CLC
.3942ff	ad 1c e0	lda $38e01c	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.394302	6d 14 e0	adc $38e014	                ADC FAT_BEGIN_LBA
.394305	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.394308	ad 1e e0	lda $38e01e	                LDA CLUSTER_BEGIN_LBA+2
.39430b	6d 16 e0	adc $38e016	                ADC FAT_BEGIN_LBA+2
.39430e	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.394311	e2 20		sep #$20	                SEP #$20        ; set A short
.394313	af 0d e3 37	lda $37e30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394317	8d 03 e0	sta $38e003	                STA SECTORS_PER_CLUSTER
.39431a	c2 20		rep #$20	                REP #$20        ; set A long
.39431c	29 ff 00	and #$00ff	                AND #$00FF
.39431f	48		pha		                PHA                                     ; Save the number of sectors per cluster
.394320	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.394323	8d 0e e0	sta $38e00e	                STA CLUSTER_SIZE
.394326	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.394329	8d 10 e0	sta $38e010	                STA CLUSTER_SIZE+2
.39432c	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.39432d	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.394330	f0 09		beq $39433b	                BEQ ret_success
.394332	0e 0e e0	asl $38e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.394335	2e 10 e0	rol $38e010	                ROL CLUSTER_SIZE+2
.394338	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.394339	80 f2		bra $39432d	                BRA clus_size_loop
.39433b					ret_success
.39433b	e2 20		sep #$20	                SEP #$20        ; set A short
.39433d	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.39433f	28		plp		                PLP
.394340	2b		pld		                PLD
.394341	ab		plb		                PLB
.394342	38		sec		                SEC
.394343	6b		rtl		                RTL
.394344					ret_failure
.394344	e2 20		sep #$20	                SEP #$20        ; set A short
.394346	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394348	28		plp		                PLP
.394349	2b		pld		                PLD
.39434a	ab		plb		                PLB
.39434b	18		clc		                CLC
.39434c	6b		rtl		                RTL
.39434d					DOS_TESTBOOT
.39434d	da		phx		                PHX
.39434e	08		php		                PHP
.39434f	c2 10		rep #$10	                REP #$10        ; set X long
.394351	e2 20		sep #$20	                SEP #$20        ; set A short
.394353	af 3e e3 37	lda $37e33e	                LDA @l DOS_SECTOR+FDC_BOOT_START
.394357	c9 80		cmp #$80	                CMP #$80                    ; Is the first byte a BRL instruction?
.394359	d0 2b		bne $394386	                BNE done                    ; No: just return
.39435b	a2 00 00	ldx #$0000	                LDX #0
.39435e	bf 03 e3 37	lda $37e303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394362	df 89 43 39	cmp $394389,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394366	d0 1e		bne $394386	                BNE done                    ; If it's not equal, just return
.394368	e8		inx		                INX                         ; Otherwise, check the next one
.394369	e0 08 00	cpx #$0008	                CPX #8
.39436c	d0 f0		bne $39435e	                BNE magic_loop              ; Until we've checked all 8 bytes
.39436e	c2 20		rep #$20	                REP #$20        ; set A long
.394370	a2 00 00	ldx #$0000	                LDX #0
.394373	bf 00 e3 37	lda $37e300,x	copy_loop       LDA @l DOS_SECTOR,X         ; Copy the DOS_SECTOR to DOS_SPARE_SECTOR
.394377	9f 00 e9 37	sta $37e900,x	                STA @l DOS_SPARE_SECTOR,X
.39437b	e8		inx		                INX
.39437c	e8		inx		                INX
.39437d	e0 00 02	cpx #$0200	                CPX #512
.394380	d0 f1		bne $394373	                BNE copy_loop
.394382	5c 3e e9 37	jmp $37e93e	                JML DOS_SPARE_SECTOR+FDC_BOOT_START
.394386	28		plp		done            PLP
.394387	fa		plx		                PLX
.394388	6b		rtl		                RTL
>394389	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394391					DOS_CALC_LBA
.394391	8b		phb		                PHB
.394392	0b		phd		                PHD
.394393	08		php		                PHP
.394394	48		pha		                PHA             ; begin setdbr macro
.394395	08		php		                PHP
.394396	e2 20		sep #$20	                SEP #$20        ; set A short
.394398	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39439a	48		pha		                PHA
.39439b	ab		plb		                PLB
.39439c	28		plp		                PLP
.39439d	68		pla		                PLA             ; end setdbr macro
.39439e	48		pha		                PHA             ; begin setdp macro
.39439f	08		php		                PHP
.3943a0	c2 20		rep #$20	                REP #$20        ; set A long
.3943a2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943a5	5b		tcd		                TCD
.3943a6	28		plp		                PLP
.3943a7	68		pla		                PLA             ; end setdp macro
.3943a8	c2 20		rep #$20	                REP #$20        ; set A long
.3943aa	38		sec		                SEC
.3943ab	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3943ad	e9 02 00	sbc #$0002	                SBC #2
.3943b0	85 28		sta $0348	                STA DOS_TEMP
.3943b2	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3943b4	e9 00 00	sbc #$0000	                SBC #0
.3943b7	85 2a		sta $034a	                STA DOS_TEMP+2
.3943b9	e2 10		sep #$10	                SEP #$10        ; set X short
.3943bb	ae 03 e0	ldx $38e003	                LDX SECTORS_PER_CLUSTER
.3943be	e0 01		cpx #$01	mult_loop       CPX #1
.3943c0	f0 07		beq $3943c9	                BEQ add_offset
.3943c2	06 28		asl $0348	                ASL DOS_TEMP
.3943c4	26 28		rol $0348	                ROL DOS_TEMP
.3943c6	ca		dex		                DEX
.3943c7	80 f5		bra $3943be	                BRA mult_loop
.3943c9	18		clc		add_offset      CLC
.3943ca	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3943cc	6d 1c e0	adc $38e01c	                ADC CLUSTER_BEGIN_LBA
.3943cf	85 02		sta $0322	                STA BIOS_LBA
.3943d1	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3943d3	6d 1e e0	adc $38e01e	                ADC CLUSTER_BEGIN_LBA+2
.3943d6	85 04		sta $0324	                STA BIOS_LBA+2
.3943d8	28		plp		                PLP
.3943d9	2b		pld		                PLD
.3943da	ab		plb		                PLB
.3943db	6b		rtl		                RTL
.3943dc					DOS_GETCLUSTER
.3943dc	8b		phb		                PHB
.3943dd	0b		phd		                PHD
.3943de	08		php		                PHP
.3943df	48		pha		                PHA             ; begin setdbr macro
.3943e0	08		php		                PHP
.3943e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3943e3	a9 00		lda #$00	                LDA #0
.3943e5	48		pha		                PHA
.3943e6	ab		plb		                PLB
.3943e7	28		plp		                PLP
.3943e8	68		pla		                PLA             ; end setdbr macro
.3943e9	48		pha		                PHA             ; begin setdp macro
.3943ea	08		php		                PHP
.3943eb	c2 20		rep #$20	                REP #$20        ; set A long
.3943ed	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943f0	5b		tcd		                TCD
.3943f1	28		plp		                PLP
.3943f2	68		pla		                PLA             ; end setdp macro
.3943f3	c2 20		rep #$20	                REP #$20        ; set A long
.3943f5	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3943f7	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3943f9	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3943fb	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3943fd	22 91 43 39	jsl $394391	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394401	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394405	90 09		bcc $394410	                BCC ret_failure
.394407					ret_success
.394407	e2 20		sep #$20	                SEP #$20        ; set A short
.394409	64 0e		stz $032e	                STZ DOS_STATUS
.39440b	28		plp		                PLP
.39440c	2b		pld		                PLD
.39440d	ab		plb		                PLB
.39440e	38		sec		                SEC
.39440f	6b		rtl		                RTL
.394410					ret_failure
.394410	e2 20		sep #$20	                SEP #$20        ; set A short
.394412	85 0e		sta $032e	                STA DOS_STATUS
.394414	28		plp		                PLP
.394415	2b		pld		                PLD
.394416	ab		plb		                PLB
.394417	18		clc		                CLC
.394418	6b		rtl		                RTL
.394419					DOS_PUTCLUSTER
.394419	8b		phb		                PHB
.39441a	0b		phd		                PHD
.39441b	08		php		                PHP
.39441c	48		pha		                PHA             ; begin setdbr macro
.39441d	08		php		                PHP
.39441e	e2 20		sep #$20	                SEP #$20        ; set A short
.394420	a9 00		lda #$00	                LDA #0
.394422	48		pha		                PHA
.394423	ab		plb		                PLB
.394424	28		plp		                PLP
.394425	68		pla		                PLA             ; end setdbr macro
.394426	48		pha		                PHA             ; begin setdp macro
.394427	08		php		                PHP
.394428	c2 20		rep #$20	                REP #$20        ; set A long
.39442a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39442d	5b		tcd		                TCD
.39442e	28		plp		                PLP
.39442f	68		pla		                PLA             ; end setdp macro
.394430	c2 20		rep #$20	                REP #$20        ; set A long
.394432	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394434	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394436	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394438	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39443a	22 91 43 39	jsl $394391	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39443e	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394442	90 09		bcc $39444d	                BCC ret_failure
.394444					ret_success
.394444	e2 20		sep #$20	                SEP #$20        ; set A short
.394446	64 0e		stz $032e	                STZ DOS_STATUS
.394448	28		plp		                PLP
.394449	2b		pld		                PLD
.39444a	ab		plb		                PLB
.39444b	38		sec		                SEC
.39444c	6b		rtl		                RTL
.39444d					ret_failure
.39444d	e2 20		sep #$20	                SEP #$20        ; set A short
.39444f	85 0e		sta $032e	                STA DOS_STATUS
.394451	28		plp		                PLP
.394452	2b		pld		                PLD
.394453	ab		plb		                PLB
.394454	18		clc		                CLC
.394455	6b		rtl		                RTL
>394456	40 46 00			DOS_FDC_NAME    .null "@F"
.394459					DOS_FDC_DESC
>394459	56 44 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39445d	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39445e	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394462	40 53 00			DOS_SDC_NAME    .null "@S"
.394465					DOS_SDC_DESC
>394465	62 44 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394469	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>39446a	59 44 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>39446e	40 48 00			DOS_HDC_NAME    .null "@H"
.394471					DOS_HD_DESC
>394471	6e 44 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>394475	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394476	65 44 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.39447a					DOS_PARSE_DEV
.39447a	8b		phb		                PHB
.39447b	0b		phd		                PHD
.39447c	08		php		                PHP
.39447d	48		pha		                PHA             ; begin setdbr macro
.39447e	08		php		                PHP
.39447f	e2 20		sep #$20	                SEP #$20        ; set A short
.394481	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394483	48		pha		                PHA
.394484	ab		plb		                PLB
.394485	28		plp		                PLP
.394486	68		pla		                PLA             ; end setdbr macro
.394487	48		pha		                PHA             ; begin setdp macro
.394488	08		php		                PHP
.394489	c2 20		rep #$20	                REP #$20        ; set A long
.39448b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39448e	5b		tcd		                TCD
.39448f	28		plp		                PLP
.394490	68		pla		                PLA             ; end setdp macro
.394491	c2 30		rep #$30	                REP #$30        ; set A&X long
.394493	af 4a e0 38	lda $38e04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394497	85 28		sta $0348	                STA DOS_TEMP
.394499	af 4c e0 38	lda $38e04c	                LDA @l DOS_DEV_NAMES+2
.39449d	85 2a		sta $034a	                STA DOS_TEMP+2
.39449f	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3944a2	85 48		sta $0368	                STA DOS_STR2_PTR
.3944a4	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3944a7	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3944a9	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3944ac	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944ae	85 44		sta $0364	                STA DOS_STR1_PTR
.3944b0	c8		iny		                INY
.3944b1	c8		iny		                INY
.3944b2	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944b4	85 46		sta $0366	                STA DOS_STR1_PTR+2
.3944b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b8	a0 00 00	ldy #$0000	                LDY #0
.3944bb	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3944bd	f0 24		beq $3944e3	                BEQ found                   ; If it's NULL, we found a match
.3944bf	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3944c1	d0 03		bne $3944c6	                BNE next_device             ; If no match, try to load the next device
.3944c3	c8		iny		                INY                         ; Go to the next character
.3944c4	80 f5		bra $3944bb	                BRA cmp_loop
.3944c6					next_device
.3944c6	c2 20		rep #$20	                REP #$20        ; set A long
.3944c8	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3944cb	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944cd	48		pha		                PHA
.3944ce	c8		iny		                INY
.3944cf	c8		iny		                INY
.3944d0	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944d2	85 2a		sta $034a	                STA DOS_TEMP+2
.3944d4	68		pla		                PLA
.3944d5	85 28		sta $0348	                STA DOS_TEMP
.3944d7	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3944d9	d0 ce		bne $3944a9	                BNE dev_loop                ; No: check this device
.3944db	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3944dd	d0 ca		bne $3944a9	                BNE dev_loop
.3944df	28		plp		done            PLP                         ; Otherwise, return having not found a match
.3944e0	2b		pld		                PLD
.3944e1	ab		plb		                PLB
.3944e2	6b		rtl		                RTL
.3944e3	22 f4 44 39	jsl $3944f4	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3944e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3944e9	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3944ec	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944ee	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3944f2	80 eb		bra $3944df	                BRA done
.3944f4					DOS_ADJUSTPATH
.3944f4	da		phx		                PHX
.3944f5	5a		phy		                PHY
.3944f6	8b		phb		                PHB
.3944f7	0b		phd		                PHD
.3944f8	08		php		                PHP
.3944f9	48		pha		                PHA             ; begin setdbr macro
.3944fa	08		php		                PHP
.3944fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3944fd	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944ff	48		pha		                PHA
.394500	ab		plb		                PLB
.394501	28		plp		                PLP
.394502	68		pla		                PLA             ; end setdbr macro
.394503	48		pha		                PHA             ; begin setdp macro
.394504	08		php		                PHP
.394505	c2 20		rep #$20	                REP #$20        ; set A long
.394507	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39450a	5b		tcd		                TCD
.39450b	28		plp		                PLP
.39450c	68		pla		                PLA             ; end setdp macro
.39450d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39450f	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394511	98		tya		                TYA                             ; Compute the address of the first source byte
.394512	18		clc		                CLC
.394513	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394516	aa		tax		                TAX
.394517	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39451a	a8		tay		                TAY
.39451b	38		sec		                SEC                             ; Compute the number of bytes to copy
.39451c	a9 00 01	lda #$0100	                LDA #256
.39451f	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394521	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394524	28		plp		                PLP
.394525	2b		pld		                PLD
.394526	ab		plb		                PLB
.394527	7a		ply		                PLY
.394528	fa		plx		                PLX
.394529	6b		rtl		                RTL
.39452a					DOS_PARSE_PATH
.39452a	8b		phb		                PHB
.39452b	0b		phd		                PHD
.39452c	08		php		                PHP
.39452d	48		pha		                PHA             ; begin setdbr macro
.39452e	08		php		                PHP
.39452f	e2 20		sep #$20	                SEP #$20        ; set A short
.394531	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394533	48		pha		                PHA
.394534	ab		plb		                PLB
.394535	28		plp		                PLP
.394536	68		pla		                PLA             ; end setdbr macro
.394537	48		pha		                PHA             ; begin setdp macro
.394538	08		php		                PHP
.394539	c2 20		rep #$20	                REP #$20        ; set A long
.39453b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39453e	5b		tcd		                TCD
.39453f	28		plp		                PLP
.394540	68		pla		                PLA             ; end setdp macro
.394541	c2 10		rep #$10	                REP #$10        ; set X long
.394543	e2 20		sep #$20	                SEP #$20        ; set A short
.394545	a2 00 00	ldx #$0000	                LDX #0
.394548	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.39454a	f0 1b		beq $394567	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39454c	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.39454e	b0 05		bcs $394555	                BGE check_case          ; No: check the case
.394550	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394552	82 64 00	brl $3945b9	                BRL ret_failure
.394555	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394557	90 08		bcc $394561	                BLT next_char
.394559	c9 7b		cmp #$7b	                CMP #'z'+1
.39455b	b0 04		bcs $394561	                BGE next_char
.39455d	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.39455f	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394561	e8		inx		next_char       INX                     ; Move to the next character
.394562	e0 00 01	cpx #$0100	                CPX #$100
.394565	d0 e1		bne $394548	                BNE upcase_loop
.394567	22 7a 44 39	jsl $39447a	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.39456b	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.39456d	c9 3a		cmp #$3a	                CMP #':'
.39456f	d0 07		bne $394578	                BNE clr_name            ; If not colon, treat it as a file name
.394571	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394574	22 f4 44 39	jsl $3944f4	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394578	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.39457b	a9 20		lda #$20	                LDA #' '
.39457d	99 3a e0	sta $38e03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394580	c8		iny		                INY
.394581	c0 0b 00	cpy #$000b	                CPY #11
.394584	d0 f7		bne $39457d	                BNE clr_loop
.394586	a2 00 00	ldx #$0000	                LDX #0
.394589	a0 00 00	ldy #$0000	                LDY #0
.39458c	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.39458e	f0 20		beq $3945b0	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394590	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394592	f0 0a		beq $39459e	                BEQ cpy_ext             ; And move to the extension
.394594	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394597	e8		inx		                INX
.394598	c8		iny		                INY                     ; Move to the next character
.394599	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.39459c	d0 ee		bne $39458c	                BNE cpy_name_loop       ; No: process this one
.39459e	e8		inx		cpy_ext         INX                     ; Skip the dot
.39459f	a0 08 00	ldy #$0008	                LDY #8
.3945a2	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3945a4	f0 0a		beq $3945b0	                BEQ ret_success         ; If it's NULL, we've finished
.3945a6	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3945a9	e8		inx		                INX
.3945aa	c8		iny		                INY                     ; Move to the next character
.3945ab	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3945ae	d0 f2		bne $3945a2	                BNE cpy_ext_loop        ; No: process this one
.3945b0					ret_success
.3945b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b2	64 0e		stz $032e	                STZ DOS_STATUS
.3945b4	28		plp		                PLP
.3945b5	2b		pld		                PLD
.3945b6	ab		plb		                PLB
.3945b7	38		sec		                SEC
.3945b8	6b		rtl		                RTL
.3945b9					ret_failure
.3945b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3945bb	85 0e		sta $032e	                STA DOS_STATUS
.3945bd	28		plp		                PLP
.3945be	2b		pld		                PLD
.3945bf	ab		plb		                PLB
.3945c0	18		clc		                CLC
.3945c1	6b		rtl		                RTL
.3945c2					DOS_FINDFILE
.3945c2	8b		phb		                PHB
.3945c3	0b		phd		                PHD
.3945c4	08		php		                PHP
.3945c5	48		pha		                PHA             ; begin setdbr macro
.3945c6	08		php		                PHP
.3945c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3945c9	a9 00		lda #$00	                LDA #0
.3945cb	48		pha		                PHA
.3945cc	ab		plb		                PLB
.3945cd	28		plp		                PLP
.3945ce	68		pla		                PLA             ; end setdbr macro
.3945cf	48		pha		                PHA             ; begin setdp macro
.3945d0	08		php		                PHP
.3945d1	c2 20		rep #$20	                REP #$20        ; set A long
.3945d3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945d6	5b		tcd		                TCD
.3945d7	28		plp		                PLP
.3945d8	68		pla		                PLA             ; end setdp macro
.3945d9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945db	22 2a 45 39	jsl $39452a	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3945df	b0 05		bcs $3945e6	                BCS mount                       ; If success: try to open the directory
.3945e1	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3945e2	2b		pld		                PLD
.3945e3	ab		plb		                PLB
.3945e4	18		clc		                CLC
.3945e5	6b		rtl		                RTL
.3945e6	22 bc 41 39	jsl $3941bc	mount           JSL DOS_MOUNT
.3945ea					get_directory
.3945ea	c2 20		rep #$20	                REP #$20        ; set A long
.3945ec	22 11 3f 39	jsl $393f11	                JSL DOS_DIROPEN                 ; Get the directory
.3945f0	b0 07		bcs $3945f9	                BCS scan_entries                ; If success: start scanning the directory entries
.3945f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3945f4	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3945f6	82 47 00	brl $394640	                BRL ret_failure
.3945f9	22 90 3f 39	jsl $393f90	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3945fd					scan_loop
.3945fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ff	a0 00 00	ldy #$0000	                LDY #0
.394602	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394604	d0 05		bne $39460b	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394606	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394608	82 35 00	brl $394640	                BRL ret_failure
.39460b	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.39460d	f0 26		beq $394635	                BEQ next_entry                  ; Go to the next entry
.39460f	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394612	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394614	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394616	d0 1d		bne $394635	                BNE next_entry                  ; Yes: skip it!
.394618	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.39461a	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.39461c	f0 17		beq $394635	                BEQ next_entry                  ; Yes: skip it!
.39461e	a2 00 00	ldx #$0000	                LDX #0
.394621	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394624	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394626	df 3a e0 38	cmp $38e03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.39462a	d0 09		bne $394635	                BNE next_entry                  ; If not equal: try the next entry
.39462c	c8		iny		                INY                             ; Advance to the next character
.39462d	e8		inx		                INX
.39462e	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394631	f0 16		beq $394649	                BEQ match                       ; Yes: we have a match!
.394633	80 ef		bra $394624	                BRA scan_cmp_loop               ; No: keep checking
.394635	22 ab 3f 39	jsl $393fab	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394639	90 05		bcc $394640	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.39463b	82 bf ff	brl $3945fd	                BRL scan_loop                   ; If found: keep scanning
.39463e	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394640					ret_failure
.394640	e2 20		sep #$20	                SEP #$20        ; set A short
.394642	85 0e		sta $032e	                STA DOS_STATUS
.394644	28		plp		                PLP
.394645	2b		pld		                PLD
.394646	ab		plb		                PLB
.394647	18		clc		                CLC
.394648	6b		rtl		                RTL
.394649					match
.394649	c2 20		rep #$20	                REP #$20        ; set A long
.39464b	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.39464e	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394650	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394652	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394655	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394657	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394659					ret_success
.394659	e2 20		sep #$20	                SEP #$20        ; set A short
.39465b	64 0e		stz $032e	                STZ DOS_STATUS
.39465d	28		plp		                PLP
.39465e	2b		pld		                PLD
.39465f	ab		plb		                PLB
.394660	38		sec		                SEC
.394661	6b		rtl		                RTL
.394662					DOS_READFILE
.394662	8b		phb		                PHB
.394663	0b		phd		                PHD
.394664	08		php		                PHP
.394665	48		pha		                PHA             ; begin setdbr macro
.394666	08		php		                PHP
.394667	e2 20		sep #$20	                SEP #$20        ; set A short
.394669	a9 00		lda #$00	                LDA #0
.39466b	48		pha		                PHA
.39466c	ab		plb		                PLB
.39466d	28		plp		                PLP
.39466e	68		pla		                PLA             ; end setdbr macro
.39466f	48		pha		                PHA             ; begin setdp macro
.394670	08		php		                PHP
.394671	c2 20		rep #$20	                REP #$20        ; set A long
.394673	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394676	5b		tcd		                TCD
.394677	28		plp		                PLP
.394678	68		pla		                PLA             ; end setdp macro
.394679	c2 30		rep #$30	                REP #$30        ; set A&X long
.39467b	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39467d	48		pha		                PHA
.39467e	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394680	48		pha		                PHA
.394681	22 c2 45 39	jsl $3945c2	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394685	68		pla		                PLA
.394686	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394688	68		pla		                PLA
.394689	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39468b	90 0f		bcc $39469c	                BCC pass_failure                    ; If found: try to load the cluster
.39468d	22 dc 43 39	jsl $3943dc	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394691	90 09		bcc $39469c	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394693					ret_success
.394693	e2 20		sep #$20	                SEP #$20        ; set A short
.394695	64 0e		stz $032e	                STZ DOS_STATUS
.394697	28		plp		                PLP
.394698	2b		pld		                PLD
.394699	ab		plb		                PLB
.39469a	38		sec		                SEC
.39469b	6b		rtl		                RTL
.39469c	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.39469d	2b		pld		                PLD
.39469e	ab		plb		                PLB
.39469f	18		clc		                CLC
.3946a0	6b		rtl		                RTL
.3946a1					ENTRYFORCLUS12
.3946a1	8b		phb		                PHB
.3946a2	0b		phd		                PHD
.3946a3	08		php		                PHP
.3946a4	48		pha		                PHA             ; begin setdbr macro
.3946a5	08		php		                PHP
.3946a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3946a8	a9 00		lda #$00	                LDA #0
.3946aa	48		pha		                PHA
.3946ab	ab		plb		                PLB
.3946ac	28		plp		                PLP
.3946ad	68		pla		                PLA             ; end setdbr macro
.3946ae	48		pha		                PHA             ; begin setdp macro
.3946af	08		php		                PHP
.3946b0	c2 20		rep #$20	                REP #$20        ; set A long
.3946b2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946b5	5b		tcd		                TCD
.3946b6	28		plp		                PLP
.3946b7	68		pla		                PLA             ; end setdp macro
.3946b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3946ba	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.3946bc	0a		asl a		                ASL A
.3946bd	85 28		sta $0348	                STA DOS_TEMP
.3946bf	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3946c1	2a		rol a		                ROL A
.3946c2	85 2a		sta $034a	                STA DOS_TEMP+2
.3946c4	18		clc		                CLC
.3946c5	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3946c7	65 28		adc $0348	                ADC DOS_TEMP
.3946c9	85 28		sta $0348	                STA DOS_TEMP
.3946cb	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3946cd	65 2a		adc $034a	                ADC DOS_TEMP+2
.3946cf	85 2a		sta $034a	                STA DOS_TEMP+2
.3946d1	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.3946d3	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.3946d5	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.3946d7	29 ff 03	and #$03ff	                AND #$003FF
.3946da	aa		tax		                TAX
.3946db	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946dd	66 28		ror $0348	                ROR DOS_TEMP
.3946df	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946e1	66 28		ror $0348	                ROR DOS_TEMP
.3946e3	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946e5	66 28		ror $0348	                ROR DOS_TEMP
.3946e7	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946e9	66 28		ror $0348	                ROR DOS_TEMP
.3946eb	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946ed	66 28		ror $0348	                ROR DOS_TEMP
.3946ef	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946f1	66 28		ror $0348	                ROR DOS_TEMP
.3946f3	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946f5	66 28		ror $0348	                ROR DOS_TEMP
.3946f7	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946f9	66 28		ror $0348	                ROR DOS_TEMP
.3946fb	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3946fd	66 28		ror $0348	                ROR DOS_TEMP
.3946ff	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394700	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA
.394704	65 28		adc $0348	                ADC DOS_TEMP
.394706	85 24		sta $0344	                STA DOS_FAT_LBA
.394708	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.39470c	65 2a		adc $034a	                ADC DOS_TEMP+2
.39470e	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394710	28		plp		                PLP
.394711	2b		pld		                PLD
.394712	ab		plb		                PLB
.394713	6b		rtl		                RTL
.394714					FATFORCLUSTER12
.394714	8b		phb		                PHB
.394715	0b		phd		                PHD
.394716	08		php		                PHP
.394717	48		pha		                PHA             ; begin setdbr macro
.394718	08		php		                PHP
.394719	e2 20		sep #$20	                SEP #$20        ; set A short
.39471b	a9 00		lda #$00	                LDA #0
.39471d	48		pha		                PHA
.39471e	ab		plb		                PLB
.39471f	28		plp		                PLP
.394720	68		pla		                PLA             ; end setdbr macro
.394721	48		pha		                PHA             ; begin setdp macro
.394722	08		php		                PHP
.394723	c2 20		rep #$20	                REP #$20        ; set A long
.394725	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394728	5b		tcd		                TCD
.394729	28		plp		                PLP
.39472a	68		pla		                PLA             ; end setdp macro
.39472b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39472d	a2 00 00	ldx #$0000	                LDX #0
.394730	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394733	8f 00 e5 37	sta $37e500	clr_loop        STA DOS_FAT_SECTORS
.394737	e8		inx		                INX
.394738	e8		inx		                INX
.394739	e0 00 04	cpx #$0400	                CPX #1024
.39473c	d0 f5		bne $394733	                BNE clr_loop
.39473e	22 a1 46 39	jsl $3946a1	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394742	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394744	85 02		sta $0322	                STA BIOS_LBA
.394746	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394748	85 04		sta $0324	                STA BIOS_LBA+2
.39474a	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.39474d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39474f	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.394752	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394754	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394758	90 17		bcc $394771	                BCC error
.39475a	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.39475c	a9 00 e7	lda #$e700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.39475f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394761	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.394764	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394766	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39476a	90 05		bcc $394771	                BCC error
.39476c	28		plp		                PLP
.39476d	2b		pld		                PLD
.39476e	ab		plb		                PLB
.39476f	38		sec		                SEC
.394770	6b		rtl		                RTL
.394771					error
.394771	e2 20		sep #$20	                SEP #$20        ; set A short
.394773	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394775	85 0e		sta $032e	                STA DOS_STATUS
.394777	28		plp		                PLP
.394778	2b		pld		                PLD
.394779	ab		plb		                PLB
.39477a	18		clc		                CLC
.39477b	6b		rtl		                RTL
.39477c					FATFORCLUSTER32
.39477c	8b		phb		                PHB
.39477d	0b		phd		                PHD
.39477e	48		pha		                PHA             ; begin setdbr macro
.39477f	08		php		                PHP
.394780	e2 20		sep #$20	                SEP #$20        ; set A short
.394782	a9 00		lda #$00	                LDA #0
.394784	48		pha		                PHA
.394785	ab		plb		                PLB
.394786	28		plp		                PLP
.394787	68		pla		                PLA             ; end setdbr macro
.394788	48		pha		                PHA             ; begin setdp macro
.394789	08		php		                PHP
.39478a	c2 20		rep #$20	                REP #$20        ; set A long
.39478c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39478f	5b		tcd		                TCD
.394790	28		plp		                PLP
.394791	68		pla		                PLA             ; end setdp macro
.394792	c2 30		rep #$30	                REP #$30        ; set A&X long
.394794	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394796	85 24		sta $0344	                STA DOS_FAT_LBA
.394798	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39479a	85 26		sta $0346	                STA DOS_FAT_LBA+2
.39479c	a2 07 00	ldx #$0007	                LDX #7
.39479f	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3947a1	66 24		ror $0344	                ROR DOS_FAT_LBA
.3947a3	ca		dex		                DEX
.3947a4	d0 f9		bne $39479f	                BNE div_loop
.3947a6	18		clc		                CLC
.3947a7	a5 24		lda $0344	                LDA DOS_FAT_LBA
.3947a9	6f 14 e0 38	adc $38e014	                ADC FAT_BEGIN_LBA
.3947ad	85 24		sta $0344	                STA DOS_FAT_LBA
.3947af	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3947b1	6f 16 e0 38	adc $38e016	                ADC FAT_BEGIN_LBA+2
.3947b5	85 26		sta $0346	                STA DOS_FAT_LBA+2
.3947b7	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.3947b9	85 02		sta $0322	                STA BIOS_LBA
.3947bb	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3947bd	85 04		sta $0324	                STA BIOS_LBA+2
.3947bf	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.3947c2	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947c4	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.3947c7	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947c9	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.3947cd	b0 06		bcs $3947d5	                BCS find_entry
.3947cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3947d1	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3947d3	80 0e		bra $3947e3	                BRA ret_failure
.3947d5					find_entry
.3947d5	c2 20		rep #$20	                REP #$20        ; set A long
.3947d7	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3947d9	0a		asl a		                ASL A
.3947da	0a		asl a		                ASL A                           ; * 4
.3947db	29 7f 00	and #$007f	                AND #$7F                        ; DOS_CLUS_ID MOD 128
.3947de	aa		tax		                TAX                             ; X should be the offset within the sector
.3947df	2b		pld		ret_success     PLD
.3947e0	ab		plb		                PLB
.3947e1	38		sec		                SEC                             ; return success
.3947e2	6b		rtl		                RTL
.3947e3	2b		pld		ret_failure     PLD
.3947e4	ab		plb		                PLB
.3947e5	18		clc		                CLC                             ; Return failure
.3947e6	6b		rtl		                RTL
.3947e7					NEXTCLUSTER
.3947e7	08		php		                PHP
.3947e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3947ea	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3947ee	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3947f0	d0 08		bne $3947fa	                BNE fat32                       ; No: assume it's FAT32
.3947f2	22 08 48 39	jsl $394808	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.3947f6	90 0d		bcc $394805	                BCC pass_failure                ; If there was an error, pass it up the chain
.3947f8	80 06		bra $394800	                BRA ret_success
.3947fa	22 70 48 39	jsl $394870	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.3947fe	90 05		bcc $394805	                BCC pass_failure                ; If there was an error, pass it up the chain
.394800	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394802	28		plp		                PLP
.394803	38		sec		                SEC
.394804	6b		rtl		                RTL
.394805	28		plp		pass_failure    PLP
.394806	18		clc		                CLC
.394807	6b		rtl		                RTL
.394808					NEXTCLUSTER12
.394808	8b		phb		                    PHB
.394809	0b		phd		                    PHD
.39480a	08		php		                    PHP
.39480b	48		pha		                PHA             ; begin setdbr macro
.39480c	08		php		                PHP
.39480d	e2 20		sep #$20	                SEP #$20        ; set A short
.39480f	a9 00		lda #$00	                LDA #0
.394811	48		pha		                PHA
.394812	ab		plb		                PLB
.394813	28		plp		                PLP
.394814	68		pla		                PLA             ; end setdbr macro
.394815	48		pha		                PHA             ; begin setdp macro
.394816	08		php		                PHP
.394817	c2 20		rep #$20	                REP #$20        ; set A long
.394819	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39481c	5b		tcd		                TCD
.39481d	28		plp		                PLP
.39481e	68		pla		                PLA             ; end setdp macro
.39481f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394821	22 14 47 39	jsl $394714	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394825	b0 03		bcs $39482a	                    BCS chk_clus_id
.394827	82 41 00	brl $39486b	                    BRL pass_failure
.39482a	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.39482c	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.39482f	d0 0d		bne $39483e	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394831					is_even
.394831	c2 20		rep #$20	                REP #$20        ; set A long
.394833	bf 00 e5 37	lda $37e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394837	29 ff 0f	and #$0fff	                    AND #$0FFF
.39483a	85 28		sta $0348	                    STA DOS_TEMP
.39483c	80 0c		bra $39484a	                    BRA check_id
.39483e					is_odd
.39483e	c2 20		rep #$20	                REP #$20        ; set A long
.394840	bf 00 e5 37	lda $37e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394844	4a		lsr a		                    LSR A
.394845	4a		lsr a		                    LSR A
.394846	4a		lsr a		                    LSR A
.394847	4a		lsr a		                    LSR A
.394848	85 28		sta $0348	                    STA DOS_TEMP
.39484a					check_id
.39484a	c2 20		rep #$20	                REP #$20        ; set A long
.39484c	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.39484e	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394851	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394854	f0 0f		beq $394865	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394856	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394858	85 10		sta $0330	                    STA DOS_CLUS_ID
.39485a	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.39485c					ret_success
.39485c	e2 20		sep #$20	                SEP #$20        ; set A short
.39485e	64 0e		stz $032e	                    STZ DOS_STATUS
.394860	28		plp		                    PLP
.394861	2b		pld		                    PLD
.394862	ab		plb		                    PLB
.394863	38		sec		                    SEC
.394864	6b		rtl		                    RTL
.394865					no_more
.394865	e2 20		sep #$20	                SEP #$20        ; set A short
.394867	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394869	85 0e		sta $032e	                    STA DOS_STATUS
.39486b	28		plp		pass_failure        PLP
.39486c	2b		pld		                    PLD
.39486d	ab		plb		                    PLB
.39486e	18		clc		                    CLC
.39486f	6b		rtl		                    RTL
.394870					NEXTCLUSTER32
.394870	8b		phb		                PHB
.394871	0b		phd		                PHD
.394872	08		php		                PHP
.394873	48		pha		                PHA             ; begin setdbr macro
.394874	08		php		                PHP
.394875	e2 20		sep #$20	                SEP #$20        ; set A short
.394877	a9 00		lda #$00	                LDA #0
.394879	48		pha		                PHA
.39487a	ab		plb		                PLB
.39487b	28		plp		                PLP
.39487c	68		pla		                PLA             ; end setdbr macro
.39487d	48		pha		                PHA             ; begin setdp macro
.39487e	08		php		                PHP
.39487f	c2 20		rep #$20	                REP #$20        ; set A long
.394881	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394884	5b		tcd		                TCD
.394885	28		plp		                PLP
.394886	68		pla		                PLA             ; end setdp macro
.394887	c2 30		rep #$30	                REP #$30        ; set A&X long
.394889	22 7c 47 39	jsl $39477c	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.39488d	90 30		bcc $3948bf	                BCC ret_failure                 ; If it did not work, return the error
.39488f	bf 00 e5 37	lda $37e500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394893	85 28		sta $0348	                STA DOS_TEMP
.394895	bf 02 e5 37	lda $37e502,x	                LDA DOS_FAT_SECTORS+2,X
.394899	85 2a		sta $034a	                STA DOS_TEMP+2
.39489b	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.39489d	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3948a0	d0 0c		bne $3948ae	                BNE found_next
.3948a2	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948a4	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.3948a7	d0 05		bne $3948ae	                BNE found_next                  ; No: return this cluster as the next
.3948a9	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3948ac	80 11		bra $3948bf	                BRA ret_failure
.3948ae	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3948b0	85 10		sta $0330	                STA DOS_CLUS_ID
.3948b2	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948b4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948b6					ret_success
.3948b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3948b8	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3948ba	28		plp		                PLP
.3948bb	2b		pld		                PLD
.3948bc	ab		plb		                PLB
.3948bd	38		sec		                SEC
.3948be	6b		rtl		                RTL
.3948bf	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.3948c1	28		plp		                PLP
.3948c2	2b		pld		                PLD
.3948c3	ab		plb		                PLB
.3948c4	18		clc		                CLC
.3948c5	6b		rtl		                RTL
.3948c6					DOS_READNEXT
.3948c6	08		php		                PHP
.3948c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948c9	22 e7 47 39	jsl $3947e7	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.3948cd	90 09		bcc $3948d8	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.3948cf	22 dc 43 39	jsl $3943dc	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.3948d3	90 03		bcc $3948d8	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.3948d5	28		plp		ret_success     PLP
.3948d6	38		sec		                SEC
.3948d7	6b		rtl		                RTL
.3948d8	28		plp		pass_failure    PLP
.3948d9	18		clc		                CLC
.3948da	6b		rtl		                RTL
.3948db					DOS_FREECLUS
.3948db	08		php		                PHP
.3948dc	48		pha		                PHA             ; begin setdp macro
.3948dd	08		php		                PHP
.3948de	c2 20		rep #$20	                REP #$20        ; set A long
.3948e0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948e3	5b		tcd		                TCD
.3948e4	28		plp		                PLP
.3948e5	68		pla		                PLA             ; end setdp macro
.3948e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3948e8	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3948ec	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3948ee	d0 08		bne $3948f8	                BNE fat32                       ; No: assume it's FAT32
.3948f0	22 6c 49 39	jsl $39496c	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.3948f4	90 0d		bcc $394903	                BCC pass_failure                ; If there was an error, pass it up the chain
.3948f6	80 06		bra $3948fe	                BRA ret_success
.3948f8	22 44 4a 39	jsl $394a44	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.3948fc	90 05		bcc $394903	                BCC pass_failure                ; If there was an error, pass it up the chain
.3948fe	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394900	28		plp		                PLP
.394901	38		sec		                SEC
.394902	6b		rtl		                RTL
.394903	28		plp		pass_failure    PLP
.394904	18		clc		                CLC
.394905	6b		rtl		                RTL
.394906					FDC_READ2FAT12
.394906	8b		phb		                    PHB
.394907	0b		phd		                    PHD
.394908	08		php		                    PHP
.394909	48		pha		                PHA             ; begin setdbr macro
.39490a	08		php		                PHP
.39490b	e2 20		sep #$20	                SEP #$20        ; set A short
.39490d	a9 00		lda #$00	                LDA #0
.39490f	48		pha		                PHA
.394910	ab		plb		                PLB
.394911	28		plp		                PLP
.394912	68		pla		                PLA             ; end setdbr macro
.394913	48		pha		                PHA             ; begin setdp macro
.394914	08		php		                PHP
.394915	c2 20		rep #$20	                REP #$20        ; set A long
.394917	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39491a	5b		tcd		                TCD
.39491b	28		plp		                PLP
.39491c	68		pla		                PLA             ; end setdp macro
.39491d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39491f	a9 00 e5	lda #$e500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394922	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394924	a9 37 00	lda #$0037	                    LDA #`DOS_FAT_SECTORS
.394927	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394929	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.39492b	85 02		sta $0322	                    STA BIOS_LBA
.39492d	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.39492f	85 04		sta $0324	                    STA BIOS_LBA+2
.394931	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394935	b0 07		bcs $39493e	                    BCS inc_sect2                   ; If success: start getting the second sector
.394937	e2 20		sep #$20	                SEP #$20        ; set A short
.394939	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.39493b	82 1c 00	brl $39495a	                    BRL ret_failure
.39493e					inc_sect2
.39493e	c2 20		rep #$20	                REP #$20        ; set A long
.394940	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394942	d0 02		bne $394946	                    BNE inc_buff_ptr
.394944	e6 04		inc $0324	                    INC BIOS_LBA+2
.394946	a9 00 e7	lda #$e700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394949	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39494b	a9 37 00	lda #$0037	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39494e	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394950	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394954	b0 0d		bcs $394963	                    BCS ret_success                 ; If success, return success
.394956	e2 20		sep #$20	                SEP #$20        ; set A short
.394958	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.39495a					ret_failure
.39495a	e2 20		sep #$20	                SEP #$20        ; set A short
.39495c	85 00		sta $0320	                    STA BIOS_STATUS
.39495e	28		plp		                    PLP
.39495f	2b		pld		                    PLD
.394960	ab		plb		                    PLB
.394961	18		clc		                    CLC
.394962	6b		rtl		                    RTL
.394963					ret_success
.394963	e2 20		sep #$20	                SEP #$20        ; set A short
.394965	64 00		stz $0320	                    STZ BIOS_STATUS
.394967	28		plp		                    PLP
.394968	2b		pld		                    PLD
.394969	ab		plb		                    PLB
.39496a	38		sec		                    SEC
.39496b	6b		rtl		                    RTL
.39496c					DOS_FREECLUS12
.39496c	da		phx		                PHX
.39496d	8b		phb		                PHB
.39496e	0b		phd		                PHD
.39496f	08		php		                PHP
.394970	48		pha		                PHA             ; begin setdbr macro
.394971	08		php		                PHP
.394972	e2 20		sep #$20	                SEP #$20        ; set A short
.394974	a9 00		lda #$00	                LDA #0
.394976	48		pha		                PHA
.394977	ab		plb		                PLB
.394978	28		plp		                PLP
.394979	68		pla		                PLA             ; end setdbr macro
.39497a	48		pha		                PHA             ; begin setdp macro
.39497b	08		php		                PHP
.39497c	c2 20		rep #$20	                REP #$20        ; set A long
.39497e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394981	5b		tcd		                TCD
.394982	28		plp		                PLP
.394983	68		pla		                PLA             ; end setdp macro
.394984	c2 30		rep #$30	                REP #$30        ; set A&X long
.394986	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394989	85 10		sta $0330	                STA DOS_CLUS_ID
.39498b	a9 00 00	lda #$0000	                LDA #0
.39498e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394990	22 a1 46 39	jsl $3946a1	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394994	22 06 49 39	jsl $394906	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394998	b0 07		bcs $3949a1	                BCS start_of_fat                ; If success, move X to the start of the FAT
.39499a	e2 20		sep #$20	                SEP #$20        ; set A short
.39499c	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39499e	82 99 00	brl $394a3a	                BRL ret_failure
.3949a1					start_of_fat
.3949a1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949a3	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3949a5	89 01 00	bit #$0001	                BIT #1
.3949a8	d0 09		bne $3949b3	                BNE is_odd
.3949aa	bf 00 e5 37	lda $37e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.3949ae	29 ff 0f	and #$0fff	                AND #$0FFF
.3949b1	80 08		bra $3949bb	                BRA chk_available
.3949b3	bf 00 e5 37	lda $37e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.3949b7	4a		lsr a		                LSR A
.3949b8	4a		lsr a		                LSR A
.3949b9	4a		lsr a		                LSR A
.3949ba	4a		lsr a		                LSR A
.3949bb					chk_available
.3949bb	85 28		sta $0348	                STA DOS_TEMP
.3949bd	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.3949c0	f0 03		beq $3949c5	                BEQ chk_found
.3949c2	82 39 00	brl $3949fe	                BRL next_cluster                ; No: advance to the next cluster
.3949c5	8a		txa		chk_found       TXA
.3949c6	85 2a		sta $034a	                STA DOS_TEMP+2
.3949c8	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3949ca	89 01 00	bit #$0001	                BIT #1
.3949cd	d0 0d		bne $3949dc	                BNE is_odd2
.3949cf					is_even2
.3949cf	bf 00 e5 37	lda $37e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.3949d3	09 ff 0f	ora #$0fff	                ORA #$0FFF
.3949d6	9f 00 e5 37	sta $37e500,x	                STA DOS_FAT_SECTORS,X
.3949da	80 0b		bra $3949e7	                BRA write_fat
.3949dc					is_odd2
.3949dc	bf 00 e5 37	lda $37e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.3949e0	09 f0 ff	ora #$fff0	                ORA #$FFF0
.3949e3	9f 00 e5 37	sta $37e500,x	                STA DOS_FAT_SECTORS,X
.3949e7	22 01 4b 39	jsl $394b01	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.3949eb	b0 07		bcs $3949f4	                BCS ret_success                 ; If success: return success
.3949ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3949ef	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.3949f1	82 46 00	brl $394a3a	                BRL ret_failure
.3949f4					ret_success
.3949f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3949f6	64 0e		stz $032e	                STZ DOS_STATUS
.3949f8	28		plp		                PLP
.3949f9	2b		pld		                PLD
.3949fa	ab		plb		                PLB
.3949fb	fa		plx		                PLX
.3949fc	38		sec		                SEC
.3949fd	6b		rtl		                RTL
.3949fe					next_cluster
.3949fe	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394a00	d0 02		bne $394a04	                BNE calc_entry
.394a02	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394a04	22 a1 46 39	jsl $3946a1	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394a08	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394a0b	f0 03		beq $394a10	                BEQ chk_end_of_fat
.394a0d	82 93 ff	brl $3949a3	                BRL chk_cluster                 ; No: go back and check it too
.394a10					chk_end_of_fat
.394a10	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394a12	cf 18 e0 38	cmp $38e018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394a16	d0 0f		bne $394a27	                BNE next_2
.394a18	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a1a	cf 1a e0 38	cmp $38e01a	                CMP FAT2_BEGIN_LBA+2
.394a1e	d0 07		bne $394a27	                BNE next_2                      ; No: get the next to sectors
.394a20	e2 20		sep #$20	                SEP #$20        ; set A short
.394a22	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394a24	82 13 00	brl $394a3a	                BRL ret_failure
.394a27					next_2
.394a27	22 06 49 39	jsl $394906	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394a2b	90 06		bcc $394a33	                BCC fat_fail                    ; If failed: return error
.394a2d	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394a30	82 70 ff	brl $3949a3	                BRL chk_cluster                 ; And start checking from there
.394a33					fat_fail
.394a33	e2 20		sep #$20	                SEP #$20        ; set A short
.394a35	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a37	82 00 00	brl $394a3a	                BRL ret_failure
.394a3a					ret_failure
.394a3a	e2 20		sep #$20	                SEP #$20        ; set A short
.394a3c	85 0e		sta $032e	                STA DOS_STATUS
.394a3e	28		plp		                PLP
.394a3f	2b		pld		                PLD
.394a40	ab		plb		                PLB
.394a41	fa		plx		                PLX
.394a42	18		clc		                CLC
.394a43	6b		rtl		                RTL
.394a44					DOS_FREECLUS32
.394a44	8b		phb		                PHB
.394a45	0b		phd		                PHD
.394a46	08		php		                PHP
.394a47	48		pha		                PHA             ; begin setdbr macro
.394a48	08		php		                PHP
.394a49	e2 20		sep #$20	                SEP #$20        ; set A short
.394a4b	a9 00		lda #$00	                LDA #0
.394a4d	48		pha		                PHA
.394a4e	ab		plb		                PLB
.394a4f	28		plp		                PLP
.394a50	68		pla		                PLA             ; end setdbr macro
.394a51	48		pha		                PHA             ; begin setdp macro
.394a52	08		php		                PHP
.394a53	c2 20		rep #$20	                REP #$20        ; set A long
.394a55	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a58	5b		tcd		                TCD
.394a59	28		plp		                PLP
.394a5a	68		pla		                PLA             ; end setdp macro
.394a5b	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a5d	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394a60	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a62	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.394a65	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a67	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394a6b	85 02		sta $0322	                STA BIOS_LBA
.394a6d	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.394a71	85 04		sta $0324	                STA BIOS_LBA+2
.394a73	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394a77	b0 07		bcs $394a80	                BCS initial_entry               ; If OK: set the initial entry to check
.394a79	e2 20		sep #$20	                SEP #$20        ; set A short
.394a7b	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394a7d	82 5e 00	brl $394ade	                BRL ret_failure
.394a80					initial_entry
.394a80	c2 20		rep #$20	                REP #$20        ; set A long
.394a82	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394a85	85 10		sta $0330	                STA DOS_CLUS_ID
.394a87	a9 00 00	lda #$0000	                LDA #0
.394a8a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a8c	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394a8f	bf 00 e3 37	lda $37e300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394a93	d0 06		bne $394a9b	                BNE next_entry                  ; No: move to the next entry
.394a95	bf 02 e3 37	lda $37e302,x	                LDA DOS_SECTOR+2,X
.394a99	f0 29		beq $394ac4	                BEQ found_free                  ; Yes: go to allocate and return it
.394a9b	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394a9d	d0 02		bne $394aa1	                BNE inc_ptr
.394a9f	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394aa1	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394aa2	e8		inx		                INX
.394aa3	e8		inx		                INX
.394aa4	e8		inx		                INX
.394aa5	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394aa8	90 e5		bcc $394a8f	                BLT chk_entry                   ; No: check this entry
.394aaa	18		clc		                CLC                             ; Point to the next sector in the FAT
.394aab	a5 02		lda $0322	                LDA BIOS_LBA
.394aad	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394ab0	85 02		sta $0322	                STA BIOS_LBA
.394ab2	a5 04		lda $0324	                LDA BIOS_LBA+2
.394ab4	69 00 00	adc #$0000	                ADC #0
.394ab7	85 04		sta $0324	                STA BIOS_LBA+2
.394ab9	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394abd	b0 00		bcs $394abf	                BCS set_ptr                     ; If OK: set the pointer and check it
.394abf	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394ac2	80 cb		bra $394a8f	                BRA chk_entry                   ; Check this entry
.394ac4					found_free
.394ac4	c2 20		rep #$20	                REP #$20        ; set A long
.394ac6	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394ac9	9f 00 e3 37	sta $37e300,x	                STA DOS_SECTOR,X
.394acd	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394ad0	9f 02 e3 37	sta $37e302,x	                STA DOS_SECTOR+2,X
.394ad4	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ad8	b0 0d		bcs $394ae7	                BCS ret_success                 ; If OK: return success
.394ada	e2 20		sep #$20	                SEP #$20        ; set A short
.394adc	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394ade					ret_failure
.394ade	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae0	85 0e		sta $032e	                STA DOS_STATUS
.394ae2	28		plp		                PLP
.394ae3	2b		pld		                PLD
.394ae4	ab		plb		                PLB
.394ae5	18		clc		                CLC
.394ae6	6b		rtl		                RTL
.394ae7					ret_success
.394ae7	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae9	64 0e		stz $032e	                STZ DOS_STATUS
.394aeb	28		plp		                PLP
.394aec	2b		pld		                PLD
.394aed	ab		plb		                PLB
.394aee	38		sec		                SEC
.394aef	6b		rtl		                RTL
.394af0					DELCLUSTER
.394af0	e2 20		sep #$20	                SEP #$20        ; set A short
.394af2	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394af6	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394af8	d0 04		bne $394afe	                BNE fat32                       ; No: assume it's FAT32
.394afa	5c 48 4b 39	jmp $394b48	fat12           JML DELCLUSTER12
.394afe	4c 99 4b	jmp $394b99	fat32           JMP DELCLUSTER32
.394b01					WRITEFAT12
.394b01	8b		phb		                PHB
.394b02	0b		phd		                PHD
.394b03	48		pha		                PHA             ; begin setdbr macro
.394b04	08		php		                PHP
.394b05	e2 20		sep #$20	                SEP #$20        ; set A short
.394b07	a9 00		lda #$00	                LDA #0
.394b09	48		pha		                PHA
.394b0a	ab		plb		                PLB
.394b0b	28		plp		                PLP
.394b0c	68		pla		                PLA             ; end setdbr macro
.394b0d	48		pha		                PHA             ; begin setdp macro
.394b0e	08		php		                PHP
.394b0f	c2 20		rep #$20	                REP #$20        ; set A long
.394b11	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b14	5b		tcd		                TCD
.394b15	28		plp		                PLP
.394b16	68		pla		                PLA             ; end setdp macro
.394b17	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b19	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394b1c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b1e	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.394b21	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b23	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394b25	85 02		sta $0322	                STA BIOS_LBA
.394b27	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b29	85 04		sta $0324	                STA BIOS_LBA+2
.394b2b	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394b2f	90 14		bcc $394b45	                BCC done
.394b31	a9 00 e7	lda #$e700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394b34	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b36	a9 37 00	lda #$0037	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394b39	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b3b	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394b3d	d0 02		bne $394b41	                BNE put_second
.394b3f	e6 04		inc $0324	                INC BIOS_LBA+2
.394b41	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394b45	2b		pld		done            PLD
.394b46	ab		plb		                PLB
.394b47	6b		rtl		                RTL
.394b48					DELCLUSTER12
.394b48	8b		phb		                PHB
.394b49	0b		phd		                PHD
.394b4a	08		php		                PHP
.394b4b	48		pha		                PHA             ; begin setdbr macro
.394b4c	08		php		                PHP
.394b4d	e2 20		sep #$20	                SEP #$20        ; set A short
.394b4f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394b51	48		pha		                PHA
.394b52	ab		plb		                PLB
.394b53	28		plp		                PLP
.394b54	68		pla		                PLA             ; end setdbr macro
.394b55	48		pha		                PHA             ; begin setdp macro
.394b56	08		php		                PHP
.394b57	c2 20		rep #$20	                REP #$20        ; set A long
.394b59	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b5c	5b		tcd		                TCD
.394b5d	28		plp		                PLP
.394b5e	68		pla		                PLA             ; end setdp macro
.394b5f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b61	22 14 47 39	jsl $394714	                JSL FATFORCLUSTER12
.394b65	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394b66	89 01 00	bit #$0001	                BIT #1
.394b69	d0 09		bne $394b74	                BNE is_odd
.394b6b	bf 00 e5 37	lda $37e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394b6f	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394b72	80 07		bra $394b7b	                BRA save_update
.394b74	bf 00 e5 37	lda $37e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394b78	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394b7b	9f 00 e5 37	sta $37e500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394b7f	22 01 4b 39	jsl $394b01	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394b83	b0 0b		bcs $394b90	                BCS ret_success
.394b85					ret_failure
.394b85	e2 20		sep #$20	                SEP #$20        ; set A short
.394b87	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b89	85 0e		sta $032e	                STA DOS_STATUS
.394b8b	28		plp		                PLP
.394b8c	2b		pld		                PLD
.394b8d	ab		plb		                PLB
.394b8e	18		clc		                CLC
.394b8f	6b		rtl		                RTL
.394b90					ret_success
.394b90	e2 20		sep #$20	                SEP #$20        ; set A short
.394b92	64 0e		stz $032e	                STZ DOS_STATUS
.394b94	28		plp		                PLP
.394b95	2b		pld		                PLD
.394b96	ab		plb		                PLB
.394b97	38		sec		                SEC
.394b98	6b		rtl		                RTL
.394b99					DELCLUSTER32
.394b99	8b		phb		                PHB
.394b9a	0b		phd		                PHD
.394b9b	08		php		                PHP
.394b9c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b9e	48		pha		                PHA             ; begin setdbr macro
.394b9f	08		php		                PHP
.394ba0	e2 20		sep #$20	                SEP #$20        ; set A short
.394ba2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ba4	48		pha		                PHA
.394ba5	ab		plb		                PLB
.394ba6	28		plp		                PLP
.394ba7	68		pla		                PLA             ; end setdbr macro
.394ba8	48		pha		                PHA             ; begin setdp macro
.394ba9	08		php		                PHP
.394baa	c2 20		rep #$20	                REP #$20        ; set A long
.394bac	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394baf	5b		tcd		                TCD
.394bb0	28		plp		                PLP
.394bb1	68		pla		                PLA             ; end setdp macro
.394bb2	22 7c 47 39	jsl $39477c	                JSL FATFORCLUSTER32
.394bb6	a9 00 00	lda #$0000	                LDA #0
.394bb9	9f 00 e5 37	sta $37e500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394bbd	9f 02 e5 37	sta $37e502,x	                STA DOS_FAT_SECTORS+2,X
.394bc1	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394bc5	b0 0b		bcs $394bd2	                BCS ret_success
.394bc7					ret_failure
.394bc7	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc9	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bcb	85 0e		sta $032e	                STA DOS_STATUS
.394bcd	28		plp		                PLP
.394bce	2b		pld		                PLD
.394bcf	ab		plb		                PLB
.394bd0	18		clc		                CLC
.394bd1	6b		rtl		                RTL
.394bd2					ret_success
.394bd2	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd4	64 0e		stz $032e	                STZ DOS_STATUS
.394bd6	28		plp		                PLP
.394bd7	2b		pld		                PLD
.394bd8	ab		plb		                PLB
.394bd9	38		sec		                SEC
.394bda	6b		rtl		                RTL
.394bdb					DOS_APPENDCLUS
.394bdb	8b		phb		                PHB
.394bdc	0b		phd		                PHD
.394bdd	08		php		                PHP
.394bde	48		pha		                PHA             ; begin setdbr macro
.394bdf	08		php		                PHP
.394be0	e2 20		sep #$20	                SEP #$20        ; set A short
.394be2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394be4	48		pha		                PHA
.394be5	ab		plb		                PLB
.394be6	28		plp		                PLP
.394be7	68		pla		                PLA             ; end setdbr macro
.394be8	48		pha		                PHA             ; begin setdp macro
.394be9	08		php		                PHP
.394bea	c2 20		rep #$20	                REP #$20        ; set A long
.394bec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bef	5b		tcd		                TCD
.394bf0	28		plp		                PLP
.394bf1	68		pla		                PLA             ; end setdp macro
.394bf2	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bf4	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394bf6	48		pha		                PHA
.394bf7	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bf9	48		pha		                PHA
.394bfa	22 db 48 39	jsl $3948db	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394bfe	b0 09		bcs $394c09	                BCS save_cluster                ; If we got a cluster, write the data to it
.394c00	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394c01	85 10		sta $0330	                STA DOS_CLUS_ID
.394c03	68		pla		                PLA
.394c04	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c06	82 82 00	brl $394c8b	                BRL pass_failure                ; Pass the failure back up the chain
.394c09	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394c0b	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c0e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c10	8d 38 e0	sta $38e038	                STA DOS_NEW_CLUSTER+2
.394c13	22 19 44 39	jsl $394419	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394c17	90 e7		bcc $394c00	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394c19	68		pla		                PLA                             ; Restore the cluster of the file
.394c1a	85 10		sta $0330	                STA DOS_CLUS_ID
.394c1c	68		pla		                PLA
.394c1d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c1f	22 e7 47 39	jsl $3947e7	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394c23	b0 fa		bcs $394c1f	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394c25	e2 20		sep #$20	                SEP #$20        ; set A short
.394c27	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c2b	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c2d	d0 40		bne $394c6f	                BNE fat32                       ; No: assume it's FAT32
.394c2f					fat12
.394c2f	c2 20		rep #$20	                REP #$20        ; set A long
.394c31	22 a1 46 39	jsl $3946a1	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394c35	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394c37	89 01 00	bit #$0001	                BIT #1
.394c3a	d0 12		bne $394c4e	                BNE is_odd
.394c3c	ad 36 e0	lda $38e036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394c3f	29 ff 0f	and #$0fff	                AND #$0FFF
.394c42	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c45	bf 00 e5 37	lda $37e500,x	                LDA DOS_FAT_SECTORS,X
.394c49	29 00 f0	and #$f000	                AND #$F000
.394c4c	80 11		bra $394c5f	                BRA update_fat12
.394c4e	ad 36 e0	lda $38e036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394c51	0a		asl a		                ASL A
.394c52	0a		asl a		                ASL A
.394c53	0a		asl a		                ASL A
.394c54	0a		asl a		                ASL A
.394c55	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c58	bf 00 e5 37	lda $37e500,x	                LDA DOS_FAT_SECTORS,X
.394c5c	29 0f 00	and #$000f	                AND #$000F
.394c5f	0d 36 e0	ora $38e036	update_fat12    ORA DOS_NEW_CLUSTER
.394c62	9f 00 e5 37	sta $37e500,x	                STA DOS_FAT_SECTORS,X
.394c66	22 01 4b 39	jsl $394b01	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394c6a	b0 24		bcs $394c90	                BCS ret_success
.394c6c	82 1c 00	brl $394c8b	                BRL pass_failure
.394c6f					fat32
.394c6f	c2 20		rep #$20	                REP #$20        ; set A long
.394c71	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394c74	9f 00 e5 37	sta $37e500,x	                STA DOS_FAT_SECTORS,X
.394c78	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.394c7b	9f 02 e5 37	sta $37e502,x	                STA DOS_FAT_SECTORS+2,X
.394c7f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394c83	b0 0b		bcs $394c90	                BCS ret_success
.394c85	e2 20		sep #$20	                SEP #$20        ; set A short
.394c87	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394c89	85 0e		sta $032e	                STA DOS_STATUS
.394c8b	28		plp		pass_failure    PLP
.394c8c	2b		pld		                PLD
.394c8d	ab		plb		                PLB
.394c8e	18		clc		                CLC
.394c8f	6b		rtl		                RTL
.394c90					ret_success
.394c90	e2 20		sep #$20	                SEP #$20        ; set A short
.394c92	64 0e		stz $032e	                STZ DOS_STATUS
.394c94	28		plp		                PLP
.394c95	2b		pld		                PLD
.394c96	ab		plb		                PLB
.394c97	38		sec		                SEC
.394c98	6b		rtl		                RTL
.394c99					BCD2BIN
.394c99	8b		phb		                PHB
.394c9a	0b		phd		                PHD
.394c9b	08		php		                PHP
.394c9c	48		pha		                PHA             ; begin setdbr macro
.394c9d	08		php		                PHP
.394c9e	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca0	a9 00		lda #$00	                LDA #0
.394ca2	48		pha		                PHA
.394ca3	ab		plb		                PLB
.394ca4	28		plp		                PLP
.394ca5	68		pla		                PLA             ; end setdbr macro
.394ca6	48		pha		                PHA             ; begin setdp macro
.394ca7	08		php		                PHP
.394ca8	c2 20		rep #$20	                REP #$20        ; set A long
.394caa	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cad	5b		tcd		                TCD
.394cae	28		plp		                PLP
.394caf	68		pla		                PLA             ; end setdp macro
.394cb0	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cb2	85 28		sta $0348	                STA DOS_TEMP
.394cb4	29 0f 00	and #$000f	                AND #$000F
.394cb7	85 2a		sta $034a	                STA DOS_TEMP+2
.394cb9	a5 28		lda $0348	                LDA DOS_TEMP
.394cbb	4a		lsr a		                LSR A
.394cbc	4a		lsr a		                LSR A
.394cbd	4a		lsr a		                LSR A
.394cbe	4a		lsr a		                LSR A
.394cbf	85 28		sta $0348	                STA DOS_TEMP
.394cc1	29 0f 00	and #$000f	                AND #$000F
.394cc4	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394cc8	a9 0a 00	lda #$000a	                LDA #10
.394ccb	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394ccf	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394cd3	18		clc		                CLC
.394cd4	65 2a		adc $034a	                ADC DOS_TEMP+2
.394cd6	85 2a		sta $034a	                STA DOS_TEMP+2
.394cd8	a5 28		lda $0348	                LDA DOS_TEMP
.394cda	4a		lsr a		                LSR A
.394cdb	4a		lsr a		                LSR A
.394cdc	4a		lsr a		                LSR A
.394cdd	4a		lsr a		                LSR A
.394cde	85 28		sta $0348	                STA DOS_TEMP
.394ce0	29 0f 00	and #$000f	                AND #$000F
.394ce3	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394ce7	a9 64 00	lda #$0064	                LDA #100
.394cea	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394cee	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394cf2	18		clc		                CLC
.394cf3	65 2a		adc $034a	                ADC DOS_TEMP+2
.394cf5	85 2a		sta $034a	                STA DOS_TEMP+2
.394cf7	a5 28		lda $0348	                LDA DOS_TEMP
.394cf9	4a		lsr a		                LSR A
.394cfa	4a		lsr a		                LSR A
.394cfb	4a		lsr a		                LSR A
.394cfc	4a		lsr a		                LSR A
.394cfd	29 0f 00	and #$000f	                AND #$000F
.394d00	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d04	a9 e8 03	lda #$03e8	                LDA #1000
.394d07	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d0b	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d0f	18		clc		                CLC
.394d10	65 2a		adc $034a	                ADC DOS_TEMP+2
.394d12	28		plp		                PLP
.394d13	2b		pld		                PLD
.394d14	ab		plb		                PLB
.394d15	6b		rtl		                RTL
.394d16					DOS_RTCCREATE
.394d16	8b		phb		                PHB
.394d17	0b		phd		                PHD
.394d18	08		php		                PHP
.394d19	48		pha		                PHA             ; begin setdbr macro
.394d1a	08		php		                PHP
.394d1b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d1d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d1f	48		pha		                PHA
.394d20	ab		plb		                PLB
.394d21	28		plp		                PLP
.394d22	68		pla		                PLA             ; end setdbr macro
.394d23	48		pha		                PHA             ; begin setdp macro
.394d24	08		php		                PHP
.394d25	c2 20		rep #$20	                REP #$20        ; set A long
.394d27	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d2a	5b		tcd		                TCD
.394d2b	28		plp		                PLP
.394d2c	68		pla		                PLA             ; end setdp macro
.394d2d	c2 10		rep #$10	                REP #$10        ; set X long
.394d2f	e2 20		sep #$20	                SEP #$20        ; set A short
.394d31	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394d35	09 08		ora #$08	                ORA #%00001000
.394d37	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394d3b	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394d3f	85 29		sta $0349	                STA DOS_TEMP+1
.394d41	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394d45	85 28		sta $0348	                STA DOS_TEMP
.394d47	c2 20		rep #$20	                REP #$20        ; set A long
.394d49	a5 28		lda $0348	                LDA DOS_TEMP
.394d4b	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394d4f	85 28		sta $0348	                STA DOS_TEMP
.394d51	38		sec		                SEC                         ; Year is relative to 1980
.394d52	e9 bc 07	sbc #$07bc	                SBC #1980
.394d55	c2 20		rep #$20	                REP #$20        ; set A long
.394d57	0a		asl a		                ASL A
.394d58	0a		asl a		                ASL A
.394d59	0a		asl a		                ASL A
.394d5a	0a		asl a		                ASL A
.394d5b	0a		asl a		                ASL A
.394d5c	0a		asl a		                ASL A
.394d5d	0a		asl a		                ASL A
.394d5e	0a		asl a		                ASL A
.394d5f	0a		asl a		                ASL A
.394d60	29 00 fe	and #$fe00	                AND #$FE00
.394d63	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394d66	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d68	e2 20		sep #$20	                SEP #$20        ; set A short
.394d6a	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394d6e	c2 20		rep #$20	                REP #$20        ; set A long
.394d70	29 ff 00	and #$00ff	                AND #$00FF
.394d73	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394d77	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394d7a	0a		asl a		                ASL A
.394d7b	0a		asl a		                ASL A
.394d7c	0a		asl a		                ASL A
.394d7d	0a		asl a		                ASL A
.394d7e	0a		asl a		                ASL A
.394d7f	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394d82	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394d85	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394d87	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d89	e2 20		sep #$20	                SEP #$20        ; set A short
.394d8b	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394d8f	c2 20		rep #$20	                REP #$20        ; set A long
.394d91	29 ff 00	and #$00ff	                AND #$00FF
.394d94	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394d98	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394d9b	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394d9e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394da0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394da2	e2 20		sep #$20	                SEP #$20        ; set A short
.394da4	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394da8	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394daa	c2 20		rep #$20	                REP #$20        ; set A long
.394dac	29 ff 00	and #$00ff	                AND #$00FF
.394daf	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394db3	c2 20		rep #$20	                REP #$20        ; set A long
.394db5	0a		asl a		                ASL A
.394db6	0a		asl a		                ASL A
.394db7	0a		asl a		                ASL A
.394db8	0a		asl a		                ASL A
.394db9	0a		asl a		                ASL A
.394dba	0a		asl a		                ASL A
.394dbb	0a		asl a		                ASL A
.394dbc	0a		asl a		                ASL A
.394dbd	0a		asl a		                ASL A
.394dbe	0a		asl a		                ASL A
.394dbf	0a		asl a		                ASL A
.394dc0	29 00 f8	and #$f800	                AND #$F800
.394dc3	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394dc6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394dc8	e2 20		sep #$20	                SEP #$20        ; set A short
.394dca	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394dce	c2 20		rep #$20	                REP #$20        ; set A long
.394dd0	29 ff 00	and #$00ff	                AND #$00FF
.394dd3	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394dd7	c2 20		rep #$20	                REP #$20        ; set A long
.394dd9	0a		asl a		                ASL A
.394dda	0a		asl a		                ASL A
.394ddb	0a		asl a		                ASL A
.394ddc	0a		asl a		                ASL A
.394ddd	0a		asl a		                ASL A
.394dde	29 e0 07	and #$07e0	                AND #$07E0
.394de1	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394de4	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394de6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394de8	e2 20		sep #$20	                SEP #$20        ; set A short
.394dea	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394dee	c2 20		rep #$20	                REP #$20        ; set A long
.394df0	29 ff 00	and #$00ff	                AND #$00FF
.394df3	22 99 4c 39	jsl $394c99	                JSL BCD2BIN                 ; Convert it to binary
.394df7	c2 20		rep #$20	                REP #$20        ; set A long
.394df9	29 1f 00	and #$001f	                AND #$001F
.394dfc	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394dff	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e01	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e03	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394e07	29 f7 00	and #$00f7	                AND #%11110111
.394e0a	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394e0e	28		plp		                PLP
.394e0f	2b		pld		                PLD
.394e10	ab		plb		                PLB
.394e11	6b		rtl		                RTL
.394e12					DOS_CREATE
.394e12	8b		phb		                PHB
.394e13	0b		phd		                PHD
.394e14	08		php		                PHP
.394e15	48		pha		                PHA             ; begin setdbr macro
.394e16	08		php		                PHP
.394e17	e2 20		sep #$20	                SEP #$20        ; set A short
.394e19	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e1b	48		pha		                PHA
.394e1c	ab		plb		                PLB
.394e1d	28		plp		                PLP
.394e1e	68		pla		                PLA             ; end setdbr macro
.394e1f	48		pha		                PHA             ; begin setdp macro
.394e20	08		php		                PHP
.394e21	c2 20		rep #$20	                REP #$20        ; set A long
.394e23	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e26	5b		tcd		                TCD
.394e27	28		plp		                PLP
.394e28	68		pla		                PLA             ; end setdp macro
.394e29	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e2b	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394e2e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e30	85 28		sta $0348	                STA DOS_TEMP
.394e32	c8		iny		                INY
.394e33	c8		iny		                INY
.394e34	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e36	85 2a		sta $034a	                STA DOS_TEMP+2
.394e38	e2 20		sep #$20	                SEP #$20        ; set A short
.394e3a	a0 00 00	ldy #$0000	                LDY #0
.394e3d	a2 00 00	ldx #$0000	                LDX #0
.394e40	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394e42	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394e44	f0 04		beq $394e4a	                BEQ find_file                   ; If it's NULL, we're done
.394e46	e8		inx		                INX
.394e47	c8		iny		                INY
.394e48	80 f6		bra $394e40	                BRA path_loop
.394e4a	22 2a 45 39	jsl $39452a	find_file       JSL DOS_PARSE_PATH
.394e4e	22 c2 45 39	jsl $3945c2	                JSL DOS_FINDFILE
.394e52	90 07		bcc $394e5b	                BCC set_device
.394e54	e2 20		sep #$20	                SEP #$20        ; set A short
.394e56	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394e58	82 c9 00	brl $394f24	                BRL ret_failure
.394e5b					set_device
.394e5b	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5d	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394e60	a5 01		lda $0321	                LDA BIOS_DEV
.394e62	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e64					validate_name
.394e64	22 db 48 39	jsl $3948db	                JSL DOS_FREECLUS
.394e68	b0 03		bcs $394e6d	                BCS save_data
.394e6a	82 bb 00	brl $394f28	                BRL pass_failure
.394e6d					save_data
.394e6d	c2 20		rep #$20	                REP #$20        ; set A long
.394e6f	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394e72	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394e74	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e76	c8		iny		                INY
.394e77	c8		iny		                INY
.394e78	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e7a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e7c	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394e7f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e81	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394e83	c8		iny		                INY
.394e84	c8		iny		                INY
.394e85	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e87	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394e89	22 19 44 39	jsl $394419	                JSL DOS_PUTCLUSTER
.394e8d	b0 00		bcs $394e8f	                BCS find_dir
.394e8f					find_dir
.394e8f	c2 20		rep #$20	                REP #$20        ; set A long
.394e91	22 6c 40 39	jsl $39406c	                JSL DOS_DIRFINDFREE
.394e95	b0 1a		bcs $394eb1	                BCS set_entry
.394e97	c2 20		rep #$20	                REP #$20        ; set A long
.394e99	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394e9c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394e9e	85 10		sta $0330	                STA DOS_CLUS_ID
.394ea0	c8		iny		                INY
.394ea1	c8		iny		                INY
.394ea2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ea4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ea6	22 99 4b 39	jsl $394b99	                JSL DELCLUSTER32                ; Delete the cluster
.394eaa	e2 20		sep #$20	                SEP #$20        ; set A short
.394eac	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394eae	82 73 00	brl $394f24	                BRL ret_failure
.394eb1					set_entry
.394eb1	e2 20		sep #$20	                SEP #$20        ; set A short
.394eb3	a0 00 00	ldy #$0000	                LDY #0
.394eb6	a9 00		lda #$00	                LDA #0                          ; NULL
.394eb8	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394eba	c8		iny		                INY
.394ebb	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394ebe	d0 f8		bne $394eb8	                BNE copy_dir_loop
.394ec0	a0 00 00	ldy #$0000	                LDY #0
.394ec3	b9 3a e0	lda $38e03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394ec6	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ec8	c8		iny		                INY
.394ec9	c0 0b 00	cpy #$000b	                CPY #11
.394ecc	d0 f5		bne $394ec3	                BNE name_loop
.394ece	c2 20		rep #$20	                REP #$20        ; set A long
.394ed0	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394ed3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ed5	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394ed8	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394eda	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394edd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394edf	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ee2	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ee4	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394ee7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ee9	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394eec	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394eee	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394ef1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ef3	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394ef6	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ef8	22 16 4d 39	jsl $394d16	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.394efc	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394eff	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f01	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394f04	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f06	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394f09	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f0b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394f0e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f10	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394f13	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f15	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394f18	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f1a	c2 20		rep #$20	                REP #$20        ; set A long
.394f1c	22 2b 41 39	jsl $39412b	                JSL DOS_DIRWRITE
.394f20	b0 0b		bcs $394f2d	                BCS ret_success
.394f22	80 04		bra $394f28	                BRA pass_failure
.394f24					ret_failure
.394f24	e2 20		sep #$20	                SEP #$20        ; set A short
.394f26	85 0e		sta $032e	                STA DOS_STATUS
.394f28	28		plp		pass_failure    PLP
.394f29	2b		pld		                PLD
.394f2a	ab		plb		                PLB
.394f2b	18		clc		                CLC
.394f2c	6b		rtl		                RTL
.394f2d					ret_success
.394f2d	e2 20		sep #$20	                SEP #$20        ; set A short
.394f2f	64 0e		stz $032e	                STZ DOS_STATUS
.394f31	28		plp		                PLP
.394f32	2b		pld		                PLD
.394f33	ab		plb		                PLB
.394f34	38		sec		                SEC
.394f35	6b		rtl		                RTL
.394f36					DOS_COPYPATH
.394f36	da		phx		                PHX
.394f37	5a		phy		                PHY
.394f38	8b		phb		                PHB
.394f39	0b		phd		                PHD
.394f3a	08		php		                PHP
.394f3b	48		pha		                PHA             ; begin setdbr macro
.394f3c	08		php		                PHP
.394f3d	e2 20		sep #$20	                SEP #$20        ; set A short
.394f3f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f41	48		pha		                PHA
.394f42	ab		plb		                PLB
.394f43	28		plp		                PLP
.394f44	68		pla		                PLA             ; end setdbr macro
.394f45	48		pha		                PHA             ; begin setdp macro
.394f46	08		php		                PHP
.394f47	c2 20		rep #$20	                REP #$20        ; set A long
.394f49	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f4c	5b		tcd		                TCD
.394f4d	28		plp		                PLP
.394f4e	68		pla		                PLA             ; end setdp macro
.394f4f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f51	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394f54	a2 00 00	ldx #$0000	                LDX #0
.394f57	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394f59	e8		inx		                INX
.394f5a	e8		inx		                INX
.394f5b	e0 00 01	cpx #$0100	                CPX #256
.394f5e	d0 f7		bne $394f57	                BNE clr_loop
.394f60	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394f62	d0 04		bne $394f68	                BNE get_path            ; No: attempt to fetch the path
.394f64	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394f66	f0 27		beq $394f8f	                BEQ done                ; Yes: return an empty buffer
.394f68	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394f6b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f6d	85 28		sta $0348	                STA DOS_TEMP
.394f6f	c8		iny		                INY
.394f70	c8		iny		                INY
.394f71	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f73	85 2a		sta $034a	                STA DOS_TEMP+2
.394f75	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394f77	d0 04		bne $394f7d	                BNE start_copy          ; No: start copying it
.394f79	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394f7b	f0 12		beq $394f8f	                BEQ done                ; Yes: return an empty buffer
.394f7d					start_copy
.394f7d	e2 20		sep #$20	                SEP #$20        ; set A short
.394f7f	a2 00 00	ldx #$0000	                LDX #0
.394f82	a0 00 00	ldy #$0000	                LDY #0
.394f85	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394f87	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394f89	f0 04		beq $394f8f	                BEQ done
.394f8b	e8		inx		                INX
.394f8c	c8		iny		                INY
.394f8d	d0 f6		bne $394f85	                BNE loop
.394f8f	28		plp		done            PLP
.394f90	2b		pld		                PLD
.394f91	ab		plb		                PLB
.394f92	7a		ply		                PLY
.394f93	fa		plx		                PLX
.394f94	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.394f95					DOS_TEST
.394f95	8b		phb		                PHB
.394f96	0b		phd		                PHD
.394f97	08		php		                PHP
.394f98	48		pha		                PHA             ; begin setdbr macro
.394f99	08		php		                PHP
.394f9a	e2 20		sep #$20	                SEP #$20        ; set A short
.394f9c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f9e	48		pha		                PHA
.394f9f	ab		plb		                PLB
.394fa0	28		plp		                PLP
.394fa1	68		pla		                PLA             ; end setdbr macro
.394fa2	48		pha		                PHA             ; begin setdp macro
.394fa3	08		php		                PHP
.394fa4	c2 20		rep #$20	                REP #$20        ; set A long
.394fa6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fa9	5b		tcd		                TCD
.394faa	28		plp		                PLP
.394fab	68		pla		                PLA             ; end setdp macro
.394fac	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fae	a9 c6 4f	lda #$4fc6	                LDA #<>sample
.394fb1	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.394fb5	a9 39 00	lda #$0039	                LDA #`sample
.394fb8	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.394fbc	22 20 55 39	jsl $395520	                JSL IF_RUN
.394fc0	b0 00		bcs $394fc2	                BCS done
.394fc2	28		plp		done            PLP
.394fc3	2b		pld		                PLD
.394fc4	ab		plb		                PLB
.394fc5	6b		rtl		                RTL
>394fc6	40 46 3a 53 41 4d 50 4c		sample          .null "@F:SAMPLE.PGX Hello, world!"
>394fce	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>394fde	6c 64 21 00
.394fe2					IF_OPEN
.394fe2	da		phx		                PHX
.394fe3	5a		phy		                PHY
.394fe4	0b		phd		                PHD
.394fe5	8b		phb		                PHB
.394fe6	08		php		                PHP
.394fe7	48		pha		                PHA             ; begin setdbr macro
.394fe8	08		php		                PHP
.394fe9	e2 20		sep #$20	                SEP #$20        ; set A short
.394feb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fed	48		pha		                PHA
.394fee	ab		plb		                PLB
.394fef	28		plp		                PLP
.394ff0	68		pla		                PLA             ; end setdbr macro
.394ff1	48		pha		                PHA             ; begin setdp macro
.394ff2	08		php		                PHP
.394ff3	c2 20		rep #$20	                REP #$20        ; set A long
.394ff5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ff8	5b		tcd		                TCD
.394ff9	28		plp		                PLP
.394ffa	68		pla		                PLA             ; end setdp macro
.394ffb	e2 20		sep #$20	                SEP #$20        ; set A short
.394ffd	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395000	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395002	89 40		bit #$40	                BIT #FD_STAT_OPEN
.395004	f0 05		beq $39500b	                BEQ ok_to_open
.395006	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395008	82 fd 04	brl $395508	                BRL IF_FAILURE
.39500b	22 36 4f 39	jsl $394f36	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.39500f	22 c2 45 39	jsl $3945c2	                JSL DOS_FINDFILE                ; Attempt to find the file
.395013	b0 03		bcs $395018	                BCS is_found                    ; If OK: we found the file
.395015	82 f4 04	brl $39550c	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395018					is_found
.395018	e2 20		sep #$20	                SEP #$20        ; set A short
.39501a	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39501d	a5 01		lda $0321	                LDA BIOS_DEV
.39501f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395021	c2 20		rep #$20	                REP #$20        ; set A long
.395023	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395026	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395028	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39502a	c8		iny		                INY
.39502b	c8		iny		                INY
.39502c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39502e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395030	22 dc 43 39	jsl $3943dc	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.395034	b0 03		bcs $395039	                BCS read_cluster
.395036	82 d3 04	brl $39550c	                BRL IF_PASSFAILURE
.395039	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.39503c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39503e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395040	c8		iny		                INY
.395041	c8		iny		                INY
.395042	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395044	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395046	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.395049	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39504b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39504d	c8		iny		                INY
.39504e	c8		iny		                INY
.39504f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395051	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395053	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.395056	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395058	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.39505b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39505d	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395060	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395062	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395065	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395067	e2 20		sep #$20	                SEP #$20        ; set A short
.395069	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.39506c	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.39506e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395070	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395072	82 9e 04	brl $395513	                BRL IF_SUCCESS
.395075					IF_CREATE
.395075	da		phx		                PHX
.395076	5a		phy		                PHY
.395077	0b		phd		                PHD
.395078	8b		phb		                PHB
.395079	08		php		                PHP
.39507a	48		pha		                PHA             ; begin setdbr macro
.39507b	08		php		                PHP
.39507c	e2 20		sep #$20	                SEP #$20        ; set A short
.39507e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395080	48		pha		                PHA
.395081	ab		plb		                PLB
.395082	28		plp		                PLP
.395083	68		pla		                PLA             ; end setdbr macro
.395084	48		pha		                PHA             ; begin setdp macro
.395085	08		php		                PHP
.395086	c2 20		rep #$20	                REP #$20        ; set A long
.395088	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39508b	5b		tcd		                TCD
.39508c	28		plp		                PLP
.39508d	68		pla		                PLA             ; end setdp macro
.39508e	22 12 4e 39	jsl $394e12	                JSL DOS_CREATE                  ; Attempt to create the file
.395092	90 18		bcc $3950ac	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395094	c2 30		rep #$30	                REP #$30        ; set A&X long
.395096	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395099	a9 00 00	lda #$0000	                LDA #0
.39509c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39509e	c8		iny		                INY
.39509f	c8		iny		                INY
.3950a0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3950a4	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.3950a7	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.3950a9	82 67 04	brl $395513	                BRL IF_SUCCESS
.3950ac	82 59 04	brl $395508	pass_failure    BRL IF_FAILURE
.3950af					IF_CLOSE
.3950af	da		phx		                PHX
.3950b0	5a		phy		                PHY
.3950b1	0b		phd		                PHD
.3950b2	8b		phb		                PHB
.3950b3	08		php		                PHP
.3950b4	48		pha		                PHA             ; begin setdbr macro
.3950b5	08		php		                PHP
.3950b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3950b8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950ba	48		pha		                PHA
.3950bb	ab		plb		                PLB
.3950bc	28		plp		                PLP
.3950bd	68		pla		                PLA             ; end setdbr macro
.3950be	48		pha		                PHA             ; begin setdp macro
.3950bf	08		php		                PHP
.3950c0	c2 20		rep #$20	                REP #$20        ; set A long
.3950c2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950c5	5b		tcd		                TCD
.3950c6	28		plp		                PLP
.3950c7	68		pla		                PLA             ; end setdp macro
.3950c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ca	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.3950cd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950cf	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3950d1	f0 09		beq $3950dc	                BEQ set_flag                    ; No, just mark it closed
.3950d3	22 3c 51 39	jsl $39513c	                JSL IF_WRITE                    ; Attempt to write the cluster
.3950d7	b0 03		bcs $3950dc	                BCS set_flag
.3950d9	82 30 04	brl $39550c	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3950dc	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.3950df	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.3950e1	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.3950e3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950e5	82 2b 04	brl $395513	                BRL IF_SUCCESS
.3950e8					IF_READ
.3950e8	da		phx		                PHX
.3950e9	5a		phy		                PHY
.3950ea	0b		phd		                PHD
.3950eb	8b		phb		                PHB
.3950ec	08		php		                PHP
.3950ed	48		pha		                PHA             ; begin setdbr macro
.3950ee	08		php		                PHP
.3950ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3950f1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950f3	48		pha		                PHA
.3950f4	ab		plb		                PLB
.3950f5	28		plp		                PLP
.3950f6	68		pla		                PLA             ; end setdbr macro
.3950f7	48		pha		                PHA             ; begin setdp macro
.3950f8	08		php		                PHP
.3950f9	c2 20		rep #$20	                REP #$20        ; set A long
.3950fb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950fe	5b		tcd		                TCD
.3950ff	28		plp		                PLP
.395100	68		pla		                PLA             ; end setdp macro
.395101	c2 10		rep #$10	                REP #$10        ; set X long
.395103	e2 20		sep #$20	                SEP #$20        ; set A short
.395105					get_dev
.395105	e2 20		sep #$20	                SEP #$20        ; set A short
.395107	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39510a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39510c	85 01		sta $0321	                STA BIOS_DEV
.39510e	c2 20		rep #$20	                REP #$20        ; set A long
.395110	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395113	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395115	85 10		sta $0330	                STA DOS_CLUS_ID
.395117	c8		iny		                INY
.395118	c8		iny		                INY
.395119	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39511b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39511d	22 e7 47 39	jsl $3947e7	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395121	90 13		bcc $395136	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.395123	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395126	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395128	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39512a	c8		iny		                INY
.39512b	c8		iny		                INY
.39512c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39512e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395130	22 dc 43 39	jsl $3943dc	                JSL DOS_GETCLUSTER              ; Get the cluster
.395134	b0 03		bcs $395139	                BCS ret_success                 ; If ok: return success
.395136					pass_failure
.395136	82 d3 03	brl $39550c	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395139	82 d7 03	brl $395513	ret_success     BRL IF_SUCCESS
.39513c					IF_WRITE
.39513c	da		phx		                PHX
.39513d	5a		phy		                PHY
.39513e	0b		phd		                PHD
.39513f	8b		phb		                PHB
.395140	08		php		                PHP
.395141	48		pha		                PHA             ; begin setdbr macro
.395142	08		php		                PHP
.395143	e2 20		sep #$20	                SEP #$20        ; set A short
.395145	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395147	48		pha		                PHA
.395148	ab		plb		                PLB
.395149	28		plp		                PLP
.39514a	68		pla		                PLA             ; end setdbr macro
.39514b	48		pha		                PHA             ; begin setdp macro
.39514c	08		php		                PHP
.39514d	c2 20		rep #$20	                REP #$20        ; set A long
.39514f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395152	5b		tcd		                TCD
.395153	28		plp		                PLP
.395154	68		pla		                PLA             ; end setdp macro
.395155	c2 10		rep #$10	                REP #$10        ; set X long
.395157	e2 20		sep #$20	                SEP #$20        ; set A short
.395159	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39515c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39515e	85 01		sta $0321	                STA BIOS_DEV
.395160	c2 20		rep #$20	                REP #$20        ; set A long
.395162	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395165	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395167	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395169	c8		iny		                INY
.39516a	c8		iny		                INY
.39516b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39516d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39516f	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395172	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395174	85 10		sta $0330	                STA DOS_CLUS_ID
.395176	c8		iny		                INY
.395177	c8		iny		                INY
.395178	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39517a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39517c	d0 1a		bne $395198	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.39517e	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395180	d0 16		bne $395198	                BNE rewrite_cluster
.395182	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.395185	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395187	85 10		sta $0330	                STA DOS_CLUS_ID
.395189	c8		iny		                INY
.39518a	c8		iny		                INY
.39518b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39518d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39518f	22 db 4b 39	jsl $394bdb	                JSL DOS_APPENDCLUS              ; Append the cluster
.395193	b0 0c		bcs $3951a1	                BCS ret_success                 ; If OK: return success
.395195	82 74 03	brl $39550c	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395198	22 19 44 39	jsl $394419	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.39519c	b0 03		bcs $3951a1	                BCS ret_success                 ; If ok: return success
.39519e	82 6b 03	brl $39550c	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3951a1	82 6f 03	brl $395513	ret_success     BRL IF_SUCCESS
.3951a4					IF_DIROPEN
.3951a4	da		phx		                PHX
.3951a5	5a		phy		                PHY
.3951a6	0b		phd		                PHD
.3951a7	8b		phb		                PHB
.3951a8	08		php		                PHP
.3951a9	48		pha		                PHA             ; begin setdbr macro
.3951aa	08		php		                PHP
.3951ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3951ad	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951af	48		pha		                PHA
.3951b0	ab		plb		                PLB
.3951b1	28		plp		                PLP
.3951b2	68		pla		                PLA             ; end setdbr macro
.3951b3	48		pha		                PHA             ; begin setdp macro
.3951b4	08		php		                PHP
.3951b5	c2 20		rep #$20	                REP #$20        ; set A long
.3951b7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951ba	5b		tcd		                TCD
.3951bb	28		plp		                PLP
.3951bc	68		pla		                PLA             ; end setdp macro
.3951bd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951bf	22 36 4f 39	jsl $394f36	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.3951c3	22 2a 45 39	jsl $39452a	                JSL DOS_PARSE_PATH          ; Parse the path
.3951c7	22 bc 41 39	jsl $3941bc	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3951cb	b0 03		bcs $3951d0	                BCS get_root_dir            ; If successful: get the root directory
.3951cd	82 3c 03	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3951d0					get_root_dir
.3951d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951d2	22 11 3f 39	jsl $393f11	                JSL DOS_DIROPEN
.3951d6	b0 03		bcs $3951db	                BCS success
.3951d8	82 31 03	brl $39550c	                BRL IF_PASSFAILURE
.3951db	82 35 03	brl $395513	success         BRL IF_SUCCESS
.3951de					IF_DIRNEXT
.3951de	5c ab 3f 39	jmp $393fab	                JML DOS_DIRNEXT
.3951e2					IF_DELETE
.3951e2	da		phx		                PHX
.3951e3	5a		phy		                PHY
.3951e4	0b		phd		                PHD
.3951e5	8b		phb		                PHB
.3951e6	08		php		                PHP
.3951e7	48		pha		                PHA             ; begin setdbr macro
.3951e8	08		php		                PHP
.3951e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3951eb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951ed	48		pha		                PHA
.3951ee	ab		plb		                PLB
.3951ef	28		plp		                PLP
.3951f0	68		pla		                PLA             ; end setdbr macro
.3951f1	48		pha		                PHA             ; begin setdp macro
.3951f2	08		php		                PHP
.3951f3	c2 20		rep #$20	                REP #$20        ; set A long
.3951f5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951f8	5b		tcd		                TCD
.3951f9	28		plp		                PLP
.3951fa	68		pla		                PLA             ; end setdp macro
.3951fb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951fd	22 c2 45 39	jsl $3945c2	                JSL DOS_FINDFILE
.395201	b0 03		bcs $395206	                BCS get_first_clus
.395203	82 06 03	brl $39550c	                BRL IF_PASSFAILURE
.395206					get_first_clus
.395206	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395209	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39520b	85 10		sta $0330	                STA DOS_CLUS_ID
.39520d	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395210	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395212	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395214	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395216	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.395219	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39521b	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.39521e	22 e7 47 39	jsl $3947e7	del_loop        JSL NEXTCLUSTER
.395222	90 2f		bcc $395253	                BCC del_one
.395224	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395226	8d 2e e0	sta $38e02e	                STA DOS_NEXT_CLUS
.395229	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39522b	8d 30 e0	sta $38e030	                STA DOS_NEXT_CLUS+2
.39522e	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.395231	85 10		sta $0330	                STA DOS_CLUS_ID
.395233	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.395236	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395238	22 99 4b 39	jsl $394b99	                JSL DELCLUSTER32
.39523c	b0 03		bcs $395241	                BCS go_next
.39523e	82 cb 02	brl $39550c	                BRL IF_PASSFAILURE
.395241					go_next
.395241	ad 2e e0	lda $38e02e	                LDA DOS_NEXT_CLUS
.395244	85 10		sta $0330	                STA DOS_CLUS_ID
.395246	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.395249	ad 30 e0	lda $38e030	                LDA DOS_NEXT_CLUS+2
.39524c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39524e	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.395251	80 cb		bra $39521e	                BRA del_loop
.395253					del_one
.395253	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.395256	85 10		sta $0330	                STA DOS_CLUS_ID
.395258	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.39525b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39525d	22 f0 4a 39	jsl $394af0	                JSL DELCLUSTER
.395261	b0 03		bcs $395266	                BCS free_dir_entry
.395263	82 a6 02	brl $39550c	                BRL IF_PASSFAILURE
.395266					free_dir_entry
.395266	e2 20		sep #$20	                SEP #$20        ; set A short
.395268	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.39526b	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39526d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39526f	22 2b 41 39	jsl $39412b	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395273	b0 03		bcs $395278	                BCS ret_success
.395275	82 94 02	brl $39550c	                BRL IF_PASSFAILURE
.395278	82 98 02	brl $395513	ret_success     BRL IF_SUCCESS
.39527b					IF_DIRREAD
.39527b	da		phx		                PHX
.39527c	5a		phy		                PHY
.39527d	0b		phd		                PHD
.39527e	8b		phb		                PHB
.39527f	08		php		                PHP
.395280	48		pha		                PHA             ; begin setdbr macro
.395281	08		php		                PHP
.395282	e2 20		sep #$20	                SEP #$20        ; set A short
.395284	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395286	48		pha		                PHA
.395287	ab		plb		                PLB
.395288	28		plp		                PLP
.395289	68		pla		                PLA             ; end setdbr macro
.39528a	48		pha		                PHA             ; begin setdp macro
.39528b	08		php		                PHP
.39528c	c2 20		rep #$20	                REP #$20        ; set A long
.39528e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395291	5b		tcd		                TCD
.395292	28		plp		                PLP
.395293	68		pla		                PLA             ; end setdp macro
.395294	c2 30		rep #$30	                REP #$30        ; set A&X long
.395296	22 c2 45 39	jsl $3945c2	                JSL DOS_FINDFILE
.39529a	b0 03		bcs $39529f	                BCS success
.39529c	82 69 02	brl $395508	                BRL IF_FAILURE
.39529f	82 71 02	brl $395513	success         BRL IF_SUCCESS
.3952a2					IF_DIRWRITE
.3952a2	5c 2b 41 39	jmp $39412b	                JML DOS_DIRWRITE
.3952a6					IF_LOAD
.3952a6	da		phx		                PHX
.3952a7	5a		phy		                PHY
.3952a8	0b		phd		                PHD
.3952a9	8b		phb		                PHB
.3952aa	08		php		                PHP
.3952ab	48		pha		                PHA             ; begin setdbr macro
.3952ac	08		php		                PHP
.3952ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3952af	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952b1	48		pha		                PHA
.3952b2	ab		plb		                PLB
.3952b3	28		plp		                PLP
.3952b4	68		pla		                PLA             ; end setdbr macro
.3952b5	48		pha		                PHA             ; begin setdp macro
.3952b6	08		php		                PHP
.3952b7	c2 20		rep #$20	                REP #$20        ; set A long
.3952b9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952bc	5b		tcd		                TCD
.3952bd	28		plp		                PLP
.3952be	68		pla		                PLA             ; end setdp macro
.3952bf	c2 30		rep #$30	                REP #$30        ; set A&X long
.3952c1	22 e2 4f 39	jsl $394fe2	                JSL IF_OPEN
.3952c5	b0 03		bcs $3952ca	                BCS setup                   ; If success: start setting things up
.3952c7	82 42 02	brl $39550c	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3952ca					setup
.3952ca	c2 20		rep #$20	                REP #$20        ; set A long
.3952cc	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3952cf	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d1	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3952d3	c8		iny		                INY
.3952d4	c8		iny		                INY
.3952d5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d7	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3952d9	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.3952dc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952de	85 30		sta $0350	                STA DOS_SRC_PTR
.3952e0	c8		iny		                INY
.3952e1	c8		iny		                INY
.3952e2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952e4	85 32		sta $0352	                STA DOS_SRC_PTR+2
.3952e6	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.3952e8	c9 40 00	cmp #$0040	                CMP #$0040
.3952eb	b0 04		bcs $3952f1	                BGE load_by_type            ; No: try to load it by type
.3952ed	5c bb 53 39	jmp $3953bb	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3952f1	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3952f4	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3952f7					type_loop
.3952f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3952f9	bf 3d 53 39	lda $39533d,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3952fd	f0 37		beq $395336	                BEQ no_match                ; If NULL... we didn't get a match
.3952ff	d9 3a e0	cmp $38e03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395302	d0 28		bne $39532c	                BNE next_entry              ; If they don't match, try the next entry
.395304	bf 3e 53 39	lda $39533e,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395308	d9 3b e0	cmp $38e03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39530b	d0 1f		bne $39532c	                BNE next_entry              ; If they don't match, try the next entry
.39530d	bf 3f 53 39	lda $39533f,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395311	d9 3c e0	cmp $38e03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395314	d0 16		bne $39532c	                BNE next_entry              ; If they don't match, try the next entry
.395316	c2 20		rep #$20	                REP #$20        ; set A long
.395318	bf 40 53 39	lda $395340,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39531c	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39531e	e2 20		sep #$20	                SEP #$20        ; set A short
.395320	bf 42 53 39	lda $395342,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395324	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395326	a2 00 00	ldx #$0000	                LDX #0
.395329	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39532c					next_entry
.39532c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39532e	8a		txa		                TXA
.39532f	18		clc		                CLC
.395330	69 06 00	adc #$0006	                ADC #6
.395333	aa		tax		                TAX
.395334	80 c1		bra $3952f7	                BRA type_loop               ; And check it against the file
.395336					no_match
.395336	e2 20		sep #$20	                SEP #$20        ; set A short
.395338	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.39533a	82 cb 01	brl $395508	                BRL IF_FAILURE
>39533d	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>395340	44 53				                .word <>IF_LOADPGX
>395342	39				                .byte `IF_LOADPGX
>395343	00				                .byte 0
.395344					IF_LOADPGX
.395344	c2 10		rep #$10	                REP #$10        ; set X long
.395346	e2 20		sep #$20	                SEP #$20        ; set A short
.395348	a0 00 00	ldy #$0000	                LDY #0
.39534b	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.39534d	c9 50		cmp #$50	                CMP #'P'
.39534f	d0 15		bne $395366	                BNE fail_sig                        ; If not found, fail
.395351	c8		iny		                INY
.395352	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395354	c9 47		cmp #$47	                CMP #'G'
.395356	d0 0e		bne $395366	                BNE fail_sig
.395358	c8		iny		                INY
.395359	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39535b	c9 58		cmp #$58	                CMP #'X'
.39535d	d0 07		bne $395366	                BNE fail_sig
.39535f	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395360	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395362	c9 01		cmp #$01	                CMP #$01
.395364	f0 06		beq $39536c	                BEQ get_dest                        ; All passes: go to get the destination address
.395366	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.395368	22 08 55 39	jsl $395508	                JSL IF_FAILURE
.39536c					get_dest
.39536c	c2 20		rep #$20	                REP #$20        ; set A long
.39536e	c8		iny		                INY
.39536f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395371	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395373	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.395375	c8		iny		                INY
.395376	c8		iny		                INY
.395377	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395379	85 36		sta $0356	                STA DOS_DST_PTR+2
.39537b	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39537d	c8		iny		                INY                                 ; Point to the first data byte
.39537e	c8		iny		                INY
.39537f					copy_loop
.39537f	e2 20		sep #$20	                SEP #$20        ; set A short
.395381	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395383	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.395385	c2 20		rep #$20	                REP #$20        ; set A long
.395387	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395389	d0 02		bne $39538d	                BNE dec_file_size
.39538b	e6 34		inc $0354	                INC DOS_DST_PTR
.39538d	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.39538e	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395390	e9 01 00	sbc #$0001	                SBC #1
.395393	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395395	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395397	e9 00 00	sbc #$0000	                SBC #0
.39539a	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39539c	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39539e	d0 04		bne $3953a4	                BNE next_byte
.3953a0	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953a2	f0 14		beq $3953b8	                BEQ done                            ; Yes: we're done
.3953a4	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3953a5	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3953a8	d0 d5		bne $39537f	                BNE copy_loop                       ; No: keep copying
.3953aa	22 e7 47 39	jsl $3947e7	                JSL NEXTCLUSTER                     ; Yes: Load the next cluster
.3953ae	b0 03		bcs $3953b3	                BCS next_cluster
.3953b0	82 59 01	brl $39550c	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3953b3	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.3953b6	80 c7		bra $39537f	                BRA copy_loop                       ; Go back to copying
.3953b8	82 58 01	brl $395513	done            BRL IF_SUCCESS
.3953bb					IF_LOADRAW
.3953bb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3953bd	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3953c0					copy_loop
.3953c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3953c2	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3953c4	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3953c6	c2 20		rep #$20	                REP #$20        ; set A long
.3953c8	38		sec		                SEC                         ; Count down the number of bytes left
.3953c9	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3953cb	e9 01 00	sbc #$0001	                SBC #1
.3953ce	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3953d0	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953d2	e9 00 00	sbc #$0000	                SBC #0
.3953d5	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3953d7	d0 04		bne $3953dd	                BNE continue
.3953d9	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3953db	f0 1b		beq $3953f8	                BEQ close_file              ; If not: we're done
.3953dd	c8		iny		continue        INY
.3953de	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.3953e1	d0 dd		bne $3953c0	                BNE copy_loop               ; No: keep processing the bytes
.3953e3	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.3953e4	a5 34		lda $0354	                LDA DOS_DST_PTR
.3953e6	6d 0e e0	adc $38e00e	                ADC CLUSTER_SIZE
.3953e9	85 34		sta $0354	                STA DOS_DST_PTR
.3953eb	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3953ed	69 00 00	adc #$0000	                ADC #0
.3953f0	85 36		sta $0356	                STA DOS_DST_PTR+2
.3953f2	22 e8 50 39	jsl $3950e8	                JSL IF_READ                 ; Yes: load the next cluster
.3953f6	b0 c5		bcs $3953bd	                BCS copy_cluster            ; And start copying it
.3953f8					close_file
.3953f8	82 18 01	brl $395513	ret_success     BRL IF_SUCCESS
.3953fb					IF_NULLBUFFER
.3953fb	5a		phy		                PHY
.3953fc	8b		phb		                PHB
.3953fd	0b		phd		                PHD
.3953fe	08		php		                PHP
.3953ff	48		pha		                PHA             ; begin setdbr macro
.395400	08		php		                PHP
.395401	e2 20		sep #$20	                SEP #$20        ; set A short
.395403	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395405	48		pha		                PHA
.395406	ab		plb		                PLB
.395407	28		plp		                PLP
.395408	68		pla		                PLA             ; end setdbr macro
.395409	48		pha		                PHA             ; begin setdp macro
.39540a	08		php		                PHP
.39540b	c2 20		rep #$20	                REP #$20        ; set A long
.39540d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395410	5b		tcd		                TCD
.395411	28		plp		                PLP
.395412	68		pla		                PLA             ; end setdp macro
.395413	c2 30		rep #$30	                REP #$30        ; set A&X long
.395415	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395418	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39541a	85 28		sta $0348	                STA DOS_TEMP
.39541c	c8		iny		                INY
.39541d	c8		iny		                INY
.39541e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395420	85 2a		sta $034a	                STA DOS_TEMP+2
.395422	a0 00 00	ldy #$0000	                LDY #0
.395425	a9 00 00	lda #$0000	                LDA #0
.395428	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.39542a	c8		iny		                INY
.39542b	c8		iny		                INY
.39542c	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE
.39542f	d0 f7		bne $395428	                BNE loop
.395431	28		plp		                PLP
.395432	2b		pld		                PLD
.395433	ab		plb		                PLB
.395434	7a		ply		                PLY
.395435	6b		rtl		                RTL
.395436					IF_COPY2BUFF
.395436	5a		phy		                PHY
.395437	8b		phb		                PHB
.395438	0b		phd		                PHD
.395439	08		php		                PHP
.39543a	48		pha		                PHA             ; begin setdbr macro
.39543b	08		php		                PHP
.39543c	e2 20		sep #$20	                SEP #$20        ; set A short
.39543e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395440	48		pha		                PHA
.395441	ab		plb		                PLB
.395442	28		plp		                PLP
.395443	68		pla		                PLA             ; end setdbr macro
.395444	48		pha		                PHA             ; begin setdp macro
.395445	08		php		                PHP
.395446	c2 20		rep #$20	                REP #$20        ; set A long
.395448	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39544b	5b		tcd		                TCD
.39544c	28		plp		                PLP
.39544d	68		pla		                PLA             ; end setdp macro
.39544e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395450	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395453	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395455	85 28		sta $0348	                STA DOS_TEMP
.395457	c8		iny		                INY
.395458	c8		iny		                INY
.395459	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39545b	85 2a		sta $034a	                STA DOS_TEMP+2
.39545d	a0 00 00	ldy #$0000	                LDY #0
.395460					copy_loop
.395460	e2 20		sep #$20	                SEP #$20        ; set A short
.395462	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395464	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395466	c2 20		rep #$20	                REP #$20        ; set A long
.395468	c8		iny		                INY                         ; Count it
.395469	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.39546c	f0 14		beq $395482	                BEQ done                    ; Yes: we're done
.39546e	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395470	c5 38		cmp $0358	                CMP DOS_END_PTR
.395472	d0 06		bne $39547a	                BNE next_byte
.395474	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395476	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395478	f0 08		beq $395482	                BEQ done                    ; Yes: we're done
.39547a	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.39547c	d0 e2		bne $395460	                BNE copy_loop
.39547e	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395480	80 de		bra $395460	                BRA copy_loop               ; And try this next byte
.395482	28		plp		done            PLP
.395483	2b		pld		                PLD
.395484	ab		plb		                PLB
.395485	7a		ply		                PLY
.395486	6b		rtl		                RTL
.395487					IF_SAVE
.395487	da		phx		                PHX
.395488	5a		phy		                PHY
.395489	0b		phd		                PHD
.39548a	8b		phb		                PHB
.39548b	08		php		                PHP
.39548c	48		pha		                PHA             ; begin setdbr macro
.39548d	08		php		                PHP
.39548e	e2 20		sep #$20	                SEP #$20        ; set A short
.395490	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395492	48		pha		                PHA
.395493	ab		plb		                PLB
.395494	28		plp		                PLP
.395495	68		pla		                PLA             ; end setdbr macro
.395496	48		pha		                PHA             ; begin setdp macro
.395497	08		php		                PHP
.395498	c2 20		rep #$20	                REP #$20        ; set A long
.39549a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39549d	5b		tcd		                TCD
.39549e	28		plp		                PLP
.39549f	68		pla		                PLA             ; end setdp macro
.3954a0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954a2	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3954a5	38		sec		                SEC
.3954a6	a5 38		lda $0358	                LDA DOS_END_PTR
.3954a8	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3954aa	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954ac	c8		iny		                INY
.3954ad	c8		iny		                INY
.3954ae	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3954b0	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3954b2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954b4	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3954b7	18		clc		                CLC
.3954b8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954ba	69 01 00	adc #$0001	                ADC #1
.3954bd	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954bf	90 09		bcc $3954ca	                BCC first_block
.3954c1	c8		iny		                INY
.3954c2	c8		iny		                INY
.3954c3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954c5	69 00 00	adc #$0000	                ADC #0
.3954c8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954ca	22 fb 53 39	jsl $3953fb	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3954ce	22 36 54 39	jsl $395436	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3954d2	22 75 50 39	jsl $395075	                JSL IF_CREATE           ; Create file.
.3954d6	b0 03		bcs $3954db	                BCS check_for_end
.3954d8	82 31 00	brl $39550c	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3954db	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3954dd	c5 38		cmp $0358	                CMP DOS_END_PTR
.3954df	d0 06		bne $3954e7	                BNE next_block
.3954e1	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3954e3	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3954e5	f0 1d		beq $395504	                BEQ done                ; Yes: we're done
.3954e7	22 fb 53 39	jsl $3953fb	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3954eb	22 36 54 39	jsl $395436	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3954ef	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3954f2	a9 00 00	lda #$0000	                LDA #0
.3954f5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f7	c8		iny		                INY
.3954f8	c8		iny		                INY
.3954f9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954fb	22 3c 51 39	jsl $39513c	                JSL IF_WRITE            ; Append to the file
.3954ff	b0 da		bcs $3954db	                BCS check_for_end       ; And try again
.395501	82 08 00	brl $39550c	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395504	5c 13 55 39	jmp $395513	done            JML IF_SUCCESS
.395508					IF_FAILURE
.395508	e2 20		sep #$20	                SEP #$20        ; set A short
.39550a	85 0e		sta $032e	                STA DOS_STATUS
.39550c	28		plp		IF_PASSFAILURE  PLP
.39550d	18		clc		                CLC
.39550e	ab		plb		                PLB
.39550f	2b		pld		                PLD
.395510	7a		ply		                PLY
.395511	fa		plx		                PLX
.395512	6b		rtl		                RTL
.395513					IF_SUCCESS
.395513	e2 20		sep #$20	                SEP #$20        ; set A short
.395515	64 00		stz $0320	                STZ BIOS_STATUS
.395517	64 0e		stz $032e	                STZ DOS_STATUS
.395519	28		plp		                PLP
.39551a	38		sec		                SEC
.39551b	ab		plb		                PLB
.39551c	2b		pld		                PLD
.39551d	7a		ply		                PLY
.39551e	fa		plx		                PLX
.39551f	6b		rtl		                RTL
.395520					IF_RUN
.395520	da		phx		                PHX
.395521	5a		phy		                PHY
.395522	0b		phd		                PHD
.395523	8b		phb		                PHB
.395524	08		php		                PHP
.395525	48		pha		                PHA             ; begin setdbr macro
.395526	08		php		                PHP
.395527	e2 20		sep #$20	                SEP #$20        ; set A short
.395529	a9 00		lda #$00	                LDA #0
.39552b	48		pha		                PHA
.39552c	ab		plb		                PLB
.39552d	28		plp		                PLP
.39552e	68		pla		                PLA             ; end setdbr macro
.39552f	48		pha		                PHA             ; begin setdp macro
.395530	08		php		                PHP
.395531	c2 20		rep #$20	                REP #$20        ; set A long
.395533	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395536	5b		tcd		                TCD
.395537	28		plp		                PLP
.395538	68		pla		                PLA             ; end setdp macro
.395539	e2 20		sep #$20	                SEP #$20        ; set A short
.39553b	c2 10		rep #$10	                REP #$10        ; set X long
.39553d	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39553f	a2 00 00	ldx #$0000	                LDX #0
.395542	9f 00 eb 37	sta $37eb00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395546	e8		inx		                INX
.395547	e0 1e 00	cpx #$001e	                CPX #SIZE(FILEDESC)
.39554a	d0 f6		bne $395542	                BNE clr_fd_loop
.39554c	c2 20		rep #$20	                REP #$20        ; set A long
.39554e	a9 00 e9	lda #$e900	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395551	8f 0e eb 37	sta $37eb0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395555	a9 37 00	lda #$0037	                LDA #`DOS_SPARE_SECTOR
.395558	8f 10 eb 37	sta $37eb10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.39555c	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.39555e	8f 02 eb 37	sta $37eb02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395562	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395564	8f 04 eb 37	sta $37eb04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395568	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.39556b	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39556d	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39556f	a9 00 eb	lda #$eb00	                LDA #<>DOS_SPARE_FD
.395572	85 20		sta $0340	                STA DOS_FD_PTR
.395574	a9 37 00	lda #$0037	                LDA #`DOS_SPARE_FD
.395577	85 22		sta $0342	                STA DOS_FD_PTR+2
.395579	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39557c	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395580	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395584	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.395588	b0 14		bcs $39559e	                BCS try_execute
.39558a	82 7f ff	brl $39550c	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39558d					chk_execute
.39558d	c2 20		rep #$20	                REP #$20        ; set A long
.39558f	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395591	d0 0b		bne $39559e	                BNE try_execute                         ; If so: call it
.395593	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395595	d0 07		bne $39559e	                BNE try_execute
.395597	e2 20		sep #$20	                SEP #$20        ; set A short
.395599	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39559b	82 6a ff	brl $395508	                BRL IF_FAILURE
.39559e					try_execute
.39559e	e2 20		sep #$20	                SEP #$20        ; set A short
.3955a0	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3955a2	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3955a4	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3955a8	82 68 ff	brl $395513	                BRL IF_SUCCESS                          ; Return success

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.3955ab					UART_SELECT
.3955ab	08		php		            PHP
.3955ac	c2 20		rep #$20	                REP #$20        ; set A long
.3955ae	c9 02 00	cmp #$0002	            CMP #2
.3955b1	f0 07		beq $3955ba	            BEQ is_COM2
.3955b3	c2 20		rep #$20	                REP #$20        ; set A long
.3955b5	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.3955b8	80 05		bra $3955bf	            BRA setaddr
.3955ba					is_COM2
.3955ba	c2 20		rep #$20	                REP #$20        ; set A long
.3955bc	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.3955bf	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.3955c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3955c5	a9 af		lda #$af	            LDA #`UART1_BASE
.3955c7	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.3955cb	28		plp		            PLP
.3955cc	6b		rtl		            RTL
.3955cd					UART_SETBPS
.3955cd	08		php		            PHP
.3955ce	0b		phd		            PHD
.3955cf	48		pha		                PHA             ; begin setdp macro
.3955d0	08		php		                PHP
.3955d1	c2 20		rep #$20	                REP #$20        ; set A long
.3955d3	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3955d6	5b		tcd		                TCD
.3955d7	28		plp		                PLP
.3955d8	68		pla		                PLA             ; end setdp macro
.3955d9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955db	48		pha		            PHA
.3955dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3955de	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.3955e1	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3955e3	09 80		ora #$80	            ORA #LCR_DLB
.3955e5	97 00		sta [$0700],y	            STA [CURRUART],Y
.3955e7	c2 20		rep #$20	                REP #$20        ; set A long
.3955e9	68		pla		            PLA
.3955ea	a0 00 00	ldy #$0000	            LDY #UART_DLL
.3955ed	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.3955ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3955f1	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.3955f4	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3955f6	49 80		eor #$80	            EOR #LCR_DLB
.3955f8	97 00		sta [$0700],y	            STA [CURRUART],Y
.3955fa	2b		pld		            PLD
.3955fb	28		plp		            PLP
.3955fc	6b		rtl		            RTL
.3955fd					UART_SETLCR
.3955fd	08		php		            PHP
.3955fe	0b		phd		            PHD
.3955ff	48		pha		                PHA             ; begin setdp macro
.395600	08		php		                PHP
.395601	c2 20		rep #$20	                REP #$20        ; set A long
.395603	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395606	5b		tcd		                TCD
.395607	28		plp		                PLP
.395608	68		pla		                PLA             ; end setdp macro
.395609	e2 20		sep #$20	                SEP #$20        ; set A short
.39560b	c2 10		rep #$10	                REP #$10        ; set X long
.39560d	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.39560f	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395612	97 00		sta [$0700],y	            STA [CURRUART],Y
.395614	2b		pld		            PLD
.395615	28		plp		            PLP
.395616	6b		rtl		            RTL
.395617					UART_INIT
.395617	08		php		            PHP
.395618	0b		phd		            PHD
.395619	c2 30		rep #$30	                REP #$30        ; set A&X long
.39561b	48		pha		                PHA             ; begin setdp macro
.39561c	08		php		                PHP
.39561d	c2 20		rep #$20	                REP #$20        ; set A long
.39561f	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395622	5b		tcd		                TCD
.395623	28		plp		                PLP
.395624	68		pla		                PLA             ; end setdp macro
.395625	a9 01 00	lda #$0001	            LDA #UART_115200
.395628	22 cd 55 39	jsl $3955cd	            JSL UART_SETBPS
.39562c	e2 20		sep #$20	                SEP #$20        ; set A short
.39562e	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395630	22 fd 55 39	jsl $3955fd	            JSL UART_SETLCR
.395634	a9 e1		lda #$e1	            LDA #%11100001
.395636	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395639	97 00		sta [$0700],y	            STA [CURRUART],Y
.39563b	2b		pld		            PLD
.39563c	28		plp		            PLP
.39563d	6b		rtl		            RTL
.39563e					UART_HASBYT
.39563e	08		php		            PHP
.39563f	0b		phd		            PHD
.395640	c2 30		rep #$30	                REP #$30        ; set A&X long
.395642	48		pha		                PHA             ; begin setdp macro
.395643	08		php		                PHP
.395644	c2 20		rep #$20	                REP #$20        ; set A long
.395646	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395649	5b		tcd		                TCD
.39564a	28		plp		                PLP
.39564b	68		pla		                PLA             ; end setdp macro
.39564c	e2 20		sep #$20	                SEP #$20        ; set A short
.39564e	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395651	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395653	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395655	d0 04		bne $39565b	            BNE ret_true            ; If flag is set, return true
.395657	2b		pld		ret_false   PLD                     ; Return false
.395658	28		plp		            PLP
.395659	18		clc		            CLC
.39565a	6b		rtl		            RTL
.39565b	2b		pld		ret_true    PLD                     ; Return true
.39565c	28		plp		            PLP
.39565d	38		sec		            SEC
.39565e	6b		rtl		            RTL
.39565f					UART_GETC
.39565f	08		php		            PHP
.395660	0b		phd		            PHD
.395661	c2 30		rep #$30	                REP #$30        ; set A&X long
.395663	48		pha		                PHA             ; begin setdp macro
.395664	08		php		                PHP
.395665	c2 20		rep #$20	                REP #$20        ; set A long
.395667	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39566a	5b		tcd		                TCD
.39566b	28		plp		                PLP
.39566c	68		pla		                PLA             ; end setdp macro
.39566d	e2 20		sep #$20	                SEP #$20        ; set A short
.39566f	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395672	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395674	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395676	f0 fa		beq $395672	            BEQ wait_getc           ; If the flag is clear, wait
.395678	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.39567b	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39567d	2b		pld		            PLD
.39567e	28		plp		            PLP
.39567f	6b		rtl		            RTL
.395680					UART_PUTC
.395680	08		php		            PHP
.395681	0b		phd		            PHD
.395682	c2 30		rep #$30	                REP #$30        ; set A&X long
.395684	48		pha		                PHA             ; begin setdp macro
.395685	08		php		                PHP
.395686	c2 20		rep #$20	                REP #$20        ; set A long
.395688	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39568b	5b		tcd		                TCD
.39568c	28		plp		                PLP
.39568d	68		pla		                PLA             ; end setdp macro
.39568e	e2 20		sep #$20	                SEP #$20        ; set A short
.395690	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395691	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395694	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395696	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395698	f0 fa		beq $395694	            BEQ wait_putc
.39569a	68		pla		            PLA
.39569b	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.39569e	97 00		sta [$0700],y	            STA [CURRUART],Y
.3956a0	2b		pld		            PLD
.3956a1	28		plp		            PLP
.3956a2	6b		rtl		            RTL
.3956a3					UART_PUTS
.3956a3	08		php		            PHP
.3956a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3956a6	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.3956a9	f0 07		beq $3956b2	            BEQ done
.3956ab	22 80 56 39	jsl $395680	            JSL UART_PUTC
.3956af	e8		inx		            INX
.3956b0	80 f4		bra $3956a6	            BRA put_loop
.3956b2	28		plp		done        PLP
.3956b3	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.3956b4					JOYSTICK_SET_NES_MODE
.3956b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b6	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956ba	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.3956bc	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956c0	6b		rtl		          RTL
.3956c1					JOYSTICK_SET_SNES_MODE
.3956c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3956c3	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956c7	29 fb		and #$fb	          AND #~NES_SNES_JOY
.3956c9	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.3956cb	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956cf	6b		rtl		          RTL
.3956d0					JOYSTICK_ENABLE_NES_SNES_PORT0
.3956d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3956d2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956d6	29 fe		and #$fe	          AND #~NES_SNES_EN0
.3956d8	09 01		ora #$01	          ORA #NES_SNES_EN0
.3956da	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956de	6b		rtl		          RTL
.3956df					JOYSTICK_ENABLE_NES_SNES_PORT1
.3956df	e2 20		sep #$20	                SEP #$20        ; set A short
.3956e1	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956e5	29 fd		and #$fd	          AND #~NES_SNES_EN1
.3956e7	09 02		ora #$02	          ORA #NES_SNES_EN1
.3956e9	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956ed	6b		rtl		          RTL
.3956ee					JOYSTICK_DISABLE_NES_SNES_PORT0
.3956ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3956f0	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956f4	29 fe		and #$fe	          AND #~NES_SNES_EN0
.3956f6	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956fa	6b		rtl		          RTL
.3956fb					JOYSTICK_DISABLE_NES_SNES_PORT1
.3956fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3956fd	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395701	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395703	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395707	6b		rtl		          RTL
.395708					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395708	e2 20		sep #$20	                SEP #$20        ; set A short
.39570a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39570e	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395710	c9 00		cmp #$00	          CMP #$00
.395712	f0 14		beq $395728	          BEQ END_OF_JOYSTICK_POLL
.395714	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395718	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.39571a	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39571e					JOYSTICK_POLLING_ISNOTOVER
.39571e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395722	29 40		and #$40	          AND #NES_SNES_DONE
.395724	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395726	d0 f6		bne $39571e	          BNE JOYSTICK_POLLING_ISNOTOVER
.395728					END_OF_JOYSTICK_POLL
.395728	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395729					SDC_TEST
.395729	8b		phb		                PHB
.39572a	0b		phd		                PHD
.39572b	08		php		                PHP
.39572c	48		pha		                PHA             ; begin setdbr macro
.39572d	08		php		                PHP
.39572e	e2 20		sep #$20	                SEP #$20        ; set A short
.395730	a9 00		lda #$00	                LDA #0
.395732	48		pha		                PHA
.395733	ab		plb		                PLB
.395734	28		plp		                PLP
.395735	68		pla		                PLA             ; end setdbr macro
.395736	48		pha		                PHA             ; begin setdp macro
.395737	08		php		                PHP
.395738	c2 20		rep #$20	                REP #$20        ; set A long
.39573a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39573d	5b		tcd		                TCD
.39573e	28		plp		                PLP
.39573f	68		pla		                PLA             ; end setdp macro
.395740	e2 20		sep #$20	                SEP #$20        ; set A short
.395742	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395744	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395747	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.39574b	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.39574f	22 8f 57 39	jsl $39578f	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395753	b0 03		bcs $395758	                BCS init_ok
.395755	82 15 00	brl $39576d	                BRL done
.395758	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.39575a	85 01		sta $0321	                STA BIOS_DEV
.39575c	22 bc 41 39	jsl $3941bc	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395760	b0 03		bcs $395765	                BCS mount_ok
.395762	82 08 00	brl $39576d	                BRL done
.395765	22 a4 51 39	jsl $3951a4	mount_ok        JSL IF_DIROPEN
.395769	b0 02		bcs $39576d	                BCS all_ok
.39576b	80 00		bra $39576d	                BRA done
.39576d					all_ok
.39576d	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395771	28		plp		                PLP
.395772	2b		pld		                PLD
.395773	ab		plb		                PLB
.395774	6b		rtl		                RTL
.395775					SDC_WAITBUSY
.395775	08		php		                PHP
.395776	e2 20		sep #$20	                SEP #$20        ; set A short
.395778	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.39577c	29 01		and #$01	                AND #SDC_TRANS_BUSY
.39577e	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395780	f0 f6		beq $395778	                BEQ wait_xact
.395782	28		plp		                PLP
.395783	6b		rtl		                RTL
.395784					SDC_RESET
.395784	08		php		                PHP
.395785	e2 20		sep #$20	                SEP #$20        ; set A short
.395787	a9 01		lda #$01	                LDA #1
.395789	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.39578d	28		plp		                PLP
.39578e	6b		rtl		                RTL
.39578f	0b		phd		SDC_INIT        PHD
.395790	8b		phb		                PHB
.395791	08		php		                PHP
.395792	48		pha		                PHA             ; begin setdbr macro
.395793	08		php		                PHP
.395794	e2 20		sep #$20	                SEP #$20        ; set A short
.395796	a9 00		lda #$00	                LDA #0
.395798	48		pha		                PHA
.395799	ab		plb		                PLB
.39579a	28		plp		                PLP
.39579b	68		pla		                PLA             ; end setdbr macro
.39579c	48		pha		                PHA             ; begin setdp macro
.39579d	08		php		                PHP
.39579e	c2 20		rep #$20	                REP #$20        ; set A long
.3957a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957a3	5b		tcd		                TCD
.3957a4	28		plp		                PLP
.3957a5	68		pla		                PLA             ; end setdp macro
.3957a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3957a8	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.3957aa	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.3957ae	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3957b0	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3957b4	22 75 57 39	jsl $395775	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.3957b8	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3957bc	d0 07		bne $3957c5	                BNE ret_error                       ; Is there one? Process the error
.3957be	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.3957c0	28		plp		                PLP
.3957c1	ab		plb		                PLB
.3957c2	2b		pld		                PLD
.3957c3	38		sec		                SEC
.3957c4	6b		rtl		                RTL
.3957c5	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3957c8	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.3957ca	85 00		sta $0320	                STA BIOS_STATUS
.3957cc	28		plp		                PLP
.3957cd	ab		plb		                PLB
.3957ce	2b		pld		                PLD
.3957cf	18		clc		                CLC
.3957d0	6b		rtl		                RTL
.3957d1					SDC_GETBLOCK
.3957d1	0b		phd		                PHD
.3957d2	8b		phb		                PHB
.3957d3	08		php		                PHP
.3957d4	48		pha		                PHA             ; begin setdbr macro
.3957d5	08		php		                PHP
.3957d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3957d8	a9 00		lda #$00	                LDA #0
.3957da	48		pha		                PHA
.3957db	ab		plb		                PLB
.3957dc	28		plp		                PLP
.3957dd	68		pla		                PLA             ; end setdbr macro
.3957de	48		pha		                PHA             ; begin setdp macro
.3957df	08		php		                PHP
.3957e0	c2 20		rep #$20	                REP #$20        ; set A long
.3957e2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957e5	5b		tcd		                TCD
.3957e6	28		plp		                PLP
.3957e7	68		pla		                PLA             ; end setdp macro
.3957e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3957ea	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3957ee	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3957f0	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3957f4	a9 00		lda #$00	                LDA #0
.3957f6	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3957fa	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.3957fc	0a		asl a		                ASL A
.3957fd	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395801	a5 03		lda $0323	                LDA BIOS_LBA+1
.395803	2a		rol a		                ROL A
.395804	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395808	a5 04		lda $0324	                LDA BIOS_LBA+2
.39580a	2a		rol a		                ROL A
.39580b	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.39580f	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395811	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395815	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395817	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.39581b	22 75 57 39	jsl $395775	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.39581f	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395823	d0 36		bne $39585b	                BNE ret_error                       ; Is there one? Process the error
.395825	e2 20		sep #$20	                SEP #$20        ; set A short
.395827	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.39582b	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.39582d	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395831	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395833	c2 10		rep #$10	                REP #$10        ; set X long
.395835	a0 00 00	ldy #$0000	                LDY #0
.395838	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.39583c	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.39583e	c8		iny		                INY                                 ; Advance to the next byte
.39583f	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395842	d0 f4		bne $395838	                BNE loop_rd                         ; No: keep reading
.395844	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395848	d0 11		bne $39585b	                BNE ret_error                       ; Is there one? Process the error
.39584a	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.39584c	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395850	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395852	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395856	28		plp		                PLP
.395857	ab		plb		                PLB
.395858	2b		pld		                PLD
.395859	38		sec		                SEC
.39585a	6b		rtl		                RTL
.39585b	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.39585e	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395860	85 00		sta $0320	                STA BIOS_STATUS
.395862	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395866	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395868	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.39586c	28		plp		                PLP
.39586d	ab		plb		                PLB
.39586e	2b		pld		                PLD
.39586f	18		clc		                CLC
.395870	6b		rtl		                RTL
.395871					SDC_PUTBLOCK
.395871	0b		phd		                PHD
.395872	8b		phb		                PHB
.395873	08		php		                PHP
.395874	48		pha		                PHA             ; begin setdbr macro
.395875	08		php		                PHP
.395876	e2 20		sep #$20	                SEP #$20        ; set A short
.395878	a9 00		lda #$00	                LDA #0
.39587a	48		pha		                PHA
.39587b	ab		plb		                PLB
.39587c	28		plp		                PLP
.39587d	68		pla		                PLA             ; end setdbr macro
.39587e	48		pha		                PHA             ; begin setdp macro
.39587f	08		php		                PHP
.395880	c2 20		rep #$20	                REP #$20        ; set A long
.395882	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395885	5b		tcd		                TCD
.395886	28		plp		                PLP
.395887	68		pla		                PLA             ; end setdp macro
.395888	e2 20		sep #$20	                SEP #$20        ; set A short
.39588a	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.39588e	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395890	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395894	c2 10		rep #$10	                REP #$10        ; set X long
.395896	a0 00 00	ldy #$0000	                LDY #0
.395899	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.39589b	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.39589f	c8		iny		                INY                                 ; Advance to the next byte
.3958a0	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3958a3	d0 f4		bne $395899	                BNE loop_wr                         ; No: keep writing
.3958a5	a9 00		lda #$00	                LDA #0
.3958a7	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3958ab	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.3958ad	0a		asl a		                ASL A
.3958ae	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.3958b2	a5 03		lda $0323	                LDA BIOS_LBA+1
.3958b4	2a		rol a		                ROL A
.3958b5	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3958b9	a5 04		lda $0324	                LDA BIOS_LBA+2
.3958bb	2a		rol a		                ROL A
.3958bc	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3958c0	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.3958c2	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3958c6	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3958c8	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3958cc	22 75 57 39	jsl $395775	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3958d0	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3958d4	d0 11		bne $3958e7	                BNE ret_error                       ; Is there one? Process the error
.3958d6	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3958d8	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3958dc	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3958de	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3958e2	28		plp		                PLP
.3958e3	ab		plb		                PLB
.3958e4	2b		pld		                PLD
.3958e5	38		sec		                SEC
.3958e6	6b		rtl		                RTL
.3958e7	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3958ea	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3958ec	85 00		sta $0320	                STA BIOS_STATUS
.3958ee	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3958f2	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3958f4	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3958f8	28		plp		                PLP
.3958f9	ab		plb		                PLB
.3958fa	2b		pld		                PLD
.3958fb	18		clc		                CLC
.3958fc	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=1800					FDC_MOTOR_ON_TIME = 60 * 30     ; Time (in SOF interrupt counts) for the motor to stay on: ~30s?
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.3958fd					FDC_TEST
.3958fd	8b		phb		                    PHB
.3958fe	0b		phd		                    PHD
.3958ff	08		php		                    PHP
.395900	48		pha		                PHA             ; begin setdbr macro
.395901	08		php		                PHP
.395902	e2 20		sep #$20	                SEP #$20        ; set A short
.395904	a9 00		lda #$00	                LDA #0
.395906	48		pha		                PHA
.395907	ab		plb		                PLB
.395908	28		plp		                PLP
.395909	68		pla		                PLA             ; end setdbr macro
.39590a	48		pha		                PHA             ; begin setdp macro
.39590b	08		php		                PHP
.39590c	c2 20		rep #$20	                REP #$20        ; set A long
.39590e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395911	5b		tcd		                TCD
.395912	28		plp		                PLP
.395913	68		pla		                PLA             ; end setdp macro
.395914	e2 20		sep #$20	                SEP #$20        ; set A short
.395916	a9 f0		lda #$f0	                    LDA #$F0
.395918	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.39591b	22 b9 09 39	jsl $3909b9	                    JSL ICLRSCREEN
.39591f	22 25 08 39	jsl $390825	                    JSL ICSRHOME
.395923	c2 30		rep #$30	                REP #$30        ; set A&X long
.395925	22 06 5b 39	jsl $395b06	                    JSL FDC_Init
.395929	b0 03		bcs $39592e	                    BCS init_ok
.39592b	82 2a 00	brl $395958	                    BRL motor_off
.39592e	22 ad 61 39	jsl $3961ad	init_ok             JSL FDC_CHK_MEDIA
.395932	90 03		bcc $395937	                    BCC no_media
.395934	82 03 00	brl $39593a	                    BRL is_ok1
.395937					no_media
.395937	82 1e 00	brl $395958	                    BRL motor_off
.39593a	22 44 60 39	jsl $396044	is_ok1              JSL FDC_MOUNT
.39593e	90 03		bcc $395943	                    BCC mount_err
.395940	82 03 00	brl $395946	                    BRL is_ok2
.395943					mount_err
.395943	82 12 00	brl $395958	                    BRL motor_off
.395946					is_ok2
.395946	e2 20		sep #$20	                SEP #$20        ; set A short
.395948	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.39594a	8f 21 03 00	sta $000321	                    STA @l BIOS_DEV
.39594e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395950	22 6c 49 39	jsl $39496c	                    JSL DOS_FREECLUS12
.395954	b0 02		bcs $395958	                    BCS all_ok
.395956	80 00		bra $395958	                    BRA motor_off
.395958					all_ok
.395958	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.39595c	22 ac 5b 39	jsl $395bac	                    JSL FDC_Motor_Off
.395960	28		plp		                    PLP
.395961	2b		pld		                    PLD
.395962	ab		plb		                    PLB
.395963	6b		rtl		                    RTL
.395964					FDC_BRK_ON_ERR
.395964	08		php		                    PHP
.395965	e2 20		sep #$20	                SEP #$20        ; set A short
.395967	af 06 03 00	lda $000306	                    LDA @l FDC_ST0
.39596b	29 d0		and #$d0	                    AND #%11010000          ; Check only the error bits
.39596d	f0 03		beq $395972	                    BEQ done
.39596f	ea		nop		lock                NOP
.395970	80 fd		bra $39596f	                    BRA lock
.395972	28		plp		done                PLP
.395973	6b		rtl		                    RTL
>395974	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>39597c	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>39598c	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395990					FDC_Check_RQM
.395990	08		php		                    PHP
.395991	e2 20		sep #$20	                SEP #$20        ; set A short
.395993	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.395997	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395999	f0 f8		beq $395993	                    BEQ loop
.39599b	28		plp		                    PLP
.39599c	60		rts		                    RTS
.39599d					FDC_Check_DRV0_BSY
.39599d	08		php		                    PHP
.39599e	e2 20		sep #$20	                SEP #$20        ; set A short
.3959a0	af f4 13 af	lda $af13f4	fdc_drv0bsy_loop    LDA @l SIO_FDC_MSR
.3959a4	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.3959a6	d0 f8		bne $3959a0	                    BNE fdc_drv0bsy_loop
.3959a8	28		plp		                    PLP
.3959a9	60		rts		                    RTS
.3959aa					FDC_Check_CMD_BSY
.3959aa	08		php		                    PHP
.3959ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3959ad	af f4 13 af	lda $af13f4	fdc_cmd_loop        LDA @l SIO_FDC_MSR
.3959b1	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3959b3	d0 f8		bne $3959ad	                    BNE fdc_cmd_loop
.3959b5	28		plp		                    PLP
.3959b6	60		rts		                    RTS
.3959b7					FDC_Can_Read_Data
.3959b7	08		php		                    PHP
.3959b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3959ba	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.3959be	29 40		and #$40	                    AND #FDC_MSR_DIO
.3959c0	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.3959c2	d0 f6		bne $3959ba	                    BNE loop
.3959c4	28		plp		                    PLP
.3959c5	60		rts		                    RTS
.3959c6					FDC_CAN_WRITE
.3959c6	08		php		                    PHP
.3959c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3959c9	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.3959cd	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3959cf	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3959d1	d0 f6		bne $3959c9	                    BNE loop
.3959d3	28		plp		                    PLP
.3959d4	60		rts		                    RTS
.3959d5					FDC_DELAY_10MS
.3959d5	da		phx		                    PHX
.3959d6	08		php		                    PHP
.3959d7	c2 10		rep #$10	                REP #$10        ; set X long
.3959d9	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.3959dc	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.3959dd	ca		dex		                    DEX
.3959de	e0 00 00	cpx #$0000	                    CPX #0
.3959e1	d0 f9		bne $3959dc	                    BNE loop
.3959e3	28		plp		                    PLP
.3959e4	fa		plx		                    PLX
.3959e5	6b		rtl		                    RTL
.3959e6					FDC_COMMAND
.3959e6	da		phx		                    PHX
.3959e7	8b		phb		                    PHB
.3959e8	0b		phd		                    PHD
.3959e9	08		php		                    PHP
.3959ea	48		pha		                PHA             ; begin setdbr macro
.3959eb	08		php		                PHP
.3959ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3959ee	a9 00		lda #$00	                LDA #0
.3959f0	48		pha		                PHA
.3959f1	ab		plb		                PLB
.3959f2	28		plp		                PLP
.3959f3	68		pla		                PLA             ; end setdbr macro
.3959f4	48		pha		                PHA             ; begin setdp macro
.3959f5	08		php		                PHP
.3959f6	c2 20		rep #$20	                REP #$20        ; set A long
.3959f8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3959fb	5b		tcd		                TCD
.3959fc	28		plp		                PLP
.3959fd	68		pla		                PLA             ; end setdp macro
.3959fe	22 d5 59 39	jsl $3959d5	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395a02	e2 30		sep #$30	                SEP #$30        ; set A&X short
.395a04	a2 00		ldx #$00	                    LDX #0
.395a06	a9 00		lda #$00	                    LDA #0
.395a08	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395a0b	e8		inx		                    INX
.395a0c	e0 10		cpx #$10	                    CPX #16
.395a0e	d0 f8		bne $395a08	                    BNE clr_results
.395a10	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395a14	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395a16	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395a18	f0 04		beq $395a1e	                    BEQ start_send                          ; If so, start sending
.395a1a	22 06 5b 39	jsl $395b06	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395a1e					start_send
.395a1e	e2 10		sep #$10	                SEP #$10        ; set X short
.395a20	a2 00		ldx #$00	                    LDX #0
.395a22	20 90 59	jsr $395990	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395a25	bd 00 05	lda $0500,x	                    LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395a28	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395a2c	22 d5 59 39	jsl $3959d5	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395a30	e8		inx		                    INX                                     ; Advance to the next byte
.395a31	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395a34	d0 ec		bne $395a22	                    BNE send_loop                           ; Keep sending until we've sent them all
.395a36	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395a39	f0 6c		beq $395aa7	                    BEQ result_phase                        ; If 0: we just want a result
.395a3b	10 2e		bpl $395a6b	                    BPL rd_data                             ; If >0: we want to read data
.395a3d					wr_data
.395a3d	af f4 13 af	lda $af13f4	wr_data_rdy         LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395a41	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395a43	f0 f8		beq $395a3d	                    BEQ wr_data_rdy
.395a45	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395a47	d0 03		bne $395a4c	                    BNE wr_data_phase                       ; If so: transfer the data
.395a49	82 5b 00	brl $395aa7	                    BRL result_phase                          ; If not: it's an error
.395a4c					wr_data_phase
.395a4c	c2 10		rep #$10	                REP #$10        ; set X long
.395a4e	a0 00 00	ldy #$0000	                    LDY #0
.395a51	af f4 13 af	lda $af13f4	wr_data_loop        LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395a55	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395a57	f0 4e		beq $395aa7	                    BEQ result_phase                        ; If not: break out to result phase
.395a59	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395a5b	f0 f4		beq $395a51	                    BEQ wr_data_loop
.395a5d	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395a5f	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395a63	c8		iny		                    INY                                     ; Move to the next position
.395a64	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395a67	d0 e8		bne $395a51	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395a69	80 3c		bra $395aa7	                    BRA result_phase                        ; ready for the result phase
.395a6b	20 b7 59	jsr $3959b7	rd_data             JSR FDC_Can_Read_Data
.395a6e	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395a70	30 05		bmi $395a77	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395a72	a9 87		lda #$87	                    LDA #BIOS_ERR_NOMEDIA                   ; Otherwise: throw a NOMEDIA error
.395a74	82 87 00	brl $395afe	                    BRL pass_error
.395a77	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395a7b	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395a7d	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395a7f	d0 ed		bne $395a6e	                    BNE rd_data_rdy
.395a81	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395a85	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395a87	d0 03		bne $395a8c	                    BNE rd_data_phase                       ; If so: transfer the data
.395a89	82 6e 00	brl $395afa	                    BRL error                               ; If not: it's an error
.395a8c					rd_data_phase
.395a8c	c2 10		rep #$10	                REP #$10        ; set X long
.395a8e	a0 00 00	ldy #$0000	                    LDY #0
.395a91	af f4 13 af	lda $af13f4	rd_data_loop        LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395a95	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395a97	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395a99	d0 f6		bne $395a91	                    BNE rd_data_loop
.395a9b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395a9f	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395aa1	c8		iny		                    INY                                     ; Move to the next position
.395aa2	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395aa5	d0 ea		bne $395a91	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395aa7	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395aaa	f0 28		beq $395ad4	                    BEQ chk_busy                                ; Then we're done
.395aac	e2 10		sep #$10	                SEP #$10        ; set X short
.395aae	a2 00		ldx #$00	                    LDX #0
.395ab0	20 b7 59	jsr $3959b7	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395ab3	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395ab7	20 b7 59	jsr $3959b7	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395aba	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395abe	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395ac1	20 90 59	jsr $395990	                    JSR FDC_Check_RQM
.395ac4	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ac8	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395aca	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395acc	d0 06		bne $395ad4	                    BNE chk_busy
.395ace	e8		inx		                    INX                                     ; Move to the next result positions
.395acf	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395ad2	d0 e6		bne $395aba	                    BNE read_result                         ; And keep looping until we've read all
.395ad4					chk_busy
.395ad4	c2 10		rep #$10	                REP #$10        ; set X long
.395ad6	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395ad9	22 56 13 39	jsl $391356	                    JSL ILOOP_MS
.395add	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395ae1	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395ae3	f0 0d		beq $395af2	                    BEQ done                                ; If not set: we're done
.395ae5	20 b7 59	jsr $3959b7	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395ae8	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Read the data
.395aec	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395aef	e8		inx		                    INX
.395af0	80 e2		bra $395ad4	                    BRA chk_busy                            ; And keep checking
.395af2					done
.395af2	64 20		stz $0320	                    STZ BIOS_STATUS
.395af4	28		plp		                    PLP
.395af5	2b		pld		                    PLD
.395af6	ab		plb		                    PLB
.395af7	fa		plx		                    PLX
.395af8	38		sec		                    SEC
.395af9	6b		rtl		                    RTL
.395afa					error
.395afa	e2 20		sep #$20	                SEP #$20        ; set A short
.395afc	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.395afe	85 20		sta $0320	pass_error          STA BIOS_STATUS
.395b00	28		plp		                    PLP
.395b01	2b		pld		                    PLD
.395b02	ab		plb		                    PLB
.395b03	fa		plx		                    PLX
.395b04	18		clc		                    CLC
.395b05	6b		rtl		                    RTL
.395b06					FDC_Init
.395b06	08		php		                    PHP
.395b07	c2 10		rep #$10	                REP #$10        ; set X long
.395b09	e2 20		sep #$20	                SEP #$20        ; set A short
.395b0b	a9 00		lda #$00	                    LDA #0
.395b0d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395b11	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395b14	a0 00 00	ldy #$0000	                    LDY #0
.395b17	22 63 13 39	jsl $391363	                    JSL IDELAY
.395b1b	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.395b1d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395b21	ea		nop		                    NOP
.395b22	ea		nop		                    NOP
.395b23	ea		nop		                    NOP
.395b24	ea		nop		                    NOP
.395b25	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395b27	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395b2b	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395b2d	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395b31	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395b34	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395b37	22 63 13 39	jsl $391363	                    JSL IDELAY
.395b3b	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.395b3f	90 21		bcc $395b62	                    BCC pass_failure
.395b41	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.395b45	90 1b		bcc $395b62	                    BCC pass_failure
.395b47	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.395b4b	90 15		bcc $395b62	                    BCC pass_failure
.395b4d	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.395b51	90 0f		bcc $395b62	                    BCC pass_failure
.395b53	22 9f 5c 39	jsl $395c9f	                    JSL FDC_Configure_Command
.395b57	90 09		bcc $395b62	                    BCC pass_failure
.395b59	22 5a 5c 39	jsl $395c5a	                    JSL FDC_Specify_Command
.395b5d	90 03		bcc $395b62	                    BCC pass_failure
.395b5f	28		plp		                    PLP
.395b60	38		sec		                    SEC
.395b61	6b		rtl		                    RTL
.395b62	28		plp		pass_failure        PLP
.395b63	18		clc		                    CLC
.395b64	6b		rtl		                    RTL
.395b65					FDC_MOTOR_NEEDED
.395b65	08		php		                    PHP
.395b66	c2 20		rep #$20	                REP #$20        ; set A long
.395b68	78		sei		                    SEI                         ; Turn off interrupts
.395b69	a9 08 07	lda #$0708	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395b6c	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395b70	e2 20		sep #$20	                SEP #$20        ; set A short
.395b72	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395b76	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395b78	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395b7c	28		plp		                    PLP
.395b7d	6b		rtl		                    RTL
.395b7e					FDC_Motor_On
.395b7e	08		php		                    PHP
.395b7f	22 65 5b 39	jsl $395b65	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395b83	e2 20		sep #$20	                SEP #$20        ; set A short
.395b85	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395b89	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395b8b	d0 1d		bne $395baa	                    BNE done                    ; If so: skip
.395b8d	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395b8f	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395b93	20 90 59	jsr $395990	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395b96	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395b99	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395b9c	22 63 13 39	jsl $391363	                    JSL IDELAY
.395ba0	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395ba4	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395ba6	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395baa	28		plp		done                PLP
.395bab	6b		rtl		                    RTL
.395bac					FDC_Motor_Off
.395bac	08		php		                    PHP
.395bad	e2 20		sep #$20	                SEP #$20        ; set A short
.395baf	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395bb1	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395bb5	c2 20		rep #$20	                REP #$20        ; set A long
.395bb7	78		sei		                    SEI                         ; Turn off interrupts
.395bb8	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395bbb	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395bbf	e2 20		sep #$20	                SEP #$20        ; set A short
.395bc1	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395bc5	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395bc7	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395bcb	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395bcf	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.395bd1	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395bd5	28		plp		                    PLP
.395bd6	6b		rtl		                    RTL
.395bd7					FDC_Recalibrate_Command
.395bd7	0b		phd		                    PHD
.395bd8	08		php		                    PHP
.395bd9	48		pha		                PHA             ; begin setdp macro
.395bda	08		php		                PHP
.395bdb	c2 20		rep #$20	                REP #$20        ; set A long
.395bdd	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395be0	5b		tcd		                TCD
.395be1	28		plp		                PLP
.395be2	68		pla		                PLA             ; end setdp macro
.395be3	22 65 5b 39	jsl $395b65	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395be7	e2 20		sep #$20	                SEP #$20        ; set A short
.395be9	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395beb	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395bee	a5 00		lda $0300	                    LDA FDC_DRIVE
.395bf0	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395bf3	a9 02		lda #$02	                    LDA #2
.395bf5	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395bf8	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395bfb	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395bfe	22 e6 59 39	jsl $3959e6	                    JSL FDC_COMMAND             ; Issue the command
.395c02	90 04		bcc $395c08	                    BCC pass_failure            ; If failure, pass the failure up
.395c04	28		plp		                    PLP
.395c05	2b		pld		                    PLD
.395c06	38		sec		                    SEC
.395c07	6b		rtl		                    RTL
.395c08	28		plp		pass_failure        PLP
.395c09	2b		pld		                    PLD
.395c0a	18		clc		                    CLC
.395c0b	6b		rtl		                    RTL
.395c0c					FDC_Sense_Int_Status
.395c0c	8b		phb		                    PHB
.395c0d	0b		phd		                    PHD
.395c0e	08		php		                    PHP
.395c0f	48		pha		                PHA             ; begin setdbr macro
.395c10	08		php		                PHP
.395c11	e2 20		sep #$20	                SEP #$20        ; set A short
.395c13	a9 00		lda #$00	                LDA #0
.395c15	48		pha		                PHA
.395c16	ab		plb		                PLB
.395c17	28		plp		                PLP
.395c18	68		pla		                PLA             ; end setdbr macro
.395c19	48		pha		                PHA             ; begin setdp macro
.395c1a	08		php		                PHP
.395c1b	c2 20		rep #$20	                REP #$20        ; set A long
.395c1d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c20	5b		tcd		                TCD
.395c21	28		plp		                PLP
.395c22	68		pla		                PLA             ; end setdp macro
.395c23	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c25	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395c28	22 56 13 39	jsl $391356	                    JSL ILOOP_MS
.395c2c	e2 20		sep #$20	                SEP #$20        ; set A short
.395c2e	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395c30	a9 ff		lda #$ff	                    LDA #$FF
.395c32	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395c34	20 aa 59	jsr $3959aa	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395c37	20 90 59	jsr $395990	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395c3a	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395c3c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395c40	20 b7 59	jsr $3959b7	                    JSR FDC_Can_Read_Data
.395c43	20 90 59	jsr $395990	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395c46	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395c4a	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395c4c	20 90 59	jsr $395990	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395c4f	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395c53	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395c55	28		plp		                    PLP
.395c56	2b		pld		                    PLD
.395c57	ab		plb		                    PLB
.395c58	38		sec		                    SEC
.395c59	6b		rtl		                    RTL
.395c5a					FDC_Specify_Command
.395c5a	8b		phb		                    PHB
.395c5b	0b		phd		                    PHD
.395c5c	08		php		                    PHP
.395c5d	48		pha		                PHA             ; begin setdbr macro
.395c5e	08		php		                PHP
.395c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.395c61	a9 00		lda #$00	                LDA #0
.395c63	48		pha		                PHA
.395c64	ab		plb		                PLB
.395c65	28		plp		                PLP
.395c66	68		pla		                PLA             ; end setdbr macro
.395c67	48		pha		                PHA             ; begin setdp macro
.395c68	08		php		                PHP
.395c69	c2 20		rep #$20	                REP #$20        ; set A long
.395c6b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c6e	5b		tcd		                TCD
.395c6f	28		plp		                PLP
.395c70	68		pla		                PLA             ; end setdp macro
.395c71	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c73	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395c76	22 56 13 39	jsl $391356	                    JSL ILOOP_MS
.395c7a	e2 20		sep #$20	                SEP #$20        ; set A short
.395c7c	20 aa 59	jsr $3959aa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395c7f	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395c82	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395c84	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395c88	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395c8b	a9 cf		lda #$cf	                    LDA #$CF
.395c8d	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395c91	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395c94	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395c96	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395c9a	28		plp		                    PLP
.395c9b	2b		pld		                    PLD
.395c9c	ab		plb		                    PLB
.395c9d	38		sec		                    SEC
.395c9e	6b		rtl		                    RTL
.395c9f					FDC_Configure_Command
.395c9f	8b		phb		                    PHB
.395ca0	0b		phd		                    PHD
.395ca1	08		php		                    PHP
.395ca2	48		pha		                PHA             ; begin setdbr macro
.395ca3	08		php		                PHP
.395ca4	e2 20		sep #$20	                SEP #$20        ; set A short
.395ca6	a9 00		lda #$00	                LDA #0
.395ca8	48		pha		                PHA
.395ca9	ab		plb		                PLB
.395caa	28		plp		                PLP
.395cab	68		pla		                PLA             ; end setdbr macro
.395cac	48		pha		                PHA             ; begin setdp macro
.395cad	08		php		                PHP
.395cae	c2 20		rep #$20	                REP #$20        ; set A long
.395cb0	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395cb3	5b		tcd		                TCD
.395cb4	28		plp		                PLP
.395cb5	68		pla		                PLA             ; end setdp macro
.395cb6	c2 30		rep #$30	                REP #$30        ; set A&X long
.395cb8	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395cbb	22 56 13 39	jsl $391356	                    JSL ILOOP_MS
.395cbf	e2 20		sep #$20	                SEP #$20        ; set A short
.395cc1	20 aa 59	jsr $3959aa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395cc4	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395cc7	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395cc9	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ccd	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395cd0	a9 00		lda #$00	                    LDA #$00
.395cd2	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395cd6	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395cd9	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395cdb	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395cdf	20 90 59	jsr $395990	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ce2	a9 00		lda #$00	                    LDA #$00
.395ce4	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ce8	20 aa 59	jsr $3959aa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395ceb	28		plp		                    PLP
.395cec	2b		pld		                    PLD
.395ced	ab		plb		                    PLB
.395cee	38		sec		                    SEC
.395cef	6b		rtl		                    RTL
.395cf0					FDC_Read_ID_Command
.395cf0	8b		phb		                    PHB
.395cf1	0b		phd		                    PHD
.395cf2	08		php		                    PHP
.395cf3	48		pha		                PHA             ; begin setdbr macro
.395cf4	08		php		                PHP
.395cf5	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf7	a9 00		lda #$00	                LDA #0
.395cf9	48		pha		                PHA
.395cfa	ab		plb		                PLB
.395cfb	28		plp		                PLP
.395cfc	68		pla		                PLA             ; end setdbr macro
.395cfd	48		pha		                PHA             ; begin setdp macro
.395cfe	08		php		                PHP
.395cff	c2 20		rep #$20	                REP #$20        ; set A long
.395d01	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d04	5b		tcd		                TCD
.395d05	28		plp		                PLP
.395d06	68		pla		                PLA             ; end setdp macro
.395d07	e2 20		sep #$20	                SEP #$20        ; set A short
.395d09	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395d0b	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395d0e	a9 01		lda #$01	                    LDA #1
.395d10	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395d13	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395d16	a9 07		lda #$07	                    LDA #7
.395d18	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395d1b	22 e6 59 39	jsl $3959e6	                    JSL FDC_COMMAND                     ; Issue the command
.395d1f	90 27		bcc $395d48	                    BCC pass_failure
.395d21	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.395d24	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.395d26	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395d29	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.395d2b	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395d2e	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.395d30	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395d33	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.395d35	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395d38	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.395d3a	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395d3d	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.395d3f	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395d42	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.395d44	28		plp		                    PLP
.395d45	2b		pld		                    PLD
.395d46	ab		plb		                    PLB
.395d47	6b		rtl		                    RTL
.395d48	28		plp		pass_failure        PLP
.395d49	2b		pld		                    PLD
.395d4a	ab		plb		                    PLB
.395d4b	18		clc		                    CLC
.395d4c	6b		rtl		                    RTL
.395d4d					FDC_DumpReg_Command
.395d4d	0b		phd		                    PHD
.395d4e	08		php		                    PHP
.395d4f	e2 20		sep #$20	                SEP #$20        ; set A short
.395d51	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.395d53	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395d56	a9 01		lda #$01	                    LDA #1
.395d58	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395d5b	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395d5e	a9 0a		lda #$0a	                    LDA #10
.395d60	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.395d63	22 e6 59 39	jsl $3959e6	                    JSL FDC_COMMAND                     ; Issue the command
.395d67	90 03		bcc $395d6c	                    BCC pass_failure
.395d69	28		plp		                    PLP
.395d6a	2b		pld		                    PLD
.395d6b	6b		rtl		                    RTL
.395d6c	28		plp		pass_failure        PLP
.395d6d	2b		pld		                    PLD
.395d6e	18		clc		                    CLC
.395d6f	6b		rtl		                    RTL
.395d70					FDC_Seek_Track
.395d70	8b		phb		                    PHB
.395d71	0b		phd		                    PHD
.395d72	08		php		                    PHP
.395d73	48		pha		                PHA             ; begin setdbr macro
.395d74	08		php		                PHP
.395d75	e2 20		sep #$20	                SEP #$20        ; set A short
.395d77	a9 00		lda #$00	                LDA #0
.395d79	48		pha		                PHA
.395d7a	ab		plb		                PLB
.395d7b	28		plp		                PLP
.395d7c	68		pla		                PLA             ; end setdbr macro
.395d7d	48		pha		                PHA             ; begin setdp macro
.395d7e	08		php		                PHP
.395d7f	c2 20		rep #$20	                REP #$20        ; set A long
.395d81	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d84	5b		tcd		                TCD
.395d85	28		plp		                PLP
.395d86	68		pla		                PLA             ; end setdp macro
.395d87	22 65 5b 39	jsl $395b65	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.395d8d	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395d8f	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395d92	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395d94	29 01		and #$01	                    AND #$01
.395d96	0a		asl a		                    ASL A
.395d97	0a		asl a		                    ASL A
.395d98	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395d9a	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395d9d	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395d9f	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395da2	a9 03		lda #$03	                    LDA #3
.395da4	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.395da7	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395daa	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395dad	22 e6 59 39	jsl $3959e6	                    JSL FDC_COMMAND                     ; Issue the command
.395db1	90 05		bcc $395db8	                    BCC pass_failure
.395db3	28		plp		                    PLP
.395db4	2b		pld		                    PLD
.395db5	ab		plb		                    PLB
.395db6	38		sec		                    SEC
.395db7	6b		rtl		                    RTL
.395db8	28		plp		pass_failure        PLP
.395db9	2b		pld		                    PLD
.395dba	ab		plb		                    PLB
.395dbb	18		clc		                    CLC
.395dbc	6b		rtl		                    RTL
.395dbd					FDC_Read_Sector
.395dbd	8b		phb		                    PHB
.395dbe	0b		phd		                    PHD
.395dbf	08		php		                    PHP
.395dc0	48		pha		                PHA             ; begin setdbr macro
.395dc1	08		php		                PHP
.395dc2	e2 20		sep #$20	                SEP #$20        ; set A short
.395dc4	a9 00		lda #$00	                LDA #0
.395dc6	48		pha		                PHA
.395dc7	ab		plb		                PLB
.395dc8	28		plp		                PLP
.395dc9	68		pla		                PLA             ; end setdbr macro
.395dca	48		pha		                PHA             ; begin setdp macro
.395dcb	08		php		                PHP
.395dcc	c2 20		rep #$20	                REP #$20        ; set A long
.395dce	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395dd1	5b		tcd		                TCD
.395dd2	28		plp		                PLP
.395dd3	68		pla		                PLA             ; end setdp macro
.395dd4	22 65 5b 39	jsl $395b65	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395dd8	e2 20		sep #$20	                SEP #$20        ; set A short
.395dda	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395ddc	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395dde	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395de1	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395de3	29 01		and #$01	                    AND #$01
.395de5	0a		asl a		                    ASL A
.395de6	0a		asl a		                    ASL A
.395de7	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395de9	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395dec	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395dee	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395df1	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395df3	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395df6	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395df8	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395dfb	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395dfd	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395e00	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395e02	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395e05	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395e07	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395e0a	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395e0c	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395e0f	a9 09		lda #$09	                    LDA #9
.395e11	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395e14	a9 01		lda #$01	                    LDA #1
.395e16	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395e19	a9 07		lda #$07	                    LDA #7
.395e1b	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395e1e	22 e6 59 39	jsl $3959e6	command             JSL FDC_COMMAND                     ; Issue the command
.395e22	08		php		                    PHP
.395e23	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395e26	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395e28	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395e2b	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395e2d	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395e30	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395e32	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395e35	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395e37	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395e3a	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395e3c	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395e3f	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395e41	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395e44	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395e46	28		plp		                    PLP
.395e47	90 04		bcc $395e4d	                    BCC pass_failure
.395e49	28		plp		done                PLP
.395e4a	2b		pld		                    PLD
.395e4b	ab		plb		                    PLB
.395e4c	6b		rtl		                    RTL
.395e4d	28		plp		pass_failure        PLP
.395e4e	2b		pld		                    PLD
.395e4f	ab		plb		                    PLB
.395e50	18		clc		                    CLC
.395e51	6b		rtl		                    RTL
.395e52					FDC_Write_Sector
.395e52	8b		phb		                    PHB
.395e53	0b		phd		                    PHD
.395e54	08		php		                    PHP
.395e55	48		pha		                PHA             ; begin setdbr macro
.395e56	08		php		                PHP
.395e57	e2 20		sep #$20	                SEP #$20        ; set A short
.395e59	a9 00		lda #$00	                LDA #0
.395e5b	48		pha		                PHA
.395e5c	ab		plb		                PLB
.395e5d	28		plp		                PLP
.395e5e	68		pla		                PLA             ; end setdbr macro
.395e5f	48		pha		                PHA             ; begin setdp macro
.395e60	08		php		                PHP
.395e61	c2 20		rep #$20	                REP #$20        ; set A long
.395e63	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e66	5b		tcd		                TCD
.395e67	28		plp		                PLP
.395e68	68		pla		                PLA             ; end setdp macro
.395e69	e2 20		sep #$20	                SEP #$20        ; set A short
.395e6b	22 65 5b 39	jsl $395b65	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395e6f	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.395e71	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395e73	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395e76	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395e78	29 01		and #$01	                    AND #$01
.395e7a	0a		asl a		                    ASL A
.395e7b	0a		asl a		                    ASL A
.395e7c	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395e7e	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395e81	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395e83	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395e86	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395e88	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395e8b	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395e8d	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395e90	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395e92	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395e95	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395e97	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395e9a	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395e9c	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395e9f	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395ea1	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395ea4	a9 09		lda #$09	                    LDA #9
.395ea6	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395ea9	a9 ff		lda #$ff	                    LDA #$FF
.395eab	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.395eae	a9 07		lda #$07	                    LDA #7
.395eb0	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395eb3	22 e6 59 39	jsl $3959e6	command             JSL FDC_COMMAND                     ; Issue the command
.395eb7	08		php		                    PHP
.395eb8	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395ebb	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395ebd	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395ec0	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.395ec2	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395ec5	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.395ec7	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395eca	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.395ecc	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395ecf	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395ed1	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395ed4	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395ed6	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395ed9	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395edb	28		plp		check_status        PLP
.395edc	90 04		bcc $395ee2	                    BCC pass_failure
.395ede	28		plp		done                PLP
.395edf	2b		pld		                    PLD
.395ee0	ab		plb		                    PLB
.395ee1	6b		rtl		                    RTL
.395ee2	28		plp		pass_failure        PLP
.395ee3	2b		pld		                    PLD
.395ee4	ab		plb		                    PLB
.395ee5	18		clc		                    CLC
.395ee6	6b		rtl		                    RTL
.395ee7					DIVIDE32
.395ee7	da		phx		                    PHX
.395ee8	5a		phy		                    PHY
.395ee9	0b		phd		                    PHD
.395eea	08		php		                    PHP
.395eeb	48		pha		                PHA             ; begin setdp macro
.395eec	08		php		                PHP
.395eed	c2 20		rep #$20	                REP #$20        ; set A long
.395eef	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.395ef2	5b		tcd		                TCD
.395ef3	28		plp		                PLP
.395ef4	68		pla		                PLA             ; end setdp macro
.395ef5	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ef7	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.395ef9	64 0a		stz $0316	                    STZ REMAINDER+2
.395efb	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.395efe	06 00		asl $030c	loop                ASL DIVIDEND
.395f00	26 02		rol $030e	                    ROL DIVIDEND+2
.395f02	26 08		rol $0314	                    ROL REMAINDER
.395f04	26 0a		rol $0316	                    ROL REMAINDER+2
.395f06	a5 08		lda $0314	                    LDA REMAINDER
.395f08	38		sec		                    SEC
.395f09	e5 04		sbc $0310	                    SBC DIVISOR
.395f0b	a8		tay		                    TAY
.395f0c	a5 0a		lda $0316	                    LDA REMAINDER+2
.395f0e	e5 06		sbc $0312	                    SBC DIVISOR+2
.395f10	90 06		bcc $395f18	                    BCC skip
.395f12	85 0a		sta $0316	                    STA REMAINDER+2
.395f14	84 08		sty $0314	                    STY REMAINDER
.395f16	e6 00		inc $030c	                    INC DIVIDEND
.395f18	ca		dex		skip                DEX
.395f19	d0 e3		bne $395efe	                    BNE loop
.395f1b	28		plp		                    PLP
.395f1c	2b		pld		                    PLD
.395f1d	7a		ply		                    PLY
.395f1e	fa		plx		                    PLX
.395f1f	60		rts		                    RTS
.395f20					LBA2CHS
.395f20	8b		phb		                    PHB
.395f21	0b		phd		                    PHD
.395f22	08		php		                    PHP
.395f23	48		pha		                PHA             ; begin setdbr macro
.395f24	08		php		                PHP
.395f25	e2 20		sep #$20	                SEP #$20        ; set A short
.395f27	a9 00		lda #$00	                LDA #0
.395f29	48		pha		                PHA
.395f2a	ab		plb		                PLB
.395f2b	28		plp		                PLP
.395f2c	68		pla		                PLA             ; end setdbr macro
.395f2d	48		pha		                PHA             ; begin setdp macro
.395f2e	08		php		                PHP
.395f2f	c2 20		rep #$20	                REP #$20        ; set A long
.395f31	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f34	5b		tcd		                TCD
.395f35	28		plp		                PLP
.395f36	68		pla		                PLA             ; end setdp macro
.395f37	c2 30		rep #$30	                REP #$30        ; set A&X long
.395f39	a5 22		lda $0322	                    LDA BIOS_LBA
.395f3b	85 0c		sta $030c	                    STA DIVIDEND
.395f3d	a5 24		lda $0324	                    LDA BIOS_LBA+2
.395f3f	85 0e		sta $030e	                    STA DIVIDEND+2
.395f41	a9 24 00	lda #$0024	                    LDA #36
.395f44	85 10		sta $0310	                    STA DIVISOR
.395f46	64 12		stz $0312	                    STZ DIVISOR+2
.395f48	20 e7 5e	jsr $395ee7	                    JSR DIVIDE32
.395f4b	e2 20		sep #$20	                SEP #$20        ; set A short
.395f4d	a5 0c		lda $030c	                    LDA DIVIDEND
.395f4f	85 02		sta $0302	                    STA FDC_CYLINDER
.395f51	c2 20		rep #$20	                REP #$20        ; set A long
.395f53	a5 14		lda $0314	                    LDA REMAINDER
.395f55	85 0c		sta $030c	                    STA DIVIDEND
.395f57	a5 16		lda $0316	                    LDA REMAINDER+2
.395f59	85 0e		sta $030e	                    STA DIVIDEND+2
.395f5b	a9 12 00	lda #$0012	                    LDA #18
.395f5e	85 10		sta $0310	                    STA DIVISOR
.395f60	64 12		stz $0312	                    STZ DIVISOR+2
.395f62	20 e7 5e	jsr $395ee7	                    JSR DIVIDE32
.395f65	e2 20		sep #$20	                SEP #$20        ; set A short
.395f67	a5 0c		lda $030c	                    LDA DIVIDEND
.395f69	29 01		and #$01	                    AND #$01
.395f6b	85 01		sta $0301	                    STA FDC_HEAD
.395f6d	a5 14		lda $0314	                    LDA REMAINDER
.395f6f	1a		inc a		                    INC A
.395f70	85 03		sta $0303	                    STA FDC_SECTOR
.395f72	28		plp		                    PLP
.395f73	2b		pld		                    PLD
.395f74	ab		plb		                    PLB
.395f75	6b		rtl		                    RTL
.395f76					FDC_GETBLOCK
.395f76	8b		phb		                    PHB
.395f77	0b		phd		                    PHD
.395f78	08		php		                    PHP
.395f79	48		pha		                PHA             ; begin setdbr macro
.395f7a	08		php		                PHP
.395f7b	e2 20		sep #$20	                SEP #$20        ; set A short
.395f7d	a9 00		lda #$00	                LDA #0
.395f7f	48		pha		                PHA
.395f80	ab		plb		                PLB
.395f81	28		plp		                PLP
.395f82	68		pla		                PLA             ; end setdbr macro
.395f83	48		pha		                PHA             ; begin setdp macro
.395f84	08		php		                PHP
.395f85	c2 20		rep #$20	                REP #$20        ; set A long
.395f87	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f8a	5b		tcd		                TCD
.395f8b	28		plp		                PLP
.395f8c	68		pla		                PLA             ; end setdp macro
.395f8d	e2 20		sep #$20	                SEP #$20        ; set A short
.395f8f	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.395f91	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.395f94	c2 30		rep #$30	                REP #$30        ; set A&X long
.395f96	22 20 5f 39	jsl $395f20	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395f9a	e2 20		sep #$20	                SEP #$20        ; set A short
.395f9c	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.395f9e	f0 29		beq $395fc9	                    BEQ read_failure
.395fa0					try_read
.395fa0	c2 20		rep #$20	                REP #$20        ; set A long
.395fa2	22 bd 5d 39	jsl $395dbd	                    JSL FDC_Read_Sector         ; Read the sector
.395fa6	90 14		bcc $395fbc	                    BCC retry
.395fa8	e2 20		sep #$20	                SEP #$20        ; set A short
.395faa	a5 06		lda $0306	                    LDA FDC_ST0
.395fac	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395fae	d0 19		bne $395fc9	                    BNE read_failure
.395fb0					ret_success
.395fb0	e2 20		sep #$20	                SEP #$20        ; set A short
.395fb2	a9 00		lda #$00	                    LDA #0
.395fb4	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395fb7	28		plp		                    PLP
.395fb8	2b		pld		                    PLD
.395fb9	ab		plb		                    PLB
.395fba	38		sec		                    SEC
.395fbb	6b		rtl		                    RTL
.395fbc					retry
.395fbc	e2 20		sep #$20	                SEP #$20        ; set A short
.395fbe	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.395fc1	30 13		bmi $395fd6	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.395fc3	22 06 5b 39	jsl $395b06	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.395fc7	80 d7		bra $395fa0	                    BRA try_read                ; And try the read again
.395fc9					read_failure
.395fc9	e2 20		sep #$20	                SEP #$20        ; set A short
.395fcb	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.395fcd	80 04		bra $395fd3	                    BRA ret_failure
.395fcf					seek_failure
.395fcf	e2 20		sep #$20	                SEP #$20        ; set A short
.395fd1	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395fd3	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.395fd6	28		plp		pass_failure        PLP
.395fd7	2b		pld		                    PLD
.395fd8	ab		plb		                    PLB
.395fd9	18		clc		                    CLC
.395fda	6b		rtl		                    RTL
.395fdb					FDC_PUTBLOCK
.395fdb	8b		phb		                    PHB
.395fdc	0b		phd		                    PHD
.395fdd	08		php		                    PHP
.395fde	48		pha		                PHA             ; begin setdbr macro
.395fdf	08		php		                PHP
.395fe0	e2 20		sep #$20	                SEP #$20        ; set A short
.395fe2	a9 00		lda #$00	                LDA #0
.395fe4	48		pha		                PHA
.395fe5	ab		plb		                PLB
.395fe6	28		plp		                PLP
.395fe7	68		pla		                PLA             ; end setdbr macro
.395fe8	48		pha		                PHA             ; begin setdp macro
.395fe9	08		php		                PHP
.395fea	c2 20		rep #$20	                REP #$20        ; set A long
.395fec	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fef	5b		tcd		                TCD
.395ff0	28		plp		                PLP
.395ff1	68		pla		                PLA             ; end setdp macro
.395ff2	e2 20		sep #$20	                SEP #$20        ; set A short
.395ff4	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.395ff6	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.395ff9	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ffb	22 20 5f 39	jsl $395f20	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395fff	22 52 5e 39	jsl $395e52	retry               JSL FDC_Write_Sector        ; Write the sector
.396003	90 28		bcc $39602d	                    BCC attempt_retry
.396005	e2 20		sep #$20	                SEP #$20        ; set A short
.396007	a5 06		lda $0306	                    LDA FDC_ST0
.396009	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39600b	d0 0c		bne $396019	                    BNE write_failure
.39600d					ret_success
.39600d	e2 20		sep #$20	                SEP #$20        ; set A short
.39600f	a9 00		lda #$00	                    LDA #0
.396011	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396014	28		plp		                    PLP
.396015	2b		pld		                    PLD
.396016	ab		plb		                    PLB
.396017	38		sec		                    SEC
.396018	6b		rtl		                    RTL
.396019					write_failure
.396019	e2 20		sep #$20	                SEP #$20        ; set A short
.39601b	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.39601d	89 02		bit #$02	                    BIT #FDC_ST1_NW
.39601f	f0 04		beq $396025	                    BEQ generic_err
.396021	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396023	80 17		bra $39603c	                    BRA ret_failure
.396025	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.396027	d0 e4		bne $39600d	                    BNE ret_success
.396029	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.39602b	d0 e0		bne $39600d	                    BNE ret_success
.39602d					attempt_retry
.39602d	e2 20		sep #$20	                SEP #$20        ; set A short
.39602f	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396032	d0 cb		bne $395fff	                    BNE retry                           ; And retry unless we have none left
.396034	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.396036	80 04		bra $39603c	                    BRA ret_failure
.396038					seek_failure
.396038	e2 20		sep #$20	                SEP #$20        ; set A short
.39603a	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39603c					ret_failure
.39603c	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39603f	28		plp		pass_failure        PLP
.396040	2b		pld		                    PLD
.396041	ab		plb		                    PLB
.396042	18		clc		                    CLC
.396043	6b		rtl		                    RTL
.396044					FDC_MOUNT
.396044	8b		phb		                    PHB
.396045	0b		phd		                    PHD
.396046	08		php		                    PHP
.396047	48		pha		                PHA             ; begin setdbr macro
.396048	08		php		                PHP
.396049	e2 20		sep #$20	                SEP #$20        ; set A short
.39604b	a9 00		lda #$00	                LDA #0
.39604d	48		pha		                PHA
.39604e	ab		plb		                PLB
.39604f	28		plp		                PLP
.396050	68		pla		                PLA             ; end setdbr macro
.396051	48		pha		                PHA             ; begin setdp macro
.396052	08		php		                PHP
.396053	c2 20		rep #$20	                REP #$20        ; set A long
.396055	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396058	5b		tcd		                TCD
.396059	28		plp		                PLP
.39605a	68		pla		                PLA             ; end setdp macro
.39605b	e2 20		sep #$20	                SEP #$20        ; set A short
.39605d	c2 10		rep #$10	                REP #$10        ; set X long
.39605f	a9 00		lda #$00	                    LDA #0
.396061	a2 00 00	ldx #$0000	                    LDX #0
.396064	9f 00 e3 37	sta $37e300,x	zero_loop           STA DOS_SECTOR,X
.396068	e8		inx		                    INX
.396069	e0 00 02	cpx #$0200	                    CPX #512
.39606c	d0 f6		bne $396064	                    BNE zero_loop
.39606e	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396070	85 00		sta $0300	                    STA FDC_DRIVE
.396072	22 7e 5b 39	jsl $395b7e	                    JSL FDC_Motor_On                        ; Turn the motor on
.396076	c2 30		rep #$30	                REP #$30        ; set A&X long
.396078	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.39607b	85 22		sta $0322	                    STA BIOS_LBA
.39607d	85 24		sta $0324	                    STA BIOS_LBA+2
.39607f	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396082	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396084	a9 37 00	lda #$0037	                    LDA #`DOS_SECTOR
.396087	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396089	22 76 5f 39	jsl $395f76	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.39608d	b0 03		bcs $396092	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39608f	82 d3 00	brl $396165	                    BRL pass_failure                        ; Pass the error up the chain
.396092					parse_boot
.396092	e2 20		sep #$20	                SEP #$20        ; set A short
.396094	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396096	8f 01 e0 38	sta $38e001	                    STA @l FILE_SYSTEM
.39609a	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.39609c	8f 02 e0 38	sta $38e002	                    STA @l PARTITION
.3960a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3960a2	af 0d e3 37	lda $37e30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.3960a6	8f 03 e0 38	sta $38e003	                    STA @l SECTORS_PER_CLUSTER
.3960aa	c2 20		rep #$20	                REP #$20        ; set A long
.3960ac	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.3960af	8f 04 e0 38	sta $38e004	                    STA @l FIRSTSECTOR
.3960b3	8f 06 e0 38	sta $38e006	                    STA @l FIRSTSECTOR+2
.3960b7	af 16 e3 37	lda $37e316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.3960bb	8f 10 e0 38	sta $38e010	                    STA @l SEC_PER_FAT
.3960bf	a9 00 00	lda #$0000	                    LDA #0
.3960c2	8f 12 e0 38	sta $38e012	                    STA @l SEC_PER_FAT+2
.3960c6	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.3960c9	8f 14 e0 38	sta $38e014	                    STA @l FAT_BEGIN_LBA
.3960cd	18		clc		                    CLC
.3960ce	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.3960d2	8f 18 e0 38	sta $38e018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3960d6	a9 00 00	lda #$0000	                    LDA #0
.3960d9	8f 16 e0 38	sta $38e016	                    STA @l FAT_BEGIN_LBA+2
.3960dd	8f 1a e0 38	sta $38e01a	                    STA @L FAT2_BEGIN_LBA+2
.3960e1	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3960e2	af 18 e0 38	lda $38e018	                    LDA @l FAT2_BEGIN_LBA
.3960e6	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.3960ea	8f 20 e0 38	sta $38e020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3960ee	a9 00 00	lda #$0000	                    LDA #0
.3960f1	8f 22 e0 38	sta $38e022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3960f5	af 11 e3 37	lda $37e311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3960f9	8f 24 e0 38	sta $38e024	                    STA @l ROOT_DIR_MAX_ENTRY
.3960fd	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3960fe	4a		lsr a		                    LSR A
.3960ff	4a		lsr a		                    LSR A
.396100	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396101	18		clc		                    CLC
.396102	6f 20 e0 38	adc $38e020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396106	8f 1c e0 38	sta $38e01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.39610a	a9 00 00	lda #$0000	                    LDA #0
.39610d	8f 1e e0 38	sta $38e01e	                    STA @l CLUSTER_BEGIN_LBA+2
.396111	af 13 e3 37	lda $37e313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.396115	8f 08 e0 38	sta $38e008	                    STA @l SECTORCOUNT
.396119	a9 00 00	lda #$0000	                    LDA #0
.39611c	8f 0a e0 38	sta $38e00a	                    STA @l SECTORCOUNT+2
.396120	af 0e e3 37	lda $37e30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.396124	8f 0c e0 38	sta $38e00c	                    STA @l NUM_RSRV_SEC
.396128	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.39612b	8f 0e e0 38	sta $38e00e	                    STA @l CLUSTER_SIZE
.39612f	e2 20		sep #$20	                SEP #$20        ; set A short
.396131	af 26 e3 37	lda $37e326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.396135	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396137	80 14		bra $39614d	                    BRA no_volume_id                        ; No: there is no volume ID
.396139					is_extended
.396139	c2 20		rep #$20	                REP #$20        ; set A long
.39613b	af 27 e3 37	lda $37e327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.39613f	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.396143	af 29 e3 37	lda $37e329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396147	8f 28 e0 38	sta $38e028	                    STA @l VOLUME_ID+2
.39614b	80 0d		bra $39615a	                    BRA ret_success
.39614d					no_volume_id
.39614d	c2 20		rep #$20	                REP #$20        ; set A long
.39614f	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.396152	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.396156	8f 28 e0 38	sta $38e028	                    STA @L VOLUME_ID+2
.39615a					ret_success
.39615a	e2 20		sep #$20	                SEP #$20        ; set A short
.39615c	a9 00		lda #$00	                    LDA #0
.39615e	85 20		sta $0320	                    STA BIOS_STATUS
.396160	28		plp		                    PLP
.396161	2b		pld		                    PLD
.396162	ab		plb		                    PLB
.396163	38		sec		                    SEC
.396164	6b		rtl		                    RTL
.396165	28		plp		pass_failure        PLP
.396166	2b		pld		                    PLD
.396167	ab		plb		                    PLB
.396168	18		clc		                    CLC
.396169	6b		rtl		                    RTL
.39616a					FDC_CMDBLOCK
.39616a	8b		phb		                    PHB
.39616b	0b		phd		                    PHD
.39616c	08		php		                    PHP
.39616d	48		pha		                PHA             ; begin setdbr macro
.39616e	08		php		                PHP
.39616f	e2 20		sep #$20	                SEP #$20        ; set A short
.396171	a9 00		lda #$00	                LDA #0
.396173	48		pha		                PHA
.396174	ab		plb		                PLB
.396175	28		plp		                PLP
.396176	68		pla		                PLA             ; end setdbr macro
.396177	48		pha		                PHA             ; begin setdp macro
.396178	08		php		                PHP
.396179	c2 20		rep #$20	                REP #$20        ; set A long
.39617b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39617e	5b		tcd		                TCD
.39617f	28		plp		                PLP
.396180	68		pla		                PLA             ; end setdp macro
.396181	e2 30		sep #$30	                SEP #$30        ; set A&X short
.396183	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396185	f0 0f		beq $396196	                    BEQ motor_on
.396187	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396189	f0 11		beq $39619c	                    BEQ motor_off
.39618b	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.39618d	f0 13		beq $3961a2	                    BEQ recalibrate
.39618f	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396191	28		plp		                    PLP
.396192	2b		pld		                    PLD
.396193	ab		plb		                    PLB
.396194	38		sec		                    SEC
.396195	6b		rtl		                    RTL
.396196	22 7e 5b 39	jsl $395b7e	motor_on            JSL FDC_Motor_On
.39619a	80 f3		bra $39618f	                    BRA ret_success
.39619c	22 ac 5b 39	jsl $395bac	motor_off           JSL FDC_Motor_Off
.3961a0	80 ed		bra $39618f	                    BRA ret_success
.3961a2	22 d7 5b 39	jsl $395bd7	recalibrate         JSL FDC_Recalibrate_Command
.3961a6	b0 e7		bcs $39618f	                    BCS ret_success
.3961a8	28		plp		pass_failure        PLP
.3961a9	2b		pld		                    PLD
.3961aa	ab		plb		                    PLB
.3961ab	18		clc		                    CLC
.3961ac	6b		rtl		                    RTL
.3961ad					FDC_CHK_MEDIA
.3961ad	0b		phd		                    PHD
.3961ae	08		php		                    PHP
.3961af	48		pha		                PHA             ; begin setdp macro
.3961b0	08		php		                PHP
.3961b1	c2 20		rep #$20	                REP #$20        ; set A long
.3961b3	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961b6	5b		tcd		                TCD
.3961b7	28		plp		                PLP
.3961b8	68		pla		                PLA             ; end setdp macro
.3961b9	22 7e 5b 39	jsl $395b7e	                    JSL FDC_Motor_On                ; Turn on the motor
.3961bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3961bf	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.3961c3	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.3961c5	f0 42		beq $396209	                    BEQ ret_true                    ; If not: assume the disk is present
.3961c7	a9 00		lda #$00	                    LDA #0
.3961c9	85 00		sta $0300	                    STA FDC_DRIVE
.3961cb	a9 00		lda #$00	                    LDA #0
.3961cd	85 01		sta $0301	                    STA FDC_HEAD
.3961cf	a9 50		lda #$50	                    LDA #80
.3961d1	85 02		sta $0302	                    STA FDC_CYLINDER
.3961d3	22 70 5d 39	jsl $395d70	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3961d7	90 34		bcc $39620d	                    BCC ret_false                   ; If fail: return false
.3961d9	c2 10		rep #$10	                REP #$10        ; set X long
.3961db	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3961de	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3961e1	22 63 13 39	jsl $391363	                    JSL IDELAY
.3961e5	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.3961e9	a5 06		lda $0306	                    LDA FDC_ST0
.3961eb	29 d0		and #$d0	                    AND #%11010000
.3961ed	d0 1e		bne $39620d	                    BNE ret_false
.3961ef	22 d7 5b 39	jsl $395bd7	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3961f3	90 18		bcc $39620d	                    BCC ret_false                   ; If fail: return false
.3961f5	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3961f8	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3961fb	22 63 13 39	jsl $391363	                    JSL IDELAY
.3961ff	22 0c 5c 39	jsl $395c0c	                    JSL FDC_Sense_Int_Status
.396203	a5 06		lda $0306	                    LDA FDC_ST0
.396205	29 d0		and #$d0	                    AND #%11010000
.396207	d0 04		bne $39620d	                    BNE ret_false
.396209					ret_true
.396209	28		plp		                    PLP
.39620a	2b		pld		                    PLD
.39620b	38		sec		                    SEC
.39620c	6b		rtl		                    RTL
.39620d					ret_false
.39620d	28		plp		                    PLP
.39620e	2b		pld		                    PLD
.39620f	18		clc		                    CLC
.396210	6b		rtl		                    RTL
.396211					FDC_WRITEVBR
.396211	8b		phb		                    PHB
.396212	0b		phd		                    PHD
.396213	08		php		                    PHP
.396214	48		pha		                PHA             ; begin setdbr macro
.396215	08		php		                PHP
.396216	e2 20		sep #$20	                SEP #$20        ; set A short
.396218	a9 00		lda #$00	                LDA #0
.39621a	48		pha		                PHA
.39621b	ab		plb		                PLB
.39621c	28		plp		                PLP
.39621d	68		pla		                PLA             ; end setdbr macro
.39621e	48		pha		                PHA             ; begin setdp macro
.39621f	08		php		                PHP
.396220	c2 20		rep #$20	                REP #$20        ; set A long
.396222	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396225	5b		tcd		                TCD
.396226	28		plp		                PLP
.396227	68		pla		                PLA             ; end setdp macro
.396228	22 44 60 39	jsl $396044	                    JSL FDC_MOUNT               ; Mount the floppy disk
.39622c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39622e	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.396231	a2 00 00	ldx #$0000	                    LDX #0
.396234	9f 00 e3 37	sta $37e300,x	clr_loop            STA DOS_SECTOR,X
.396238	e8		inx		                    INX
.396239	e8		inx		                    INX
.39623a	e0 00 02	cpx #$0200	                    CPX #512
.39623d	d0 f5		bne $396234	                    BNE clr_loop
.39623f	e2 20		sep #$20	                SEP #$20        ; set A short
.396241	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396244	bf aa 62 39	lda $3962aa,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396248	9f 00 e3 37	sta $37e300,x	                    STA DOS_SECTOR,X
.39624c	e8		inx		                    INX
.39624d	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.396250	d0 f2		bne $396244	                    BNE copy_loop
.396252	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.396255	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396258	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.39625a	9f 00 e3 37	sta $37e300,x	                    STA DOS_SECTOR,X
.39625e	f0 07		beq $396267	                    BEQ path_copy_done
.396260	e8		inx		                    INX
.396261	c8		iny		                    INY
.396262	c0 80 00	cpy #$0080	                    CPY #128
.396265	d0 f1		bne $396258	                    BNE path_copy_loop
.396267					path_copy_done
.396267	c2 20		rep #$20	                REP #$20        ; set A long
.396269	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.39626c	8f fe e4 37	sta $37e4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396270	c2 20		rep #$20	                REP #$20        ; set A long
.396272	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396275	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396277	a9 37 00	lda #$0037	                    LDA #`DOS_SECTOR
.39627a	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39627c	a9 01 00	lda #$0001	                    LDA #1                      ; Set the sector to #1 (boot record)
.39627f	85 02		sta $0322	                    STA BIOS_LBA
.396281	a9 00 00	lda #$0000	                    LDA #0
.396284	85 02		sta $0322	                    STA BIOS_LBA
.396286	e2 20		sep #$20	                SEP #$20        ; set A short
.396288	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.39628a	85 01		sta $0321	                    STA BIOS_DEV
.39628c	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396290	b0 09		bcs $39629b	                    BCS ret_success
.396292	22 ac 5b 39	jsl $395bac	                    JSL FDC_Motor_Off
.396296	28		plp		                    PLP                         ; Return the failure
.396297	2b		pld		                    PLD
.396298	ab		plb		                    PLB
.396299	18		clc		                    CLC
.39629a	6b		rtl		                    RTL
.39629b	22 ac 5b 39	jsl $395bac	ret_success         JSL FDC_Motor_Off
.39629f	e2 20		sep #$20	                SEP #$20        ; set A short
.3962a1	a9 00		lda #$00	                    LDA #0
.3962a3	85 00		sta $0320	                    STA BIOS_STATUS
.3962a5	28		plp		                    PLP
.3962a6	2b		pld		                    PLD
.3962a7	ab		plb		                    PLB
.3962a8	38		sec		                    SEC
.3962a9	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3962aa					FDC_VBR_BEGIN
>3962aa	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3962ad	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3962b5	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3962b7	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3962b8	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3962ba	02				num_fat             .byte 2                 ; Number of FATs
>3962bb	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3962bd	40 0b				total_sectors       .word 2880              ; Total sectors
>3962bf	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3962c0	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3962c2	12 00				sec_per_track       .word 18                ; Sectors per track
>3962c4	02 00				num_head            .word 2                 ; Number of heads
>3962c6	00 00 00 00			ignore2             .dword 0
>3962ca	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>3962ce	00 00				ignore3             .word 0
>3962d0	29				boot_signature      .byte $29
>3962d1	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>3962d5	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3962dd	20 20 20
>3962e0	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3962e8	80 40		bra $39632a	                    BRA vbr_start
>3962ea					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.39632a					vbr_start
.39632a	c2 20		rep #$20	                REP #$20        ; set A long
.39632c	a9 40 e3	lda #$e340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39632f	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396333	a9 37 00	lda #$0037	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396336	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.39633a	22 20 55 39	jsl $395520	                    JSL IF_RUN              ; And try to execute the binary file
.39633e	b0 0c		bcs $39634c	                    BCS lock                ; If it returned success... lock up... I guess?
.396340					error
.396340	e2 20		sep #$20	                SEP #$20        ; set A short
.396342	4b		phk		                    PHK                     ; Otherwise, print an error message
.396343	ab		plb		                    PLB
.396344	62 08 00	per $39634f	                    PER message
.396347	fa		plx		                    PLX
.396348	22 1c 10 38	jsl $38101c	                    JSL PUTS
.39634c	ea		nop		lock                NOP                     ; And lock up
.39634d	80 fd		bra $39634c	                    BRA lock
>39634f	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396357	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396367	65 20 62 69 6e 61 72 79 2e 0d 00
.396372					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396372					IDE_TEST
.396372	08		php		                PHP
.396373	c2 20		rep #$20	                REP #$20        ; set A long
.396375	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.396378	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39637c	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.39637f	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396383	22 a0 64 39	jsl $3964a0	                JSL IDE_IDENTIFY
.396387	b0 03		bcs $39638c	                BCS id_ok
.396389	82 ab 00	brl $396437	                BRL done
.39638c					id_ok
.39638c	c2 10		rep #$10	                REP #$10        ; set X long
.39638e	e2 20		sep #$20	                SEP #$20        ; set A short
.396390	a0 28 00	ldy #$0028	                LDY #40
.396393	a2 36 00	ldx #$0036	                LDX #27*2
.396396	bf 01 e3 37	lda $37e301,x	pr_model        LDA DOS_SECTOR+1,X
.39639a	22 18 10 38	jsl $381018	                JSL PUTC
.39639e	bf 00 e3 37	lda $37e300,x	                LDA DOS_SECTOR,X
.3963a2	22 18 10 38	jsl $381018	                JSL PUTC
.3963a6	e8		inx		                INX
.3963a7	e8		inx		                INX
.3963a8	88		dey		                DEY
.3963a9	88		dey		                DEY
.3963aa	d0 ea		bne $396396	                BNE pr_model
.3963ac	c2 10		rep #$10	                REP #$10        ; set X long
.3963ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3963b0	a0 14 00	ldy #$0014	                LDY #20
.3963b3	a2 14 00	ldx #$0014	                LDX #10*2
.3963b6	bf 01 e3 37	lda $37e301,x	pr_serial       LDA DOS_SECTOR+1,X
.3963ba	22 18 10 38	jsl $381018	                JSL PUTC
.3963be	bf 00 e3 37	lda $37e300,x	                LDA DOS_SECTOR,X
.3963c2	22 18 10 38	jsl $381018	                JSL PUTC
.3963c6	e8		inx		                INX
.3963c7	e8		inx		                INX
.3963c8	88		dey		                DEY
.3963c9	88		dey		                DEY
.3963ca	d0 ea		bne $3963b6	                BNE pr_serial
.3963cc	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3963d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3963d2	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.3963d5	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3963d9	a9 00 00	lda #$0000	                LDA #0
.3963dc	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3963e0	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.3963e3	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3963e7	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.3963ea	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3963ee	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.3963f1	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.3963f4	9f 00 e3 37	sta $37e300,x	init_loop       STA DOS_SECTOR,X
.3963f8	e8		inx		                INX
.3963f9	e8		inx		                INX
.3963fa	e0 00 02	cpx #$0200	                CPX #512
.3963fd	d0 f5		bne $3963f4	                BNE init_loop
.3963ff	22 bf 65 39	jsl $3965bf	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396403	b0 06		bcs $39640b	                BCS read_sect1
.396405	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396409	80 2c		bra $396437	                BRA done
.39640b	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.39640e	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396412	a9 00 00	lda #$0000	                LDA #0
.396415	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396419	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS
.39641c	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396420	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.396423	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396427	22 2e 65 39	jsl $39652e	                JSL IDE_GETBLOCK        ; Attempt to read the block
.39642b	b0 06		bcs $396433	                BCS all_ok
.39642d	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396431	80 04		bra $396437	                BRA done
.396433					all_ok
.396433	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396437	28		plp		done            PLP
.396438	6b		rtl		                RTL
.396439					IDE_INIT
.396439	e2 20		sep #$20	                SEP #$20        ; set A short
.39643b	20 5c 64	jsr $39645c	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.39643e	a9 00		lda #$00	              LDA #$00
.396440	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396444	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396448	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.39644c	a9 01		lda #$01	              LDA #$01
.39644e	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396452	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396454	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396458	20 7a 64	jsr $39647a	              JSR IDE_DRV_READY_NOTBUSY
.39645b	6b		rtl		              RTL
.39645c					IDE_DRIVE_BSY
.39645c	08		php		                PHP
.39645d	e2 20		sep #$20	                SEP #$20        ; set A short
.39645f	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396463	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396465	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396467	f0 f6		beq $39645f	                BEQ loop
.396469	28		plp		                PLP
.39646a	60		rts		                RTS
.39646b					IDE_DRIVE_READY
.39646b	08		php		                PHP
.39646c	e2 20		sep #$20	                SEP #$20        ; set A short
.39646e	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396472	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396474	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396476	d0 f6		bne $39646e	                BNE loop
.396478	28		plp		                PLP
.396479	60		rts		                RTS
.39647a					IDE_DRV_READY_NOTBUSY
.39647a	08		php		                PHP
.39647b	e2 20		sep #$20	                SEP #$20        ; set A short
.39647d	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396481	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396483	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396485	d0 f6		bne $39647d	                BNE loop                            ; No: keep waiting
.396487	28		plp		ret_success     PLP                                 ; Return success
.396488	38		sec		                SEC
.396489	60		rts		                RTS
.39648a	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.39648e	28		plp		                PLP                                 ; Return failure
.39648f	18		clc		                CLC
.396490	60		rts		                RTS
.396491					IDE_NOT_DRQ
.396491	08		php		                PHP
.396492	e2 20		sep #$20	                SEP #$20        ; set A short
.396494	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396498	29 08		and #$08	                AND #IDE_STAT_DRQ
.39649a	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.39649c	d0 f6		bne $396494	                BNE loop                ; No: keep waiting
.39649e	28		plp		                PLP
.39649f	60		rts		                RTS
.3964a0					IDE_IDENTIFY
.3964a0	5a		phy		                PHY
.3964a1	8b		phb		                PHB
.3964a2	0b		phd		                PHD
.3964a3	08		php		                PHP
.3964a4	48		pha		                PHA             ; begin setdbr macro
.3964a5	08		php		                PHP
.3964a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3964a8	a9 00		lda #$00	                LDA #0
.3964aa	48		pha		                PHA
.3964ab	ab		plb		                PLB
.3964ac	28		plp		                PLP
.3964ad	68		pla		                PLA             ; end setdbr macro
.3964ae	48		pha		                PHA             ; begin setdp macro
.3964af	08		php		                PHP
.3964b0	c2 20		rep #$20	                REP #$20        ; set A long
.3964b2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3964b5	5b		tcd		                TCD
.3964b6	28		plp		                PLP
.3964b7	68		pla		                PLA             ; end setdp macro
.3964b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3964ba	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3964bd	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3964bf	29 07		and #$07	                AND #$07
.3964c1	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.3964c3	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3964c7	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3964ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3964cc	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.3964ce	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3964d2	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3964d6	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3964da	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.3964de	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.3964e0	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.3964e4	f0 29		beq $39650f	                BEQ no_media                    ; If 0: there is no drive
.3964e6	20 5c 64	jsr $39645c	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.3964e9	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3964ec	90 2d		bcc $39651b	                BCC ret_failure                 ; If an error occurred, return it
.3964ee	c2 30		rep #$30	                REP #$30        ; set A&X long
.3964f0	a0 00 00	ldy #$0000	                LDY #0
.3964f3	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.3964f7	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.3964f9	c8		iny		                INY                             ; Move to the next position
.3964fa	c8		iny		                INY
.3964fb	c0 00 02	cpy #$0200	                CPY #512
.3964fe	d0 f3		bne $3964f3	                BNE read_loop
.396500					ret_success
.396500	e2 20		sep #$20	                SEP #$20        ; set A short
.396502	a9 00		lda #$00	                LDA #0
.396504	85 00		sta $0320	                STA BIOS_STATUS
.396506	8d 06 03	sta $0306	                STA @w FDC_ST0
.396509	28		plp		                PLP                             ; Return success
.39650a	2b		pld		                PLD
.39650b	ab		plb		                PLB
.39650c	7a		ply		                PLY
.39650d	38		sec		                SEC
.39650e	6b		rtl		                RTL
.39650f					no_media
.39650f	e2 20		sep #$20	                SEP #$20        ; set A short
.396511	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396513	80 0a		bra $39651f	                BRA pass_failure
.396515					not_ata
.396515	e2 20		sep #$20	                SEP #$20        ; set A short
.396517	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396519	80 04		bra $39651f	                BRA pass_failure
.39651b					ret_failure
.39651b	e2 20		sep #$20	                SEP #$20        ; set A short
.39651d	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39651f	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396521	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396525	8d 06 03	sta $0306	                STA @w FDC_ST0
.396528	28		plp		                PLP
.396529	2b		pld		                PLD
.39652a	ab		plb		                PLB
.39652b	7a		ply		                PLY
.39652c	18		clc		                CLC
.39652d	6b		rtl		                RTL
.39652e					IDE_GETBLOCK
.39652e	5a		phy		                PHY
.39652f	8b		phb		                PHB
.396530	0b		phd		                PHD
.396531	08		php		                PHP
.396532	48		pha		                PHA             ; begin setdbr macro
.396533	08		php		                PHP
.396534	e2 20		sep #$20	                SEP #$20        ; set A short
.396536	a9 00		lda #$00	                LDA #0
.396538	48		pha		                PHA
.396539	ab		plb		                PLB
.39653a	28		plp		                PLP
.39653b	68		pla		                PLA             ; end setdbr macro
.39653c	48		pha		                PHA             ; begin setdp macro
.39653d	08		php		                PHP
.39653e	c2 20		rep #$20	                REP #$20        ; set A long
.396540	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396543	5b		tcd		                TCD
.396544	28		plp		                PLP
.396545	68		pla		                PLA             ; end setdp macro
.396546	e2 20		sep #$20	                SEP #$20        ; set A short
.396548	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39654b	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.39654d	29 07		and #$07	                AND #$07
.39654f	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396551	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396555	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396558	e2 20		sep #$20	                SEP #$20        ; set A short
.39655a	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.39655c	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396560	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396562	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396566	a5 03		lda $0323	                LDA BIOS_LBA+1
.396568	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.39656c	a5 04		lda $0324	                LDA BIOS_LBA+2
.39656e	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396572	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396574	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396578	ea		nop		                NOP                             ; Wait about 500ns
.396579	ea		nop		                NOP
.39657a	ea		nop		                NOP
.39657b	ea		nop		                NOP
.39657c	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39657f	90 2b		bcc $3965ac	                BCC ret_failure                 ; If an error occurred, return it
.396581	e2 20		sep #$20	                SEP #$20        ; set A short
.396583	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396587	a0 00 00	ldy #$0000	                LDY #0
.39658a	c2 20		rep #$20	                REP #$20        ; set A long
.39658c	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396590	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396592	c8		iny		                INY                             ; Move to the next position
.396593	c8		iny		                INY
.396594	c0 00 02	cpy #$0200	                CPY #512
.396597	d0 f3		bne $39658c	                BNE read_loop
.396599	ea		nop		                NOP                             ; Wait about 500ns
.39659a	ea		nop		                NOP
.39659b	ea		nop		                NOP
.39659c	ea		nop		                NOP
.39659d					ret_success
.39659d	e2 20		sep #$20	                SEP #$20        ; set A short
.39659f	a9 00		lda #$00	                LDA #0
.3965a1	85 00		sta $0320	                STA BIOS_STATUS
.3965a3	8d 06 03	sta $0306	                STA @w FDC_ST0
.3965a6	28		plp		                PLP                             ; Return success
.3965a7	2b		pld		                PLD
.3965a8	ab		plb		                PLB
.3965a9	7a		ply		                PLY
.3965aa	38		sec		                SEC
.3965ab	6b		rtl		                RTL
.3965ac					ret_failure
.3965ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ae	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3965b2	8d 06 03	sta $0306	                STA @w FDC_ST0
.3965b5	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3965b7	85 00		sta $0320	                STA BIOS_STATUS
.3965b9	28		plp		                PLP
.3965ba	2b		pld		                PLD
.3965bb	ab		plb		                PLB
.3965bc	7a		ply		                PLY
.3965bd	18		clc		                CLC
.3965be	6b		rtl		                RTL
.3965bf					IDE_PUTBLOCK
.3965bf	5a		phy		                PHY
.3965c0	8b		phb		                PHB
.3965c1	0b		phd		                PHD
.3965c2	08		php		                PHP
.3965c3	48		pha		                PHA             ; begin setdbr macro
.3965c4	08		php		                PHP
.3965c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3965c7	a9 00		lda #$00	                LDA #0
.3965c9	48		pha		                PHA
.3965ca	ab		plb		                PLB
.3965cb	28		plp		                PLP
.3965cc	68		pla		                PLA             ; end setdbr macro
.3965cd	48		pha		                PHA             ; begin setdp macro
.3965ce	08		php		                PHP
.3965cf	c2 20		rep #$20	                REP #$20        ; set A long
.3965d1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3965d4	5b		tcd		                TCD
.3965d5	28		plp		                PLP
.3965d6	68		pla		                PLA             ; end setdp macro
.3965d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3965d9	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3965dc	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3965de	29 07		and #$07	                AND #$07
.3965e0	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3965e2	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3965e6	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3965e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3965eb	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3965ed	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3965f1	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3965f3	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3965f7	a5 03		lda $0323	                LDA BIOS_LBA+1
.3965f9	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3965fd	a5 04		lda $0324	                LDA BIOS_LBA+2
.3965ff	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396603	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396605	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396609	ea		nop		                NOP                             ; Wait about 500ns
.39660a	ea		nop		                NOP
.39660b	ea		nop		                NOP
.39660c	ea		nop		                NOP
.39660d	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396610	90 33		bcc $396645	                BCC ret_failure                 ; If an error occurred, return it
.396612	c2 30		rep #$30	                REP #$30        ; set A&X long
.396614	a0 00 00	ldy #$0000	                LDY #0
.396617	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396619	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.39661d	c8		iny		                INY                             ; Move to the next position
.39661e	c8		iny		                INY
.39661f	c0 00 02	cpy #$0200	                CPY #512
.396622	d0 f3		bne $396617	                BNE read_loop
.396624	ea		nop		                NOP                             ; Wait about 500ns
.396625	ea		nop		                NOP
.396626	ea		nop		                NOP
.396627	ea		nop		                NOP
.396628	20 7a 64	jsr $39647a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39662b	90 18		bcc $396645	                BCC ret_failure                 ; If an error occurred, return it
.39662d	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396631	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396634	d0 0f		bne $396645	                BNE ret_failure                 ; If error: return failure
.396636					ret_success
.396636	e2 20		sep #$20	                SEP #$20        ; set A short
.396638	a9 00		lda #$00	                LDA #0
.39663a	85 00		sta $0320	                STA BIOS_STATUS
.39663c	8d 06 03	sta $0306	                STA @w FDC_ST0
.39663f	28		plp		                PLP                             ; Return success
.396640	2b		pld		                PLD
.396641	ab		plb		                PLB
.396642	7a		ply		                PLY
.396643	38		sec		                SEC
.396644	6b		rtl		                RTL
.396645					ret_failure
.396645	e2 20		sep #$20	                SEP #$20        ; set A short
.396647	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.39664b	8d 06 03	sta $0306	                STA @w FDC_ST0
.39664e	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396650	85 00		sta $0320	                STA BIOS_STATUS
.396652	28		plp		                PLP
.396653	2b		pld		                PLD
.396654	ab		plb		                PLB
.396655	7a		ply		                PLY
.396656	18		clc		                CLC
.396657	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396658					KERNEL_DATA
>396658	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396660	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396670	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396680	58 20 0d
>396683	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39668b	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39669b	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3966ab	20 20 0d
>3966ae	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3966b6	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3966c6	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>3966d6	20 20 0d
>3966d9	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3966e1	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3966f1	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396701	20 20 0d
>396704	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>39670c	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>39671c	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>39672c	20 20 0d
>39672f	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396737	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396747	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396757	0d
>396758	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396760	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396770	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>39677d	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+655 (2020-05-30)"
>396785	6c 70 68 61 2b 36 35 35 20 28 32 30 32 30 2d 30
>396795	35 2d 33 30 29

;******  Return to file: src\kernel.asm

>39679a	0d 00				                .text $0D,$00
.39679c					old_pc_style_stat
>39679c	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3967a4	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>3967b4	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3967c4	fd fd
>3967c6	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3967ce	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3967de	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3967ee	fd fd
>3967f0	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3967f8	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396808	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396818	fd fd
>39681a	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396822	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396832	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396842	fd fd
>396844	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39684c	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39685c	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39686c	fd fd
>39686e	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396872	00 00 80 ff			                .text $00, $00, $80, $FF
>396876	00 80 00 ff			                .text $00, $80, $00, $FF
>39687a	80 00 00 ff			                .text $80, $00, $00, $FF
>39687e	00 80 80 ff			                .text $00, $80, $80, $FF
>396882	80 80 00 ff			                .text $80, $80, $00, $FF
>396886	80 00 80 ff			                .text $80, $00, $80, $FF
>39688a	80 80 80 ff			                .text $80, $80, $80, $FF
>39688e	00 45 ff ff			                .text $00, $45, $FF, $FF
>396892	13 45 8b ff			                .text $13, $45, $8B, $FF
>396896	00 00 20 ff			                .text $00, $00, $20, $FF
>39689a	00 20 00 ff			                .text $00, $20, $00, $FF
>39689e	20 00 00 ff			                .text $20, $00, $00, $FF
>3968a2	20 20 20 ff			                .text $20, $20, $20, $FF
>3968a6	40 40 40 ff			                .text $40, $40, $40, $FF
>3968aa	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3968ae	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>3968b2	00 00 80 ff			                .text $00, $00, $80, $FF
>3968b6	00 80 00 ff			                .text $00, $80, $00, $FF
>3968ba	80 00 00 ff			                .text $80, $00, $00, $FF
>3968be	00 20 20 ff			                .text $00, $20, $20, $FF
>3968c2	20 20 00 ff			                .text $20, $20, $00, $FF
>3968c6	20 00 20 ff			                .text $20, $00, $20, $FF
>3968ca	20 20 20 ff			                .text $20, $20, $20, $FF
>3968ce	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3968d2	13 45 8b ff			                .text $13, $45, $8B, $FF
>3968d6	00 00 20 ff			                .text $00, $00, $20, $FF
>3968da	00 20 00 ff			                .text $00, $20, $00, $FF
>3968de	40 00 00 ff			                .text $40, $00, $00, $FF
>3968e2	10 10 10 ff			                .text $10, $10, $10, $FF
>3968e6	40 40 40 ff			                .text $40, $40, $40, $FF
>3968ea	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3968ee	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3968f6	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396906	00
>396907	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>39690f	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39691f	00
>396920	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396928	20 45 78 65 63 75 74 65 64 2e 0d 00
>396934	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>39693c	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>39694c	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396954	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396964	64 2e 2e 2e 0d 00
>39696a	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396972	20 50 72 65 73 65 6e 74 0d 00
>39697c	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396984	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>396994	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3969a4	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3969ac	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3969b8	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3969c0	45 44 2e 00
>3969c4	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3969cc	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3969d9	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3969e1	50 72 65 73 65 6e 74 3a 00
>3969ea	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>3969f2	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>396a02	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>396a0f	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>396a17	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>396a27	72 64 2e 00
>396a2b	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>396a33	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396a43	49 44 45 20 64 72 69 76 65 2e 00
>396a4e	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>396a56	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396a66	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>396a74	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy...", 13
>396a7c	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 0d 00
>396a8c	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>396a94	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>396a9c	52 4f 52 00
>396aa0	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>396aa8	38 39 41 42 43 44 45 46 00
>396ab1					.align 256
>396b00	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396b08	37 38 39 30 2d 3d 08 09
>396b10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396b18	6f 70 5b 5d 0d 00 61 73
>396b20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396b28	27 60 00 5c 7a 78 63 76
>396b30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396b38	00 20 00 00 00 00 00 00
>396b40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396b48	11 00 00 9d 00 1d 00 00
>396b50	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396b58	00 00 00 00 00 00 00 00
>396b60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396b68	00 00 00 00 00 00 00 00
>396b70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396b78	00 00 00 00 00 00 00 00
>396b80	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>396b88	26 2a 28 29 5f 2b 08 09
>396b90	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>396b98	4f 50 7b 7d 0d 00 41 53
>396ba0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>396ba8	22 7e 00 5c 5a 58 43 56
>396bb0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396bb8	00 20 00 00 00 00 00 00
>396bc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396bc8	00 00 00 00 00 00 00 00
>396bd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396bd8	00 00 00 00 00 00 00 00
>396be0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396be8	00 00 00 00 00 00 00 00
>396bf0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396bf8	00 00 00 00 00 00 00 00
>396c00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396c08	37 38 39 30 2d 3d 08 09
>396c10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396c18	6f 70 5b 5d 0d 00 61 73
>396c20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>396c28	27 60 00 5c 7a 78 03 76
>396c30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396c38	00 20 00 00 00 00 00 00
>396c40	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396c48	00 00 00 00 00 00 00 00
>396c50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396c58	00 00 00 00 00 00 00 00
>396c60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396c68	00 00 00 00 00 00 00 00
>396c70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396c78	00 00 00 00 00 00 00 00
>396c80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396c88	37 38 39 30 2d 3d 08 09
>396c90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396c98	6f 70 5b 5d 0d 00 61 73
>396ca0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396ca8	27 60 00 5c 7a 78 63 76
>396cb0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396cb8	00 20 00 00 00 00 00 00
>396cc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396cc8	00 00 00 00 00 00 00 00
>396cd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396cd8	00 00 00 00 00 00 00 00
>396ce0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396ce8	00 00 00 00 00 00 00 00
>396cf0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396cf8	00 00 00 00 00 00 00 00
>396d00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396d08	37 38 39 30 2d 3d 08 09
>396d10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396d18	6f 70 5b 5d 0d 00 61 73
>396d20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396d28	27 60 00 5c 7a 78 63 76
>396d30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396d38	00 20 00 00 00 00 00 00
>396d40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396d48	00 00 00 00 00 00 00 00
>396d50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396d58	00 00 00 00 00 00 00 00
>396d60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396d68	00 00 00 00 00 00 00 00
>396d70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396d78	00 00 00 00 00 00 00 00
>396d80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>396d88	00 00 00 00 00 00 00 00
>396d90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>396d98	00 00 00 00 00 00 00 00
>396da0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>396da8	00 00 00 00 00 00 00 00
>396db0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>396db8	00 00 00 00 00 00 00 00
>396dc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396dc8	11 00 00 9d 00 1d 00 00
>396dd0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396dd8	00 00 00 00 00 00 00 00
>396de0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396de8	00 00 00 00 00 00 00 00
>396df0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396df8	00 00 00 00 00 00 00 00
>396e00					.align 256
>396e00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>396e08	34 37 3a 3d 3f 41 44 46
>396e10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>396e18	57 58 5a 5b 5d 5e 60 61
>396e20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>396e28	6d 6f 70 71 72 73 75 76
>396e30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>396e38	80 81 82 83 84 85 86 87
>396e40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>396e48	8f 90 91 92 93 93 94 95
>396e50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>396e58	9d 9e 9e 9f a0 a1 a2 a2
>396e60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>396e68	a9 aa ab ab ac ad ae ae
>396e70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>396e78	b5 b5 b6 b7 b7 b8 b9 b9
>396e80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>396e88	bf c0 c0 c1 c2 c2 c3 c4
>396e90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>396e98	c9 ca ca cb cb cc cd cd
>396ea0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>396ea8	d2 d3 d4 d4 d5 d5 d6 d6
>396eb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>396eb8	db dc dc dd de de df df
>396ec0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>396ec8	e4 e4 e5 e5 e6 e6 e7 e7
>396ed0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>396ed8	ec ec ed ed ee ee ef ef
>396ee0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>396ee8	f4 f4 f5 f5 f6 f6 f7 f7
>396ef0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>396ef8	fb fc fc fd fd fe fe ff
>396f00					.align 256
>396f00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>396f08	25 27 2a 2c 2e 30 32 34
>396f10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>396f18	44 46 47 49 4a 4c 4d 4f
>396f20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>396f28	5b 5c 5d 5e 60 61 62 63
>396f30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>396f38	6d 6e 70 71 72 73 74 75
>396f40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>396f48	7e 7f 80 81 82 83 84 84
>396f50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>396f58	8d 8e 8e 8f 90 91 92 93
>396f60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>396f68	9a 9b 9c 9d 9e 9f 9f a0
>396f70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>396f78	a7 a8 a9 aa aa ab ac ad
>396f80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>396f88	b3 b4 b5 b6 b6 b7 b8 b8
>396f90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>396f98	bf bf c0 c1 c2 c2 c3 c4
>396fa0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>396fa8	ca ca cb cc cc cd ce ce
>396fb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>396fb8	d4 d5 d6 d6 d7 d7 d8 d9
>396fc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>396fc8	de df e0 e0 e1 e1 e2 e3
>396fd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>396fd8	e8 e9 e9 ea ea eb ec ec
>396fe0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>396fe8	f1 f2 f3 f3 f4 f4 f5 f5
>396ff0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>396ff8	fb fb fc fc fd fd fe ff
>397000					.align 256
>397000	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397008	83 dd ce 39 cd c5 3b 15
>397010	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397018	87 12 31 65 89 27 88 42
>397020	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397028	94 ce 56 ec fe da 58 c9
>397030	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397038	d0 10 2c b2 4b ea 32 61
>397040	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397048	a1 e6 ca 2d b3 ce b0 79
>397050	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397058	5f e3 fb bd 15 2e be f5
>397060	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397068	8d 8f 2c 80 0a 5e 99 36
>397070	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397078	13 52 44 2f e3 ef 44 a2
>397080	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397088	be 23 02 58 0a 52 5e b4
>397090	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397098	d5 cf 3e df c4 9e da bb
>3970a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3970a8	77 7d b1 3b 4a 68 35 6e
>3970b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3970b8	b5 8f 44 63 55 6f e1 50
>3970c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3970c8	57 74 b9 bd 05 14 50 eb
>3970d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3970d8	44 bc ec db 22 58 fc be
>3970e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3970e8	24 aa 82 11 5c 9f 43 4d
>3970f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3970f8	3e 3d 66 7e 0a 1c 6b 74
>397100					.align 16
>397100	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397108	01 01 01 00 00 00 00 00
>397110	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397118	ff ff ff 01 00 00 00 00
>397120	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397128	01 55 ff ff 01 00 00 00
>397130	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397138	ff ff ff ff 01 00 00 00
>397140	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397148	ff ff 01 ff ff 01 00 00
>397150	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397158	01 ff ff 01 ff 01 00 00
>397160	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397168	ff 01 ff ff ff 01 00 00
>397170	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397178	ff ff ff ff ff 01 01 00
>397180	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397188	ff ff ff ff 01 ff ff 01
>397190	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397198	ff ff ff ff ff ff ff 01
>3971a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3971a8	55 55 01 ff ff 55 01 00
>3971b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3971b8	01 01 55 ff 55 01 00 00
>3971c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3971c8	01 55 55 55 01 00 00 00
>3971d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3971d8	01 55 55 01 00 00 00 00
>3971e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3971e8	00 01 01 00 00 00 00 00
>3971f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3971f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 22 65 3a 5c 34 4b 3a		.binary "binaries/basic816.bin"
>3a0008	5c 73 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 53 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a a9 80 00 8f 08
>3a0168	01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f 0c
>3a0178	01 00 85 08 a5 0a 69 00 00 85 0a e2 20 a0 00 00
>3a0188	a2 00 00 b7 08 9f 00 4f 00 e8 c8 c0 80 00 d0 f3
>3a0198	ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca
>3a01a8	10 ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00 a9
>3a01b8	34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>3a01c8	00 00 a9 00 9f 10 f0 3a e8 e0 12 00 d0 f6 a9 80
>3a01d8	8f b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2 20
>3a01e8	48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f
>3a01f8	00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22
>3a0208	3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8
>3a0218	68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20
>3a0228	68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20 48
>3a0238	a9 00 08 5b 68 28 e2 20 a5 b4 1a 85 b4 cf 13 00
>3a0248	00 90 05 20 14 00 64 b4 2b 28 60 da 5a 0b 08 08
>3a0258	c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 8f b3 08
>3a0268	00 af b2 08 00 29 20 f0 07 af b3 08 00 20 28 00
>3a0278	af b2 08 00 29 80 f0 07 af b3 08 00 20 e5 01 af
>3a0288	b2 08 00 29 40 f0 14 af b3 08 00 20 00 02 af b3
>3a0298	08 00 c9 0d d0 05 a9 0a 20 00 02 28 2b 7a fa 60
>3a02a8	08 e2 20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60
>3a02b8	08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 d2 02
>3a02c8	68 29 ff 00 20 d2 02 68 28 60 08 c2 20 48 e2 20
>3a02d8	48 4a 4a 4a 4a 20 e9 02 68 20 e9 02 c2 20 68 28
>3a02e8	60 08 c2 30 da 29 0f 00 aa bf 00 d0 3a 20 18 00
>3a02f8	fa 28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b
>3a0308	b0 04 c9 61 b0 03 28 18 60 28 38 60 08 e2 20 c9
>3a0318	3a b0 04 c9 30 b0 03 28 18 60 28 38 60 08 e2 20
>3a0328	c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b
>3a0338	c9 47 b0 04 c9 41 b0 03 28 18 60 28 38 60 08 e2
>3a0348	20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61 b0
>3a0358	0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30 80 f9
>3a0368	29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9 61
>3a0378	90 02 29 df 28 60 08 e2 20 c2 10 bd 00 00 f0 09
>3a0388	20 6f 03 9d 00 00 e8 80 f2 28 60 08 0b 08 c2 20
>3a0398	48 a9 00 08 5b 68 28 c2 20 48 06 21 26 23 a5 21
>3a03a8	85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18 a5
>3a03b8	21 65 0c 85 21 a5 23 65 0e 85 23 68 2b 28 60 08
>3a03c8	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 8f
>3a03d8	12 01 00 a9 0a 00 8f 10 01 00 af 14 01 00 85 21
>3a03e8	64 23 af 16 01 00 85 27 64 29 e2 20 a9 00 85 25
>3a03f8	85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0408	28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f 10 01 00
>3a0418	af 14 01 00 85 21 64 23 af 16 01 00 85 27 64 29
>3a0428	e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5 21
>3a0438	d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08 e2
>3a0448	20 a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9 00 08
>3a0458	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0468	20 4d 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 02 d0
>3a0478	02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0488	04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a0498	d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23 d0
>3a04a8	21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a04b8	04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a04c8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a04d8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a04e8	08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0 29 a5 23
>3a04f8	d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9 00 08 5b
>3a0508	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a0518	4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a0528	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a0538	18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b
>3a0548	68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00 c9 26
>3a0558	f0 44 e2 20 a7 00 20 14 03 90 76 20 93 03 38 e9
>3a0568	30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69 00 00
>3a0578	85 23 20 d8 1a 80 db 08 c2 20 48 a9 00 08 5b 68
>3a0588	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a0598	18 e2 20 dc d2 08 20 d8 1a a7 00 c9 48 f0 04 c9
>3a05a8	68 d0 d4 20 d8 1a e2 20 a7 00 20 25 03 90 22 20
>3a05b8	46 03 c2 20 06 21 26 23 06 21 26 23 06 21 26 23
>3a05c8	06 21 26 23 29 ff 00 18 65 21 85 21 20 d8 1a 80
>3a05d8	d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8 e2 20 b7
>3a05e8	18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>3a05f8	ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0608	68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85 02 20 f9
>3a0618	1a a7 00 20 14 03 90 0c 20 3e 05 c2 20 a5 21 85
>3a0628	d5 20 f9 1a c2 20 a5 00 85 18 e2 20 a5 02 85 1a
>3a0638	20 4c 06 e2 20 20 bd 06 c9 00 f0 05 20 46 08 80
>3a0648	f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a 85 02 a2
>3a0658	00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>3a0668	c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>3a0678	10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>3a0688	1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>3a0698	00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 d8 1a 80
>3a06a8	b3 a7 00 c9 3a d0 03 20 d8 1a a9 03 85 1c a9 8e
>3a06b8	20 46 08 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a06c8	28 e2 20 a9 7f 85 1c c2 10 20 fb 07 a5 1c d0 03
>3a06d8	4c 60 07 c2 20 a5 18 85 00 e2 20 a5 1a 85 02 c2
>3a06e8	20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e f0
>3a06f8	d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05 20 82
>3a0708	07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00 c5 18 d0
>3a0718	08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04 20 51 3d
>3a0728	b0 09 e2 20 20 92 07 c9 00 d0 11 c2 20 a5 00 85
>3a0738	04 e2 20 a5 02 85 06 20 d8 1a 80 a9 c9 81 d0 18
>3a0748	20 dc 05 c9 00 f0 14 89 80 10 0b 20 e7 08 c9 30
>3a0758	f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>3a0768	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a0778	ff 00 20 4d 18 e2 20 dc d2 08 08 e2 20 20 d8 1a
>3a0788	a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da 5a
>3a0798	08 c2 20 48 a9 00 08 5b 68 28 a9 11 09 85 08 e2
>3a07a8	20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0
>3a07b8	26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2 20
>3a07c8	a9 3a 85 0e e2 10 a0 00 b7 00 20 6f 03 d7 0c d0
>3a07d8	0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2 30
>3a07e8	18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a07f8	e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a0808	c2 30 a9 11 09 85 08 a9 3a 00 85 0a 64 0c e2 20
>3a0818	a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02 85
>3a0828	0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>3a0838	85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60 08 0b
>3a0848	08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>3a0858	18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>3a0868	10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>3a0878	08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>3a0888	28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 11 09 aa
>3a0898	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a08a8	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 8a 08
>3a08b8	bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>3a08c8	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a08d8	ab 68 28 c2 30 20 8a 08 bd 04 00 2b ab 28 60 08
>3a08e8	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a08f8	a9 3a 48 ab 68 28 e2 20 c2 10 20 8a 08 bd 00 00
>3a0908	c2 20 29 f0 00 2b ab 28 60 03 01 10 d0 06 21 00
>3a0918	00 03 01 12 d0 45 21 00 00 02 01 14 d0 53 21 00
>3a0928	00 02 01 16 d0 6c 21 00 00 02 03 18 d0 7f 21 00
>3a0938	00 00 01 1c d0 00 00 00 00 04 01 1e d0 c1 21 00
>3a0948	00 04 01 20 d0 f7 21 00 00 04 01 22 d0 dc 21 00
>3a0958	00 05 03 24 d0 b0 21 00 00 06 03 28 d0 92 21 00
>3a0968	00 07 02 2c d0 a1 21 00 00 ff 01 2f d0 00 00 00
>3a0978	00 40 01 31 d0 00 00 00 00 20 03 33 d0 4a 2f 00
>3a0988	00 20 05 37 d0 4f 33 00 00 20 03 3d d0 9a 32 00
>3a0998	00 20 04 41 d0 3a 32 00 00 20 03 46 d0 31 32 00
>3a09a8	00 20 02 4a d0 c9 31 00 00 50 04 4d d0 00 00 00
>3a09b8	00 50 04 52 d0 00 00 00 00 20 05 57 d0 0c 31 00
>3a09c8	00 20 06 5d d0 85 31 00 00 20 03 64 d0 61 2f 00
>3a09d8	00 50 02 68 d0 00 00 00 00 50 04 6b d0 00 00 00
>3a09e8	00 20 04 70 d0 55 30 00 00 20 02 75 d0 5b 2f 00
>3a09f8	00 20 04 78 d0 5e 2f 00 00 50 05 7d d0 00 00 00
>3a0a08	00 50 05 83 d0 00 00 00 00 20 04 89 d0 58 2f 00
>3a0a18	00 20 03 8e d0 90 32 00 00 20 04 92 d0 2b 2f 00
>3a0a28	00 20 04 97 d0 bb 2e 00 00 20 05 9c d0 51 2e 00
>3a0a38	00 20 05 a2 d0 de 2d 00 00 20 03 a8 d0 da 2d 00
>3a0a48	00 20 04 ac d0 bb 2c 00 00 20 04 b1 d0 cd 2d 00
>3a0a58	00 20 07 b6 d0 d1 2d 00 00 20 03 be d0 0e 2c 00
>3a0a68	00 20 04 c2 d0 77 2b 00 00 04 02 c7 d0 4a 22 00
>3a0a78	00 04 02 ca d0 2d 22 00 00 04 02 cd d0 12 22 00
>3a0a88	00 30 01 d0 d0 e9 34 00 00 30 03 d2 d0 03 39 00
>3a0a98	00 30 04 d6 d0 53 39 00 00 30 05 db d0 e4 39 00
>3a0aa8	00 30 05 e1 d0 96 39 00 00 30 04 e7 d0 23 3a 00
>3a0ab8	00 30 03 ec d0 78 3a 00 00 30 03 f0 d0 bd 3a 00
>3a0ac8	00 30 03 f4 d0 46 3b 00 00 30 03 f8 d0 cf 3b 00
>3a0ad8	00 30 03 fc d0 ff 3b 00 00 30 04 00 d1 72 38 00
>3a0ae8	00 30 03 05 d1 11 38 00 00 30 04 09 d1 c0 37 00
>3a0af8	00 30 03 0e d1 6a 37 00 00 30 05 12 d1 a1 36 00
>3a0b08	00 30 06 18 d1 c0 35 00 00 30 04 1f d1 0b 35 00
>3a0b18	00 10 03 24 d1 8d 3c 00 00 10 03 28 d1 58 3c 00
>3a0b28	00 10 04 2c d1 79 47 00 00 10 04 31 d1 a4 3c 00
>3a0b38	00 10 03 36 d1 77 44 00 00 20 05 3a d1 4b 46 00
>3a0b48	00 10 04 40 d1 26 47 00 00 20 05 45 d1 30 48 00
>3a0b58	00 20 03 4b d1 4f 49 00 00 10 04 4f d1 bc 48 00
>3a0b68	00 20 06 54 d1 c5 49 00 00 10 07 5b d1 55 3c 00
>3a0b78	00 20 03 63 d1 03 2b 00 00 20 05 67 d1 35 2a 00
>3a0b88	00 20 09 6d d1 cc 23 00 00 20 09 77 d1 67 23 00
>3a0b98	00 20 0a 81 d1 95 23 00 00 20 07 8c d1 d4 22 00
>3a0ba8	00 30 08 94 d1 14 34 00 00 20 07 9d d1 69 22 00
>3a0bb8	00 30 08 a5 d1 81 34 00 00 20 08 ae d1 ed 24 00
>3a0bc8	00 20 08 b7 d1 49 24 00 00 20 06 c0 d1 2e 25 00
>3a0bd8	00 20 09 c7 d1 f6 25 00 00 20 04 d1 d1 89 27 00
>3a0be8	00 20 04 d6 d1 cf 27 00 00 20 04 db d1 35 28 00
>3a0bf8	00 20 06 e0 d1 db 28 00 00 20 08 e7 d1 68 29 00
>3a0c08	00 20 0a f0 d1 9c 29 00 00 00 00 00 00 00 00 00
>3a0c18	00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9
>3a0c28	ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64 b5 64 bb
>3a0c38	e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20 85 e8 c2
>3a0c48	10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10
>3a0c58	48 20 f1 0c b0 03 20 75 0c 20 7d 0e c2 20 68 85
>3a0c68	10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08
>3a0c78	c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d ca 86 0c
>3a0c88	e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5 ba e9 00
>3a0c98	85 c0 20 7d 0e e2 20 a5 e8 a0 00 00 97 c1 a9 00
>3a0ca8	a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9 00 00 97
>3a0cb8	c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97 c1 e2 20
>3a0cc8	c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85 b5 e2 20
>3a0cd8	a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85 b8 e2 20
>3a0ce8	a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2 20 48 a9
>3a0cf8	00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7 e2 20 a5
>3a0d08	bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11 c2 20 a9
>3a0d18	00 00 85 cd e2 20 a9 00 85 cf 2b 28 18 60 c2 20
>3a0d28	a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7 85 cc c2
>3a0d38	20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69 00 85 0e
>3a0d48	c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00
>3a0d58	85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5 0e c5 cc
>3a0d68	d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0 57 c2 20
>3a0d78	a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7 85 bd 4c
>3a0d88	2e 0e c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69
>3a0d98	00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08 c2 20 a5
>3a0da8	c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20 a5 c9 85
>3a0db8	cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8 c8 b7 cd
>3a0dc8	85 c9 4c 0b 0d c2 20 a0 02 00 b7 c7 97 cd e2 20
>3a0dd8	c8 c8 b7 c7 97 cd 4c 2e 0e c2 20 a0 05 00 b7 c7
>3a0de8	97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0 02 00 b7
>3a0df8	c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a5 cd d0
>3a0e08	14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb e2 20 a5
>3a0e18	0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97 cd e2 20
>3a0e28	c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2 20 a5 c9
>3a0e38	85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85 b7 c2 20
>3a0e48	a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e 97 c1 c2
>3a0e58	20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8 97 c1 e2
>3a0e68	20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00 a9 00 97
>3a0e78	c1 2b 28 38 60 08 c2 20 38 a5 be e9 08 00 85 c1
>3a0e88	e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20 a5 c3 f0
>3a0e98	04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20 a0 01 00
>3a0ea8	b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5 c3 f0 04
>3a0eb8	c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0 01 00 b7
>3a0ec8	c1 3a 97 c1 d0 03 20 d5 0e 28 60 00 ea 08 c2 20
>3a0ed8	a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85 bd c2 20
>3a0ee8	a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8 c8 e2 20
>3a0ef8	97 c1 4c bc 0f e2 20 a5 bd c5 c3 90 28 c2 20 a5
>3a0f08	bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97 c1 e2 20
>3a0f18	c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2 20 a5 c3
>3a0f28	85 bd 4c bc 0f c2 20 a5 bb 85 08 e2 20 a5 bd 85
>3a0f38	0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0 0b c2 20
>3a0f48	a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02 00 b7 08
>3a0f58	97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5 c1 a0 02
>3a0f68	00 97 08 e2 20 a5 c3 c8 c8 97 08 4c bc 0f c2 20
>3a0f78	a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2
>3a0f88	20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a
>3a0f98	c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0 02 00 97
>3a0fa8	08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1 c2 20 a0
>3a0fb8	02 00 97 c1 20 c1 0f 28 60 08 c2 20 a5 bb 85 c1
>3a0fc8	e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2 20 a5 c3
>3a0fd8	d0 03 4c 64 10 c2 20 a0 02 00 b7 c1 85 0c e2 20
>3a0fe8	c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1 85 10 e2
>3a0ff8	20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10 d0 08 e2
>3a1008	20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c1 85 0c
>3a1018	e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85 c1 e2 20
>3a1028	a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1 85 0c e2
>3a1038	20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7 0c 97 c1
>3a1048	e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00 b7 0c 97
>3a1058	c1 e2 20 c8 c8 b7 0c 97 c1 4c dd 0f 28 60 08 c2
>3a1068	10 e2 20 64 14 a5 e0 1a 1a 85 15 e2 20 a5 e1 85
>3a1078	16 c5 ba 90 29 f0 08 c2 20 a5 14 c5 b8 90 1f 08
>3a1088	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f d1 08
>3a1098	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 28 60
>3a10a8	c9 00 d0 05 c0 01 00 f0 05 09 30 97 14 c8 60 08
>3a10b8	c2 30 64 0c a5 23 10 1a 18 a5 21 49 ff ff 69 01
>3a10c8	00 85 21 a5 23 49 ff ff 69 00 00 85 23 a9 ff ff
>3a10d8	85 0c 64 10 64 12 a2 1f 00 f8 06 21 26 23 a5 10
>3a10e8	65 10 85 10 a5 12 65 12 85 12 ca 10 ed d8 e2 20
>3a10f8	20 66 10 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20
>3a1108	97 14 c8 a2 03 00 b5 10 29 f0 4a 4a 4a 4a 20 a8
>3a1118	10 b5 10 29 0f 20 a8 10 ca 10 eb c0 01 00 d0 0c
>3a1128	a9 20 87 14 a0 01 00 a9 30 97 14 c8 a9 00 97 14
>3a1138	28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0
>3a1148	04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1158	08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23
>3a1168	48 ab c2 20 68 28 a6 21 20 3c 11 84 0c 08 c2 20
>3a1178	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 20 3c 11
>3a1188	c2 20 98 38 65 0c aa e2 20 a9 02 20 41 0c c2 20
>3a1198	a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00 08 c2 20
>3a11a8	48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 bd 00 00
>3a11b8	f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20
>3a11c8	a5 29 48 ab c2 20 68 28 a6 27 bd 00 00 97 08 f0
>3a11d8	04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85
>3a11e8	23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a11f8	a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2 20 a5 23
>3a1208	48 ab c2 20 68 28 a6 21 20 3c 11 98 aa e8 e2 20
>3a1218	a9 02 20 41 0c c2 20 a5 be 85 08 e2 20 a5 c0 85
>3a1228	0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7 a5 08 85
>3a1238	21 a5 09 85 22 a5 0a 85 23 a9 00 85 24 ab 2b 28
>3a1248	60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9
>3a1258	84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b
>3a1268	c4 8d b0 12 a5 27 d0 0e 4c ca 12 20 66 10 e2 20
>3a1278	a9 00 87 14 80 39 20 66 10 c2 30 18 a5 21 65 27
>3a1288	85 21 a5 23 69 00 00 85 23 a0 00 00 e2 20 a7 21
>3a1298	97 14 f0 1b c2 20 18 a5 21 69 01 00 85 21 a5 23
>3a12a8	69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2
>3a12b8	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a12c8	f1 11 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a12d8	68 28 c2 30 a9 00 00 85 00 85 18 a9 36 00 85 02
>3a12e8	85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0 0f c5 53
>3a12f8	90 10 c5 57 f0 02 b0 05 20 2e 13 80 e5 28 2b 7a
>3a1308	68 60 20 b5 1b 80 db 08 c2 20 48 a9 00 08 5b 68
>3a1318	28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a1328	18 e2 20 dc d2 08 08 c2 30 85 21 64 23 20 b7 10
>3a1338	a5 14 1a 85 21 a5 16 85 23 20 c4 33 18 a5 18 69
>3a1348	04 00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 20 20
>3a1358	18 00 c2 20 20 6d 13 90 fb e2 20 a9 0d 20 18 00
>3a1368	20 b5 1b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1378	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1388	a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1398	0a 0a 0a 18 69 11 09 85 08 a9 3a 00 69 00 00 85
>3a13a8	0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a13b8	aa 20 a8 02 c2 20 20 d8 1a ab 2b 28 18 60 ab 2b
>3a13c8	28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff 7f 85 1f
>3a13d8	a9 ff ff 85 21 85 23 85 27 85 29 e2 20 85 25 85
>3a13e8	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a13f8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1d bd
>3a1408	00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a1418	99 04 00 c2 20 38 98 e9 05 00 85 1d 7a ab 2b 28
>3a1428	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1438	20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1d 69 05
>3a1448	00 85 1d a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a1458	e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a1468	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1478	48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f 99 00
>3a1488	00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1498	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a14a8	e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00 c2 20 29
>3a14b8	ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 68 14 28
>3a14c8	60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a14d8	a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f ab 28 7a
>3a14e8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a14f8	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a1508	08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28
>3a1518	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4 1f
>3a1528	c0 ff 7f f0 11 20 9a 08 85 0c b9 01 00 20 9a 08
>3a1538	c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2 20
>3a1548	68 ab 2b 28 38 60 4c 3e 05 08 e2 20 a9 00 8f 00
>3a1558	4d 00 a2 01 00 20 fb 16 20 9a 04 c2 20 a5 21 9f
>3a1568	00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>3a1578	e8 e8 20 f9 1a e2 20 a7 00 c9 8d f0 09 c9 2c d0
>3a1588	0a 20 d8 1a 80 cf 20 d8 1a 28 60 08 c2 20 48 a9
>3a1598	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a15a8	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a15b8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a15c8	00 20 4d 18 e2 20 dc d2 08 08 20 cf 3f 90 23 e2
>3a15d8	20 a5 e8 29 80 d0 06 20 25 3e 4c f8 15 e2 20 a9
>3a15e8	8c 20 e5 1b 20 bf 14 20 51 15 20 b6 42 20 c9 14
>3a15f8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1608	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a1618	08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1628	10 20 d8 1a a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>3a1638	80 f5 84 0c e2 20 a9 02 a6 0c e8 20 41 0c a0 00
>3a1648	00 c4 0c f0 29 a7 00 97 be c8 20 d8 1a 80 f2 08
>3a1658	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1668	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 a9 00
>3a1678	97 be c2 20 a5 be 85 21 e2 20 a5 c0 85 23 a9 02
>3a1688	85 25 20 d8 1a 2b 28 60 08 e2 20 a7 00 c2 20 29
>3a1698	ff 00 20 c4 08 85 2d 20 bf 14 08 e2 20 48 a9 00
>3a16a8	48 ab 68 28 20 b4 16 20 c9 14 28 60 20 d8 1a 6c
>3a16b8	2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b
>3a16c8	68 28 c2 30 a2 27 08 20 29 14 a2 21 08 20 29 14
>3a16d8	20 91 14 20 c4 08 85 2d 08 e2 20 48 a9 00 48 ab
>3a16e8	68 28 20 f8 16 a2 21 08 20 eb 13 68 ab 2b 28 60
>3a16f8	6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1708	20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0
>3a1718	03 4c be 17 30 33 c9 20 d0 03 4c b8 17 c9 3a b0
>3a1728	04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c d1 17
>3a1738	c9 5b b0 07 c9 41 90 03 4c dd 17 c9 7b b0 07 c9
>3a1748	61 90 03 4c dd 17 4c be 17 c9 8c f0 40 c9 8d f0
>3a1758	41 20 e7 08 c9 30 d0 0c 20 90 16 a2 21 08 20 eb
>3a1768	13 4c 13 17 c9 00 d0 4e a7 00 a6 1f e0 ff 7f f0
>3a1778	05 20 08 15 b0 12 20 68 14 80 35 c2 20 20 4e 15
>3a1788	a2 21 08 20 eb 13 80 83 20 ba 16 80 dd 20 68 14
>3a1798	80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01 00
>3a17a8	c9 01 f0 3d c9 8c f0 05 20 ba 16 80 ee 20 91 14
>3a17b8	20 d8 1a 4c 13 17 a6 1f e0 ff 7f b0 24 bd 01 00
>3a17c8	c9 01 f0 1d 20 ba 16 80 ed 20 19 16 a2 21 08 20
>3a17d8	eb 13 4c 13 17 20 d1 15 a2 21 08 20 eb 13 4c 13
>3a17e8	17 a2 21 08 20 29 14 fa 28 60 08 0b 8b 08 e2 20
>3a17f8	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a1808	28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08 c2
>3a1818	20 48 a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6 31
>3a1828	2b 28 60 08 c2 30 29 ff 00 20 14 18 28 60 08 0b
>3a1838	08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6 31
>3a1848	b2 31 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b
>3a1858	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 21
>3a1868	a9 00 00 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85
>3a1878	e7 c2 20 a9 a7 18 85 e5 20 6c 3f c2 20 a5 d5 85
>3a1888	21 a5 d7 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85
>3a1898	e7 c2 20 a9 ab 18 85 e5 20 6c 3f 28 2b ab 60 45
>3a18a8	52 52 00 45 52 4c 00 e2 20 c2 10 20 1b 02 af d1
>3a18b8	08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48
>3a18c8	ab 68 28 be 01 19 20 a8 02 c2 20 a5 d5 f0 27 a2
>3a18d8	2d 19 20 a8 02 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a18e8	20 af d5 08 00 8f 21 08 00 a9 00 00 8f 23 08 00
>3a18f8	20 e4 33 20 1b 02 4c bb 20 31 19 34 19 3a 19 47
>3a1908	19 55 19 63 19 76 19 8c 19 9c 19 ab 19 b8 19 c9
>3a1918	19 d8 19 e5 19 f3 19 02 1a 13 1a 2c 1a 40 1a 54
>3a1928	1a 6a 1a 7e 1a 20 61 74 00 4f 4b 00 42 72 65 61
>3a1938	6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72 00 4f
>3a1948	75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79 70
>3a1958	65 20 6d 69 73 6d 61 74 63 68 00 56 61 72 69 61
>3a1968	62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69
>3a1978	6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f
>3a1988	75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72 66
>3a1998	6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66 6c
>3a19a8	6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65 00
>3a19b8	49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e 74
>3a19c8	00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a19d8	4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d 61 74
>3a19e8	68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74 68 20
>3a19f8	75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69 73 69
>3a1a08	6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61 62 6c
>3a1a18	65 20 74 6f 20 72 65 61 64 20 64 69 72 65 63 74
>3a1a28	6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f
>3a1a38	61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74
>3a1a48	6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e 61 62
>3a1a58	6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66 69 6c
>3a1a68	65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64
>3a1a78	20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1a88	75 70 64 61 74 65 20 64 69 72 65 63 74 6f 72 79
>3a1a98	00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1aa8	00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a1ab8	68 28 08 c2 20 a9 af 18 8f d2 08 00 e2 20 a9 3a
>3a1ac8	8f d4 08 00 28 20 90 32 20 d1 2d 64 2f 28 2b 60
>3a1ad8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5
>3a1ae8	00 69 01 00 85 00 e2 20 a5 02 69 00 85 02 2b 28
>3a1af8	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7
>3a1b08	00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20 d8 1a
>3a1b18	80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05
>3a1b28	20 d8 1a 80 f3 28 60 08 e2 20 64 34 a7 00 f0 19
>3a1b38	c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a
>3a1b48	c9 9d f0 16 20 d8 1a 80 e3 20 b5 1b c2 20 a5 d5
>3a1b58	f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30 30 80 e4
>3a1b68	a5 33 30 06 a5 34 f0 02 80 da 20 d8 1a 28 60 08
>3a1b78	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1b88	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2
>3a1b98	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a1ba8	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 30
>3a1bb8	a0 00 00 b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a
>3a1bc8	69 00 00 85 1a a0 02 00 b7 18 85 d5 18 a5 18 69
>3a1bd8	04 00 85 00 a5 1a 69 00 00 85 02 28 60 08 e2 20
>3a1be8	48 20 f9 1a 68 e2 20 c7 00 d0 08 20 d8 1a 20 f9
>3a1bf8	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1c08	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a1c18	d2 08 08 e2 20 20 f9 1a e2 20 a7 00 f0 10 c9 3a
>3a1c28	f0 0c c5 35 f0 05 20 d8 1a 80 ef 28 38 60 28 18
>3a1c38	60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07
>3a1c48	c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08
>3a1c58	c2 20 48 a9 00 08 5b 68 28 20 cb 13 e2 20 a9 00
>3a1c68	85 da ad 8a 0f 30 4b a7 00 c9 3a d0 03 20 d8 1a
>3a1c78	20 f9 1a a7 00 d0 03 4c 04 1d 20 fb 02 b0 52 a7
>3a1c88	00 10 10 20 e7 08 85 0c c9 20 d0 03 4c f2 1c a5
>3a1c98	d0 f0 51 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1ca8	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a1cb8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01
>3a1cc8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a1cd8	08 20 9a 32 4c 04 1d 08 e2 20 48 a9 00 48 ab 68
>3a1ce8	28 6c 2d 08 a5 0c c9 10 d0 a9 a7 00 20 c4 08 c2
>3a1cf8	20 85 2d 20 cb 13 20 d8 1a 20 df 1c ab 2b 28 60
>3a1d08	08 58 20 99 1a 20 f2 17 e2 20 9c 8a 0f c2 20 a5
>3a1d18	18 85 00 a5 1a 85 02 4c 46 1d 08 c2 20 a0 02 00
>3a1d28	b7 18 85 d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5
>3a1d38	18 69 04 00 85 00 e2 20 a5 1a 69 00 85 02 c2 20
>3a1d48	20 54 1c e2 20 a5 da c9 03 f0 f3 c9 00 d0 31 e2
>3a1d58	20 20 f9 1a a7 00 f0 28 c9 3a f0 1f 08 c2 20 48
>3a1d68	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1d78	29 ff 00 20 4d 18 e2 20 dc d2 08 20 d8 1a 80 be
>3a1d88	28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f 20 f2 17
>3a1d98	c2 30 64 2f a0 02 00 b7 18 f0 29 20 22 1d e2 20
>3a1da8	a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20
>3a1db8	a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69 00
>3a1dc8	85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2
>3a1dd8	20 a9 00 00 85 08 a9 36 00 85 0a c2 20 a0 02 00
>3a1de8	b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18
>3a1df8	a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20
>3a1e08	a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a
>3a1e18	85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2
>3a1e28	20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2
>3a1e38	20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85
>3a1e48	0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69
>3a1e58	00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20
>3a1e68	a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5
>3a1e78	0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20
>3a1e88	38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a
>3a1e98	80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85
>3a1ea8	0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04
>3a1eb8	00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20
>3a1ec8	38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20
>3a1ed8	20 1e 20 90 32 28 60 08 08 c2 20 48 a9 00 08 5b
>3a1ee8	68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04 00 85
>3a1ef8	08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18
>3a1f08	97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c
>3a1f18	c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c
>3a1f28	85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7
>3a1f38	c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8
>3a1f48	20 90 32 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1f58	28 c2 30 a9 00 00 85 08 a9 36 00 85 0a a0 02 00
>3a1f68	b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08
>3a1f78	77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80
>3a1f88	dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00
>3a1f98	28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20
>3a1fa8	b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85
>3a1fb8	00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5 d9 69
>3a1fc8	00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00
>3a1fd8	85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00 00 85
>3a1fe8	0a 20 5f 1e c2 20 a5 10 a0 00 00 97 00 a5 d5 a0
>3a1ff8	02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69 00
>3a2008	00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80
>3a2018	f7 20 90 32 28 60 08 c2 30 85 d5 20 4d 1f c9 00
>3a2028	00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48
>3a2038	20 9c 1e 68 85 0a 68 85 08 a5 18 85 00 a5 1a 85
>3a2048	02 20 f9 1a e2 20 a7 00 f0 0a 20 9b 1f 80 05 a5
>3a2058	d5 20 df 1e 28 60 8b 08 08 e2 20 48 a9 3a 48 ab
>3a2068	68 28 a2 fb d1 20 a8 02 28 ab 60 08 e2 30 a9 01
>3a2078	20 1c 00 20 db 00 f0 06 c9 0d f0 02 80 f5 28 60
>3a2088	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5
>3a2098	a9 00 4f 85 18 a9 00 00 85 1a 20 fe 05 c2 20 a5
>3a20a8	d5 d0 05 20 08 1d 80 07 20 1e 20 28 2b 38 60 28
>3a20b8	2b 18 60 c2 30 a2 ff fe 9a 20 5e 20 20 08 00 20
>3a20c8	0c 00 a9 00 00 20 1c 00 20 88 20 b0 ef 80 ea e2
>3a20d8	20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08
>3a20e8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a20f8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 d7
>3a2108	20 c2 20 c9 00 00 f0 27 c9 02 00 d0 03 4c 4f 11
>3a2118	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a2128	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 18
>3a2138	a5 21 65 27 85 21 a5 23 65 29 85 23 60 38 a5 21
>3a2148	e5 27 85 21 a5 23 e5 29 85 23 60 a5 21 8f 08 01
>3a2158	00 a5 27 8f 0a 01 00 af 0c 01 00 85 21 af 0e 01
>3a2168	00 85 23 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00
>3a2178	af 14 01 00 85 21 60 a5 21 8f 12 01 00 a5 27 8f
>3a2188	10 01 00 af 16 01 00 85 21 60 c2 20 a5 21 25 27
>3a2198	85 21 a5 23 25 29 85 23 60 c2 20 a5 21 05 27 85
>3a21a8	21 a5 23 05 29 85 23 60 c2 20 a5 21 49 ff ff 85
>3a21b8	21 a5 23 49 ff ff 85 23 60 c2 20 a5 23 c5 29 90
>3a21c8	0b a5 21 c5 27 90 05 64 21 64 23 60 a9 ff ff 85
>3a21d8	21 85 23 60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21
>3a21e8	90 05 64 21 64 23 60 a9 ff ff 85 21 85 23 60 c2
>3a21f8	20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff
>3a2208	85 21 85 23 60 64 21 64 23 60 c2 20 a5 29 c5 23
>3a2218	d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23 60
>3a2228	64 21 64 23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5
>3a2238	21 c5 27 90 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a2248	23 60 c2 20 a5 23 c5 29 90 0f f0 05 64 21 64 23
>3a2258	60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23
>3a2268	60 08 e2 20 20 fb 16 20 e9 04 20 c7 03 a5 21 0a
>3a2278	0a 0a 0a 05 27 48 a9 2c 20 e5 1b 20 fb 16 20 e9
>3a2288	04 20 c7 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20
>3a2298	e5 1b 20 fb 16 20 e9 04 20 c7 03 a5 21 0a 0a 0a
>3a22a8	0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f
>3a22b8	00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08
>3a22c8	af 29 f7 8f 0e 08 af 20 1d 1b 28 60 08 e2 20 20
>3a22d8	fb 16 20 e9 04 20 c7 03 a5 21 0a 0a 0a 0a 05 27
>3a22e8	48 a9 2c 20 e5 1b 20 fb 16 20 e9 04 20 c7 03 a5
>3a22f8	21 0a 0a 0a 0a 05 27 48 a9 2c 20 e5 1b 20 fb 16
>3a2308	20 46 04 20 fd 03 c2 20 a5 21 85 90 a5 27 85 21
>3a2318	20 c7 03 e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2 20
>3a2328	a5 90 85 21 20 c7 03 e2 20 a5 21 0a 0a 0a 0a 05
>3a2338	27 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08
>3a2348	af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af
>3a2358	af 0e 08 af 29 f7 8f 0e 08 af 20 1d 1b 28 60 08
>3a2368	20 fb 16 20 e9 04 e2 20 a5 21 29 0f 0a 0a 0a 0a
>3a2378	8f 53 08 00 a9 2c 20 e5 1b 20 fb 16 20 e9 04 a5
>3a2388	21 29 0f 0f 53 08 00 8f 1e 00 00 28 60 08 e2 20
>3a2398	20 fb 16 20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb
>3a23a8	16 20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20
>3a23b8	e9 04 a5 21 8f 08 00 af 68 8f 09 00 af 68 8f 0a
>3a23c8	00 af 28 60 08 e2 20 20 fb 16 20 46 04 a5 21 f0
>3a23d8	1e a9 01 8f 04 00 af a9 20 8f 08 00 af 8f 09 00
>3a23e8	af a9 48 8f 0f 00 00 a9 34 8f 13 00 00 80 12 a9
>3a23f8	00 8f 04 00 af a9 50 8f 0f 00 00 a9 3c 8f 13 00
>3a2408	00 a9 2c 85 35 20 1a 1c 90 35 20 d8 1a 20 fb 16
>3a2418	20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20 e9
>3a2428	04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20 e9 04 a5
>3a2438	21 8f 05 00 af 68 8f 06 00 af 68 8f 07 00 af 28
>3a2448	60 08 c2 20 20 fb 16 20 e9 04 a9 af 00 85 9e a5
>3a2458	21 c9 0a 00 b0 5c 0a aa bf d9 24 3a 85 9c a9 2c
>3a2468	00 20 e5 1b 20 fb 16 20 e9 04 a5 21 0a 0a 18 65
>3a2478	9c 85 9c a9 2c 00 20 e5 1b 20 fb 16 20 e9 04 a0
>3a2488	02 00 a5 21 e2 20 97 9c a9 2c 20 e5 1b 20 fb 16
>3a2498	20 e9 04 a0 01 00 a5 21 e2 20 97 9c a9 2c 20 e5
>3a24a8	1b 20 fb 16 20 e9 04 a0 00 00 a5 21 e2 20 97 9c
>3a24b8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a24c8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a24d8	08 00 20 00 24 00 28 00 2c 00 30 00 34 00 38 00
>3a24e8	3c 40 1f 80 1f 08 20 fb 16 20 e9 04 a5 21 8f 00
>3a24f8	00 af c2 20 a9 80 02 8f 08 f0 3a a9 e0 01 8f 0a
>3a2508	f0 3a af 08 f0 3a 8f 08 01 00 af 0a f0 3a 8f 0a
>3a2518	01 00 af 0c 01 00 8f 0c f0 3a e2 20 af 0e 01 00
>3a2528	8f 0e f0 3a 28 60 08 c2 20 20 fb 16 20 e9 04 c2
>3a2538	20 a5 21 85 53 a9 2c 00 20 e5 1b 20 fb 16 20 e9
>3a2548	04 e2 20 a5 53 d0 05 a5 21 0a 80 04 a5 21 38 2a
>3a2558	8f 40 01 af c2 20 a9 2c 00 85 35 20 1a 1c b0 18
>3a2568	c2 20 08 c2 20 a9 00 00 85 21 a9 b0 00 85 23 e2
>3a2578	20 a9 00 85 25 28 80 08 c2 20 20 d8 1a 20 fb 16
>3a2588	e2 20 38 a5 23 8f 02 f0 3a e9 b0 30 42 8f 43 01
>3a2598	af 8f 06 f0 3a a5 21 8f 00 f0 3a 8f 41 01 af 8f
>3a25a8	04 f0 3a a5 22 8f 42 01 af 8f 05 f0 3a 8f 01 f0
>3a25b8	3a a9 00 8f 07 f0 3a 8f 03 f0 3a c2 20 af 08 f0
>3a25c8	3a 8f 44 01 af af 0a f0 3a 8f 46 01 af 28 60 08
>3a25d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a25e8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2
>3a25f8	20 af 04 f0 3a 8f 05 04 af af 0c f0 3a 8f 08 04
>3a2608	af e2 20 af 06 f0 3a 8f 07 04 af af 0e f0 3a 8f
>3a2618	0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04 af af
>3a2628	01 04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2 20
>3a2638	a5 5b 8f 08 01 00 af 08 f0 3a 8f 0a 01 00 18 af
>3a2648	0c 01 00 65 57 85 0c af 0e 01 00 69 00 00 85 0e
>3a2658	18 a5 0c 6f 00 f0 3a 85 9c a5 0e 6f 02 f0 3a 85
>3a2668	9e e2 20 a5 53 87 9c 28 60 c2 20 a9 01 00 85 db
>3a2678	38 a5 5f e5 57 85 67 10 0b 49 ff ff 1a 85 67 a9
>3a2688	ff ff 85 db a9 01 00 85 dd 38 a5 63 e5 5b 85 6b
>3a2698	10 0b 49 ff ff 1a 85 6b a9 ff ff 85 dd a5 6b c5
>3a26a8	67 b0 04 a5 67 80 06 a5 6b 49 ff ff 1a 48 0a 68
>3a26b8	6a 85 6f 20 35 26 a5 57 c5 5f d0 06 a5 5b c5 63
>3a26c8	f0 36 a5 6f 85 73 a5 67 49 ff ff 1a c5 73 10 10
>3a26d8	f0 0e 38 a5 6f e5 6b 85 6f 18 a5 57 65 db 85 57
>3a26e8	a5 73 c5 6b 10 cd f0 cb 18 a5 6f 65 67 85 6f 18
>3a26f8	a5 5b 65 dd 85 5b 80 bb 60 08 a9 00 00 8f 00 04
>3a2708	af c2 20 a5 5b 8f 08 01 00 af 08 f0 3a 8f 0a 01
>3a2718	00 18 af 0c 01 00 65 57 85 0c e2 20 af 0e 01 00
>3a2728	69 00 85 0e c2 20 18 af 04 f0 3a 65 0c 8f 05 04
>3a2738	af e2 20 af 06 f0 3a 65 0e 8f 07 04 af c2 20 38
>3a2748	a5 5f e5 57 85 0c 8f 08 04 af 38 af 08 f0 3a 8f
>3a2758	0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01 00 8f
>3a2768	0c 04 af e2 20 af 53 08 00 8f 01 04 af a9 87 8f
>3a2778	00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>3a2788	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2798	a9 00 48 ab 68 28 c2 30 20 fb 16 20 46 04 a5 21
>3a27a8	85 53 a9 2c 00 20 e5 1b 20 fb 16 20 46 04 a5 21
>3a27b8	85 57 a9 2c 00 20 e5 1b 20 fb 16 20 e9 04 a5 21
>3a27c8	85 5b 20 35 26 28 60 08 08 c2 20 48 a9 00 08 5b
>3a27d8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 fb
>3a27e8	16 20 46 04 a5 21 85 57 a9 2c 00 20 e5 1b 20 fb
>3a27f8	16 20 46 04 a5 21 85 5b a9 2c 00 20 e5 1b 20 fb
>3a2808	16 20 46 04 a5 21 85 5f a9 2c 00 20 e5 1b 20 fb
>3a2818	16 20 46 04 a5 21 85 63 a9 2c 00 20 e5 1b 20 fb
>3a2828	16 20 e9 04 a5 21 85 53 20 71 26 28 60 08 08 c2
>3a2838	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a2848	68 28 c2 30 20 fb 16 20 46 04 a5 21 85 57 a9 2c
>3a2858	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 5b a9 2c
>3a2868	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 5f a9 2c
>3a2878	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 63 a9 2c
>3a2888	00 20 e5 1b 20 fb 16 20 e9 04 a5 21 85 53 20 01
>3a2898	27 28 60 08 e2 20 a5 21 c9 12 b0 18 0a 0a 0a 18
>3a28a8	69 00 85 9c a9 02 69 00 85 9d a9 af 69 00 85 9e
>3a28b8	64 9f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a28c8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a28d8	dc d2 08 08 e2 20 20 fb 16 20 e9 04 20 9b 28 a5
>3a28e8	21 8f 0e f0 3a a9 2c 20 e5 1b 20 fb 16 20 e9 04
>3a28f8	a5 21 c9 08 b0 4b 48 a9 2c 20 e5 1b 20 fb 16 20
>3a2908	46 04 c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0
>3a2918	00 85 23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20
>3a2928	a5 23 c8 c8 97 9c af 0e f0 3a aa bf 10 f0 3a 29
>3a2938	f1 85 0c 68 0a 29 0e 05 0c 87 9c 9f 10 f0 3a 28
>3a2948	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2958	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a2968	08 c2 20 20 fb 16 20 e9 04 20 9b 28 a9 2c 00 20
>3a2978	e5 1b 20 fb 16 20 46 04 a5 21 a0 04 00 97 9c a9
>3a2988	2c 00 20 e5 1b 20 fb 16 20 46 04 a5 21 a0 06 00
>3a2998	97 9c 28 60 08 c2 20 20 fb 16 20 e9 04 20 9b 28
>3a29a8	a5 21 8f 0e f0 3a a9 2c 00 20 e5 1b 20 fb 16 20
>3a29b8	46 04 a5 21 48 a9 2c 00 85 35 20 1a 1c b0 1c af
>3a29c8	0e f0 3a aa bf 10 f0 3a 29 fe 00 85 0c 68 29 01
>3a29d8	00 05 0c 9f 10 f0 3a 87 9c 80 31 e2 20 20 d8 1a
>3a29e8	20 fb 16 20 e9 04 a5 21 c9 08 b0 22 0a 0a 0a 0a
>3a29f8	85 0c 68 29 01 05 0c 85 0c af 0e f0 3a aa bf 10
>3a2a08	f0 3a 29 8e 05 0c 87 9c 9f 10 f0 3a 28 60 08 c2
>3a2a18	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a2a28	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 20 f9
>3a2a38	1a e2 20 a7 00 d0 03 4c dd 2a c9 3a d0 03 4c dd
>3a2a48	2a c9 22 d0 0b 20 19 16 20 c4 33 a9 3b 20 e5 1b
>3a2a58	20 fb 02 90 41 20 cf 3f 90 3c a9 3f 20 18 00 a9
>3a2a68	20 20 18 00 20 10 00 e2 20 a5 e8 c9 02 f0 46 c9
>3a2a78	00 f0 65 c9 01 f0 60 08 c2 20 48 a9 00 08 5b 68
>3a2a88	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2a98	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2aa8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a2ab8	e2 20 dc d2 08 c2 20 a9 00 4c 85 21 a9 00 00 85
>3a2ac8	23 e2 20 a9 02 85 25 20 f1 11 c2 20 20 6c 3f a9
>3a2ad8	0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3e a5 02
>3a2ae8	85 40 a9 00 4c 85 00 a9 00 00 85 02 20 3e 05 c2
>3a2af8	20 a5 3e 85 00 a5 40 85 02 80 cf 08 20 f9 1a e2
>3a2b08	20 a7 00 f0 49 c9 3a f0 45 20 fb 02 90 42 20 cf
>3a2b18	3f 90 3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01
>3a2b28	4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2 20
>3a2b38	a9 02 85 25 20 f1 11 20 6c 3f 20 f9 1a a7 00 f0
>3a2b48	0d c9 3a f0 09 c9 2c d0 07 20 d8 1a 80 ae 28 60
>3a2b58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a2b68	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08
>3a2b78	20 fb 16 20 46 04 e2 20 a9 5c 85 a0 c2 20 a5 21
>3a2b88	85 a1 e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 1a
>3a2b98	1c 90 41 20 d8 1a 20 fb 16 20 9a 04 c2 20 a5 21
>3a2ba8	85 53 e2 20 a9 2c 85 35 20 1a 1c 90 27 20 d8 1a
>3a2bb8	20 fb 16 20 9a 04 c2 20 a5 21 85 57 e2 20 a9 2c
>3a2bc8	85 35 20 1a 1c 90 0d 20 d8 1a 20 fb 16 20 9a 04
>3a2bd8	c2 20 a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28
>3a2be8	ab 2b 20 1d 1b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2bf8	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2c08	18 e2 20 dc d2 08 08 e2 20 20 f9 1a 20 cf 3f 90
>3a2c18	64 a9 8c 20 e5 1b a9 01 20 68 14 a2 01 00 a9 00
>3a2c28	8f 00 4d 00 20 fb 16 20 9a 04 c2 20 a5 21 9f 00
>3a2c38	4d 00 e2 20 af 00 4d 00 1a 8f 00 4d 00 30 55 e8
>3a2c48	e8 20 f9 1a a7 00 c9 2c f0 25 c9 8d d0 27 20 d8
>3a2c58	1a 20 7d 40 c2 20 a5 be 85 21 e2 20 a5 c0 85 23
>3a2c68	64 24 a5 e8 09 80 85 e8 85 25 20 6c 3f 28 60 20
>3a2c78	d8 1a 4c 2c 2c 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2c88	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2c98	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ca8	a9 0a 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2cb8	dc d2 08 08 20 f9 1a e2 20 a7 00 f0 28 c9 3a f0
>3a2cc8	24 20 fb 02 90 21 20 cf 3f 90 1c 20 0e 2d 20 6c
>3a2cd8	3f 20 f9 1a a7 00 f0 0d c9 3a f0 09 c9 2c d0 07
>3a2ce8	20 d8 1a 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2cf8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2d08	18 e2 20 dc d2 08 08 a5 02 85 40 a5 00 85 3e a5
>3a2d18	1a 85 44 a5 18 85 42 c2 20 a5 38 d0 04 a5 36 f0
>3a2d28	4e a5 36 85 00 a5 38 85 02 a5 3a 85 18 a5 3c 85
>3a2d38	1a e2 20 a7 00 f0 53 c9 3a f0 4f c9 2c d0 03 20
>3a2d48	d8 1a 20 f9 1a a7 00 c9 22 f0 4e 20 14 03 b0 4e
>3a2d58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a2d68	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 c2
>3a2d78	20 a9 00 00 85 18 a9 36 00 85 1a 18 a5 18 69 04
>3a2d88	00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33
>3a2d98	a9 a8 85 35 20 2f 1b 80 a9 20 19 16 80 03 20 4e
>3a2da8	15 c2 20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5
>3a2db8	1a 85 3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5
>3a2dc8	40 85 02 28 60 20 1d 1b 60 64 36 64 38 64 3a 64
>3a2dd8	3c 60 20 24 00 60 20 fb 16 c2 20 a5 23 48 a5 21
>3a2de8	48 e2 20 a7 00 c9 2c d0 22 20 d8 1a 20 fb 16 c2
>3a2df8	20 a5 24 d0 35 68 85 08 68 85 0a c2 20 a5 21 87
>3a2e08	08 e2 20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9
>3a2e18	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2e28	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a2e38	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2e48	00 20 4d 18 e2 20 dc d2 08 20 fb 16 c2 20 a5 23
>3a2e58	48 a5 21 48 e2 20 a7 00 c9 2c d0 19 20 d8 1a 20
>3a2e68	fb 16 c2 20 a5 23 d0 2c 68 85 08 68 85 0a c2 20
>3a2e78	a5 21 87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2e88	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2e98	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ea8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2eb8	dc d2 08 20 fb 16 c2 20 a5 23 48 a5 21 48 e2 20
>3a2ec8	a7 00 c9 2c d0 1f 20 d8 1a 20 fb 16 e2 20 a5 22
>3a2ed8	d0 32 c2 20 a5 23 d0 2c 68 85 08 68 85 0a e2 20
>3a2ee8	a5 21 87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2ef8	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2f08	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2f18	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2f28	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f38	01 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a2f48	d2 08 08 e2 20 a7 00 f0 05 20 d8 1a 80 f7 28 60
>3a2f58	08 28 60 08 28 60 08 28 60 08 c2 20 a5 1a 20 14
>3a2f68	18 a5 18 20 14 18 a5 02 48 a5 00 48 20 1d 1b a5
>3a2f78	02 20 14 18 a5 00 20 14 18 68 85 00 68 85 02 20
>3a2f88	f9 1a 20 cf 3f b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a2f98	28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2fa8	18 e2 20 dc d2 08 e2 20 a5 e8 20 2b 18 a5 e7 20
>3a2fb8	2b 18 c2 20 a5 e5 20 14 18 20 f9 1a e2 20 a7 00
>3a2fc8	c9 87 d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 d8
>3a2fd8	1a 20 fb 16 20 6c 3f e2 20 a9 99 20 e5 1b 20 fb
>3a2fe8	16 c2 20 a5 25 20 14 18 a5 23 20 14 18 a5 21 20
>3a2ff8	14 18 e2 20 a9 9a 85 35 20 1a 1c 90 1b 20 d8 1a
>3a3008	20 fb 16 e2 20 a5 25 20 14 18 c2 20 a5 23 20 14
>3a3018	18 a5 21 20 14 18 80 14 c2 20 a9 00 00 20 14 18
>3a3028	a9 00 00 20 14 18 a9 01 00 20 14 18 28 60 08 c2
>3a3038	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3048	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 8b 08
>3a3058	e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>3a3068	5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5
>3a3078	b9 0e 00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20
>3a3088	25 3e 7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2
>3a3098	20 b9 04 00 85 2b c2 20 5a 20 06 21 20 6c 3f 7a
>3a30a8	c2 20 b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a
>3a30b8	00 85 2b c2 20 b9 02 00 30 0a 20 4a 22 20 33 04
>3a30c8	f0 28 80 08 20 2d 22 20 33 04 f0 1e c2 20 b9 12
>3a30d8	00 85 00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00
>3a30e8	85 1a e2 20 a9 03 85 da 80 17 a2 21 08 20 29 14
>3a30f8	c2 20 18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85
>3a3108	33 ab 28 60 08 a5 18 48 a5 1a 48 20 f9 1a 20 3e
>3a3118	05 a5 21 f0 26 20 d4 1d 90 42 e2 20 a9 02 85 da
>3a3128	20 1d 1b c2 20 68 20 14 18 68 20 14 18 a5 02 20
>3a3138	14 18 a5 00 20 14 18 e6 2f 28 60 68 68 08 c2 20
>3a3148	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3158	20 29 ff 00 20 4d 18 e2 20 dc d2 08 68 68 08 c2
>3a3168	20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00
>3a3178	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 30
>3a3188	a5 2f f0 1e 20 36 18 85 00 20 36 18 85 02 20 36
>3a3198	18 85 18 20 36 18 85 1a c6 2f e2 20 a9 03 85 da
>3a31a8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07
>3a31b8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a31c8	08 08 20 fb 16 20 33 04 f0 1c e2 20 a9 94 20 e5
>3a31d8	1b 20 3e 05 20 33 04 f0 12 20 d4 1d 90 2c e2 20
>3a31e8	a9 02 85 da 80 03 20 1d 1b 28 60 08 c2 20 48 a9
>3a31f8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3208	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3218	08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff
>3a3228	00 20 4d 18 e2 20 dc d2 08 08 e2 20 a9 01 85 da
>3a3238	28 60 08 20 f9 1a 20 3e 05 a5 21 f0 0d 20 d4 1d
>3a3248	90 27 e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00
>3a3258	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3268	00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3278	5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00
>3a3288	20 4d 18 e2 20 dc d2 08 20 cb 13 20 19 0c 20 24
>3a3298	3d 60 08 a7 00 10 03 20 d8 1a 20 cf 3f b0 03 4c
>3a32a8	11 33 e2 20 20 39 1c c9 8c d0 0e a9 8c 20 e5 1b
>3a32b8	a9 00 8f 00 4d 00 20 51 15 20 f9 1a e2 20 a7 00
>3a32c8	c9 87 f0 03 4c 11 33 20 d8 1a a5 e8 48 a5 e7 48
>3a32d8	a5 e6 48 a5 e5 48 20 fb 16 68 85 e5 68 85 e6 68
>3a32e8	85 e7 68 85 e8 29 80 f0 1b 20 97 3d 90 3a c2 20
>3a32f8	a0 09 00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20
>3a3308	5e 42 80 03 20 6c 3f 28 60 08 c2 20 48 a9 00 08
>3a3318	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3328	20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3338	68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20
>3a3348	4d 18 e2 20 dc d2 08 08 e2 20 20 39 1c c9 00 f0
>3a3358	66 20 fb 16 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05
>3a3368	20 c4 33 80 0b c9 00 d0 05 20 e4 33 80 02 80 4a
>3a3378	20 f9 1a a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9
>3a3388	3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3398	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a33a8	d2 08 a9 09 20 18 00 20 d8 1a 20 f9 1a a7 00 f0
>3a33b8	09 c9 3a f0 05 80 9a 20 1b 02 28 60 08 8b 08 c2
>3a33c8	20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7
>3a33d8	21 f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20
>3a33e8	b7 10 a5 14 85 21 a5 16 85 23 20 c4 33 28 60 08
>3a33f8	e2 20 85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8
>3a3408	a5 b3 29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c
>3a3418	20 e5 1b 08 20 fb 16 e2 20 c2 10 af 0e 08 af 09
>3a3428	08 8f 0e 08 af 20 66 10 a0 00 00 af 06 08 af 20
>3a3438	f7 33 a9 2f 97 14 c8 af 09 08 af 20 f7 33 a9 2f
>3a3448	97 14 c8 af 0f 08 af 20 f7 33 af 0a 08 af 20 f7
>3a3458	33 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2
>3a3468	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a3478	f1 11 28 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5 1b
>3a3488	08 20 fb 16 e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>3a3498	08 af 20 66 10 a0 00 00 af 04 08 af 29 7f 20 f7
>3a34a8	33 a9 3a 97 14 c8 af 02 08 af 20 f7 33 a9 3a 97
>3a34b8	14 c8 af 00 08 af 20 f7 33 a9 00 97 14 af 0e 08
>3a34c8	af 29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85
>3a34d8	23 e2 20 a9 02 85 25 20 f1 11 28 e2 20 20 d8 1a
>3a34e8	60 08 c2 20 20 fb 16 20 46 04 c2 20 a5 21 49 ff
>3a34f8	ff 85 21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23
>3a3508	00 28 60 e2 20 a9 8c 20 e5 1b 08 c2 30 20 fb 16
>3a3518	20 70 04 c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20
>3a3528	a7 00 c9 2c f0 03 4c 82 35 20 d8 1a 20 fb 16 20
>3a3538	9a 04 c2 20 a5 21 48 20 f9 1a e2 20 a7 00 c9 2c
>3a3548	f0 03 4c 82 35 20 d8 1a 20 fb 16 20 9a 04 c2 20
>3a3558	a5 21 85 8d e2 20 a5 23 85 8f c2 20 68 85 27 a9
>3a3568	00 00 85 29 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3578	20 49 12 e2 20 20 d8 1a 28 60 08 c2 20 48 a9 00
>3a3588	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3598	00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a35a8	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a35b8	20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 08
>3a35c8	c2 30 20 fb 16 e2 20 a5 25 c9 02 f0 03 4c 44 36
>3a35d8	c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20 a7 00 c9
>3a35e8	2c f0 03 4c 63 36 20 d8 1a 20 fb 16 e2 20 a5 25
>3a35f8	c9 00 d0 48 c2 20 a5 21 85 8d c2 20 68 85 21 68
>3a3608	85 23 e2 20 a9 02 85 25 e2 20 a0 00 00 b7 21 f0
>3a3618	03 c8 80 f9 c2 20 98 38 e5 8d 30 09 85 27 a9 00
>3a3628	00 85 29 80 07 a9 00 00 85 27 85 29 e2 20 a9 00
>3a3638	85 2b 20 49 12 e2 20 20 d8 1a 28 60 08 c2 20 48
>3a3648	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3658	29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3668	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3678	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3688	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3698	00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b
>3a36a8	08 c2 30 20 fb 16 e2 20 a5 25 c9 02 f0 03 4c 0d
>3a36b8	37 c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20 a7 00
>3a36c8	c9 2c f0 03 4c 2c 37 20 d8 1a 20 fb 16 e2 20 a5
>3a36d8	25 c9 00 d0 30 c2 20 a5 21 85 8d c2 20 a9 00 00
>3a36e8	85 27 a9 00 00 85 29 e2 20 a9 00 85 2b c2 20 68
>3a36f8	85 21 68 85 23 e2 20 a9 02 85 25 20 49 12 e2 20
>3a3708	20 d8 1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3718	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a3728	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3738	a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a3748	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3758	09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a3768	d2 08 e2 20 a9 8c 20 e5 1b 20 fb 16 c2 10 e2 20
>3a3778	a5 25 c9 02 d0 23 c2 20 a5 00 85 3e a5 02 85 40
>3a3788	a5 21 85 00 a5 23 85 02 20 3e 05 a5 3e 85 00 a5
>3a3798	40 85 02 e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08
>3a37a8	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a37b8	20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 08
>3a37c8	20 fb 16 c2 10 e2 20 a5 25 c9 00 d0 1d 20 b7 10
>3a37d8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25
>3a37e8	20 f1 11 28 e2 20 20 d8 1a 60 08 c2 20 48 a9 00
>3a37f8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a3808	00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b
>3a3818	08 20 fb 16 20 70 04 c2 20 64 0c 64 0e e2 30 a0
>3a3828	00 b7 21 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7 21
>3a3838	20 25 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e 06
>3a3848	0c 26 0e 06 0c 26 0e e2 20 20 46 03 05 0c 85 0c
>3a3858	c8 80 db c2 20 a5 0c 85 21 a5 0e 85 23 e2 20 a9
>3a3868	00 85 25 28 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5
>3a3878	1b 08 20 fb 16 20 46 04 20 66 10 e2 30 a0 ff a9
>3a3888	00 97 14 88 a5 21 29 0f aa bf 00 d0 3a 97 14 88
>3a3898	a5 21 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 14 88
>3a38a8	a5 22 85 21 a5 23 85 22 a5 24 85 23 a9 00 85 24
>3a38b8	a5 21 d0 d0 a5 22 d0 cc a5 23 d0 c8 98 38 65 14
>3a38c8	85 21 a5 15 85 22 a5 16 85 23 a5 17 85 24 a9 02
>3a38d8	85 25 20 f1 11 28 e2 20 20 d8 1a 60 08 c2 20 48
>3a38e8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a38f8	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3908	e5 1b 20 fb 16 e2 20 a5 25 c9 02 d0 1f 8b a5 23
>3a3918	48 ab c2 10 a6 21 20 3c 11 ab 84 21 c2 20 64 23
>3a3928	e2 20 a9 00 85 25 e2 20 20 d8 1a 60 08 c2 20 48
>3a3938	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3948	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3958	e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 12 e2 20 a7
>3a3968	21 85 21 64 22 64 23 64 2e e2 20 20 d8 1a 60 08
>3a3978	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3988	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20
>3a3998	a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 1d
>3a39a8	c2 20 a7 21 85 0c e2 20 a0 02 00 b7 21 85 23 64
>3a39b8	24 c2 20 a5 0c 85 21 e2 20 20 d8 1a 60 08 c2 20
>3a39c8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a39d8	20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c
>3a39e8	20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 0e c2 20
>3a39f8	a7 21 85 21 64 23 e2 20 20 d8 1a 60 08 c2 20 48
>3a3a08	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3a18	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3a28	e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 24 20 66 10
>3a3a38	a5 21 87 14 a9 00 a0 01 00 97 14 c2 20 a5 14 85
>3a3a48	21 a5 16 85 23 e2 20 a9 02 85 25 e2 20 20 d8 1a
>3a3a58	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3a68	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a3a78	e2 20 a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 02
>3a3a88	d0 14 a7 21 85 21 64 22 64 23 64 24 a9 00 85 25
>3a3a98	e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3aa8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a3ab8	e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 20 fb 16 e2
>3a3ac8	20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0
>3a3ad8	4e a5 22 d0 4a c2 10 20 66 10 a4 21 e2 20 a9 00
>3a3ae8	97 14 88 30 07 a9 20 97 14 88 10 fb a9 02 85 25
>3a3af8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 d8 1a 60
>3a3b08	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3b18	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08
>3a3b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3b38	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20
>3a3b48	a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 39
>3a3b58	e2 20 a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10
>3a3b68	20 66 10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09
>3a3b78	97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5
>3a3b88	16 85 23 e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08
>3a3b98	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a3ba8	20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3bb8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3bc8	4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 20 fb
>3a3bd8	16 20 46 04 c2 20 a5 23 10 17 49 ff ff 85 23 a5
>3a3be8	21 49 ff ff 18 69 01 00 85 21 a5 23 69 00 00 85
>3a3bf8	23 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5 1b 20 fb
>3a3c08	16 e2 20 a5 25 c9 00 d0 25 c2 20 a5 23 30 12 d0
>3a3c18	04 a5 21 f0 13 a9 00 00 85 23 a9 01 00 85 21 80
>3a3c28	07 a9 ff ff 85 23 85 21 e2 20 20 d8 1a 60 08 c2
>3a3c38	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3c48	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 00 ea 60
>3a3c58	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20
>3a3c68	a9 00 00 85 d7 e2 20 a9 36 85 d9 c2 30 a9 00 00
>3a3c78	a0 00 00 97 d7 a0 02 00 97 d7 a0 04 00 97 d7 20
>3a3c88	ae 1a 2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 36
>3a3c98	00 85 1a 20 ae 1a 20 8a 1d 28 ab 60 08 c2 20 64
>3a3ca8	53 a9 ff 7f 85 57 20 1b 02 20 39 1c 29 ff 00 c9
>3a3cb8	00 00 f0 2c c9 81 00 f0 1a 20 f9 1a 20 3e 05 a5
>3a3cc8	21 85 53 20 39 1c 29 ff 00 c9 00 00 f0 12 c9 81
>3a3cd8	00 d0 2a 20 e5 1b 20 f9 1a 20 3e 05 a5 21 85 57
>3a3ce8	a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 cc 12 68
>3a3cf8	85 00 68 85 02 68 85 18 68 85 1a 28 60 08 c2 20
>3a3d08	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3d18	20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 08 c2 20
>3a3d28	48 a9 00 08 5b 68 28 c2 20 64 e2 64 e5 e2 20 64
>3a3d38	e4 64 e7 64 e8 c2 20 38 a5 d7 69 04 00 85 df e2
>3a3d48	20 a5 d9 69 00 85 e1 28 60 c9 5f f0 1a c9 3a b0
>3a3d58	04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b b0
>3a3d68	04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0 00
>3a3d78	00 b7 0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0 f2 b7
>3a3d88	e5 20 6f 03 20 51 3d b0 03 28 38 60 28 18 60 08
>3a3d98	e2 20 c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b 20 6f
>3a3da8	03 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2
>3a3db8	20 a9 00 4e 85 e5 e2 20 a9 00 85 e7 c2 20 a5 e2
>3a3dc8	85 08 d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4 85 0a
>3a3dd8	a5 e8 a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69 01
>3a3de8	00 85 0c e2 20 a5 0a 69 00 85 0e 20 71 3d b0 2a
>3a3df8	a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08 85
>3a3e08	0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08 e2
>3a3e18	20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20 97
>3a3e28	3d b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3e38	05 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a3e48	d2 08 c2 30 a0 09 00 b7 08 85 21 c8 c8 b7 08 85
>3a3e58	23 e2 20 a0 00 00 b7 08 85 25 28 60 08 c2 20 18
>3a3e68	a5 df 69 10 00 85 08 e2 20 a5 e1 69 00 85 0a c5
>3a3e78	ba 90 27 c2 20 a5 08 c5 b8 90 1f 08 c2 20 48 a9
>3a3e88	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a3e98	ff 00 20 4d 18 e2 20 dc d2 08 c2 20 a5 df 85 be
>3a3ea8	e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2 20 a5 0a
>3a3eb8	85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 1f 08 c2 20
>3a3ec8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3ed8	20 29 ff 00 20 4d 18 e2 20 dc d2 08 c2 10 20 64
>3a3ee8	3e c2 30 18 a5 be 69 01 00 85 08 e2 20 a5 c0 69
>3a3ef8	00 85 0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8
>3a3f08	a0 00 00 b7 e5 f0 10 20 6f 03 20 51 3d 90 08 97
>3a3f18	08 c8 c0 08 00 d0 ec c2 20 a0 09 00 a5 21 97 be
>3a3f28	a5 23 c8 c8 97 be a5 e2 a0 0d 00 97 be c8 c8 e2
>3a3f38	20 a5 e4 97 be c2 20 a5 be 85 e2 e2 20 a5 c0 85
>3a3f48	e4 e2 20 a0 00 00 a5 25 97 be c9 02 f0 02 28 60
>3a3f58	c2 20 a5 21 85 be e2 20 a5 23 85 c0 20 7d 0e 20
>3a3f68	92 0e 80 ea 08 c2 30 a5 e2 d0 06 e2 20 a5 e4 f0
>3a3f78	05 20 97 3d b0 05 20 bc 3e 80 17 e2 20 a5 25 c9
>3a3f88	02 f0 11 c2 30 a0 09 00 a5 21 97 08 c8 c8 a5 23
>3a3f98	97 08 28 60 a0 09 00 b7 08 85 be c8 c8 e2 20 b7
>3a3fa8	08 85 c0 20 7d 0e 20 b1 0e e2 20 a5 25 c9 02 f0
>3a3fb8	02 80 d0 c2 20 a5 21 85 be e2 20 a5 23 85 c0 20
>3a3fc8	7d 0e 20 92 0e 80 bc 08 20 f9 1a e2 20 a7 00 20
>3a3fd8	fb 02 90 42 c2 20 a5 00 85 e5 e2 20 a5 02 85 e7
>3a3fe8	20 d8 1a a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20
>3a3ff8	51 3d b0 ec a9 00 80 0c 20 d8 1a a9 00 80 05 20
>3a4008	d8 1a a9 02 85 e8 20 39 1c c9 8c d0 06 a5 e8 09
>3a4018	80 85 e8 28 38 60 28 18 60 08 c2 20 48 a9 00 08
>3a4028	5b 68 28 c2 20 a5 21 85 0c a5 23 64 0e 64 21 64
>3a4038	23 e2 20 64 26 a9 01 85 25 c2 20 a5 0c f0 35 10
>3a4048	0e e2 20 a9 80 85 26 c2 20 49 ff ff 1a 85 0c e2
>3a4058	20 e6 24 c2 20 46 0e 66 0c e2 20 66 23 66 22 66
>3a4068	21 c2 20 a5 0c c9 01 00 d0 e5 e2 20 06 26 66 23
>3a4078	66 22 66 21 60 08 20 7d 0e c2 20 a9 01 00 85 21
>3a4088	a9 00 00 85 23 e2 20 af 00 4d 00 c2 20 29 ff 00
>3a4098	85 8d a8 a2 01 00 c2 20 bf 00 4d 00 85 27 a9 00
>3a40a8	00 85 29 20 53 21 e8 e8 88 d0 eb c2 20 a9 04 00
>3a40b8	85 27 a9 00 00 85 29 20 53 21 e2 20 af 00 4d 00
>3a40c8	85 0c a9 00 85 0d c2 20 06 0c 38 a5 21 65 0c 85
>3a40d8	21 a5 23 69 00 00 85 23 d0 29 e2 20 a5 e8 09 80
>3a40e8	a6 21 20 41 0c e2 20 af 00 4d 00 87 be a0 01 00
>3a40f8	a2 00 00 e2 20 bf 01 4d 00 97 be e4 8d f0 23 e8
>3a4108	c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4118	09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a4128	d2 08 e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85
>3a4138	09 a5 c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1
>3a4148	85 0c e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00
>3a4158	87 08 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>3a4168	00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08
>3a4178	c2 20 64 08 64 0a e2 20 af 00 4d 00 85 8d 64 8e
>3a4188	a2 01 00 e2 20 a7 be c5 8d f0 1f 08 c2 20 48 a9
>3a4198	00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29
>3a41a8	ff 00 20 4d 18 e2 20 dc d2 08 c9 01 f0 3a a0 01
>3a41b8	00 e2 20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7
>3a41c8	be 85 27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20
>3a41d8	53 21 c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85
>3a41e8	0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85
>3a41f8	8e 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a4208	00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20
>3a4218	38 a5 08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5
>3a4228	0a 69 00 00 85 0a 18 a5 08 65 be 85 08 e2 20 a5
>3a4238	0a 65 c0 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4248	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a4258	18 e2 20 dc d2 08 08 20 7d 0e e2 20 a0 00 00 b7
>3a4268	c1 29 7f c5 25 d0 28 a5 25 48 c2 20 a5 23 48 a5
>3a4278	21 48 20 77 41 68 85 21 68 85 23 e2 20 68 85 25
>3a4288	c2 20 a5 21 87 08 a0 02 00 a5 23 97 08 28 60 08
>3a4298	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a42a8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 20
>3a42b8	7d 0e f4 00 00 f4 00 00 e2 20 48 20 77 41 e2 20
>3a42c8	68 c2 20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08
>3a42d8	85 23 e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60 da
>3a42e8	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 23
>3a42f8	89 f0 ff d0 29 89 0f 00 d0 0c a5 21 89 00 fc d0
>3a4308	05 20 e4 33 80 2e a2 0a 00 46 23 66 21 ca d0 f9
>3a4318	20 e4 33 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14
>3a4328	00 46 23 66 21 ca d0 f9 20 e4 33 e2 20 a9 4d 20
>3a4338	18 00 c2 20 28 2b fa 60 0b 08 08 c2 20 48 a9 00
>3a4348	08 5b 68 28 c2 20 20 b7 10 20 62 43 a5 14 85 21
>3a4358	a5 16 85 23 20 c4 33 28 2b 60 5a 0b 08 08 c2 20
>3a4368	48 a9 00 08 5b 68 28 e2 20 a7 14 c9 20 d0 1c a0
>3a4378	02 00 b7 14 d0 06 a9 30 87 14 80 0f a0 01 00 b7
>3a4388	14 87 14 c2 20 e6 14 d0 02 e6 16 28 2b 7a 60 0b
>3a4398	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f 44 02
>3a43a8	00 a2 09 00 4a ca d0 fc 18 69 bc 07 85 21 64 23
>3a43b8	e2 20 a9 00 85 25 c2 20 20 e4 33 a9 2d 00 20 18
>3a43c8	00 c2 20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f
>3a43d8	00 85 21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43
>3a43e8	a9 2d 00 20 18 00 c2 20 af 44 02 00 29 1f 00 85
>3a43f8	21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43 28 2b
>3a4408	60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f
>3a4418	44 02 00 a2 0b 00 4a ca d0 fc 85 21 64 23 e2 20
>3a4428	a9 00 85 25 c2 20 20 e4 33 a9 3a 00 20 18 00 c2
>3a4438	20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f 00 85
>3a4448	21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43 a9 3a
>3a4458	00 20 18 00 c2 20 af 44 02 00 29 1f 00 85 21 64
>3a4468	23 e2 20 a9 00 85 25 c2 20 20 40 43 28 2b 60 0b
>3a4478	08 c2 30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20
>3a4488	20 39 1c c9 00 f0 08 20 fb 16 20 70 04 80 11 c2
>3a4498	20 a9 00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20
>3a44a8	20 01 46 22 08 11 00 b0 22 20 b2 46 08 c2 20 48
>3a44b8	a9 00 08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20
>3a44c8	29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a44d8	20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 d2
>3a44e8	00 c9 e5 d0 03 82 bf 00 a0 0b 00 b7 18 89 08 f0
>3a44f8	03 82 d5 00 89 02 f0 03 82 ac 00 29 0f c9 0f d0
>3a4508	03 82 a3 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00
>3a4518	c8 c0 08 00 d0 f1 a0 08 00 b7 18 c9 20 f0 17 a9
>3a4528	2e 20 18 00 a0 08 00 b7 18 c9 20 f0 09 20 18 00
>3a4538	c8 c0 0b 00 d0 f1 a9 09 20 18 00 a0 0b 00 b7 18
>3a4548	89 08 d0 60 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a4558	05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 a9
>3a4568	09 20 18 00 c2 20 a0 1c 00 b7 18 8f 21 08 00 c8
>3a4578	c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08 00 20
>3a4588	e7 42 e2 20 a9 09 20 18 00 c2 20 a0 10 00 b7 18
>3a4598	20 97 43 e2 20 a9 20 20 18 00 c2 20 a0 0e 00 b7
>3a45a8	18 20 09 44 20 1b 02 20 32 02 22 0c 11 00 90 03
>3a45b8	82 18 ff 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28
>3a45c8	20 1d 1b 20 1b 02 28 2b 60 08 c2 20 48 a9 20 03
>3a45d8	5b 68 28 e2 20 29 0f c9 0f f0 cc a9 5b 20 18 00
>3a45e8	a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00
>3a45f8	d0 f1 a9 5d 20 18 00 80 ab 0b 08 08 c2 20 48 a9
>3a4608	20 03 5b 68 28 c2 30 a9 22 f2 85 20 a9 3a 00 85
>3a4618	22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8
>3a4628	c2 20 a9 22 f0 8f 30 f2 3a a9 3a 00 8f 32 f2 3a
>3a4638	af 21 08 00 8f 24 f2 3a af 23 08 00 8f 26 f2 3a
>3a4648	28 2b 60 08 c2 30 20 f9 1a 20 fb 16 20 70 04 20
>3a4658	01 46 e2 20 a9 2c 85 35 20 1a 1c b0 0f c2 20 a9
>3a4668	ff ff 8f 54 03 00 8f 56 03 00 80 17 20 d8 1a 20
>3a4678	fb 16 20 46 04 c2 20 a5 21 8f 54 03 00 a5 23 8f
>3a4688	56 03 00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08
>3a4698	5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00
>3a46a8	20 4d 18 e2 20 dc d2 08 28 60 8b 0b 08 08 c2 20
>3a46b8	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a46c8	28 e2 20 af 2e 03 00 85 21 a9 00 85 22 85 23 85
>3a46d8	24 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 15 47
>3a46e8	85 e5 20 6c 3f e2 20 af 20 03 00 85 21 a9 00 85
>3a46f8	22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85 e7 c2
>3a4708	20 a9 1d 47 85 e5 20 6c 3f 28 2b ab 60 44 4f 53
>3a4718	53 54 41 54 00 42 49 4f 53 53 54 41 54 00 08 c2
>3a4728	30 20 f9 1a 20 fb 16 20 70 04 a5 21 8f 60 03 00
>3a4738	a5 23 8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03
>3a4748	00 22 24 11 00 b0 25 20 4d 18 20 b2 46 08 c2 20
>3a4758	48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2
>3a4768	20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 4d 18 28
>3a4778	60 08 c2 30 20 f9 1a 20 fb 16 20 70 04 20 01 46
>3a4788	a9 00 00 8f 54 03 00 a9 01 00 8f 56 03 00 20 58
>3a4798	3c 22 18 11 00 b0 22 20 b2 46 08 c2 20 48 a9 00
>3a47a8	08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff
>3a47b8	00 20 4d 18 e2 20 dc d2 08 20 b2 46 c2 20 a2 12
>3a47c8	00 18 bf 22 f2 3a 69 00 00 85 90 bf 24 f2 3a 69
>3a47d8	01 00 85 92 e2 20 a9 00 87 90 c2 20 a9 00 00 85
>3a47e8	78 a9 01 00 85 7a a2 00 00 e2 20 a7 78 f0 28 c9
>3a47f8	0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 78 d0
>3a4808	e8 e6 7a 80 e4 e2 20 a9 00 9d 00 4f 20 88 20 e6
>3a4818	78 d0 d3 e6 7a 80 cf e0 00 00 f0 0a e2 20 a9 00
>3a4828	9d 00 4f 20 88 20 28 60 08 c2 30 20 f9 1a 20 fb
>3a4838	16 20 70 04 20 01 46 e2 20 a9 2c 20 e5 1b c2 20
>3a4848	20 fb 16 20 46 04 a5 21 8f 50 03 00 a5 23 8f 52
>3a4858	03 00 e2 20 a9 2c c2 20 20 e5 1b 20 fb 16 20 46
>3a4868	04 a5 21 8f 58 03 00 a5 23 8f 5a 03 00 22 1c 11
>3a4878	00 b0 22 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28
>3a4888	e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a4898	e2 20 dc d2 08 20 b2 46 28 60 da 5a 08 a2 00 00
>3a48a8	a0 00 00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80 f5
>3a48b8	28 7a fa 60 08 c2 30 20 f9 1a 20 fb 16 20 70 04
>3a48c8	20 01 46 a9 00 00 85 a4 e2 20 a9 01 85 a6 a9 20
>3a48d8	85 b2 c2 20 a9 00 00 85 a9 a9 ff ff 85 a7 c2 20
>3a48e8	a9 00 00 85 53 85 55 a9 ff ff 85 57 a9 ff 7f 85
>3a48f8	59 20 cc 12 e2 20 a9 80 85 b2 c2 20 c6 a9 18 a9
>3a4908	00 00 8f 50 03 00 65 a9 8f 58 03 00 a9 01 00 8f
>3a4918	52 03 00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22
>3a4928	20 b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4938	12 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a4948	d2 08 20 b2 46 28 60 08 c2 30 20 f9 1a 20 fb 16
>3a4958	20 70 04 20 a2 48 22 04 11 00 b0 22 20 b2 46 08
>3a4968	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13 8f d1 08
>3a4978	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 b2
>3a4988	46 28 60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29
>3a4998	df 80 13 c9 20 90 13 a2 00 00 df b6 49 3a f0 0a
>3a49a8	e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b
>3a49b8	2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2
>3a49c8	20 48 a9 00 08 5b 68 28 c2 30 20 fb 16 20 70 04
>3a49d8	20 a2 48 22 10 11 00 b0 22 20 b2 46 08 c2 20 48
>3a49e8	a9 00 08 5b 68 28 e2 20 a9 14 8f d1 08 00 c2 20
>3a49f8	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 2c 20
>3a4a08	e5 1b c2 20 20 fb 16 20 70 04 ad 38 03 85 08 ad
>3a4a18	3a 03 85 0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b
>3a4a28	00 d0 f8 a2 00 00 a0 00 00 b7 21 f0 6d c9 2e f0
>3a4a38	30 22 8b 49 3a b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a4a48	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a4a58	18 e2 20 dc d2 08 95 7c c8 e8 c0 08 00 d0 ca 80
>3a4a68	01 c8 a2 08 00 b7 21 f0 31 22 8b 49 3a b0 22 20
>3a4a78	b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a4a88	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a4a98	08 95 7c c8 e8 c0 0b 00 d0 cb a2 00 00 a0 00 00
>3a4aa8	b5 7c 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0
>3a4ab8	22 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4ac8	a9 15 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a4ad8	dc d2 08 20 b2 46 28 60 5c 9d 64 3a 5c ee 62 3a
>3a4ae8	5c 9e 64 3a 5c 1a 54 3a 5c 77 54 3a 5c aa 53 3a
>3a4af8	5c 30 53 3a 5c ad 58 3a 5c 9b 4f 3a 5c c8 52 3a
>3a4b08	5c 83 52 3a 5c 0d 52 3a 5c ac 63 3a 5c a9 50 3a
>3a4b18	5c ff 4e 3a 5c 27 64 3a 5c d7 4f 3a 5c a0 64 3a
>3a4b28	5c 99 64 3a 5c c6 51 3a 5c a1 64 3a 18 fb c2 20
>3a4b38	a9 ff fe 1b 58 5c 41 4b 3a c2 30 22 ff 4e 3a 20
>3a4b48	08 00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20
>3a4b58	7e 03 ab 22 e4 4a 3a 22 ec 4a 3a 80 e2 08 8b e2
>3a4b68	20 a9 3a 48 ab c2 10 a2 78 4b 20 a8 02 ab 28 6b
>3a4b78	41 20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d
>3a4b88	62 6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20
>3a4b98	61 20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74
>3a4ba8	61 72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b
>3a4bb8	6c 65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29
>3a4bc8	5d 0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73
>3a4bd8	65 63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72
>3a4be8	79 0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e
>3a4bf8	64 5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65
>3a4c08	20 61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73
>3a4c18	74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74
>3a4c28	65 3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63
>3a4c38	6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68
>3a4c48	20 61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72
>3a4c58	65 73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65
>3a4c68	63 75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61
>3a4c78	74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73
>3a4c88	5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f
>3a4c98	63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79
>3a4ca8	0d 20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a4cb8	61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4cc8	0d 48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a4cd8	20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e
>3a4ce8	0d 20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75
>3a4cf8	65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20
>3a4d08	20 20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20
>3a4d18	20 22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61
>3a4d28	74 69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20
>3a4d38	5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65
>3a4d48	20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79
>3a4d58	0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68
>3a4d68	65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20
>3a4d78	72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43
>3a4d88	3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53
>3a4d98	50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e
>3a4da8	56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67
>3a4db8	65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f
>3a4dc8	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a4dd8	0d 53 20 20 20 20 20 53 41 56 45 20 20 20 20 20
>3a4de8	20 20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72
>3a4df8	74 3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72
>3a4e08	74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e
>3a4e18	61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65
>3a4e28	72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69
>3a4e38	74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c
>3a4e48	62 79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20
>3a4e58	72 65 67 69 73 74 65 72 20 77 69 64 74 68 20 66
>3a4e68	6c 61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73
>3a4e78	61 73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52
>3a4e88	65 74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a4e98	3e 20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e
>3a4ea8	20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69
>3a4eb8	74 20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79
>3a4ec8	0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20
>3a4ed8	73 68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65
>3a4ee8	6e 0d 0d 00 08 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4ef8	20 a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a 48 ab 68
>3a4f08	28 a2 de 64 20 a8 02 e2 20 a9 3b 20 18 00 a9 20
>3a4f18	20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0
>3a4f28	03 00 a2 42 02 20 2b 02 c2 20 a9 20 00 20 18 00
>3a4f38	af 44 02 00 20 b8 02 a9 20 00 20 18 00 af 46 02
>3a4f48	00 20 b8 02 a9 20 00 20 18 00 af 48 02 00 20 b8
>3a4f58	02 a9 20 00 20 18 00 af 4a 02 00 20 b8 02 a9 20
>3a4f68	00 20 18 00 af 4e 02 00 20 d2 02 a9 20 00 20 18
>3a4f78	00 20 18 00 af 4c 02 00 20 b8 02 a9 20 00 20 18
>3a4f88	00 08 e2 20 ad 4f 02 22 f7 61 3a 28 20 1b 02 20
>3a4f98	1b 02 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4fa8	20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>3a4fb8	0d c5 11 d0 06 20 1b 02 2b 28 6b c2 20 18 a5 0d
>3a4fc8	69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>3a4fd8	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 0f c5
>3a4fe8	17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>3a4ff8	15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>3a5008	8e 50 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a5018	69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>3a5028	a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>3a5038	19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>3a5048	85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>3a5058	a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>3a5068	c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>3a5078	85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>3a5088	e9 00 85 16 80 c4 20 1b 02 2b 28 6b 08 e2 20 c9
>3a5098	21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>3a50a8	6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a50b8	a9 00 8f b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>3a50c8	c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a50d8	85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a50e8	c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a50f8	85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a5108	34 85 1b e2 20 a7 19 22 94 50 3a b0 02 a9 3f 99
>3a5118	7c 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a5128	69 00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9
>3a5138	3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 d2 02
>3a5148	a9 3a 20 18 00 c2 20 a5 32 20 b8 02 c2 20 a9 08
>3a5158	00 85 47 e2 20 a9 20 20 18 00 a7 32 20 d2 02 22
>3a5168	d6 61 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a5178	20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08
>3a5188	20 a8 02 20 1b 02 20 32 02 a5 34 c5 13 90 0f c2
>3a5198	20 a5 32 c5 11 90 07 20 1b 02 2b ab 28 6b 4c fa
>3a51a8	50 08 8d 90 08 e2 20 bd 00 00 99 00 00 ad 90 08
>3a51b8	f0 0a c8 e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b
>3a51c8	8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9
>3a51d8	00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>3a51e8	20 a5 31 3a 85 47 a2 57 08 a0 7c 08 22 a9 51 3a
>3a51f8	a0 00 00 b9 7c 08 87 32 22 d6 61 3a c8 c4 47 d0
>3a5208	f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b
>3a5218	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a5228	a5 31 3a 3a 85 47 a2 5b 08 a0 7c 08 22 a9 51 3a
>3a5238	c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>3a5248	d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>3a5258	7c 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>3a5268	34 85 4c 22 80 5c 3a e2 20 a9 20 20 18 00 22 d6
>3a5278	61 3a 80 c6 20 1b 02 ab 2b 28 6b 08 c2 20 48 a9
>3a5288	46 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>3a5298	40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>3a52a8	02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>3a52b8	3a 48 a9 52 48 a9 c3 48 4c fa 52 ea 5c 04 00 3a
>3a52c8	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9
>3a52d8	c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a52e8	02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a52f8	00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a0 08 00
>3a5308	af 42 02 00 8f a3 08 00 af 41 02 00 8f a2 08 00
>3a5318	af 40 02 00 8f a1 08 00 af 4f 02 00 48 c2 20 af
>3a5328	44 02 00 28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9
>3a5338	3a 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a5348	10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>3a5358	15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 a2
>3a5368	64 20 a8 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>3a5378	00 e2 20 a7 4a d7 11 f0 09 22 80 5c 3a a9 20 20
>3a5388	18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>3a5398	00 85 4c c8 c4 47 d0 d9 20 1b 02 20 1b 02 ab 2b
>3a53a8	28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a53b8	c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6
>3a53c8	0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>3a53d8	44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>3a53e8	19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>3a53f8	1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>3a5408	8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>3a5418	28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a5428	20 c2 10 a2 00 00 bf 0f 65 3a f0 18 c7 08 f0 03
>3a5438	e8 80 f3 c2 20 8a 0a aa bf 50 54 3a 8f 2d 08 00
>3a5448	22 74 54 3a ab 2b 28 6b f0 4a f8 4a fc 4a 00 4b
>3a5458	04 4b 08 4b 0c 4b 10 4b 14 4b 18 4b f4 4a 1c 4b
>3a5468	20 4b 24 4b ec 4e 28 4b 2c 4b 65 4b 6c 2d 08 08
>3a5478	8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31
>3a5488	c9 02 b0 03 4c 1d 56 c2 20 a5 0d 85 32 a5 0f 85
>3a5498	34 c2 20 22 1f 58 3a c9 ff ff f0 10 85 54 e2 20
>3a54a8	a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 1b 02 08
>3a54b8	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 54 56 20 a8
>3a54c8	02 4c 1d 56 20 1b 02 08 e2 20 48 a9 3a 48 ab 68
>3a54d8	28 c2 10 a2 63 56 20 a8 02 4c 1d 56 e2 20 22 55
>3a54e8	58 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>3a54f8	c9 13 f0 04 c9 08 f0 00 22 4d 57 3a b0 03 4c e6
>3a5508	55 87 32 22 d6 61 3a 08 e2 20 48 a9 00 48 ab 68
>3a5518	28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>3a5528	12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>3a5538	03 4c 14 56 c2 20 29 ff 00 aa e2 20 bf 1c 61 3a
>3a5548	c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>3a5558	a5 54 c9 94 5d f0 26 c9 f8 5d f0 2a c9 78 5d f0
>3a5568	1c c9 7c 5d f0 17 c9 84 5d f0 12 c9 6c 5d f0 0d
>3a5578	c9 80 5d f0 08 c9 68 5d f0 03 4c 00 55 e2 20 a9
>3a5588	12 85 4f 4c 00 55 e2 20 a9 16 85 4f 4c 00 55 22
>3a5598	90 56 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96
>3a55a8	08 97 56 22 d6 61 3a a0 01 00 b9 96 08 97 56 22
>3a55b8	d6 61 3a a0 00 00 b9 96 08 97 56 22 d6 61 3a e2
>3a55c8	20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>3a55d8	34 86 4c 22 80 5c 3a a9 20 20 18 00 80 37 20 1b
>3a55e8	02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 21 56
>3a55f8	20 a8 02 80 20 20 1b 02 08 e2 20 48 a9 3a 48 ab
>3a5608	68 28 c2 10 a2 71 56 20 a8 02 80 09 a5 4f 29 c0
>3a5618	d0 95 4c bb 55 2b ab 28 6b 41 64 64 72 65 73 73
>3a5628	69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>3a5638	69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>3a5648	73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>3a5658	6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>3a5668	70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>3a5678	65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>3a5688	6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46
>3a5698	08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>3a56a8	32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>3a56b8	a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>3a56c8	e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>3a56d8	a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>3a56e8	d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>3a56f8	d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>3a5708	18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>3a5718	46 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08
>3a5728	e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>3a5738	26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>3a5748	50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a5758	28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29
>3a5768	3f 85 4a c2 30 a2 00 00 a0 00 00 bd 1a 5e f0 1b
>3a5778	c5 54 d0 0d e2 20 b9 1c 60 29 3f c5 4a f0 07 c2
>3a5788	20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>3a5798	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0
>3a57a8	00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>3a57b8	36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>3a57c8	28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>3a57d8	30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>3a57e8	61 b0 02 80 de 29 df 22 0e 57 3a 80 cb 0b 08 c2
>3a57f8	20 48 a9 46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>3a5808	03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>3a5818	69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b
>3a5828	68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 a8 5c 85
>3a5838	03 a9 3a 00 85 05 22 97 57 3a b0 0d 22 f5 57 3a
>3a5848	a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>3a5858	c2 20 48 a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5
>3a5868	17 85 38 a9 34 61 85 03 a9 3a 00 85 05 22 97 57
>3a5878	3a b0 22 22 f5 57 3a c2 20 18 a5 03 69 01 00 85
>3a5888	03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>3a5898	a9 ff ff 80 0d 22 f5 57 3a e2 20 a7 03 c2 20 29
>3a58a8	ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b
>3a58b8	68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02 b0 16
>3a58c8	c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>3a58d8	a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>3a58e8	85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>3a58f8	a5 34 69 00 85 13 22 19 59 3a e2 20 a5 34 c5 13
>3a5908	90 f4 c2 20 a5 32 c5 11 90 ec 20 1b 02 2b ab 28
>3a5918	6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>3a5928	c2 20 48 a9 78 08 5b 68 28 c2 20 a5 00 85 18 e2
>3a5938	20 a5 02 85 1a 22 80 5c 3a a9 20 20 18 00 c2 20
>3a5948	18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>3a5958	e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>3a5968	94 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 94 08 00
>3a5978	8f 94 08 00 68 c2 20 29 ff 00 0a aa bf 1a 5e 3a
>3a5988	aa 22 fa 5b 3a e2 20 a7 00 aa bf 1c 60 3a 22 d6
>3a5998	61 3a 22 a7 59 3a 20 1b 02 20 32 02 2b 28 6b 08
>3a59a8	e2 20 48 29 3f 0a c2 10 aa 68 7c b5 59 e5 59 00
>3a59b8	5a 07 5a 2c 5a 33 5a 4e 5a 70 5a 81 5a be 5a c6
>3a59c8	5a d7 5a e8 5a ef 5a 14 5b 41 5b ad 5a 92 5a 5f
>3a59d8	5a 34 5b 3e 5b 52 5b 81 5b 2f 5b 92 5b a9 28 20
>3a59e8	18 00 22 a9 5b 3a a9 2c 20 18 00 a9 58 20 18 00
>3a59f8	a9 29 20 18 00 4c a3 5b 22 a9 5b 3a 4c a3 5b e2
>3a5a08	20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>3a5a18	2f 94 08 00 d0 07 22 b3 5b 3a 4c a3 5b 22 a9 5b
>3a5a28	3a 4c a3 5b 22 b3 5b 3a 4c a3 5b a9 28 20 18 00
>3a5a38	22 a9 5b 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>3a5a48	20 18 00 4c a3 5b 22 a9 5b 3a a9 2c 20 18 00 a9
>3a5a58	58 20 18 00 4c a3 5b 22 a9 5b 3a a9 2c 20 18 00
>3a5a68	a9 59 20 18 00 4c a3 5b 22 b3 5b 3a a9 2c 20 18
>3a5a78	00 a9 59 20 18 00 4c a3 5b 22 b3 5b 3a a9 2c 20
>3a5a88	18 00 a9 58 20 18 00 4c a3 5b a9 28 20 18 00 22
>3a5a98	b3 5b 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a5aa8	18 00 4c a3 5b a9 28 20 18 00 22 a9 5b 3a a9 29
>3a5ab8	20 18 00 4c a3 5b a9 41 20 18 00 4c a7 5b 22 a9
>3a5ac8	5b 3a a9 2c 20 18 00 a9 53 20 18 00 4c a3 5b a9
>3a5ad8	5b 20 18 00 22 a9 5b 3a a9 5d 20 18 00 4c a3 5b
>3a5ae8	22 c1 5b 3a 4c a7 5b a9 28 20 18 00 22 a9 5b 3a
>3a5af8	a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>3a5b08	2c 20 18 00 a9 59 20 18 00 4c a3 5b a9 5b 20 18
>3a5b18	00 22 a9 5b 3a a9 5d 20 18 00 a9 2c 20 18 00 a9
>3a5b28	59 20 18 00 4c a3 5b a0 02 00 80 03 a0 01 00 22
>3a5b38	27 5c 3a 4c a7 5b 4c a7 5b 22 c1 5b 3a a9 2c 20
>3a5b48	18 00 a9 58 20 18 00 4c a7 5b a9 23 20 18 00 8b
>3a5b58	a5 02 48 ab a6 00 e8 a0 01 00 22 2b 02 3a a9 2c
>3a5b68	20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 2b 02
>3a5b78	3a ab 22 d6 61 3a 4c a3 5b a9 28 20 18 00 22 b3
>3a5b88	5b 3a a9 29 20 18 00 4c a3 5b a9 5b 20 18 00 22
>3a5b98	b3 5b 3a a9 5d 20 18 00 4c a3 5b 22 d6 61 3a 28
>3a5ba8	6b 08 e2 20 a7 00 20 d2 02 28 6b 08 c2 30 a7 00
>3a5bb8	20 b8 02 22 d6 61 3a 28 6b 08 8b 0b c2 30 5a 08
>3a5bc8	c2 20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00 48
>3a5bd8	ab 68 28 e2 20 a0 00 00 a7 00 99 90 08 22 d6 61
>3a5be8	3a c8 c0 03 00 d0 f1 22 80 5c 3a c2 30 7a 2b ab
>3a5bf8	28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab
>3a5c08	68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a5c18	bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>3a5c28	0b 08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02 00
>3a5c38	f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>3a5c48	85 19 85 1a 80 16 a7 00 85 18 22 d6 61 3a a7 00
>3a5c58	85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>3a5c68	00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 80 5c
>3a5c78	3a 22 d6 61 3a 2b 28 6b 08 0b c2 20 48 08 c2 20
>3a5c88	48 a9 46 08 5b 68 28 e2 20 a5 4c 20 d2 02 e2 20
>3a5c98	a9 3a 20 18 00 c2 20 a5 4a 20 b8 02 68 2b 28 6b
>3a5ca8	4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>3a5cb8	53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>3a5cc8	41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>3a5cd8	53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>3a5ce8	42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>3a5cf8	43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>3a5d08	52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>3a5d18	50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>3a5d28	49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>3a5d38	43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>3a5d48	43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>3a5d58	54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>3a5d68	42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>3a5d78	42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>3a5d88	54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>3a5d98	50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>3a5da8	50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>3a5db8	50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>3a5dc8	54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>3a5dd8	54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>3a5de8	43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>3a5df8	42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>3a5e08	4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>3a5e18	00 00 00 5d a8 5c e8 5d a8 5c 88 5d a8 5c c8 5c
>3a5e28	a8 5c 10 5d a8 5c c8 5c a8 5d 88 5d a8 5c c8 5c
>3a5e38	a8 5c 68 5d a8 5c a8 5c a8 5c 8c 5d a8 5c c8 5c
>3a5e48	a8 5c 30 5d a8 5c e4 5c c8 5d 8c 5d a8 5c c8 5c
>3a5e58	a8 5c 04 5d ac 5c ec 5d ac 5c e8 5c ac 5c cc 5c
>3a5e68	ac 5c 14 5d ac 5c cc 5c ac 5d e8 5c ac 5c cc 5c
>3a5e78	ac 5c 6c 5d ac 5c ac 5c ac 5c e8 5c ac 5c cc 5c
>3a5e88	ac 5c 34 5d ac 5c e0 5c cc 5d e8 5c ac 5c cc 5c
>3a5e98	ac 5c 08 5d b0 5c f0 5d b0 5c 04 5e b0 5c d0 5c
>3a5ea8	b0 5c 18 5d b0 5c d0 5c b0 5d ec 5c b0 5c d0 5c
>3a5eb8	b0 5c 70 5d b0 5c b0 5c b0 5c 08 5e b0 5c d0 5c
>3a5ec8	b0 5c 38 5d b0 5c 98 5d d0 5d 14 5e b0 5c d0 5c
>3a5ed8	b0 5c 0c 5d b4 5c f4 5d b4 5c 90 5d b4 5c d4 5c
>3a5ee8	b4 5c 1c 5d b4 5c d4 5c b4 5d ec 5c b4 5c d4 5c
>3a5ef8	b4 5c 74 5d b4 5c b4 5c b4 5c 90 5d b4 5c d4 5c
>3a5f08	b4 5c 3c 5d b4 5c 9c 5d d4 5d ec 5c b4 5c d4 5c
>3a5f18	b4 5c 94 5d b8 5c f8 5d b8 5c f0 5c b8 5c d8 5c
>3a5f28	b8 5c 20 5d e8 5c 50 5d b8 5d f0 5c b8 5c d8 5c
>3a5f38	b8 5c 78 5d b8 5c b8 5c b8 5c f0 5c b8 5c d8 5c
>3a5f48	b8 5c 40 5d b8 5c 54 5d d8 5d 90 5d b8 5c 90 5d
>3a5f58	b8 5c f4 5c bc 5c dc 5c bc 5c f4 5c bc 5c dc 5c
>3a5f68	bc 5c 24 5d bc 5c 58 5d bc 5d f4 5c bc 5c dc 5c
>3a5f78	bc 5c 7c 5d bc 5c bc 5c bc 5c f4 5c bc 5c dc 5c
>3a5f88	bc 5c 44 5d bc 5c 5c 5d dc 5d f4 5c bc 5c dc 5c
>3a5f98	bc 5c f8 5c c0 5c fc 5d c0 5c f8 5c c0 5c e0 5c
>3a5fa8	c0 5c 28 5d c0 5c 60 5d c0 5d f8 5c c0 5c e0 5c
>3a5fb8	c0 5c 80 5d c0 5c c0 5c c0 5c 0c 5e c0 5c e0 5c
>3a5fc8	c0 5c 48 5d c0 5c a0 5d e0 5d 14 5e c0 5c e0 5c
>3a5fd8	c0 5c fc 5c c4 5c 00 5e c4 5c fc 5c c4 5c e4 5c
>3a5fe8	c4 5c 2c 5d c4 5c 64 5d c4 5d fc 5c c4 5c e4 5c
>3a5ff8	c4 5c 84 5d c4 5c c4 5c c4 5c 10 5e c4 5c e4 5c
>3a6008	c4 5c 4c 5d c4 5c a4 5d e4 5d 04 5d c4 5c e4 5c
>3a6018	c4 5c 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>3a6028	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>3a6038	03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>3a6048	03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>3a6058	07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>3a6068	03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>3a6078	0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>3a6088	15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>3a6098	10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>3a60a8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a60b8	03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>3a60c8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a60d8	07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>3a60e8	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>3a60f8	17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>3a6108	03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>3a6118	10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>3a6128	01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>3a6138	64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>3a6148	64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>3a6158	59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>3a6168	64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>3a6178	64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>3a6188	64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>3a6198	64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>3a61a8	28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>3a61b8	28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>3a61c8	64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>3a61d8	20 48 18 af 78 08 00 69 01 00 8f 78 08 00 e2 20
>3a61e8	af 7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b 08
>3a61f8	c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>3a6208	00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>3a6218	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0 0a
>3a6228	c9 20 d0 06 22 d6 61 3a 80 f2 6b 08 08 c2 20 48
>3a6238	a9 46 08 5b 68 28 22 d6 61 3a 22 18 62 3a c2 30
>3a6248	a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>3a6258	95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 d6 61 3a
>3a6268	80 f2 a9 00 87 32 22 d6 61 3a e6 31 28 6b 08 c2
>3a6278	20 48 a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50
>3a6288	64 52 e2 20 a7 32 c9 3a f0 0d 20 25 03 90 0e 22
>3a6298	0e 57 3a a9 01 85 4a 22 d6 61 3a 80 e5 a5 4a f0
>3a62a8	16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>3a62b8	52 95 0f e2 20 e6 31 6b e2 20 64 31 22 18 62 3a
>3a62c8	a7 32 f0 21 c9 22 d0 06 22 33 62 3a 80 0a 22 76
>3a62d8	62 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>3a62e8	20 25 03 b0 d7 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a62f8	68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>3a6308	85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>3a6318	18 62 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>3a6328	34 85 0a a2 01 00 22 d6 61 3a a7 32 d0 06 86 0b
>3a6338	64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>3a6348	32 22 d6 61 3a a7 08 c9 41 f0 07 22 c0 62 3a 2b
>3a6358	28 6b 22 18 62 3a a7 32 f0 f5 22 76 62 3a 22 18
>3a6368	62 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>3a6378	85 13 22 d6 61 3a a7 32 f0 26 c9 20 d0 f4 a9 00
>3a6388	87 32 e6 31 22 d6 61 3a 22 18 62 3a a7 32 f0 bf
>3a6398	c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>3a63a8	e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 a2 64
>3a63b8	a9 3a 48 ab 20 a8 02 20 1b 02 80 61 c2 20 a5 0d
>3a63c8	8f 21 08 00 a5 0f 8f 23 08 00 20 01 46 e2 20 a5
>3a63d8	31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a63e8	03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>3a63f8	03 00 22 18 11 00 b0 25 e2 20 a2 c8 64 a9 3a 48
>3a6408	ab 20 a8 02 af 2e 03 00 20 d2 02 a9 20 20 18 00
>3a6418	af 20 03 00 20 d2 02 20 1b 02 20 1b 02 28 6b 8b
>3a6428	08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 a2 64 a9 3a
>3a6438	48 ab 20 a8 02 20 1b 02 80 54 c2 20 a5 0d 8f 21
>3a6448	08 00 a5 0f 8f 23 08 00 20 01 46 a5 11 8f 50 03
>3a6458	00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a6468	5a 03 00 22 1c 11 00 b0 25 e2 20 a2 b2 64 a9 3a
>3a6478	48 ab 20 a8 02 af 2e 03 00 20 d2 02 a9 20 20 18
>3a6488	00 af 20 03 00 20 d2 02 20 1b 02 20 1b 02 28 ab
>3a6498	6b 5c bb 20 3a 6b 00 00 00 00 42 61 64 20 61 72
>3a64a8	67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>3a64b8	20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a64c8	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a64d8	69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>3a64e8	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3a64f8	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3a6508	58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>3a6518	52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>3a6528	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a6538	c2 30 20 61 65 a9 ff fe 1b 08 e2 20 48 a9 3a 48
>3a6548	ab 68 28 a2 03 d2 20 a8 02 08 e2 20 48 a9 00 48
>3a6558	ab 68 28 4c bb 20 4c 5e 65 08 20 af 01 20 58 3c
>3a6568	28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a6578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1703 times (27248 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49
>3ad168	4e 50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54
>3ad178	45 58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f
>3ad188	4c 4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44
>3ad198	41 54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54
>3ad1a8	54 49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53
>3ad1b8	45 54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43
>3ad1c8	4c 52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49
>3ad1d8	4e 45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53
>3ad1e8	50 52 49 54 45 41 54 00 53 50 52 49 54 45 53 48
>3ad1f8	4f 57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad208	46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad218	76 30 2e 31 2e 30 2d 61 6c 70 68 61 2b 32 38 0d
>3ad228	00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
