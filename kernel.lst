
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Tue Dec 31 15:30:26 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000337				SDOS_FILE_REC_PTR= $000337 ; 3 byte pointer to a simple file struct
=$00033a				SDOS_LOOP        = $00033A ; variable to count file length
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 00 39	jmp $390000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 00 39	jmp $390008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 00 39	jmp $390008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 00 39	jmp $390008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 ad 82 39	jsl $3982ad	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 7f 81 39	jsl $39817f	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 68 80 39	jmp $398068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 12 06 39	jmp $390612	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE = 0        ; Channel number for the screen/keyboard
=1					CHAN_COM1 = 1           ; Channel number for the external serial port
=2					CHAN_COM2 = 2           ; Channel number for the internal serial port
=3					CHAN_LPT = 3            ; Channel number for the parallel port
=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				LFSR          = $AFE804
=$afe808				PCB_REV_C     = $AFE808
=$afe809				PCB_REV_X     = $AFE809
=$afe80a				PCB_REV_1     = $AFE80A
=$afe80b				PCB_REV_EOL   = $AFE80B
=$afe80c				DIP_OPTIONS   = $AFE80C
=$afe80d				DIP_MEM_SIZE  = $AFE80D
=$afe80e				DIP_BOOTMODE  = $AFE80E
=$80					HD_INSTALLED  = $80
=$02					BOOT_MODE1    = $02
=$01					BOOT_MODE0    = $01
=$afe80f				MACHINE_ID    = $AFE80F
=$afe810				SDCARD_DATA   = $AFE810  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register
=$afe830				IDE_DATA_LO   = $AFE830 ; ALways Read or Write that Register in 16Bits
=$afe831				IDE_DATA_HI   = $AFE831
=$afe832				IDE_ERROR     = $AFE832 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe834				IDE_SECT_CNT  = $AFE834 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe836				IDE_SECT_SRT  = $AFE836 ; Start Sector Register (0 = 256), so start @ 1
=$afe838				IDE_CLDR_LO   = $AFE838 ; Low Byte of Cylinder Numnber {7:0}
=$afe83a				IDE_CLDR_HI   = $AFE83A ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe83c				IDE_HEAD      = $AFE83C ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe83e				IDE_CMD_STAT  = $AFE83E ; Command/Status Register - Reading this will clear the Interrupt Registers

;******  Return to file: src\kernel.asm


;******  Processing file: src\monitor.asm

.398000	5c 5c 80 39	jmp $39805c	MONITOR         JML IMONITOR
.398004	5c 8a 80 39	jmp $39808a	MSTATUS         JML IMSTATUS
.398008	5c 68 80 39	jmp $398068	MREADY          JML IMREADY
.39800c	5c 35 81 39	jmp $398135	MRETURN         JML IMRETURN
.398010	5c 36 81 39	jmp $398136	MPARSE          JML IMPARSE
.398014	5c 37 81 39	jmp $398137	MPARSE1         JML IMPARSE1
.398018	5c 38 81 39	jmp $398138	MEXECUTE        JML IMEXECUTE
.39801c	5c 39 81 39	jmp $398139	MASSEMBLE       JML IMASSEMBLE
.398020	5c 3a 81 39	jmp $39813a	MASSEMBLEA      JML IMASSEMBLEA
.398024	5c 3b 81 39	jmp $39813b	MCOMPARE        JML IMCOMPARE
.398028	5c 3c 81 39	jmp $39813c	MDISASSEMBLE    JML IMDISASSEMBLE
.39802c	5c 3d 81 39	jmp $39813d	MFILL           JML IMFILL
.398030	5c 3f 81 39	jmp $39813f	MJUMP           JML IMJUMP
.398034	5c 40 81 39	jmp $398140	MHUNT           JML IMHUNT
.398038	5c 41 81 39	jmp $398141	MLOAD           JML IMLOAD
.39803c	5c 42 81 39	jmp $398142	MMEMORY         JML IMMEMORY
.398040	5c 43 81 39	jmp $398143	MREGISTERS      JML IMREGISTERS
.398044	5c 44 81 39	jmp $398144	MSAVE           JML IMSAVE
.398048	5c 45 81 39	jmp $398145	MTRANSFER       JML IMTRANSFER
.39804c	5c 46 81 39	jmp $398146	MVERIFY         JML IMVERIFY
.398050	5c 47 81 39	jmp $398147	MEXIT           JML IMEXIT
.398054	5c 48 81 39	jmp $398148	MMODIFY         JML IMMODIFY
.398058	5c 49 81 39	jmp $398149	MDOS            JML IMDOS
.39805c	18		clc		IMONITOR        CLC           ; clear the carry flag
.39805d	fb		xce		                XCE           ; move carry to emulation flag.
.39805e	c2 20		rep #$20	                REP #$20        ; set A long
.398060	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.398063	1b		tcs		                TAS
.398064	5c 68 80 39	jmp $398068	                JML IMREADY
.398068					IMREADY
.398068	c2 30		rep #$30	                REP #$30        ; set A&X long
.39806a	a9 68 80	lda #$8068	                LDA #<>IMREADY
.39806d	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.398070	e2 20		sep #$20	                SEP #$20        ; set A short
.398072	a9 39		lda #$39	                LDA #`IMREADY
.398074	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.398077	c2 20		rep #$20	                REP #$20        ; set A long
.398079	a9 35 81	lda #$8135	                LDA #<>IMRETURN
.39807c	8d f1 ff	sta $fff1	                STA RETURN+1
.39807f	e2 20		sep #$20	                SEP #$20        ; set A short
.398081	a9 39		lda #$39	                LDA #`IMRETURN
.398083	8d f3 ff	sta $fff3	                STA RETURN+3
.398086	5c 8a 80 39	jmp $39808a	                JML IMSTATUS
.39808a					IMSTATUS
.39808a	48		pha		                PHA             ; begin setdbr macro
.39808b	08		php		                PHP
.39808c	e2 20		sep #$20	                SEP #$20        ; set A short
.39808e	a9 39		lda #$39	                LDA #`mregisters_msg
.398090	48		pha		                PHA
.398091	ab		plb		                PLB
.398092	28		plp		                PLP
.398093	68		pla		                PLA             ; end setdbr macro
.398094	a2 50 81	ldx #$8150	                LDX #<>mregisters_msg
.398097	22 55 06 39	jsl $390655	                JSL IPRINT
.39809b	e2 20		sep #$20	                SEP #$20        ; set A short
.39809d	a9 3b		lda #$3b	                LDA #';'
.39809f	22 75 06 39	jsl $390675	                JSL IPUTC
.3980a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3980a5	48		pha		                PHA             ; begin setdbr macro
.3980a6	08		php		                PHP
.3980a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3980a9	a9 00		lda #$00	                LDA #$0
.3980ab	48		pha		                PHA
.3980ac	ab		plb		                PLB
.3980ad	28		plp		                PLP
.3980ae	68		pla		                PLA             ; end setdbr macro
.3980af	a0 03 00	ldy #$0003	                LDY #3
.3980b2	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3980b5	22 da 08 39	jsl $3908da	                JSL IPRINTH
.3980b9	a5 20		lda $20		                LDA ' '
.3980bb	22 75 06 39	jsl $390675	                JSL IPUTC
.3980bf	a0 02 00	ldy #$0002	                LDY #2
.3980c2	a2 45 02	ldx #$0245	                LDX #CPUA+1
.3980c5	22 da 08 39	jsl $3908da	                JSL IPRINTH
.3980c9	a5 20		lda $20		                LDA ' '
.3980cb	22 75 06 39	jsl $390675	                JSL IPUTC
.3980cf	a0 02 00	ldy #$0002	                LDY #2
.3980d2	a2 47 02	ldx #$0247	                LDX #CPUX+1
.3980d5	22 da 08 39	jsl $3908da	                JSL IPRINTH
.3980d9	a5 20		lda $20		                LDA ' '
.3980db	22 75 06 39	jsl $390675	                JSL IPUTC
.3980df	a0 02 00	ldy #$0002	                LDY #2
.3980e2	a2 49 02	ldx #$0249	                LDX #CPUY+1
.3980e5	22 da 08 39	jsl $3908da	                JSL IPRINTH
.3980e9	a5 20		lda $20		                LDA ' '
.3980eb	22 75 06 39	jsl $390675	                JSL IPUTC
.3980ef	a0 02 00	ldy #$0002	                LDY #2
.3980f2	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.3980f5	22 da 08 39	jsl $3908da	                JSL IPRINTH
.3980f9	a5 20		lda $20		                LDA ' '
.3980fb	22 75 06 39	jsl $390675	                JSL IPUTC
.3980ff	a0 01 00	ldy #$0001	                LDY #1
.398102	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.398105	22 da 08 39	jsl $3908da	                JSL IPRINTH
.398109	a5 20		lda $20		                LDA ' '
.39810b	22 75 06 39	jsl $390675	                JSL IPUTC
.39810f	22 75 06 39	jsl $390675	                JSL IPUTC
.398113	a0 02 00	ldy #$0002	                LDY #2
.398116	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.398119	22 da 08 39	jsl $3908da	                JSL IPRINTH
.39811d	a5 20		lda $20		                LDA ' '
.39811f	22 75 06 39	jsl $390675	                JSL IPUTC
.398123	a0 01 00	ldy #$0001	                LDY #1
.398126	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.398129	22 da 08 39	jsl $3908da	                JSL IPRINTH
.39812d	22 97 07 39	jsl $390797	                JSL IPRINTCR
.398131	5c 0b 06 39	jmp $39060b	                JML IREADYWAIT
.398135	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.398136	00		brk #		IMPARSE         BRK ; Parse the current command line
.398137	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.398138	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.398139	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.39813a	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.39813b	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.39813c	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.39813d	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.39813e	00		brk #		IMGO            BRK ; Execute from specified address
.39813f	00		brk #		IMJUMP          BRK ; Execute from spefified address
.398140	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.398141	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.398142	00		brk #		IMMEMORY        BRK ; View memory
.398143	00		brk #		IMREGISTERS     BRK ; View/edit registers
.398144	00		brk #		IMSAVE          BRK ; Save memory to disk
.398145	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.398146	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.398147	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.398148	00		brk #		IMMODIFY        BRK ; Modify memory
.398149	00		brk #		IMDOS           BRK ; Execute DOS command
.39814a					MMESSAGES
>39814a	45 72 72 6f 72 00		MMERROR         .text "Error", $00
>398150	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>398158	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>398168	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>398178	4d 58 44 49 5a 43 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.39817f					IRQ_HANDLER
.39817f	e2 20		sep #$20	                SEP #$20        ; set A short
.398181	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.398185	c9 00		cmp #$00	                CMP #$00
.398187	f0 37		beq $3981c0	                BEQ CHECK_PENDING_REG1
.398189	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39818d	29 01		and #$01	                AND #FNX0_INT00_SOF
.39818f	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.398191	d0 09		bne $39819c	                BNE SERVICE_NEXT_IRQ6
.398193	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398197	20 2a 82	jsr $39822a	                JSR SOF_INTERRUPT
.39819a	e2 20		sep #$20	                SEP #$20        ; set A short
.39819c					SERVICE_NEXT_IRQ6
.39819c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981a0	29 40		and #$40	                AND #FNX0_INT06_FDC
.3981a2	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.3981a4	d0 09		bne $3981af	                BNE SERVICE_NEXT_IRQ7
.3981a6	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981aa	20 76 82	jsr $398276	                JSR FDC_INTERRUPT
.3981ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3981af					SERVICE_NEXT_IRQ7
.3981af	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981b3	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3981b5	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.3981b7	d0 07		bne $3981c0	                BNE CHECK_PENDING_REG1
.3981b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981bd	20 35 82	jsr $398235	                JSR MOUSE_INTERRUPT
.3981c0					CHECK_PENDING_REG1
.3981c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3981c2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981c6	c9 00		cmp #$00	                CMP #$00
.3981c8	f0 5d		beq $398227	                BEQ EXIT_IRQ_HANDLE
.3981ca					SERVICE_NEXT_IRQ8
.3981ca	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981ce	29 01		and #$01	                AND #FNX1_INT00_KBD
.3981d0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3981d2	d0 09		bne $3981dd	                BNE SERVICE_NEXT_IRQ11
.3981d4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981d8	20 2c b8	jsr $39b82c	                JSR KEYBOARD_INTERRUPT
.3981db	e2 20		sep #$20	                SEP #$20        ; set A short
.3981dd					SERVICE_NEXT_IRQ11
.3981dd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981e1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3981e3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3981e5	d0 09		bne $3981f0	                BNE SERVICE_NEXT_IRQ12
.3981e7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981eb	20 81 82	jsr $398281	                JSR COM2_INTERRUPT
.3981ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3981f0					SERVICE_NEXT_IRQ12
.3981f0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981f4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3981f6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3981f8	d0 09		bne $398203	                BNE SERVICE_NEXT_IRQ13
.3981fa	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981fe	20 8c 82	jsr $39828c	                JSR COM1_INTERRUPT
.398201	e2 20		sep #$20	                SEP #$20        ; set A short
.398203					SERVICE_NEXT_IRQ13
.398203	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398207	29 20		and #$20	                AND #FNX1_INT05_MPU401
.398209	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.39820b	d0 09		bne $398216	                BNE SERVICE_NEXT_IRQ14
.39820d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398211	20 97 82	jsr $398297	                JSR MPU401_INTERRUPT
.398214	e2 20		sep #$20	                SEP #$20        ; set A short
.398216					SERVICE_NEXT_IRQ14
.398216	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39821a	29 40		and #$40	                AND #FNX1_INT06_LPT
.39821c	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.39821e	d0 07		bne $398227	                BNE EXIT_IRQ_HANDLE
.398220	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398224	20 a2 82	jsr $3982a2	                JSR LPT1_INTERRUPT
.398227					EXIT_IRQ_HANDLE
.398227	c2 30		rep #$30	                REP #$30        ; set A&X long
.398229	6b		rtl		                RTL
.39822a					SOF_INTERRUPT
.39822a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39822e	29 01		and #$01	                AND #FNX0_INT00_SOF
.398230	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398234	60		rts		                RTS
.398235					MOUSE_INTERRUPT
.398235	e2 20		sep #$20	                SEP #$20        ; set A short
.398237	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39823b	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.39823d	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398241	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.398245	a2 00 00	ldx #$0000	                LDX #$0000
.398248	e2 10		sep #$10	                SEP #$10        ; set X short
.39824a	a6 e0		ldx $e0		                LDX MOUSE_PTR
.39824c	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.398250	e8		inx		                INX
.398251	e0 03		cpx #$03	                CPX #$03
.398253	d0 1c		bne $398271	                BNE EXIT_FOR_NEXT_VALUE
.398255	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.398259	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.39825b	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.39825f	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.398261	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.398265	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.398267	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.39826b	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.39826d	e2 20		sep #$20	                SEP #$20        ; set A short
.39826f	a2 00		ldx #$00	                LDX #$00
.398271					EXIT_FOR_NEXT_VALUE
.398271	86 e0		stx $e0		                STX MOUSE_PTR
.398273	c2 10		rep #$10	                REP #$10        ; set X long
.398275	60		rts		                RTS
.398276					FDC_INTERRUPT
.398276	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39827a	29 40		and #$40	                AND #FNX0_INT06_FDC
.39827c	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398280	60		rts		                RTS
.398281					COM2_INTERRUPT
.398281	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398285	29 08		and #$08	                AND #FNX1_INT03_COM2
.398287	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39828b	60		rts		                RTS
.39828c					COM1_INTERRUPT
.39828c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398290	29 10		and #$10	                AND #FNX1_INT04_COM1
.398292	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398296	60		rts		                RTS
.398297					MPU401_INTERRUPT
.398297	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39829b	29 20		and #$20	                AND #FNX1_INT05_MPU401
.39829d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3982a1	60		rts		                RTS
.3982a2					LPT1_INTERRUPT
.3982a2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3982a6	29 40		and #$40	                AND #FNX1_INT06_LPT
.3982a8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3982ac	60		rts		                RTS
.3982ad					NMI_HANDLER
.3982ad	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR           = $00
=$2a					DEF_WILDCARD_CHAR       = $2A
=$5c					DEF_SEPAR_CHAR1         = $5C
=$2f					DEF_SEPAR_CHAR2         = $2F
=$06					CH_CMD_CHECK_EXIST      = $06
=$0c					CH_CMD_GET_FILE_SIZE    = $0C
=$15					CH_CMD_SET_MODE         = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS       = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0         = $27     ;
=$2c					CH_CMD_WR_DATA          = $2C
=$2f					CH_CMD_SET_FILENAME     = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT       = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN        = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO     = $33
=$36					CH_CMD_FILE_CLOSE       = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE      = $39
=$3a					CH_CMD_BYTE_READ        = $3A
=$3b					CH_CMD_BYTE_RD_GO       = $3B
=$3c					CH_CMD_BYTE_WRITE       = $3C
=$3d					CH_CMD_BYTE_WR_GO       = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS     = $14
=$17					CH376S_STAT_BUF_OVF     = $17
=$1d					CH376S_STAT_DSK_RD      = $1D
=$1e					CH376S_STAT_DSK_WR      = $1E
=$41					CH376S_ERR_OPEN_DIR     = $41
=$42					CH376S_ERR_MISS_FIL     = $42
=$43					CH376S_ERR_FOUND_NAME   = $43
=$82					CH376S_ERR_DISK_DSC     = $82
=$84					CH376S_ERR_LRG_SEC      = $84
=$92					CH376S_ERR_PARTTION     = $92
=$a1					CH376S_ERR_NOT_FORM     = $A1
=$b1					CH376S_ERR_DSK_FULL     = $B1
=$b2					CH376S_FDT_OVER         = $B2
=$b4					CH376S_FILE_CLOSED      = $B4
=$51					CH376S_CMD_RET_SUCCESS  = $51
=$5f					CH376S_CMD_RET_ABORT    = $5F
=$00					SDCARD_PRSNT_NO_CARD    = $00
=$01					SDCARD_PRSNT_CD         = $01
=$02					SDCARD_PRSNT_WP         = $02
=$04					SDCARD_PRSNT_MNTED      = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.0000					fatrec
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c					  reserved  .fill 16
>001c	00 00				  size_l    .word 0
>001e	00 00				  size_h    .word 0
.0000					simplefilestruct
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c	00 00				  size_l    .word 0
>000e	00 00				  size_h    .word 0
.3982ae	5c c5 84 39	jmp $3984c5	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.3982b2	5c d4 84 39	jmp $3984d4	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.3982b6	5c ce 82 39	jmp $3982ce	SDOS_INIT     JML ISDOS_INIT
.3982ba	5c 5e 83 39	jmp $39835e	SDOS_DIR      JML ISDOS_DIR
.3982be	5c db 83 39	jmp $3983db	SDOS_CHDIR    JML ISDOS_CHDIR
.3982c2	5c e1 84 39	jmp $3984e1	SDOS_LOAD     JML ISDOS_READ_FILE
.3982c6	5c dc 83 39	jmp $3983dc	SDOS_SAVE     JML ISDOS_SAVE
.3982ca	5c dd 83 39	jmp $3983dd	SDOS_EXEC     JML ISDOS_EXEC
.3982ce	48		pha		ISDOS_INIT    PHA
.3982cf	da		phx		              PHX
.3982d0	5a		phy		              PHY
.3982d1	08		php		              PHP
.3982d2	0b		phd		              PHD
.3982d3	48		pha		                PHA             ; begin setdp macro
.3982d4	08		php		                PHP
.3982d5	c2 20		rep #$20	                REP #$20        ; set A long
.3982d7	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3982da	5b		tcd		                TCD
.3982db	28		plp		                PLP
.3982dc	68		pla		                PLA             ; end setdp macro
.3982dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3982df	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1    ; Read the Pending Register &
.3982e3	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.3982e5	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.3982e9	a9 06		lda #$06	              LDA #CH_CMD_CHECK_EXIST
.3982eb	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3982ef	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.3982f2	a9 a8		lda #$a8	              LDA #$A8
.3982f4	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.3982f8					    CHK_LOOP
.3982f8	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.3982fb	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.3982fe	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.398301	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA  ; the data returned must be the complement
.398305	c9 57		cmp #$57	              CMP #~$A8;  $57
.398307	d0 ef		bne $3982f8	              BNE CHK_LOOP
.398309	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.39830c	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.39830e	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.398312	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.398315	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.398318	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.39831a	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.39831e					    ISDOS_WAIT_FOR_MODE_SW
.39831e	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA ; Wait 0.6us
.398321	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.398325	c9 51		cmp #$51	              CMP #$51         ; CMD_RET_SUCCESS = 051H, CMD_RET_ABORT = 05FH
.398327	f0 06		beq $39832f	              BEQ CHK_SET_OK
.398329	c9 5f		cmp #$5f	              CMP #$5F
.39832b	f0 09		beq $398336	              BEQ CHK_SET_NOK
.39832d	d0 ef		bne $39831e	              BNE ISDOS_WAIT_FOR_MODE_SW
.39832f					    CHK_SET_OK
.39832f	a9 01		lda #$01	              LDA #SDCARD_PRSNT_CD
.398331	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.398334	80 07		bra $39833d	              BRA SD_INIT_DONE
.398336					    CHK_SET_NOK
.398336	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.398338	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.39833b	80 00		bra $39833d	              BRA SD_INIT_DONE
.39833d					    SD_INIT_DONE
.39833d	2b		pld		              PLD
.39833e	28		plp		              PLP
.39833f	7a		ply		              PLY
.398340	fa		plx		              PLX
.398341	68		pla		              PLA
.398342	6b		rtl		              RTL
.398343					ISDOS_CLEAR_FAT_REC
.398343	0b		phd		              PHD
.398344	48		pha		                PHA             ; begin setdp macro
.398345	08		php		                PHP
.398346	c2 20		rep #$20	                REP #$20        ; set A long
.398348	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.39834b	5b		tcd		                TCD
.39834c	28		plp		                PLP
.39834d	68		pla		                PLA             ; end setdp macro
.39834e	a0 00 00	ldy #$0000	              LDY #0
.398351	a9 00 00	lda #$0000	              LDA #0
.398354					    CLEAR_LOOP
.398354	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.398356	c8		iny		              INY
.398357	c0 20 00	cpy #$0020	              CPY #32
.39835a	d0 f8		bne $398354	              BNE CLEAR_LOOP
.39835c	2b		pld		              PLD
.39835d	60		rts		              RTS
.39835e	48		pha		ISDOS_DIR     PHA
.39835f	da		phx		              PHX
.398360	5a		phy		              PHY
.398361	0b		phd		              PHD
.398362	08		php		              PHP
.398363	48		pha		                PHA             ; begin setdp macro
.398364	08		php		                PHP
.398365	c2 20		rep #$20	                REP #$20        ; set A long
.398367	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.39836a	5b		tcd		                TCD
.39836b	28		plp		                PLP
.39836c	68		pla		                PLA             ; end setdp macro
.39836d	e2 20		sep #$20	                SEP #$20        ; set A short
.39836f	c2 10		rep #$10	                REP #$10        ; set X long
.398371	20 de 83	jsr $3983de	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.398374	20 43 83	jsr $398343	              JSR ISDOS_CLEAR_FAT_REC
.398377	20 13 84	jsr $398413	              JSR SDOS_FILE_OPEN     ; Now that the file name is set, go open File
.39837a	a2 00 00	ldx #$0000	              LDX #0 ; count the number of items displayed - limit to 38
.39837d					    ISDOS_NEXT_ENTRY
.39837d	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.39837f	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.398383	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.398386	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA        ;  Load Data Length - should be 32 - we don't care.
.39838a	a0 00 00	ldy #$0000	              LDY #0
.39838d					    FAT_REC_LOOP
.39838d	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA       ; Wait 0.6us
.398390	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.398394	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.398396	c8		iny		              INY
.398397	c0 20 00	cpy #$0020	              CPY #32
.39839a	d0 f1		bne $39838d	              BNE FAT_REC_LOOP
.39839c	c2 20		rep #$20	                REP #$20        ; set A long
.39839e	a0 1c 00	ldy #$001c	              LDY #28
.3983a1	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.3983a3	a0 0c 00	ldy #$000c	              LDY #12
.3983a6	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3983a8	a0 1e 00	ldy #$001e	              LDY #30
.3983ab	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.3983ad	a0 0e 00	ldy #$000e	              LDY #14
.3983b0	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3983b2	a5 17		lda $0337	              LDA SDOS_FILE_REC_PTR
.3983b4	18		clc		              CLC
.3983b5	69 10 00	adc #$0010	              ADC #$10
.3983b8	85 17		sta $0337	              STA SDOS_FILE_REC_PTR
.3983ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3983bc	e8		inx		              INX
.3983bd	e0 40 00	cpx #$0040	              CPX #64
.3983c0	f0 10		beq $3983d2	              BEQ ISDOS_DIR_DONE
.3983c2	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.3983c5	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.3983c7	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3983cb	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.3983ce	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.3983d0	f0 ab		beq $39837d	              BEQ ISDOS_NEXT_ENTRY
.3983d2					    ISDOS_DIR_DONE
.3983d2	20 64 84	jsr $398464	              JSR SDOS_FILE_CLOSE
.3983d5	28		plp		              PLP
.3983d6	2b		pld		              PLD
.3983d7	7a		ply		              PLY
.3983d8	fa		plx		              PLX
.3983d9	68		pla		              PLA
.3983da	6b		rtl		              RTL
.3983db	00		brk #		ISDOS_CHDIR   BRK;
.3983dc	00		brk #		ISDOS_SAVE    BRK;
.3983dd	00		brk #		ISDOS_EXEC    BRK;
.3983de					ISDOS_MOUNT_CARD
.3983de	e2 20		sep #$20	                SEP #$20        ; set A short
.3983e0	c2 10		rep #$10	                REP #$10        ; set X long
.3983e2	a0 00 00	ldy #$0000	              LDY #$0000
.3983e5	a9 01		lda #$01	              LDA #$01
.3983e7	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.3983ea					    TRY_MOUNT_AGAIN
.3983ea	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.3983ec	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD              ;
.3983f0	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT       ;
.3983f3	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.3983f5	f0 09		beq $398400	              BEQ ISDOS_MOUNTED
.3983f7	c8		iny		              INY
.3983f8	c0 05 00	cpy #$0005	              CPY #$0005
.3983fb	d0 ed		bne $3983ea	              BNE TRY_MOUNT_AGAIN
.3983fd	4c 08 84	jmp $398408	              JMP SDCARD_ERROR_MOUNT
.398400					    ISDOS_MOUNTED
.398400	ad 3f 00	lda $003f	              LDA SDCARD_PRSNT_MNT
.398403	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.398405	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.398407	60		rts		              RTS
.398408					    SDCARD_ERROR_MOUNT
.398408	a2 fc 86	ldx #$86fc	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.39840b	00		brk #		              BRK
.39840c	60		rts		              RTS
.39840d					    ISDOS_NO_CARD
.39840d	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.39840f	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.398412	60		rts		              RTS
.398413					SDOS_FILE_OPEN
.398413	8b		phb		              PHB
.398414	a2 00 00	ldx #$0000	              LDX #0
.398417	a0 01 00	ldy #$0001	              LDY #1
.39841a	a9 2f		lda #$2f	              LDA #'/'
.39841c	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.398420	e8		inx		              INX
.398421	48		pha		                PHA             ; begin setdbr macro
.398422	08		php		                PHP
.398423	e2 20		sep #$20	                SEP #$20        ; set A short
.398425	a9 39		lda #$39	                LDA #`sd_card_dir_string
.398427	48		pha		                PHA
.398428	ab		plb		                PLB
.398429	28		plp		                PLP
.39842a	68		pla		                PLA             ; end setdbr macro
.39842b					    ISDOS_DIR_TRF
.39842b	b9 19 86	lda $398619,y	              LDA sd_card_dir_string,Y
.39842e	c9 2f		cmp #$2f	              CMP #'/'
.398430	f0 0c		beq $39843e	              BEQ FO_READ_SLASH
.398432	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.398436	e8		inx		              INX
.398437	c8		iny		              INY
.398438	c9 00		cmp #$00	              CMP #0
.39843a	f0 0c		beq $398448	              BEQ FO_READ_END_PATH
.39843c	80 ed		bra $39842b	              BRA ISDOS_DIR_TRF  ; path string must be 0 terminated
.39843e					    FO_READ_SLASH
.39843e	a9 00		lda #$00	              LDA #0
.398440	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.398444	e8		inx		              INX
.398445	c8		iny		              INY
.398446	a9 2f		lda #$2f	              LDA #'/'
.398448					    FO_READ_END_PATH
.398448	48		pha		              PHA
.398449	20 77 84	jsr $398477	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.39844c	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.39844f	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.398451	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.398455	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398458	68		pla		              PLA
.398459	c9 00		cmp #$00	              CMP #0
.39845b	f0 05		beq $398462	              BEQ FO_DONE
.39845d	a2 00 00	ldx #$0000	              LDX #0
.398460	80 c9		bra $39842b	              BRA ISDOS_DIR_TRF
.398462					    FO_DONE
.398462	ab		plb		              PLB
.398463	60		rts		              RTS
.398464					SDOS_FILE_CLOSE
.398464	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.398466	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.39846a	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.39846d	a9 00		lda #$00	              LDA #$00                ; FALSE
.39846f	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.398473	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398476	60		rts		              RTS
.398477					SDOS_SET_FILE_NAME
.398477	da		phx		              PHX
.398478	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.39847a	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.39847e	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.398481	a2 00 00	ldx #$0000	              LDX #$0000
.398484					    SDOS_SET_FILE_LOOP
.398484	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.398488	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.39848c	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.39848f	e8		inx		              INX
.398490	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.398492	d0 f0		bne $398484	              BNE SDOS_SET_FILE_LOOP
.398494	fa		plx		              PLX
.398495	60		rts		              RTS
.398496					DLYCMD_2_DTA
.398496	ea		nop		              NOP
.398497	ea		nop		              NOP
.398498	ea		nop		              NOP
.398499	ea		nop		              NOP
.39849a	ea		nop		              NOP
.39849b					DLYDTA_2_DTA
.39849b	ea		nop		              NOP
.39849c	ea		nop		              NOP
.39849d	ea		nop		              NOP
.39849e	ea		nop		              NOP
.39849f	ea		nop		              NOP
.3984a0	60		rts		              RTS
.3984a1					SDCARD_WAIT_4_INT
.3984a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3984a3					    SDCARD_BUSY_INT
.3984a3	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1   ; Check to See if the Pending Register for the SD_INT is Set
.3984a7	29 80		and #$80	              AND #FNX1_INT07_SDCARD   ;
.3984a9	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.3984ab	d0 f6		bne $3984a3	              BNE SDCARD_BUSY_INT      ; Go Check again to see if it is checked
.3984ad	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1   ;Interrupt as occured, clear the Pending Register for next time.
.3984b1	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA ;
.3984b4	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA ;
.3984b7	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.3984b9	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.3984bd	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.3984c0	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA;
.3984c4	60		rts		              RTS           ;
.3984c5					ISDOS_CHK_CD
.3984c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3984c7	18		clc		              CLC
.3984c8	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.3984cc	29 01		and #$01	              AND #$01
.3984ce	c9 01		cmp #$01	              CMP #$01
.3984d0	f0 01		beq $3984d3	              BEQ SDCD_NOT_PRST;
.3984d2	38		sec		              SEC
.3984d3					    SDCD_NOT_PRST
.3984d3	60		rts		              RTS
.3984d4					ISDOS_CHK_WP
.3984d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3984d6	18		clc		              CLC
.3984d7	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.3984db	29 02		and #$02	              AND #$02
.3984dd	d0 01		bne $3984e0	              BNE SDCD_NOT_WP;
.3984df	38		sec		              SEC
.3984e0					    SDCD_NOT_WP
.3984e0	60		rts		              RTS
.3984e1					ISDOS_READ_FILE
.3984e1	20 13 84	jsr $398413	              JSR SDOS_FILE_OPEN   ; open the file
.3984e4	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.3984e8	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.3984ea	f0 03		beq $3984ef	              BEQ SDOS_READ_FILE_KEEP_GOING
.3984ec	82 80 00	brl $39856f	              BRL SDOS_READ_DONE
.3984ef					    SDOS_READ_FILE_KEEP_GOING
.3984ef	c2 20		rep #$20	                REP #$20        ; set A long
.3984f1	20 dd 85	jsr $3985dd	              JSR SDOS_SET_FILE_LENGTH;
.3984f4	a9 00 00	lda #$0000	              LDA #$0000
.3984f7	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.3984fb	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.3984ff	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.398503	e2 20		sep #$20	                SEP #$20        ; set A short
.398505					    SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.398505	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.398507	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.39850b	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39850e	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.398512	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.398516	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.398519	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.39851d	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.398521	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT
.398524	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.398526	f0 03		beq $39852b	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398528	82 44 00	brl $39856f	              BRL SDOS_READ_DONE
.39852b					    SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.39852b	20 ea 85	jsr $3985ea	              JSR SDOS_READ_BLOCK
.39852e	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.398530	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.398534	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT
.398537	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.398539	d0 05		bne $398540	              BNE SDOS_READ_PROC_DONE
.39853b	20 72 85	jsr $398572	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.39853e	80 eb		bra $39852b	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398540					    SDOS_READ_PROC_DONE
.398540	c2 20		rep #$20	                REP #$20        ; set A long
.398542	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.398546	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.398549	d0 24		bne $39856f	              BNE SDOS_READ_DONE                  ; if it equal 64K, then the file is bigger than 64K
.39854b	af 28 01 00	lda $000128	              LDA @lADDER_R
.39854f	8f 20 01 00	sta $000120	              STA @lADDER_A
.398553	af 2a 01 00	lda $00012a	              LDA @lADDER_R+2
.398557	8f 22 01 00	sta $000122	              STA @lADDER_A+2
.39855b	20 dd 85	jsr $3985dd	              JSR SDOS_SET_FILE_LENGTH ;
.39855e	20 c3 85	jsr $3985c3	              JSR SDOS_COMPUTE_LOCATE_POINTER
.398561	e2 20		sep #$20	                SEP #$20        ; set A short
.398563	20 8e 85	jsr $39858e	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.398566	20 a1 84	jsr $3984a1	              JSR SDCARD_WAIT_4_INT
.398569	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.39856b	d0 d3		bne $398540	              BNE SDOS_READ_PROC_DONE
.39856d	80 96		bra $398505	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.39856f					    SDOS_READ_DONE
.39856f	e2 20		sep #$20	                SEP #$20        ; set A short
.398571	6b		rtl		              RTL
.398572					SDOS_ADJUST_POINTER
.398572	c2 20		rep #$20	                REP #$20        ; set A long
.398574	18		clc		              CLC
.398575	af 38 00 00	lda $000038	              LDA SDCARD_FILE_PTR ;Load the Pointer
.398579	6f 3c 00 00	adc $00003c	              ADC SDCARD_BYTE_NUM
.39857d	8f 38 00 00	sta $000038	              STA SDCARD_FILE_PTR;
.398581	e2 20		sep #$20	                SEP #$20        ; set A short
.398583	af 3a 00 00	lda $00003a	              LDA SDCARD_FILE_PTR+2;
.398587	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.398589	8f 3a 00 00	sta $00003a	              STA SDCARD_FILE_PTR+2;
.39858d					    SDOS_ADJ_DONE
.39858d	60		rts		              RTS
.39858e					SDOS_BYTE_LOCATE
.39858e	e2 20		sep #$20	                SEP #$20        ; set A short
.398590	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.398592	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.398596	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA
.398599	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.39859d	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.3985a1	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.3985a4	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.3985a8	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.3985ac	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.3985af	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.3985b3	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.3985b7	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA
.3985ba	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.3985be	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.3985c2	60		rts		              RTS
.3985c3					SDOS_COMPUTE_LOCATE_POINTER
.3985c3	c2 20		rep #$20	                REP #$20        ; set A long
.3985c5	18		clc		              CLC
.3985c6	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.3985ca	69 ff ff	adc #$ffff	              ADC #$FFFF
.3985cd	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.3985d1	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.3985d5	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.3985d8	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.3985dc	60		rts		              RTS
.3985dd					SDOS_SET_FILE_LENGTH
.3985dd	a5 0a		lda $032a	              LDA SDOS_FILE_SIZE + 2
.3985df	f0 02		beq $3985e3	              BEQ SFL_DONE
.3985e1	7a		ply		              PLY ; deplete the stack to return back to the long jump
.3985e2	6b		rtl		              RTL
.3985e3					    SFL_DONE
.3985e3	a5 08		lda $0328	              LDA SDOS_FILE_SIZE
.3985e5	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.3985e9	60		rts		              RTS
.3985ea					SDOS_READ_BLOCK
.3985ea	0b		phd		              PHD
.3985eb	48		pha		                PHA             ; begin setdp macro
.3985ec	08		php		                PHP
.3985ed	c2 20		rep #$20	                REP #$20        ; set A long
.3985ef	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3985f2	5b		tcd		                TCD
.3985f3	28		plp		                PLP
.3985f4	68		pla		                PLA             ; end setdp macro
.3985f5	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.3985f7	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.3985fb	20 96 84	jsr $398496	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.3985fe	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.398602	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.398604	20 9b 84	jsr $39849b	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.398607	a0 00 00	ldy #$0000	              LDY #$0000
.39860a					    SDOS_READ_MORE
.39860a	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.39860e	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.398610	c8		iny		              INY
.398611	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.398613	d0 f5		bne $39860a	              BNE SDOS_READ_MORE
.398615	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.398617	2b		pld		              PLD
.398618	60		rts		              RTS
>398619	2f 2a 00			sd_card_dir_string  .text '/*' ,$00
>39861c	00 00 00 00 00 00 00 00		                    .fill 128-3,0  ; leave space for the path
>398624	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>398694	00 00 00 00 00
>398699	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>3986a1	44 20 50 52 45 53 45 4e 54 0d 00
>3986ac	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>3986b4	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>3986c2	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>3986ca	41 44 49 4e 47 20 46 49 4c 45 00
>3986d5	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>3986dd	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>3986e5	45 54 45 43 54 45 44 00
>3986ed	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>3986f5	4f 55 4e 54 45 44 00
>3986fc	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>398704	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>398714	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>39871c	4e 45 44 0d 00
>398721	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>398729	49 4e 45 2e 2e 2e 00
>398730	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>398738	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>398747	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>39874f	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe700				OPL2_S_BASE                 = $AFE700
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>398753	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39875b	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39876b	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>398773	12
>398774	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39877c	15
>39877d	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>398783	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>398788	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39878e	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>398796	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3987a4	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3987ac	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3987ba	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3987c2	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3987d0	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3987d8	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3987e6	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3987ee	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3987fc	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>398804	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>398812	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>39881a	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>398828	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>398830	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39883e	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>398846	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>398854	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>39885c	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39886a	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>398872	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>398880	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>398888	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>398896	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39889e	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3988ac	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3988b4	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3988c2	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3988ca	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3988d8	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3988e0	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3988ee	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3988f6	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>398904	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39890c	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>39891a	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>398922	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>398930	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>398938	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>398946	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39894e	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>39895c	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>398964	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>398972	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39897a	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>398988	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>398990	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39899e	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3989a6	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3989b4	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3989bc	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3989ca	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3989d2	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3989e0	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3989e8	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3989f6	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3989fe	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>398a0c	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>398a14	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>398a22	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>398a2a	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>398a38	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>398a40	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>398a4e	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>398a56	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>398a64	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>398a6c	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>398a7a	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>398a82	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>398a90	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>398a98	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>398aa6	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>398aae	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>398abc	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>398ac4	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>398ad2	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>398ada	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>398ae8	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>398af0	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>398afe	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>398b06	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>398b14	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>398b1c	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>398b2a	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>398b32	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>398b40	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>398b48	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>398b56	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>398b5e	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>398b6c	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>398b74	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>398b82	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>398b8a	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>398b98	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>398ba0	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>398bae	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>398bb6	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>398bc4	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>398bcc	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>398bda	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>398be2	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>398bf0	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>398bf8	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>398c06	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>398c0e	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>398c1c	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>398c24	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>398c32	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>398c3a	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>398c48	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>398c50	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>398c5e	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>398c66	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>398c74	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>398c7c	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>398c8a	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>398c92	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>398ca0	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>398ca8	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>398cb6	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>398cbe	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>398ccc	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>398cd4	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>398ce2	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>398cea	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>398cf8	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>398d00	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>398d0e	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>398d16	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>398d24	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>398d2c	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>398d3a	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>398d42	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>398d50	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>398d58	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>398d66	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>398d6e	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>398d7c	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>398d84	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>398d92	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>398d9a	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>398da8	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>398db0	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>398dbe	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>398dc6	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>398dd4	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>398ddc	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>398dea	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>398df2	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>398e00	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>398e08	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>398e16	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>398e1e	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>398e2c	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>398e34	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>398e42	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>398e4a	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>398e58	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>398e60	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>398e6e	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>398e76	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>398e84	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>398e8c	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>398e9a	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>398ea2	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>398eb0	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>398eb8	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>398ec6	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>398ece	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>398edc	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>398ee4	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>398ef2	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>398efa	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>398f08	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>398f10	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>398f1e	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>398f26	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>398f34	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>398f3c	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>398f4a	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>398f52	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>398f60	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>398f68	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>398f76	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>398f7e	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>398f8c	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>398f94	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>398fa2	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>398faa	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>398fb8	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>398fc0	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>398fce	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>398fd6	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>398fe4	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>398fec	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>398ffa	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>399002	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>399010	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>399018	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>399026	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>39902e	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>39903c	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>399044	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>399052	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>39905a	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>399068	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>399070	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>39907e	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>399086	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>399094	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>39909c	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>3990aa	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>3990b2	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>3990c0	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>3990c8	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>3990d6	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>3990de	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>3990ec	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>3990f4	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>399102	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>39910a	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>399118	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>399120	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>39912e	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>399136	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>399144	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>39914c	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>39915a	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>399162	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>399170	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>399178	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>399186	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>39918e	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>39919c	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>3991a4	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>3991b2	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>3991ba	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>3991c8	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>3991d0	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>3991de	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>3991e6	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>3991f4	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>3991fc	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>39920a	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>399212	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>399220	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>399228	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>399236	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>39923e	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>39924c	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>399254	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>399262	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>39926a	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>399278	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>399280	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>39928e	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>399296	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>3992a4	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>3992ac	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>3992ba	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>3992c2	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>3992d0	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>3992d8	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>3992e6	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>3992ee	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>3992fc	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>399304	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>399312	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>39931a	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>399328	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>399330	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>39933e	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>399346	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>399354	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>39935c	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39936a	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>399372	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>399380	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>399388	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>399396	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39939e	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>3993ac	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>3993b4	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>3993c2	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>3993ca	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>3993d8	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>3993e0	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3993ee	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3993f6	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>399404	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39940c	00 87 fa 00
>399410	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>399418	00 88 98 03
>39941c	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>399424	00 88 98 03
>399428	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>399430	00 f9 69 00
>399434	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>39943c	80 e8 4a 00
>399440	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>399448	00 f6 9a 00
>39944c	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>399454	1b f2 34 00
>399458	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>399460	00 f7 8a 00
>399464	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>39946c	00 f6 47 00
>399470	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>399478	00 f9 69 00
>39947c	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>399484	00 f7 a9 00
>399488	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>399490	00 87 fa 00
>399494	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39949c	00 f7 a9 00
>3994a0	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3994a8	00 f5 f5 00
>3994ac	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3994b4	06 b8 d8 03
>3994b8	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3994c0	00 f5 f5 00
>3994c4	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3994cc	06 b8 d8 03
>3994d0	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3994d8	00 f5 f5 00
>3994dc	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3994e4	10 74 f8 03
>3994e8	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3994f0	00 f5 f5 00
>3994f4	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3994fc	00 f5 f5 00
>399500	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>399508	05 c5 d4 03
>39950c	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>399514	00 f5 f5 00
>399518	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>399520	04 f9 44 03
>399524	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39952c	05 c5 d4 03
>399530	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>399538	04 f9 44 03
>39953c	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>399544	03 87 f7 03
>399548	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>399550	05 c5 d4 03
>399554	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>39955c	00 f6 28 00
>399560	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>399568	05 c5 d4 03
>39956c	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>399574	00 f5 f7 01
>399578	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>399580	04 f9 44 03
>399584	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39958c	00 99 f9 00
>399590	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>399598	00 a8 f7 00
>39959c	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3995a4	00 99 f9 00
>3995a8	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3995b0	00 a6 f6 00
>3995b4	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3995bc	00 a6 f6 00
>3995c0	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3995c8	00 f6 36 02
>3995cc	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3995d4	00 f6 36 02
>3995d8	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3995e0	00 96 e8 01
>3995e4	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3995ec	00 96 e8 01
>3995f0	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3995f8	02 79 77 03
>3995fc	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>399604	02 79 77 03
>399608	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>399610	00 a5 2b 02
>399614	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39961c	00 93 3b 02
>399620	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>399628	01 89 3b 03
>39962c	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>399634	0a 53 2b 02
>399638	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>399640	00 f6 89 00
>399644	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39964c	00 f6 9a 00
>399650	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>399658	00 f6 9a 00
>39965c	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>399664	00 87 4b 01
>399668	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>399670	00 78 67 01
>399674	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39967c	02 f8 fc 00
>399680	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>399688	40 f5 f5 00
>39968c	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>399694	02 79 77 03
>399698	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3996a0	40 f5 f5 00
>3996a4	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3996ac	40 f5 f5 00
>3996b0	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3996b8	00 f9 69 00
>3996bc	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3996c4	00 f9 69 00
>3996c8	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3996d0	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>3996d4	04 94 39 00 10 94 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3996dc	1c 94 39 00 28 94 39 00
>3996e4	34 94 39 00 40 94 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3996ec	4c 94 39 00 58 94 39 00
>3996f4	64 94 39 00 70 94 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3996fc	7c 94 39 00 88 94 39 00
>399704	94 94 39 00 a0 94 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39970c	ac 94 39 00 b8 94 39 00
>399714	c4 94 39 00 d0 94 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39971c	dc 94 39 00 e8 94 39 00
>399724	f4 94 39 00 00 95 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39972c	0c 95 39 00 18 95 39 00
>399734	24 95 39 00 30 95 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39973c	3c 95 39 00 48 95 39 00
>399744	54 95 39 00 60 95 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39974c	6c 95 39 00 78 95 39 00
>399754	84 95 39 00 90 95 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>39975c	9c 95 39 00 a8 95 39 00
>399764	b4 95 39 00 c0 95 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>39976c	cc 95 39 00 d8 95 39 00
>399774	e4 95 39 00 f0 95 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39977c	fc 95 39 00 08 96 39 00
>399784	14 96 39 00 20 96 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39978c	2c 96 39 00 38 96 39 00
>399794	44 96 39 00 50 96 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39979c	5c 96 39 00 68 96 39 00
>3997a4	74 96 39 00 80 96 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3997ac	8c 96 39 00 98 96 39 00
>3997b4	a4 96 39 00 b0 96 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3997bc	bc 96 39 00 c8 96 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>3997c4	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3997cc	00 b1 f5 01
>3997d0	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3997d8	03 f1 f5 00
>3997dc	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3997e4	03 c1 f5 00
>3997e8	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3997f0	00 92 f5 01
>3997f4	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3997fc	00 f1 f9 00
>399800	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>399808	00 f1 f5 00
>39980c	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>399814	02 81 f6 01
>399818	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>399820	00 c2 b9 01
>399824	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39982c	05 b2 35 00
>399830	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>399838	1b f2 34 00
>39983c	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>399844	01 f5 74 00
>399848	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>399850	00 61 e3 00
>399854	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>39985c	00 a4 64 00
>399860	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>399868	07 b5 f5 00
>39986c	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>399874	00 f3 74 00
>399878	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>399880	00 c3 94 01
>399884	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39988c	00 f4 0d 01
>399890	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>399898	00 f5 0b 01
>39989c	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3998a4	00 bf 07 00
>3998a8	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3998b0	00 6d 08 01
>3998b4	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3998bc	00 51 17 01
>3998c0	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3998c8	00 51 17 01
>3998cc	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3998d4	00 53 08 01
>3998d8	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3998e0	00 53 06 01
>3998e4	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3998ec	00 d2 f8 00
>3998f0	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3998f8	00 e2 c7 01
>3998fc	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>399904	00 f1 9c 00
>399908	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>399910	02 f2 c9 01
>399914	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39991c	03 95 fb 00
>399920	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>399928	04 a1 59 00
>39992c	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>399934	03 91 fc 03
>399938	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>399940	02 b4 ec 00
>399944	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39994c	00 93 f7 00
>399950	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>399958	04 c1 58 00
>39995c	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>399964	02 c3 6a 00
>399968	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>399970	00 62 87 00
>399974	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39997c	00 f3 97 00
>399980	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>399988	00 b3 97 00
>39998c	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>399994	04 f3 cc 00
>399998	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3999a0	00 93 aa 00
>3999a4	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3999ac	00 78 08 01
>3999b0	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3999b8	00 78 08 01
>3999bc	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3999c4	00 54 27 01
>3999c8	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3999d0	00 61 56 00
>3999d4	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3999dc	00 75 16 01
>3999e0	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3999e8	00 f5 f6 01
>3999ec	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3999f4	80 f3 e3 00
>3999f8	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>399a00	00 b5 f5 00
>399a04	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>399a0c	80 71 16 00
>399a10	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>399a18	00 30 55 01
>399a1c	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>399a24	00 62 36 01
>399a28	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>399a30	02 51 07 00
>399a34	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>399a3c	00 62 39 00
>399a40	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>399a48	00 66 27 00
>399a4c	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>399a54	00 73 46 00
>399a58	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>399a60	00 74 76 01
>399a64	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>399a6c	81 92 38 00
>399a70	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>399a78	02 71 19 00
>399a7c	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>399a84	01 81 09 00
>399a88	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>399a90	00 83 4b 02
>399a94	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>399a9c	05 71 59 00
>399aa0	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>399aa8	03 82 39 00
>399aac	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>399ab4	82 84 17 00
>399ab8	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>399ac0	02 72 16 00
>399ac4	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>399acc	00 7b 0a 00
>399ad0	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>399ad8	00 85 0c 01
>399adc	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>399ae4	00 7b 0a 01
>399ae8	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>399af0	00 79 18 01
>399af4	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>399afc	01 73 08 00
>399b00	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>399b08	04 77 0a 00
>399b0c	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>399b14	00 51 19 00
>399b18	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>399b20	01 74 09 00
>399b24	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>399b2c	01 63 28 00
>399b30	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>399b38	00 65 0a 00
>399b3c	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>399b44	00 67 29 00
>399b48	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>399b50	00 67 09 00
>399b54	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>399b5c	01 6a 28 00
>399b60	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>399b68	00 55 27 00
>399b6c	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>399b74	00 6f 08 00
>399b78	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>399b80	00 7a 07 00
>399b84	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>399b8c	06 a2 0d 00
>399b90	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>399b98	00 a3 5f 00
>399b9c	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>399ba4	00 42 27 00
>399ba8	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>399bb0	05 b2 49 00
>399bb4	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>399bbc	00 b2 79 01
>399bc0	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>399bc8	00 7a 1a 00
>399bcc	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>399bd4	00 82 28 01
>399bd8	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>399be0	02 c3 5f 00
>399be4	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>399bec	86 c4 95 01
>399bf0	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>399bf8	00 44 15 00
>399bfc	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>399c04	00 d1 06 00
>399c08	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>399c10	00 82 37 00
>399c14	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>399c1c	00 41 35 00
>399c20	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>399c28	02 32 f5 01
>399c2c	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>399c34	00 61 26 00
>399c38	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>399c40	84 3f 05 01
>399c44	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>399c4c	01 d1 f6 00
>399c50	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>399c58	00 41 05 01
>399c5c	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>399c64	05 f3 e4 00
>399c68	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>399c70	00 92 f5 01
>399c74	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>399c7c	04 f2 e4 01
>399c80	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>399c88	00 45 25 00
>399c8c	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>399c94	01 a3 36 00
>399c98	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>399ca0	01 98 05 01
>399ca4	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>399cac	02 a3 f6 01
>399cb0	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>399cb8	00 f6 f8 00
>399cbc	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>399cc4	00 f3 f5 00
>399cc8	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>399cd0	00 94 e5 01
>399cd4	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>399cdc	00 84 44 00
>399ce0	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>399ce8	03 83 18 01
>399cec	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>399cf4	01 78 08 01
>399cf8	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>399d00	03 8e 08 01
>399d04	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>399d0c	09 f2 46 00
>399d10	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>399d18	00 96 e8 01
>399d1c	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>399d24	00 f6 f6 01
>399d28	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>399d30	00 f6 9a 00
>399d34	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>399d3c	00 c6 45 00
>399d40	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>399d48	00 f4 b4 00
>399d4c	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>399d54	00 d5 25 00
>399d58	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>399d60	0e 21 2d 00
>399d64	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>399d6c	00 55 87 02
>399d70	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>399d78	08 98 87 01
>399d7c	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>399d84	04 17 04 03
>399d88	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>399d90	05 77 f9 02
>399d94	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>399d9c	02 f4 08 00
>399da0	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>399da8	00 36 05 01
>399dac	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>399db4	05 32 55 03
>399db8	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>399dc0	00 f3 df 00
>399dc4	c4 97 39 00 d0 97 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>399dcc	dc 97 39 00 e8 97 39 00 f4 97 39 00 00 98 39 00
>399ddc	0c 98 39 00 18 98 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>399de4	24 98 39 00 30 98 39 00 3c 98 39 00 48 98 39 00
>399df4	54 98 39 00 60 98 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>399dfc	6c 98 39 00 78 98 39 00 84 98 39 00 90 98 39 00
>399e0c	9c 98 39 00 a8 98 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>399e14	b4 98 39 00 c0 98 39 00 cc 98 39 00 d8 98 39 00
>399e24	e4 98 39 00 f0 98 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>399e2c	fc 98 39 00 08 99 39 00 14 99 39 00 20 99 39 00
>399e3c	2c 99 39 00 38 99 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>399e44	44 99 39 00 50 99 39 00 5c 99 39 00 68 99 39 00
>399e54	74 99 39 00 80 99 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>399e5c	8c 99 39 00 98 99 39 00 a4 99 39 00 b0 99 39 00
>399e6c	bc 99 39 00 c8 99 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>399e74	d4 99 39 00 e0 99 39 00 ec 99 39 00 f8 99 39 00
>399e84	04 9a 39 00 10 9a 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>399e8c	1c 9a 39 00 28 9a 39 00 34 9a 39 00 40 9a 39 00
>399e9c	4c 9a 39 00 58 9a 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>399ea4	64 9a 39 00 70 9a 39 00 7c 9a 39 00 88 9a 39 00
>399eb4	94 9a 39 00 a0 9a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>399ebc	ac 9a 39 00 b8 9a 39 00 c4 9a 39 00 d0 9a 39 00
>399ecc	dc 9a 39 00 e8 9a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>399ed4	f4 9a 39 00 00 9b 39 00 0c 9b 39 00 18 9b 39 00
>399ee4	24 9b 39 00 30 9b 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>399eec	3c 9b 39 00 48 9b 39 00 54 9b 39 00 60 9b 39 00
>399efc	6c 9b 39 00 78 9b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>399f04	84 9b 39 00 90 9b 39 00 9c 9b 39 00 a8 9b 39 00
>399f14	b4 9b 39 00 c0 9b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>399f1c	cc 9b 39 00 d8 9b 39 00 e4 9b 39 00 f0 9b 39 00
>399f2c	fc 9b 39 00 08 9c 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>399f34	14 9c 39 00 20 9c 39 00 2c 9c 39 00 38 9c 39 00
>399f44	44 9c 39 00 50 9c 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>399f4c	5c 9c 39 00 68 9c 39 00 74 9c 39 00 80 9c 39 00
>399f5c	8c 9c 39 00 98 9c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>399f64	a4 9c 39 00 b0 9c 39 00 bc 9c 39 00 c8 9c 39 00
>399f74	d4 9c 39 00 e0 9c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>399f7c	ec 9c 39 00 f8 9c 39 00 04 9d 39 00 10 9d 39 00
>399f8c	1c 9d 39 00 28 9d 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>399f94	34 9d 39 00 40 9d 39 00 4c 9d 39 00 58 9d 39 00
>399fa4	64 9d 39 00 70 9d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>399fac	7c 9d 39 00 88 9d 39 00 94 9d 39 00 a0 9d 39 00
>399fbc	ac 9d 39 00 b8 9d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>399fc4	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>399fcc	0d f2 f7 00
>399fd0	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>399fd8	07 f2 f7 00
>399fdc	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>399fe4	07 f2 f6 00
>399fe8	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>399ff0	07 f2 f7 00
>399ff4	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>399ffc	07 f2 f7 00
>39a000	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>39a008	07 f2 f7 00
>39a00c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a014	00 00 00 00
>39a018	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a020	00 00 00 00
>39a024	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a02c	00 00 00 00
>39a030	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>39a038	87 f2 f1 00
>39a03c	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>39a044	07 f4 f4 00
>39a048	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>39a050	07 f2 f6 00
>39a054	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>39a05c	07 e7 f7 00
>39a060	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>39a068	07 f6 f6 00
>39a06c	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>39a074	87 a3 f3 00
>39a078	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a080	00 00 00 00
>39a084	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a08c	00 00 00 00
>39a090	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a098	00 00 00 00
>39a09c	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>39a0a4	07 8a 08 00
>39a0a8	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>39a0b0	07 55 14 00
>39a0b4	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>39a0bc	87 55 04 00
>39a0c0	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>39a0c8	07 46 1a 00
>39a0cc	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>39a0d4	07 61 07 00
>39a0d8	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>39a0e0	90 61 07 00
>39a0e4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a0ec	00 00 00 00
>39a0f0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a0f8	00 00 00 00
>39a0fc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a104	00 00 00 00
>39a108	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>39a110	87 f3 f8 00
>39a114	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>39a11c	07 f6 3a 00
>39a120	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>39a128	0c 84 19 00
>39a12c	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>39a134	07 94 19 00
>39a138	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>39a140	87 d1 f8 00
>39a144	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>39a14c	07 c3 a6 00
>39a150	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a158	00 00 00 00
>39a15c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a164	00 00 00 00
>39a168	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a170	00 00 00 00
>39a174	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>39a17c	47 f2 df 00
>39a180	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>39a188	0f a1 df 00
>39a18c	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>39a194	07 f1 78 00
>39a198	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>39a1a0	07 f1 18 00
>39a1a4	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>39a1ac	07 56 26 00
>39a1b0	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>39a1b8	07 66 06 00
>39a1bc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a1c4	00 00 00 00
>39a1c8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a1d0	00 00 00 00
>39a1d4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a1dc	00 00 00 00
>39a1e0	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>39a1e8	87 85 35 00
>39a1ec	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>39a1f4	87 f3 f4 00
>39a1f8	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39a200	07 f2 c3 00
>39a204	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>39a20c	08 72 08 00
>39a210	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>39a218	07 3f 07 01
>39a21c	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>39a224	07 4f 05 00
>39a228	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a230	00 00 00 00
>39a234	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a23c	00 00 00 00
>39a240	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a248	00 00 00 00
>39a24c	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>39a254	07 7a 05 00
>39a258	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>39a260	07 a5 45 00
>39a264	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>39a26c	08 8f 09 00
>39a270	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39a278	0c 8f 09 00
>39a27c	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>39a284	07 82 37 00
>39a288	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>39a290	07 62 2c 01
>39a294	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a29c	00 00 00 00
>39a2a0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a2a8	00 00 00 00
>39a2ac	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a2b4	00 00 00 00
>39a2b8	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39a2c0	07 a6 1c 00
>39a2c4	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>39a2cc	07 72 0b 00
>39a2d0	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>39a2d8	07 72 09 00
>39a2dc	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>39a2e4	07 82 09 00
>39a2e8	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39a2f0	07 72 0f 00
>39a2f4	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>39a2fc	07 8f 0a 00
>39a300	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a308	00 00 00 00
>39a30c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a314	00 00 00 00
>39a318	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a320	00 00 00 00
>39a324	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39a32c	07 65 1a 00
>39a330	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39a338	07 65 1a 00
>39a33c	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>39a344	07 75 0a 00
>39a348	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>39a350	07 65 1a 00
>39a354	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>39a35c	07 65 26 00
>39a360	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>39a368	07 55 36 00
>39a36c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a374	00 00 00 00
>39a378	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a380	00 00 00 00
>39a384	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a38c	00 00 00 00
>39a390	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39a398	07 ff 0f 01
>39a39c	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>39a3a4	87 64 18 00
>39a3a8	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39a3b0	07 96 0a 00
>39a3b4	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39a3bc	07 91 2a 00
>39a3c0	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>39a3c8	47 6f 07 00
>39a3cc	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>39a3d4	07 8f 06 02
>39a3d8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a3e0	00 00 00 00
>39a3e4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a3ec	00 00 00 00
>39a3f0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a3f8	00 00 00 00
>39a3fc	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>39a404	07 55 16 00
>39a408	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39a410	07 6a 03 00
>39a414	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>39a41c	07 42 35 00
>39a420	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>39a428	07 31 47 01
>39a42c	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>39a434	0a 42 25 00
>39a438	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>39a440	07 cf 07 00
>39a444	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a44c	00 00 00 00
>39a450	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a458	00 00 00 00
>39a45c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a464	00 00 00 00
>39a468	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>39a470	8a f2 26 00
>39a474	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>39a47c	07 f2 f5 00
>39a480	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39a488	87 11 13 00
>39a48c	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>39a494	87 1d 03 00
>39a498	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39a4a0	07 81 23 00
>39a4a4	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39a4ac	0a f2 f6 01
>39a4b0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a4b8	00 00 00 00
>39a4bc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a4c4	00 00 00 00
>39a4c8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a4d0	00 00 00 00
>39a4d4	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39a4dc	07 c2 05 00
>39a4e0	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>39a4e8	07 6f 0c 01
>39a4ec	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>39a4f4	07 56 16 00
>39a4f8	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39a500	88 8f 0b 00
>39a504	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39a50c	87 c3 e5 00
>39a510	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>39a518	07 f8 16 00
>39a51c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a524	00 00 00 00
>39a528	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a530	00 00 00 00
>39a534	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a53c	00 00 00 00
>39a540	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>39a548	0a f3 03 00
>39a54c	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>39a554	07 f3 02 00
>39a558	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>39a560	07 1f ff 03
>39a564	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>39a56c	8f 56 84 02
>39a570	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39a578	0c 34 04 03
>39a57c	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>39a584	07 1f 02 03
>39a588	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a590	00 00 00 00
>39a594	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a59c	00 00 00 00
>39a5a0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39a5a8	00 00 00 00
>39a5ac	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>39a5b4	07 12 16 01
>39a5b8	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39a5c0	07 f6 c9 02
>39a5c4	c4 9f 39 00 d0 9f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39a5cc	dc 9f 39 00 e8 9f 39 00 f4 9f 39 00 00 a0 39 00
>39a5dc	0c a0 39 00 18 a0 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>39a5e4	24 a0 39 00 30 a0 39 00 3c a0 39 00 48 a0 39 00
>39a5f4	54 a0 39 00 60 a0 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39a5fc	6c a0 39 00 78 a0 39 00 84 a0 39 00 90 a0 39 00
>39a60c	9c a0 39 00 a8 a0 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>39a614	b4 a0 39 00 c0 a0 39 00 cc a0 39 00 d8 a0 39 00
>39a624	e4 a0 39 00 f0 a0 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39a62c	fc a0 39 00 08 a1 39 00 14 a1 39 00 20 a1 39 00
>39a63c	2c a1 39 00 38 a1 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>39a644	44 a1 39 00 50 a1 39 00 5c a1 39 00 68 a1 39 00
>39a654	74 a1 39 00 80 a1 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>39a65c	8c a1 39 00 98 a1 39 00 a4 a1 39 00 b0 a1 39 00
>39a66c	bc a1 39 00 c8 a1 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>39a674	d4 a1 39 00 e0 a1 39 00 ec a1 39 00 f8 a1 39 00
>39a684	04 a2 39 00 10 a2 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39a68c	1c a2 39 00 28 a2 39 00 34 a2 39 00 40 a2 39 00
>39a69c	4c a2 39 00 58 a2 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>39a6a4	64 a2 39 00 70 a2 39 00 7c a2 39 00 88 a2 39 00
>39a6b4	94 a2 39 00 a0 a2 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39a6bc	ac a2 39 00 b8 a2 39 00 c4 a2 39 00 d0 a2 39 00
>39a6cc	dc a2 39 00 e8 a2 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>39a6d4	f4 a2 39 00 00 a3 39 00 0c a3 39 00 18 a3 39 00
>39a6e4	24 a3 39 00 30 a3 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39a6ec	3c a3 39 00 48 a3 39 00 54 a3 39 00 60 a3 39 00
>39a6fc	6c a3 39 00 78 a3 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39a704	84 a3 39 00 90 a3 39 00 9c a3 39 00 a8 a3 39 00
>39a714	b4 a3 39 00 c0 a3 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39a71c	cc a3 39 00 d8 a3 39 00 e4 a3 39 00 f0 a3 39 00
>39a72c	fc a3 39 00 08 a4 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>39a734	14 a4 39 00 20 a4 39 00 2c a4 39 00 38 a4 39 00
>39a744	44 a4 39 00 50 a4 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39a74c	5c a4 39 00 68 a4 39 00 74 a4 39 00 80 a4 39 00
>39a75c	8c a4 39 00 98 a4 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>39a764	a4 a4 39 00 b0 a4 39 00 bc a4 39 00 c8 a4 39 00
>39a774	d4 a4 39 00 e0 a4 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39a77c	ec a4 39 00 f8 a4 39 00 04 a5 39 00 10 a5 39 00
>39a78c	1c a5 39 00 28 a5 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>39a794	34 a5 39 00 40 a5 39 00 4c a5 39 00 58 a5 39 00
>39a7a4	64 a5 39 00 70 a5 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39a7ac	7c a5 39 00 88 a5 39 00 94 a5 39 00 a0 a5 39 00
>39a7bc	ac a5 39 00 b8 a5 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>39a7c4	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39a7cc					IOPL2_TONE_TEST
.39a7cc	e2 20		sep #$20	                SEP #$20        ; set A short
.39a7ce	c2 10		rep #$10	                REP #$10        ; set X long
.39a7d0	a2 00 00	ldx #$0000	                LDX #0
.39a7d3					OPL2_TONE_TESTING_L1
.39a7d3	bd c4 a7	lda $39a7c4,x	                LDA NOTE_INTRO, X
.39a7d6	29 0f		and #$0f	                AND #$F
.39a7d8	85 30		sta $30		                STA OPL2_NOTE ; start at C
.39a7da	bd c4 a7	lda $39a7c4,x	                LDA NOTE_INTRO, X
.39a7dd	29 70		and #$70	                AND #$70
.39a7df	4a		lsr a		                LSR A
.39a7e0	4a		lsr a		                LSR A
.39a7e1	4a		lsr a		                LSR A
.39a7e2	4a		lsr a		                LSR A
.39a7e3	85 31		sta $31		                STA OPL2_OCTAVE
.39a7e5	8a		txa		                TXA
.39a7e6	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.39a7e8	85 27		sta $27		                STA OPL2_CHANNEL
.39a7ea	22 ba a9 39	jsl $39a9ba	                JSL OPL2_PLAYNOTE
.39a7ee	a0 00 00	ldy #$0000	                LDY #$0000
.39a7f1					OPL2_TONE_TESTING_L2
.39a7f1	ea		nop		                NOP
.39a7f2	ea		nop		                NOP
.39a7f3	ea		nop		                NOP
.39a7f4	ea		nop		                NOP
.39a7f5	c8		iny		                INY
.39a7f6	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.39a7f9	d0 f6		bne $39a7f1	                BNE OPL2_TONE_TESTING_L2
.39a7fb	e8		inx		                INX
.39a7fc	e0 08 00	cpx #$0008	                CPX #8
.39a7ff	d0 d2		bne $39a7d3	                BNE OPL2_TONE_TESTING_L1
.39a801	6b		rtl		                RTL
.39a802					OPL2_INIT
.39a802	c2 20		rep #$20	                REP #$20        ; set A long
.39a804	a9 00 00	lda #$0000	                LDA #$0000
.39a807	85 28		sta $28		                STA OPL2_REG_REGION
.39a809	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39a80b	85 30		sta $30		                STA OPL2_NOTE
.39a80d	85 32		sta $32		                STA OPL2_PARAMETER0
.39a80f	85 34		sta $34		                STA OPL2_PARAMETER2
.39a811	a9 8e 87	lda #$878e	                LDA #<>INSTRUMENT_ACCORDN
.39a814	85 50		sta $50		                STA RAD_ADDR
.39a816	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.39a819	85 52		sta $52		                STA RAD_ADDR + 2
.39a81b	e2 20		sep #$20	                SEP #$20        ; set A short
.39a81d	6b		rtl		                RTL
.39a81e					OPL2_Reset
.39a81e	6b		rtl		                RTL
.39a81f					OPL2_Get_FrequencyBlock
.39a81f	6b		rtl		                RTL
.39a820					OPL2_GET_REGISTER
.39a820	48		pha		                PHA             ; begin setdp macro
.39a821	08		php		                PHP
.39a822	c2 20		rep #$20	                REP #$20        ; set A long
.39a824	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a827	5b		tcd		                TCD
.39a828	28		plp		                PLP
.39a829	68		pla		                PLA             ; end setdp macro
.39a82a	c2 20		rep #$20	                REP #$20        ; set A long
.39a82c	18		clc		              CLC
.39a82d	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a830	65 32		adc $32		              ADC OPL2_PARAMETER0
.39a832	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a834	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a837	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a839	e2 20		sep #$20	                SEP #$20        ; set A short
.39a83b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a83d	6b		rtl		              RTL
.39a83e					OPL2_GET_WAVEFORM_SELECT
.39a83e	48		pha		                PHA             ; begin setdp macro
.39a83f	08		php		                PHP
.39a840	c2 20		rep #$20	                REP #$20        ; set A long
.39a842	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a845	5b		tcd		                TCD
.39a846	28		plp		                PLP
.39a847	68		pla		                PLA             ; end setdp macro
.39a848	c2 20		rep #$20	                REP #$20        ; set A long
.39a84a	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a84d	69 01 00	adc #$0001	              ADC #$0001
.39a850	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a852	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a855	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a857	e2 20		sep #$20	                SEP #$20        ; set A short
.39a859	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a85b	29 20		and #$20	              AND #$20
.39a85d	6b		rtl		              RTL
.39a85e					OPL2_GET_SCALINGLEVEL
.39a85e	48		pha		                PHA             ; begin setdp macro
.39a85f	08		php		                PHP
.39a860	c2 20		rep #$20	                REP #$20        ; set A long
.39a862	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a865	5b		tcd		                TCD
.39a866	28		plp		                PLP
.39a867	68		pla		                PLA             ; end setdp macro
.39a868	c2 20		rep #$20	                REP #$20        ; set A long
.39a86a	a9 40 00	lda #$0040	              LDA #$0040  ;
.39a86d	85 28		sta $28		              STA OPL2_REG_REGION
.39a86f	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39a872	e2 20		sep #$20	                SEP #$20        ; set A short
.39a874	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a876	29 c0		and #$c0	              AND #$C0
.39a878	4a		lsr a		              LSR A
.39a879	4a		lsr a		              LSR A
.39a87a	4a		lsr a		              LSR A
.39a87b	4a		lsr a		              LSR A
.39a87c	4a		lsr a		              LSR A
.39a87d	4a		lsr a		              LSR A
.39a87e	6b		rtl		              RTL
.39a87f					OPL2_GET_BLOCK
.39a87f	48		pha		                PHA             ; begin setdp macro
.39a880	08		php		                PHP
.39a881	c2 20		rep #$20	                REP #$20        ; set A long
.39a883	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a886	5b		tcd		                TCD
.39a887	28		plp		                PLP
.39a888	68		pla		                PLA             ; end setdp macro
.39a889	e2 20		sep #$20	                SEP #$20        ; set A short
.39a88b	18		clc		              CLC
.39a88c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39a88e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39a890	69 b0		adc #$b0	              ADC #$B0
.39a892	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39a894	a9 00		lda #$00	              LDA #$00
.39a896	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39a898	c2 30		rep #$30	                REP #$30        ; set A&X long
.39a89a	18		clc		              CLC
.39a89b	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a89e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39a8a0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a8a2	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a8a5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a8a7	e2 20		sep #$20	                SEP #$20        ; set A short
.39a8a9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a8ab	29 1c		and #$1c	              AND #$1C
.39a8ad	4a		lsr a		              LSR A
.39a8ae	4a		lsr a		              LSR A
.39a8af	6b		rtl		              RTL
.39a8b0					OPL2_GET_KEYON
.39a8b0	48		pha		                PHA             ; begin setdp macro
.39a8b1	08		php		                PHP
.39a8b2	c2 20		rep #$20	                REP #$20        ; set A long
.39a8b4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a8b7	5b		tcd		                TCD
.39a8b8	28		plp		                PLP
.39a8b9	68		pla		                PLA             ; end setdp macro
.39a8ba	e2 20		sep #$20	                SEP #$20        ; set A short
.39a8bc	18		clc		              CLC
.39a8bd	a5 27		lda $27		              LDA OPL2_CHANNEL
.39a8bf	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39a8c1	69 b0		adc #$b0	              ADC #$B0
.39a8c3	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39a8c5	a9 00		lda #$00	              LDA #$00
.39a8c7	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39a8c9	c2 30		rep #$30	                REP #$30        ; set A&X long
.39a8cb	18		clc		              CLC
.39a8cc	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a8cf	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39a8d1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a8d3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a8d6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a8d8	e2 20		sep #$20	                SEP #$20        ; set A short
.39a8da	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a8dc	29 20		and #$20	              AND #$20
.39a8de	6b		rtl		              RTL
.39a8df					OPL2_GET_FEEDBACK
.39a8df	48		pha		                PHA             ; begin setdp macro
.39a8e0	08		php		                PHP
.39a8e1	c2 20		rep #$20	                REP #$20        ; set A long
.39a8e3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a8e6	5b		tcd		                TCD
.39a8e7	28		plp		                PLP
.39a8e8	68		pla		                PLA             ; end setdp macro
.39a8e9	e2 20		sep #$20	                SEP #$20        ; set A short
.39a8eb	18		clc		              CLC
.39a8ec	a5 27		lda $27		              LDA OPL2_CHANNEL
.39a8ee	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39a8f0	69 c0		adc #$c0	              ADC #$C0
.39a8f2	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39a8f4	a9 00		lda #$00	              LDA #$00
.39a8f6	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39a8f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.39a8fa	18		clc		              CLC
.39a8fb	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a8fe	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39a900	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a902	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a905	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a907	e2 20		sep #$20	                SEP #$20        ; set A short
.39a909	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a90b	29 e0		and #$e0	              AND #$E0
.39a90d	4a		lsr a		              LSR
.39a90e	6b		rtl		              RTL
.39a90f					OPL2_GET_SYNTHMODE
.39a90f	48		pha		                PHA             ; begin setdp macro
.39a910	08		php		                PHP
.39a911	c2 20		rep #$20	                REP #$20        ; set A long
.39a913	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a916	5b		tcd		                TCD
.39a917	28		plp		                PLP
.39a918	68		pla		                PLA             ; end setdp macro
.39a919	e2 20		sep #$20	                SEP #$20        ; set A short
.39a91b	18		clc		              CLC
.39a91c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39a91e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39a920	69 c0		adc #$c0	              ADC #$C0
.39a922	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39a924	a9 00		lda #$00	              LDA #$00
.39a926	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39a928	c2 30		rep #$30	                REP #$30        ; set A&X long
.39a92a	18		clc		              CLC
.39a92b	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a92e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39a930	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a932	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a935	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a937	e2 20		sep #$20	                SEP #$20        ; set A short
.39a939	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a93b	29 01		and #$01	              AND #$01
.39a93d	6b		rtl		              RTL
.39a93e					OPL2_GET_DEEPTREMOLO
.39a93e	48		pha		                PHA             ; begin setdp macro
.39a93f	08		php		                PHP
.39a940	c2 20		rep #$20	                REP #$20        ; set A long
.39a942	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a945	5b		tcd		                TCD
.39a946	28		plp		                PLP
.39a947	68		pla		                PLA             ; end setdp macro
.39a948	c2 20		rep #$20	                REP #$20        ; set A long
.39a94a	a9 bd 00	lda #$00bd	              LDA #$00BD;
.39a94d	85 28		sta $28		              STA OPL2_REG_REGION
.39a94f	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39a952	e2 20		sep #$20	                SEP #$20        ; set A short
.39a954	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a956	29 80		and #$80	              AND #$80
.39a958	6b		rtl		              RTL
.39a959					OPL2_GET_DEEPVIBRATO
.39a959	48		pha		                PHA             ; begin setdp macro
.39a95a	08		php		                PHP
.39a95b	c2 20		rep #$20	                REP #$20        ; set A long
.39a95d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a960	5b		tcd		                TCD
.39a961	28		plp		                PLP
.39a962	68		pla		                PLA             ; end setdp macro
.39a963	c2 20		rep #$20	                REP #$20        ; set A long
.39a965	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a968	69 bd 00	adc #$00bd	              ADC #$00BD
.39a96b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a96d	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a970	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a972	e2 20		sep #$20	                SEP #$20        ; set A short
.39a974	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a976	29 40		and #$40	              AND #$40
.39a978	6b		rtl		              RTL
.39a979					OPL2_GET_PERCUSSION
.39a979	48		pha		                PHA             ; begin setdp macro
.39a97a	08		php		                PHP
.39a97b	c2 20		rep #$20	                REP #$20        ; set A long
.39a97d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a980	5b		tcd		                TCD
.39a981	28		plp		                PLP
.39a982	68		pla		                PLA             ; end setdp macro
.39a983	c2 20		rep #$20	                REP #$20        ; set A long
.39a985	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a988	69 bd 00	adc #$00bd	              ADC #$00BD
.39a98b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a98d	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a990	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a992	e2 20		sep #$20	                SEP #$20        ; set A short
.39a994	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a996	29 20		and #$20	              AND #$20
.39a998	6b		rtl		              RTL
.39a999					OPL2_GET_DRUMS
.39a999	48		pha		                PHA             ; begin setdp macro
.39a99a	08		php		                PHP
.39a99b	c2 20		rep #$20	                REP #$20        ; set A long
.39a99d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a9a0	5b		tcd		                TCD
.39a9a1	28		plp		                PLP
.39a9a2	68		pla		                PLA             ; end setdp macro
.39a9a3	c2 20		rep #$20	                REP #$20        ; set A long
.39a9a5	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39a9a8	69 bd 00	adc #$00bd	              ADC #$00BD
.39a9ab	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39a9ad	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39a9b0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39a9b2	e2 20		sep #$20	                SEP #$20        ; set A short
.39a9b4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39a9b6	29 1f		and #$1f	              AND #$1F
.39a9b8	6b		rtl		              RTL
.39a9b9					OPL2_Get_WaveForm
.39a9b9	6b		rtl		                RTL
.39a9ba					OPL2_PLAYNOTE
.39a9ba	48		pha		                PHA             ; begin setdp macro
.39a9bb	08		php		                PHP
.39a9bc	c2 20		rep #$20	                REP #$20        ; set A long
.39a9be	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a9c1	5b		tcd		                TCD
.39a9c2	28		plp		                PLP
.39a9c3	68		pla		                PLA             ; end setdp macro
.39a9c4	e2 20		sep #$20	                SEP #$20        ; set A short
.39a9c6	da		phx		                PHX
.39a9c7	a9 00		lda #$00	                LDA #$00
.39a9c9	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39a9cb	20 a2 af	jsr $39afa2	                JSR OPL2_SET_KEYON
.39a9ce	20 67 af	jsr $39af67	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39a9d1	e2 10		sep #$10	                SEP #$10        ; set X short
.39a9d3	a5 30		lda $30		                LDA OPL2_NOTE
.39a9d5	3a		dec a		                DEC A
.39a9d6	0a		asl a		                ASL A
.39a9d7	aa		tax		                TAX
.39a9d8	bf 53 87 39	lda $398753,x	                LDA @lnoteFNumbers,X
.39a9dc	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39a9de	e8		inx		                INX
.39a9df	bf 53 87 39	lda $398753,x	                LDA @lnoteFNumbers,X
.39a9e3	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.39a9e5	22 e5 ae 39	jsl $39aee5	                JSL OPL2_SET_FNUMBER
.39a9e9	a9 01		lda #$01	                LDA #$01
.39a9eb	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39a9ed	20 a2 af	jsr $39afa2	                JSR OPL2_SET_KEYON
.39a9f0	c2 10		rep #$10	                REP #$10        ; set X long
.39a9f2	fa		plx		                PLX
.39a9f3	6b		rtl		                RTL
.39a9f4					OPL2_PLAYDRUM
.39a9f4	6b		rtl		                RTL
.39a9f5					OPL2_SET_INSTRUMENT
.39a9f5	48		pha		                PHA             ; begin setdp macro
.39a9f6	08		php		                PHP
.39a9f7	c2 20		rep #$20	                REP #$20        ; set A long
.39a9f9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39a9fc	5b		tcd		                TCD
.39a9fd	28		plp		                PLP
.39a9fe	68		pla		                PLA             ; end setdp macro
.39a9ff	38		sec		              SEC ; Set the WaveFormSelect to True
.39aa00	22 e3 ab 39	jsl $39abe3	              JSL OPL2_SET_WAVEFORMSELECT;
.39aa04	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa06	c2 10		rep #$10	                REP #$10        ; set X long
.39aa08	a0 00 00	ldy #$0000	              LDY #$0000
.39aa0b	a2 00 00	ldx #$0000	              LDX #$0000
.39aa0e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39aa10	85 35		sta $35		              STA OPL2_PARAMETER3
.39aa12	c8		iny		              INY
.39aa13	c9 06		cmp #$06	              CMP #$06
.39aa15	d0 03		bne $39aa1a	              BNE PERCUSSION_NEXT07
.39aa17	82 70 01	brl $39ab8a	              BRL Percussion_6
.39aa1a					PERCUSSION_NEXT07
.39aa1a	c9 07		cmp #$07	              CMP #$07
.39aa1c	d0 03		bne $39aa21	              BNE PERCUSSION_NEXT08
.39aa1e	82 44 01	brl $39ab65	              BRL Percussion_7
.39aa21					PERCUSSION_NEXT08
.39aa21	c9 08		cmp #$08	              CMP #$08
.39aa23	d0 03		bne $39aa28	              BNE PERCUSSION_NEXT09
.39aa25	82 18 01	brl $39ab40	              BRL Percussion_8
.39aa28					PERCUSSION_NEXT09
.39aa28	c9 09		cmp #$09	              CMP #$09
.39aa2a	d0 03		bne $39aa2f	              BNE PERCUSSION_NEXT0A
.39aa2c	82 ec 00	brl $39ab1b	              BRL Percussion_9
.39aa2f					PERCUSSION_NEXT0A
.39aa2f	c9 0a		cmp #$0a	              CMP #$0A
.39aa31	d0 03		bne $39aa36	              BNE Percussion_Default
.39aa33	82 c0 00	brl $39aaf6	              BRL Percussion_A
.39aa36					Percussion_Default
.39aa36	a9 00		lda #$00	              LDA #$00
.39aa38	85 26		sta $26		              STA OPL2_OPERATOR
.39aa3a	c2 20		rep #$20	                REP #$20        ; set A long
.39aa3c	a9 20 00	lda #$0020	              LDA #$0020;
.39aa3f	85 28		sta $28		              STA OPL2_REG_REGION
.39aa41	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aa44	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa46	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39aa48	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aa4a	c8		iny		              INY
.39aa4b	c2 20		rep #$20	                REP #$20        ; set A long
.39aa4d	a9 40 00	lda #$0040	              LDA #$0040;
.39aa50	85 28		sta $28		              STA OPL2_REG_REGION
.39aa52	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aa55	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa57	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39aa59	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aa5b	c8		iny		              INY
.39aa5c	c2 20		rep #$20	                REP #$20        ; set A long
.39aa5e	a9 60 00	lda #$0060	              LDA #$0060;
.39aa61	85 28		sta $28		              STA OPL2_REG_REGION
.39aa63	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aa66	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa68	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39aa6a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aa6c	c8		iny		              INY
.39aa6d	c2 20		rep #$20	                REP #$20        ; set A long
.39aa6f	a9 80 00	lda #$0080	              LDA #$0080;
.39aa72	85 28		sta $28		              STA OPL2_REG_REGION
.39aa74	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aa77	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa79	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39aa7b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aa7d	c8		iny		              INY
.39aa7e	c2 20		rep #$20	                REP #$20        ; set A long
.39aa80	a9 e0 00	lda #$00e0	              LDA #$00E0;
.39aa83	85 28		sta $28		              STA OPL2_REG_REGION
.39aa85	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aa88	e2 20		sep #$20	                SEP #$20        ; set A short
.39aa8a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39aa8c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aa8e	c8		iny		              INY
.39aa8f	e2 10		sep #$10	                SEP #$10        ; set X short
.39aa91	a5 27		lda $27		              LDA OPL2_CHANNEL
.39aa93	29 0f		and #$0f	              AND #$0F
.39aa95	aa		tax		              TAX
.39aa96	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39aa98	9f c0 e7 af	sta $afe7c0,x	              STA @lOPL2_S_FEEDBACK,X
.39aa9c	c8		iny		              INY
.39aa9d	a9 01		lda #$01	              LDA #$01
.39aa9f	85 26		sta $26		              STA OPL2_OPERATOR
.39aaa1	c2 20		rep #$20	                REP #$20        ; set A long
.39aaa3	a9 20 00	lda #$0020	              LDA #$0020;
.39aaa6	85 28		sta $28		              STA OPL2_REG_REGION
.39aaa8	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aaab	e2 20		sep #$20	                SEP #$20        ; set A short
.39aaad	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39aaaf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aab1	c8		iny		              INY
.39aab2	c2 20		rep #$20	                REP #$20        ; set A long
.39aab4	a9 40 00	lda #$0040	              LDA #$0040;
.39aab7	85 28		sta $28		              STA OPL2_REG_REGION
.39aab9	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aabc	e2 20		sep #$20	                SEP #$20        ; set A short
.39aabe	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39aac0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aac2	c8		iny		              INY
.39aac3	c2 20		rep #$20	                REP #$20        ; set A long
.39aac5	a9 60 00	lda #$0060	              LDA #$0060;
.39aac8	85 28		sta $28		              STA OPL2_REG_REGION
.39aaca	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aacd	e2 20		sep #$20	                SEP #$20        ; set A short
.39aacf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39aad1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aad3	c8		iny		              INY
.39aad4	c2 20		rep #$20	                REP #$20        ; set A long
.39aad6	a9 80 00	lda #$0080	              LDA #$0080;
.39aad9	85 28		sta $28		              STA OPL2_REG_REGION
.39aadb	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aade	e2 20		sep #$20	                SEP #$20        ; set A short
.39aae0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.39aae2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aae4	c8		iny		              INY
.39aae5	c2 20		rep #$20	                REP #$20        ; set A long
.39aae7	a9 e0 00	lda #$00e0	              LDA #$00E0;
.39aaea	85 28		sta $28		              STA OPL2_REG_REGION
.39aaec	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39aaef	e2 20		sep #$20	                SEP #$20        ; set A short
.39aaf1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.39aaf3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39aaf5	6b		rtl		                RTL
.39aaf6					Percussion_A
.39aaf6	e2 20		sep #$20	                SEP #$20        ; set A short
.39aaf8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39aafa	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.39aafe	c8		iny		              INY
.39aaff	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39ab01	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.39ab05	c8		iny		              INY
.39ab06	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39ab08	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.39ab0c	c8		iny		              INY
.39ab0d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39ab0f	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.39ab13	c8		iny		              INY
.39ab14	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39ab16	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.39ab1a	6b		rtl		                RTL
.39ab1b					Percussion_9
.39ab1b	e2 20		sep #$20	                SEP #$20        ; set A short
.39ab1d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39ab1f	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.39ab23	c8		iny		              INY
.39ab24	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39ab26	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.39ab2a	c8		iny		              INY
.39ab2b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39ab2d	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.39ab31	c8		iny		              INY
.39ab32	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39ab34	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.39ab38	c8		iny		              INY
.39ab39	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39ab3b	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.39ab3f	6b		rtl		              RTL
.39ab40					Percussion_8
.39ab40	e2 20		sep #$20	                SEP #$20        ; set A short
.39ab42	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39ab44	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.39ab48	c8		iny		              INY
.39ab49	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39ab4b	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.39ab4f	c8		iny		              INY
.39ab50	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39ab52	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.39ab56	c8		iny		              INY
.39ab57	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39ab59	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.39ab5d	c8		iny		              INY
.39ab5e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39ab60	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.39ab64	6b		rtl		              RTL
.39ab65					Percussion_7
.39ab65	e2 20		sep #$20	                SEP #$20        ; set A short
.39ab67	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39ab69	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.39ab6d	c8		iny		              INY
.39ab6e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39ab70	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.39ab74	c8		iny		              INY
.39ab75	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39ab77	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.39ab7b	c8		iny		              INY
.39ab7c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39ab7e	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.39ab82	c8		iny		              INY
.39ab83	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39ab85	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.39ab89	6b		rtl		              RTL
.39ab8a					Percussion_6
.39ab8a	e2 20		sep #$20	                SEP #$20        ; set A short
.39ab8c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39ab8e	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.39ab92	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.39ab96	c8		iny		              INY
.39ab97	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39ab99	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.39ab9d	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.39aba1	c8		iny		              INY
.39aba2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39aba4	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.39aba8	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.39abac	c8		iny		              INY
.39abad	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39abaf	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.39abb3	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.39abb7	c8		iny		              INY
.39abb8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39abba	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.39abbe	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.39abc2	6b		rtl		              RTL
.39abc3					OPL2_SET_REGISTER
.39abc3	48		pha		                PHA             ; begin setdp macro
.39abc4	08		php		                PHP
.39abc5	c2 20		rep #$20	                REP #$20        ; set A long
.39abc7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39abca	5b		tcd		                TCD
.39abcb	28		plp		                PLP
.39abcc	68		pla		                PLA             ; end setdp macro
.39abcd	c2 20		rep #$20	                REP #$20        ; set A long
.39abcf	18		clc		              CLC
.39abd0	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39abd3	65 32		adc $32		              ADC OPL2_PARAMETER0
.39abd5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39abd7	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39abda	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39abdc	e2 20		sep #$20	                SEP #$20        ; set A short
.39abde	a5 33		lda $33		              LDA OPL2_PARAMETER1
.39abe0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39abe2	6b		rtl		              RTL
.39abe3					OPL2_SET_WAVEFORMSELECT
.39abe3	48		pha		                PHA             ; begin setdp macro
.39abe4	08		php		                PHP
.39abe5	c2 20		rep #$20	                REP #$20        ; set A long
.39abe7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39abea	5b		tcd		                TCD
.39abeb	28		plp		                PLP
.39abec	68		pla		                PLA             ; end setdp macro
.39abed	c2 20		rep #$20	                REP #$20        ; set A long
.39abef	a9 01 e7	lda #$e701	              LDA #<>OPL2_S_BASE + $0001
.39abf2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39abf4	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39abf7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39abf9	e2 20		sep #$20	                SEP #$20        ; set A short
.39abfb	b0 07		bcs $39ac04	              BCS OPL2_Set_WaveFormSelect_set
.39abfd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39abff	29 df		and #$df	              AND #$DF
.39ac01	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39ac03	6b		rtl		              RTL
.39ac04					OPL2_Set_WaveFormSelect_set
.39ac04	48		pha		                PHA             ; begin setdp macro
.39ac05	08		php		                PHP
.39ac06	c2 20		rep #$20	                REP #$20        ; set A long
.39ac08	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ac0b	5b		tcd		                TCD
.39ac0c	28		plp		                PLP
.39ac0d	68		pla		                PLA             ; end setdp macro
.39ac0e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ac10	09 20 00	ora #$0020	              ORA #$20
.39ac13	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39ac15	6b		rtl		                RTL
.39ac16					OPL2_SET_TREMOLO
.39ac16	48		pha		                PHA             ; begin setdp macro
.39ac17	08		php		                PHP
.39ac18	c2 20		rep #$20	                REP #$20        ; set A long
.39ac1a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ac1d	5b		tcd		                TCD
.39ac1e	28		plp		                PLP
.39ac1f	68		pla		                PLA             ; end setdp macro
.39ac20	08		php		                PHP ; Push the Carry
.39ac21	c2 20		rep #$20	                REP #$20        ; set A long
.39ac23	18		clc		                CLC
.39ac24	a9 20 00	lda #$0020	                LDA #$0020 ;
.39ac27	85 28		sta $28		                STA OPL2_REG_REGION
.39ac29	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ac2c	28		plp		                PLP ; Pull the Carry out
.39ac2d	e2 20		sep #$20	                SEP #$20        ; set A short
.39ac2f	b0 08		bcs $39ac39	                BCS OPL2_Set_Tremolo_Set;
.39ac31	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac33	29 7f		and #$7f	                AND #$7F
.39ac35	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ac37	80 06		bra $39ac3f	                BRA OPL2_Set_Tremolo_Exit
.39ac39					OPL2_Set_Tremolo_Set
.39ac39	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac3b	09 80		ora #$80	                ORA #$80
.39ac3d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ac3f					OPL2_Set_Tremolo_Exit
.39ac3f	6b		rtl		                RTL
.39ac40					OPL2_GET_TREMOLO
.39ac40	48		pha		                PHA             ; begin setdp macro
.39ac41	08		php		                PHP
.39ac42	c2 20		rep #$20	                REP #$20        ; set A long
.39ac44	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ac47	5b		tcd		                TCD
.39ac48	28		plp		                PLP
.39ac49	68		pla		                PLA             ; end setdp macro
.39ac4a	c2 20		rep #$20	                REP #$20        ; set A long
.39ac4c	a9 20 00	lda #$0020	                LDA #$0020;
.39ac4f	85 28		sta $28		                STA OPL2_REG_REGION
.39ac51	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ac54	e2 20		sep #$20	                SEP #$20        ; set A short
.39ac56	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac58	29 80		and #$80	                AND #$80
.39ac5a	6b		rtl		                RTL
.39ac5b					OPL2_SET_VIBRATO
.39ac5b	48		pha		                PHA             ; begin setdp macro
.39ac5c	08		php		                PHP
.39ac5d	c2 20		rep #$20	                REP #$20        ; set A long
.39ac5f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ac62	5b		tcd		                TCD
.39ac63	28		plp		                PLP
.39ac64	68		pla		                PLA             ; end setdp macro
.39ac65	08		php		                PHP ; Push the Carry
.39ac66	c2 20		rep #$20	                REP #$20        ; set A long
.39ac68	18		clc		                CLC
.39ac69	a9 20 00	lda #$0020	                LDA #$0020;
.39ac6c	85 28		sta $28		                STA OPL2_REG_REGION
.39ac6e	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ac71	28		plp		                PLP ; Pull the Carry out
.39ac72	e2 20		sep #$20	                SEP #$20        ; set A short
.39ac74	b0 08		bcs $39ac7e	                BCS OPL2_Set_Vibrato_Set;
.39ac76	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac78	29 bf		and #$bf	                AND #$BF
.39ac7a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ac7c	80 06		bra $39ac84	                BRA OPL2_Set_Vibrato_Exit
.39ac7e					OPL2_Set_Vibrato_Set
.39ac7e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac80	09 40		ora #$40	                ORA #$40
.39ac82	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ac84					OPL2_Set_Vibrato_Exit
.39ac84	6b		rtl		                RTL
.39ac85					OPL2_GET_VIBRATO
.39ac85	48		pha		                PHA             ; begin setdp macro
.39ac86	08		php		                PHP
.39ac87	c2 20		rep #$20	                REP #$20        ; set A long
.39ac89	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ac8c	5b		tcd		                TCD
.39ac8d	28		plp		                PLP
.39ac8e	68		pla		                PLA             ; end setdp macro
.39ac8f	c2 20		rep #$20	                REP #$20        ; set A long
.39ac91	a9 20 00	lda #$0020	                LDA #$0020;
.39ac94	85 28		sta $28		                STA OPL2_REG_REGION
.39ac96	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ac99	e2 20		sep #$20	                SEP #$20        ; set A short
.39ac9b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ac9d	29 40		and #$40	                AND #$40
.39ac9f	6b		rtl		                RTL
.39aca0					OPL2_SET_MAINTAINSUSTAIN
.39aca0	48		pha		                PHA             ; begin setdp macro
.39aca1	08		php		                PHP
.39aca2	c2 20		rep #$20	                REP #$20        ; set A long
.39aca4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39aca7	5b		tcd		                TCD
.39aca8	28		plp		                PLP
.39aca9	68		pla		                PLA             ; end setdp macro
.39acaa	08		php		              PHP ; Push the Carry
.39acab	c2 20		rep #$20	                REP #$20        ; set A long
.39acad	18		clc		              CLC
.39acae	a9 20 00	lda #$0020	              LDA #$0020;
.39acb1	85 28		sta $28		              STA OPL2_REG_REGION
.39acb3	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39acb6	28		plp		              PLP ; Pull the Carry out
.39acb7	e2 20		sep #$20	                SEP #$20        ; set A short
.39acb9	b0 08		bcs $39acc3	              BCS OPL2_Set_MaintainSustain_Set;
.39acbb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39acbd	29 df		and #$df	              AND #$DF
.39acbf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39acc1	80 06		bra $39acc9	              BRA OPL2_Set_MaintainSustain_Exit
.39acc3					OPL2_Set_MaintainSustain_Set
.39acc3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39acc5	09 20		ora #$20	              ORA #$20
.39acc7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39acc9					OPL2_Set_MaintainSustain_Exit
.39acc9	6b		rtl		                RTL
.39acca					OPL2_GET_MAINTAINSUSTAIN
.39acca	48		pha		                PHA             ; begin setdp macro
.39accb	08		php		                PHP
.39accc	c2 20		rep #$20	                REP #$20        ; set A long
.39acce	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39acd1	5b		tcd		                TCD
.39acd2	28		plp		                PLP
.39acd3	68		pla		                PLA             ; end setdp macro
.39acd4	c2 20		rep #$20	                REP #$20        ; set A long
.39acd6	a9 20 00	lda #$0020	              LDA #$0020;
.39acd9	85 28		sta $28		              STA OPL2_REG_REGION
.39acdb	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39acde	e2 20		sep #$20	                SEP #$20        ; set A short
.39ace0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ace2	29 20		and #$20	              AND #$20
.39ace4	6b		rtl		                RTL
.39ace5					OPL2_SET_ENVELOPESCALING
.39ace5	48		pha		                PHA             ; begin setdp macro
.39ace6	08		php		                PHP
.39ace7	c2 20		rep #$20	                REP #$20        ; set A long
.39ace9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39acec	5b		tcd		                TCD
.39aced	28		plp		                PLP
.39acee	68		pla		                PLA             ; end setdp macro
.39acef	08		php		              PHP ; Push the Carry
.39acf0	c2 20		rep #$20	                REP #$20        ; set A long
.39acf2	18		clc		              CLC
.39acf3	a9 20 00	lda #$0020	              LDA #$0020;
.39acf6	85 28		sta $28		              STA OPL2_REG_REGION
.39acf8	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39acfb	28		plp		              PLP ; Pull the Carry out
.39acfc	e2 20		sep #$20	                SEP #$20        ; set A short
.39acfe	b0 08		bcs $39ad08	              BCS OPL2_Set_EnvelopeScaling_Set;
.39ad00	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ad02	29 ef		and #$ef	              AND #$EF
.39ad04	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39ad06	80 06		bra $39ad0e	              BRA OPL2_Set_EnvelopeScaling_Exit
.39ad08					OPL2_Set_EnvelopeScaling_Set
.39ad08	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ad0a	09 10		ora #$10	              ORA #$10
.39ad0c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39ad0e					OPL2_Set_EnvelopeScaling_Exit
.39ad0e	6b		rtl		                RTL
.39ad0f					OPL2_GET_ENVELOPESCALING
.39ad0f	48		pha		                PHA             ; begin setdp macro
.39ad10	08		php		                PHP
.39ad11	c2 20		rep #$20	                REP #$20        ; set A long
.39ad13	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ad16	5b		tcd		                TCD
.39ad17	28		plp		                PLP
.39ad18	68		pla		                PLA             ; end setdp macro
.39ad19	c2 20		rep #$20	                REP #$20        ; set A long
.39ad1b	a9 20 00	lda #$0020	              LDA #$0020;
.39ad1e	85 28		sta $28		              STA OPL2_REG_REGION
.39ad20	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39ad23	e2 20		sep #$20	                SEP #$20        ; set A short
.39ad25	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ad27	29 10		and #$10	              AND #$10
.39ad29	6b		rtl		                RTL
.39ad2a					OPL2_GET_MODFREQMULTIPLE
.39ad2a	48		pha		                PHA             ; begin setdp macro
.39ad2b	08		php		                PHP
.39ad2c	c2 20		rep #$20	                REP #$20        ; set A long
.39ad2e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ad31	5b		tcd		                TCD
.39ad32	28		plp		                PLP
.39ad33	68		pla		                PLA             ; end setdp macro
.39ad34	c2 20		rep #$20	                REP #$20        ; set A long
.39ad36	a9 20 00	lda #$0020	              LDA #$0020;
.39ad39	85 28		sta $28		              STA OPL2_REG_REGION
.39ad3b	20 21 b1	jsr $39b121	              JSR OPL2_GET_REG_OFFSET
.39ad3e	e2 20		sep #$20	                SEP #$20        ; set A short
.39ad40	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39ad42	29 0f		and #$0f	              AND #$0F
.39ad44	6b		rtl		              RTL
.39ad45					OPL2_SET_MODFREQMULTIPLE
.39ad45	48		pha		                PHA             ; begin setdp macro
.39ad46	08		php		                PHP
.39ad47	c2 20		rep #$20	                REP #$20        ; set A long
.39ad49	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ad4c	5b		tcd		                TCD
.39ad4d	28		plp		                PLP
.39ad4e	68		pla		                PLA             ; end setdp macro
.39ad4f	c2 20		rep #$20	                REP #$20        ; set A long
.39ad51	a9 20 00	lda #$0020	                LDA #$0020;
.39ad54	85 28		sta $28		                STA OPL2_REG_REGION
.39ad56	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ad59	e2 20		sep #$20	                SEP #$20        ; set A short
.39ad5b	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39ad5d	29 0f		and #$0f	                AND #$0F
.39ad5f	85 32		sta $32		                STA OPL2_PARAMETER0
.39ad61	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ad63	29 f0		and #$f0	                AND #$F0
.39ad65	05 32		ora $32		                ORA OPL2_PARAMETER0
.39ad67	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ad69	6b		rtl		                RTL
.39ad6a					OPL2_SET_SCALINGLEVEL
.39ad6a	48		pha		                PHA             ; begin setdp macro
.39ad6b	08		php		                PHP
.39ad6c	c2 20		rep #$20	                REP #$20        ; set A long
.39ad6e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ad71	5b		tcd		                TCD
.39ad72	28		plp		                PLP
.39ad73	68		pla		                PLA             ; end setdp macro
.39ad74	c2 20		rep #$20	                REP #$20        ; set A long
.39ad76	a9 40 00	lda #$0040	                LDA #$0040;
.39ad79	85 28		sta $28		                STA OPL2_REG_REGION
.39ad7b	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ad7e	e2 20		sep #$20	                SEP #$20        ; set A short
.39ad80	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39ad82	29 03		and #$03	                AND #$03
.39ad84	0a		asl a		                ASL
.39ad85	0a		asl a		                ASL
.39ad86	0a		asl a		                ASL
.39ad87	0a		asl a		                ASL
.39ad88	0a		asl a		                ASL
.39ad89	0a		asl a		                ASL
.39ad8a	85 32		sta $32		                STA OPL2_PARAMETER0
.39ad8c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ad8e	29 3f		and #$3f	                AND #$3F
.39ad90	05 32		ora $32		                ORA OPL2_PARAMETER0
.39ad92	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ad94	6b		rtl		                RTL
.39ad95					OPL2_SET_VOLUME
.39ad95	48		pha		                PHA             ; begin setdp macro
.39ad96	08		php		                PHP
.39ad97	c2 20		rep #$20	                REP #$20        ; set A long
.39ad99	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ad9c	5b		tcd		                TCD
.39ad9d	28		plp		                PLP
.39ad9e	68		pla		                PLA             ; end setdp macro
.39ad9f	c2 20		rep #$20	                REP #$20        ; set A long
.39ada1	a9 40 00	lda #$0040	                LDA #$0040  ;
.39ada4	85 28		sta $28		                STA OPL2_REG_REGION
.39ada6	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ada9	e2 20		sep #$20	                SEP #$20        ; set A short
.39adab	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.39adad	29 3f		and #$3f	                AND #$3F
.39adaf	85 32		sta $32		                STA OPL2_PARAMETER0
.39adb1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39adb3	29 c0		and #$c0	                AND #$C0
.39adb5	05 32		ora $32		                ORA OPL2_PARAMETER0
.39adb7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39adb9	6b		rtl		                RTL
.39adba					OPL2_GET_VOLUME
.39adba	48		pha		                PHA             ; begin setdp macro
.39adbb	08		php		                PHP
.39adbc	c2 20		rep #$20	                REP #$20        ; set A long
.39adbe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39adc1	5b		tcd		                TCD
.39adc2	28		plp		                PLP
.39adc3	68		pla		                PLA             ; end setdp macro
.39adc4	c2 20		rep #$20	                REP #$20        ; set A long
.39adc6	a9 40 00	lda #$0040	                LDA #$0040  ;
.39adc9	85 28		sta $28		                STA OPL2_REG_REGION
.39adcb	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39adce	e2 20		sep #$20	                SEP #$20        ; set A short
.39add0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39add2	29 3f		and #$3f	                AND #$3F
.39add4	6b		rtl		                RTL
.39add5					OPL2_SET_ATTACK
.39add5	48		pha		                PHA             ; begin setdp macro
.39add6	08		php		                PHP
.39add7	c2 20		rep #$20	                REP #$20        ; set A long
.39add9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39addc	5b		tcd		                TCD
.39addd	28		plp		                PLP
.39adde	68		pla		                PLA             ; end setdp macro
.39addf	c2 20		rep #$20	                REP #$20        ; set A long
.39ade1	a9 60 00	lda #$0060	                LDA #$0060  ;
.39ade4	85 28		sta $28		                STA OPL2_REG_REGION
.39ade6	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ade9	e2 20		sep #$20	                SEP #$20        ; set A short
.39adeb	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39aded	29 0f		and #$0f	                AND #$0F
.39adef	0a		asl a		                ASL
.39adf0	0a		asl a		                ASL
.39adf1	0a		asl a		                ASL
.39adf2	0a		asl a		                ASL
.39adf3	85 32		sta $32		                STA OPL2_PARAMETER0
.39adf5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39adf7	29 0f		and #$0f	                AND #$0F
.39adf9	05 32		ora $32		                ORA OPL2_PARAMETER0
.39adfb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39adfd	6b		rtl		                RTL
.39adfe					OPL2_GET_ATTACK
.39adfe	48		pha		                PHA             ; begin setdp macro
.39adff	08		php		                PHP
.39ae00	c2 20		rep #$20	                REP #$20        ; set A long
.39ae02	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ae05	5b		tcd		                TCD
.39ae06	28		plp		                PLP
.39ae07	68		pla		                PLA             ; end setdp macro
.39ae08	c2 20		rep #$20	                REP #$20        ; set A long
.39ae0a	a9 60 00	lda #$0060	                LDA #$0060
.39ae0d	85 28		sta $28		                STA OPL2_REG_REGION
.39ae0f	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ae12	e2 20		sep #$20	                SEP #$20        ; set A short
.39ae14	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ae16	29 f0		and #$f0	                AND #$F0
.39ae18	4a		lsr a		                LSR
.39ae19	4a		lsr a		                LSR
.39ae1a	4a		lsr a		                LSR
.39ae1b	4a		lsr a		                LSR
.39ae1c	6b		rtl		                RTL
.39ae1d					OPL2_SET_DECAY
.39ae1d	48		pha		                PHA             ; begin setdp macro
.39ae1e	08		php		                PHP
.39ae1f	c2 20		rep #$20	                REP #$20        ; set A long
.39ae21	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ae24	5b		tcd		                TCD
.39ae25	28		plp		                PLP
.39ae26	68		pla		                PLA             ; end setdp macro
.39ae27	c2 20		rep #$20	                REP #$20        ; set A long
.39ae29	a9 60 00	lda #$0060	                LDA #$0060;
.39ae2c	85 28		sta $28		                STA OPL2_REG_REGION
.39ae2e	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ae31	e2 20		sep #$20	                SEP #$20        ; set A short
.39ae33	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39ae35	29 0f		and #$0f	                AND #$0F
.39ae37	85 32		sta $32		                STA OPL2_PARAMETER0
.39ae39	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ae3b	29 f0		and #$f0	                AND #$F0
.39ae3d	05 32		ora $32		                ORA OPL2_PARAMETER0
.39ae3f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ae41	6b		rtl		                RTL
.39ae42					OPL2_GET_DECAY
.39ae42	48		pha		                PHA             ; begin setdp macro
.39ae43	08		php		                PHP
.39ae44	c2 20		rep #$20	                REP #$20        ; set A long
.39ae46	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ae49	5b		tcd		                TCD
.39ae4a	28		plp		                PLP
.39ae4b	68		pla		                PLA             ; end setdp macro
.39ae4c	c2 20		rep #$20	                REP #$20        ; set A long
.39ae4e	a9 60 00	lda #$0060	                LDA #$0060
.39ae51	85 28		sta $28		                STA OPL2_REG_REGION
.39ae53	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ae56	e2 20		sep #$20	                SEP #$20        ; set A short
.39ae58	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ae5a	29 0f		and #$0f	                AND #$0F
.39ae5c	6b		rtl		                RTL
.39ae5d					OPL2_SET_SUSTAIN
.39ae5d	48		pha		                PHA             ; begin setdp macro
.39ae5e	08		php		                PHP
.39ae5f	c2 20		rep #$20	                REP #$20        ; set A long
.39ae61	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ae64	5b		tcd		                TCD
.39ae65	28		plp		                PLP
.39ae66	68		pla		                PLA             ; end setdp macro
.39ae67	c2 20		rep #$20	                REP #$20        ; set A long
.39ae69	a9 80 00	lda #$0080	                LDA #$0080;
.39ae6c	85 28		sta $28		                STA OPL2_REG_REGION
.39ae6e	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ae71	e2 20		sep #$20	                SEP #$20        ; set A short
.39ae73	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39ae75	29 0f		and #$0f	                AND #$0F
.39ae77	0a		asl a		                ASL
.39ae78	0a		asl a		                ASL
.39ae79	0a		asl a		                ASL
.39ae7a	0a		asl a		                ASL
.39ae7b	85 32		sta $32		                STA OPL2_PARAMETER0
.39ae7d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ae7f	29 0f		and #$0f	                AND #$0F
.39ae81	05 32		ora $32		                ORA OPL2_PARAMETER0
.39ae83	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39ae85	6b		rtl		                RTL
.39ae86					OPL2_GET_SUSTAIN
.39ae86	48		pha		                PHA             ; begin setdp macro
.39ae87	08		php		                PHP
.39ae88	c2 20		rep #$20	                REP #$20        ; set A long
.39ae8a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39ae8d	5b		tcd		                TCD
.39ae8e	28		plp		                PLP
.39ae8f	68		pla		                PLA             ; end setdp macro
.39ae90	c2 20		rep #$20	                REP #$20        ; set A long
.39ae92	a9 80 00	lda #$0080	                LDA #$0080
.39ae95	85 28		sta $28		                STA OPL2_REG_REGION
.39ae97	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39ae9a	e2 20		sep #$20	                SEP #$20        ; set A short
.39ae9c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39ae9e	29 f0		and #$f0	                AND #$F0
.39aea0	4a		lsr a		                LSR
.39aea1	4a		lsr a		                LSR
.39aea2	4a		lsr a		                LSR
.39aea3	4a		lsr a		                LSR
.39aea4	6b		rtl		                RTL
.39aea5					OPL2_SET_RELEASE
.39aea5	48		pha		                PHA             ; begin setdp macro
.39aea6	08		php		                PHP
.39aea7	c2 20		rep #$20	                REP #$20        ; set A long
.39aea9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39aeac	5b		tcd		                TCD
.39aead	28		plp		                PLP
.39aeae	68		pla		                PLA             ; end setdp macro
.39aeaf	c2 20		rep #$20	                REP #$20        ; set A long
.39aeb1	a9 80 00	lda #$0080	                LDA #$0080;
.39aeb4	85 28		sta $28		                STA OPL2_REG_REGION
.39aeb6	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39aeb9	e2 20		sep #$20	                SEP #$20        ; set A short
.39aebb	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39aebd	29 0f		and #$0f	                AND #$0F
.39aebf	85 32		sta $32		                STA OPL2_PARAMETER0
.39aec1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39aec3	29 f0		and #$f0	                AND #$F0
.39aec5	05 32		ora $32		                ORA OPL2_PARAMETER0
.39aec7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39aec9	6b		rtl		                RTL
.39aeca					OPL2_GET_RELEASE
.39aeca	48		pha		                PHA             ; begin setdp macro
.39aecb	08		php		                PHP
.39aecc	c2 20		rep #$20	                REP #$20        ; set A long
.39aece	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39aed1	5b		tcd		                TCD
.39aed2	28		plp		                PLP
.39aed3	68		pla		                PLA             ; end setdp macro
.39aed4	c2 20		rep #$20	                REP #$20        ; set A long
.39aed6	a9 80 00	lda #$0080	                LDA #$0080
.39aed9	85 28		sta $28		                STA OPL2_REG_REGION
.39aedb	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39aede	e2 20		sep #$20	                SEP #$20        ; set A short
.39aee0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39aee2	29 0f		and #$0f	                AND #$0F
.39aee4	6b		rtl		                RTL
.39aee5					OPL2_SET_FNUMBER
.39aee5	48		pha		                PHA             ; begin setdp macro
.39aee6	08		php		                PHP
.39aee7	c2 20		rep #$20	                REP #$20        ; set A long
.39aee9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39aeec	5b		tcd		                TCD
.39aeed	28		plp		                PLP
.39aeee	68		pla		                PLA             ; end setdp macro
.39aeef	e2 20		sep #$20	                SEP #$20        ; set A short
.39aef1	18		clc		                CLC
.39aef2	a5 27		lda $27		                LDA OPL2_CHANNEL
.39aef4	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39aef6	69 a0		adc #$a0	                ADC #$A0
.39aef8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39aefa	a9 00		lda #$00	                LDA #$00
.39aefc	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39aefe	c2 30		rep #$30	                REP #$30        ; set A&X long
.39af00	18		clc		                CLC
.39af01	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.39af04	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39af06	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39af08	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39af0b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39af0d	e2 20		sep #$20	                SEP #$20        ; set A short
.39af0f	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.39af11	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.39af13	18		clc		                CLC
.39af14	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.39af16	69 10		adc #$10	                ADC #$10
.39af18	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39af1a	a5 33		lda $33		                LDA OPL2_PARAMETER1
.39af1c	29 03		and #$03	                AND #$03
.39af1e	85 33		sta $33		                STA OPL2_PARAMETER1
.39af20	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39af22	29 fc		and #$fc	                AND #$FC
.39af24	05 33		ora $33		                ORA OPL2_PARAMETER1
.39af26	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39af28	6b		rtl		                RTL
.39af29					OPL2_GET_FNUMBER
.39af29	48		pha		                PHA             ; begin setdp macro
.39af2a	08		php		                PHP
.39af2b	c2 20		rep #$20	                REP #$20        ; set A long
.39af2d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39af30	5b		tcd		                TCD
.39af31	28		plp		                PLP
.39af32	68		pla		                PLA             ; end setdp macro
.39af33	e2 20		sep #$20	                SEP #$20        ; set A short
.39af35	18		clc		                CLC
.39af36	a5 27		lda $27		                LDA OPL2_CHANNEL
.39af38	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39af3a	69 a0		adc #$a0	                ADC #$A0
.39af3c	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39af3e	a9 00		lda #$00	                LDA #$00
.39af40	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39af42	c2 30		rep #$30	                REP #$30        ; set A&X long
.39af44	18		clc		                CLC
.39af45	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.39af48	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39af4a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39af4c	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39af4f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39af51	e2 20		sep #$20	                SEP #$20        ; set A short
.39af53	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39af55	85 32		sta $32		                STA OPL2_PARAMETER0
.39af57	18		clc		                CLC
.39af58	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.39af5a	69 10		adc #$10	                ADC #$10
.39af5c	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39af5e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39af60	29 03		and #$03	                AND #$03
.39af62	85 33		sta $33		                STA OPL2_PARAMETER1
.39af64	6b		rtl		                RTL
.39af65					OPL2_Set_Frequency
.39af65	6b		rtl		                RTL
.39af66					OPL2_Get_Frequency
.39af66	6b		rtl		                RTL
.39af67					OPL2_SET_BLOCK
.39af67	48		pha		                PHA             ; begin setdp macro
.39af68	08		php		                PHP
.39af69	c2 20		rep #$20	                REP #$20        ; set A long
.39af6b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39af6e	5b		tcd		                TCD
.39af6f	28		plp		                PLP
.39af70	68		pla		                PLA             ; end setdp macro
.39af71	e2 20		sep #$20	                SEP #$20        ; set A short
.39af73	18		clc		                CLC
.39af74	a5 27		lda $27		                LDA OPL2_CHANNEL
.39af76	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39af78	69 b0		adc #$b0	                ADC #$B0
.39af7a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39af7c	a9 00		lda #$00	                LDA #$00
.39af7e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39af80	c2 30		rep #$30	                REP #$30        ; set A&X long
.39af82	18		clc		                CLC
.39af83	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.39af86	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39af88	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39af8a	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39af8d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39af8f	e2 20		sep #$20	                SEP #$20        ; set A short
.39af91	a5 31		lda $31		                LDA OPL2_OCTAVE
.39af93	29 07		and #$07	                AND #$07
.39af95	0a		asl a		                ASL
.39af96	0a		asl a		                ASL
.39af97	85 31		sta $31		                STA OPL2_OCTAVE
.39af99	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39af9b	29 e3		and #$e3	                AND #$E3
.39af9d	05 31		ora $31		                ORA OPL2_OCTAVE
.39af9f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39afa1	60		rts		                RTS
.39afa2					OPL2_SET_KEYON
.39afa2	48		pha		                PHA             ; begin setdp macro
.39afa3	08		php		                PHP
.39afa4	c2 20		rep #$20	                REP #$20        ; set A long
.39afa6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39afa9	5b		tcd		                TCD
.39afaa	28		plp		                PLP
.39afab	68		pla		                PLA             ; end setdp macro
.39afac	e2 20		sep #$20	                SEP #$20        ; set A short
.39afae	18		clc		                CLC
.39afaf	a5 27		lda $27		                LDA OPL2_CHANNEL
.39afb1	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39afb3	69 b0		adc #$b0	                ADC #$B0
.39afb5	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39afb7	a9 00		lda #$00	                LDA #$00
.39afb9	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39afbb	c2 30		rep #$30	                REP #$30        ; set A&X long
.39afbd	18		clc		                CLC
.39afbe	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.39afc1	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39afc3	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39afc5	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39afc8	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39afca	e2 20		sep #$20	                SEP #$20        ; set A short
.39afcc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39afce	29 01		and #$01	                AND #$01
.39afd0	f0 02		beq $39afd4	                BEQ SET_KEYON_OFF
.39afd2	a9 20		lda #$20	                LDA #$20
.39afd4					    SET_KEYON_OFF
.39afd4	85 32		sta $32		                STA OPL2_PARAMETER0
.39afd6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39afd8	29 df		and #$df	                AND #$DF
.39afda	05 32		ora $32		                ORA OPL2_PARAMETER0
.39afdc	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39afde	60		rts		                RTS
.39afdf					OPL2_SET_FEEDBACK
.39afdf	48		pha		                PHA             ; begin setdp macro
.39afe0	08		php		                PHP
.39afe1	c2 20		rep #$20	                REP #$20        ; set A long
.39afe3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39afe6	5b		tcd		                TCD
.39afe7	28		plp		                PLP
.39afe8	68		pla		                PLA             ; end setdp macro
.39afe9	e2 20		sep #$20	                SEP #$20        ; set A short
.39afeb	18		clc		              CLC
.39afec	a5 27		lda $27		              LDA OPL2_CHANNEL
.39afee	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39aff0	69 c0		adc #$c0	              ADC #$C0
.39aff2	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39aff4	a9 00		lda #$00	              LDA #$00
.39aff6	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39aff8	c2 30		rep #$30	                REP #$30        ; set A&X long
.39affa	18		clc		              CLC
.39affb	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39affe	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39b000	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39b002	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39b005	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39b007	e2 20		sep #$20	                SEP #$20        ; set A short
.39b009	a5 32		lda $32		              LDA OPL2_PARAMETER0
.39b00b	29 07		and #$07	              AND #$07
.39b00d	0a		asl a		              ASL
.39b00e	85 32		sta $32		              STA OPL2_PARAMETER0
.39b010	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b012	29 01		and #$01	              AND #$01
.39b014	05 32		ora $32		              ORA OPL2_PARAMETER0
.39b016	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b018	6b		rtl		                RTL
.39b019					OPL2_SET_SYNTHMODE
.39b019	48		pha		                PHA             ; begin setdp macro
.39b01a	08		php		                PHP
.39b01b	c2 20		rep #$20	                REP #$20        ; set A long
.39b01d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b020	5b		tcd		                TCD
.39b021	28		plp		                PLP
.39b022	68		pla		                PLA             ; end setdp macro
.39b023	08		php		              PHP ; Push the Carry
.39b024	e2 20		sep #$20	                SEP #$20        ; set A short
.39b026	18		clc		              CLC
.39b027	a5 27		lda $27		              LDA OPL2_CHANNEL
.39b029	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39b02b	69 c0		adc #$c0	              ADC #$C0
.39b02d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39b02f	a9 00		lda #$00	              LDA #$00
.39b031	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39b033	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b035	18		clc		              CLC
.39b036	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39b039	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39b03b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39b03d	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39b040	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39b042	28		plp		              PLP ; Pull the Carry out
.39b043	e2 20		sep #$20	                SEP #$20        ; set A short
.39b045	b0 08		bcs $39b04f	              BCS OPL2_Set_Synthmode_Set;
.39b047	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b049	29 fe		and #$fe	              AND #$FE
.39b04b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b04d	80 06		bra $39b055	              BRA OPL2_Set_Synthmode_Exit
.39b04f					OPL2_Set_Synthmode_Set
.39b04f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b051	09 01		ora #$01	              ORA #$01
.39b053	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b055					OPL2_Set_Synthmode_Exit
.39b055	6b		rtl		                RTL
.39b056					OPL2_SET_DEEPTREMOLO
.39b056	48		pha		                PHA             ; begin setdp macro
.39b057	08		php		                PHP
.39b058	c2 20		rep #$20	                REP #$20        ; set A long
.39b05a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b05d	5b		tcd		                TCD
.39b05e	28		plp		                PLP
.39b05f	68		pla		                PLA             ; end setdp macro
.39b060	c2 20		rep #$20	                REP #$20        ; set A long
.39b062	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.39b065	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39b067	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39b06a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39b06c	e2 20		sep #$20	                SEP #$20        ; set A short
.39b06e	b0 08		bcs $39b078	              BCS OPL2_Set_DeepTremolo_Set;
.39b070	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b072	29 7f		and #$7f	              AND #$7F
.39b074	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b076	80 06		bra $39b07e	              BRA OPL2_Set_DeepTremolo_Exit
.39b078					OPL2_Set_DeepTremolo_Set
.39b078	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b07a	09 80		ora #$80	              ORA #$80
.39b07c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b07e					OPL2_Set_DeepTremolo_Exit
.39b07e	6b		rtl		                RTL
.39b07f					OPL2_SET_DEEPVIBRATO
.39b07f	48		pha		                PHA             ; begin setdp macro
.39b080	08		php		                PHP
.39b081	c2 20		rep #$20	                REP #$20        ; set A long
.39b083	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b086	5b		tcd		                TCD
.39b087	28		plp		                PLP
.39b088	68		pla		                PLA             ; end setdp macro
.39b089	c2 20		rep #$20	                REP #$20        ; set A long
.39b08b	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.39b08e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39b090	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.39b093	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39b095	e2 20		sep #$20	                SEP #$20        ; set A short
.39b097	b0 08		bcs $39b0a1	              BCS OPL2_Set_DeepVibrato_Set;
.39b099	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b09b	29 bf		and #$bf	              AND #$BF
.39b09d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b09f	80 06		bra $39b0a7	              BRA OPL2_Set_DeepVibrato_Exit
.39b0a1					OPL2_Set_DeepVibrato_Set
.39b0a1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39b0a3	09 40		ora #$40	              ORA #$40
.39b0a5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39b0a7					OPL2_Set_DeepVibrato_Exit
.39b0a7	6b		rtl		                RTL
.39b0a8					OPL2_SET_PERCUSSION
.39b0a8	48		pha		                PHA             ; begin setdp macro
.39b0a9	08		php		                PHP
.39b0aa	c2 20		rep #$20	                REP #$20        ; set A long
.39b0ac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b0af	5b		tcd		                TCD
.39b0b0	28		plp		                PLP
.39b0b1	68		pla		                PLA             ; end setdp macro
.39b0b2	c2 20		rep #$20	                REP #$20        ; set A long
.39b0b4	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.39b0b7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39b0b9	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39b0bc	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39b0be	e2 20		sep #$20	                SEP #$20        ; set A short
.39b0c0	b0 08		bcs $39b0ca	                BCS OPL2_Set_Percussion_Set;
.39b0c2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39b0c4	29 df		and #$df	                AND #$DF
.39b0c6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39b0c8	80 06		bra $39b0d0	                BRA OPL2_Set_Percussion_Exit
.39b0ca					OPL2_Set_Percussion_Set
.39b0ca	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39b0cc	09 20		ora #$20	                ORA #$20
.39b0ce	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39b0d0					OPL2_Set_Percussion_Exit
.39b0d0	6b		rtl		                RTL
.39b0d1					OPL2_SET_DRUMS
.39b0d1	48		pha		                PHA             ; begin setdp macro
.39b0d2	08		php		                PHP
.39b0d3	c2 20		rep #$20	                REP #$20        ; set A long
.39b0d5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b0d8	5b		tcd		                TCD
.39b0d9	28		plp		                PLP
.39b0da	68		pla		                PLA             ; end setdp macro
.39b0db	c2 20		rep #$20	                REP #$20        ; set A long
.39b0dd	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.39b0e0	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39b0e2	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39b0e5	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39b0e7	e2 20		sep #$20	                SEP #$20        ; set A short
.39b0e9	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39b0eb	29 1f		and #$1f	                AND #$1F
.39b0ed	85 32		sta $32		                STA OPL2_PARAMETER0
.39b0ef	49 ff		eor #$ff	                EOR #$FF
.39b0f1	85 33		sta $33		                STA OPL2_PARAMETER1
.39b0f3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39b0f5	25 33		and $33		                AND OPL2_PARAMETER1
.39b0f7	05 32		ora $32		                ORA OPL2_PARAMETER0
.39b0f9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39b0fb	6b		rtl		                RTL
.39b0fc					OPL2_SET_WAVEFORM
.39b0fc	48		pha		                PHA             ; begin setdp macro
.39b0fd	08		php		                PHP
.39b0fe	c2 20		rep #$20	                REP #$20        ; set A long
.39b100	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39b103	5b		tcd		                TCD
.39b104	28		plp		                PLP
.39b105	68		pla		                PLA             ; end setdp macro
.39b106	c2 20		rep #$20	                REP #$20        ; set A long
.39b108	a9 e0 00	lda #$00e0	                LDA #$00E0;
.39b10b	85 28		sta $28		                STA OPL2_REG_REGION
.39b10d	20 21 b1	jsr $39b121	                JSR OPL2_GET_REG_OFFSET
.39b110	e2 20		sep #$20	                SEP #$20        ; set A short
.39b112	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39b114	29 03		and #$03	                AND #$03
.39b116	85 32		sta $32		                STA OPL2_PARAMETER0
.39b118	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39b11a	29 fc		and #$fc	                AND #$FC
.39b11c	05 32		ora $32		                ORA OPL2_PARAMETER0
.39b11e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39b120	6b		rtl		                RTL
.39b121					OPL2_GET_REG_OFFSET
.39b121	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39b123	a5 27		lda $27		                LDA OPL2_CHANNEL
.39b125	29 0f		and #$0f	                AND #$0F
.39b127	aa		tax		                TAX
.39b128	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.39b12a	d0 06		bne $39b132	                BNE OPL2_Get_Register_Offset_l0
.39b12c	bf 6b 87 39	lda $39876b,x	                LDA @lregisterOffsets_operator0, X
.39b130	80 04		bra $39b136	                BRA OPL2_Get_Register_Offset_exit
.39b132					OPL2_Get_Register_Offset_l0
.39b132	bf 74 87 39	lda $398774,x	                LDA @lregisterOffsets_operator1, X
.39b136					OPL2_Get_Register_Offset_exit
.39b136	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39b138	a9 00		lda #$00	                LDA #$00
.39b13a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39b13c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b13e	18		clc		                CLC
.39b13f	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.39b142	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39b144	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.39b146	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39b148	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39b14b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39b14d	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.39b14e					IDE_INIT
.39b14e	e2 20		sep #$20	                SEP #$20        ; set A short
.39b150	20 71 b1	jsr $39b171	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.39b153	a9 00		lda #$00	              LDA #$00
.39b155	8f 3a e8 af	sta $afe83a	              STA IDE_CLDR_HI
.39b159	8f 38 e8 af	sta $afe838	              STA IDE_CLDR_LO
.39b15d	8f 34 e8 af	sta $afe834	              STA IDE_SECT_CNT
.39b161	a9 01		lda #$01	              LDA #$01
.39b163	8f 36 e8 af	sta $afe836	              STA IDE_SECT_SRT
.39b167	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.39b169	8f 3c e8 af	sta $afe83c	              STA IDE_HEAD
.39b16d	20 87 b1	jsr $39b187	              JSR IDE_DRV_READY_NOTBUSY
.39b170	6b		rtl		              RTL
.39b171					IDE_DRIVE_BSY
.39b171	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39b175	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.39b177	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.39b179	f0 f6		beq $39b171	              BEQ IDE_DRIVE_BSY
.39b17b	60		rts		              RTS
.39b17c					IDE_DRIVE_READY
.39b17c	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39b180	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.39b182	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.39b184	d0 f6		bne $39b17c	              BNE IDE_DRIVE_READY
.39b186	60		rts		              RTS
.39b187					IDE_DRV_READY_NOTBUSY
.39b187	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39b18b	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.39b18d	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.39b18f	d0 f6		bne $39b187	              BNE IDE_DRV_READY_NOTBUSY
.39b191	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39b195	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.39b197	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.39b199	f0 ec		beq $39b187	              BEQ IDE_DRV_READY_NOTBUSY
.39b19b	60		rts		              RTS
.39b19c					IDE_NOT_DRQ
.39b19c	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39b1a0	29 08		and #$08	              AND #$08
.39b1a2	c9 08		cmp #$08	              CMP #$08
.39b1a4	d0 f6		bne $39b19c	              BNE IDE_NOT_DRQ
.39b1a6	60		rts		              RTS
.39b1a7					IDE_GET_512BYTES
.39b1a7	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b1a9	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.39b1ad	a2 00 00	ldx #$0000	              LDX #$0000
.39b1b0					IDE_GET_INFO_KEEP_FETCHING
.39b1b0	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.39b1b4	9f 00 04 00	sta $000400,x	              STA SDOS_BLK_BEGIN, X
.39b1b8	e8		inx		              INX
.39b1b9	e8		inx		              INX
.39b1ba	e0 00 02	cpx #$0200	              CPX #$0200
.39b1bd	d0 f1		bne $39b1b0	              BNE IDE_GET_INFO_KEEP_FETCHING
.39b1bf	6b		rtl		              RTL
.39b1c0					IDE_GET_INFO
.39b1c0	e2 20		sep #$20	                SEP #$20        ; set A short
.39b1c2	20 71 b1	jsr $39b171	              JSR IDE_DRIVE_BSY
.39b1c5	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.39b1c7	8f 3e e8 af	sta $afe83e	              STA IDE_CMD_STAT
.39b1cb	20 87 b1	jsr $39b187	              JSR IDE_DRV_READY_NOTBUSY
.39b1ce	20 9c b1	jsr $39b19c	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.39b1d1	22 a7 b1 39	jsl $39b1a7	              JSL IDE_GET_512BYTES
.39b1d5	e2 20		sep #$20	                SEP #$20        ; set A short
.39b1d7	c2 10		rep #$10	                REP #$10        ; set X long
.39b1d9	a2 00 00	ldx #$0000	              LDX #$0000
.39b1dc					GET_INFO_LOOP
.39b1dc	bf 37 04 00	lda $000437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.39b1e0	22 75 06 39	jsl $390675	              JSL IPUTC
.39b1e4	bf 36 04 00	lda $000436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.39b1e8	22 75 06 39	jsl $390675	              JSL IPUTC
.39b1ec	e8		inx		              INX
.39b1ed	e8		inx		              INX
.39b1ee	e0 28 00	cpx #$0028	              CPX #40
.39b1f1	d0 e9		bne $39b1dc	              BNE GET_INFO_LOOP
.39b1f3	6b		rtl		              RTL
.39b1f4					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\YM26XX.asm


;******  Processing file: src\YM26XX_def.asm

=$aff000				OPM_BASE_ADDRESS		= $AFF000 ;  $AF:F000-AF:F0FF
=$aff100				PSG_BASE_ADDRESS		= $AFF100
=$fae600				OPL3_BASE_ADRESS		= $FAE600 ;  $AF:E600-AF:E7FF
=$aff200				OPN2_BASE_ADDRESS		= $AFF200 ;  $AF:F200-AF:F3FF
=$100					OPN2_OFFSET_PART_II		= $100
=11530786				OPN2_22_LFO				= OPN2_BASE_ADDRESS + $22;	LFO enable 	|	LFO frequency
=11530788				OPN2_23_TIMER_A_H		= OPN2_BASE_ADDRESS + $24;	Timer A MSBs
=11530789				OPN2_24_TIMER_A_L		= OPN2_BASE_ADDRESS + $25;	Timer A LSBs
=11530790				OPN2_25_TIMER_B			= OPN2_BASE_ADDRESS + $26;	Timer B
=11530791				OPN2_27_CHANEL_3_MODE	= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530791				OPN2_27_TIMER_CONF		= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530792				OPN2_28_KEY_ON_OFF		= OPN2_BASE_ADDRESS + $28;	Operator Channel
=11530794				OPN2_2A_ADC				= OPN2_BASE_ADDRESS + $2A;	DAC
=11530795				OPN2_2B_ADC_EN			= OPN2_BASE_ADDRESS + $2B;	DAC en
=11530800				OPN2_30_ADSR__DT1_MUL__CH1_OP1		= OPN2_BASE_ADDRESS + $30;	DT1 	MUL
=11530801				OPN2_31_ADSR__DT1_MUL__CH2_OP1		= OPN2_BASE_ADDRESS + $31;	DT1 	MUL
=11530802				OPN2_32_ADSR__DT1_MUL__CH3_OP1		= OPN2_BASE_ADDRESS + $32;	DT1 	MUL
=11530804				OPN2_34_ADSR__DT1_MUL__CH1_OP2		= OPN2_BASE_ADDRESS + $34;	DT1 	MUL
=11530805				OPN2_35_ADSR__DT1_MUL__CH2_OP2		= OPN2_BASE_ADDRESS + $35;	DT1 	MUL
=11530806				OPN2_36_ADSR__DT1_MUL__CH3_OP2		= OPN2_BASE_ADDRESS + $36;	DT1 	MUL
=11530808				OPN2_38_ADSR__DT1_MUL__CH1_OP3		= OPN2_BASE_ADDRESS + $38;	DT1 	MUL
=11530809				OPN2_39_ADSR__DT1_MUL__CH2_OP3		= OPN2_BASE_ADDRESS + $39;	DT1 	MUL
=11530810				OPN2_3A_ADSR__DT1_MUL__CH3_OP3		= OPN2_BASE_ADDRESS + $3A;	DT1 	MUL
=11530812				OPN2_3C_ADSR__DT1_MUL__CH1_OP4		= OPN2_BASE_ADDRESS + $3C;	DT1 	MUL
=11530813				OPN2_3D_ADSR__DT1_MUL__CH2_OP4		= OPN2_BASE_ADDRESS + $3D;	DT1 	MUL
=11530814				OPN2_3E_ADSR__DT1_MUL__CH3_OP4		= OPN2_BASE_ADDRESS + $3E;	DT1 	MUL
=11531056				OPN2_30_ADSR__DT1_MUL__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $30;	DT1 	MUL
=11531057				OPN2_31_ADSR__DT1_MUL__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $31;	DT1 	MUL
=11531058				OPN2_32_ADSR__DT1_MUL__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $32;	DT1 	MUL
=11531060				OPN2_34_ADSR__DT1_MUL__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $34;	DT1 	MUL
=11531061				OPN2_35_ADSR__DT1_MUL__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $35;	DT1 	MUL
=11531062				OPN2_36_ADSR__DT1_MUL__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $36;	DT1 	MUL
=11531064				OPN2_38_ADSR__DT1_MUL__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $38;	DT1 	MUL
=11531065				OPN2_39_ADSR__DT1_MUL__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $39;	DT1 	MUL
=11531066				OPN2_3A_ADSR__DT1_MUL__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3A;	DT1 	MUL
=11531068				OPN2_3C_ADSR__DT1_MUL__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3C;	DT1 	MUL
=11531069				OPN2_3D_ADSR__DT1_MUL__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3D;	DT1 	MUL
=11531070				OPN2_3E_ADSR__DT1_MUL__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3E;	DT1 	MUL
=11530816				OPN2_40_ADSR__LT__CH1_OP1		= OPN2_BASE_ADDRESS + $40;	LT
=11530817				OPN2_41_ADSR__LT__CH2_OP1		= OPN2_BASE_ADDRESS + $41;	LT
=11530818				OPN2_42_ADSR__LT__CH3_OP1		= OPN2_BASE_ADDRESS + $42;	LT
=11530820				OPN2_44_ADSR__LT__CH1_OP2		= OPN2_BASE_ADDRESS + $44;	LT
=11530821				OPN2_45_ADSR__LT__CH2_OP2		= OPN2_BASE_ADDRESS + $45;	LT
=11530822				OPN2_46_ADSR__LT__CH3_OP2		= OPN2_BASE_ADDRESS + $46;	LT
=11530824				OPN2_48_ADSR__LT__CH1_OP3		= OPN2_BASE_ADDRESS + $48;	LT
=11530825				OPN2_49_ADSR__LT__CH2_OP3		= OPN2_BASE_ADDRESS + $49;	LT
=11530826				OPN2_4A_ADSR__LT__CH3_OP3		= OPN2_BASE_ADDRESS + $4A;	LT
=11530828				OPN2_4C_ADSR__LT__CH1_OP4		= OPN2_BASE_ADDRESS + $4C;	LT
=11530829				OPN2_4D_ADSR__LT__CH2_OP4		= OPN2_BASE_ADDRESS + $4D;	LT
=11530830				OPN2_4E_ADSR__LT__CH3_OP4		= OPN2_BASE_ADDRESS + $4E;	LT
=11531072				OPN2_40_ADSR__LT__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $40;	LT
=11531073				OPN2_41_ADSR__LT__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $41;	LT
=11531074				OPN2_42_ADSR__LT__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $42;	LT
=11531076				OPN2_44_ADSR__LT__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $44;	LT
=11531077				OPN2_45_ADSR__LT__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $45;	LT
=11531078				OPN2_46_ADSR__LT__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $46;	LT
=11531080				OPN2_48_ADSR__LT__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $48;	LT
=11531081				OPN2_49_ADSR__LT__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $49;	LT
=11531082				OPN2_4A_ADSR__LT__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4A;	LT
=11531084				OPN2_4C_ADSR__LT__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4C;	LT
=11531085				OPN2_4D_ADSR__LT__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4D;	LT
=11531086				OPN2_4E_ADSR__LT__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4E;	LT
=11530832				OPN2_50_ADSR__SR_AR__CH1_OP1		= OPN2_BASE_ADDRESS + $50;	SR AR
=11530833				OPN2_51_ADSR__SR_AR__CH2_OP1		= OPN2_BASE_ADDRESS + $51;	SR AR
=11530834				OPN2_52_ADSR__SR_AR__CH3_OP1		= OPN2_BASE_ADDRESS + $52;	SR AR
=11530836				OPN2_54_ADSR__SR_AR__CH1_OP2		= OPN2_BASE_ADDRESS + $54;	SR AR
=11530837				OPN2_55_ADSR__SR_AR__CH2_OP2		= OPN2_BASE_ADDRESS + $55;	SR AR
=11530838				OPN2_56_ADSR__SR_AR__CH3_OP2		= OPN2_BASE_ADDRESS + $56;	SR AR
=11530840				OPN2_58_ADSR__SR_AR__CH1_OP3		= OPN2_BASE_ADDRESS + $58;	SR AR
=11530841				OPN2_59_ADSR__SR_AR__CH2_OP3		= OPN2_BASE_ADDRESS + $59;	SR AR
=11530842				OPN2_5A_ADSR__SR_AR__CH3_OP3		= OPN2_BASE_ADDRESS + $5A;	SR AR
=11530844				OPN2_5C_ADSR__SR_AR__CH1_OP4		= OPN2_BASE_ADDRESS + $5C;	SR AR
=11530845				OPN2_5D_ADSR__SR_AR__CH2_OP4		= OPN2_BASE_ADDRESS + $5D;	SR AR
=11530846				OPN2_5E_ADSR__SR_AR__CH3_OP4		= OPN2_BASE_ADDRESS + $5E;	SR AR
=11531088				OPN2_50_ADSR__SR_AR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $50;	SR AR
=11531089				OPN2_51_ADSR__SR_AR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $51;	SR AR
=11531090				OPN2_52_ADSR__SR_AR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $52;	SR AR
=11531092				OPN2_54_ADSR__SR_AR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $54;	SR AR
=11531093				OPN2_55_ADSR__SR_AR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $55;	SR AR
=11531094				OPN2_56_ADSR__SR_AR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $56;	SR AR
=11531096				OPN2_58_ADSR__SR_AR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $58;	SR AR
=11531097				OPN2_59_ADSR__SR_AR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $59;	SR AR
=11531098				OPN2_5A_ADSR__SR_AR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5A;	SR AR
=11531100				OPN2_5C_ADSR__SR_AR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5C;	SR AR
=11531101				OPN2_5D_ADSR__SR_AR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5D;	SR AR
=11531102				OPN2_5E_ADSR__SR_AR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5E;	SR AR
=11530848				OPN2_60_ADSR__AM_D1R__CH1_OP1		= OPN2_BASE_ADDRESS + $60;	AM D1R
=11530849				OPN2_61_ADSR__AM_D1R__CH2_OP1		= OPN2_BASE_ADDRESS + $61;	AM D1R
=11530850				OPN2_62_ADSR__AM_D1R__CH3_OP1		= OPN2_BASE_ADDRESS + $62;	AM D1R
=11530852				OPN2_64_ADSR__AM_D1R__CH1_OP2		= OPN2_BASE_ADDRESS + $64;	AM D1R
=11530853				OPN2_65_ADSR__AM_D1R__CH2_OP2		= OPN2_BASE_ADDRESS + $65;	AM D1R
=11530854				OPN2_66_ADSR__AM_D1R__CH3_OP2		= OPN2_BASE_ADDRESS + $66;	AM D1R
=11530856				OPN2_68_ADSR__AM_D1R__CH1_OP3		= OPN2_BASE_ADDRESS + $68;	AM D1R
=11530857				OPN2_69_ADSR__AM_D1R__CH2_OP3		= OPN2_BASE_ADDRESS + $69;	AM D1R
=11530858				OPN2_6A_ADSR__AM_D1R__CH3_OP3		= OPN2_BASE_ADDRESS + $6A;	AM D1R
=11530860				OPN2_6C_ADSR__AM_D1R__CH1_OP4		= OPN2_BASE_ADDRESS + $6C;	AM D1R
=11530861				OPN2_6D_ADSR__AM_D1R__CH2_OP4		= OPN2_BASE_ADDRESS + $6D;	AM D1R
=11530862				OPN2_6E_ADSR__AM_D1R__CH3_OP4		= OPN2_BASE_ADDRESS + $6E;	AM D1R
=11531104				OPN2_60_ADSR__AM_D1R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $60;	AM D1R
=11531105				OPN2_61_ADSR__AM_D1R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $61;	AM D1R
=11531106				OPN2_62_ADSR__AM_D1R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $62;	AM D1R
=11531108				OPN2_64_ADSR__AM_D1R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $64;	AM D1R
=11531109				OPN2_65_ADSR__AM_D1R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $65;	AM D1R
=11531110				OPN2_66_ADSR__AM_D1R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $66;	AM D1R
=11531112				OPN2_68_ADSR__AM_D1R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $68;	AM D1R
=11531113				OPN2_69_ADSR__AM_D1R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $69;	AM D1R
=11531114				OPN2_6A_ADSR__AM_D1R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6A;	AM D1R
=11531116				OPN2_6C_ADSR__AM_D1R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6C;	AM D1R
=11531117				OPN2_6D_ADSR__AM_D1R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6D;	AM D1R
=11531118				OPN2_6E_ADSR__AM_D1R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6E;	AM D1R
=11530864				OPN2_70_ADSR__D2R__CH1_OP1		= OPN2_BASE_ADDRESS + $70;	D2R
=11530865				OPN2_71_ADSR__D2R__CH2_OP1		= OPN2_BASE_ADDRESS + $71;	D2R
=11530866				OPN2_72_ADSR__D2R__CH3_OP1		= OPN2_BASE_ADDRESS + $72;	D2R
=11530868				OPN2_74_ADSR__D2R__CH1_OP2		= OPN2_BASE_ADDRESS + $74;	D2R
=11530869				OPN2_75_ADSR__D2R__CH2_OP2		= OPN2_BASE_ADDRESS + $75;	D2R
=11530870				OPN2_76_ADSR__D2R__CH3_OP2		= OPN2_BASE_ADDRESS + $76;	D2R
=11530872				OPN2_78_ADSR__D2R__CH1_OP3		= OPN2_BASE_ADDRESS + $78;	D2R
=11530873				OPN2_79_ADSR__D2R__CH2_OP3		= OPN2_BASE_ADDRESS + $79;	D2R
=11530874				OPN2_7A_ADSR__D2R__CH3_OP3		= OPN2_BASE_ADDRESS + $7A;	D2R
=11530876				OPN2_7C_ADSR__D2R__CH1_OP4		= OPN2_BASE_ADDRESS + $7C;	D2R
=11530877				OPN2_7D_ADSR__D2R__CH2_OP4		= OPN2_BASE_ADDRESS + $7D;	D2R
=11530878				OPN2_7E_ADSR__D2R__CH3_OP4		= OPN2_BASE_ADDRESS + $7E;	D2R
=11531120				OPN2_70_ADSR__D2R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $70;	D2R
=11531121				OPN2_71_ADSR__D2R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $71;	D2R
=11531122				OPN2_72_ADSR__D2R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $72;	D2R
=11531124				OPN2_74_ADSR__D2R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $74;	D2R
=11531125				OPN2_75_ADSR__D2R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $75;	D2R
=11531126				OPN2_76_ADSR__D2R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $76;	D2R
=11531128				OPN2_78_ADSR__D2R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $78;	D2R
=11531129				OPN2_79_ADSR__D2R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $79;	D2R
=11531130				OPN2_7A_ADSR__D2R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7A;	D2R
=11531132				OPN2_7C_ADSR__D2R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7C;	D2R
=11531133				OPN2_7D_ADSR__D2R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7D;	D2R
=11531134				OPN2_7E_ADSR__D2R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7E;	D2R
=11530880				OPN2_80_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $80;	D1L RR
=11530881				OPN2_81_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $81;	D1L RR
=11530882				OPN2_82_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $82;	D1L RR
=11530884				OPN2_84_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $84;	D1L RR
=11530885				OPN2_85_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $85;	D1L RR
=11530886				OPN2_86_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $86;	D1L RR
=11530888				OPN2_88_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $88;	D1L RR
=11530889				OPN2_89_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $89;	D1L RR
=11530890				OPN2_8A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $8A;	D1L RR
=11530892				OPN2_8C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $8C;	D1L RR
=11530893				OPN2_8D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $8D;	D1L RR
=11530894				OPN2_8E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $8E;	D1L RR
=11531136				OPN2_80_ADSR__D1L_RR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $80;	D1L RR
=11531137				OPN2_81_ADSR__D1L_RR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $81;	D1L RR
=11531138				OPN2_82_ADSR__D1L_RR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $82;	D1L RR
=11531140				OPN2_84_ADSR__D1L_RR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $84;	D1L RR
=11531141				OPN2_85_ADSR__D1L_RR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $85;	D1L RR
=11531142				OPN2_86_ADSR__D1L_RR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $86;	D1L RR
=11531144				OPN2_88_ADSR__D1L_RR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $88;	D1L RR
=11531145				OPN2_89_ADSR__D1L_RR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $89;	D1L RR
=11531146				OPN2_8A_ADSR__D1L_RR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8A;	D1L RR
=11531148				OPN2_8C_ADSR__D1L_RR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8C;	D1L RR
=11531149				OPN2_8D_ADSR__D1L_RR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8D;	D1L RR
=11531150				OPN2_8E_ADSR__D1L_RR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8E;	D1L RR
=11530896				OPN2_90_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $90;	D1L RR
=11530897				OPN2_91_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $91;	D1L RR
=11530898				OPN2_92_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $92;	D1L RR
=11530900				OPN2_94_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $94;	D1L RR
=11530901				OPN2_95_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $95;	D1L RR
=11530902				OPN2_96_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $96;	D1L RR
=11530904				OPN2_98_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $98;	D1L RR
=11530905				OPN2_99_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $99;	D1L RR
=11530906				OPN2_9A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $9A;	D1L RR
=11530908				OPN2_9C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $9C;	D1L RR
=11530909				OPN2_9D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $9D;	D1L RR
=11530910				OPN2_9E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $9E;	D1L RR
=11531152				OPN2_90_ADSR__D1L_RR__CH4_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $90;	D1L RR
=11531153				OPN2_91_ADSR__D1L_RR__CH5_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $91;	D1L RR
=11531154				OPN2_92_ADSR__D1L_RR__CH6_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $92;	D1L RR
=11531156				OPN2_94_ADSR__D1L_RR__CH4_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $94;	D1L RR
=11531157				OPN2_95_ADSR__D1L_RR__CH5_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $95;	D1L RR
=11531158				OPN2_96_ADSR__D1L_RR__CH6_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $96;	D1L RR
=11531160				OPN2_98_ADSR__D1L_RR__CH4_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $98;	D1L RR
=11531161				OPN2_99_ADSR__D1L_RR__CH5_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $99;	D1L RR
=11531162				OPN2_9A_ADSR__D1L_RR__CH6_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9A;	D1L RR
=11531164				OPN2_9C_ADSR__D1L_RR__CH4_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9C;	D1L RR
=11531165				OPN2_9D_ADSR__D1L_RR__CH5_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9D;	D1L RR
=11531166				OPN2_9E_ADSR__D1L_RR__CH6_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9E;	D1L RR
=11530912				OPN2_A0_CH1_FRECANCY_L				= OPN2_BASE_ADDRESS + $A0;	Frequency number LSB
=11530913				OPN2_A1_CH2_FRECANCY_L				= OPN2_BASE_ADDRESS + $A1;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_L				= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_OP1_L			= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB Chanel 3 Operator 1 if special mode
=11530920				OPN2_A8_CH3_FRECANCY_OP2_L			= OPN2_BASE_ADDRESS + $A8;	Frequency number LSB Chanel 3 Operator 2 if special mode
=11530921				OPN2_A9_CH3_FRECANCY_OP3_L			= OPN2_BASE_ADDRESS + $A9;	Frequency number LSB Chanel 3 Operator 3 if special mode
=11530922				OPN2_AA_CH3_FRECANCY_OP4_L			= OPN2_BASE_ADDRESS + $AA;	Frequency number LSB Chanel 3 Operator 4 if special mode
=11531168				OPN2_A0_CH4_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A0;	Frequency number LSB
=11531169				OPN2_A1_CH5_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A1;	Frequency number LSB
=11531170				OPN2_A2_CH6_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A2;	Frequency number LSB
=11530916				OPN2_A4_CH1_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A4;	OCTAVE and Frequency number MSB
=11530917				OPN2_A5_CH2_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A5;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_OP1_H	= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB Chanel 3 Operator 1 if special mode
=11530924				OPN2_AC_CH3_OCTAVE_FRECANCY_OP2_H	= OPN2_BASE_ADDRESS + $AC;	OCTAVE and Frequency number MSB Chanel 3 Operator 2 if special mode
=11530925				OPN2_AD_CH3_OCTAVE_FRECANCY_OP3_H	= OPN2_BASE_ADDRESS + $AD;	OCTAVE and Frequency number MSB Chanel 3 Operator 3 if special mode
=11530926				OPN2_AE_CH3_OCTAVE_FRECANCY_OP4_H	= OPN2_BASE_ADDRESS + $AE;	OCTAVE and Frequency number MSB Chanel 3 Operator 4 if special mode
=11531172				OPN2_A4_CH4_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A4;	OCTAVE and Frequency number MSB
=11531173				OPN2_A5_CH5_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A5;	OCTAVE and Frequency number MSB
=11531174				OPN2_A6_CH6_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A6;	OCTAVE and Frequency number MSB
=11530928				OPN2_B0_CH1_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B0;
=11530929				OPN2_B1_CH2_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B1;
=11530930				OPN2_B2_CH3_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B2;
=11531184				OPN2_B0_CH4_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B0;
=11531185				OPN2_B1_CH5_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B1;
=11531186				OPN2_B2_CH6_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B2;
=11530932				OPN2_B4_CH1_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B4;
=11530933				OPN2_B5_CH2_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B5;
=11530934				OPN2_B6_CH3_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B6;
=11531188				OPN2_B4_CH4_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B4;
=11531189				OPN2_B5_CH5_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B5;
=11531190				OPN2_B6_CH6_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B6;
=11530241				OPM_01_TEST					= OPM_BASE_ADDRESS + $01;
=11530248				OPM_08_KEY_ON_OFF		= OPM_BASE_ADDRESS + $08;
=11530255				OPM_0F_NE_NFREQ			= OPM_BASE_ADDRESS + $0F;
=11530256				OPM_10_CLK_A1				= OPM_BASE_ADDRESS + $10;
=11530257				OPM_11_CLK_A2				= OPM_BASE_ADDRESS + $11;
=11530258				OPM_12_CLK_B				= OPM_BASE_ADDRESS + $12;
=11530260				OPM_14_CMS_FLAG_RESET_IRQEN_LOAD	= OPM_BASE_ADDRESS + $14;
=11530264				OPM_18_LFRQ					= OPM_BASE_ADDRESS + $18;
=11530265				OPM_19_PMD_AMD			= OPM_BASE_ADDRESS + $19;
=11530267				OPM_1B_CT_W					= OPM_BASE_ADDRESS + $1B;
=11530272				OPM_20_A_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $20;
=11530273				OPM_21_B_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $21;
=11530274				OPM_22_C_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $22;
=11530275				OPM_23_D_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $23;
=11530276				OPM_24_E_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $24;
=11530277				OPM_25_F_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $25;
=11530278				OPM_26_G_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $26;
=11530279				OPM_27_H_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $27;
=11530280				OPM_28_A_KC							= OPM_BASE_ADDRESS + $28;
=11530281				OPM_29_B_KC							= OPM_BASE_ADDRESS + $29;
=11530282				OPM_2A_C_KC							= OPM_BASE_ADDRESS + $2A;
=11530283				OPM_2B_D_KC							= OPM_BASE_ADDRESS + $2B;
=11530284				OPM_2C_E_KC							= OPM_BASE_ADDRESS + $2C;
=11530285				OPM_2D_F_KC							= OPM_BASE_ADDRESS + $2D;
=11530286				OPM_2E_G_KC							= OPM_BASE_ADDRESS + $2E;
=11530287				OPM_2F_H_KC							= OPM_BASE_ADDRESS + $2F;
=11530288				OPM_30_A_KF							= OPM_BASE_ADDRESS + $30;
=11530289				OPM_31_B_KF							= OPM_BASE_ADDRESS + $31;
=11530290				OPM_32_C_KF							= OPM_BASE_ADDRESS + $32;
=11530291				OPM_33_D_KF							= OPM_BASE_ADDRESS + $33;
=11530292				OPM_34_E_KF							= OPM_BASE_ADDRESS + $34;
=11530293				OPM_35_F_KF							= OPM_BASE_ADDRESS + $35;
=11530294				OPM_36_G_KF							= OPM_BASE_ADDRESS + $36;
=11530295				OPM_37_H_KF							= OPM_BASE_ADDRESS + $37;
=11530296				OPM_38_A_PMS_AMS				= OPM_BASE_ADDRESS + $38;
=11530297				OPM_39_B_PMS_AMS				= OPM_BASE_ADDRESS + $39;
=11530298				OPM_3A_C_PMS_AMS				= OPM_BASE_ADDRESS + $3A;
=11530299				OPM_3B_D_PMS_AMS				= OPM_BASE_ADDRESS + $3B;
=11530300				OPM_3C_E_PMS_AMS				= OPM_BASE_ADDRESS + $3C;
=11530301				OPM_3D_F_PMS_AMS				= OPM_BASE_ADDRESS + $3D;
=11530302				OPM_3E_G_PMS_AMS				= OPM_BASE_ADDRESS + $3E;
=11530303				OPM_3F_H_PMS_AMS				= OPM_BASE_ADDRESS + $3F;
=11530304				OPM_40_A_M1_DT1_MUL			= OPM_BASE_ADDRESS + $40;
=11530305				OPM_41_B_M1_DT1_MUL			= OPM_BASE_ADDRESS + $41;
=11530306				OPM_42_C_M1_DT1_MUL			= OPM_BASE_ADDRESS + $42;
=11530307				OPM_43_D_M1_DT1_MUL			= OPM_BASE_ADDRESS + $43;
=11530308				OPM_44_E_M1_DT1_MUL			= OPM_BASE_ADDRESS + $44;
=11530309				OPM_45_F_M1_DT1_MUL			= OPM_BASE_ADDRESS + $45;
=11530310				OPM_46_G_M1_DT1_MUL			= OPM_BASE_ADDRESS + $46;
=11530311				OPM_47_H_M1_DT1_MUL			= OPM_BASE_ADDRESS + $47;
=11530312				OPM_48_A_M2_DT1_MUL			= OPM_BASE_ADDRESS + $48;
=11530313				OPM_49_B_M2_DT1_MUL			= OPM_BASE_ADDRESS + $49;
=11530314				OPM_4A_C_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4A;
=11530315				OPM_4B_D_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4B;
=11530316				OPM_4C_E_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4C;
=11530317				OPM_4D_F_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4D;
=11530318				OPM_4E_G_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4E;
=11530319				OPM_4F_H_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4F;
=11530320				OPM_50_A_C1_DT1_MUL			= OPM_BASE_ADDRESS + $50;
=11530321				OPM_51_B_C1_DT1_MUL			= OPM_BASE_ADDRESS + $51;
=11530322				OPM_52_C_C1_DT1_MUL			= OPM_BASE_ADDRESS + $52;
=11530323				OPM_53_D_C1_DT1_MUL			= OPM_BASE_ADDRESS + $53;
=11530324				OPM_54_E_C1_DT1_MUL			= OPM_BASE_ADDRESS + $54;
=11530325				OPM_55_F_C1_DT1_MUL			= OPM_BASE_ADDRESS + $55;
=11530326				OPM_56_G_C1_DT1_MUL			= OPM_BASE_ADDRESS + $56;
=11530327				OPM_57_H_C1_DT1_MUL			= OPM_BASE_ADDRESS + $57;
=11530328				OPM_58_A_C2_DT1_MUL			= OPM_BASE_ADDRESS + $58;
=11530329				OPM_59_B_C2_DT1_MUL			= OPM_BASE_ADDRESS + $59;
=11530330				OPM_5A_C_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5A;
=11530331				OPM_5B_D_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5B;
=11530332				OPM_5C_E_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5C;
=11530333				OPM_5D_F_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5D;
=11530334				OPM_5E_G_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5E;
=11530335				OPM_5F_H_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5F;
=11530336				OPM_60_A_M1_TL				= OPM_BASE_ADDRESS + $60;
=11530337				OPM_61_B_M1_TL				= OPM_BASE_ADDRESS + $61;
=11530338				OPM_62_C_M1_TL				= OPM_BASE_ADDRESS + $62;
=11530339				OPM_63_D_M1_TL				= OPM_BASE_ADDRESS + $63;
=11530340				OPM_64_E_M1_TL				= OPM_BASE_ADDRESS + $64;
=11530341				OPM_65_F_M1_TL				= OPM_BASE_ADDRESS + $65;
=11530342				OPM_66_G_M1_TL				= OPM_BASE_ADDRESS + $66;
=11530343				OPM_67_H_M1_TL				= OPM_BASE_ADDRESS + $67;
=11530344				OPM_68_A_M2_TL				= OPM_BASE_ADDRESS + $68;
=11530345				OPM_69_B_M2_TL				= OPM_BASE_ADDRESS + $69;
=11530346				OPM_6A_C_M2_TL				= OPM_BASE_ADDRESS + $6A;
=11530347				OPM_6B_D_M2_TL				= OPM_BASE_ADDRESS + $6B;
=11530348				OPM_6C_E_M2_TL				= OPM_BASE_ADDRESS + $6C;
=11530349				OPM_6D_F_M2_TL				= OPM_BASE_ADDRESS + $6D;
=11530350				OPM_6E_G_M2_TL				= OPM_BASE_ADDRESS + $6E;
=11530351				OPM_6F_H_M2_TL				= OPM_BASE_ADDRESS + $6F;
=11530352				OPM_70_A_C1_TL				= OPM_BASE_ADDRESS + $70;
=11530353				OPM_71_B_C1_TL				= OPM_BASE_ADDRESS + $71;
=11530354				OPM_72_C_C1_TL				= OPM_BASE_ADDRESS + $72;
=11530355				OPM_73_D_C1_TL				= OPM_BASE_ADDRESS + $73;
=11530356				OPM_74_E_C1_TL				= OPM_BASE_ADDRESS + $74;
=11530357				OPM_75_F_C1_TL				= OPM_BASE_ADDRESS + $75;
=11530358				OPM_76_G_C1_TL				= OPM_BASE_ADDRESS + $76;
=11530359				OPM_77_H_C1_TL				= OPM_BASE_ADDRESS + $77;
=11530360				OPM_78_A_C2_TL				= OPM_BASE_ADDRESS + $78;
=11530361				OPM_79_B_C2_TL				= OPM_BASE_ADDRESS + $79;
=11530362				OPM_7A_C_C2_TL				= OPM_BASE_ADDRESS + $7A;
=11530363				OPM_7B_D_C2_TL				= OPM_BASE_ADDRESS + $7B;
=11530364				OPM_7C_E_C2_TL				= OPM_BASE_ADDRESS + $7C;
=11530365				OPM_7D_F_C2_TL				= OPM_BASE_ADDRESS + $7D;
=11530366				OPM_7E_G_C2_TL				= OPM_BASE_ADDRESS + $7E;
=11530367				OPM_7F_H_C2_TL				= OPM_BASE_ADDRESS + $7F;
=11530368				OPM_80_A_M1_KS_AR			= OPM_BASE_ADDRESS + $80;
=11530369				OPM_81_B_M1_KS_AR			= OPM_BASE_ADDRESS + $81;
=11530370				OPM_82_C_M1_KS_AR			= OPM_BASE_ADDRESS + $82;
=11530371				OPM_83_D_M1_KS_AR			= OPM_BASE_ADDRESS + $83;
=11530372				OPM_84_E_M1_KS_AR			= OPM_BASE_ADDRESS + $84;
=11530373				OPM_85_F_M1_KS_AR			= OPM_BASE_ADDRESS + $85;
=11530374				OPM_86_G_M1_KS_AR			= OPM_BASE_ADDRESS + $86;
=11530375				OPM_87_H_M1_KS_AR			= OPM_BASE_ADDRESS + $87;
=11530376				OPM_88_A_M2_KS_AR			= OPM_BASE_ADDRESS + $88;
=11530377				OPM_89_B_M2_KS_AR			= OPM_BASE_ADDRESS + $89;
=11530378				OPM_8A_C_M2_KS_AR			= OPM_BASE_ADDRESS + $8A;
=11530379				OPM_8B_D_M2_KS_AR			= OPM_BASE_ADDRESS + $8B;
=11530380				OPM_8C_E_M2_KS_AR			= OPM_BASE_ADDRESS + $8C;
=11530381				OPM_8D_F_M2_KS_AR			= OPM_BASE_ADDRESS + $8D;
=11530382				OPM_8E_G_M2_KS_AR			= OPM_BASE_ADDRESS + $8E;
=11530383				OPM_8F_H_M2_KS_AR			= OPM_BASE_ADDRESS + $8F;
=11530384				OPM_90_A_C1_KS_AR			= OPM_BASE_ADDRESS + $90;
=11530385				OPM_91_B_C1_KS_AR			= OPM_BASE_ADDRESS + $91;
=11530386				OPM_92_C_C1_KS_AR			= OPM_BASE_ADDRESS + $92;
=11530387				OPM_93_D_C1_KS_AR			= OPM_BASE_ADDRESS + $93;
=11530388				OPM_94_E_C1_KS_AR			= OPM_BASE_ADDRESS + $94;
=11530389				OPM_95_F_C1_KS_AR			= OPM_BASE_ADDRESS + $95;
=11530390				OPM_96_G_C1_KS_AR			= OPM_BASE_ADDRESS + $96;
=11530391				OPM_97_H_C1_KS_AR			= OPM_BASE_ADDRESS + $97;
=11530392				OPM_98_A_C2_KS_AR			= OPM_BASE_ADDRESS + $98;
=11530393				OPM_99_B_C2_KS_AR			= OPM_BASE_ADDRESS + $99;
=11530394				OPM_9A_C_C2_KS_AR			= OPM_BASE_ADDRESS + $9A;
=11530395				OPM_9B_D_C2_KS_AR			= OPM_BASE_ADDRESS + $9B;
=11530396				OPM_9C_E_C2_KS_AR			= OPM_BASE_ADDRESS + $9C;
=11530397				OPM_9D_F_C2_KS_AR			= OPM_BASE_ADDRESS + $9D;
=11530398				OPM_9E_G_C2_KS_AR			= OPM_BASE_ADDRESS + $9E;
=11530399				OPM_9F_H_C2_KS_AR			= OPM_BASE_ADDRESS + $9F;
=11530400				OPM_A0_A_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A0;
=11530401				OPM_A1_B_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A1;
=11530402				OPM_A2_C_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A2;
=11530403				OPM_A3_D_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A3;
=11530404				OPM_A4_E_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A4;
=11530405				OPM_A5_F_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A5;
=11530406				OPM_A6_G_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A6;
=11530407				OPM_A7_H_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A7;
=11530408				OPM_A8_A_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A8;
=11530409				OPM_A9_B_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A9;
=11530410				OPM_AA_C_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AA;
=11530411				OPM_AB_D_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AB;
=11530412				OPM_AC_E_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AC;
=11530413				OPM_AD_F_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AD;
=11530414				OPM_AE_G_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AE;
=11530415				OPM_AF_H_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AF;
=11530416				OPM_B0_A_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B0;
=11530417				OPM_B1_B_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B1;
=11530418				OPM_B2_C_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B2;
=11530419				OPM_B3_D_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B3;
=11530420				OPM_B4_E_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B4;
=11530421				OPM_B5_F_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B5;
=11530422				OPM_B6_G_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B6;
=11530423				OPM_B7_H_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B7;
=11530424				OPM_B8_A_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B8;
=11530425				OPM_B9_B_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B9;
=11530426				OPM_BA_C_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BA;
=11530427				OPM_BB_D_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BB;
=11530428				OPM_BC_E_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BC;
=11530429				OPM_BD_F_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BD;
=11530430				OPM_BE_G_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BE;
=11530431				OPM_BF_H_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BF;
=11530432				OPM_C0_A_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C0;
=11530433				OPM_C1_B_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C1;
=11530434				OPM_C2_C_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C2;
=11530435				OPM_C3_D_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C3;
=11530436				OPM_C4_E_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C4;
=11530437				OPM_C5_F_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C5;
=11530438				OPM_C6_G_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C6;
=11530439				OPM_C7_H_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C7;
=11530440				OPM_C8_A_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C8;
=11530441				OPM_C9_B_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C9;
=11530442				OPM_CA_C_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CA;
=11530443				OPM_CB_D_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CB;
=11530444				OPM_CC_E_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CC;
=11530445				OPM_CD_F_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CD;
=11530446				OPM_CE_G_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CE;
=11530447				OPM_CF_H_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CF;
=11530448				OPM_D0_A_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D0;
=11530449				OPM_D1_B_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D1;
=11530450				OPM_D2_C_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D2;
=11530451				OPM_D3_D_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D3;
=11530452				OPM_D4_E_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D4;
=11530453				OPM_D5_F_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D5;
=11530454				OPM_D6_G_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D6;
=11530455				OPM_D7_H_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D7;
=11530456				OPM_D8_A_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D8;
=11530457				OPM_D9_B_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D9;
=11530458				OPM_DA_C_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DA;
=11530459				OPM_DB_D_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DB;
=11530460				OPM_DC_E_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DC;
=11530461				OPM_DD_F_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DD;
=11530462				OPM_DE_G_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DE;
=11530463				OPM_DF_H_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DF;
=11530464				OPM_E0_A_M1_D1L_RR			= OPM_BASE_ADDRESS + $E0;
=11530465				OPM_E1_B_M1_D1L_RR			= OPM_BASE_ADDRESS + $E1;
=11530466				OPM_E2_C_M1_D1L_RR			= OPM_BASE_ADDRESS + $E2;
=11530467				OPM_E3_D_M1_D1L_RR			= OPM_BASE_ADDRESS + $E3;
=11530468				OPM_E4_E_M1_D1L_RR			= OPM_BASE_ADDRESS + $E4;
=11530469				OPM_E5_F_M1_D1L_RR			= OPM_BASE_ADDRESS + $E5;
=11530470				OPM_E6_G_M1_D1L_RR			= OPM_BASE_ADDRESS + $E6;
=11530471				OPM_E7_H_M1_D1L_RR			= OPM_BASE_ADDRESS + $E7;
=11530472				OPM_E8_A_M2_D1L_RR			= OPM_BASE_ADDRESS + $E8;
=11530473				OPM_E9_B_M2_D1L_RR			= OPM_BASE_ADDRESS + $E9;
=11530474				OPM_EA_C_M2_D1L_RR			= OPM_BASE_ADDRESS + $EA;
=11530475				OPM_EB_D_M2_D1L_RR			= OPM_BASE_ADDRESS + $EB;
=11530476				OPM_EC_E_M2_D1L_RR			= OPM_BASE_ADDRESS + $EC;
=11530477				OPM_ED_F_M2_D1L_RR			= OPM_BASE_ADDRESS + $ED;
=11530478				OPM_EE_G_M2_D1L_RR			= OPM_BASE_ADDRESS + $EE;
=11530479				OPM_EF_H_M2_D1L_RR			= OPM_BASE_ADDRESS + $EF;
=11530480				OPM_F0_A_C1_D1L_RR			= OPM_BASE_ADDRESS + $F0;
=11530481				OPM_F1_B_C1_D1L_RR			= OPM_BASE_ADDRESS + $F1;
=11530482				OPM_F2_C_C1_D1L_RR			= OPM_BASE_ADDRESS + $F2;
=11530483				OPM_F3_D_C1_D1L_RR			= OPM_BASE_ADDRESS + $F3;
=11530484				OPM_F4_E_C1_D1L_RR			= OPM_BASE_ADDRESS + $F4;
=11530485				OPM_F5_F_C1_D1L_RR			= OPM_BASE_ADDRESS + $F5;
=11530486				OPM_F6_G_C1_D1L_RR			= OPM_BASE_ADDRESS + $F6;
=11530487				OPM_F7_H_C1_D1L_RR			= OPM_BASE_ADDRESS + $F7;
=11530488				OPM_F8_A_C2_D1L_RR			= OPM_BASE_ADDRESS + $F8;
=11530489				OPM_F9_B_C2_D1L_RR			= OPM_BASE_ADDRESS + $F9;
=11530490				OPM_FA_C_C2_D1L_RR			= OPM_BASE_ADDRESS + $FA;
=11530491				OPM_FB_D_C2_D1L_RR			= OPM_BASE_ADDRESS + $FB;
=11530492				OPM_FC_E_C2_D1L_RR			= OPM_BASE_ADDRESS + $FC;
=11530493				OPM_FD_F_C2_D1L_RR			= OPM_BASE_ADDRESS + $FD;
=11530494				OPM_FE_G_C2_D1L_RR			= OPM_BASE_ADDRESS + $FE;
=11530495				OPM_FF_H_C2_D1L_RR			= OPM_BASE_ADDRESS + $FF;

;******  Return to file: src\YM26XX.asm

.39b1f4					YM2612_test_piano
.39b1f4	e2 20		sep #$20	                SEP #$20        ; set A short
.39b1f6	a9 00		lda #$00				LDA #$0;
.39b1f8	8f 22 f2 af	sta $aff222				STA OPN2_22_LFO ; LFO off
.39b1fc	a9 00		lda #$00				LDA #$0;
.39b1fe	8f 27 f2 af	sta $aff227				STA OPN2_27_CHANEL_3_MODE; chanel 3 in normal mode
.39b202	a9 00		lda #$00				LDA #$0;
.39b204	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b208	a9 01		lda #$01				LDA #$1;
.39b20a	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b20e	a9 02		lda #$02				LDA #$2;
.39b210	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b214	a9 04		lda #$04				LDA #$4;
.39b216	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b21a	a9 05		lda #$05				LDA #$5;
.39b21c	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b220	a9 06		lda #$06				LDA #$6;
.39b222	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b226	a9 00		lda #$00				LDA #$0;
.39b228	8f 2b f2 af	sta $aff22b				STA OPN2_2B_ADC_EN
.39b22c	a9 71		lda #$71				LDA #$71	;
.39b22e	8f 30 f2 af	sta $aff230				STA OPN2_30_ADSR__DT1_MUL__CH1_OP1
.39b232	8f 31 f2 af	sta $aff231				STA OPN2_31_ADSR__DT1_MUL__CH2_OP1
.39b236	8f 32 f2 af	sta $aff232				STA OPN2_32_ADSR__DT1_MUL__CH3_OP1
.39b23a	8f 30 f3 af	sta $aff330				STA OPN2_30_ADSR__DT1_MUL__CH1_OP5
.39b23e	8f 31 f3 af	sta $aff331				STA OPN2_31_ADSR__DT1_MUL__CH2_OP5
.39b242	8f 32 f3 af	sta $aff332				STA OPN2_32_ADSR__DT1_MUL__CH3_OP5
.39b246	a9 0d		lda #$0d				LDA #$0D	;
.39b248	8f 34 f2 af	sta $aff234				STA OPN2_34_ADSR__DT1_MUL__CH1_OP2
.39b24c	8f 35 f2 af	sta $aff235				STA OPN2_35_ADSR__DT1_MUL__CH2_OP2
.39b250	8f 36 f2 af	sta $aff236				STA OPN2_36_ADSR__DT1_MUL__CH3_OP2
.39b254	8f 34 f3 af	sta $aff334				STA OPN2_34_ADSR__DT1_MUL__CH1_OP6
.39b258	8f 35 f3 af	sta $aff335				STA OPN2_35_ADSR__DT1_MUL__CH2_OP6
.39b25c	8f 36 f3 af	sta $aff336				STA OPN2_36_ADSR__DT1_MUL__CH3_OP6
.39b260	a9 33		lda #$33				LDA #$33	;
.39b262	8f 38 f2 af	sta $aff238				STA OPN2_38_ADSR__DT1_MUL__CH1_OP3	;
.39b266	8f 39 f2 af	sta $aff239				STA OPN2_39_ADSR__DT1_MUL__CH2_OP3
.39b26a	8f 3a f2 af	sta $aff23a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP3
.39b26e	8f 38 f3 af	sta $aff338				STA OPN2_38_ADSR__DT1_MUL__CH1_OP7	;
.39b272	8f 39 f3 af	sta $aff339				STA OPN2_39_ADSR__DT1_MUL__CH2_OP7
.39b276	8f 3a f3 af	sta $aff33a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP7
.39b27a	a9 01		lda #$01				LDA #$01	;
.39b27c	8f 3c f2 af	sta $aff23c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP4	;
.39b280	8f 3d f2 af	sta $aff23d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP4
.39b284	8f 3e f2 af	sta $aff23e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP4
.39b288	8f 3c f3 af	sta $aff33c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP8	;
.39b28c	8f 3d f3 af	sta $aff33d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP8
.39b290	8f 3e f3 af	sta $aff33e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP8
.39b294	a9 23		lda #$23				LDA #$23	;
.39b296	8f 40 f2 af	sta $aff240				STA OPN2_40_ADSR__LT__CH1_OP1	;
.39b29a	8f 41 f2 af	sta $aff241				STA OPN2_41_ADSR__LT__CH2_OP1
.39b29e	8f 42 f2 af	sta $aff242				STA OPN2_42_ADSR__LT__CH3_OP1
.39b2a2	8f 40 f3 af	sta $aff340				STA OPN2_40_ADSR__LT__CH1_OP5	;
.39b2a6	8f 41 f3 af	sta $aff341				STA OPN2_41_ADSR__LT__CH2_OP5
.39b2aa	8f 42 f3 af	sta $aff342				STA OPN2_42_ADSR__LT__CH3_OP5
.39b2ae	a9 2d		lda #$2d				LDA #$2D	;
.39b2b0	8f 44 f2 af	sta $aff244				STA OPN2_44_ADSR__LT__CH1_OP2	;
.39b2b4	8f 45 f2 af	sta $aff245				STA OPN2_45_ADSR__LT__CH2_OP2
.39b2b8	8f 46 f2 af	sta $aff246				STA OPN2_46_ADSR__LT__CH3_OP2
.39b2bc	8f 44 f3 af	sta $aff344				STA OPN2_44_ADSR__LT__CH1_OP6	;
.39b2c0	8f 45 f3 af	sta $aff345				STA OPN2_45_ADSR__LT__CH2_OP6
.39b2c4	8f 46 f3 af	sta $aff346				STA OPN2_46_ADSR__LT__CH3_OP6
.39b2c8	a9 26		lda #$26				LDA #$26	;
.39b2ca	8f 48 f2 af	sta $aff248				STA OPN2_48_ADSR__LT__CH1_OP3	;
.39b2ce	8f 49 f2 af	sta $aff249				STA OPN2_49_ADSR__LT__CH2_OP3
.39b2d2	8f 4a f2 af	sta $aff24a				STA OPN2_4A_ADSR__LT__CH3_OP3
.39b2d6	8f 48 f3 af	sta $aff348				STA OPN2_48_ADSR__LT__CH1_OP7	;
.39b2da	8f 49 f3 af	sta $aff349				STA OPN2_49_ADSR__LT__CH2_OP7
.39b2de	8f 4a f3 af	sta $aff34a				STA OPN2_4A_ADSR__LT__CH3_OP7
.39b2e2	a9 00		lda #$00				LDA #$00	;
.39b2e4	8f 4c f2 af	sta $aff24c				STA OPN2_4C_ADSR__LT__CH1_OP4	;
.39b2e8	8f 4d f2 af	sta $aff24d				STA OPN2_4D_ADSR__LT__CH2_OP4
.39b2ec	8f 4e f2 af	sta $aff24e				STA OPN2_4E_ADSR__LT__CH3_OP4
.39b2f0	8f 4c f3 af	sta $aff34c				STA OPN2_4C_ADSR__LT__CH1_OP8	;
.39b2f4	8f 4d f3 af	sta $aff34d				STA OPN2_4D_ADSR__LT__CH2_OP8
.39b2f8	8f 4e f3 af	sta $aff34e				STA OPN2_4E_ADSR__LT__CH3_OP8
.39b2fc	a9 5f		lda #$5f				LDA #$5F	;
.39b2fe	8f 50 f2 af	sta $aff250				STA OPN2_50_ADSR__SR_AR__CH1_OP1	;
.39b302	8f 51 f2 af	sta $aff251				STA OPN2_51_ADSR__SR_AR__CH2_OP1	;
.39b306	8f 52 f2 af	sta $aff252				STA OPN2_52_ADSR__SR_AR__CH3_OP1	;
.39b30a	8f 50 f3 af	sta $aff350				STA OPN2_50_ADSR__SR_AR__CH1_OP5	;
.39b30e	8f 51 f3 af	sta $aff351				STA OPN2_51_ADSR__SR_AR__CH2_OP5	;
.39b312	8f 52 f3 af	sta $aff352				STA OPN2_52_ADSR__SR_AR__CH3_OP5	;
.39b316	a9 99		lda #$99				LDA #$99	;
.39b318	8f 54 f2 af	sta $aff254				STA OPN2_54_ADSR__SR_AR__CH1_OP2	;
.39b31c	8f 55 f2 af	sta $aff255				STA OPN2_55_ADSR__SR_AR__CH2_OP2	;
.39b320	8f 56 f2 af	sta $aff256				STA OPN2_56_ADSR__SR_AR__CH3_OP2	;
.39b324	8f 54 f3 af	sta $aff354				STA OPN2_54_ADSR__SR_AR__CH1_OP6	;
.39b328	8f 55 f3 af	sta $aff355				STA OPN2_55_ADSR__SR_AR__CH2_OP6	;
.39b32c	8f 56 f3 af	sta $aff356				STA OPN2_56_ADSR__SR_AR__CH3_OP6	;
.39b330	a9 5f		lda #$5f				LDA #$5F	;
.39b332	8f 58 f2 af	sta $aff258				STA OPN2_58_ADSR__SR_AR__CH1_OP3	;
.39b336	8f 59 f2 af	sta $aff259				STA OPN2_59_ADSR__SR_AR__CH2_OP3	;
.39b33a	8f 5a f2 af	sta $aff25a				STA OPN2_5A_ADSR__SR_AR__CH3_OP3	;
.39b33e	8f 58 f3 af	sta $aff358				STA OPN2_58_ADSR__SR_AR__CH1_OP7	;
.39b342	8f 59 f3 af	sta $aff359				STA OPN2_59_ADSR__SR_AR__CH2_OP7	;
.39b346	8f 5a f3 af	sta $aff35a				STA OPN2_5A_ADSR__SR_AR__CH3_OP7	;
.39b34a	a9 94		lda #$94				LDA #$94	;
.39b34c	8f 5c f2 af	sta $aff25c				STA OPN2_5C_ADSR__SR_AR__CH1_OP4	;
.39b350	8f 5d f2 af	sta $aff25d				STA OPN2_5D_ADSR__SR_AR__CH2_OP4	;
.39b354	8f 5e f2 af	sta $aff25e				STA OPN2_5E_ADSR__SR_AR__CH3_OP4	;
.39b358	8f 5c f3 af	sta $aff35c				STA OPN2_5C_ADSR__SR_AR__CH1_OP8	;
.39b35c	8f 5d f3 af	sta $aff35d				STA OPN2_5D_ADSR__SR_AR__CH2_OP8	;
.39b360	8f 5e f3 af	sta $aff35e				STA OPN2_5E_ADSR__SR_AR__CH3_OP8	;
.39b364	a9 07		lda #$07				LDA #$7 	;
.39b366	8f 60 f2 af	sta $aff260				STA OPN2_60_ADSR__AM_D1R__CH1_OP1	;
.39b36a	8f 61 f2 af	sta $aff261				STA OPN2_61_ADSR__AM_D1R__CH2_OP1	;
.39b36e	8f 62 f2 af	sta $aff262				STA OPN2_62_ADSR__AM_D1R__CH3_OP1	;
.39b372	8f 60 f3 af	sta $aff360				STA OPN2_60_ADSR__AM_D1R__CH1_OP5	;
.39b376	8f 61 f3 af	sta $aff361				STA OPN2_61_ADSR__AM_D1R__CH2_OP5	;
.39b37a	8f 62 f3 af	sta $aff362				STA OPN2_62_ADSR__AM_D1R__CH3_OP5	;
.39b37e	a9 07		lda #$07				LDA #$7 	;
.39b380	8f 64 f2 af	sta $aff264				STA OPN2_64_ADSR__AM_D1R__CH1_OP2	;
.39b384	8f 65 f2 af	sta $aff265				STA OPN2_65_ADSR__AM_D1R__CH2_OP2	;
.39b388	8f 66 f2 af	sta $aff266				STA OPN2_66_ADSR__AM_D1R__CH3_OP2	;
.39b38c	8f 64 f3 af	sta $aff364				STA OPN2_64_ADSR__AM_D1R__CH1_OP6	;
.39b390	8f 65 f3 af	sta $aff365				STA OPN2_65_ADSR__AM_D1R__CH2_OP6	;
.39b394	8f 66 f3 af	sta $aff366				STA OPN2_66_ADSR__AM_D1R__CH3_OP6	;
.39b398	a9 05		lda #$05				LDA #$5 	;
.39b39a	8f 68 f2 af	sta $aff268				STA OPN2_68_ADSR__AM_D1R__CH1_OP3	;
.39b39e	8f 69 f2 af	sta $aff269				STA OPN2_69_ADSR__AM_D1R__CH2_OP3	;
.39b3a2	8f 6a f2 af	sta $aff26a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP3	;
.39b3a6	8f 68 f3 af	sta $aff368				STA OPN2_68_ADSR__AM_D1R__CH1_OP7	;
.39b3aa	8f 69 f3 af	sta $aff369				STA OPN2_69_ADSR__AM_D1R__CH2_OP7	;
.39b3ae	8f 6a f3 af	sta $aff36a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP7	;
.39b3b2	a9 07		lda #$07				LDA #$7 	;
.39b3b4	8f 6c f2 af	sta $aff26c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP4	;
.39b3b8	8f 6d f2 af	sta $aff26d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP4	;
.39b3bc	8f 6e f2 af	sta $aff26e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP4	;
.39b3c0	8f 6c f3 af	sta $aff36c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP8	;
.39b3c4	8f 6d f3 af	sta $aff36d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP8	;
.39b3c8	8f 6e f3 af	sta $aff36e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP8	;
.39b3cc	a9 02		lda #$02				LDA #$2 	;
.39b3ce	8f 70 f2 af	sta $aff270				STA OPN2_70_ADSR__D2R__CH1_OP1	;
.39b3d2	8f 71 f2 af	sta $aff271				STA OPN2_71_ADSR__D2R__CH2_OP1	;
.39b3d6	8f 72 f2 af	sta $aff272				STA OPN2_72_ADSR__D2R__CH3_OP1	;
.39b3da	8f 70 f3 af	sta $aff370				STA OPN2_70_ADSR__D2R__CH1_OP5	;
.39b3de	8f 71 f3 af	sta $aff371				STA OPN2_71_ADSR__D2R__CH2_OP5	;
.39b3e2	8f 72 f3 af	sta $aff372				STA OPN2_72_ADSR__D2R__CH3_OP5	;
.39b3e6	a9 02		lda #$02				LDA #$2 	;
.39b3e8	8f 74 f2 af	sta $aff274				STA OPN2_74_ADSR__D2R__CH1_OP2	;
.39b3ec	8f 75 f2 af	sta $aff275				STA OPN2_75_ADSR__D2R__CH2_OP2	;
.39b3f0	8f 76 f2 af	sta $aff276				STA OPN2_76_ADSR__D2R__CH3_OP2	;
.39b3f4	8f 74 f3 af	sta $aff374				STA OPN2_74_ADSR__D2R__CH1_OP6	;
.39b3f8	8f 75 f3 af	sta $aff375				STA OPN2_75_ADSR__D2R__CH2_OP6	;
.39b3fc	8f 76 f3 af	sta $aff376				STA OPN2_76_ADSR__D2R__CH3_OP6	;
.39b400	a9 02		lda #$02				LDA #$2 	;
.39b402	8f 78 f2 af	sta $aff278				STA OPN2_78_ADSR__D2R__CH1_OP3	;
.39b406	8f 79 f2 af	sta $aff279				STA OPN2_79_ADSR__D2R__CH2_OP3	;
.39b40a	8f 7a f2 af	sta $aff27a				STA OPN2_7A_ADSR__D2R__CH3_OP3	;
.39b40e	8f 78 f3 af	sta $aff378				STA OPN2_78_ADSR__D2R__CH1_OP7	;
.39b412	8f 79 f3 af	sta $aff379				STA OPN2_79_ADSR__D2R__CH2_OP7	;
.39b416	8f 7a f3 af	sta $aff37a				STA OPN2_7A_ADSR__D2R__CH3_OP7	;
.39b41a	a9 02		lda #$02				LDA #$2 	;
.39b41c	8f 7c f2 af	sta $aff27c				STA OPN2_7C_ADSR__D2R__CH1_OP4	;
.39b420	8f 7d f2 af	sta $aff27d				STA OPN2_7D_ADSR__D2R__CH2_OP4	;
.39b424	8f 7e f2 af	sta $aff27e				STA OPN2_7E_ADSR__D2R__CH3_OP4	;
.39b428	8f 7c f3 af	sta $aff37c				STA OPN2_7C_ADSR__D2R__CH1_OP8	;
.39b42c	8f 7d f3 af	sta $aff37d				STA OPN2_7D_ADSR__D2R__CH2_OP8	;
.39b430	8f 7e f3 af	sta $aff37e				STA OPN2_7E_ADSR__D2R__CH3_OP8	;
.39b434	a9 11		lda #$11				LDA #$11	;
.39b436	8f 80 f2 af	sta $aff280				STA OPN2_80_ADSR__D1L_RR__CH1_OP1	;
.39b43a	8f 81 f2 af	sta $aff281				STA OPN2_81_ADSR__D1L_RR__CH2_OP1	;
.39b43e	8f 82 f2 af	sta $aff282				STA OPN2_82_ADSR__D1L_RR__CH3_OP1	;
.39b442	8f 80 f3 af	sta $aff380				STA OPN2_80_ADSR__D1L_RR__CH1_OP5	;
.39b446	8f 81 f3 af	sta $aff381				STA OPN2_81_ADSR__D1L_RR__CH2_OP5	;
.39b44a	8f 82 f3 af	sta $aff382				STA OPN2_82_ADSR__D1L_RR__CH3_OP5	;
.39b44e	a9 11		lda #$11				LDA #$11	;
.39b450	8f 84 f2 af	sta $aff284				STA OPN2_84_ADSR__D1L_RR__CH1_OP2	;
.39b454	8f 85 f2 af	sta $aff285				STA OPN2_85_ADSR__D1L_RR__CH2_OP2	;
.39b458	8f 86 f2 af	sta $aff286				STA OPN2_86_ADSR__D1L_RR__CH3_OP2	;
.39b45c	8f 84 f3 af	sta $aff384				STA OPN2_84_ADSR__D1L_RR__CH1_OP6	;
.39b460	8f 85 f3 af	sta $aff385				STA OPN2_85_ADSR__D1L_RR__CH2_OP6	;
.39b464	8f 86 f3 af	sta $aff386				STA OPN2_86_ADSR__D1L_RR__CH3_OP6	;
.39b468	a9 11		lda #$11				LDA #$11	;
.39b46a	8f 88 f2 af	sta $aff288				STA OPN2_88_ADSR__D1L_RR__CH1_OP3	;
.39b46e	8f 89 f2 af	sta $aff289				STA OPN2_89_ADSR__D1L_RR__CH2_OP3	;
.39b472	8f 8a f2 af	sta $aff28a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP3	;
.39b476	8f 88 f3 af	sta $aff388				STA OPN2_88_ADSR__D1L_RR__CH1_OP7	;
.39b47a	8f 89 f3 af	sta $aff389				STA OPN2_89_ADSR__D1L_RR__CH2_OP7	;
.39b47e	8f 8a f3 af	sta $aff38a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP7	;
.39b482	a9 a6		lda #$a6				LDA #$A6	;
.39b484	8f 8c f2 af	sta $aff28c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP4;
.39b488	8f 8d f2 af	sta $aff28d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP4;
.39b48c	8f 8e f2 af	sta $aff28e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP4;
.39b490	8f 8c f3 af	sta $aff38c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP8;
.39b494	8f 8d f3 af	sta $aff38d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP8;
.39b498	8f 8e f3 af	sta $aff38e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP8;
.39b49c	a9 00		lda #$00				LDA #$0 	;
.39b49e	8f 90 f2 af	sta $aff290				STA OPN2_90_ADSR__D1L_RR__CH1_OP1	;
.39b4a2	8f 91 f2 af	sta $aff291				STA OPN2_91_ADSR__D1L_RR__CH2_OP1	;
.39b4a6	8f 92 f2 af	sta $aff292				STA OPN2_92_ADSR__D1L_RR__CH3_OP1	;
.39b4aa	8f 90 f3 af	sta $aff390				STA OPN2_90_ADSR__D1L_RR__CH4_OP1	;
.39b4ae	8f 91 f3 af	sta $aff391				STA OPN2_91_ADSR__D1L_RR__CH5_OP1	;
.39b4b2	8f 92 f3 af	sta $aff392				STA OPN2_92_ADSR__D1L_RR__CH6_OP1	;
.39b4b6	a9 00		lda #$00				LDA #$0 	;
.39b4b8	8f 94 f2 af	sta $aff294				STA OPN2_94_ADSR__D1L_RR__CH1_OP2	;
.39b4bc	8f 95 f2 af	sta $aff295				STA OPN2_95_ADSR__D1L_RR__CH2_OP2	;
.39b4c0	8f 96 f2 af	sta $aff296				STA OPN2_96_ADSR__D1L_RR__CH3_OP2	;
.39b4c4	8f 94 f3 af	sta $aff394				STA OPN2_94_ADSR__D1L_RR__CH4_OP2	;
.39b4c8	8f 95 f3 af	sta $aff395				STA OPN2_95_ADSR__D1L_RR__CH5_OP2	;
.39b4cc	8f 96 f3 af	sta $aff396				STA OPN2_96_ADSR__D1L_RR__CH6_OP2	;
.39b4d0	a9 00		lda #$00				LDA #$0 	;
.39b4d2	8f 98 f2 af	sta $aff298				STA OPN2_98_ADSR__D1L_RR__CH1_OP3	;
.39b4d6	8f 99 f2 af	sta $aff299				STA OPN2_99_ADSR__D1L_RR__CH2_OP3	;
.39b4da	8f 9a f2 af	sta $aff29a				STA OPN2_9A_ADSR__D1L_RR__CH3_OP3	;
.39b4de	8f 98 f3 af	sta $aff398				STA OPN2_98_ADSR__D1L_RR__CH4_OP3	;
.39b4e2	8f 99 f3 af	sta $aff399				STA OPN2_99_ADSR__D1L_RR__CH5_OP3	;
.39b4e6	8f 9a f3 af	sta $aff39a				STA OPN2_9A_ADSR__D1L_RR__CH6_OP3	;
.39b4ea	a9 00		lda #$00				LDA #$0 	;
.39b4ec	8f 9c f2 af	sta $aff29c				STA OPN2_9C_ADSR__D1L_RR__CH1_OP4	;
.39b4f0	8f 9d f2 af	sta $aff29d				STA OPN2_9D_ADSR__D1L_RR__CH2_OP4	;
.39b4f4	8f 9e f2 af	sta $aff29e				STA OPN2_9E_ADSR__D1L_RR__CH3_OP4	;
.39b4f8	8f 9c f3 af	sta $aff39c				STA OPN2_9C_ADSR__D1L_RR__CH4_OP4	;
.39b4fc	8f 9d f3 af	sta $aff39d				STA OPN2_9D_ADSR__D1L_RR__CH5_OP4	;
.39b500	8f 9e f3 af	sta $aff39e				STA OPN2_9E_ADSR__D1L_RR__CH6_OP4	;
.39b504	a9 32		lda #$32				LDA #$32	;
.39b506	8f b0 f2 af	sta $aff2b0				STA OPN2_B0_CH1_FEEDBACK_ALGO	;
.39b50a	8f b1 f2 af	sta $aff2b1				STA OPN2_B1_CH2_FEEDBACK_ALGO	;
.39b50e	8f b2 f2 af	sta $aff2b2				STA OPN2_B2_CH3_FEEDBACK_ALGO	;
.39b512	a9 c0		lda #$c0				LDA #$C0	;  	Both speakers on
.39b514	8f b4 f2 af	sta $aff2b4				STA OPN2_B4_CH1_L_R_AMS_FMS	;
.39b518	8f b5 f2 af	sta $aff2b5				STA OPN2_B5_CH2_L_R_AMS_FMS	;
.39b51c	8f b6 f2 af	sta $aff2b6				STA OPN2_B6_CH3_L_R_AMS_FMS	;
.39b520	a9 23		lda #$23				LDA #$23	;  	Set frequency
.39b522	8f a4 f2 af	sta $aff2a4				STA OPN2_A4_CH1_OCTAVE_FRECANCY_H	;
.39b526	a9 22		lda #$22				LDA #$22	;  	Set frequency
.39b528	8f a5 f2 af	sta $aff2a5				STA OPN2_A5_CH2_OCTAVE_FRECANCY_H	;
.39b52c	a9 22		lda #$22				LDA #$22	;  	Set frequency
.39b52e	8f a6 f2 af	sta $aff2a6				STA OPN2_A6_CH3_OCTAVE_FRECANCY_H	;
.39b532	a9 9c		lda #$9c				LDA #$9C	;
.39b534	8f a0 f2 af	sta $aff2a0				STA OPN2_A0_CH1_FRECANCY_L	;
.39b538	8f a1 f2 af	sta $aff2a1				STA OPN2_A1_CH2_FRECANCY_L	;
.39b53c	a9 24		lda #$24				LDA #$24	;
.39b53e	8f a2 f2 af	sta $aff2a2				STA OPN2_A2_CH3_FRECANCY_L	;
.39b542	a9 00		lda #$00				LDA #$00	;  	Key off
.39b544	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF	;
.39b548	c2 10		rep #$10	                REP #$10        ; set X long
.39b54a					YM2612_test_piano__LOOP_FOR_EVER
.39b54a	a9 f0		lda #$f0				LDA #$F0;
.39b54c	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b550	a9 f1		lda #$f1				LDA #$F1;
.39b552	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b556	a9 f2		lda #$f2				LDA #$F2;
.39b558	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b55c	a9 f4		lda #$f4				LDA #$F4;
.39b55e	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b562	a9 f5		lda #$f5				LDA #$F5;
.39b564	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b568	a9 f6		lda #$f6				LDA #$F6;
.39b56a	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b56e	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.39b571	22 1f b8 39	jsl $39b81f			 	JSL ILOOP_MS
.39b575	a9 00		lda #$00				LDA #$0;
.39b577	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b57b	a9 01		lda #$01				LDA #$1;
.39b57d	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b581	a9 02		lda #$02				LDA #$2;
.39b583	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b587	a9 04		lda #$04				LDA #$4;
.39b589	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b58d	a9 05		lda #$05				LDA #$5;
.39b58f	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b593	a9 06		lda #$06				LDA #$6;
.39b595	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39b599	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.39b59c	22 1f b8 39	jsl $39b81f			 	JSL ILOOP_MS
.39b5a0	6b		rtl					RTL
.39b5a1								YM2151_test
.39b5a1	e2 20		sep #$20	                SEP #$20        ; set A short
.39b5a3	a9 90		lda #$90							LDA #$90
.39b5a5	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.39b5a9	a9 55		lda #$55							LDA #$55
.39b5ab	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.39b5af	a9 d7		lda #$d7							LDA #$D7
.39b5b1	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT
.39b5b5	8f 21 f0 af	sta $aff021							STA OPM_21_B_RL_FR_CONNECT
.39b5b9	8f 22 f0 af	sta $aff022							STA OPM_22_C_RL_FR_CONNECT
.39b5bd	8f 23 f0 af	sta $aff023							STA OPM_23_D_RL_FR_CONNECT
.39b5c1	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.39b5c5	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.39b5c9	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.39b5cd	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.39b5d1	a9 d7		lda #$d7							LDA #$D7	; add some feedback for the next 4 chanel
.39b5d3	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.39b5d7	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.39b5db	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.39b5df	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.39b5e3	a9 00		lda #$00							LDA #$00
.39b5e5	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.39b5e9	8f 61 f0 af	sta $aff061							STA OPM_61_B_M1_TL
.39b5ed	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.39b5f1	8f 69 f0 af	sta $aff069							STA OPM_69_B_M2_TL
.39b5f5	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.39b5f9	8f 71 f0 af	sta $aff071							STA OPM_71_B_C1_TL
.39b5fd	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.39b601	8f 79 f0 af	sta $aff079							STA OPM_79_B_C2_TL
.39b605	a9 55		lda #$55							LDA #$55
.39b607	8f 40 f0 af	sta $aff040							STA OPM_40_A_M1_DT1_MUL
.39b60b	a9 18		lda #$18							LDA #$18
.39b60d	8f 41 f0 af	sta $aff041							STA OPM_41_B_M1_DT1_MUL
.39b611	a9 c4		lda #$c4							LDA #$C4
.39b613	8f 80 f0 af	sta $aff080							STA OPM_80_A_M1_KS_AR
.39b617	a9 c4		lda #$c4							LDA #$C4
.39b619	8f 81 f0 af	sta $aff081							STA OPM_81_B_M1_KS_AR
.39b61d	a9 84		lda #$84							LDA #$84
.39b61f	8f a0 f0 af	sta $aff0a0							STA OPM_A0_A_M1_AMS_EN_D1R
.39b623	a9 85		lda #$85							LDA #$85
.39b625	8f a1 f0 af	sta $aff0a1							STA OPM_A1_B_M1_AMS_EN_D1R
.39b629	a9 42		lda #$42							LDA #$42
.39b62b	8f c0 f0 af	sta $aff0c0							STA OPM_C0_A_M1_DT2_D2R
.39b62f	8f c8 f0 af	sta $aff0c8							STA OPM_C8_A_M2_DT2_D2R
.39b633	8f d0 f0 af	sta $aff0d0							STA OPM_D0_A_C1_DT2_D2R
.39b637	8f d8 f0 af	sta $aff0d8							STA OPM_D8_A_C2_DT2_D2R
.39b63b	a9 43		lda #$43							LDA #$43
.39b63d	8f c1 f0 af	sta $aff0c1							STA OPM_C1_B_M1_DT2_D2R
.39b641	8f c9 f0 af	sta $aff0c9							STA OPM_C9_B_M2_DT2_D2R
.39b645	8f d1 f0 af	sta $aff0d1							STA OPM_D1_B_C1_DT2_D2R
.39b649	8f d9 f0 af	sta $aff0d9							STA OPM_D9_B_C2_DT2_D2R
.39b64d	a9 24		lda #$24							LDA #$24
.39b64f	8f e0 f0 af	sta $aff0e0							STA OPM_E0_A_M1_D1L_RR
.39b653	8f e1 f0 af	sta $aff0e1							STA OPM_E1_B_M1_D1L_RR
.39b657	a9 14		lda #$14							LDA #$14
.39b659	8f e8 f0 af	sta $aff0e8							STA OPM_E8_A_M2_D1L_RR
.39b65d	8f e9 f0 af	sta $aff0e9							STA OPM_E9_B_M2_D1L_RR
.39b661	a9 24		lda #$24							LDA #$24
.39b663	8f f0 f0 af	sta $aff0f0							STA OPM_F0_A_C1_D1L_RR
.39b667	8f f1 f0 af	sta $aff0f1							STA OPM_F1_B_C1_D1L_RR
.39b66b	a9 44		lda #$44							LDA #$44
.39b66d	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.39b671	8f f9 f0 af	sta $aff0f9							STA OPM_F9_B_C2_D1L_RR
.39b675	a9 96		lda #$96							LDA #$96 	;	0x20 sellect the octave (0-7), 0x06 sellect the note (0-F)
.39b677	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC	;
.39b67b	a9 1a		lda #$1a							LDA #$1A
.39b67d	8f 29 f0 af	sta $aff029							STA OPM_29_B_KC	;
.39b681	a9 26		lda #$26							LDA #$26
.39b683	8f 2a f0 af	sta $aff02a							STA OPM_2A_C_KC	;
.39b687	a9 2a		lda #$2a							LDA #$2A
.39b689	8f 2b f0 af	sta $aff02b							STA OPM_2B_D_KC	;
.39b68d	a9 36		lda #$36							LDA #$36
.39b68f	8f 2c f0 af	sta $aff02c							STA OPM_2C_E_KC	;
.39b693	a9 2a		lda #$2a							LDA #$2A
.39b695	8f 2d f0 af	sta $aff02d							STA OPM_2D_F_KC	;
.39b699	a9 46		lda #$46							LDA #$46
.39b69b	8f 2e f0 af	sta $aff02e							STA OPM_2E_G_KC	;
.39b69f	a9 4a		lda #$4a							LDA #$4A
.39b6a1	8f 2f f0 af	sta $aff02f							STA OPM_2F_H_KC	;
.39b6a5	a9 45		lda #$45							LDA #$45
.39b6a7	8f 30 f0 af	sta $aff030							STA OPM_30_A_KF	;
.39b6ab	a9 80		lda #$80							LDA #$80
.39b6ad	8f 31 f0 af	sta $aff031							STA OPM_31_B_KF	;
.39b6b1	a9 45		lda #$45							LDA #$45
.39b6b3	8f 32 f0 af	sta $aff032							STA OPM_32_C_KF	;
.39b6b7	a9 80		lda #$80							LDA #$80
.39b6b9	8f 33 f0 af	sta $aff033							STA OPM_33_D_KF	;
.39b6bd								YM2151_test__LOOP_FOR_EVER
.39b6bd	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.39b6bf	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6c3	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.39b6c5	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6c9	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.39b6cb	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6cf	a9 7c		lda #$7c							LDA #$7C	;  	Key on chanel C all OPP
.39b6d1	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6d5	a9 7d		lda #$7d							LDA #$7D	;  	Key on chanel C all OPP
.39b6d7	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6db	a9 7e		lda #$7e							LDA #$7E	;  	Key on chanel C all OPP
.39b6dd	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6e1	a9 7f		lda #$7f							LDA #$7F	;  	Key on chanel C all OPP
.39b6e3	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6e7	a2 00 80	ldx #$8000							LDX #32768      ; 400ms
.39b6ea	22 1f b8 39	jsl $39b81f						 	JSL ILOOP_MS
.39b6ee	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.39b6f0	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6f4	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.39b6f6	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b6fa	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.39b6fc	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b700	a9 03		lda #$03							LDA #$03	;  	Key off chanel C all OPP
.39b702	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b706	a9 04		lda #$04							LDA #$04	;  	Key off chanel C all OPP
.39b708	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b70c	a9 05		lda #$05							LDA #$05	;  	Key off chanel C all OPP
.39b70e	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b712	a9 06		lda #$06							LDA #$06	;  	Key off chanel C all OPP
.39b714	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b718	a9 07		lda #$07							LDA #$07	;  	Key off chanel C all OPP
.39b71a	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b71e	a2 00 80	ldx #$8000							LDX #32768      ; 100ms
.39b721	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b725	6b		rtl								RTL
.39b726								YM2151_test_2_from_Chibisound
.39b726	08		php								PHP
.39b727	0b		phd								PHD
.39b728	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b72a	da		phx								PHX
.39b72b	48		pha								PHA
.39b72c	e2 20		sep #$20	                SEP #$20        ; set A short
.39b72e	a9 90		lda #$90							LDA #$90
.39b730	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.39b734	a9 55		lda #$55							LDA #$55
.39b736	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.39b73a	af 1b f0 af	lda $aff01b							LDA OPM_1B_CT_W
.39b73e	09 02		ora #$02							ORA #$02
.39b740	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W
.39b744	a9 c0		lda #$c0							LDA #$C0;
.39b746	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT; sellect the mode and active left and  right chanel
.39b74a	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b74d	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b751	a9 43		lda #$43							LDA #$43
.39b753	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC;	sellect a note
.39b757	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b75a	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b75e	a9 40		lda #$40							LDA #$40
.39b760	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.39b764	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.39b768	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.39b76c	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.39b770	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b773	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b777	a9 0f		lda #$0f							LDA #$0F
.39b779	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.39b77d	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b780	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b784	a9 0f		lda #$0f							LDA #$0F
.39b786	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W; 4Mhz(?) and square
.39b78a	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b78d	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b791								YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.39b791	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.39b793	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b797	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b79a	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b79e	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.39b7a0	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b7a4	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b7a7	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b7ab	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.39b7ad	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b7b1	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b7b4	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b7b8	a2 00 20	ldx #$2000							LDX #8192      ; 400ms
.39b7bb	22 1f b8 39	jsl $39b81f						 	JSL ILOOP_MS
.39b7bf	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.39b7c1	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b7c5	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39b7c8	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b7cc	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.39b7ce	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b7d2	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.39b7d4	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39b7d8	a2 00 20	ldx #$2000							LDX #8192     ; 100ms
.39b7db	22 1f b8 39	jsl $39b81f							JSL ILOOP_MS
.39b7df	80 b0		bra $39b791							BRA YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.39b7e1	68		pla								PLA
.39b7e2	fa		plx								PLX
.39b7e3	2b		pld								PLD
.39b7e4	28		plp								PLP
.39b7e5	6b		rtl								RTL
.39b7e6	ea		nop		ILOOP           NOP
.39b7e7	ea		nop		                NOP
.39b7e8	ea		nop		                NOP
.39b7e9	ea		nop		                NOP
.39b7ea	ea		nop		                NOP
.39b7eb	ea		nop		                NOP
.39b7ec	ea		nop		                NOP
.39b7ed	ea		nop		                NOP
.39b7ee	ea		nop		                NOP
.39b7ef	ea		nop		                NOP
.39b7f0	6b		rtl		                RTL
.39b7f1	22 e6 b7 39	jsl $39b7e6	ILOOP_1         JSL ILOOP
.39b7f5	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b7f9	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b7fd	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b801	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b805	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b809	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b80d	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b811	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b815	22 e6 b7 39	jsl $39b7e6	                JSL ILOOP
.39b819	6b		rtl		                RTL
.39b81a	22 f1 b7 39	jsl $39b7f1	ILOOP_1MS       JSL ILOOP_1
.39b81e	6b		rtl		                RTL
.39b81f	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39b822	f0 07		beq $39b82b	                BEQ LOOP_MS_END
.39b824	22 1a b8 39	jsl $39b81a	                JSL ILOOP_1MS
.39b828	ca		dex		                DEX
.39b829	80 f4		bra $39b81f	                BRA ILOOP_MS
.39b82b	6b		rtl		LOOP_MS_END     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.39b82c					KEYBOARD_INTERRUPT
.39b82c	48		pha		                PHA             ; begin setdp macro
.39b82d	08		php		                PHP
.39b82e	c2 20		rep #$20	                REP #$20        ; set A long
.39b830	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.39b833	5b		tcd		                TCD
.39b834	28		plp		                PLP
.39b835	68		pla		                PLA             ; end setdp macro
.39b836	a2 00 00	ldx #$0000	                ldx #$0000
.39b839	e2 10		sep #$10	                SEP #$10        ; set X short
.39b83b	e2 20		sep #$20	                SEP #$20        ; set A short
.39b83d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39b841	29 01		and #$01	                AND #FNX1_INT00_KBD
.39b843	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39b847					IRQ_HANDLER_FETCH
.39b847	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.39b84b	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.39b84d	c9 2a		cmp #$2a	NOT_SCROLLLOCK  CMP #$2A                ; Left Shift Pressed
.39b84f	d0 03		bne $39b854	                BNE NOT_KB_SET_LSHIFT
.39b851	82 b2 00	brl $39b906	                BRL KB_SET_SHIFT
.39b854					NOT_KB_SET_LSHIFT
.39b854	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.39b856	d0 03		bne $39b85b	                BNE NOT_KB_CLR_LSHIFT
.39b858	82 b4 00	brl $39b90f	                BRL KB_CLR_SHIFT
.39b85b					NOT_KB_CLR_LSHIFT
.39b85b	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.39b85d	d0 03		bne $39b862	                BNE NOT_KB_SET_RSHIFT
.39b85f	82 a4 00	brl $39b906	                BRL KB_SET_SHIFT
.39b862					NOT_KB_SET_RSHIFT
.39b862	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.39b864	d0 03		bne $39b869	                BNE NOT_KB_CLR_RSHIFT
.39b866	82 a6 00	brl $39b90f	                BRL KB_CLR_SHIFT
.39b869					NOT_KB_CLR_RSHIFT
.39b869	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.39b86b	d0 03		bne $39b870	                BNE NOT_KB_SET_CTRL
.39b86d	82 a8 00	brl $39b918	                BRL KB_SET_CTRL
.39b870					NOT_KB_SET_CTRL
.39b870	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.39b872	d0 03		bne $39b877	                BNE NOT_KB_CLR_CTRL
.39b874	82 aa 00	brl $39b921	                BRL KB_CLR_CTRL
.39b877					NOT_KB_CLR_CTRL
.39b877	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.39b879	d0 03		bne $39b87e	                BNE NOT_KB_SET_ALT
.39b87b	82 ac 00	brl $39b92a	                BRL KB_SET_ALT
.39b87e					NOT_KB_SET_ALT
.39b87e	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.39b880	d0 03		bne $39b885	                BNE NOT_KB_CLR_ALT
.39b882	82 ae 00	brl $39b933	                BRL KB_CLR_ALT
.39b885	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.39b887	d0 03		bne $39b88c	                BNE NOT_PREFIXED
.39b889	82 b0 00	brl $39b93c	                BRL KB_SET_PREFIX
.39b88c	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.39b88e	d0 03		bne $39b893	                BNE NOT_KB_SET_NUM
.39b890	82 bb 00	brl $39b94e	                BRL KB_TOG_NUMLOCK
.39b893	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.39b895	d0 03		bne $39b89a	                BNE NOT_KB_SET_SCR
.39b897	82 ab 00	brl $39b945	                BRL KB_TOG_SCRLOCK
.39b89a	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.39b89c	d0 03		bne $39b8a1	                BNE KB_UNPRESSED
.39b89e	82 b6 00	brl $39b957	                BRL KB_TOG_CAPLOCK
.39b8a1	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.39b8a3	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.39b8a5	d0 03		bne $39b8aa	                BNE KB_NORM_SC
.39b8a7	82 b3 00	brl $39b95d	                BRL KB_CHECK_B_DONE
.39b8aa	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.39b8ac	aa		tax		                TAX
.39b8ad	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.39b8af	29 10		and #$10	                AND #$10
.39b8b1	c9 10		cmp #$10	                CMP #$10
.39b8b3	f0 1f		beq $39b8d4	                BEQ SHIFT_KEY_ON
.39b8b5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.39b8b7	29 20		and #$20	                AND #$20
.39b8b9	c9 20		cmp #$20	                CMP #$20
.39b8bb	f0 1e		beq $39b8db	                BEQ CTRL_KEY_ON
.39b8bd	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.39b8bf	29 40		and #$40	                AND #$40
.39b8c1	c9 40		cmp #$40	                CMP #$40
.39b8c3	f0 1d		beq $39b8e2	                BEQ ALT_KEY_ON
.39b8c5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.39b8c7	29 80		and #$80	                AND #$80
.39b8c9	c9 80		cmp #$80	                CMP #$80
.39b8cb	f0 1c		beq $39b8e9	                BEQ PREFIX_ON
.39b8cd	bf 00 17 39	lda $391700,x	                LDA @lScanCode_Press_Set1, x
.39b8d1	82 1f 00	brl $39b8f3	                BRL KB_WR_2_SCREEN
.39b8d4	bf 80 17 39	lda $391780,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.39b8d8	82 18 00	brl $39b8f3	                BRL KB_WR_2_SCREEN
.39b8db	bf 00 18 39	lda $391800,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.39b8df	82 11 00	brl $39b8f3	                BRL KB_WR_2_SCREEN
.39b8e2	bf 80 18 39	lda $391880,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.39b8e6	82 0a 00	brl $39b8f3	                BRL KB_WR_2_SCREEN
.39b8e9	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG
.39b8eb	29 7f		and #$7f	                AND #$7F
.39b8ed	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b8ef	bf 80 19 39	lda $391980,x	                LDA @lScanCode_Prefix_Set1, x
.39b8f3	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.39b8f5	d0 03		bne $39b8fa	                BNE savechar
.39b8f7	4c 6d b9	jmp $39b96d	                JMP programmerKey       ; Yes: trigger the programmer key
.39b8fa	48		pha		savechar        PHA
.39b8fb	c2 10		rep #$10	                REP #$10        ; set X long
.39b8fd	20 79 b9	jsr $39b979	                JSR SAVEKEY
.39b900	e2 20		sep #$20	                SEP #$20        ; set A short
.39b902	68		pla		                PLA
.39b903	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b906	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.39b908	09 10		ora #$10	                ORA #$10
.39b90a	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b90c	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b90f	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.39b911	29 ef		and #$ef	                AND #$EF
.39b913	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b915	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b918	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.39b91a	09 20		ora #$20	                ORA #$20
.39b91c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b91e	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b921	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.39b923	29 df		and #$df	                AND #$DF
.39b925	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b927	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b92a	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.39b92c	09 40		ora #$40	                ORA #$40
.39b92e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b930	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b933	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.39b935	29 bf		and #$bf	                AND #$BF
.39b937	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b939	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b93c	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.39b93e	09 80		ora #$80	                ORA #$80
.39b940	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39b942	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b945	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.39b947	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.39b949	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.39b94b	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b94e	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.39b950	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.39b952	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.39b954	4c 5d b9	jmp $39b95d	                JMP KB_CHECK_B_DONE
.39b957	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.39b959	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.39b95b	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.39b95d					KB_CHECK_B_DONE
.39b95d	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.39b961	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.39b963	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.39b965	d0 03		bne $39b96a	                BNE SET_LED
.39b967	4c 47 b8	jmp $39b847	                JMP IRQ_HANDLER_FETCH
.39b96a					SET_LED
.39b96a					KB_DONE
.39b96a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b96c	60		rts		                RTS
.39b96d					programmerKey
.39b96d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39b96f	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.39b970	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.39b971	ab		plb		                PLB
.39b972	7a		ply		                PLY
.39b973	fa		plx		                PLX
.39b974	68		pla		                PLA
.39b975	5c 08 00 39	jmp $390008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.39b979					SAVEKEY
.39b979	e2 20		sep #$20	                SEP #$20        ; set A short
.39b97b	48		pha		                PHA                     ; Save the character
.39b97c	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.39b97e	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.39b980	f0 0d		beq $39b98f	                BEQ no_caps             ; No... just use the character as-is
.39b982	68		pla		                PLA                     ; Get the character back
.39b983	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.39b985	90 09		bcc $39b990	                BLT check_break         ; Yes: just use as-is
.39b987	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.39b989	b0 05		bcs $39b990	                BGE check_break         ; Yes: just us as-is
.39b98b	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.39b98d	80 01		bra $39b990	                BRA check_break
.39b98f	68		pla		no_caps         PLA                     ; Restore the character
.39b990	c9 00		cmp #$00	check_break     CMP #0
.39b992	f0 18		beq $39b9ac	                BEQ done
.39b994	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.39b996	f0 15		beq $39b9ad	                BEQ flag_break          ; Yes: flag a break
.39b998	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.39b99a	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.39b99d	b0 0d		bcs $39b9ac	                BCS done                ; Stop storing - An error should ensue here...
.39b99f	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.39b9a3	e8		inx		                INX
.39b9a4	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.39b9a6	a9 00		lda #$00	                LDA #$00
.39b9a8	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.39b9ac	60		rts		done            RTS
.39b9ad					flag_break
.39b9ad	e2 20		sep #$20	                SEP #$20        ; set A short
.39b9af	a9 80		lda #$80	                LDA #$80                ; Flag that an interrupt key has been pressed
.39b9b1	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.39b9b3	60		rts		                RTS
.39b9b4					KBD_GETC
.39b9b4	da		phx		                PHX
.39b9b5	0b		phd		                PHD
.39b9b6	08		php		                PHP
.39b9b7	48		pha		                PHA             ; begin setdp macro
.39b9b8	08		php		                PHP
.39b9b9	c2 20		rep #$20	                REP #$20        ; set A long
.39b9bb	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.39b9be	5b		tcd		                TCD
.39b9bf	28		plp		                PLP
.39b9c0	68		pla		                PLA             ; end setdp macro
.39b9c1	e2 20		sep #$20	                SEP #$20        ; set A short
.39b9c3	c2 10		rep #$10	                REP #$10        ; set X long
.39b9c5	58		cli		                CLI                     ; Make sure interrupts can happen
.39b9c6	a6 8b		ldx $0f8b	get_wait        LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.39b9c8	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.39b9ca	90 02		bcc $39b9ce	                BCC read_buff           ; Yes: a key is present, read it
.39b9cc	80 f8		bra $39b9c6	                BRA get_wait            ; Otherwise, keep waiting
.39b9ce	78		sei		read_buff       SEI                     ; Don't interrupt me!
.39b9cf	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.39b9d1	e8		inx		                INX                     ; And move to the next key
.39b9d2	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.39b9d4	f0 07		beq $39b9dd	                BEQ reset_indexes       ; Yes: return to 0 position
.39b9d6	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.39b9d8	58		cli		                CLI
.39b9d9	28		plp		done            PLP                     ; Restore status and interrupts
.39b9da	2b		pld		                PLD
.39b9db	fa		plx		                PLX
.39b9dc	6b		rtl		                RTL
.39b9dd	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.39b9df	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.39b9e1	80 f6		bra $39b9d9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.39b9e3					UART_SELECT
.39b9e3	08		php		            PHP
.39b9e4	c2 20		rep #$20	                REP #$20        ; set A long
.39b9e6	c9 02 00	cmp #$0002	            CMP #2
.39b9e9	f0 07		beq $39b9f2	            BEQ is_COM2
.39b9eb	c2 20		rep #$20	                REP #$20        ; set A long
.39b9ed	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.39b9f0	80 05		bra $39b9f7	            BRA setaddr
.39b9f2					is_COM2
.39b9f2	c2 20		rep #$20	                REP #$20        ; set A long
.39b9f4	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.39b9f7	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.39b9fb	e2 20		sep #$20	                SEP #$20        ; set A short
.39b9fd	a9 af		lda #$af	            LDA #`UART1_BASE
.39b9ff	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.39ba03	28		plp		            PLP
.39ba04	6b		rtl		            RTL
.39ba05					UART_SETBPS
.39ba05	08		php		            PHP
.39ba06	0b		phd		            PHD
.39ba07	48		pha		                PHA             ; begin setdp macro
.39ba08	08		php		                PHP
.39ba09	c2 20		rep #$20	                REP #$20        ; set A long
.39ba0b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39ba0e	5b		tcd		                TCD
.39ba0f	28		plp		                PLP
.39ba10	68		pla		                PLA             ; end setdp macro
.39ba11	c2 30		rep #$30	                REP #$30        ; set A&X long
.39ba13	48		pha		            PHA
.39ba14	e2 20		sep #$20	                SEP #$20        ; set A short
.39ba16	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.39ba19	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39ba1b	09 80		ora #$80	            ORA #LCR_DLB
.39ba1d	97 00		sta [$0700],y	            STA [CURRUART],Y
.39ba1f	c2 20		rep #$20	                REP #$20        ; set A long
.39ba21	68		pla		            PLA
.39ba22	a0 00 00	ldy #$0000	            LDY #UART_DLL
.39ba25	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.39ba27	e2 20		sep #$20	                SEP #$20        ; set A short
.39ba29	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.39ba2c	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39ba2e	49 80		eor #$80	            EOR #LCR_DLB
.39ba30	97 00		sta [$0700],y	            STA [CURRUART],Y
.39ba32	2b		pld		            PLD
.39ba33	28		plp		            PLP
.39ba34	6b		rtl		            RTL
.39ba35					UART_SETLCR
.39ba35	08		php		            PHP
.39ba36	0b		phd		            PHD
.39ba37	48		pha		                PHA             ; begin setdp macro
.39ba38	08		php		                PHP
.39ba39	c2 20		rep #$20	                REP #$20        ; set A long
.39ba3b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39ba3e	5b		tcd		                TCD
.39ba3f	28		plp		                PLP
.39ba40	68		pla		                PLA             ; end setdp macro
.39ba41	e2 20		sep #$20	                SEP #$20        ; set A short
.39ba43	c2 10		rep #$10	                REP #$10        ; set X long
.39ba45	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.39ba47	a0 03 00	ldy #$0003	            LDY #UART_LCR
.39ba4a	97 00		sta [$0700],y	            STA [CURRUART],Y
.39ba4c	2b		pld		            PLD
.39ba4d	28		plp		            PLP
.39ba4e	6b		rtl		            RTL
.39ba4f					UART_INIT
.39ba4f	08		php		            PHP
.39ba50	0b		phd		            PHD
.39ba51	c2 30		rep #$30	                REP #$30        ; set A&X long
.39ba53	48		pha		                PHA             ; begin setdp macro
.39ba54	08		php		                PHP
.39ba55	c2 20		rep #$20	                REP #$20        ; set A long
.39ba57	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39ba5a	5b		tcd		                TCD
.39ba5b	28		plp		                PLP
.39ba5c	68		pla		                PLA             ; end setdp macro
.39ba5d	a9 01 00	lda #$0001	            LDA #UART_115200
.39ba60	22 05 ba 39	jsl $39ba05	            JSL UART_SETBPS
.39ba64	e2 20		sep #$20	                SEP #$20        ; set A short
.39ba66	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.39ba68	22 35 ba 39	jsl $39ba35	            JSL UART_SETLCR
.39ba6c	a9 e1		lda #$e1	            LDA #%11100001
.39ba6e	a0 02 00	ldy #$0002	            LDY #UART_FCR
.39ba71	97 00		sta [$0700],y	            STA [CURRUART],Y
.39ba73	2b		pld		            PLD
.39ba74	28		plp		            PLP
.39ba75	6b		rtl		            RTL
.39ba76					UART_HASBYT
.39ba76	08		php		            PHP
.39ba77	0b		phd		            PHD
.39ba78	c2 30		rep #$30	                REP #$30        ; set A&X long
.39ba7a	48		pha		                PHA             ; begin setdp macro
.39ba7b	08		php		                PHP
.39ba7c	c2 20		rep #$20	                REP #$20        ; set A long
.39ba7e	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39ba81	5b		tcd		                TCD
.39ba82	28		plp		                PLP
.39ba83	68		pla		                PLA             ; end setdp macro
.39ba84	e2 20		sep #$20	                SEP #$20        ; set A short
.39ba86	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.39ba89	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.39ba8b	29 01		and #$01	            AND #LSR_DATA_AVAIL
.39ba8d	d0 04		bne $39ba93	            BNE ret_true            ; If flag is set, return true
.39ba8f	2b		pld		ret_false   PLD                     ; Return false
.39ba90	28		plp		            PLP
.39ba91	18		clc		            CLC
.39ba92	6b		rtl		            RTL
.39ba93	2b		pld		ret_true    PLD                     ; Return true
.39ba94	28		plp		            PLP
.39ba95	38		sec		            SEC
.39ba96	6b		rtl		            RTL
.39ba97					UART_GETC
.39ba97	08		php		            PHP
.39ba98	0b		phd		            PHD
.39ba99	c2 30		rep #$30	                REP #$30        ; set A&X long
.39ba9b	48		pha		                PHA             ; begin setdp macro
.39ba9c	08		php		                PHP
.39ba9d	c2 20		rep #$20	                REP #$20        ; set A long
.39ba9f	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39baa2	5b		tcd		                TCD
.39baa3	28		plp		                PLP
.39baa4	68		pla		                PLA             ; end setdp macro
.39baa5	e2 20		sep #$20	                SEP #$20        ; set A short
.39baa7	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.39baaa	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.39baac	29 01		and #$01	            AND #LSR_DATA_AVAIL
.39baae	f0 fa		beq $39baaa	            BEQ wait_getc           ; If the flag is clear, wait
.39bab0	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.39bab3	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39bab5	2b		pld		            PLD
.39bab6	28		plp		            PLP
.39bab7	6b		rtl		            RTL
.39bab8					UART_PUTC
.39bab8	08		php		            PHP
.39bab9	0b		phd		            PHD
.39baba	c2 30		rep #$30	                REP #$30        ; set A&X long
.39babc	48		pha		                PHA             ; begin setdp macro
.39babd	08		php		                PHP
.39babe	c2 20		rep #$20	                REP #$20        ; set A long
.39bac0	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39bac3	5b		tcd		                TCD
.39bac4	28		plp		                PLP
.39bac5	68		pla		                PLA             ; end setdp macro
.39bac6	e2 20		sep #$20	                SEP #$20        ; set A short
.39bac8	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.39bac9	a0 05 00	ldy #$0005	            LDY #UART_LSR
.39bacc	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.39bace	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.39bad0	f0 fa		beq $39bacc	            BEQ wait_putc
.39bad2	68		pla		            PLA
.39bad3	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.39bad6	97 00		sta [$0700],y	            STA [CURRUART],Y
.39bad8	2b		pld		            PLD
.39bad9	28		plp		            PLP
.39bada	6b		rtl		            RTL
.39badb					UART_PUTS
.39badb	08		php		            PHP
.39badc	e2 20		sep #$20	                SEP #$20        ; set A short
.39bade	bd 00 00	lda $390000,x	put_loop    LDA #0,B,X
.39bae1	f0 07		beq $39baea	            BEQ done
.39bae3	22 b8 ba 39	jsl $39bab8	            JSL UART_PUTC
.39bae7	e8		inx		            INX
.39bae8	80 f4		bra $39bade	            BRA put_loop
.39baea	28		plp		done        PLP
.39baeb	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.390000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.390004	5c 82 12 39	jmp $391282	RESTORE         JML IRESTORE
.390008	5c b1 05 39	jmp $3905b1	BREAK           JML IBREAK
.39000c	5c f8 05 39	jmp $3905f8	READY           JML IREADY
.390010	5c 83 12 39	jmp $391283	SCINIT          JML ISCINIT
.390014	5c 84 12 39	jmp $391284	IOINIT          JML IIOINIT
.390018	5c 75 06 39	jmp $390675	PUTC            JML IPUTC
.39001c	5c 5e 06 39	jmp $39065e	PUTS            JML IPUTS
.390020	5c 96 07 39	jmp $390796	PUTB            JML IPUTB
.390024	5c 85 12 39	jmp $391285	PUTBLOCK        JML IPUTBLOCK
.390028	5c 86 12 39	jmp $391286	SETLFS          JML ISETLFS
.39002c	5c 87 12 39	jmp $391287	SETNAM          JML ISETNAM
.390030	5c 88 12 39	jmp $391288	OPEN            JML IOPEN
.390034	5c 89 12 39	jmp $391289	CLOSE           JML ICLOSE
.390038	5c 13 06 39	jmp $390613	SETIN           JML ISETIN
.39003c	5c 1c 06 39	jmp $39061c	SETOUT          JML ISETOUT
.390040	5c 8a 12 39	jmp $39128a	GETB            JML IGETB
.390044	5c 8b 12 39	jmp $39128b	GETBLOCK        JML IGETBLOCK
.390048	5c 8c 12 39	jmp $39128c	GETCH           JML IGETCH
.39004c	5c 2e 06 39	jmp $39062e	GETCHW          JML IGETCHW
.390050	5c 25 06 39	jmp $390625	GETCHE          JML IGETCHE
.390054	5c 8d 12 39	jmp $39128d	GETS            JML IGETS
.390058	5c 8e 12 39	jmp $39128e	GETLINE         JML IGETLINE
.39005c	5c 8f 12 39	jmp $39128f	GETFIELD        JML IGETFIELD
.390060	5c 90 12 39	jmp $391290	TRIM            JML ITRIM
.390064	5c 91 12 39	jmp $391291	PRINTC          JML IPRINTC
.390068	5c 92 12 39	jmp $391292	PRINTS          JML IPRINTS
.39006c	5c 97 07 39	jmp $390797	PRINTCR         JML IPRINTCR
.390070	5c 93 12 39	jmp $391293	PRINTF          JML IPRINTF
.390074	5c 94 12 39	jmp $391294	PRINTI          JML IPRINTI
.390078	5c da 08 39	jmp $3908da	PRINTH          JML IPRINTH
.39007c	5c 95 12 39	jmp $391295	PRINTAI         JML IPRINTAI
.390080	5c 96 12 39	jmp $391296	PRINTAH         JML IPRINTAH
.390084	5c 70 08 39	jmp $390870	LOCATE          JML ILOCATE
.390088	5c 97 12 39	jmp $391297	PUSHKEY         JML IPUSHKEY
.39008c	5c 98 12 39	jmp $391298	PUSHKEYS        JML IPUSHKEYS
.390090	5c cc 07 39	jmp $3907cc	CSRRIGHT        JML ICSRRIGHT
.390094	5c ff 07 39	jmp $3907ff	CSRLEFT         JML ICSRLEFT
.390098	5c 25 08 39	jmp $390825	CSRUP           JML ICSRUP
.39009c	5c 4b 08 39	jmp $39084b	CSRDOWN         JML ICSRDOWN
.3900a0	5c 99 12 39	jmp $391299	CSRHOME         JML ICSRHOME
.3900a4	5c b2 08 39	jmp $3908b2	SCROLLUP        JML ISCROLLUP
.3900a8	5c 08 09 39	jmp $390908	CLRSCREEN       JML ICLRSCREEN
.3900ac	5c 6f 09 39	jmp $39096f	INITCHLUT	    JML IINITCHLUT
.3900b0	5c 89 0c 39	jmp $390c89	INITSUPERIO	    JML IINITSUPERIO
.3900b4	5c 88 0d 39	jmp $390d88	INITKEYBOARD    JML IINITKEYBOARD
.3900b8	5c e4 0e 39	jmp $390ee4	TESTSID         JML ITESTSID
.3900bc	5c 68 0c 39	jmp $390c68	INITCURSOR      JML IINITCURSOR
.3900c0	5c 1e 0c 39	jmp $390c1e	INITFONTSET     JML IINITFONTSET
.3900c4	5c 9e 09 39	jmp $39099e	INITGAMMATABLE  JML IINITGAMMATABLE
.3900c8	5c be 09 39	jmp $3909be	INITALLLUT      JML IINITALLLUT
.3900cc	5c 80 0a 39	jmp $390a80	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3900d0	5c a9 0a 39	jmp $390aa9	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3900d4	5c e0 0a 39	jmp $390ae0	INITTILEMODE    JML IINITTILEMODE
.3900d8	5c e1 0a 39	jmp $390ae1	INITSPRITE      JML IINITSPRITE
.3900dc	5c d4 0f 39	jmp $390fd4	INITCODEC       JML IINITCODEC
.3900e0	5c 50 10 39	jmp $391050	RESETCODEC      JML IRESETCODEC
.3900e4	5c be 10 39	jmp $3910be	BMP_PARSER      JML IBMP_PARSER
.3900e8	5c 73 10 39	jmp $391073	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3900ec	5c cc a7 39	jmp $39a7cc	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390442	85 0c		sta $0c		                STA SCREENBEGIN
.390444	e2 20		sep #$20	                SEP #$20        ; set A short
.390446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390448	85 0e		sta $0e		                STA SCREENBEGIN+2
.39044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044f	85 17		sta $17		                STA CURSORPOS
.390451	e2 20		sep #$20	                SEP #$20        ; set A short
.390453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390455	85 19		sta $19		                STA CURSORPOS+2
.390457	a9 00		lda #$00	                LDA #$00
.390459	8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39045d	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39045f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390463	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390465	8f 00 f1 af	sta $aff100	                STA $AFF100
.390469	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39046b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046f	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390471	8f 00 f1 af	sta $aff100	                STA $AFF100
.390475	c2 30		rep #$30	                REP #$30        ; set A&X long
.390477	a2 48 00	ldx #$0048	                LDX #72
.39047a	86 0f		stx $0f		                STX COLS_VISIBLE
.39047c	a0 34 00	ldy #$0034	                LDY #52
.39047f	84 13		sty $13		                STY LINES_VISIBLE
.390481	a2 80 00	ldx #$0080	                LDX #128
.390484	86 11		stx $11		                STX COLS_PER_LINE
.390486	a0 40 00	ldy #$0040	                LDY #64
.390489	84 15		sty $15		                STY LINES_MAX
.39048b	22 dc 00 39	jsl $3900dc	                JSL INITCODEC
.39048f	22 b0 00 39	jsl $3900b0	                JSL INITSUPERIO
.390493	22 c4 00 39	jsl $3900c4	                JSL INITGAMMATABLE
.390497	22 c8 00 39	jsl $3900c8	                JSL INITALLLUT
.39049b	22 ac 00 39	jsl $3900ac	                JSL INITCHLUT
.39049f	22 49 0c 39	jsl $390c49	                JSL INITMOUSEPOINTER
.3904a3	22 bc 00 39	jsl $3900bc	                JSL INITCURSOR
.3904a7	22 cc 00 39	jsl $3900cc	                JSL INITVKYTXTMODE
.3904ab	22 1e 0c 39	jsl $390c1e	                JSL IINITFONTSET
.3904af	22 08 09 39	jsl $390908	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904b3	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904b6	22 e3 b9 39	jsl $39b9e3	                JSL UART_SELECT
.3904ba	22 4f ba 39	jsl $39ba4f	                JSL UART_INIT
.3904be	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904c1	22 e3 b9 39	jsl $39b9e3	                JSL UART_SELECT
.3904c5	22 4f ba 39	jsl $39ba4f	                JSL UART_INIT
.3904c9	a9 00 00	lda #$0000	                LDA #0
.3904cc	22 38 00 39	jsl $390038	                JSL SETIN
.3904d0	22 3c 00 39	jsl $39003c	                JSL SETOUT
.3904d4	c2 20		rep #$20	                REP #$20        ; set A long
.3904d6	a2 00 00	ldx #$0000	                LDX #0
.3904d9	a0 00 00	ldy #$0000	                LDY #0
.3904dc	22 70 08 39	jsl $390870	                JSL ILOCATE
.3904e0	22 37 09 39	jsl $390937	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3904e6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904e8					greet
.3904e8	48		pha		                PHA             ; begin setdbr macro
.3904e9	08		php		                PHP
.3904ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3904ec	a9 39		lda #$39	                LDA #`greet_msg
.3904ee	48		pha		                PHA
.3904ef	ab		plb		                PLB
.3904f0	28		plp		                PLP
.3904f1	68		pla		                PLA             ; end setdbr macro
.3904f2	a2 9c 12	ldx #$129c	                LDX #<>greet_msg
.3904f5	22 55 06 39	jsl $390655	                JSL IPRINT       ; print the first line
.3904f9	48		pha		                PHA             ; begin setdp macro
.3904fa	08		php		                PHP
.3904fb	c2 20		rep #$20	                REP #$20        ; set A long
.3904fd	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390500	5b		tcd		                TCD
.390501	28		plp		                PLP
.390502	68		pla		                PLA             ; end setdp macro
.390503	22 b4 00 39	jsl $3900b4	                JSL INITKEYBOARD ;
.390507	e2 20		sep #$20	                SEP #$20        ; set A short
.390509	c2 10		rep #$10	                REP #$10        ; set X long
.39050b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39050d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390511	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390513	8f 00 f1 af	sta $aff100	                STA $AFF100
.390517	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390519	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39051f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390523	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390525	8f 00 f1 af	sta $aff100	                STA $AFF100
.390529	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39052b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390531	8f 00 f1 af	sta $aff100	                STA $AFF100
.390535	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390538	22 1f b8 39	jsl $39b81f	          		 	JSL ILOOP_MS
.39053c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39053e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390542	a9 0f		lda #$0f	                LDA #$0F
.390544	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390548	a9 62		lda #$62	                LDA #$62
.39054a	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39054e	a9 08		lda #$08	                LDA #$08
.390550	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390554	a9 00		lda #$00	                LDA #$00
.390556	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.39055a	a9 08		lda #$08	                LDA #$08
.39055c	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI
.390560	a9 08		lda #$08	                LDA #$08
.390562	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390566	a9 c6		lda #$c6	                LDA #198
.390568	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39056c	a9 11		lda #$11	                LDA #$11
.39056e	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390572	a2 00 80	ldx #$8000	                LDX #32768      ; 100ms
.390575	22 1f b8 39	jsl $39b81f	    						JSL ILOOP_MS
.390579	a9 10		lda #$10	                LDA #$10
.39057b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39057f	a9 00		lda #$00	                LDA #$00
.390581	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.390585	a9 00		lda #$00	                LDA #$00
.390587	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.39058b	22 a1 b5 39	jsl $39b5a1	                JSL YM2151_test
.39058f	22 f4 b1 39	jsl $39b1f4	                JSL YM2612_test_piano
.390593	22 f4 b1 39	jsl $39b1f4	                JSL YM2612_test_piano
.390597	c2 30		rep #$30	                REP #$30        ; set A&X long
.390599	a2 1f 16	ldx #$161f	                LDX #<>ready_msg
.39059c	22 55 06 39	jsl $390655	                JSL IPRINT       ; print the first line
.3905a0	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.3905a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905a3	48		pha		                PHA             ; begin setdbr macro
.3905a4	08		php		                PHP
.3905a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3905a7	a9 39		lda #$39	                LDA #`greet_msg
.3905a9	48		pha		                PHA
.3905aa	ab		plb		                PLB
.3905ab	28		plp		                PLP
.3905ac	68		pla		                PLA             ; end setdbr macro
.3905ad	4c 0b 06	jmp $39060b	                JMP IREADYWAIT
.3905b0	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.3905b1					IBREAK
.3905b1	48		pha		                PHA             ; begin setdp macro
.3905b2	08		php		                PHP
.3905b3	c2 20		rep #$20	                REP #$20        ; set A long
.3905b5	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905b8	5b		tcd		                TCD
.3905b9	28		plp		                PLP
.3905ba	68		pla		                PLA             ; end setdp macro
.3905bb	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905bc	8f 48 02 00	sta $000248	                STA CPUY
.3905c0	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905c1	8f 46 02 00	sta $000246	                STA CPUX
.3905c5	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905c6	8f 44 02 00	sta $000244	                STA CPUA
.3905ca	68		pla		                PLA
.3905cb	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d1	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905d2	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905d6	68		pla		                PLA             ; Pull Flags (8 bits)
.3905d7	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905db	c2 20		rep #$20	                REP #$20        ; set A long
.3905dd	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905de	8f 40 02 00	sta $000240	                STA CPUPC
.3905e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3905e4	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905e5	8f 42 02 00	sta $000242	                STA CPUPBR
.3905e9	c2 20		rep #$20	                REP #$20        ; set A long
.3905eb	3b		tsc		                TSA             ; Get the stack
.3905ec	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905f0	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905f3	1b		tcs		                TAS
.3905f4	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.3905f8					IREADY
.3905f8	48		pha		                PHA             ; begin setdbr macro
.3905f9	08		php		                PHP
.3905fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3905fc	a9 39		lda #$39	                LDA #`ready_msg
.3905fe	48		pha		                PHA
.3905ff	ab		plb		                PLB
.390600	28		plp		                PLP
.390601	68		pla		                PLA             ; end setdbr macro
.390602	e2 20		sep #$20	                SEP #$20        ; set A short
.390604	a2 1f 16	ldx #$161f	                LDX #<>ready_msg
.390607	22 55 06 39	jsl $390655	                JSL IPRINT
.39060b					IREADYWAIT
.39060b	22 25 06 39	jsl $390625	                JSL IGETCHE
.39060f	80 fa		bra $39060b	                BRA IREADYWAIT
.390611	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390612	db		stp		IRETURN         STP
.390613	08		php		ISETIN          PHP
.390614	e2 20		sep #$20	                SEP #$20        ; set A short
.390616	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39061a	28		plp		                PLP
.39061b	6b		rtl		                RTL
.39061c	08		php		ISETOUT         PHP
.39061d	e2 20		sep #$20	                SEP #$20        ; set A short
.39061f	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390623	28		plp		                PLP
.390624	6b		rtl		                RTL
.390625	22 2e 06 39	jsl $39062e	IGETCHE         JSL IGETCHW
.390629	22 75 06 39	jsl $390675	                JSL IPUTC
.39062d	6b		rtl		                RTL
.39062e					IGETCHW
.39062e	08		php		                PHP
.39062f	e2 20		sep #$20	                SEP #$20        ; set A short
.390631	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390635	f0 17		beq $39064e	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390637	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390639	f0 09		beq $390644	                BEQ getc_uart       ; Yes: handle reading from the UART
.39063b	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39063d	f0 05		beq $390644	                BEQ getc_uart       ; Yes: handle reading from the UART
.39063f	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390641	28		plp		                PLP
.390642	38		sec		                SEC                 ; And return carry set
.390643	6b		rtl		                RTL
.390644	22 e3 b9 39	jsl $39b9e3	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390648	22 97 ba 39	jsl $39ba97	                JSL UART_GETC       ; Get the charater from the COM port
.39064c	80 04		bra $390652	                BRA done
.39064e	22 b4 b9 39	jsl $39b9b4	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390652	28		plp		done            PLP
.390653	18		clc		                CLC                 ; Return carry clear for valid data
.390654	6b		rtl		                RTL
.390655	22 5e 06 39	jsl $39065e	IPRINT          JSL IPUTS
.390659	22 97 07 39	jsl $390797	                JSL IPRINTCR
.39065d	6b		rtl		                RTL
.39065e	48		pha		IPUTS           PHA
.39065f	08		php		                PHP
.390660	e2 20		sep #$20	                SEP #$20        ; set A short
.390662	c2 10		rep #$10	                REP #$10        ; set X long
.390664	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390667	f0 08		beq $390671	                BEQ iputs_done
.390669	22 75 06 39	jsl $390675	iputs2          JSL IPUTC
.39066d	e8		inx		iputs3          INX
.39066e	4c 64 06	jmp $390664	                JMP iputs1
.390671	e8		inx		iputs_done      INX
.390672	28		plp		                PLP
.390673	68		pla		                PLA
.390674	6b		rtl		                RTL
.390675					IPUTC
.390675	da		phx		                PHX
.390676	5a		phy		                PHY
.390677	0b		phd		                PHD
.390678	8b		phb		                PHB
.390679	08		php		                PHP                 ; stash the flags (we'll be changing M)
.39067a	48		pha		                PHA             ; begin setdp macro
.39067b	08		php		                PHP
.39067c	c2 20		rep #$20	                REP #$20        ; set A long
.39067e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390681	5b		tcd		                TCD
.390682	28		plp		                PLP
.390683	68		pla		                PLA             ; end setdp macro
.390684	48		pha		                PHA             ; begin setdbr macro
.390685	08		php		                PHP
.390686	e2 20		sep #$20	                SEP #$20        ; set A short
.390688	a9 00		lda #$00	                LDA #0
.39068a	48		pha		                PHA
.39068b	ab		plb		                PLB
.39068c	28		plp		                PLP
.39068d	68		pla		                PLA             ; end setdbr macro
.39068e	e2 20		sep #$20	                SEP #$20        ; set A short
.390690	c2 10		rep #$10	                REP #$10        ; set X long
.390692	48		pha		                PHA                 ; Save the character to print
.390693	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390697	f0 16		beq $3906af	                BEQ putc_screen     ; If it's 0: print to the screen
.390699	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39069b	f0 07		beq $3906a4	                BEQ putc_uart       ; Yes: handle printing to the UART
.39069d	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39069f	f0 03		beq $3906a4	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906a1	68		pla		                PLA                 ; Otherwise, just exit
.3906a2	80 4b		bra $3906ef	                BRA done
.3906a4	22 e3 b9 39	jsl $39b9e3	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3906a8	68		pla		                PLA                 ; Recover the character to send
.3906a9	22 b8 ba 39	jsl $39bab8	                JSL UART_PUTC       ; Send the character
.3906ad	80 40		bra $3906ef	                BRA done
.3906af	68		pla		putc_screen     PLA                 ; Get the character to print
.3906b0	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906b2	f0 5d		beq $390711	                BEQ go_down
.3906b4	c9 20		cmp #$20	                CMP #$20
.3906b6	90 19		bcc $3906d1	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906b8	c9 7f		cmp #$7f	                CMP #$7F
.3906ba	f0 39		beq $3906f5	                BEQ do_del
.3906bc	b0 02		bcs $3906c0	                BCS check_A0        ; [$20..$7E]: print it
.3906be	80 29		bra $3906e9	                BRA printc
.3906c0	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3906c2	90 02		bcc $3906c6	                BCC check_ctrl1
.3906c4	80 23		bra $3906e9	                BRA printc          ; [$A0..$FF]: print it
.3906c6	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906c8	f0 47		beq $390711	                BEQ go_down         ; ... move the cursor down one row
.3906ca	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906cc	f0 55		beq $390723	                BEQ go_left         ; ... move the cursor left one column
.3906ce	4c ef 06	jmp $3906ef	                JMP done
.3906d1	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906d3	f0 54		beq $390729	                BEQ do_TAB          ; ... move to the next TAB stop
.3906d5	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906d7	f0 28		beq $390701	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906d9	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906db	f0 2e		beq $39070b	                BEQ do_cr           ; ... move cursor down and to the first column
.3906dd	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906df	f0 36		beq $390717	                BEQ go_up           ; ... move the cursor up one row
.3906e1	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906e3	f0 38		beq $39071d	                BEQ go_right        ; ... move the cursor right one column
.3906e5	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906e7	f0 12		beq $3906fb	                BEQ do_ins          ; ... insert a space
.3906e9	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906eb	22 cc 07 39	jsl $3907cc	                JSL ICSRRIGHT
.3906ef	28		plp		done            PLP
.3906f0	ab		plb		                PLB
.3906f1	2b		pld		                PLD
.3906f2	7a		ply		                PLY
.3906f3	fa		plx		                PLX
.3906f4	6b		rtl		                RTL
.3906f5	22 50 07 39	jsl $390750	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906f9	80 f4		bra $3906ef	                BRA done
.3906fb	22 73 07 39	jsl $390773	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906ff	80 ee		bra $3906ef	                BRA done
.390701	22 ff 07 39	jsl $3907ff	backspace       JSL ICSRLEFT
.390705	22 50 07 39	jsl $390750	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390709	80 e4		bra $3906ef	                BRA done
.39070b	22 97 07 39	jsl $390797	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39070f	80 de		bra $3906ef	                BRA done
.390711	22 4b 08 39	jsl $39084b	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390715	80 d8		bra $3906ef	                BRA done
.390717	22 25 08 39	jsl $390825	go_up           JSL ICSRUP          ; Move the cursor up one line
.39071b	80 d2		bra $3906ef	                BRA done
.39071d	22 cc 07 39	jsl $3907cc	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390721	80 cc		bra $3906ef	                BRA done
.390723	22 ff 07 39	jsl $3907ff	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390727	80 c6		bra $3906ef	                BRA done
.390729					do_TAB
.390729	c2 20		rep #$20	                REP #$20        ; set A long
.39072b	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39072d	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390730	18		clc		                CLC
.390731	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390734	aa		tax		                TAX
.390735	a4 1c		ldy $1c		                LDY CURSORY
.390737	e2 20		sep #$20	                SEP #$20        ; set A short
.390739	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39073b	90 04		bcc $390741	                BCC check_row       ; Yes: check the row
.39073d	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390740	c8		iny		                INY                 ; ... and the next row
.390741	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390743	90 05		bcc $39074a	                BCC do_locate       ; Yes: reposition the cursor
.390745	22 b2 08 39	jsl $3908b2	                JSL ISCROLLUP       ; No: scroll the screen
.390749	88		dey		                DEY                 ; And set the row to the last one
.39074a	22 70 08 39	jsl $390870	do_locate       JSL ILOCATE         ; Set the cursor position
.39074e	80 9f		bra $3906ef	                BRA done
.390750	da		phx		SCRSHIFTLL      PHX
.390751	5a		phy		                PHY
.390752	48		pha		                PHA
.390753	08		php		                PHP
.390754	48		pha		                PHA             ; begin setdp macro
.390755	08		php		                PHP
.390756	c2 20		rep #$20	                REP #$20        ; set A long
.390758	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39075b	5b		tcd		                TCD
.39075c	28		plp		                PLP
.39075d	68		pla		                PLA             ; end setdp macro
.39075e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390760	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390762	a8		tay		                TAY                 ; Set it as the destination
.390763	aa		tax		                TAX
.390764	e8		inx		                INX                 ; And set the next cell as the source
.390765	38		sec		                SEC                 ; Calculate the length of the block to move
.390766	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390769	e5 1a		sbc $1a		                SBC CURSORX
.39076b	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39076e	28		plp		                PLP
.39076f	68		pla		                PLA
.390770	7a		ply		                PLY
.390771	fa		plx		                PLX
.390772	6b		rtl		                RTL
.390773	da		phx		SCRSHIFTLR      PHX
.390774	48		pha		                PHA
.390775	08		php		                PHP
.390776	c2 30		rep #$30	                REP #$30        ; set A&X long
.390778	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39077a	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.39077d	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390780	a8		tay		                TAY                 ; And set that as the destination address
.390781	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390782	aa		tax		                TAX                 ; And make it the source
.390783	38		sec		                SEC                 ; Calculate the length of the block to move
.390784	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390787	e5 1a		sbc $1a		                SBC CURSORX
.390789	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39078c	e2 20		sep #$20	                SEP #$20        ; set A short
.39078e	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390790	87 17		sta [$17]	                STA [CURSORPOS]
.390792	28		plp		                PLP
.390793	68		pla		                PLA
.390794	fa		plx		                PLX
.390795	6b		rtl		                RTL
.390796					IPUTB
.390796	6b		rtl		                RTL
.390797					IPRINTCR
.390797	da		phx		                PHX
.390798	5a		phy		                PHY
.390799	08		php		                PHP
.39079a	e2 20		sep #$20	                SEP #$20        ; set A short
.39079c	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907a0	f0 1c		beq $3907be	                BEQ scr_printcr
.3907a2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907a4	f0 06		beq $3907ac	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907a6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907a8	f0 02		beq $3907ac	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907aa	80 1c		bra $3907c8	                BRA done
.3907ac	22 e3 b9 39	jsl $39b9e3	uart_printcr    JSL UART_SELECT
.3907b0	a9 0d		lda #$0d	                LDA #CHAR_CR
.3907b2	22 75 06 39	jsl $390675	                JSL IPUTC
.3907b6	a9 0a		lda #$0a	                LDA #CHAR_LF
.3907b8	22 75 06 39	jsl $390675	                JSL IPUTC
.3907bc	80 0a		bra $3907c8	                BRA done
.3907be	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907c1	a4 1c		ldy $1c		                LDY CURSORY
.3907c3	c8		iny		                INY
.3907c4	22 70 08 39	jsl $390870	                JSL ILOCATE
.3907c8	28		plp		done            PLP
.3907c9	7a		ply		                PLY
.3907ca	fa		plx		                PLX
.3907cb	6b		rtl		                RTL
.3907cc	da		phx		ICSRRIGHT       PHX
.3907cd	5a		phy		                PHY
.3907ce	48		pha		                PHA
.3907cf	0b		phd		                PHD
.3907d0	08		php		                PHP
.3907d1	c2 20		rep #$20	                REP #$20        ; set A long
.3907d3	c2 10		rep #$10	                REP #$10        ; set X long
.3907d5	48		pha		                PHA             ; begin setdp macro
.3907d6	08		php		                PHP
.3907d7	c2 20		rep #$20	                REP #$20        ; set A long
.3907d9	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907dc	5b		tcd		                TCD
.3907dd	28		plp		                PLP
.3907de	68		pla		                PLA             ; end setdp macro
.3907df	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907e1	e8		inx		                INX
.3907e2	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907e4	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3907e6	90 0d		bcc $3907f5	                BCC icsrright_nowrap  ; No: just set the position
.3907e8	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907eb	c8		iny		                INY                   ; And move to the next row
.3907ec	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907ee	90 05		bcc $3907f5	                BCC icsrright_nowrap  ; No: just set the position
.3907f0	88		dey		                DEY                   ; Yes: lock to the last row
.3907f1	22 b2 08 39	jsl $3908b2	                JSL ISCROLLUP         ; But scroll the screen up
.3907f5					icsrright_nowrap
.3907f5	22 70 08 39	jsl $390870	                JSL ILOCATE           ; Set the cursor position
.3907f9	28		plp		                PLP
.3907fa	2b		pld		                PLD
.3907fb	68		pla		                PLA
.3907fc	7a		ply		                PLY
.3907fd	fa		plx		                PLX
.3907fe	6b		rtl		                RTL
.3907ff					ICSRLEFT
.3907ff	da		phx		                PHX
.390800	5a		phy		                PHY
.390801	48		pha		                PHA
.390802	0b		phd		                PHD
.390803	08		php		                PHP
.390804	c2 30		rep #$30	                REP #$30        ; set A&X long
.390806	48		pha		                PHA             ; begin setdp macro
.390807	08		php		                PHP
.390808	c2 20		rep #$20	                REP #$20        ; set A long
.39080a	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39080d	5b		tcd		                TCD
.39080e	28		plp		                PLP
.39080f	68		pla		                PLA             ; end setdp macro
.390810	a5 1a		lda $1a		                LDA CURSORX
.390812	f0 0b		beq $39081f	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390814	a6 1a		ldx $1a		                LDX CURSORX
.390816	ca		dex		                DEX
.390817	86 1a		stx $1a		                STX CURSORX
.390819	a4 1c		ldy $1c		                LDY CURSORY
.39081b	22 70 08 39	jsl $390870	                JSL ILOCATE
.39081f					icsrleft_done_already_zero
.39081f	28		plp		                PLP
.390820	2b		pld		                PLD
.390821	68		pla		                PLA
.390822	7a		ply		                PLY
.390823	fa		plx		                PLX
.390824	6b		rtl		                RTL
.390825					ICSRUP
.390825	da		phx		                PHX
.390826	5a		phy		                PHY
.390827	48		pha		                PHA
.390828	0b		phd		                PHD
.390829	08		php		                PHP
.39082a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39082c	48		pha		                PHA             ; begin setdp macro
.39082d	08		php		                PHP
.39082e	c2 20		rep #$20	                REP #$20        ; set A long
.390830	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390833	5b		tcd		                TCD
.390834	28		plp		                PLP
.390835	68		pla		                PLA             ; end setdp macro
.390836	a5 1c		lda $1c		                LDA CURSORY
.390838	f0 0b		beq $390845	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.39083a	a4 1c		ldy $1c		                LDY CURSORY
.39083c	88		dey		                DEY
.39083d	84 1c		sty $1c		                STY CURSORY
.39083f	a6 1a		ldx $1a		                LDX CURSORX
.390841	22 70 08 39	jsl $390870	                JSL ILOCATE
.390845					isrup_done_already_zero
.390845	28		plp		                PLP
.390846	2b		pld		                PLD
.390847	68		pla		                PLA
.390848	7a		ply		                PLY
.390849	fa		plx		                PLX
.39084a	6b		rtl		                RTL
.39084b	da		phx		ICSRDOWN        PHX
.39084c	5a		phy		                PHY
.39084d	0b		phd		                PHD
.39084e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390850	48		pha		                PHA             ; begin setdp macro
.390851	08		php		                PHP
.390852	c2 20		rep #$20	                REP #$20        ; set A long
.390854	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390857	5b		tcd		                TCD
.390858	28		plp		                PLP
.390859	68		pla		                PLA             ; end setdp macro
.39085a	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.39085c	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.39085e	c8		iny		                INY
.39085f	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390861	90 05		bcc $390868	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390863	88		dey		                DEY                         ; Yes: go back to the last row
.390864	22 b2 08 39	jsl $3908b2	                JSL ISCROLLUP               ; But scroll the screen up
.390868					icsrdown_noscroll
.390868	22 70 08 39	jsl $390870	                JSL ILOCATE                 ; And set the cursor position
.39086c	2b		pld		                PLD
.39086d	7a		ply		                PLY
.39086e	fa		plx		                PLX
.39086f	6b		rtl		                RTL
.390870	48		pha		ILOCATE         PHA
.390871	0b		phd		                PHD
.390872	08		php		                PHP
.390873	48		pha		                PHA             ; begin setdp macro
.390874	08		php		                PHP
.390875	c2 20		rep #$20	                REP #$20        ; set A long
.390877	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39087a	5b		tcd		                TCD
.39087b	28		plp		                PLP
.39087c	68		pla		                PLA             ; end setdp macro
.39087d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39087f					ilocate_scroll
.39087f	c4 13		cpy $13		                CPY LINES_VISIBLE
.390881	90 07		bcc $39088a	                BCC ilocate_scrolldone
.390883	22 b2 08 39	jsl $3908b2	                JSL ISCROLLUP
.390887	88		dey		                DEY
.390888	80 f5		bra $39087f	                BRA ilocate_scroll
.39088a					ilocate_scrolldone
.39088a	86 1a		stx $1a		                STX CURSORX
.39088c	84 1c		sty $1c		                STY CURSORY
.39088e	a5 0c		lda $0c		                LDA SCREENBEGIN
.390890					ilocate_row
.390890	c0 00 00	cpy #$0000	                CPY #$0
.390893	f0 08		beq $39089d	                BEQ ilocate_right
.390895	18		clc		ilocate_down    CLC
.390896	65 11		adc $11		                ADC COLS_PER_LINE
.390898	88		dey		                DEY
.390899	f0 02		beq $39089d	                BEQ ilocate_right
.39089b	80 f8		bra $390895	                BRA ilocate_down
.39089d	18		clc		ilocate_right   CLC
.39089e	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.3908a0	85 17		sta $17		                STA CURSORPOS
.3908a2	a4 1c		ldy $1c		                LDY CURSORY
.3908a4	98		tya		                TYA
.3908a5	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.3908a9	8a		txa		                TXA
.3908aa	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3908ae	28		plp		ilocate_done    PLP
.3908af	2b		pld		                PLD
.3908b0	68		pla		                PLA
.3908b1	6b		rtl		                RTL
.3908b2					ISCROLLUP
.3908b2	48		pha		                PHA
.3908b3	da		phx		                PHX
.3908b4	5a		phy		                PHY
.3908b5	8b		phb		                PHB
.3908b6	08		php		                PHP
.3908b7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b9	18		clc		                CLC
.3908ba	a0 00 a0	ldy #$a000	                LDY #$A000
.3908bd	a2 80 a0	ldx #$a080	                LDX #$A080
.3908c0	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908c3	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908c6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908c8	a0 00 c0	ldy #$c000	                LDY #$C000
.3908cb	a2 80 c0	ldx #$c080	                LDX #$C080
.3908ce	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908d1	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908d4	28		plp		                PLP
.3908d5	ab		plb		                PLB
.3908d6	7a		ply		                PLY
.3908d7	fa		plx		                PLX
.3908d8	68		pla		                PLA
.3908d9	6b		rtl		                RTL
.3908da	08		php		IPRINTH         PHP
.3908db	48		pha		                PHA
.3908dc					iprinth1
.3908dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3908de	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908e1	4a		lsr a		                LSR
.3908e2	4a		lsr a		                LSR
.3908e3	4a		lsr a		                LSR
.3908e4	4a		lsr a		                LSR
.3908e5	22 f7 08 39	jsl $3908f7	                JSL iprint_digit
.3908e9	bd 00 00	lda $0000,x	                LDA #0,b,x
.3908ec	22 f7 08 39	jsl $3908f7	                JSL iprint_digit
.3908f0	ca		dex		                DEX
.3908f1	88		dey		                DEY
.3908f2	d0 e8		bne $3908dc	                BNE iprinth1
.3908f4	68		pla		                PLA
.3908f5	28		plp		                PLP
.3908f6	6b		rtl		                RTL
.3908f7	da		phx		iprint_digit    PHX
.3908f8	c2 20		rep #$20	                REP #$20        ; set A long
.3908fa	29 0f 00	and #$000f	                AND #$0F
.3908fd	aa		tax		                TAX
.3908fe	bf a9 16 39	lda $3916a9,x	                LDA hex_digits,X
.390902	22 75 06 39	jsl $390675	                JSL IPUTC       ; Print the digit
.390906	fa		plx		                PLX
.390907	6b		rtl		                RTL
.390908	0b		phd		ICLRSCREEN	    PHD
.390909	08		php		                PHP
.39090a	48		pha		                PHA
.39090b	da		phx		                PHX
.39090c	e2 20		sep #$20	                SEP #$20        ; set A short
.39090e	c2 10		rep #$10	                REP #$10        ; set X long
.390910	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.390913	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.390915	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390919	e8		inx		                inx
.39091a	e0 00 20	cpx #$2000	                cpx #$2000
.39091d	d0 f6		bne $390915	                bne iclearloop0
.39091f	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.390922	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.390924	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390928	e8		inx		                inx
.390929	e0 00 20	cpx #$2000	                cpx #$2000
.39092c	d0 f6		bne $390924	                bne iclearloop1
.39092e	c2 10		rep #$10	                REP #$10        ; set X long
.390930	c2 20		rep #$20	                REP #$20        ; set A long
.390932	fa		plx		                PLX
.390933	68		pla		                PLA
.390934	28		plp		                PLP
.390935	2b		pld		                PLD
.390936	6b		rtl		                RTL
.390937	48		pha		ICOLORFLAG      PHA
.390938	da		phx		                PHX
.390939	08		php		                PHP
.39093a	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39093c	a2 00		ldx #$00	                LDX #$00
.39093e	bf d1 13 39	lda $3913d1,x	iclearloop2	    LDA @lgreet_clr_line1,x
.390942	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390946	bf fb 13 39	lda $3913fb,x	                LDA @lgreet_clr_line2,x
.39094a	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.39094e	bf 25 14 39	lda $391425,x	                LDA @lgreet_clr_line3,x
.390952	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390956	bf 4f 14 39	lda $39144f,x	                LDA @lgreet_clr_line4,x
.39095a	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.39095e	bf 79 14 39	lda $391479,x	                LDA @lgreet_clr_line5,x
.390962	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390966	e8		inx		                inx
.390967	e0 2a		cpx #$2a	                cpx #42
.390969	d0 d3		bne $39093e	                bne iclearloop2
.39096b	28		plp		                PLP
.39096c	fa		plx		                PLX
.39096d	68		pla		                PLA
.39096e	6b		rtl		                RTL
.39096f	0b		phd		IINITCHLUT		  PHD
.390970	08		php		                PHP
.390971	48		pha		                PHA
.390972	da		phx		                PHX
.390973	e2 20		sep #$20	                SEP #$20        ; set A short
.390975	e2 10		sep #$10	                SEP #$10        ; set X short
.390977	a2 00		ldx #$00					        LDX	#$00
.390979	bf a3 14 39	lda $3914a3,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.39097d	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390981	e8		inx		                inx
.390982	e0 40		cpx #$40	                cpx #$40
.390984	d0 f3		bne $390979	                bne lutinitloop0
.390986	a2 00		ldx #$00	                LDX	#$00
.390988	bf e3 14 39	lda $3914e3,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.39098c	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390990	e8		inx		                INX
.390991	e0 40		cpx #$40	                CPX #$40
.390993	d0 f3		bne $390988	                bne lutinitloop1
.390995	c2 20		rep #$20	                REP #$20        ; set A long
.390997	c2 10		rep #$10	                REP #$10        ; set X long
.390999	fa		plx		                PLX
.39099a	68		pla		                PLA
.39099b	28		plp		                PLP
.39099c	2b		pld		                PLD
.39099d	6b		rtl		                RTL
.39099e					IINITGAMMATABLE
.39099e	e2 20		sep #$20	                SEP #$20        ; set A short
.3909a0	c2 10		rep #$10	                REP #$10        ; set X long
.3909a2	a2 00 00	ldx #$0000	                ldx #$0000
.3909a5	bf 00 1b 39	lda $391b00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909a9	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909ad	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909b1	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909b5	e8		inx		                inx
.3909b6	e0 00 01	cpx #$0100	                cpx #$0100
.3909b9	d0 ea		bne $3909a5	                bne initgammaloop
.3909bb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909bd	6b		rtl		                RTL
.3909be	48		pha		IINITALLLUT     PHA
.3909bf	da		phx		                PHX
.3909c0	a2 00 00	ldx #$0000	                LDX #$0000
.3909c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3909c5	a9 00		lda #$00	                LDA #$00
.3909c7	85 0a		sta $0a		                STA $0A     ; Temp Location
.3909c9					iinit_lut_loop
.3909c9	86 02		stx $02		                STX $02
.3909cb	a6 0a		ldx $0a		                LDX $0A
.3909cd	bf 00 1a 39	lda $391a00,x	                LDA GAMMA_2_2_Tbl, x
.3909d1	49 55		eor #$55	                EOR  #$55
.3909d3	a6 02		ldx $02		                LDX $02
.3909d5	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909d9	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909dd	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909e1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909e5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909e9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909ed	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909f1	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909f5	e8		inx		                inx
.3909f6	86 02		stx $02		                STX $02
.3909f8	a6 0a		ldx $0a		                LDX $0A
.3909fa	bf 00 1c 39	lda $391c00,x	                LDA RANDOM_LUT_Tbl, x
.3909fe	a6 02		ldx $02		                LDX $02
.390a00	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a04	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a08	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a0c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a10	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a14	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a18	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a1c	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a20	e8		inx		                inx
.390a21	86 02		stx $02		                STX $02
.390a23	a6 0a		ldx $0a		                LDX $0A
.390a25	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_1_8_Tbl, x
.390a29	49 aa		eor #$aa	                EOR  #$AA
.390a2b	a6 02		ldx $02		                LDX $02
.390a2d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a31	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a35	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a39	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a3d	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a41	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a45	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a49	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a4d	e8		inx		                inx
.390a4e	a9 ff		lda #$ff	                LDA #$FF
.390a50	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a54	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a58	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a5c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a60	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a64	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a68	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a6c	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a70	e6 0a		inc $0a		                inc $0A
.390a72	e8		inx		                inx
.390a73	e0 00 04	cpx #$0400	                cpx #$0400
.390a76	f0 03		beq $390a7b	                beq iinit_lut_exit
.390a78	82 4e ff	brl $3909c9	                brl iinit_lut_loop
.390a7b					iinit_lut_exit
.390a7b	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a7d	fa		plx		                PLX
.390a7e	68		pla		                PLA
.390a7f	6b		rtl		                RTL
.390a80	48		pha		IINITVKYTXTMODE PHA
.390a81	e2 20		sep #$20	                SEP #$20        ; set A short
.390a83	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390a85	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390a89	a9 20		lda #$20	                LDA #$20
.390a8b	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390a8f	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390a93	a9 00		lda #$00	                LDA #$00
.390a95	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390a99	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390a9b	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390a9f	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390aa1	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390aa5	c2 30		rep #$30	                REP #$30        ; set A&X long
.390aa7	68		pla		                PLA
.390aa8	6b		rtl		                RTL
.390aa9					IINITVKYGRPMODE
.390aa9	48		pha		                PHA
.390aaa	e2 20		sep #$20	                SEP #$20        ; set A short
.390aac	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390aae	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390ab2	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ab4	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390ab8	a9 c0		lda #$c0	                LDA #$C0
.390aba	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390abe	a9 00		lda #$00	                LDA #$00
.390ac0	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390ac4	a9 80		lda #$80	                LDA #$80
.390ac6	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390aca	a9 02		lda #$02	                LDA #$02
.390acc	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390ad0	a9 e0		lda #$e0	                LDA #$E0
.390ad2	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390ad6	a9 01		lda #$01	                LDA #$01
.390ad8	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390adc	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ade	68		pla		                PLA
.390adf	6b		rtl		                RTL
.390ae0					IINITTILEMODE
.390ae0	6b		rtl		                RTL
.390ae1	48		pha		IINITSPRITE     PHA
.390ae2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ae4	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390ae6	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390aea	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390aee	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390af2	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390af6	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390afa	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390afe	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b02	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b06	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b0a	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b0e	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b12	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b16	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b1a	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b1e	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b22	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b26	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b2a	a9 09		lda #$09	                LDA #$09
.390b2c	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b30	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b34	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b38	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b3c	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b40	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b44	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b48	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b4c	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b50	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b54	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390b58	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390b5c	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390b60	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390b64	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390b68	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390b6c	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390b70	a9 00		lda #$00	                LDA #$00
.390b72	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390b76	a9 04		lda #$04	                LDA #$04
.390b78	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390b7c	a9 08		lda #$08	                LDA #$08
.390b7e	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390b82	a9 0c		lda #$0c	                LDA #$0C
.390b84	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390b88	a9 10		lda #$10	                LDA #$10
.390b8a	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390b8e	a9 14		lda #$14	                LDA #$14
.390b90	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390b94	a9 18		lda #$18	                LDA #$18
.390b96	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390b9a	a9 1c		lda #$1c	                LDA #$1C
.390b9c	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390ba0	a9 20		lda #$20	                LDA #$20
.390ba2	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390ba6	a9 24		lda #$24	                LDA #$24
.390ba8	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390bac	a9 28		lda #$28	                LDA #$28
.390bae	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390bb2	a9 2c		lda #$2c	                LDA #$2C
.390bb4	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390bb8	a9 30		lda #$30	                LDA #$30
.390bba	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390bbe	a9 34		lda #$34	                LDA #$34
.390bc0	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390bc4	a9 38		lda #$38	                LDA #$38
.390bc6	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390bca	a9 3c		lda #$3c	                LDA #$3C
.390bcc	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390bd0	a9 40		lda #$40	                LDA #$40
.390bd2	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390bd6	a9 00		lda #$00	                LDA #$00
.390bd8	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390bdc	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390be0	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390be4	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390be8	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390bec	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390bf0	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390bf4	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390bf8	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390bfc	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c00	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c04	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c08	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c0c	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c10	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c14	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c18	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c1c	68		pla		                PLA
.390c1d	6b		rtl		                RTL
.390c1e					IINITFONTSET
.390c1e	e2 20		sep #$20	                SEP #$20        ; set A short
.390c20	c2 10		rep #$10	                REP #$10        ; set X long
.390c22	a2 00 00	ldx #$0000	                LDX #$0000
.390c25					initFontsetbranch0
.390c25	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c29	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c2d	e8		inx		                INX
.390c2e	e0 00 08	cpx #$0800	                CPX #$0800
.390c31	d0 f2		bne $390c25	                BNE initFontsetbranch0
.390c33	ea		nop		                NOP
.390c34	a2 00 00	ldx #$0000	                LDX #$0000
.390c37					initFontsetbranch1
.390c37	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c3b	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c3f	e8		inx		                INX
.390c40	e0 00 08	cpx #$0800	                CPX #$0800
.390c43	d0 f2		bne $390c37	                BNE initFontsetbranch1
.390c45	ea		nop		                NOP
.390c46	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c48	6b		rtl		                RTL
.390c49					INITMOUSEPOINTER
.390c49	e2 20		sep #$20	                SEP #$20        ; set A short
.390c4b	c2 10		rep #$10	                REP #$10        ; set X long
.390c4d	a2 00 00	ldx #$0000	                LDX #$0000
.390c50					FILL_MOUSE_MARKER
.390c50	bf 00 1d 39	lda $391d00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c54	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c58	e8		inx		                INX
.390c59	e0 00 01	cpx #$0100	                CPX #$0100
.390c5c	d0 f2		bne $390c50	                BNE FILL_MOUSE_MARKER
.390c5e	ea		nop		                nop
.390c5f	a9 01		lda #$01	                LDA #$01
.390c61	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c65	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c67	6b		rtl		                RTL
.390c68	48		pha		IINITCURSOR     PHA
.390c69	e2 20		sep #$20	                SEP #$20        ; set A short
.390c6b	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c6d	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390c71	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390c73	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390c77	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c79	a9 00 00	lda #$0000	                LDA #$0000;
.390c7c	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390c80	a9 06 00	lda #$0006	                LDA #$0006;
.390c83	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390c87	68		pla		                PLA
.390c88	6b		rtl		                RTL
.390c89	0b		phd		IINITSUPERIO	  PHD
.390c8a	08		php		                PHP
.390c8b	48		pha		                PHA
.390c8c	e2 20		sep #$20	                SEP #$20        ; set A short
.390c8e	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c90	8f 23 11 af	sta $af1123	                STA GP10_REG
.390c94	af 23 11 af	lda $af1123	                LDA GP10_REG
.390c98	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c9a	8f 24 11 af	sta $af1124	                STA GP11_REG
.390c9e	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ca0	8f 25 11 af	sta $af1125	                STA GP12_REG
.390ca4	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ca6	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390caa	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390cac	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390cb0	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390cb2	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390cb6	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390cb8	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390cbc	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390cbe	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390cc2	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390cc4	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390cc8	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cca	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390cce	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390cd0	8f 30 11 af	sta $af1130					        STA GP25_REG
.390cd4	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390cd6	8f 31 11 af	sta $af1131					        STA GP26_REG
.390cda	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390cdc	8f 33 11 af	sta $af1133					        STA GP30_REG
.390ce0	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390ce2	8f 34 11 af	sta $af1134					        STA GP31_REG
.390ce6	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390ce8	8f 35 11 af	sta $af1135					        STA GP32_REG
.390cec	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390cee	8f 36 11 af	sta $af1136					        STA GP33_REG
.390cf2	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390cf4	8f 37 11 af	sta $af1137					        STA GP34_REG
.390cf8	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390cfa	8f 38 11 af	sta $af1138					        STA GP35_REG
.390cfe	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d00	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d04	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d06	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d0a	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d0c	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d10	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d12	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d16	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d18	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d1c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d1e	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d22	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d24	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d28	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d2a	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d2e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d30	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d34	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d36	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d3a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d3c	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d40	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d42	8f 46 11 af	sta $af1146					        STA GP57_REG
.390d46	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d48	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d4c	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d4e	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d52	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d54	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390d58	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d5a	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390d5e	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d60	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390d64	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d66	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390d6a	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d6c	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390d70	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390d72	8f 50 11 af	sta $af1150					        STA GP6_REG
.390d76	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390d78	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390d7c	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390d7e	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390d82	c2 20		rep #$20	                REP #$20        ; set A long
.390d84	68		pla		                PLA
.390d85	28		plp						        PLP
.390d86	2b		pld					        	PLD
.390d87	6b		rtl		                RTL
.390d88	0b		phd		IINITKEYBOARD	  PHD
.390d89	08		php						        PHP
.390d8a	48		pha						        PHA
.390d8b	da		phx						        PHX
.390d8c	e2 20		sep #$20	                SEP #$20        ; set A short
.390d8e	c2 10		rep #$10	                REP #$10        ; set X long
.390d90	18		clc		                CLC
.390d91	20 41 0e	jsr $390e41	                JSR Poll_Inbuf ;
.390d94	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390d96	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390d9a	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390d9d	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390da1	c9 55		cmp #$55					        CMP #$55
.390da3	f0 03		beq $390da8					        BEQ	passAAtest
.390da5	82 89 00	brl $390e31	                BRL initkb_loop_out
.390da8					passAAtest
.390da8	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390daa	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390dae	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390db1	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390db5	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390db7	f0 03		beq $390dbc					        BEQ	passABtest
.390db9	82 75 00	brl $390e31	                BRL initkb_loop_out
.390dbc					passABtest
.390dbc	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390dbe	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390dc2	20 41 0e	jsr $390e41	                JSR Poll_Inbuf ;
.390dc5	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390dc7	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390dcb	20 41 0e	jsr $390e41	                JSR Poll_Inbuf ;
.390dce	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390dd0	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390dd4	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390dd7	ca		dex		DLY_LOOP1       DEX
.390dd8	ea		nop		                NOP
.390dd9	ea		nop		                NOP
.390dda	ea		nop		                NOP
.390ddb	ea		nop		                NOP
.390ddc	ea		nop		                NOP
.390ddd	ea		nop		                NOP
.390dde	ea		nop		                NOP
.390ddf	ea		nop		                NOP
.390de0	e0 00 00	cpx #$0000	                CPX #$0000
.390de3	d0 f2		bne $390dd7	                BNE DLY_LOOP1
.390de5	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390de8	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390dec					DO_CMD_F4_AGAIN
.390dec	20 41 0e	jsr $390e41	                JSR Poll_Inbuf ;
.390def	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390df1	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390df5	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390df8	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390dfc	c9 fa		cmp #$fa	                CMP #$FA
.390dfe	d0 ec		bne $390dec	                BNE DO_CMD_F4_AGAIN
.390e00	20 57 0e	jsr $390e57	                JSR INIT_MOUSE
.390e03	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e07	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e09	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e0d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e11	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e13	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e17	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e1b	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e1d	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e21	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e25	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e27	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e2b	a2 9f 15	ldx #$159f	                LDX #<>Success_kb_init
.390e2e	38		sec		                SEC
.390e2f	b0 03		bcs $390e34	                BCS InitSuccess
.390e31	a2 b1 15	ldx #$15b1	initkb_loop_out LDX #<>Failed_kb_init
.390e34	22 55 06 39	jsl $390655	InitSuccess     JSL IPRINT       ; print Message
.390e38	c2 20		rep #$20	                REP #$20        ; set A long
.390e3a	c2 10		rep #$10	                REP #$10        ; set X long
.390e3c	fa		plx		                PLX
.390e3d	68		pla		                PLA
.390e3e	28		plp						        PLP
.390e3f	2b		pld						        PLD
.390e40	6b		rtl		                RTL
.390e41					Poll_Inbuf
.390e41	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390e45	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e47	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e49	f0 f6		beq $390e41					        BEQ Poll_Inbuf
.390e4b	60		rts		                RTS
.390e4c					Poll_Outbuf
.390e4c	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e50	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e52	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e54	d0 f6		bne $390e4c	                BNE Poll_Outbuf
.390e56	60		rts		                RTS
.390e57					INIT_MOUSE
.390e57	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390e5a	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390e5c	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e60					DO_CMD_A9_AGAIN
.390e60	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390e63	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390e65	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e69	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390e6c	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e70	c9 00		cmp #$00	                CMP #$00
.390e72	d0 ec		bne $390e60	                BNE DO_CMD_A9_AGAIN
.390e74	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390e77	a9 20		lda #$20	                LDA #$20
.390e79	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e7d	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390e80	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390e84	09 02		ora #$02	                ORA #$02
.390e86	48		pha		                PHA
.390e87	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390e8a	a9 60		lda #$60	                LDA #$60
.390e8c	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e90	20 41 0e	jsr $390e41	                JSR Poll_Inbuf ;
.390e93	68		pla		                PLA
.390e94	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e98	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390e9a	20 bd 0e	jsr $390ebd	                JSR MOUSE_WRITE
.390e9d	20 d0 0e	jsr $390ed0	                JSR MOUSE_READ
.390ea0	a9 e8		lda #$e8	                LDA #$E8
.390ea2	20 bd 0e	jsr $390ebd	                JSR MOUSE_WRITE
.390ea5	20 d0 0e	jsr $390ed0	                JSR MOUSE_READ
.390ea8	a9 00		lda #$00	                LDA #$00
.390eaa	20 bd 0e	jsr $390ebd	                JSR MOUSE_WRITE
.390ead	20 d0 0e	jsr $390ed0	                JSR MOUSE_READ
.390eb0	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390eb2	20 bd 0e	jsr $390ebd	                JSR MOUSE_WRITE
.390eb5	20 d0 0e	jsr $390ed0	                JSR MOUSE_READ
.390eb8	a9 00		lda #$00	                LDA #$00
.390eba	85 e0		sta $e0		                STA MOUSE_PTR
.390ebc	60		rts		                RTS
.390ebd					MOUSE_WRITE
.390ebd	48		pha		                PHA
.390ebe	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390ec1	a9 d4		lda #$d4	                LDA #$D4
.390ec3	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ec7	20 41 0e	jsr $390e41	                JSR Poll_Inbuf
.390eca	68		pla		                PLA
.390ecb	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ecf	60		rts		                RTS
.390ed0					MOUSE_READ
.390ed0	20 4c 0e	jsr $390e4c	                JSR Poll_Outbuf ;
.390ed3	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390ed7	60		rts		                RTS
.390ed8	48		pha		INITRTC         PHA
.390ed9	e2 20		sep #$20	                SEP #$20        ; set A short
.390edb	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390edf	00		brk #		                BRK
.390ee0	c2 20		rep #$20	                REP #$20        ; set A long
.390ee2	68		pla		                PLA
.390ee3	6b		rtl		                RTL
.390ee4					ITESTSID
.390ee4	a9 0f 00	lda #$000f	                LDA #$0F
.390ee7	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390eeb	a9 be 00	lda #$00be	                LDA #$BE
.390eee	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390ef2	a9 f8 00	lda #$00f8	                LDA #$F8
.390ef5	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390ef9	a9 11 00	lda #$0011	                LDA #$11
.390efc	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f00	a9 25 00	lda #$0025	                LDA #$25
.390f03	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f07	a9 11 00	lda #$0011	                LDA #$11
.390f0a	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f0e	a9 08 00	lda #$0008	                LDA #$08
.390f11	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f15	a9 00 00	lda #$0000	                LDA #$00
.390f18	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f1c	a9 c6 00	lda #$00c6	                LDA #$C6
.390f1f	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f23	a9 08 00	lda #$0008	                LDA #$08
.390f26	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f2a	a9 00 00	lda #$0000	                LDA #$00
.390f2d	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f31	a9 08 00	lda #$0008	                LDA #$08
.390f34	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f38	a9 c6 00	lda #$00c6	                LDA #$C6
.390f3b	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f3f	a9 08 00	lda #$0008	                LDA #$08
.390f42	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f46	a9 00 00	lda #$0000	                LDA #$00
.390f49	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f4d	a9 08 00	lda #$0008	                LDA #$08
.390f50	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f54	a9 c6 00	lda #$00c6	                LDA #$C6
.390f57	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390f5b	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390f5e	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f62	a9 01 00	lda #$0001	                LDA #$01
.390f65	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390f69	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f6c	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390f70	a9 08 00	lda #$0008	                LDA #$08
.390f73	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f77	a9 08 00	lda #$0008	                LDA #$08
.390f7a	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390f7e	a9 0c 00	lda #$000c	                LDA #$0C
.390f81	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390f85	a9 04 00	lda #$0004	                LDA #$04
.390f88	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390f8c	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f8f	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390f93	a9 08 00	lda #$0008	                LDA #$08
.390f96	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f9a	a9 08 00	lda #$0008	                LDA #$08
.390f9d	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390fa1	a9 00 00	lda #$0000	                LDA #$00
.390fa4	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390fa8	a9 08 00	lda #$0008	                LDA #$08
.390fab	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390faf	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fb2	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390fb6	a9 08 00	lda #$0008	                LDA #$08
.390fb9	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390fbd	a9 08 00	lda #$0008	                LDA #$08
.390fc0	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390fc4	a9 10 00	lda #$0010	                LDA #$10
.390fc7	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390fcb	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.390fcf	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.390fd3	6b		rtl		                RTL
.390fd4	48		pha		IINITCODEC      PHA
.390fd5	c2 20		rep #$20	                REP #$20        ; set A long
.390fd7	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390fda	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fde	a9 01 00	lda #$0001	                LDA #$0001
.390fe1	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fe5	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.390fe8	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.390feb	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fef	a9 01 00	lda #$0001	                LDA #$0001
.390ff2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ff6	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.390ff9	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390ffc	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391000	a9 01 00	lda #$0001	                LDA #$0001
.391003	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391007	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.39100a	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39100d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391011	a9 01 00	lda #$0001	                LDA #$0001
.391014	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391018	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.39101b	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.39101e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391022	a9 01 00	lda #$0001	                LDA #$0001
.391025	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391029	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.39102c	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.39102f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391033	a9 01 00	lda #$0001	                LDA #$0001
.391036	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39103a	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.39103d	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391040	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391044	a9 01 00	lda #$0001	                LDA #$0001
.391047	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39104b	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.39104e	68		pla		                PLA
.39104f	6b		rtl		                RTL
.391050					IRESETCODEC
.391050	c2 20		rep #$20	                REP #$20        ; set A long
.391052	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.391055	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391059	a9 01 00	lda #$0001	                LDA #$0001
.39105c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391060	20 64 10	jsr $391064	                JSR CODEC_TRF_FINISHED
.391063	6b		rtl		                RTL
.391064					CODEC_TRF_FINISHED
.391064	e2 20		sep #$20	                SEP #$20        ; set A short
.391066	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.39106a	29 01		and #$01	                AND #$01
.39106c	c9 01		cmp #$01	                CMP #$01
.39106e	f0 f6		beq $391066	                BEQ CODEC_LOOP
.391070	c2 20		rep #$20	                REP #$20        ; set A long
.391072	60		rts		                RTS
.391073					IBM_FILL_SCREEN
.391073	c2 30		rep #$30	                REP #$30        ; set A&X long
.391075	a9 00 00	lda #$0000	                LDA #$0000
.391078	a2 00 00	ldx #$0000	                LDX #$0000
.39107b					BM_FILL_SCREEN_LOOPY
.39107b	a0 00 00	ldy #$0000	                LDY #$0000
.39107e	e2 20		sep #$20	                SEP #$20        ; set A short
.391080					BM_FILL_SCREEN_LOOPX
.391080	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391082	c8		iny		                INY
.391083	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391085	d0 f9		bne $391080	                BNE BM_FILL_SCREEN_LOOPX
.391087	20 92 10	jsr $391092	                JSR BM_FILL_COMPUTE_Y_DST
.39108a	e8		inx		                INX
.39108b	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.39108d	d0 ec		bne $39107b	                BNE BM_FILL_SCREEN_LOOPY
.39108f	c2 30		rep #$30	                REP #$30        ; set A&X long
.391091	6b		rtl		                RTL
.391092					BM_FILL_COMPUTE_Y_DST
.391092	c2 20		rep #$20	                REP #$20        ; set A long
.391094	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391096	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39109a	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.39109c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910a0	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910a3	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910a7	a9 00 00	lda #$0000	                LDA #$0000
.3910aa	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910ae	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910b2	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910b4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910b8	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910ba	a9 00 00	lda #$0000	                LDA #$0000
.3910bd	60		rts		                RTS
.3910be					IBMP_PARSER
.3910be	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910c0	a0 00 00	ldy #$0000	                LDY #$0000
.3910c3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3910c5	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3910c8	f0 03		beq $3910cd	                BEQ IBMP_PARSER_CONT
.3910ca	82 04 01	brl $3911d1	                BRL BMP_PARSER_END_WITH_ERROR
.3910cd					IBMP_PARSER_CONT
.3910cd	a0 02 00	ldy #$0002	                LDY #$0002
.3910d0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3910d2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3910d6	a0 04 00	ldy #$0004	                LDY #$0004
.3910d9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.3910db	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3910df	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.3910e2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910e6	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910ea	18		clc		                CLC
.3910eb	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910ef	85 50		sta $50		                STA BMP_FILE_SIZE
.3910f1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910f5	85 52		sta $52		                STA BMP_FILE_SIZE+2
.3910f7	a0 12 00	ldy #$0012	                LDY #$0012
.3910fa	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910fc	85 40		sta $40		                STA BMP_X_SIZE
.3910fe	a0 16 00	ldy #$0016	                LDY #$0016
.391101	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391103	85 42		sta $42		                STA BMP_Y_SIZE
.391105	a0 2e 00	ldy #$002e	                LDY #$002E
.391108	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39110a	0a		asl a		                ASL A; Multiply by 2
.39110b	0a		asl a		                ASL A; Multiply by 2
.39110c	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39110e	e0 00 00	cpx #$0000	                CPX #$0000
.391111	d0 05		bne $391118	                BNE BMP_LUT1_PICK
.391113	20 d9 11	jsr $3911d9	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391116	80 08		bra $391120	                BRA DONE_TRANSFER_LUT;
.391118					  BMP_LUT1_PICK
.391118	e0 01 00	cpx #$0001	                CPX #$0001
.39111b	d0 03		bne $391120	                BNE BMP_LUT2_PICK
.39111d	20 09 12	jsr $391209	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391120					  BMP_LUT2_PICK
.391120					  DONE_TRANSFER_LUT
.391120	a5 56		lda $56		                LDA BMP_POSITION_Y
.391122	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.391126	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391128	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.39112c	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.391130	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391134	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.391138	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39113c	a5 54		lda $54		                LDA BMP_POSITION_X
.39113e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391142	a9 00 00	lda #$0000	                LDA #$0000
.391145	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391149	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.39114d	85 f0		sta $f0		                STA USER_TEMP
.39114f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391153	85 f2		sta $f2		                STA USER_TEMP+2
.391155	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391157	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39115b	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39115d	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391161	a5 f0		lda $f0		                LDA USER_TEMP
.391163	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391167	a5 f2		lda $f2		                LDA USER_TEMP+2
.391169	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.39116d	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391171	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391173	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391177	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391179	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.39117b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39117f	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391181	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391185	a5 50		lda $50		                LDA BMP_FILE_SIZE
.391187	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39118b	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.39118d	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391191	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391195	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391197	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39119b	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39119d	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39119f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911a3	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3911a5	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911a9	18		clc		                CLC
.3911aa	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3911ac	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3911af	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3911b2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3911b6	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3911b9	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3911bd	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911c1	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911c3	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911c7	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911c9	20 39 12	jsr $391239	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3911cc	a2 ed 15	ldx #$15ed	                LDX #<>bmp_parser_msg0
.3911cf	80 03		bra $3911d4	                BRA BMP_PARSER_END_NO_ERROR
.3911d1					BMP_PARSER_END_WITH_ERROR
.3911d1	a2 d9 15	ldx #$15d9	                LDX #<>bmp_parser_err0
.3911d4					BMP_PARSER_END_NO_ERROR
.3911d4	22 55 06 39	jsl $390655	                JSL IPRINT       ; print the first line
.3911d8	6b		rtl		                RTL
.3911d9					BMP_PARSER_UPDATE_LUT0
.3911d9	38		sec		                SEC
.3911da	a0 7a 00	ldy #$007a	                LDY #$007A
.3911dd	a2 00 00	ldx #$0000	                LDX #$0000
.3911e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3911e2					BMP_PARSER_UPDATE_LOOP
.3911e2	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3911e4	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.3911e8	c8		iny		                INY
.3911e9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3911eb	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.3911ef	c8		iny		                INY
.3911f0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3911f2	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.3911f6	c8		iny		                INY
.3911f7	a9 80		lda #$80	                LDA #$80
.3911f9	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3911fd	c8		iny		                INY ; For the Alpha Value, nobody cares
.3911fe	e8		inx		                INX
.3911ff	e8		inx		                INX
.391200	e8		inx		                INX
.391201	e8		inx		                INX
.391202	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391204	d0 dc		bne $3911e2	                BNE BMP_PARSER_UPDATE_LOOP
.391206	c2 20		rep #$20	                REP #$20        ; set A long
.391208	60		rts		                RTS
.391209					BMP_PARSER_UPDATE_LUT1
.391209	38		sec		                SEC
.39120a	a0 36 00	ldy #$0036	                LDY #$0036
.39120d	a2 00 00	ldx #$0000	                LDX #$0000
.391210	e2 20		sep #$20	                SEP #$20        ; set A short
.391212					PALETTE_LUT1_LOOP
.391212	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391214	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391218	c8		iny		                INY
.391219	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39121b	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39121f	c8		iny		                INY
.391220	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391222	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391226	c8		iny		                INY
.391227	a9 80		lda #$80	                LDA #$80
.391229	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.39122d	c8		iny		                INY ; For the Alpha Value, nobody cares
.39122e	e8		inx		                INX
.39122f	e8		inx		                INX
.391230	e8		inx		                INX
.391231	e8		inx		                INX
.391232	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391234	d0 dc		bne $391212	                BNE PALETTE_LUT1_LOOP
.391236	c2 20		rep #$20	                REP #$20        ; set A long
.391238	60		rts		                RTS
.391239					BMP_PARSER_DMA_SHIT_OUT
.391239	a2 00 00	ldx #$0000	                LDX #$0000
.39123c					BMP_PARSER_LOOPY
.39123c	a0 00 00	ldy #$0000	                LDY #$0000
.39123f	e2 20		sep #$20	                SEP #$20        ; set A short
.391241					BMP_PARSER_LOOPX
.391241	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391243	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391245	c8		iny		                INY
.391246	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391248	d0 f7		bne $391241	                BNE BMP_PARSER_LOOPX
.39124a	20 56 12	jsr $391256	                JSR BMP_PARSER_COMPUTE_Y_SRC
.39124d	20 71 12	jsr $391271	                JSR BMP_PARSER_COMPUTE_Y_DST
.391250	e8		inx		                INX
.391251	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391253	d0 e7		bne $39123c	                BNE BMP_PARSER_LOOPY
.391255	60		rts		                RTS
.391256					BMP_PARSER_COMPUTE_Y_SRC
.391256	c2 20		rep #$20	                REP #$20        ; set A long
.391258	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39125a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39125e	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391260	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391264	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391268	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39126a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39126e	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391270	60		rts		                RTS
.391271					BMP_PARSER_COMPUTE_Y_DST
.391271	c2 20		rep #$20	                REP #$20        ; set A long
.391273	18		clc		                CLC
.391274	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391276	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391278	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39127a	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39127c	69 00 00	adc #$0000	                ADC #$0000
.39127f	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391281	60		rts		                RTS
.391282	00		brk #		IRESTORE        BRK ; Warm boot routine
.391283	00		brk #		ISCINIT         BRK ;
.391284	00		brk #		IIOINIT         BRK ;
.391285	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.391286	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391287	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391288	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391289	00		brk #		ICLOSE          BRK ; Close a channel
.39128a	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.39128b	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.39128c	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.39128d	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39128e	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39128f	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391290	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391291	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391292	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391293	00		brk #		IPRINTF         BRK ; Print a float value
.391294	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391295	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391296	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.391297	00		brk #		IPUSHKEY        BRK ;
.391298	00		brk #		IPUSHKEYS       BRK ;
.391299	00		brk #		ICSRHOME        BRK ;
.39129a	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.39129b	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.39129c					KERNEL_DATA
>39129c	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>3912a4	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>3912b4	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>3912c4	58 20 0d
>3912c7	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>3912cf	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>3912df	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3912ef	20 20 0d
>3912f2	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3912fa	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>39130a	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>39131a	20 20 0d
>39131d	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>391325	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>391335	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>391345	20 20 0d
>391348	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>391350	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>391360	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>391370	20 20 0d
>391373	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>39137b	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>39138b	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>39139b	0d
>39139c	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>3913a4	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>3913b4	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>3913be	44 65 63 65 6d 62 65 72		.text "December 31, 2019"
>3913c6	20 33 31 2c 20 32 30 31 39

;******  Return to file: src\kernel.asm

>3913cf	0d 00				                .text $0D,$00
.3913d1					old_pc_style_stat
>3913d1	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3913d9	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>3913e9	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3913f9	fd fd
>3913fb	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391403	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>391413	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391423	fd fd
>391425	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39142d	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>39143d	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39144d	fd fd
>39144f	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391457	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>391467	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391477	fd fd
>391479	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391481	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391491	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914a1	fd fd
>3914a3	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>3914a7	00 00 80 ff			                .text $00, $00, $80, $FF
>3914ab	00 80 00 ff			                .text $00, $80, $00, $FF
>3914af	80 00 00 ff			                .text $80, $00, $00, $FF
>3914b3	00 80 80 ff			                .text $00, $80, $80, $FF
>3914b7	80 80 00 ff			                .text $80, $80, $00, $FF
>3914bb	80 00 80 ff			                .text $80, $00, $80, $FF
>3914bf	80 80 80 ff			                .text $80, $80, $80, $FF
>3914c3	00 45 ff ff			                .text $00, $45, $FF, $FF
>3914c7	13 45 8b ff			                .text $13, $45, $8B, $FF
>3914cb	00 00 20 ff			                .text $00, $00, $20, $FF
>3914cf	00 20 00 ff			                .text $00, $20, $00, $FF
>3914d3	20 00 00 ff			                .text $20, $00, $00, $FF
>3914d7	20 20 20 ff			                .text $20, $20, $20, $FF
>3914db	40 40 40 ff			                .text $40, $40, $40, $FF
>3914df	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3914e3	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>3914e7	00 00 80 ff			                .text $00, $00, $80, $FF
>3914eb	00 80 00 ff			                .text $00, $80, $00, $FF
>3914ef	80 00 00 ff			                .text $80, $00, $00, $FF
>3914f3	00 20 20 ff			                .text $00, $20, $20, $FF
>3914f7	20 20 00 ff			                .text $20, $20, $00, $FF
>3914fb	20 00 20 ff			                .text $20, $00, $20, $FF
>3914ff	20 20 20 ff			                .text $20, $20, $20, $FF
>391503	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>391507	13 45 8b ff			                .text $13, $45, $8B, $FF
>39150b	00 00 20 ff			                .text $00, $00, $20, $FF
>39150f	00 20 00 ff			                .text $00, $20, $00, $FF
>391513	40 00 00 ff			                .text $40, $00, $00, $FF
>391517	10 10 10 ff			                .text $10, $10, $10, $FF
>39151b	40 40 40 ff			                .text $40, $40, $40, $FF
>39151f	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391523	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>39152b	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39153b	00
>39153c	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>391544	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391554	00
>391555	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>39155d	20 45 78 65 63 75 74 65 64 2e 0d 00
>391569	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391571	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391581	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391589	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391599	64 2e 2e 2e 0d 00
>39159f	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>3915a7	20 50 72 65 73 65 6e 74 0d 00
>3915b1	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3915b9	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3915c9	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3915d9	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3915e1	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3915ed	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3915f5	45 44 2e 00
>3915f9	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>391601	47 20 42 4d 50 20 50 41 52 53 45 52 00
>39160e	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>391616	50 72 65 73 65 6e 74 3a 00
>39161f	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>391627	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>39162f	0d 00
>391631	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>391639	52 4c 44 0d 00
>39163e	0d 00				                .null $0D
>391640	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>391648	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>391658	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>391668	58 44 49 5a 43 0d 00
>39166f	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>391677	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>391687	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>391697	2d 2d 2d 2d 2d 00
>39169d	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3916a5	52 4f 52 00
>3916a9	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3916b1	38 39 41 42 43 44 45 46 00
>3916ba					.align 256
>391700	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391708	37 38 39 30 2d 3d 08 09
>391710	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391718	6f 70 5b 5d 0d 00 61 73
>391720	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391728	27 60 00 5c 7a 78 63 76
>391730	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391738	00 20 00 00 00 00 00 00
>391740	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391748	11 00 00 9d 00 1d 00 00
>391750	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391758	00 00 00 00 00 00 00 00
>391760	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391768	00 00 00 00 00 00 00 00
>391770	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391778	00 00 00 00 00 00 00 00
>391780	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391788	26 2a 28 29 5f 2b 08 09
>391790	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391798	4f 50 7b 7d 0d 00 41 53
>3917a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3917a8	22 7e 00 5c 5a 58 43 56
>3917b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3917b8	00 20 00 00 00 00 00 00
>3917c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3917c8	00 00 00 00 00 00 00 00
>3917d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3917d8	00 00 00 00 00 00 00 00
>3917e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3917e8	00 00 00 00 00 00 00 00
>3917f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3917f8	00 00 00 00 00 00 00 00
>391800	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391828	27 60 00 5c 7a 78 03 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391848	00 00 00 00 00 00 00 00
>391850	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391888	37 38 39 30 2d 3d 08 09
>391890	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391898	6f 70 5b 5d 0d 00 61 73
>3918a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3918a8	27 60 00 5c 7a 78 63 76
>3918b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391928	27 60 00 5c 7a 78 63 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391988	00 00 00 00 00 00 00 00
>391990	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391998	00 00 00 00 00 00 00 00
>3919a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3919a8	00 00 00 00 00 00 00 00
>3919b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 00 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3919c8	11 00 00 9d 00 1d 00 00
>3919d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00					.align 256
>391a00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391a08	34 37 3a 3d 3f 41 44 46
>391a10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391a18	57 58 5a 5b 5d 5e 60 61
>391a20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391a28	6d 6f 70 71 72 73 75 76
>391a30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391a38	80 81 82 83 84 85 86 87
>391a40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391a48	8f 90 91 92 93 93 94 95
>391a50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391a58	9d 9e 9e 9f a0 a1 a2 a2
>391a60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391a68	a9 aa ab ab ac ad ae ae
>391a70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391a78	b5 b5 b6 b7 b7 b8 b9 b9
>391a80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391a88	bf c0 c0 c1 c2 c2 c3 c4
>391a90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391a98	c9 ca ca cb cb cc cd cd
>391aa0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391aa8	d2 d3 d4 d4 d5 d5 d6 d6
>391ab0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391ab8	db dc dc dd de de df df
>391ac0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391ac8	e4 e4 e5 e5 e6 e6 e7 e7
>391ad0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391ad8	ec ec ed ed ee ee ef ef
>391ae0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391ae8	f4 f4 f5 f5 f6 f6 f7 f7
>391af0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391af8	fb fc fc fd fd fe fe ff
>391b00					.align 256
>391b00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391b08	25 27 2a 2c 2e 30 32 34
>391b10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391b18	44 46 47 49 4a 4c 4d 4f
>391b20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391b28	5b 5c 5d 5e 60 61 62 63
>391b30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391b38	6d 6e 70 71 72 73 74 75
>391b40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391b48	7e 7f 80 81 82 83 84 84
>391b50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391b58	8d 8e 8e 8f 90 91 92 93
>391b60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391b68	9a 9b 9c 9d 9e 9f 9f a0
>391b70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391b78	a7 a8 a9 aa aa ab ac ad
>391b80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391b88	b3 b4 b5 b6 b6 b7 b8 b8
>391b90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391b98	bf bf c0 c1 c2 c2 c3 c4
>391ba0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ba8	ca ca cb cc cc cd ce ce
>391bb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391bb8	d4 d5 d6 d6 d7 d7 d8 d9
>391bc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391bc8	de df e0 e0 e1 e1 e2 e3
>391bd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391bd8	e8 e9 e9 ea ea eb ec ec
>391be0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391be8	f1 f2 f3 f3 f4 f4 f5 f5
>391bf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391bf8	fb fb fc fc fd fd fe ff
>391c00					.align 256
>391c00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391c08	83 dd ce 39 cd c5 3b 15
>391c10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391c18	87 12 31 65 89 27 88 42
>391c20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391c28	94 ce 56 ec fe da 58 c9
>391c30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391c38	d0 10 2c b2 4b ea 32 61
>391c40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391c48	a1 e6 ca 2d b3 ce b0 79
>391c50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391c58	5f e3 fb bd 15 2e be f5
>391c60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391c68	8d 8f 2c 80 0a 5e 99 36
>391c70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391c78	13 52 44 2f e3 ef 44 a2
>391c80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391c88	be 23 02 58 0a 52 5e b4
>391c90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391c98	d5 cf 3e df c4 9e da bb
>391ca0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391ca8	77 7d b1 3b 4a 68 35 6e
>391cb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391cb8	b5 8f 44 63 55 6f e1 50
>391cc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391cc8	57 74 b9 bd 05 14 50 eb
>391cd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391cd8	44 bc ec db 22 58 fc be
>391ce0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391ce8	24 aa 82 11 5c 9f 43 4d
>391cf0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391cf8	3e 3d 66 7e 0a 1c 6b 74
>391d00					.align 16
>391d00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391d08	01 01 01 00 00 00 00 00
>391d10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391d18	ff ff ff 01 00 00 00 00
>391d20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391d28	01 55 ff ff 01 00 00 00
>391d30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391d38	ff ff ff ff 01 00 00 00
>391d40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391d48	ff ff 01 ff ff 01 00 00
>391d50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391d58	01 ff ff 01 ff 01 00 00
>391d60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391d68	ff 01 ff ff ff 01 00 00
>391d70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391d78	ff ff ff ff ff 01 01 00
>391d80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391d88	ff ff ff ff 01 ff ff 01
>391d90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391d98	ff ff ff ff ff ff ff 01
>391da0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391da8	55 55 01 ff ff 55 01 00
>391db0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391db8	01 01 55 ff 55 01 00 00
>391dc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391dc8	01 55 55 55 01 00 00 00
>391dd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391dd8	01 55 55 01 00 00 00 00
>391de0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391de8	00 01 01 00 00 00 00 00
>391df0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391df8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00

;******  End of listing
