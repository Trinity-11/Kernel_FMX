
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Mon Aug 24 14:16:04 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01					CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$05					CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0				JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4				VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6				VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8				VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea				VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec				VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee				VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0				RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4				VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6				VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8				VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa				VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc				VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe				VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 10 38	jmp $381000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 10 38	jmp $381008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 10 38	jmp $381008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 10 38	jmp $381008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 ea 12 38	jsl $3812ea	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c ce 16 39	jmp $3916ce	RESTORE         JML IRESTORE
.381008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	5c cf 16 39	jmp $3916cf	SCINIT          JML ISCINIT
.381014	5c d0 16 39	jmp $3916d0	IOINIT          JML IIOINIT
.381018	5c 9e 07 39	jmp $39079e	PUTC            JML IPUTC
.38101c	5c 87 07 39	jmp $390787	PUTS            JML IPUTS
.381020	5c 15 09 39	jmp $390915	PUTB            JML IPUTB
.381024	5c a3 41 39	jmp $3941a3	PUTBLOCK        JML IPUTBLOCK
.381028	5c d1 16 39	jmp $3916d1	SETLFS          JML ISETLFS
.38102c	5c d2 16 39	jmp $3916d2	SETNAM          JML ISETNAM
.381030	5c d3 16 39	jmp $3916d3	OPEN            JML IOPEN
.381034	5c d4 16 39	jmp $3916d4	CLOSE           JML ICLOSE
.381038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	5c d5 16 39	jmp $3916d5	GETB            JML IGETB
.381044	5c 50 41 39	jmp $394150	GETBLOCK        JML IGETBLOCK
.381048	5c 48 07 39	jmp $390748	GETCH           JML IGETCH
.38104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	5c d6 16 39	jmp $3916d6	GETS            JML IGETS
.381058	5c d7 16 39	jmp $3916d7	GETLINE         JML IGETLINE
.38105c	5c d8 16 39	jmp $3916d8	GETFIELD        JML IGETFIELD
.381060	5c d9 16 39	jmp $3916d9	TRIM            JML ITRIM
.381064	5c da 16 39	jmp $3916da	PRINTC          JML IPRINTC
.381068	5c db 16 39	jmp $3916db	PRINTS          JML IPRINTS
.38106c	5c 16 09 39	jmp $390916	PRINTCR         JML IPRINTCR
.381070	5c dc 16 39	jmp $3916dc	PRINTF          JML IPRINTF
.381074	5c dd 16 39	jmp $3916dd	PRINTI          JML IPRINTI
.381078	5c d6 0a 39	jmp $390ad6	PRINTH          JML IPRINTH
.38107c	5c de 16 39	jmp $3916de	PRINTAI         JML IPRINTAI
.381080	5c f3 0a 39	jmp $390af3	PRINTAH         JML IPRINTAH
.381084	5c 1a 0a 39	jmp $390a1a	LOCATE          JML ILOCATE
.381088	5c df 16 39	jmp $3916df	PUSHKEY         JML IPUSHKEY
.38108c	5c e0 16 39	jmp $3916e0	PUSHKEYS        JML IPUSHKEYS
.381090	5c 76 09 39	jmp $390976	CSRRIGHT        JML ICSRRIGHT
.381094	5c a9 09 39	jmp $3909a9	CSRLEFT         JML ICSRLEFT
.381098	5c cf 09 39	jmp $3909cf	CSRUP           JML ICSRUP
.38109c	5c f5 09 39	jmp $3909f5	CSRDOWN         JML ICSRDOWN
.3810a0	5c 65 09 39	jmp $390965	CSRHOME         JML ICSRHOME
.3810a4	5c 66 0a 39	jmp $390a66	SCROLLUP        JML ISCROLLUP
.3810a8	5c 41 0b 39	jmp $390b41	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 0c 0c 39	jmp $390c0c	INITCHLUT	    JML IINITCHLUT
.3810b0	5c f6 0f 39	jmp $390ff6	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c f5 10 39	jmp $3910f5	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 60 12 39	jmp $391260	TESTSID         JML ITESTSID
.3810bc	5c d5 0f 39	jmp $390fd5	INITCURSOR      JML IINITCURSOR
.3810c0	5c 8b 0f 39	jmp $390f8b	INITFONTSET     JML IINITFONTSET
.3810c4	5c 3b 0c 39	jmp $390c3b	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 5b 0c 39	jmp $390c5b	INITALLLUT      JML IINITALLLUT
.3810cc	5c 1d 0d 39	jmp $390d1d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 16 0e 39	jmp $390e16	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 4d 0e 39	jmp $390e4d	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 4e 0e 39	jmp $390e4e	INITSPRITE      JML IINITSPRITE
.3810dc	5c 2f 13 39	jmp $39132f	INITCODEC       JML IINITCODEC
.3810e0	5c ab 13 39	jmp $3913ab	RESETCODEC      JML IRESETCODEC
.3810e4	5c 19 14 39	jmp $391419	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c ce 13 39	jmp $3913ce	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 5c 37 39	jmp $39375c	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c d8 53 39	jmp $3953d8	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 6b 54 39	jmp $39546b	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c a5 54 39	jmp $3954a5	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 3e 55 39	jmp $39553e	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c d9 54 39	jmp $3954d9	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c e8 55 39	jmp $3955e8	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c aa 55 39	jmp $3955aa	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c e4 55 39	jmp $3955e4	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 81 56 39	jmp $395681	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c a8 56 39	jmp $3956a8	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c ac 56 39	jmp $3956ac	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 8d 58 39	jmp $39588d	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 26 41 39	jmp $394126	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 26 59 39	jmp $395926	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 41 45 39	jmp $394541	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 63 0d 39	jmp $390d63	SETSIZES        JML ISETSIZES
.381130	5c 4f 5a 39	jmp $395a4f	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c b1 59 39	jmp $3959b1	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 05 5a 39	jmp $395a05	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 58 12	jsr $381258	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 b3 12	jsr $3812b3	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 72 12	jsr $381272	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 eb 12	jsr $3812eb	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 be 12	jsr $3812be	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 c9 12	jsr $3812c9	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 d4 12	jsr $3812d4	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 df 12	jsr $3812df	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	08		php		                PHP
.3811fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3811fd	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381201	29 01		and #$01	                AND #FNX0_INT00_SOF
.381203	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381207	e2 20		sep #$20	                SEP #$20        ; set A short
.381209	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120d	d0 06		bne $381215	                BNE dec_motor                   ; If not zero: decrement the timer
.38120f	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.381213	f0 28		beq $38123d	                BEQ sof_timeout                 ; If zero: move on to the next timer
.381215	af 4e a0 38	lda $38a04e	dec_motor       LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.381219	3a		dec a		                DEC A
.38121a	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.38121e	c9 ff		cmp #$ff	                CMP #$FF                        ; Did it roll over?
.381220	d0 0b		bne $38122d	                BNE chk_motor_end               ; No: check to see if we're a the end
.381222	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.381226	3a		dec a		                DEC A
.381227	8f 4f a0 38	sta $38a04f	                STA @l FDC_MOTOR_TIMER+1
.38122b	80 10		bra $38123d	                BRA sof_timeout                 ; And move on to the next timer
.38122d	af 4e a0 38	lda $38a04e	chk_motor_end   LDA @l FDC_MOTOR_TIMER          ; Check timer
.381231	d0 0a		bne $38123d	                BNE sof_timeout                 ; if it's <>0, move on to the next timer
.381233	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1
.381237	d0 04		bne $38123d	                BNE sof_timeout
.381239	22 5e 62 39	jsl $39625e	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.38123d					sof_timeout
.38123d	e2 20		sep #$20	                SEP #$20        ; set A short
.38123f	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.381243	f0 11		beq $381256	                BEQ sof_int_done                ; If it's 0, we don't do anything
.381245	3a		dec a		                DEC A                           ; Count down one tick
.381246	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.38124a	d0 0a		bne $381256	                BNE sof_int_done                ; If not 0, we're done
.38124c	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.381250	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.381252	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381256	28		plp		sof_int_done    PLP
.381257	60		rts		                RTS
.381258					TIMER0_INTERRUPT
.381258	e2 20		sep #$20	                SEP #$20        ; set A short
.38125a	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38125e	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381260	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381264	60		rts		                RTS
.381265					TIMER2_INTERRUPT
.381265	e2 20		sep #$20	                SEP #$20        ; set A short
.381267	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38126b	09 20		ora #$20	                ORA #TIMER2TRIGGER
.38126d	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381271	60		rts		                RTS
.381272					MOUSE_INTERRUPT
.381272	e2 20		sep #$20	                SEP #$20        ; set A short
.381274	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381278	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38127a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38127e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.381282	a2 00 00	ldx #$0000	                LDX #$0000
.381285	e2 10		sep #$10	                SEP #$10        ; set X short
.381287	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381289	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38128d	e8		inx		                INX
.38128e	e0 03		cpx #$03	                CPX #$03
.381290	d0 1c		bne $3812ae	                BNE EXIT_FOR_NEXT_VALUE
.381292	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381296	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381298	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.38129c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38129e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3812a2	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3812a4	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3812a8	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3812aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812ac	a2 00		ldx #$00	                LDX #$00
.3812ae					EXIT_FOR_NEXT_VALUE
.3812ae	86 e0		stx $e0		                STX MOUSE_PTR
.3812b0	c2 10		rep #$10	                REP #$10        ; set X long
.3812b2	60		rts		                RTS
.3812b3					FDC_INTERRUPT
.3812b3	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812b7	29 40		and #$40	                AND #FNX0_INT06_FDC
.3812b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3812bd	60		rts		                RTS
.3812be					COM2_INTERRUPT
.3812be	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812c2	29 08		and #$08	                AND #FNX1_INT03_COM2
.3812c4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c8	60		rts		                RTS
.3812c9					COM1_INTERRUPT
.3812c9	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812cd	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812cf	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812d3	60		rts		                RTS
.3812d4					MPU401_INTERRUPT
.3812d4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d8	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812da	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812de	60		rts		                RTS
.3812df					LPT1_INTERRUPT
.3812df	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812e3	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812e5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812e9	60		rts		                RTS
.3812ea					NMI_HANDLER
.3812ea	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812eb					KEYBOARD_INTERRUPT
.3812eb	48		pha		                PHA             ; begin setdp macro
.3812ec	08		php		                PHP
.3812ed	c2 20		rep #$20	                REP #$20        ; set A long
.3812ef	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812f2	5b		tcd		                TCD
.3812f3	28		plp		                PLP
.3812f4	68		pla		                PLA             ; end setdp macro
.3812f5	a2 00 00	ldx #$0000	                ldx #$0000
.3812f8	e2 10		sep #$10	                SEP #$10        ; set X short
.3812fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812fc	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381300	29 01		and #$01	                AND #FNX1_INT00_KBD
.381302	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381306					IRQ_HANDLER_FETCH
.381306	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.38130a	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.38130c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.38130e	29 80		and #$80	                AND #$80
.381310	c9 80		cmp #$80	                CMP #$80
.381312	d0 10		bne $381324	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.381314	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381316	29 7f		and #$7f	                AND #$7F
.381318	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38131a	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.38131c	aa		tax		                TAX
.38131d	bf 80 74 39	lda $397480,x	                LDA @lScanCode_Prefix_Set1, x
.381321	4c c7 13	jmp $3813c7	                JMP KB_WR_2_SCREEN      ; And save it
.381324	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381326	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381328	d0 03		bne $38132d	                BNE NOT_KB_SET_LSHIFT
.38132a	82 ad 00	brl $3813da	                BRL KB_SET_SHIFT
.38132d					NOT_KB_SET_LSHIFT
.38132d	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38132f	d0 03		bne $381334	                BNE NOT_KB_CLR_LSHIFT
.381331	82 af 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381334					NOT_KB_CLR_LSHIFT
.381334	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381336	d0 03		bne $38133b	                BNE NOT_KB_SET_RSHIFT
.381338	82 9f 00	brl $3813da	                BRL KB_SET_SHIFT
.38133b					NOT_KB_SET_RSHIFT
.38133b	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.38133d	d0 03		bne $381342	                BNE NOT_KB_CLR_RSHIFT
.38133f	82 a1 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381342					NOT_KB_CLR_RSHIFT
.381342	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.381344	d0 03		bne $381349	                BNE NOT_KB_SET_CTRL
.381346	82 a3 00	brl $3813ec	                BRL KB_SET_CTRL
.381349					NOT_KB_SET_CTRL
.381349	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.38134b	d0 03		bne $381350	                BNE NOT_KB_CLR_CTRL
.38134d	82 a5 00	brl $3813f5	                BRL KB_CLR_CTRL
.381350					NOT_KB_CLR_CTRL
.381350	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381352	d0 03		bne $381357	                BNE NOT_KB_SET_ALT
.381354	82 a7 00	brl $3813fe	                BRL KB_SET_ALT
.381357					NOT_KB_SET_ALT
.381357	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381359	d0 03		bne $38135e	                BNE NOT_KB_CLR_ALT
.38135b	82 a9 00	brl $381407	                BRL KB_CLR_ALT
.38135e	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381360	d0 03		bne $381365	                BNE NOT_PREFIXED
.381362	82 ab 00	brl $381410	                BRL KB_SET_PREFIX
.381365	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381367	d0 03		bne $38136c	                BNE NOT_KB_SET_NUM
.381369	82 b6 00	brl $381422	                BRL KB_TOG_NUMLOCK
.38136c	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38136e	d0 03		bne $381373	                BNE NOT_KB_SET_SCR
.381370	82 a6 00	brl $381419	                BRL KB_TOG_SCRLOCK
.381373	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381375	d0 03		bne $38137a	                BNE NOT_KB_CAPSLOCK
.381377	82 bc 00	brl $381436	                BRL KB_TOG_CAPLOCK
.38137a	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.38137c	d0 09		bne $381387	                BNE KB_UNPRESSED
.38137e	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381380	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381384	82 b5 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381387	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381389	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.38138b	d0 03		bne $381390	                BNE KB_NORM_SC
.38138d	82 ac 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381390	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.381392	aa		tax		                TAX
.381393	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381395	29 10		and #$10	                AND #$10
.381397	c9 10		cmp #$10	                CMP #$10
.381399	f0 17		beq $3813b2	                BEQ SHIFT_KEY_ON
.38139b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38139d	29 20		and #$20	                AND #$20
.38139f	c9 20		cmp #$20	                CMP #$20
.3813a1	f0 16		beq $3813b9	                BEQ CTRL_KEY_ON
.3813a3	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3813a5	29 40		and #$40	                AND #$40
.3813a7	c9 40		cmp #$40	                CMP #$40
.3813a9	f0 15		beq $3813c0	                BEQ ALT_KEY_ON
.3813ab	bf 00 72 39	lda $397200,x	                LDA @lScanCode_Press_Set1, x
.3813af	82 15 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b2	bf 80 72 39	lda $397280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3813b6	82 0e 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b9	bf 00 73 39	lda $397300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3813bd	82 07 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c0	bf 80 73 39	lda $397380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3813c4	82 00 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c7	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813c9	d0 03		bne $3813ce	                BNE savechar
.3813cb	4c 4c 14	jmp $38144c	                JMP programmerKey       ; Yes: trigger the programmer key
.3813ce	48		pha		savechar        PHA
.3813cf	c2 10		rep #$10	                REP #$10        ; set X long
.3813d1	20 58 14	jsr $381458	                JSR SAVEKEY
.3813d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3813d6	68		pla		                PLA
.3813d7	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813da	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813dc	09 10		ora #$10	                ORA #$10
.3813de	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e0	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813e3	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813e5	29 ef		and #$ef	                AND #$EF
.3813e7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e9	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813ec	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813ee	09 20		ora #$20	                ORA #$20
.3813f0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813f2	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813f5	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813f7	29 df		and #$df	                AND #$DF
.3813f9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813fb	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813fe	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.381400	09 40		ora #$40	                ORA #$40
.381402	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381404	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381407	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.381409	29 bf		and #$bf	                AND #$BF
.38140b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38140d	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381410	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.381412	09 80		ora #$80	                ORA #$80
.381414	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381416	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381419	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.38141b	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.38141d	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38141f	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381422	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381424	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381426	c9 60		cmp #$60	                CMP #$60
.381428	d0 03		bne $38142d	                BNE KB_TOG_NUMLOC2
.38142a	82 63 ff	brl $381390	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.38142d	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.38142f	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381431	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381433	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381436	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381438	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.38143a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38143c					KB_CHECK_B_DONE
.38143c	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381440	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381442	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381444	d0 03		bne $381449	                BNE SET_LED
.381446	4c 06 13	jmp $381306	                JMP IRQ_HANDLER_FETCH
.381449					SET_LED
.381449					KB_DONE
.381449	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144b	60		rts		                RTS
.38144c					programmerKey
.38144c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144e	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.38144f	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381450	ab		plb		                PLB
.381451	7a		ply		                PLY
.381452	fa		plx		                PLX
.381453	68		pla		                PLA
.381454	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381458					SAVEKEY
.381458	e2 20		sep #$20	                SEP #$20        ; set A short
.38145a	48		pha		                PHA                     ; Save the character
.38145b	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.38145d	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38145f	f0 0d		beq $38146e	                BEQ no_caps             ; No... just use the character as-is
.381461	68		pla		                PLA                     ; Get the character back
.381462	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381464	90 09		bcc $38146f	                BLT check_break         ; Yes: just use as-is
.381466	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381468	b0 05		bcs $38146f	                BGE check_break         ; Yes: just us as-is
.38146a	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.38146c	80 01		bra $38146f	                BRA check_break
.38146e	68		pla		no_caps         PLA                     ; Restore the character
.38146f	c9 00		cmp #$00	check_break     CMP #0
.381471	f0 18		beq $38148b	                BEQ done
.381473	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381475	f0 15		beq $38148c	                BEQ flag_break          ; Yes: flag a break
.381477	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381479	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.38147c	b0 0d		bcs $38148b	                BCS done                ; Stop storing - An error should ensue here...
.38147e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381482	e8		inx		                INX
.381483	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381485	a9 00		lda #$00	                LDA #$00
.381487	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.38148b	60		rts		done            RTS
.38148c					flag_break
.38148c	e2 20		sep #$20	                SEP #$20        ; set A short
.38148e	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381490	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381492	60		rts		                RTS
.381493					KBD_GETC
.381493	da		phx		                PHX
.381494	0b		phd		                PHD
.381495	08		php		                PHP
.381496	48		pha		                PHA             ; begin setdp macro
.381497	08		php		                PHP
.381498	c2 20		rep #$20	                REP #$20        ; set A long
.38149a	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38149d	5b		tcd		                TCD
.38149e	28		plp		                PLP
.38149f	68		pla		                PLA             ; end setdp macro
.3814a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814a2	c2 10		rep #$10	                REP #$10        ; set X long
.3814a4	58		cli		                CLI                     ; Make sure interrupts can happen
.3814a5	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.3814a9	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.3814ab	c9 60		cmp #$60	                CMP #KB_CREDITS
.3814ad	d0 0a		bne $3814b9	                BNE check_buffer        ; No: check the key buffer
.3814af	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.3814b1	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3814b5	22 88 16 39	jsl $391688	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.3814b9	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.3814bb	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.3814bd	90 02		bcc $3814c1	                BCC read_buff           ; Yes: a key is present, read it
.3814bf	80 e4		bra $3814a5	                BRA get_wait            ; Otherwise, keep waiting
.3814c1	78		sei		read_buff       SEI                     ; Don't interrupt me!
.3814c2	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.3814c4	e8		inx		                INX                     ; And move to the next key
.3814c5	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814c7	f0 07		beq $3814d0	                BEQ reset_indexes       ; Yes: return to 0 position
.3814c9	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814cb	58		cli		                CLI
.3814cc	28		plp		done            PLP                     ; Restore status and interrupts
.3814cd	2b		pld		                PLD
.3814ce	fa		plx		                PLX
.3814cf	6b		rtl		                RTL
.3814d0	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814d2	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814d4	80 f6		bra $3814cc	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 45 12 39	jsl $391245	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 b6 0f 39	jsl $390fb6	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 8b 0f 39	jsl $390f8b	                JSL IINITFONTSET
.3904cd	22 41 0b 39	jsl $390b41	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 66 5b 39	jsl $395b66	                JSL UART_SELECT
.3904d8	22 d2 5b 39	jsl $395bd2	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 66 5b 39	jsl $395b66	                JSL UART_SELECT
.3904e3	22 d2 5b 39	jsl $395bd2	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 55 6d	ldx #$6d55	                LDX #<>greet_msg
.39050d	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.390511	22 8c 0b 39	jsl $390b8c	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 16 16 39	jsl $391616	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 6f 44 39	jsl $39446f	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588	f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c	f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590	f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594	f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598	f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2	f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6	f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa	f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0	ea		nop		CREDIT_LOCK     NOP
.3905b1	80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3					BOOTSDC
.3905b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb	22 41 45 39	jsl $394541	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf	90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1	22 e4 46 39	jsl $3946e4	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5	80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7	a2 32 71	ldx #$7132	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca	80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc					BOOTIDE
.3905cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4	22 41 45 39	jsl $394541	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8	90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da	22 e4 46 39	jsl $3946e4	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de	82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1	a2 4e 71	ldx #$714e	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4	80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6	a2 97 71	ldx #$7197	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3905ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5	22 40 67 39	jsl $396740	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9	90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb	22 e4 46 39	jsl $3946e4	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff	82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602	a2 71 71	ldx #$7171	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605	22 7e 07 39	jsl $39077e	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609	a2 0d 71	ldx #$710d	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c	22 7e 07 39	jsl $39077e	                JSL IPRINT
.390610	22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616	d0 03		bne $39061b	                BNE chk_r_lc
.390618	82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d	d0 03		bne $390622	                BNE chk_b_lc
.39061f	82 5c ff	brl $39057e	                BRL retry_boot
.390622	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624	f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626	c9 42		cmp #$42	                CMP #'B'
.390628	f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a	80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c					BOOT_MENU
.39062c	8b		phb		                PHB
.39062d	08		php		                PHP
.39062e	e2 20		sep #$20	                SEP #$20        ; set A short
.390630	c2 10		rep #$10	                REP #$10        ; set X long
.390632	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634	48		pha		                PHA
.390635	ab		plb		                PLB
.390636	a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.39063d	c2 10		rep #$10	                REP #$10        ; set X long
.39063f	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642	e2 20		sep #$20	                SEP #$20        ; set A short
.390644	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647	22 16 16 39	jsl $391616	                JSL ILOOP_MS            ; Wait ...
.39064b	88		dey		                DEY                     ; Count down the tenths of seconds
.39064c	f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390652	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654	f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658	f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c	f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660	f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664	f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668	d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c	28		plp		return          PLP
.39066d	ab		plb		                PLB
.39066e	6b		rtl		                RTL
>39066f	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4					IBREAK
.3906a4	48		pha		                PHA             ; begin setdp macro
.3906a5	08		php		                PHP
.3906a6	c2 20		rep #$20	                REP #$20        ; set A long
.3906a8	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab	5b		tcd		                TCD
.3906ac	28		plp		                PLP
.3906ad	68		pla		                PLA             ; end setdp macro
.3906ae	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af	8f 48 02 00	sta $000248	                STA CPUY
.3906b3	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4	8f 46 02 00	sta $000246	                STA CPUX
.3906b8	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9	8f 44 02 00	sta $000244	                STA CPUA
.3906bd	68		pla		                PLA
.3906be	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce	c2 20		rep #$20	                REP #$20        ; set A long
.3906d0	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1	8f 40 02 00	sta $000240	                STA CPUPC
.3906d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8	8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc	c2 20		rep #$20	                REP #$20        ; set A long
.3906de	3b		tsc		                TSA             ; Get the stack
.3906df	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6	1b		tcs		                TAS
.3906e7	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb					IREADY
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 39		lda #$39	                LDA #`ready_msg
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	a2 ae 71	ldx #$71ae	                LDX #<>ready_msg
.3906fa	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3906fe					IREADYWAIT
.3906fe	22 18 07 39	jsl $390718	                JSL IGETCHE
.390702	80 fa		bra $3906fe	                BRA IREADYWAIT
.390704	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705	db		stp		IRETURN         STP
.390706	08		php		ISETIN          PHP
.390707	e2 20		sep #$20	                SEP #$20        ; set A short
.390709	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d	28		plp		                PLP
.39070e	6b		rtl		                RTL
.39070f	08		php		ISETOUT         PHP
.390710	e2 20		sep #$20	                SEP #$20        ; set A short
.390712	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716	28		plp		                PLP
.390717	6b		rtl		                RTL
.390718	22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390720	6b		rtl		                RTL
.390721					IGETCHW
.390721	08		php		                PHP
.390722	e2 20		sep #$20	                SEP #$20        ; set A short
.390724	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390728	f0 17		beq $390741	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072a	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39072c	f0 09		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.39072e	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390730	f0 05		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390734	28		plp		                PLP
.390735	38		sec		                SEC                 ; And return carry set
.390736	6b		rtl		                RTL
.390737	22 66 5b 39	jsl $395b66	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073b	22 1a 5c 39	jsl $395c1a	                JSL UART_GETC       ; Get the charater from the COM port
.39073f	80 04		bra $390745	                BRA done
.390741	22 93 14 38	jsl $381493	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390745	28		plp		done            PLP
.390746	18		clc		                CLC                 ; Return carry clear for valid data
.390747	6b		rtl		                RTL
.390748					IGETCH
.390748	da		phx		                PHX
.390749	5a		phy		                PHY
.39074a	8b		phb		                PHB
.39074b	0b		phd		                PHD
.39074c	08		php		                PHP
.39074d	48		pha		                PHA             ; begin setdbr macro
.39074e	08		php		                PHP
.39074f	e2 20		sep #$20	                SEP #$20        ; set A short
.390751	a9 00		lda #$00	                LDA #0
.390753	48		pha		                PHA
.390754	ab		plb		                PLB
.390755	28		plp		                PLP
.390756	68		pla		                PLA             ; end setdbr macro
.390757	e2 20		sep #$20	                SEP #$20        ; set A short
.390759	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.39075c	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.39075e	f0 03		beq $390763	                BEQ getch_console       ; Yes: dispatch on the console
.390760	82 10 00	brl $390773	                BRL ret_nothing         ; Unhandled device: return 0
.390763					getch_console
.390763	c2 20		rep #$20	                REP #$20        ; set A long
.390765	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.390768	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076b	b0 06		bcs $390773	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.39076d	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390771	80 05		bra $390778	                BRA done                ; And return it
.390773					ret_nothing
.390773	c2 20		rep #$20	                REP #$20        ; set A long
.390775	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.390778	28		plp		done            PLP
.390779	2b		pld		                PLD
.39077a	ab		plb		                PLB
.39077b	7a		ply		                PLY
.39077c	fa		plx		                PLX
.39077d	6b		rtl		                RTL
.39077e	22 87 07 39	jsl $390787	IPRINT          JSL IPUTS
.390782	22 16 09 39	jsl $390916	                JSL IPRINTCR
.390786	6b		rtl		                RTL
.390787	48		pha		IPUTS           PHA
.390788	08		php		                PHP
.390789	e2 20		sep #$20	                SEP #$20        ; set A short
.39078b	c2 10		rep #$10	                REP #$10        ; set X long
.39078d	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390790	f0 08		beq $39079a	                BEQ iputs_done
.390792	22 9e 07 39	jsl $39079e	iputs2          JSL IPUTC
.390796	e8		inx		iputs3          INX
.390797	4c 8d 07	jmp $39078d	                JMP iputs1
.39079a	e8		inx		iputs_done      INX
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA
.39079d	6b		rtl		                RTL
.39079e					IPUTC
.39079e	da		phx		                PHX
.39079f	5a		phy		                PHY
.3907a0	0b		phd		                PHD
.3907a1	8b		phb		                PHB
.3907a2	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a3	48		pha		                PHA             ; begin setdp macro
.3907a4	08		php		                PHP
.3907a5	c2 20		rep #$20	                REP #$20        ; set A long
.3907a7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907aa	5b		tcd		                TCD
.3907ab	28		plp		                PLP
.3907ac	68		pla		                PLA             ; end setdp macro
.3907ad	48		pha		                PHA             ; begin setdbr macro
.3907ae	08		php		                PHP
.3907af	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b1	a9 00		lda #$00	                LDA #0
.3907b3	48		pha		                PHA
.3907b4	ab		plb		                PLB
.3907b5	28		plp		                PLP
.3907b6	68		pla		                PLA             ; end setdbr macro
.3907b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b9	c2 10		rep #$10	                REP #$10        ; set X long
.3907bb	48		pha		                PHA                 ; Save the character to print
.3907bc	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c0	f0 16		beq $3907d8	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c4	f0 07		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c8	f0 03		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	68		pla		                PLA                 ; Otherwise, just exit
.3907cb	80 57		bra $390824	                BRA done
.3907cd	22 66 5b 39	jsl $395b66	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d1	68		pla		                PLA                 ; Recover the character to send
.3907d2	22 3b 5c 39	jsl $395c3b	                JSL UART_PUTC       ; Send the character
.3907d6	80 4c		bra $390824	                BRA done
.3907d8	68		pla		putc_screen     PLA                 ; Get the character to print
.3907d9	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907db	f0 69		beq $390846	                BEQ go_down
.3907dd	c9 20		cmp #$20	                CMP #$20
.3907df	90 19		bcc $3907fa	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e1	c9 7f		cmp #$7f	                CMP #$7F
.3907e3	f0 45		beq $39082a	                BEQ do_del
.3907e5	b0 02		bcs $3907e9	                BCS check_A0        ; [$20..$7E]: print it
.3907e7	80 31		bra $39081a	                BRA printc
.3907e9	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907eb	90 02		bcc $3907ef	                BCC check_ctrl1
.3907ed	80 2b		bra $39081a	                BRA printc          ; [$A0..$FF]: print it
.3907ef	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f1	f0 53		beq $390846	                BEQ go_down         ; ... move the cursor down one row
.3907f3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f5	f0 61		beq $390858	                BEQ go_left         ; ... move the cursor left one column
.3907f7	4c 24 08	jmp $390824	                JMP done
.3907fa	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907fc	f0 69		beq $390867	                BEQ do_TAB          ; ... move to the next TAB stop
.3907fe	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390800	f0 34		beq $390836	                BEQ backspace       ; ... move the cursor back and replace with a space
.390802	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390804	f0 3a		beq $390840	                BEQ do_cr           ; ... move cursor down and to the first column
.390806	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390808	f0 42		beq $39084c	                BEQ go_up           ; ... move the cursor up one row
.39080a	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39080c	f0 44		beq $390852	                BEQ go_right        ; ... move the cursor right one column
.39080e	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390810	f0 1e		beq $390830	                BEQ do_ins          ; ... insert a space
.390812	c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390814	f0 48		beq $39085e	                BEQ go_sol          ; ... move the cursor to the start of the line
.390816	c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390818	f0 74		beq $39088e	                BEQ go_eol          ; ... move the cursor to the end of the line
.39081a	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.39081c	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081e	87 1f		sta [$1f]	                STA [COLORPOS]
.390820	22 76 09 39	jsl $390976	                JSL ICSRRIGHT       ; And advance the cursor
.390824	28		plp		done            PLP
.390825	ab		plb		                PLB
.390826	2b		pld		                PLD
.390827	7a		ply		                PLY
.390828	fa		plx		                PLX
.390829	6b		rtl		                RTL
.39082a	22 bb 08 39	jsl $3908bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082e	80 f4		bra $390824	                BRA done
.390830	22 df 08 39	jsl $3908df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390834	80 ee		bra $390824	                BRA done
.390836	22 a9 09 39	jsl $3909a9	backspace       JSL ICSRLEFT
.39083a	22 bb 08 39	jsl $3908bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083e	80 e4		bra $390824	                BRA done
.390840	22 16 09 39	jsl $390916	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390844	80 de		bra $390824	                BRA done
.390846	22 f5 09 39	jsl $3909f5	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39084a	80 d8		bra $390824	                BRA done
.39084c	22 cf 09 39	jsl $3909cf	go_up           JSL ICSRUP          ; Move the cursor up one line
.390850	80 d2		bra $390824	                BRA done
.390852	22 76 09 39	jsl $390976	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390856	80 cc		bra $390824	                BRA done
.390858	22 a9 09 39	jsl $3909a9	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39085c	80 c6		bra $390824	                BRA done
.39085e					go_sol
.39085e	c2 20		rep #$20	                REP #$20        ; set A long
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a4 1c		ldy $1c		                LDY CURSORY
.390865	80 21		bra $390888	                BRA do_locate
.390867					do_TAB
.390867	c2 20		rep #$20	                REP #$20        ; set A long
.390869	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39086b	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39086e	18		clc		                CLC
.39086f	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390872	aa		tax		                TAX
.390873	a4 1c		ldy $1c		                LDY CURSORY
.390875	e2 20		sep #$20	                SEP #$20        ; set A short
.390877	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390879	90 04		bcc $39087f	                BCC check_row       ; Yes: check the row
.39087b	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39087e	c8		iny		                INY                 ; ... and the next row
.39087f	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390881	90 05		bcc $390888	                BCC do_locate       ; Yes: reposition the cursor
.390883	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP       ; No: scroll the screen
.390887	88		dey		                DEY                 ; And set the row to the last one
.390888	22 1a 0a 39	jsl $390a1a	do_locate       JSL ILOCATE         ; Set the cursor position
.39088c	80 96		bra $390824	                BRA done
.39088e	a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390890	ca		dex		                DEX
.390891	a4 1c		ldy $1c		                LDY CURSORY
.390893	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.390897	e2 20		sep #$20	                SEP #$20        ; set A short
.390899	a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.39089b	c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.39089d	d0 0b		bne $3908aa	                BNE eol_done        ; No: exit the loop
.39089f	22 a9 09 39	jsl $3909a9	                JSL ICSRLEFT        ; Yes: move to the left
.3908a3	a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908a5	d0 f2		bne $390899	                BNE eol_loop        ; No: try again
.3908a7	82 7a ff	brl $390824	                BRL done            ; Yes: we're done
.3908aa	a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908ac	e8		inx		                INX
.3908ad	e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908af	d0 03		bne $3908b4	                BNE eol_right
.3908b1	82 70 ff	brl $390824	                BRL done            ; Yes: we're done
.3908b4	22 76 09 39	jsl $390976	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908b8	82 69 ff	brl $390824	                BRL done
.3908bb	da		phx		SCRSHIFTLL      PHX
.3908bc	5a		phy		                PHY
.3908bd	48		pha		                PHA
.3908be	0b		phd		                PHD
.3908bf	08		php		                PHP
.3908c0	48		pha		                PHA             ; begin setdp macro
.3908c1	08		php		                PHP
.3908c2	c2 20		rep #$20	                REP #$20        ; set A long
.3908c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908c7	5b		tcd		                TCD
.3908c8	28		plp		                PLP
.3908c9	68		pla		                PLA             ; end setdp macro
.3908ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908ce	a8		tay		                TAY                 ; Set it as the destination
.3908cf	aa		tax		                TAX
.3908d0	e8		inx		                INX                 ; And set the next cell as the source
.3908d1	18		clc		                CLC                 ; Calculate the length of the block to move
.3908d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908d4	e5 1a		sbc $1a		                SBC CURSORX
.3908d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908d9	28		plp		                PLP
.3908da	2b		pld		                PLD
.3908db	68		pla		                PLA
.3908dc	7a		ply		                PLY
.3908dd	fa		plx		                PLX
.3908de	6b		rtl		                RTL
.3908df	da		phx		SCRSHIFTLR      PHX
.3908e0	48		pha		                PHA
.3908e1	0b		phd		                PHD
.3908e2	08		php		                PHP
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ef	a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908f1	1a		inc a		                INC A
.3908f2	c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908f4	b0 1a		bcs $390910	                BGE done            ; Yes: just skip the whole thing
.3908f6	38		sec		                SEC                 ; Calculate the length of the block to move
.3908f7	a5 0f		lda $0f		                LDA COLS_VISIBLE
.3908f9	e5 1a		sbc $1a		                SBC CURSORX
.3908fb	18		clc		                CLC
.3908fc	65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3908fe	3a		dec a		                DEC A
.3908ff	a8		tay		                TAY                 ; Make it the destination
.390900	3a		dec a		                DEC A               ; Move to the previous column
.390901	aa		tax		                TAX                 ; Make it the source
.390902	38		sec		                SEC                 ; Calculate the length of the block to move
.390903	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390905	e5 1a		sbc $1a		                SBC CURSORX
.390907	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39090a	e2 20		sep #$20	                SEP #$20        ; set A short
.39090c	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39090e	87 17		sta [$17]	                STA [CURSORPOS]
.390910	28		plp		done            PLP
.390911	2b		pld		                PLD
.390912	68		pla		                PLA
.390913	fa		plx		                PLX
.390914	6b		rtl		                RTL
.390915					IPUTB
.390915	6b		rtl		                RTL
.390916					IPRINTCR
.390916	da		phx		                PHX
.390917	5a		phy		                PHY
.390918	8b		phb		                PHB
.390919	0b		phd		                PHD
.39091a	08		php		                PHP
.39091b	48		pha		                PHA             ; begin setdbr macro
.39091c	08		php		                PHP
.39091d	e2 20		sep #$20	                SEP #$20        ; set A short
.39091f	a9 00		lda #$00	                LDA #0
.390921	48		pha		                PHA
.390922	ab		plb		                PLB
.390923	28		plp		                PLP
.390924	68		pla		                PLA             ; end setdbr macro
.390925	48		pha		                PHA             ; begin setdp macro
.390926	08		php		                PHP
.390927	c2 20		rep #$20	                REP #$20        ; set A long
.390929	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39092c	5b		tcd		                TCD
.39092d	28		plp		                PLP
.39092e	68		pla		                PLA             ; end setdp macro
.39092f	e2 20		sep #$20	                SEP #$20        ; set A short
.390931	c2 10		rep #$10	                REP #$10        ; set X long
.390933	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390937	f0 1c		beq $390955	                BEQ scr_printcr
.390939	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39093b	f0 06		beq $390943	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39093d	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39093f	f0 02		beq $390943	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390941	80 1c		bra $39095f	                BRA done
.390943	22 66 5b 39	jsl $395b66	uart_printcr    JSL UART_SELECT
.390947	a9 0d		lda #$0d	                LDA #CHAR_CR
.390949	22 9e 07 39	jsl $39079e	                JSL IPUTC
.39094d	a9 0a		lda #$0a	                LDA #CHAR_LF
.39094f	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390953	80 0a		bra $39095f	                BRA done
.390955	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390958	a4 1c		ldy $1c		                LDY CURSORY
.39095a	c8		iny		                INY
.39095b	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.39095f	28		plp		done            PLP
.390960	2b		pld		                PLD
.390961	ab		plb		                PLB
.390962	7a		ply		                PLY
.390963	fa		plx		                PLX
.390964	6b		rtl		                RTL
.390965	da		phx		ICSRHOME        PHX
.390966	5a		phy		                PHY
.390967	08		php		                PHP
.390968	a2 00 00	ldx #$0000	                LDX #0
.39096b	a0 00 00	ldy #$0000	                LDY #0
.39096e	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.390972	28		plp		                PLP
.390973	7a		ply		                PLY
.390974	fa		plx		                PLX
.390975	6b		rtl		                RTL
.390976	da		phx		ICSRRIGHT       PHX
.390977	5a		phy		                PHY
.390978	48		pha		                PHA
.390979	0b		phd		                PHD
.39097a	08		php		                PHP
.39097b	c2 20		rep #$20	                REP #$20        ; set A long
.39097d	c2 10		rep #$10	                REP #$10        ; set X long
.39097f	48		pha		                PHA             ; begin setdp macro
.390980	08		php		                PHP
.390981	c2 20		rep #$20	                REP #$20        ; set A long
.390983	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390986	5b		tcd		                TCD
.390987	28		plp		                PLP
.390988	68		pla		                PLA             ; end setdp macro
.390989	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39098b	e8		inx		                INX
.39098c	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39098e	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390990	90 0d		bcc $39099f	                BCC icsrright_nowrap  ; No: just set the position
.390992	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390995	c8		iny		                INY                   ; And move to the next row
.390996	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390998	90 05		bcc $39099f	                BCC icsrright_nowrap  ; No: just set the position
.39099a	88		dey		                DEY                   ; Yes: lock to the last row
.39099b	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP         ; But scroll the screen up
.39099f					icsrright_nowrap
.39099f	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE           ; Set the cursor position
.3909a3	28		plp		                PLP
.3909a4	2b		pld		                PLD
.3909a5	68		pla		                PLA
.3909a6	7a		ply		                PLY
.3909a7	fa		plx		                PLX
.3909a8	6b		rtl		                RTL
.3909a9					ICSRLEFT
.3909a9	da		phx		                PHX
.3909aa	5a		phy		                PHY
.3909ab	48		pha		                PHA
.3909ac	0b		phd		                PHD
.3909ad	08		php		                PHP
.3909ae	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b0	48		pha		                PHA             ; begin setdp macro
.3909b1	08		php		                PHP
.3909b2	c2 20		rep #$20	                REP #$20        ; set A long
.3909b4	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909b7	5b		tcd		                TCD
.3909b8	28		plp		                PLP
.3909b9	68		pla		                PLA             ; end setdp macro
.3909ba	a5 1a		lda $1a		                LDA CURSORX
.3909bc	f0 0b		beq $3909c9	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909be	a6 1a		ldx $1a		                LDX CURSORX
.3909c0	ca		dex		                DEX
.3909c1	86 1a		stx $1a		                STX CURSORX
.3909c3	a4 1c		ldy $1c		                LDY CURSORY
.3909c5	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3909c9					icsrleft_done_already_zero
.3909c9	28		plp		                PLP
.3909ca	2b		pld		                PLD
.3909cb	68		pla		                PLA
.3909cc	7a		ply		                PLY
.3909cd	fa		plx		                PLX
.3909ce	6b		rtl		                RTL
.3909cf					ICSRUP
.3909cf	da		phx		                PHX
.3909d0	5a		phy		                PHY
.3909d1	48		pha		                PHA
.3909d2	0b		phd		                PHD
.3909d3	08		php		                PHP
.3909d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d6	48		pha		                PHA             ; begin setdp macro
.3909d7	08		php		                PHP
.3909d8	c2 20		rep #$20	                REP #$20        ; set A long
.3909da	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909dd	5b		tcd		                TCD
.3909de	28		plp		                PLP
.3909df	68		pla		                PLA             ; end setdp macro
.3909e0	a5 1c		lda $1c		                LDA CURSORY
.3909e2	f0 0b		beq $3909ef	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909e4	a4 1c		ldy $1c		                LDY CURSORY
.3909e6	88		dey		                DEY
.3909e7	84 1c		sty $1c		                STY CURSORY
.3909e9	a6 1a		ldx $1a		                LDX CURSORX
.3909eb	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3909ef					isrup_done_already_zero
.3909ef	28		plp		                PLP
.3909f0	2b		pld		                PLD
.3909f1	68		pla		                PLA
.3909f2	7a		ply		                PLY
.3909f3	fa		plx		                PLX
.3909f4	6b		rtl		                RTL
.3909f5	da		phx		ICSRDOWN        PHX
.3909f6	5a		phy		                PHY
.3909f7	0b		phd		                PHD
.3909f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909fa	48		pha		                PHA             ; begin setdp macro
.3909fb	08		php		                PHP
.3909fc	c2 20		rep #$20	                REP #$20        ; set A long
.3909fe	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a01	5b		tcd		                TCD
.390a02	28		plp		                PLP
.390a03	68		pla		                PLA             ; end setdp macro
.390a04	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a06	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a08	c8		iny		                INY
.390a09	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a0b	90 05		bcc $390a12	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a0d	88		dey		                DEY                         ; Yes: go back to the last row
.390a0e	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP               ; But scroll the screen up
.390a12					icsrdown_noscroll
.390a12	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE                 ; And set the cursor position
.390a16	2b		pld		                PLD
.390a17	7a		ply		                PLY
.390a18	fa		plx		                PLX
.390a19	6b		rtl		                RTL
.390a1a	48		pha		ILOCATE         PHA
.390a1b	0b		phd		                PHD
.390a1c	08		php		                PHP
.390a1d	48		pha		                PHA             ; begin setdp macro
.390a1e	08		php		                PHP
.390a1f	c2 20		rep #$20	                REP #$20        ; set A long
.390a21	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a24	5b		tcd		                TCD
.390a25	28		plp		                PLP
.390a26	68		pla		                PLA             ; end setdp macro
.390a27	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a29					ilocate_scroll
.390a29	c4 13		cpy $13		                CPY LINES_VISIBLE
.390a2b	90 07		bcc $390a34	                BCC ilocate_scrolldone
.390a2d	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP
.390a31	88		dey		                DEY
.390a32	80 f5		bra $390a29	                BRA ilocate_scroll
.390a34					ilocate_scrolldone
.390a34	86 1a		stx $1a		                STX CURSORX
.390a36	84 1c		sty $1c		                STY CURSORY
.390a38	a5 0c		lda $0c		                LDA SCREENBEGIN
.390a3a					ilocate_row
.390a3a	c0 00 00	cpy #$0000	                CPY #$0
.390a3d	f0 08		beq $390a47	                BEQ ilocate_right
.390a3f	18		clc		ilocate_down    CLC
.390a40	65 11		adc $11		                ADC COLS_PER_LINE
.390a42	88		dey		                DEY
.390a43	f0 02		beq $390a47	                BEQ ilocate_right
.390a45	80 f8		bra $390a3f	                BRA ilocate_down
.390a47	18		clc		ilocate_right   CLC
.390a48	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a4a	85 17		sta $17		                STA CURSORPOS
.390a4c	a4 1c		ldy $1c		                LDY CURSORY
.390a4e	98		tya		                TYA
.390a4f	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a53	8a		txa		                TXA
.390a54	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a58	c2 20		rep #$20	                REP #$20        ; set A long
.390a5a	18		clc		                CLC
.390a5b	a5 17		lda $17		                LDA CURSORPOS
.390a5d	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a60	85 1f		sta $1f		                STA COLORPOS
.390a62	28		plp		ilocate_done    PLP
.390a63	2b		pld		                PLD
.390a64	68		pla		                PLA
.390a65	6b		rtl		                RTL
.390a66					ISCROLLUP
.390a66	48		pha		                PHA
.390a67	da		phx		                PHX
.390a68	5a		phy		                PHY
.390a69	8b		phb		                PHB
.390a6a	0b		phd		                PHD
.390a6b	08		php		                PHP
.390a6c	48		pha		                PHA             ; begin setdp macro
.390a6d	08		php		                PHP
.390a6e	c2 20		rep #$20	                REP #$20        ; set A long
.390a70	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a73	5b		tcd		                TCD
.390a74	28		plp		                PLP
.390a75	68		pla		                PLA             ; end setdp macro
.390a76	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a78	a5 11		lda $11		                LDA COLS_PER_LINE
.390a7a	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a7e	a5 13		lda $13		                LDA LINES_VISIBLE
.390a80	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a84	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a88	85 00		sta $00		                STA TMPPTR1
.390a8a	18		clc		                CLC
.390a8b	a9 00 a0	lda #$a000	                LDA #$A000
.390a8e	a8		tay		                TAY
.390a8f	65 11		adc $11		                ADC COLS_PER_LINE
.390a91	aa		tax		                TAX
.390a92	a5 00		lda $00		                LDA TMPPTR1
.390a94	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a97	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a99	18		clc		                CLC
.390a9a	a9 00 c0	lda #$c000	                LDA #$C000
.390a9d	a8		tay		                TAY
.390a9e	65 11		adc $11		                ADC COLS_PER_LINE
.390aa0	aa		tax		                TAX
.390aa1	a5 00		lda $00		                LDA TMPPTR1
.390aa3	54 af af	mvn $af,$af	                MVN $AF,$AF
.390aa6	a5 00		lda $00		                LDA TMPPTR1
.390aa8	48		pha		                PHA
.390aa9	18		clc		                CLC
.390aaa	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aad	85 00		sta $00		                STA TMPPTR1
.390aaf	a0 00 00	ldy #$0000	                LDY #0
.390ab2	a9 20 00	lda #$0020	                LDA #' '
.390ab5	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ab7	c8		iny		                INY
.390ab8	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390aba	d0 f9		bne $390ab5	                BNE clr_text
.390abc	68		pla		                PLA
.390abd	18		clc		                CLC
.390abe	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390ac1	85 00		sta $00		                STA TMPPTR1
.390ac3	a0 00 00	ldy #$0000	                LDY #0
.390ac6	a5 1e		lda $1e		                LDA CURCOLOR
.390ac8	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390aca	c8		iny		                INY
.390acb	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390acd	d0 f9		bne $390ac8	                BNE clr_color
.390acf	28		plp		                PLP
.390ad0	2b		pld		                PLD
.390ad1	ab		plb		                PLB
.390ad2	7a		ply		                PLY
.390ad3	fa		plx		                PLX
.390ad4	68		pla		                PLA
.390ad5	6b		rtl		                RTL
.390ad6	08		php		IPRINTH         PHP
.390ad7	48		pha		                PHA
.390ad8					iprinth1
.390ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.390ada	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390add	4a		lsr a		                LSR
.390ade	4a		lsr a		                LSR
.390adf	4a		lsr a		                LSR
.390ae0	4a		lsr a		                LSR
.390ae1	22 30 0b 39	jsl $390b30	                JSL iprint_digit
.390ae5	bd 00 00	lda $0000,x	                LDA #0,b,x
.390ae8	22 30 0b 39	jsl $390b30	                JSL iprint_digit
.390aec	ca		dex		                DEX
.390aed	88		dey		                DEY
.390aee	d0 e8		bne $390ad8	                BNE iprinth1
.390af0	68		pla		                PLA
.390af1	28		plp		                PLP
.390af2	6b		rtl		                RTL
.390af3					IPRINTAH
.390af3	48		pha		                PHA
.390af4	08		php		                PHP
.390af5	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390af9	08		php		                PHP                   ; Get the processor status into A
.390afa	e2 20		sep #$20	                SEP #$20        ; set A short
.390afc	c2 10		rep #$10	                REP #$10        ; set X long
.390afe	68		pla		                PLA
.390aff	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b01	c9 20		cmp #$20	                CMP #%00100000
.390b03	f0 14		beq $390b19	                BEQ eight_bit
.390b05	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b09	4a		lsr a		                LSR A
.390b0a	4a		lsr a		                LSR A
.390b0b	4a		lsr a		                LSR A
.390b0c	4a		lsr a		                LSR A
.390b0d	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b11	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b15	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b19	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b1d	4a		lsr a		                LSR A
.390b1e	4a		lsr a		                LSR A
.390b1f	4a		lsr a		                LSR A
.390b20	4a		lsr a		                LSR A
.390b21	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b25	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b29	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b2d	28		plp		                PLP
.390b2e	68		pla		                PLA
.390b2f	6b		rtl		                RTL
.390b30	da		phx		iprint_digit    PHX
.390b31	c2 20		rep #$20	                REP #$20        ; set A long
.390b33	29 0f 00	and #$000f	                AND #$0F
.390b36	aa		tax		                TAX
.390b37	bf c2 71 39	lda $3971c2,x	                LDA hex_digits,X
.390b3b	22 9e 07 39	jsl $39079e	                JSL IPUTC       ; Print the digit
.390b3f	fa		plx		                PLX
.390b40	6b		rtl		                RTL
.390b41	48		pha		ICLRSCREEN	    PHA
.390b42	da		phx		                PHX
.390b43	08		php		                PHP
.390b44	e2 20		sep #$20	                SEP #$20        ; set A short
.390b46	c2 10		rep #$10	                REP #$10        ; set X long
.390b48	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b4b	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b4d	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b51	e8		inx		                inx
.390b52	e0 00 20	cpx #$2000	                cpx #$2000
.390b55	d0 f6		bne $390b4d	                bne iclearloop0
.390b57	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b5a	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b5e	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b62	e8		inx		                inx
.390b63	e0 00 20	cpx #$2000	                cpx #$2000
.390b66	d0 f6		bne $390b5e	                bne iclearloop1
.390b68	28		plp		                PLP
.390b69	fa		plx		                PLX
.390b6a	68		pla		                PLA
.390b6b	6b		rtl		                RTL
.390b6c					COPYBYTES42
.390b6c	08		php		                PHP
.390b6d	0b		phd		                PHD
.390b6e	48		pha		                PHA             ; begin setdp macro
.390b6f	08		php		                PHP
.390b70	c2 20		rep #$20	                REP #$20        ; set A long
.390b72	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b75	5b		tcd		                TCD
.390b76	28		plp		                PLP
.390b77	68		pla		                PLA             ; end setdp macro
.390b78	e2 20		sep #$20	                SEP #$20        ; set A short
.390b7a	c2 10		rep #$10	                REP #$10        ; set X long
.390b7c	a0 00 00	ldy #$0000	                LDY #0
.390b7f	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b81	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b83	c8		iny		                INY
.390b84	c0 2a 00	cpy #$002a	                CPY #42
.390b87	d0 f6		bne $390b7f	                BNE copy_loop
.390b89	2b		pld		                PLD
.390b8a	28		plp		                PLP
.390b8b	60		rts		                RTS
.390b8c					ICOLORFLAG
.390b8c	48		pha		                PHA
.390b8d	da		phx		                PHX
.390b8e	5a		phy		                PHY
.390b8f	08		php		                PHP
.390b90	8b		phb		                PHB
.390b91	0b		phd		                PHD
.390b92	48		pha		                PHA             ; begin setdp macro
.390b93	08		php		                PHP
.390b94	c2 20		rep #$20	                REP #$20        ; set A long
.390b96	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b99	5b		tcd		                TCD
.390b9a	28		plp		                PLP
.390b9b	68		pla		                PLA             ; end setdp macro
.390b9c	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b9e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390ba1	85 04		sta $04		                STA TMPPTR2
.390ba3	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390ba6	85 06		sta $06		                STA TMPPTR2+2
.390ba8	a9 99 6e	lda #$6e99	                LDA #<>greet_clr_line1
.390bab	85 00		sta $00		                STA TMPPTR1
.390bad	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390bb0	85 02		sta $02		                STA TMPPTR1+2
.390bb2	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bb5	18		clc		                CLC
.390bb6	a5 04		lda $04		                LDA TMPPTR2
.390bb8	65 11		adc $11		                ADC COLS_PER_LINE
.390bba	85 04		sta $04		                STA TMPPTR2
.390bbc	a9 c3 6e	lda #$6ec3	                LDA #<>greet_clr_line2
.390bbf	85 00		sta $00		                STA TMPPTR1
.390bc1	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bc4	85 02		sta $02		                STA TMPPTR1+2
.390bc6	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bc9	18		clc		                CLC
.390bca	a5 04		lda $04		                LDA TMPPTR2
.390bcc	65 11		adc $11		                ADC COLS_PER_LINE
.390bce	85 04		sta $04		                STA TMPPTR2
.390bd0	a9 ed 6e	lda #$6eed	                LDA #<>greet_clr_line3
.390bd3	85 00		sta $00		                STA TMPPTR1
.390bd5	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bd8	85 02		sta $02		                STA TMPPTR1+2
.390bda	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bdd	18		clc		                CLC
.390bde	a5 04		lda $04		                LDA TMPPTR2
.390be0	65 11		adc $11		                ADC COLS_PER_LINE
.390be2	85 04		sta $04		                STA TMPPTR2
.390be4	a9 17 6f	lda #$6f17	                LDA #<>greet_clr_line4
.390be7	85 00		sta $00		                STA TMPPTR1
.390be9	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390bec	85 02		sta $02		                STA TMPPTR1+2
.390bee	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bf1	18		clc		                CLC
.390bf2	a5 04		lda $04		                LDA TMPPTR2
.390bf4	65 11		adc $11		                ADC COLS_PER_LINE
.390bf6	85 04		sta $04		                STA TMPPTR2
.390bf8	a9 41 6f	lda #$6f41	                LDA #<>greet_clr_line5
.390bfb	85 00		sta $00		                STA TMPPTR1
.390bfd	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390c00	85 02		sta $02		                STA TMPPTR1+2
.390c02	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390c05	2b		pld		                PLD
.390c06	ab		plb		                PLB
.390c07	28		plp		                PLP
.390c08	7a		ply		                PLY
.390c09	fa		plx		                PLX
.390c0a	68		pla		                PLA
.390c0b	6b		rtl		                RTL
.390c0c	0b		phd		IINITCHLUT		  PHD
.390c0d	08		php		                PHP
.390c0e	48		pha		                PHA
.390c0f	da		phx		                PHX
.390c10	e2 20		sep #$20	                SEP #$20        ; set A short
.390c12	e2 10		sep #$10	                SEP #$10        ; set X short
.390c14	a2 00		ldx #$00					        LDX	#$00
.390c16	bf 6b 6f 39	lda $396f6b,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c1a	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c1e	e8		inx		                inx
.390c1f	e0 40		cpx #$40	                cpx #$40
.390c21	d0 f3		bne $390c16	                bne lutinitloop0
.390c23	a2 00		ldx #$00	                LDX	#$00
.390c25	bf ab 6f 39	lda $396fab,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c29	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c2d	e8		inx		                INX
.390c2e	e0 40		cpx #$40	                CPX #$40
.390c30	d0 f3		bne $390c25	                bne lutinitloop1
.390c32	c2 20		rep #$20	                REP #$20        ; set A long
.390c34	c2 10		rep #$10	                REP #$10        ; set X long
.390c36	fa		plx		                PLX
.390c37	68		pla		                PLA
.390c38	28		plp		                PLP
.390c39	2b		pld		                PLD
.390c3a	6b		rtl		                RTL
.390c3b					IINITGAMMATABLE
.390c3b	e2 20		sep #$20	                SEP #$20        ; set A short
.390c3d	c2 10		rep #$10	                REP #$10        ; set X long
.390c3f	a2 00 00	ldx #$0000	                ldx #$0000
.390c42	bf 00 76 39	lda $397600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c46	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c4a	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c4e	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c52	e8		inx		                inx
.390c53	e0 00 01	cpx #$0100	                cpx #$0100
.390c56	d0 ea		bne $390c42	                bne initgammaloop
.390c58	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c5a	6b		rtl		                RTL
.390c5b	48		pha		IINITALLLUT     PHA
.390c5c	da		phx		                PHX
.390c5d	a2 00 00	ldx #$0000	                LDX #$0000
.390c60	e2 20		sep #$20	                SEP #$20        ; set A short
.390c62	a9 00		lda #$00	                LDA #$00
.390c64	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c66					iinit_lut_loop
.390c66	86 02		stx $02		                STX $02
.390c68	a6 0a		ldx $0a		                LDX $0A
.390c6a	bf 00 75 39	lda $397500,x	                LDA GAMMA_2_2_Tbl, x
.390c6e	49 55		eor #$55	                EOR  #$55
.390c70	a6 02		ldx $02		                LDX $02
.390c72	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c76	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c7a	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c7e	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c82	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c86	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c8a	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c8e	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c92	e8		inx		                inx
.390c93	86 02		stx $02		                STX $02
.390c95	a6 0a		ldx $0a		                LDX $0A
.390c97	bf 00 77 39	lda $397700,x	                LDA RANDOM_LUT_Tbl, x
.390c9b	a6 02		ldx $02		                LDX $02
.390c9d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ca1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ca5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ca9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cad	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cb1	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cb5	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cb9	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cbd	e8		inx		                inx
.390cbe	86 02		stx $02		                STX $02
.390cc0	a6 0a		ldx $0a		                LDX $0A
.390cc2	bf 00 76 39	lda $397600,x	                LDA GAMMA_1_8_Tbl, x
.390cc6	49 aa		eor #$aa	                EOR  #$AA
.390cc8	a6 02		ldx $02		                LDX $02
.390cca	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cce	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cd2	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cd6	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cda	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cde	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ce2	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ce6	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cea	e8		inx		                inx
.390ceb	a9 ff		lda #$ff	                LDA #$FF
.390ced	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cf1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cf5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cf9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cfd	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d01	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d05	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d09	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d0d	e6 0a		inc $0a		                inc $0A
.390d0f	e8		inx		                inx
.390d10	e0 00 04	cpx #$0400	                cpx #$0400
.390d13	f0 03		beq $390d18	                beq iinit_lut_exit
.390d15	82 4e ff	brl $390c66	                brl iinit_lut_loop
.390d18					iinit_lut_exit
.390d18	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d1a	fa		plx		                PLX
.390d1b	68		pla		                PLA
.390d1c	6b		rtl		                RTL
.390d1d	48		pha		IINITVKYTXTMODE PHA
.390d1e	08		php		                PHP
.390d1f	c2 20		rep #$20	                REP #$20        ; set A long
.390d21	a9 00 00	lda #$0000	                LDA #0
.390d24	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d28	a9 01 01	lda #$0101	                LDA #$101
.390d2b	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d2f					INITVICKYMODE
.390d2f	c2 20		rep #$20	                REP #$20        ; set A long
.390d31	a9 01 00	lda #$0001	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d34	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d38					INITVICKYBORDER
.390d38	e2 20		sep #$20	                SEP #$20        ; set A short
.390d3a	a9 20		lda #$20	                LDA #$20
.390d3c	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d40	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d44	a9 00		lda #$00	                LDA #$00
.390d46	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d4a	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d4c	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d50	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d52	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d56	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d5a	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d5c	22 63 0d 39	jsl $390d63	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d60	28		plp		                PLP
.390d61	68		pla		                PLA
.390d62	6b		rtl		                RTL
.390d63					ISETSIZES
.390d63	48		pha		                PHA
.390d64	da		phx		                PHX
.390d65	5a		phy		                PHY
.390d66	8b		phb		                PHB
.390d67	0b		phd		                PHD
.390d68	08		php		                PHP
.390d69	48		pha		                PHA             ; begin setdp macro
.390d6a	08		php		                PHP
.390d6b	c2 20		rep #$20	                REP #$20        ; set A long
.390d6d	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d70	5b		tcd		                TCD
.390d71	28		plp		                PLP
.390d72	68		pla		                PLA             ; end setdp macro
.390d73	48		pha		                PHA             ; begin setdbr macro
.390d74	08		php		                PHP
.390d75	e2 20		sep #$20	                SEP #$20        ; set A short
.390d77	a9 00		lda #$00	                LDA #0
.390d79	48		pha		                PHA
.390d7a	ab		plb		                PLB
.390d7b	28		plp		                PLP
.390d7c	68		pla		                PLA             ; end setdbr macro
.390d7d	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d7f	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d83	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d85	0a		asl a		                ASL A
.390d86	aa		tax		                TAX                         ; Index to the col/line count in X
.390d87	c2 20		rep #$20	                REP #$20        ; set A long
.390d89	bf 06 0e 39	lda $390e06,x	                LDA cols_by_res,X           ; Get the number of columns
.390d8d	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390d8f	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390d91	bf 0e 0e 39	lda $390e0e,x	                LDA lines_by_res,X          ; Get the number of lines
.390d95	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390d97	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390d99	e2 20		sep #$20	                SEP #$20        ; set A short
.390d9b	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390d9f	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390da1	f0 5c		beq $390dff	                BEQ done                    ; No border... the sizes are correct now
.390da3	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390da7	29 3f		and #$3f	                AND #$3F
.390da9	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dab	d0 04		bne $390db1	                BNE frac_width
.390dad	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dae	4a		lsr a		                LSR A
.390daf	80 03		bra $390db4	                BRA store_width
.390db1	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390db2	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390db3	1a		inc a		                INC A
.390db4	85 00		sta $00		store_width     STA TMPPTR1
.390db6	64 01		stz $01		                STZ TMPPTR1+1
.390db8	e2 20		sep #$20	                SEP #$20        ; set A short
.390dba	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390dbe	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dc0	f0 04		beq $390dc6	                BEQ adjust_width            ; No... just adjust the width of the screen
.390dc2	c2 20		rep #$20	                REP #$20        ; set A long
.390dc4	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390dc6					adjust_width
.390dc6	c2 20		rep #$20	                REP #$20        ; set A long
.390dc8	38		sec		                SEC
.390dc9	a5 11		lda $11		                LDA COLS_PER_LINE
.390dcb	e5 00		sbc $00		                SBC TMPPTR1
.390dcd	85 0f		sta $0f		                STA COLS_VISIBLE
.390dcf	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390dd3	29 3f 00	and #$003f	                AND #$3F
.390dd6	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dd9	d0 04		bne $390ddf	                BNE frac_height
.390ddb	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390ddc	4a		lsr a		                LSR A
.390ddd	80 03		bra $390de2	                BRA store_height
.390ddf	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390de0	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390de1	1a		inc a		                INC A
.390de2	85 00		sta $00		store_height    STA TMPPTR1
.390de4	64 01		stz $01		                STZ TMPPTR1+1
.390de6	e2 20		sep #$20	                SEP #$20        ; set A short
.390de8	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390dec	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dee	f0 04		beq $390df4	                BEQ adjust_height           ; No... just adjust the height of the screen
.390df0	c2 20		rep #$20	                REP #$20        ; set A long
.390df2	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390df4					adjust_height
.390df4	c2 20		rep #$20	                REP #$20        ; set A long
.390df6	38		sec		                SEC
.390df7	a5 15		lda $15		                LDA LINES_MAX
.390df9	e5 00		sbc $00		                SBC TMPPTR1
.390dfb	85 13		sta $13		                STA LINES_VISIBLE
.390dfd	c2 30		rep #$30	                REP #$30        ; set A&X long
.390dff	28		plp		done            PLP
.390e00	2b		pld		                PLD
.390e01	ab		plb		                PLB
.390e02	7a		ply		                PLY
.390e03	fa		plx		                PLX
.390e04	68		pla		                PLA
.390e05	6b		rtl		                RTL
>390e06	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e0e	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e16					IINITVKYGRPMODE
.390e16	48		pha		                PHA
.390e17	e2 20		sep #$20	                SEP #$20        ; set A short
.390e19	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e1b	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e1f	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e21	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e25	a9 c0		lda #$c0	                LDA #$C0
.390e27	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e2b	a9 00		lda #$00	                LDA #$00
.390e2d	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e31	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e33	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e37	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e39	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e3d	a9 c0		lda #$c0	                LDA #$C0
.390e3f	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e43	a9 00		lda #$00	                LDA #$00
.390e45	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e49	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e4b	68		pla		                PLA
.390e4c	6b		rtl		                RTL
.390e4d					IINITTILEMODE
.390e4d	6b		rtl		                RTL
.390e4e	48		pha		IINITSPRITE     PHA
.390e4f	e2 20		sep #$20	                SEP #$20        ; set A short
.390e51	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e53	8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e57	8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e5b	8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e5f	8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e63	8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e67	8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e6b	8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e6f	8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e73	8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e77	8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e7b	8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e7f	8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390e83	8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390e87	8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390e8b	8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390e8f	8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390e93	8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390e97	a9 09		lda #$09	                LDA #$09
.390e99	8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390e9d	8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390ea1	8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390ea5	8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390ea9	8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390ead	8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390eb1	8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390eb5	8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390eb9	8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390ebd	8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390ec1	8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390ec5	8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390ec9	8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390ecd	8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390ed1	8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390ed5	8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390ed9	8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390edd	a9 00		lda #$00	                LDA #$00
.390edf	8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390ee3	a9 04		lda #$04	                LDA #$04
.390ee5	8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390ee9	a9 08		lda #$08	                LDA #$08
.390eeb	8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390eef	a9 0c		lda #$0c	                LDA #$0C
.390ef1	8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390ef5	a9 10		lda #$10	                LDA #$10
.390ef7	8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390efb	a9 14		lda #$14	                LDA #$14
.390efd	8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390f01	a9 18		lda #$18	                LDA #$18
.390f03	8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f07	a9 1c		lda #$1c	                LDA #$1C
.390f09	8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f0d	a9 20		lda #$20	                LDA #$20
.390f0f	8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f13	a9 24		lda #$24	                LDA #$24
.390f15	8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f19	a9 28		lda #$28	                LDA #$28
.390f1b	8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f1f	a9 2c		lda #$2c	                LDA #$2C
.390f21	8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f25	a9 30		lda #$30	                LDA #$30
.390f27	8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f2b	a9 34		lda #$34	                LDA #$34
.390f2d	8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f31	a9 38		lda #$38	                LDA #$38
.390f33	8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f37	a9 3c		lda #$3c	                LDA #$3C
.390f39	8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f3d	a9 40		lda #$40	                LDA #$40
.390f3f	8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f43	a9 00		lda #$00	                LDA #$00
.390f45	8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f49	8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f4d	8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f51	8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f55	8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f59	8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f5d	8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f61	8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f65	8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f69	8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f6d	8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f71	8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f75	8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f79	8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f7d	8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f81	8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390f85	8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390f89	68		pla		                PLA
.390f8a	6b		rtl		                RTL
.390f8b					IINITFONTSET
.390f8b	e2 20		sep #$20	                SEP #$20        ; set A short
.390f8d	c2 10		rep #$10	                REP #$10        ; set X long
.390f8f	a2 00 00	ldx #$0000	                LDX #$0000
.390f92					initFontsetbranch0
.390f92	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390f96	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390f9a	e8		inx		                INX
.390f9b	e0 00 08	cpx #$0800	                CPX #$0800
.390f9e	d0 f2		bne $390f92	                BNE initFontsetbranch0
.390fa0	ea		nop		                NOP
.390fa1	a2 00 00	ldx #$0000	                LDX #$0000
.390fa4					initFontsetbranch1
.390fa4	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390fa8	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390fac	e8		inx		                INX
.390fad	e0 00 08	cpx #$0800	                CPX #$0800
.390fb0	d0 f2		bne $390fa4	                BNE initFontsetbranch1
.390fb2	ea		nop		                NOP
.390fb3	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fb5	6b		rtl		                RTL
.390fb6					INITMOUSEPOINTER
.390fb6	e2 20		sep #$20	                SEP #$20        ; set A short
.390fb8	c2 10		rep #$10	                REP #$10        ; set X long
.390fba	a2 00 00	ldx #$0000	                LDX #$0000
.390fbd					FILL_MOUSE_MARKER
.390fbd	bf 00 78 39	lda $397800,x	                LDA @lMOUSE_POINTER_PTR,X
.390fc1	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390fc5	e8		inx		                INX
.390fc6	e0 00 01	cpx #$0100	                CPX #$0100
.390fc9	d0 f2		bne $390fbd	                BNE FILL_MOUSE_MARKER
.390fcb	ea		nop		                nop
.390fcc	a9 01		lda #$01	                LDA #$01
.390fce	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390fd2	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fd4	6b		rtl		                RTL
.390fd5	48		pha		IINITCURSOR     PHA
.390fd6	e2 20		sep #$20	                SEP #$20        ; set A short
.390fd8	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fda	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fde	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fe0	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390fe4	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe6	a9 00 00	lda #$0000	                LDA #$0000;
.390fe9	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390fed	a9 06 00	lda #$0006	                LDA #$0006;
.390ff0	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ff4	68		pla		                PLA
.390ff5	6b		rtl		                RTL
.390ff6	0b		phd		IINITSUPERIO	  PHD
.390ff7	08		php		                PHP
.390ff8	48		pha		                PHA
.390ff9	e2 20		sep #$20	                SEP #$20        ; set A short
.390ffb	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ffd	8f 23 11 af	sta $af1123	                STA GP10_REG
.391001	af 23 11 af	lda $af1123	                LDA GP10_REG
.391005	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391007	8f 24 11 af	sta $af1124	                STA GP11_REG
.39100b	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39100d	8f 25 11 af	sta $af1125	                STA GP12_REG
.391011	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391013	8f 26 11 af	sta $af1126	        				STA GP13_REG
.391017	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.391019	8f 27 11 af	sta $af1127	        				STA GP14_REG
.39101d	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.39101f	8f 28 11 af	sta $af1128	        				STA GP15_REG
.391023	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.391025	8f 29 11 af	sta $af1129	        				STA GP16_REG
.391029	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.39102b	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.39102f	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.391031	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391035	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391037	8f 2f 11 af	sta $af112f					        STA GP24_REG
.39103b	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.39103d	8f 30 11 af	sta $af1130					        STA GP25_REG
.391041	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.391043	8f 31 11 af	sta $af1131					        STA GP26_REG
.391047	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.391049	8f 33 11 af	sta $af1133					        STA GP30_REG
.39104d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.39104f	8f 34 11 af	sta $af1134					        STA GP31_REG
.391053	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391055	8f 35 11 af	sta $af1135					        STA GP32_REG
.391059	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.39105b	8f 36 11 af	sta $af1136					        STA GP33_REG
.39105f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.391061	8f 37 11 af	sta $af1137					        STA GP34_REG
.391065	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391067	8f 38 11 af	sta $af1138					        STA GP35_REG
.39106b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.39106d	8f 39 11 af	sta $af1139					        STA GP36_REG
.391071	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.391073	8f 3a 11 af	sta $af113a					        STA GP37_REG
.391077	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391079	8f 3d 11 af	sta $af113d					        STA GP42_REG
.39107d	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.39107f	8f 3e 11 af	sta $af113e					        STA GP43_REG
.391083	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391085	8f 3f 11 af	sta $af113f					        STA GP50_REG
.391089	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.39108b	8f 40 11 af	sta $af1140					        STA GP51_REG
.39108f	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.391091	8f 41 11 af	sta $af1141					        STA GP52_REG
.391095	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391097	8f 42 11 af	sta $af1142					        STA GP53_REG
.39109b	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.39109d	8f 43 11 af	sta $af1143					        STA GP54_REG
.3910a1	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.3910a3	8f 44 11 af	sta $af1144					        STA GP55_REG
.3910a7	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910a9	8f 45 11 af	sta $af1145					        STA GP56_REG
.3910ad	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910af	8f 46 11 af	sta $af1146					        STA GP57_REG
.3910b3	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910b5	8f 47 11 af	sta $af1147					        STA GP60_REG
.3910b9	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910bb	8f 48 11 af	sta $af1148					        STA GP61_REG
.3910bf	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.3910c1	8f 4b 11 af	sta $af114b					        STA GP1_REG
.3910c5	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.3910c7	8f 4c 11 af	sta $af114c					        STA GP2_REG
.3910cb	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.3910cd	8f 4d 11 af	sta $af114d					        STA GP3_REG
.3910d1	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.3910d3	8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910d7	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910d9	8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910dd	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910df	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910e3	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910e5	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910e9	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910eb	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910ef	c2 20		rep #$20	                REP #$20        ; set A long
.3910f1	68		pla		                PLA
.3910f2	28		plp						        PLP
.3910f3	2b		pld					        	PLD
.3910f4	6b		rtl		                RTL
.3910f5	0b		phd		IINITKEYBOARD	  PHD
.3910f6	08		php						        PHP
.3910f7	48		pha						        PHA
.3910f8	da		phx						        PHX
.3910f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3910fb	c2 10		rep #$10	                REP #$10        ; set X long
.3910fd	18		clc		                CLC
.3910fe	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf ;
.391101	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.391103	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391107	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.39110a	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.39110e	c9 55		cmp #$55					        CMP #$55
.391110	f0 03		beq $391115					        BEQ	passAAtest
.391112	82 89 00	brl $39119e	                BRL initkb_loop_out
.391115					passAAtest
.391115	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391117	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.39111b	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.39111e	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.391122	c9 00		cmp #$00					        CMP #$00			;Should be 00
.391124	f0 03		beq $391129					        BEQ	passABtest
.391126	82 75 00	brl $39119e	                BRL initkb_loop_out
.391129					passABtest
.391129	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.39112b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39112f	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf ;
.391132	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.391134	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391138	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf ;
.39113b	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.39113d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391141	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391144	ca		dex		DLY_LOOP1       DEX
.391145	ea		nop		                NOP
.391146	ea		nop		                NOP
.391147	ea		nop		                NOP
.391148	ea		nop		                NOP
.391149	ea		nop		                NOP
.39114a	ea		nop		                NOP
.39114b	ea		nop		                NOP
.39114c	ea		nop		                NOP
.39114d	e0 00 00	cpx #$0000	                CPX #$0000
.391150	d0 f2		bne $391144	                BNE DLY_LOOP1
.391152	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.391155	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391159					DO_CMD_F4_AGAIN
.391159	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf ;
.39115c	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.39115e	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.391162	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.391165	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391169	c9 fa		cmp #$fa	                CMP #$FA
.39116b	d0 ec		bne $391159	                BNE DO_CMD_F4_AGAIN
.39116d	20 c4 11	jsr $3911c4	                JSR INIT_MOUSE
.391170	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.391174	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.39117a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.39117e	29 01		and #$01	                AND #FNX1_INT00_KBD
.391180	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391184	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391188	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.39118a	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39118e	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.391192	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.391194	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391198	a2 67 70	ldx #$7067	                LDX #<>Success_kb_init
.39119b	38		sec		                SEC
.39119c	b0 03		bcs $3911a1	                BCS InitSuccess
.39119e	a2 79 70	ldx #$7079	initkb_loop_out LDX #<>Failed_kb_init
.3911a1	22 7e 07 39	jsl $39077e	InitSuccess     JSL IPRINT       ; print Message
.3911a5	c2 20		rep #$20	                REP #$20        ; set A long
.3911a7	c2 10		rep #$10	                REP #$10        ; set X long
.3911a9	fa		plx		                PLX
.3911aa	68		pla		                PLA
.3911ab	28		plp						        PLP
.3911ac	2b		pld						        PLD
.3911ad	6b		rtl		                RTL
.3911ae					Poll_Inbuf
.3911ae	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911b2	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911b4	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911b6	f0 f6		beq $3911ae					        BEQ Poll_Inbuf
.3911b8	60		rts		                RTS
.3911b9					Poll_Outbuf
.3911b9	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911bd	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3911bf	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3911c1	d0 f6		bne $3911b9	                BNE Poll_Outbuf
.3911c3	60		rts		                RTS
.3911c4					INIT_MOUSE
.3911c4	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.3911c7	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3911c9	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911cd					DO_CMD_A9_AGAIN
.3911cd	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.3911d0	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3911d2	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911d6	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.3911d9	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911dd	c9 00		cmp #$00	                CMP #$00
.3911df	d0 ec		bne $3911cd	                BNE DO_CMD_A9_AGAIN
.3911e1	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.3911e4	a9 20		lda #$20	                LDA #$20
.3911e6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911ea	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.3911ed	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911f1	09 02		ora #$02	                ORA #$02
.3911f3	48		pha		                PHA
.3911f4	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.3911f7	a9 60		lda #$60	                LDA #$60
.3911f9	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911fd	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf ;
.391200	68		pla		                PLA
.391201	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391205	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391207	20 2a 12	jsr $39122a	                JSR MOUSE_WRITE
.39120a	20 3d 12	jsr $39123d	                JSR MOUSE_READ
.39120d	a9 e8		lda #$e8	                LDA #$E8
.39120f	20 2a 12	jsr $39122a	                JSR MOUSE_WRITE
.391212	20 3d 12	jsr $39123d	                JSR MOUSE_READ
.391215	a9 00		lda #$00	                LDA #$00
.391217	20 2a 12	jsr $39122a	                JSR MOUSE_WRITE
.39121a	20 3d 12	jsr $39123d	                JSR MOUSE_READ
.39121d	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.39121f	20 2a 12	jsr $39122a	                JSR MOUSE_WRITE
.391222	20 3d 12	jsr $39123d	                JSR MOUSE_READ
.391225	a9 00		lda #$00	                LDA #$00
.391227	85 e0		sta $e0		                STA MOUSE_PTR
.391229	60		rts		                RTS
.39122a					MOUSE_WRITE
.39122a	48		pha		                PHA
.39122b	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.39122e	a9 d4		lda #$d4	                LDA #$D4
.391230	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391234	20 ae 11	jsr $3911ae	                JSR Poll_Inbuf
.391237	68		pla		                PLA
.391238	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39123c	60		rts		                RTS
.39123d					MOUSE_READ
.39123d	20 b9 11	jsr $3911b9	                JSR Poll_Outbuf ;
.391240	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391244	60		rts		                RTS
.391245	48		pha		INITRTC         PHA
.391246	08		php		                PHP
.391247	e2 20		sep #$20	                SEP #$20        ; set A short
.391249	a9 00		lda #$00	                LDA #0
.39124b	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39124f	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391253	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391257	09 04		ora #$04	                ORA #%00000100
.391259	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39125d	28		plp		                PLP
.39125e	68		pla		                PLA
.39125f	6b		rtl		                RTL
.391260					ITESTSID
.391260	a9 0f		lda #$0f	                LDA #$0F
.391262	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391266	a9 be		lda #$be	                LDA #$BE
.391268	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39126c	a9 f8		lda #$f8	                LDA #$F8
.39126e	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391272	a9 11		lda #$11	                LDA #$11
.391274	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391278	a9 25		lda #$25	                LDA #$25
.39127a	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39127e	a9 11		lda #$11	                LDA #$11
.391280	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391284	a9 08		lda #$08	                LDA #$08
.391286	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39128a	a9 00		lda #$00	                LDA #$00
.39128c	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391290	a9 c6		lda #$c6	                LDA #$C6
.391292	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391296	a9 08		lda #$08	                LDA #$08
.391298	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39129c	a9 00		lda #$00	                LDA #$00
.39129e	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.3912a2	a9 08		lda #$08	                LDA #$08
.3912a4	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912a8	a9 c6		lda #$c6	                LDA #$C6
.3912aa	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912ae	a9 08		lda #$08	                LDA #$08
.3912b0	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912b4	a9 00		lda #$00	                LDA #$00
.3912b6	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912ba	a9 08		lda #$08	                LDA #$08
.3912bc	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3912c0	a9 c6		lda #$c6	                LDA #$C6
.3912c2	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3912c6	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3912c8	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912cc	a9 01		lda #$01	                LDA #$01
.3912ce	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3912d2	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912d4	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912d8	a9 08		lda #$08	                LDA #$08
.3912da	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912de	a9 08		lda #$08	                LDA #$08
.3912e0	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912e4	a9 0c		lda #$0c	                LDA #$0C
.3912e6	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912ea	a9 04		lda #$04	                LDA #$04
.3912ec	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912f0	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912f2	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912f6	a9 08		lda #$08	                LDA #$08
.3912f8	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912fc	a9 08		lda #$08	                LDA #$08
.3912fe	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391302	a9 00		lda #$00	                LDA #$00
.391304	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391308	a9 08		lda #$08	                LDA #$08
.39130a	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.39130e	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391310	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391314	a9 08		lda #$08	                LDA #$08
.391316	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39131a	a9 08		lda #$08	                LDA #$08
.39131c	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391320	a9 10		lda #$10	                LDA #$10
.391322	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391326	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39132a	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39132e	6b		rtl		                RTL
.39132f	48		pha		IINITCODEC      PHA
.391330	c2 20		rep #$20	                REP #$20        ; set A long
.391332	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391335	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391339	a9 01 00	lda #$0001	                LDA #$0001
.39133c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391340	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391343	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391346	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39134a	a9 01 00	lda #$0001	                LDA #$0001
.39134d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391351	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391354	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391357	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39135b	a9 01 00	lda #$0001	                LDA #$0001
.39135e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391362	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391365	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391368	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39136c	a9 01 00	lda #$0001	                LDA #$0001
.39136f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391373	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391376	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391379	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39137d	a9 01 00	lda #$0001	                LDA #$0001
.391380	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391384	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391387	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.39138a	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39138e	a9 01 00	lda #$0001	                LDA #$0001
.391391	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391395	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.391398	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.39139b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39139f	a9 01 00	lda #$0001	                LDA #$0001
.3913a2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913a6	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.3913a9	68		pla		                PLA
.3913aa	6b		rtl		                RTL
.3913ab					IRESETCODEC
.3913ab	c2 20		rep #$20	                REP #$20        ; set A long
.3913ad	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3913b0	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913b4	a9 01 00	lda #$0001	                LDA #$0001
.3913b7	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913bb	20 bf 13	jsr $3913bf	                JSR CODEC_TRF_FINISHED
.3913be	6b		rtl		                RTL
.3913bf					CODEC_TRF_FINISHED
.3913bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3913c1	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3913c5	29 01		and #$01	                AND #$01
.3913c7	c9 01		cmp #$01	                CMP #$01
.3913c9	f0 f6		beq $3913c1	                BEQ CODEC_LOOP
.3913cb	c2 20		rep #$20	                REP #$20        ; set A long
.3913cd	60		rts		                RTS
.3913ce					IBM_FILL_SCREEN
.3913ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913d0	a9 00 00	lda #$0000	                LDA #$0000
.3913d3	a2 00 00	ldx #$0000	                LDX #$0000
.3913d6					BM_FILL_SCREEN_LOOPY
.3913d6	a0 00 00	ldy #$0000	                LDY #$0000
.3913d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3913db					BM_FILL_SCREEN_LOOPX
.3913db	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913dd	c8		iny		                INY
.3913de	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913e0	d0 f9		bne $3913db	                BNE BM_FILL_SCREEN_LOOPX
.3913e2	20 ed 13	jsr $3913ed	                JSR BM_FILL_COMPUTE_Y_DST
.3913e5	e8		inx		                INX
.3913e6	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913e8	d0 ec		bne $3913d6	                BNE BM_FILL_SCREEN_LOOPY
.3913ea	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913ec	6b		rtl		                RTL
.3913ed					BM_FILL_COMPUTE_Y_DST
.3913ed	c2 20		rep #$20	                REP #$20        ; set A long
.3913ef	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913f1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913f5	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913f7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913fb	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3913fe	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391402	a9 00 00	lda #$0000	                LDA #$0000
.391405	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391409	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39140d	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39140f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391413	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391415	a9 00 00	lda #$0000	                LDA #$0000
.391418	60		rts		                RTS
.391419					IBMP_PARSER
.391419	c2 30		rep #$30	                REP #$30        ; set A&X long
.39141b	a0 00 00	ldy #$0000	                LDY #$0000
.39141e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391420	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391423	f0 03		beq $391428	                BEQ IBMP_PARSER_CONT
.391425	82 04 01	brl $39152c	                BRL BMP_PARSER_END_WITH_ERROR
.391428					IBMP_PARSER_CONT
.391428	a0 02 00	ldy #$0002	                LDY #$0002
.39142b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39142d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391431	a0 04 00	ldy #$0004	                LDY #$0004
.391434	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391436	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39143a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39143d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391441	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391445	18		clc		                CLC
.391446	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39144a	85 50		sta $50		                STA BMP_FILE_SIZE
.39144c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391450	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391452	a0 12 00	ldy #$0012	                LDY #$0012
.391455	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391457	85 40		sta $40		                STA BMP_X_SIZE
.391459	a0 16 00	ldy #$0016	                LDY #$0016
.39145c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39145e	85 42		sta $42		                STA BMP_Y_SIZE
.391460	a0 2e 00	ldy #$002e	                LDY #$002E
.391463	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391465	0a		asl a		                ASL A; Multiply by 2
.391466	0a		asl a		                ASL A; Multiply by 2
.391467	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391469	e0 00 00	cpx #$0000	                CPX #$0000
.39146c	d0 05		bne $391473	                BNE BMP_LUT1_PICK
.39146e	20 34 15	jsr $391534	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391471	80 08		bra $39147b	                BRA DONE_TRANSFER_LUT;
.391473					  BMP_LUT1_PICK
.391473	e0 01 00	cpx #$0001	                CPX #$0001
.391476	d0 03		bne $39147b	                BNE BMP_LUT2_PICK
.391478	20 64 15	jsr $391564	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39147b					  BMP_LUT2_PICK
.39147b					  DONE_TRANSFER_LUT
.39147b	a5 56		lda $56		                LDA BMP_POSITION_Y
.39147d	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.391481	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391483	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391487	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.39148b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39148f	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391493	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391497	a5 54		lda $54		                LDA BMP_POSITION_X
.391499	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39149d	a9 00 00	lda #$0000	                LDA #$0000
.3914a0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914a4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914a8	85 f0		sta $f0		                STA USER_TEMP
.3914aa	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3914ae	85 f2		sta $f2		                STA USER_TEMP+2
.3914b0	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914b2	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914b6	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914b8	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914bc	a5 f0		lda $f0		                LDA USER_TEMP
.3914be	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3914c2	a5 f2		lda $f2		                LDA USER_TEMP+2
.3914c4	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3914c8	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3914cc	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914ce	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3914d2	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914d4	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914d6	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914da	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914dc	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914e0	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914e2	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914e6	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914e8	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914ec	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914f0	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914f2	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914f6	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914f8	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914fa	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914fe	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391500	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391504	18		clc		                CLC
.391505	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391507	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39150a	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39150d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391511	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391514	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391518	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39151c	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39151e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391522	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391524	20 94 15	jsr $391594	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391527	a2 b5 70	ldx #$70b5	                LDX #<>bmp_parser_msg0
.39152a	80 03		bra $39152f	                BRA BMP_PARSER_END_NO_ERROR
.39152c					BMP_PARSER_END_WITH_ERROR
.39152c	a2 a1 70	ldx #$70a1	                LDX #<>bmp_parser_err0
.39152f					BMP_PARSER_END_NO_ERROR
.39152f	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.391533	6b		rtl		                RTL
.391534					BMP_PARSER_UPDATE_LUT0
.391534	38		sec		                SEC
.391535	a0 7a 00	ldy #$007a	                LDY #$007A
.391538	a2 00 00	ldx #$0000	                LDX #$0000
.39153b	e2 20		sep #$20	                SEP #$20        ; set A short
.39153d					BMP_PARSER_UPDATE_LOOP
.39153d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39153f	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391543	c8		iny		                INY
.391544	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391546	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39154a	c8		iny		                INY
.39154b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39154d	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391551	c8		iny		                INY
.391552	a9 80		lda #$80	                LDA #$80
.391554	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391558	c8		iny		                INY ; For the Alpha Value, nobody cares
.391559	e8		inx		                INX
.39155a	e8		inx		                INX
.39155b	e8		inx		                INX
.39155c	e8		inx		                INX
.39155d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39155f	d0 dc		bne $39153d	                BNE BMP_PARSER_UPDATE_LOOP
.391561	c2 20		rep #$20	                REP #$20        ; set A long
.391563	60		rts		                RTS
.391564					BMP_PARSER_UPDATE_LUT1
.391564	38		sec		                SEC
.391565	a0 36 00	ldy #$0036	                LDY #$0036
.391568	a2 00 00	ldx #$0000	                LDX #$0000
.39156b	e2 20		sep #$20	                SEP #$20        ; set A short
.39156d					PALETTE_LUT1_LOOP
.39156d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39156f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391573	c8		iny		                INY
.391574	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391576	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39157a	c8		iny		                INY
.39157b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39157d	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391581	c8		iny		                INY
.391582	a9 80		lda #$80	                LDA #$80
.391584	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391588	c8		iny		                INY ; For the Alpha Value, nobody cares
.391589	e8		inx		                INX
.39158a	e8		inx		                INX
.39158b	e8		inx		                INX
.39158c	e8		inx		                INX
.39158d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39158f	d0 dc		bne $39156d	                BNE PALETTE_LUT1_LOOP
.391591	c2 20		rep #$20	                REP #$20        ; set A long
.391593	60		rts		                RTS
.391594					BMP_PARSER_DMA_SHIT_OUT
.391594	a2 00 00	ldx #$0000	                LDX #$0000
.391597					BMP_PARSER_LOOPY
.391597	a0 00 00	ldy #$0000	                LDY #$0000
.39159a	e2 20		sep #$20	                SEP #$20        ; set A short
.39159c					BMP_PARSER_LOOPX
.39159c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39159e	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3915a0	c8		iny		                INY
.3915a1	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3915a3	d0 f7		bne $39159c	                BNE BMP_PARSER_LOOPX
.3915a5	20 b1 15	jsr $3915b1	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915a8	20 cc 15	jsr $3915cc	                JSR BMP_PARSER_COMPUTE_Y_DST
.3915ab	e8		inx		                INX
.3915ac	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3915ae	d0 e7		bne $391597	                BNE BMP_PARSER_LOOPY
.3915b0	60		rts		                RTS
.3915b1					BMP_PARSER_COMPUTE_Y_SRC
.3915b1	c2 20		rep #$20	                REP #$20        ; set A long
.3915b3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3915b5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3915b9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3915bb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3915bf	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3915c3	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3915c5	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3915c9	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3915cb	60		rts		                RTS
.3915cc					BMP_PARSER_COMPUTE_Y_DST
.3915cc	c2 20		rep #$20	                REP #$20        ; set A long
.3915ce	18		clc		                CLC
.3915cf	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3915d1	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3915d3	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915d5	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915d7	69 00 00	adc #$0000	                ADC #$0000
.3915da	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915dc	60		rts		                RTS
.3915dd	ea		nop		ILOOP           NOP
.3915de	ea		nop		                NOP
.3915df	ea		nop		                NOP
.3915e0	ea		nop		                NOP
.3915e1	ea		nop		                NOP
.3915e2	ea		nop		                NOP
.3915e3	ea		nop		                NOP
.3915e4	ea		nop		                NOP
.3915e5	ea		nop		                NOP
.3915e6	ea		nop		                NOP
.3915e7	6b		rtl		                RTL
.3915e8	22 dd 15 39	jsl $3915dd	ILOOP_1         JSL ILOOP
.3915ec	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.3915f0	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.3915f4	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.3915f8	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.3915fc	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.391600	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.391604	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.391608	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.39160c	22 dd 15 39	jsl $3915dd	                JSL ILOOP
.391610	6b		rtl		                RTL
.391611	22 e8 15 39	jsl $3915e8	ILOOP_1MS       JSL ILOOP_1
.391615	6b		rtl		                RTL
.391616	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391619	f0 07		beq $391622	                BEQ LOOP_MS_END
.39161b	22 11 16 39	jsl $391611	                JSL ILOOP_1MS
.39161f	ca		dex		                DEX
.391620	80 f4		bra $391616	                BRA ILOOP_MS
.391622	6b		rtl		LOOP_MS_END     RTL
.391623					IDELAY
.391623	8b		phb		                PHB
.391624	08		php		                PHP
.391625	48		pha		                PHA             ; begin setdbr macro
.391626	08		php		                PHP
.391627	e2 20		sep #$20	                SEP #$20        ; set A short
.391629	a9 00		lda #$00	                LDA #0
.39162b	48		pha		                PHA
.39162c	ab		plb		                PLB
.39162d	28		plp		                PLP
.39162e	68		pla		                PLA             ; end setdbr macro
.39162f	e2 20		sep #$20	                SEP #$20        ; set A short
.391631	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391633	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391637	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39163b	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39163d	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391641	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391643	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391646	a9 00		lda #$00	                LDA #0
.391648	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.39164c	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391650	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391654	c2 30		rep #$30	                REP #$30        ; set A&X long
.391656	8a		txa		                TXA
.391657	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39165b	98		tya		                TYA
.39165c	e2 20		sep #$20	                SEP #$20        ; set A short
.39165e	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391662	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391664	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391668	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.39166a	cb		wai		loop            WAI                         ; Wait for an interrupt
.39166b	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.39166e	f0 fa		beq $39166a	                BEQ loop                    ; Keep checking until it's set
.391670	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391672	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391676	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391678	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39167b	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39167f	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.391681	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391685	28		plp		                PLP
.391686	ab		plb		                PLB
.391687	6b		rtl		                RTL
.391688					SHOW_CREDITS
.391688	48		pha		                PHA
.391689	da		phx		                PHX
.39168a	5a		phy		                PHY
.39168b	08		php		                PHP
.39168c	e2 20		sep #$20	                SEP #$20        ; set A short
.39168e	c2 10		rep #$10	                REP #$10        ; set X long
.391690	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391694	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391696	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39169a	a2 00 00	ldx #$0000	                LDX #0
.39169d	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3916a1	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3916a5	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916a9	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3916ad	e8		inx		                INX
.3916ae	e0 00 20	cpx #$2000	                CPX #128 * 64
.3916b1	d0 ea		bne $39169d	                BNE credit_loop
.3916b3	22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.3916b7	22 41 0b 39	jsl $390b41	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3916bb	22 65 09 39	jsl $390965	                JSL ICSRHOME                    ; Move cursor to the home position
.3916bf	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3916c3	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3916c5	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916c9	28		plp		                PLP
.3916ca	7a		ply		                PLY
.3916cb	fa		plx		                PLX
.3916cc	68		pla		                PLA
.3916cd	6b		rtl		                RTL
.3916ce	00		brk #		IRESTORE        BRK ; Warm boot routine
.3916cf	00		brk #		ISCINIT         BRK ;
.3916d0	00		brk #		IIOINIT         BRK ;
.3916d1	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3916d2	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3916d3	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3916d4	00		brk #		ICLOSE          BRK ; Close a channel
.3916d5	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916d6	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916d7	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916d8	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916d9	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916da	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916db	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916dc	00		brk #		IPRINTF         BRK ; Print a float value
.3916dd	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916de	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916df	00		brk #		IPUSHKEY        BRK ;
.3916e0	00		brk #		IPUSHKEYS       BRK ;
.3916e1	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916e2	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916e3	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916eb	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3916fb	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391703	12
>391704	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39170c	15
>39170d	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391713	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391718	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39171e	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391726	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391734	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39173c	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39174a	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391752	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391760	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391768	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391776	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39177e	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39178c	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391794	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3917a2	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917aa	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3917b8	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3917c0	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3917ce	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917d6	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917e4	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917ec	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3917fa	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391802	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391810	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391818	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391826	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39182e	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39183c	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391844	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391852	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39185a	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391868	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391870	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39187e	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391886	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391894	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39189c	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918aa	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3918b2	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3918c0	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3918c8	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918d6	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918de	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918ec	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918f4	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391902	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39190a	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391918	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391920	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39192e	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391936	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391944	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39194c	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39195a	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391962	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391970	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391978	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391986	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39198e	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39199c	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3919a4	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3919b2	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3919ba	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3919c8	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3919d0	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919de	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919e6	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919f4	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3919fc	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a0a	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a12	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a20	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a28	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a36	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a3e	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a4c	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a54	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a62	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a6a	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a78	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a80	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a8e	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a96	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391aa4	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391aac	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391aba	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391ac2	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391ad0	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391ad8	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391ae6	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391aee	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391afc	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391b04	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b12	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b1a	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b28	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b30	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b3e	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b46	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b54	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b5c	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b6a	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b72	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b80	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b88	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b96	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391b9e	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391bac	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391bb4	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391bc2	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391bca	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391bd8	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391be0	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bee	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bf6	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391c04	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c0c	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c1a	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c22	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c30	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c38	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c46	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c4e	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c5c	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c64	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c72	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c7a	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c88	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c90	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391c9e	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391ca6	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391cb4	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391cbc	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391cca	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391cd2	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391ce0	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391ce8	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cf6	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391cfe	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d0c	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d14	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d22	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d2a	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d38	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d40	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d4e	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d56	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d64	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d6c	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d7a	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d82	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d90	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d98	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391da6	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391dae	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391dbc	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391dc4	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391dd2	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391dda	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391de8	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391df0	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391dfe	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391e06	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e14	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e1c	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e2a	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e32	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e40	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e48	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e56	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e5e	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e6c	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e74	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e82	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e8a	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e98	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391ea0	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391eae	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391eb6	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ec4	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391ecc	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391eda	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391ee2	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ef0	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391ef8	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391f06	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f0e	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f1c	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f24	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f32	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f3a	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f48	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f50	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f5e	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f66	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f74	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f7c	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f8a	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f92	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391fa0	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391fa8	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391fb6	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391fbe	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391fcc	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391fd4	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fe2	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391fea	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ff8	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>392000	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>39200e	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>392016	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>392024	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>39202c	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>39203a	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>392042	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>392050	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>392058	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>392066	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>39206e	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>39207c	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>392084	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>392092	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>39209a	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920a8	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>3920b0	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3920be	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3920c6	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3920d4	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920dc	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920ea	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920f2	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>392100	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>392108	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>392116	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>39211e	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>39212c	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392134	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>392142	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>39214a	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392158	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>392160	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39216e	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392176	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392184	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>39218c	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>39219a	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>3921a2	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>3921b0	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3921b8	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3921c6	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3921ce	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921dc	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921e4	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921f2	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3921fa	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>392208	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392210	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>39221e	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>392226	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392234	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>39223c	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39224a	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392252	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392260	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392268	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392276	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39227e	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>39228c	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392294	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3922a2	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922aa	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3922b8	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3922c0	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3922ce	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922d6	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922e4	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922ec	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3922fa	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392302	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392310	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392318	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392326	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39232e	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39233c	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392344	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392352	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39235a	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392368	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>392370	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39237e	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392386	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392394	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39239c	00 87 fa 00
>3923a0	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923a8	00 88 98 03
>3923ac	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923b4	00 88 98 03
>3923b8	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923c0	00 f9 69 00
>3923c4	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3923cc	80 e8 4a 00
>3923d0	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923d8	00 f6 9a 00
>3923dc	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923e4	1b f2 34 00
>3923e8	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923f0	00 f7 8a 00
>3923f4	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3923fc	00 f6 47 00
>392400	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392408	00 f9 69 00
>39240c	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392414	00 f7 a9 00
>392418	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392420	00 87 fa 00
>392424	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39242c	00 f7 a9 00
>392430	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392438	00 f5 f5 00
>39243c	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392444	06 b8 d8 03
>392448	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392450	00 f5 f5 00
>392454	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39245c	06 b8 d8 03
>392460	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392468	00 f5 f5 00
>39246c	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392474	10 74 f8 03
>392478	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392480	00 f5 f5 00
>392484	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39248c	00 f5 f5 00
>392490	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392498	05 c5 d4 03
>39249c	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924a4	00 f5 f5 00
>3924a8	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924b0	04 f9 44 03
>3924b4	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924bc	05 c5 d4 03
>3924c0	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924c8	04 f9 44 03
>3924cc	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3924d4	03 87 f7 03
>3924d8	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924e0	05 c5 d4 03
>3924e4	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924ec	00 f6 28 00
>3924f0	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924f8	05 c5 d4 03
>3924fc	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392504	00 f5 f7 01
>392508	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392510	04 f9 44 03
>392514	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39251c	00 99 f9 00
>392520	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392528	00 a8 f7 00
>39252c	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392534	00 99 f9 00
>392538	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392540	00 a6 f6 00
>392544	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39254c	00 a6 f6 00
>392550	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392558	00 f6 36 02
>39255c	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392564	00 f6 36 02
>392568	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392570	00 96 e8 01
>392574	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39257c	00 96 e8 01
>392580	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392588	02 79 77 03
>39258c	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392594	02 79 77 03
>392598	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3925a0	00 a5 2b 02
>3925a4	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3925ac	00 93 3b 02
>3925b0	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3925b8	01 89 3b 03
>3925bc	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3925c4	0a 53 2b 02
>3925c8	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3925d0	00 f6 89 00
>3925d4	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925dc	00 f6 9a 00
>3925e0	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925e8	00 f6 9a 00
>3925ec	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925f4	00 87 4b 01
>3925f8	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392600	00 78 67 01
>392604	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39260c	02 f8 fc 00
>392610	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392618	40 f5 f5 00
>39261c	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392624	02 79 77 03
>392628	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392630	40 f5 f5 00
>392634	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39263c	40 f5 f5 00
>392640	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392648	00 f9 69 00
>39264c	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392654	00 f9 69 00
>392658	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392660	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392664	94 23 39 00 a0 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>39266c	ac 23 39 00 b8 23 39 00
>392674	c4 23 39 00 d0 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39267c	dc 23 39 00 e8 23 39 00
>392684	f4 23 39 00 00 24 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39268c	0c 24 39 00 18 24 39 00
>392694	24 24 39 00 30 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39269c	3c 24 39 00 48 24 39 00
>3926a4	54 24 39 00 60 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3926ac	6c 24 39 00 78 24 39 00
>3926b4	84 24 39 00 90 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3926bc	9c 24 39 00 a8 24 39 00
>3926c4	b4 24 39 00 c0 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3926cc	cc 24 39 00 d8 24 39 00
>3926d4	e4 24 39 00 f0 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926dc	fc 24 39 00 08 25 39 00
>3926e4	14 25 39 00 20 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926ec	2c 25 39 00 38 25 39 00
>3926f4	44 25 39 00 50 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3926fc	5c 25 39 00 68 25 39 00
>392704	74 25 39 00 80 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39270c	8c 25 39 00 98 25 39 00
>392714	a4 25 39 00 b0 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39271c	bc 25 39 00 c8 25 39 00
>392724	d4 25 39 00 e0 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39272c	ec 25 39 00 f8 25 39 00
>392734	04 26 39 00 10 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39273c	1c 26 39 00 28 26 39 00
>392744	34 26 39 00 40 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39274c	4c 26 39 00 58 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392754	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39275c	00 b1 f5 01
>392760	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392768	03 f1 f5 00
>39276c	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392774	03 c1 f5 00
>392778	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>392780	00 92 f5 01
>392784	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39278c	00 f1 f9 00
>392790	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392798	00 f1 f5 00
>39279c	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3927a4	02 81 f6 01
>3927a8	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3927b0	00 c2 b9 01
>3927b4	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3927bc	05 b2 35 00
>3927c0	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3927c8	1b f2 34 00
>3927cc	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3927d4	01 f5 74 00
>3927d8	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927e0	00 61 e3 00
>3927e4	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927ec	00 a4 64 00
>3927f0	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927f8	07 b5 f5 00
>3927fc	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392804	00 f3 74 00
>392808	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392810	00 c3 94 01
>392814	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39281c	00 f4 0d 01
>392820	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392828	00 f5 0b 01
>39282c	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392834	00 bf 07 00
>392838	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392840	00 6d 08 01
>392844	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39284c	00 51 17 01
>392850	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392858	00 51 17 01
>39285c	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392864	00 53 08 01
>392868	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392870	00 53 06 01
>392874	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39287c	00 d2 f8 00
>392880	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392888	00 e2 c7 01
>39288c	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392894	00 f1 9c 00
>392898	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3928a0	02 f2 c9 01
>3928a4	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3928ac	03 95 fb 00
>3928b0	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3928b8	04 a1 59 00
>3928bc	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3928c4	03 91 fc 03
>3928c8	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3928d0	02 b4 ec 00
>3928d4	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928dc	00 93 f7 00
>3928e0	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928e8	04 c1 58 00
>3928ec	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928f4	02 c3 6a 00
>3928f8	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392900	00 62 87 00
>392904	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39290c	00 f3 97 00
>392910	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392918	00 b3 97 00
>39291c	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392924	04 f3 cc 00
>392928	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392930	00 93 aa 00
>392934	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39293c	00 78 08 01
>392940	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392948	00 78 08 01
>39294c	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392954	00 54 27 01
>392958	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392960	00 61 56 00
>392964	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>39296c	00 75 16 01
>392970	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392978	00 f5 f6 01
>39297c	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392984	80 f3 e3 00
>392988	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392990	00 b5 f5 00
>392994	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39299c	80 71 16 00
>3929a0	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929a8	00 30 55 01
>3929ac	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3929b4	00 62 36 01
>3929b8	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3929c0	02 51 07 00
>3929c4	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3929cc	00 62 39 00
>3929d0	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929d8	00 66 27 00
>3929dc	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929e4	00 73 46 00
>3929e8	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929f0	00 74 76 01
>3929f4	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3929fc	81 92 38 00
>392a00	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a08	02 71 19 00
>392a0c	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a14	01 81 09 00
>392a18	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a20	00 83 4b 02
>392a24	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a2c	05 71 59 00
>392a30	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a38	03 82 39 00
>392a3c	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a44	82 84 17 00
>392a48	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a50	02 72 16 00
>392a54	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a5c	00 7b 0a 00
>392a60	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a68	00 85 0c 01
>392a6c	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a74	00 7b 0a 01
>392a78	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a80	00 79 18 01
>392a84	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a8c	01 73 08 00
>392a90	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a98	04 77 0a 00
>392a9c	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392aa4	00 51 19 00
>392aa8	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392ab0	01 74 09 00
>392ab4	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392abc	01 63 28 00
>392ac0	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392ac8	00 65 0a 00
>392acc	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392ad4	00 67 29 00
>392ad8	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392ae0	00 67 09 00
>392ae4	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392aec	01 6a 28 00
>392af0	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392af8	00 55 27 00
>392afc	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392b04	00 6f 08 00
>392b08	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b10	00 7a 07 00
>392b14	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b1c	06 a2 0d 00
>392b20	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b28	00 a3 5f 00
>392b2c	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b34	00 42 27 00
>392b38	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b40	05 b2 49 00
>392b44	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b4c	00 b2 79 01
>392b50	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b58	00 7a 1a 00
>392b5c	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b64	00 82 28 01
>392b68	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b70	02 c3 5f 00
>392b74	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b7c	86 c4 95 01
>392b80	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b88	00 44 15 00
>392b8c	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b94	00 d1 06 00
>392b98	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392ba0	00 82 37 00
>392ba4	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392bac	00 41 35 00
>392bb0	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392bb8	02 32 f5 01
>392bbc	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392bc4	00 61 26 00
>392bc8	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392bd0	84 3f 05 01
>392bd4	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392bdc	01 d1 f6 00
>392be0	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392be8	00 41 05 01
>392bec	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bf4	05 f3 e4 00
>392bf8	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392c00	00 92 f5 01
>392c04	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c0c	04 f2 e4 01
>392c10	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c18	00 45 25 00
>392c1c	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c24	01 a3 36 00
>392c28	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c30	01 98 05 01
>392c34	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c3c	02 a3 f6 01
>392c40	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c48	00 f6 f8 00
>392c4c	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c54	00 f3 f5 00
>392c58	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c60	00 94 e5 01
>392c64	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c6c	00 84 44 00
>392c70	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c78	03 83 18 01
>392c7c	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c84	01 78 08 01
>392c88	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c90	03 8e 08 01
>392c94	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392c9c	09 f2 46 00
>392ca0	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392ca8	00 96 e8 01
>392cac	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392cb4	00 f6 f6 01
>392cb8	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392cc0	00 f6 9a 00
>392cc4	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392ccc	00 c6 45 00
>392cd0	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392cd8	00 f4 b4 00
>392cdc	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392ce4	00 d5 25 00
>392ce8	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cf0	0e 21 2d 00
>392cf4	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392cfc	00 55 87 02
>392d00	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d08	08 98 87 01
>392d0c	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d14	04 17 04 03
>392d18	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d20	05 77 f9 02
>392d24	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d2c	02 f4 08 00
>392d30	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d38	00 36 05 01
>392d3c	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d44	05 32 55 03
>392d48	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d50	00 f3 df 00
>392d54	54 27 39 00 60 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d5c	6c 27 39 00 78 27 39 00 84 27 39 00 90 27 39 00
>392d6c	9c 27 39 00 a8 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d74	b4 27 39 00 c0 27 39 00 cc 27 39 00 d8 27 39 00
>392d84	e4 27 39 00 f0 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d8c	fc 27 39 00 08 28 39 00 14 28 39 00 20 28 39 00
>392d9c	2c 28 39 00 38 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392da4	44 28 39 00 50 28 39 00 5c 28 39 00 68 28 39 00
>392db4	74 28 39 00 80 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392dbc	8c 28 39 00 98 28 39 00 a4 28 39 00 b0 28 39 00
>392dcc	bc 28 39 00 c8 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392dd4	d4 28 39 00 e0 28 39 00 ec 28 39 00 f8 28 39 00
>392de4	04 29 39 00 10 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392dec	1c 29 39 00 28 29 39 00 34 29 39 00 40 29 39 00
>392dfc	4c 29 39 00 58 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392e04	64 29 39 00 70 29 39 00 7c 29 39 00 88 29 39 00
>392e14	94 29 39 00 a0 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e1c	ac 29 39 00 b8 29 39 00 c4 29 39 00 d0 29 39 00
>392e2c	dc 29 39 00 e8 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e34	f4 29 39 00 00 2a 39 00 0c 2a 39 00 18 2a 39 00
>392e44	24 2a 39 00 30 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e4c	3c 2a 39 00 48 2a 39 00 54 2a 39 00 60 2a 39 00
>392e5c	6c 2a 39 00 78 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e64	84 2a 39 00 90 2a 39 00 9c 2a 39 00 a8 2a 39 00
>392e74	b4 2a 39 00 c0 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e7c	cc 2a 39 00 d8 2a 39 00 e4 2a 39 00 f0 2a 39 00
>392e8c	fc 2a 39 00 08 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e94	14 2b 39 00 20 2b 39 00 2c 2b 39 00 38 2b 39 00
>392ea4	44 2b 39 00 50 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392eac	5c 2b 39 00 68 2b 39 00 74 2b 39 00 80 2b 39 00
>392ebc	8c 2b 39 00 98 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ec4	a4 2b 39 00 b0 2b 39 00 bc 2b 39 00 c8 2b 39 00
>392ed4	d4 2b 39 00 e0 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392edc	ec 2b 39 00 f8 2b 39 00 04 2c 39 00 10 2c 39 00
>392eec	1c 2c 39 00 28 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392ef4	34 2c 39 00 40 2c 39 00 4c 2c 39 00 58 2c 39 00
>392f04	64 2c 39 00 70 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f0c	7c 2c 39 00 88 2c 39 00 94 2c 39 00 a0 2c 39 00
>392f1c	ac 2c 39 00 b8 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f24	c4 2c 39 00 d0 2c 39 00 dc 2c 39 00 e8 2c 39 00
>392f34	f4 2c 39 00 00 2d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f3c	0c 2d 39 00 18 2d 39 00 24 2d 39 00 30 2d 39 00
>392f4c	3c 2d 39 00 48 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f54	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f5c	0d f2 f7 00
>392f60	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f68	07 f2 f7 00
>392f6c	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f74	07 f2 f6 00
>392f78	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f80	07 f2 f7 00
>392f84	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f8c	07 f2 f7 00
>392f90	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f98	07 f2 f7 00
>392f9c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fa4	00 00 00 00
>392fa8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb0	00 00 00 00
>392fb4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fbc	00 00 00 00
>392fc0	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392fc8	87 f2 f1 00
>392fcc	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392fd4	07 f4 f4 00
>392fd8	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fe0	07 f2 f6 00
>392fe4	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392fec	07 e7 f7 00
>392ff0	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ff8	07 f6 f6 00
>392ffc	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>393004	87 a3 f3 00
>393008	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393010	00 00 00 00
>393014	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39301c	00 00 00 00
>393020	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393028	00 00 00 00
>39302c	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>393034	07 8a 08 00
>393038	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>393040	07 55 14 00
>393044	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>39304c	87 55 04 00
>393050	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>393058	07 46 1a 00
>39305c	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>393064	07 61 07 00
>393068	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>393070	90 61 07 00
>393074	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39307c	00 00 00 00
>393080	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393088	00 00 00 00
>39308c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393094	00 00 00 00
>393098	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>3930a0	87 f3 f8 00
>3930a4	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>3930ac	07 f6 3a 00
>3930b0	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>3930b8	0c 84 19 00
>3930bc	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3930c4	07 94 19 00
>3930c8	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3930d0	87 d1 f8 00
>3930d4	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930dc	07 c3 a6 00
>3930e0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930e8	00 00 00 00
>3930ec	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930f4	00 00 00 00
>3930f8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393100	00 00 00 00
>393104	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>39310c	47 f2 df 00
>393110	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>393118	0f a1 df 00
>39311c	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393124	07 f1 78 00
>393128	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>393130	07 f1 18 00
>393134	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>39313c	07 56 26 00
>393140	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393148	07 66 06 00
>39314c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393154	00 00 00 00
>393158	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393160	00 00 00 00
>393164	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39316c	00 00 00 00
>393170	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393178	87 85 35 00
>39317c	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393184	87 f3 f4 00
>393188	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>393190	07 f2 c3 00
>393194	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>39319c	08 72 08 00
>3931a0	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931a8	07 3f 07 01
>3931ac	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3931b4	07 4f 05 00
>3931b8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c0	00 00 00 00
>3931c4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931cc	00 00 00 00
>3931d0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931d8	00 00 00 00
>3931dc	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931e4	07 7a 05 00
>3931e8	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931f0	07 a5 45 00
>3931f4	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3931fc	08 8f 09 00
>393200	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>393208	0c 8f 09 00
>39320c	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393214	07 82 37 00
>393218	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393220	07 62 2c 01
>393224	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39322c	00 00 00 00
>393230	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393238	00 00 00 00
>39323c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393244	00 00 00 00
>393248	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393250	07 a6 1c 00
>393254	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>39325c	07 72 0b 00
>393260	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393268	07 72 09 00
>39326c	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393274	07 82 09 00
>393278	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>393280	07 72 0f 00
>393284	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>39328c	07 8f 0a 00
>393290	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393298	00 00 00 00
>39329c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932a4	00 00 00 00
>3932a8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932b0	00 00 00 00
>3932b4	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932bc	07 65 1a 00
>3932c0	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932c8	07 65 1a 00
>3932cc	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3932d4	07 75 0a 00
>3932d8	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932e0	07 65 1a 00
>3932e4	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932ec	07 65 26 00
>3932f0	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932f8	07 55 36 00
>3932fc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393304	00 00 00 00
>393308	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393310	00 00 00 00
>393314	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39331c	00 00 00 00
>393320	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393328	07 ff 0f 01
>39332c	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393334	87 64 18 00
>393338	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393340	07 96 0a 00
>393344	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39334c	07 91 2a 00
>393350	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393358	47 6f 07 00
>39335c	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393364	07 8f 06 02
>393368	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393370	00 00 00 00
>393374	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39337c	00 00 00 00
>393380	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393388	00 00 00 00
>39338c	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393394	07 55 16 00
>393398	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3933a0	07 6a 03 00
>3933a4	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3933ac	07 42 35 00
>3933b0	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3933b8	07 31 47 01
>3933bc	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3933c4	0a 42 25 00
>3933c8	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3933d0	07 cf 07 00
>3933d4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933dc	00 00 00 00
>3933e0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933e8	00 00 00 00
>3933ec	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933f4	00 00 00 00
>3933f8	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393400	8a f2 26 00
>393404	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>39340c	07 f2 f5 00
>393410	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393418	87 11 13 00
>39341c	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393424	87 1d 03 00
>393428	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393430	07 81 23 00
>393434	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39343c	0a f2 f6 01
>393440	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393448	00 00 00 00
>39344c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393454	00 00 00 00
>393458	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393460	00 00 00 00
>393464	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39346c	07 c2 05 00
>393470	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393478	07 6f 0c 01
>39347c	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393484	07 56 16 00
>393488	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>393490	88 8f 0b 00
>393494	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39349c	87 c3 e5 00
>3934a0	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934a8	07 f8 16 00
>3934ac	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934b4	00 00 00 00
>3934b8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934c0	00 00 00 00
>3934c4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934cc	00 00 00 00
>3934d0	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934d8	0a f3 03 00
>3934dc	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934e4	07 f3 02 00
>3934e8	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934f0	07 1f ff 03
>3934f4	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3934fc	8f 56 84 02
>393500	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393508	0c 34 04 03
>39350c	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393514	07 1f 02 03
>393518	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393520	00 00 00 00
>393524	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39352c	00 00 00 00
>393530	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393538	00 00 00 00
>39353c	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393544	07 12 16 01
>393548	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393550	07 f6 c9 02
>393554	54 2f 39 00 60 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39355c	6c 2f 39 00 78 2f 39 00 84 2f 39 00 90 2f 39 00
>39356c	9c 2f 39 00 a8 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393574	b4 2f 39 00 c0 2f 39 00 cc 2f 39 00 d8 2f 39 00
>393584	e4 2f 39 00 f0 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39358c	fc 2f 39 00 08 30 39 00 14 30 39 00 20 30 39 00
>39359c	2c 30 39 00 38 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3935a4	44 30 39 00 50 30 39 00 5c 30 39 00 68 30 39 00
>3935b4	74 30 39 00 80 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3935bc	8c 30 39 00 98 30 39 00 a4 30 39 00 b0 30 39 00
>3935cc	bc 30 39 00 c8 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3935d4	d4 30 39 00 e0 30 39 00 ec 30 39 00 f8 30 39 00
>3935e4	04 31 39 00 10 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935ec	1c 31 39 00 28 31 39 00 34 31 39 00 40 31 39 00
>3935fc	4c 31 39 00 58 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393604	64 31 39 00 70 31 39 00 7c 31 39 00 88 31 39 00
>393614	94 31 39 00 a0 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39361c	ac 31 39 00 b8 31 39 00 c4 31 39 00 d0 31 39 00
>39362c	dc 31 39 00 e8 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393634	f4 31 39 00 00 32 39 00 0c 32 39 00 18 32 39 00
>393644	24 32 39 00 30 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39364c	3c 32 39 00 48 32 39 00 54 32 39 00 60 32 39 00
>39365c	6c 32 39 00 78 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393664	84 32 39 00 90 32 39 00 9c 32 39 00 a8 32 39 00
>393674	b4 32 39 00 c0 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39367c	cc 32 39 00 d8 32 39 00 e4 32 39 00 f0 32 39 00
>39368c	fc 32 39 00 08 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393694	14 33 39 00 20 33 39 00 2c 33 39 00 38 33 39 00
>3936a4	44 33 39 00 50 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3936ac	5c 33 39 00 68 33 39 00 74 33 39 00 80 33 39 00
>3936bc	8c 33 39 00 98 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3936c4	a4 33 39 00 b0 33 39 00 bc 33 39 00 c8 33 39 00
>3936d4	d4 33 39 00 e0 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936dc	ec 33 39 00 f8 33 39 00 04 34 39 00 10 34 39 00
>3936ec	1c 34 39 00 28 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936f4	34 34 39 00 40 34 39 00 4c 34 39 00 58 34 39 00
>393704	64 34 39 00 70 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39370c	7c 34 39 00 88 34 39 00 94 34 39 00 a0 34 39 00
>39371c	ac 34 39 00 b8 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393724	c4 34 39 00 d0 34 39 00 dc 34 39 00 e8 34 39 00
>393734	f4 34 39 00 00 35 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39373c	0c 35 39 00 18 35 39 00 24 35 39 00 30 35 39 00
>39374c	3c 35 39 00 48 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393754	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39375c					IOPL2_TONE_TEST
.39375c	e2 20		sep #$20	                SEP #$20        ; set A short
.39375e	c2 10		rep #$10	                REP #$10        ; set X long
.393760	a2 00 00	ldx #$0000	                LDX #0
.393763					OPL2_TONE_TESTING_L1
.393763	bf 54 37 39	lda $393754,x	                LDA NOTE_INTRO, X
.393767	29 0f		and #$0f	                AND #$F
.393769	85 30		sta $30		                STA OPL2_NOTE ; start at C
.39376b	bf 54 37 39	lda $393754,x	                LDA NOTE_INTRO, X
.39376f	29 70		and #$70	                AND #$70
.393771	4a		lsr a		                LSR A
.393772	4a		lsr a		                LSR A
.393773	4a		lsr a		                LSR A
.393774	4a		lsr a		                LSR A
.393775	85 31		sta $31		                STA OPL2_OCTAVE
.393777	8a		txa		                TXA
.393778	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.39377a	85 27		sta $27		                STA OPL2_CHANNEL
.39377c	22 4c 39 39	jsl $39394c	                JSL OPL2_PLAYNOTE
.393780	a0 00 00	ldy #$0000	                LDY #$0000
.393783					OPL2_TONE_TESTING_L2
.393783	ea		nop		                NOP
.393784	ea		nop		                NOP
.393785	ea		nop		                NOP
.393786	ea		nop		                NOP
.393787	c8		iny		                INY
.393788	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.39378b	d0 f6		bne $393783	                BNE OPL2_TONE_TESTING_L2
.39378d	e8		inx		                INX
.39378e	e0 08 00	cpx #$0008	                CPX #8
.393791	d0 d0		bne $393763	                BNE OPL2_TONE_TESTING_L1
.393793	6b		rtl		                RTL
.393794					OPL2_INIT
.393794	c2 20		rep #$20	                REP #$20        ; set A long
.393796	a9 00 00	lda #$0000	                LDA #$0000
.393799	85 28		sta $28		                STA OPL2_REG_REGION
.39379b	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39379d	85 30		sta $30		                STA OPL2_NOTE
.39379f	85 32		sta $32		                STA OPL2_PARAMETER0
.3937a1	85 34		sta $34		                STA OPL2_PARAMETER2
.3937a3	a9 1e 17	lda #$171e	                LDA #<>INSTRUMENT_ACCORDN
.3937a6	85 50		sta $50		                STA RAD_ADDR
.3937a8	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3937ab	85 52		sta $52		                STA RAD_ADDR + 2
.3937ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3937af	6b		rtl		                RTL
.3937b0					OPL2_Reset
.3937b0	6b		rtl		                RTL
.3937b1					OPL2_Get_FrequencyBlock
.3937b1	6b		rtl		                RTL
.3937b2					OPL2_GET_REGISTER
.3937b2	48		pha		                PHA             ; begin setdp macro
.3937b3	08		php		                PHP
.3937b4	c2 20		rep #$20	                REP #$20        ; set A long
.3937b6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b9	5b		tcd		                TCD
.3937ba	28		plp		                PLP
.3937bb	68		pla		                PLA             ; end setdp macro
.3937bc	c2 20		rep #$20	                REP #$20        ; set A long
.3937be	18		clc		              CLC
.3937bf	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937c2	65 32		adc $32		              ADC OPL2_PARAMETER0
.3937c4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937c6	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937c9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3937cd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937cf	6b		rtl		              RTL
.3937d0					OPL2_GET_WAVEFORM_SELECT
.3937d0	48		pha		                PHA             ; begin setdp macro
.3937d1	08		php		                PHP
.3937d2	c2 20		rep #$20	                REP #$20        ; set A long
.3937d4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937d7	5b		tcd		                TCD
.3937d8	28		plp		                PLP
.3937d9	68		pla		                PLA             ; end setdp macro
.3937da	c2 20		rep #$20	                REP #$20        ; set A long
.3937dc	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937df	69 01 00	adc #$0001	              ADC #$0001
.3937e2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937e4	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937e7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3937eb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937ed	29 20		and #$20	              AND #$20
.3937ef	6b		rtl		              RTL
.3937f0					OPL2_GET_SCALINGLEVEL
.3937f0	48		pha		                PHA             ; begin setdp macro
.3937f1	08		php		                PHP
.3937f2	c2 20		rep #$20	                REP #$20        ; set A long
.3937f4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937f7	5b		tcd		                TCD
.3937f8	28		plp		                PLP
.3937f9	68		pla		                PLA             ; end setdp macro
.3937fa	c2 20		rep #$20	                REP #$20        ; set A long
.3937fc	a9 40 00	lda #$0040	              LDA #$0040  ;
.3937ff	85 28		sta $28		              STA OPL2_REG_REGION
.393801	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393804	e2 20		sep #$20	                SEP #$20        ; set A short
.393806	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393808	29 c0		and #$c0	              AND #$C0
.39380a	4a		lsr a		              LSR A
.39380b	4a		lsr a		              LSR A
.39380c	4a		lsr a		              LSR A
.39380d	4a		lsr a		              LSR A
.39380e	4a		lsr a		              LSR A
.39380f	4a		lsr a		              LSR A
.393810	6b		rtl		              RTL
.393811					OPL2_GET_BLOCK
.393811	48		pha		                PHA             ; begin setdp macro
.393812	08		php		                PHP
.393813	c2 20		rep #$20	                REP #$20        ; set A long
.393815	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393818	5b		tcd		                TCD
.393819	28		plp		                PLP
.39381a	68		pla		                PLA             ; end setdp macro
.39381b	e2 20		sep #$20	                SEP #$20        ; set A short
.39381d	18		clc		              CLC
.39381e	a5 27		lda $27		              LDA OPL2_CHANNEL
.393820	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393822	69 b0		adc #$b0	              ADC #$B0
.393824	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393826	a9 00		lda #$00	              LDA #$00
.393828	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39382a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39382c	18		clc		              CLC
.39382d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393830	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393832	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393834	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393837	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393839	e2 20		sep #$20	                SEP #$20        ; set A short
.39383b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39383d	29 1c		and #$1c	              AND #$1C
.39383f	4a		lsr a		              LSR A
.393840	4a		lsr a		              LSR A
.393841	6b		rtl		              RTL
.393842					OPL2_GET_KEYON
.393842	48		pha		                PHA             ; begin setdp macro
.393843	08		php		                PHP
.393844	c2 20		rep #$20	                REP #$20        ; set A long
.393846	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393849	5b		tcd		                TCD
.39384a	28		plp		                PLP
.39384b	68		pla		                PLA             ; end setdp macro
.39384c	e2 20		sep #$20	                SEP #$20        ; set A short
.39384e	18		clc		              CLC
.39384f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393851	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393853	69 b0		adc #$b0	              ADC #$B0
.393855	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393857	a9 00		lda #$00	              LDA #$00
.393859	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39385b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39385d	18		clc		              CLC
.39385e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393861	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393863	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393865	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393868	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39386a	e2 20		sep #$20	                SEP #$20        ; set A short
.39386c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39386e	29 20		and #$20	              AND #$20
.393870	6b		rtl		              RTL
.393871					OPL2_GET_FEEDBACK
.393871	48		pha		                PHA             ; begin setdp macro
.393872	08		php		                PHP
.393873	c2 20		rep #$20	                REP #$20        ; set A long
.393875	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393878	5b		tcd		                TCD
.393879	28		plp		                PLP
.39387a	68		pla		                PLA             ; end setdp macro
.39387b	e2 20		sep #$20	                SEP #$20        ; set A short
.39387d	18		clc		              CLC
.39387e	a5 27		lda $27		              LDA OPL2_CHANNEL
.393880	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393882	69 c0		adc #$c0	              ADC #$C0
.393884	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393886	a9 00		lda #$00	              LDA #$00
.393888	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39388a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39388c	18		clc		              CLC
.39388d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393890	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393892	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393894	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393897	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393899	e2 20		sep #$20	                SEP #$20        ; set A short
.39389b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39389d	29 e0		and #$e0	              AND #$E0
.39389f	4a		lsr a		              LSR
.3938a0	6b		rtl		              RTL
.3938a1					OPL2_GET_SYNTHMODE
.3938a1	48		pha		                PHA             ; begin setdp macro
.3938a2	08		php		                PHP
.3938a3	c2 20		rep #$20	                REP #$20        ; set A long
.3938a5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938a8	5b		tcd		                TCD
.3938a9	28		plp		                PLP
.3938aa	68		pla		                PLA             ; end setdp macro
.3938ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3938ad	18		clc		              CLC
.3938ae	a5 27		lda $27		              LDA OPL2_CHANNEL
.3938b0	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938b2	69 c0		adc #$c0	              ADC #$C0
.3938b4	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938b6	a9 00		lda #$00	              LDA #$00
.3938b8	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3938bc	18		clc		              CLC
.3938bd	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938c0	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938c2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938c4	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938c7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3938cb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938cd	29 01		and #$01	              AND #$01
.3938cf	6b		rtl		              RTL
.3938d0					OPL2_GET_DEEPTREMOLO
.3938d0	48		pha		                PHA             ; begin setdp macro
.3938d1	08		php		                PHP
.3938d2	c2 20		rep #$20	                REP #$20        ; set A long
.3938d4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938d7	5b		tcd		                TCD
.3938d8	28		plp		                PLP
.3938d9	68		pla		                PLA             ; end setdp macro
.3938da	c2 20		rep #$20	                REP #$20        ; set A long
.3938dc	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938df	85 28		sta $28		              STA OPL2_REG_REGION
.3938e1	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.3938e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e8	29 80		and #$80	              AND #$80
.3938ea	6b		rtl		              RTL
.3938eb					OPL2_GET_DEEPVIBRATO
.3938eb	48		pha		                PHA             ; begin setdp macro
.3938ec	08		php		                PHP
.3938ed	c2 20		rep #$20	                REP #$20        ; set A long
.3938ef	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f2	5b		tcd		                TCD
.3938f3	28		plp		                PLP
.3938f4	68		pla		                PLA             ; end setdp macro
.3938f5	c2 20		rep #$20	                REP #$20        ; set A long
.3938f7	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938fa	69 bd 00	adc #$00bd	              ADC #$00BD
.3938fd	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ff	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393902	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393904	e2 20		sep #$20	                SEP #$20        ; set A short
.393906	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393908	29 40		and #$40	              AND #$40
.39390a	6b		rtl		              RTL
.39390b					OPL2_GET_PERCUSSION
.39390b	48		pha		                PHA             ; begin setdp macro
.39390c	08		php		                PHP
.39390d	c2 20		rep #$20	                REP #$20        ; set A long
.39390f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393912	5b		tcd		                TCD
.393913	28		plp		                PLP
.393914	68		pla		                PLA             ; end setdp macro
.393915	c2 20		rep #$20	                REP #$20        ; set A long
.393917	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39391a	69 bd 00	adc #$00bd	              ADC #$00BD
.39391d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39391f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393922	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393924	e2 20		sep #$20	                SEP #$20        ; set A short
.393926	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393928	29 20		and #$20	              AND #$20
.39392a	6b		rtl		              RTL
.39392b					OPL2_GET_DRUMS
.39392b	48		pha		                PHA             ; begin setdp macro
.39392c	08		php		                PHP
.39392d	c2 20		rep #$20	                REP #$20        ; set A long
.39392f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393932	5b		tcd		                TCD
.393933	28		plp		                PLP
.393934	68		pla		                PLA             ; end setdp macro
.393935	c2 20		rep #$20	                REP #$20        ; set A long
.393937	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39393a	69 bd 00	adc #$00bd	              ADC #$00BD
.39393d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39393f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393942	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393944	e2 20		sep #$20	                SEP #$20        ; set A short
.393946	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393948	29 1f		and #$1f	              AND #$1F
.39394a	6b		rtl		              RTL
.39394b					OPL2_Get_WaveForm
.39394b	6b		rtl		                RTL
.39394c					OPL2_PLAYNOTE
.39394c	48		pha		                PHA             ; begin setdp macro
.39394d	08		php		                PHP
.39394e	c2 20		rep #$20	                REP #$20        ; set A long
.393950	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393953	5b		tcd		                TCD
.393954	28		plp		                PLP
.393955	68		pla		                PLA             ; end setdp macro
.393956	e2 20		sep #$20	                SEP #$20        ; set A short
.393958	da		phx		                PHX
.393959	a9 00		lda #$00	                LDA #$00
.39395b	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39395d	20 34 3f	jsr $393f34	                JSR OPL2_SET_KEYON
.393960	20 f9 3e	jsr $393ef9	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393963	e2 10		sep #$10	                SEP #$10        ; set X short
.393965	a5 30		lda $30		                LDA OPL2_NOTE
.393967	3a		dec a		                DEC A
.393968	0a		asl a		                ASL A
.393969	aa		tax		                TAX
.39396a	bf e3 16 39	lda $3916e3,x	                LDA @lnoteFNumbers,X
.39396e	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.393970	e8		inx		                INX
.393971	bf e3 16 39	lda $3916e3,x	                LDA @lnoteFNumbers,X
.393975	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393977	22 77 3e 39	jsl $393e77	                JSL OPL2_SET_FNUMBER
.39397b	a9 01		lda #$01	                LDA #$01
.39397d	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39397f	20 34 3f	jsr $393f34	                JSR OPL2_SET_KEYON
.393982	c2 10		rep #$10	                REP #$10        ; set X long
.393984	fa		plx		                PLX
.393985	6b		rtl		                RTL
.393986					OPL2_PLAYDRUM
.393986	6b		rtl		                RTL
.393987					OPL2_SET_INSTRUMENT
.393987	48		pha		                PHA             ; begin setdp macro
.393988	08		php		                PHP
.393989	c2 20		rep #$20	                REP #$20        ; set A long
.39398b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39398e	5b		tcd		                TCD
.39398f	28		plp		                PLP
.393990	68		pla		                PLA             ; end setdp macro
.393991	38		sec		              SEC ; Set the WaveFormSelect to True
.393992	22 75 3b 39	jsl $393b75	              JSL OPL2_SET_WAVEFORMSELECT;
.393996	e2 20		sep #$20	                SEP #$20        ; set A short
.393998	c2 10		rep #$10	                REP #$10        ; set X long
.39399a	a0 00 00	ldy #$0000	              LDY #$0000
.39399d	a2 00 00	ldx #$0000	              LDX #$0000
.3939a0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3939a2	85 35		sta $35		              STA OPL2_PARAMETER3
.3939a4	c8		iny		              INY
.3939a5	c9 06		cmp #$06	              CMP #$06
.3939a7	d0 03		bne $3939ac	              BNE PERCUSSION_NEXT07
.3939a9	82 70 01	brl $393b1c	              BRL Percussion_6
.3939ac					PERCUSSION_NEXT07
.3939ac	c9 07		cmp #$07	              CMP #$07
.3939ae	d0 03		bne $3939b3	              BNE PERCUSSION_NEXT08
.3939b0	82 44 01	brl $393af7	              BRL Percussion_7
.3939b3					PERCUSSION_NEXT08
.3939b3	c9 08		cmp #$08	              CMP #$08
.3939b5	d0 03		bne $3939ba	              BNE PERCUSSION_NEXT09
.3939b7	82 18 01	brl $393ad2	              BRL Percussion_8
.3939ba					PERCUSSION_NEXT09
.3939ba	c9 09		cmp #$09	              CMP #$09
.3939bc	d0 03		bne $3939c1	              BNE PERCUSSION_NEXT0A
.3939be	82 ec 00	brl $393aad	              BRL Percussion_9
.3939c1					PERCUSSION_NEXT0A
.3939c1	c9 0a		cmp #$0a	              CMP #$0A
.3939c3	d0 03		bne $3939c8	              BNE Percussion_Default
.3939c5	82 c0 00	brl $393a88	              BRL Percussion_A
.3939c8					Percussion_Default
.3939c8	a9 00		lda #$00	              LDA #$00
.3939ca	85 26		sta $26		              STA OPL2_OPERATOR
.3939cc	c2 20		rep #$20	                REP #$20        ; set A long
.3939ce	a9 20 00	lda #$0020	              LDA #$0020;
.3939d1	85 28		sta $28		              STA OPL2_REG_REGION
.3939d3	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.3939d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3939d8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939da	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939dc	c8		iny		              INY
.3939dd	c2 20		rep #$20	                REP #$20        ; set A long
.3939df	a9 40 00	lda #$0040	              LDA #$0040;
.3939e2	85 28		sta $28		              STA OPL2_REG_REGION
.3939e4	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.3939e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3939e9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939eb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939ed	c8		iny		              INY
.3939ee	c2 20		rep #$20	                REP #$20        ; set A long
.3939f0	a9 60 00	lda #$0060	              LDA #$0060;
.3939f3	85 28		sta $28		              STA OPL2_REG_REGION
.3939f5	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.3939f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3939fa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939fc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939fe	c8		iny		              INY
.3939ff	c2 20		rep #$20	                REP #$20        ; set A long
.393a01	a9 80 00	lda #$0080	              LDA #$0080;
.393a04	85 28		sta $28		              STA OPL2_REG_REGION
.393a06	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a09	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a0d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a0f	c8		iny		              INY
.393a10	c2 20		rep #$20	                REP #$20        ; set A long
.393a12	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a15	85 28		sta $28		              STA OPL2_REG_REGION
.393a17	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a1a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a1c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a1e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a20	c8		iny		              INY
.393a21	e2 10		sep #$10	                SEP #$10        ; set X short
.393a23	a5 27		lda $27		              LDA OPL2_CHANNEL
.393a25	29 0f		and #$0f	              AND #$0F
.393a27	aa		tax		              TAX
.393a28	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a2a	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a2e	c8		iny		              INY
.393a2f	a9 01		lda #$01	              LDA #$01
.393a31	85 26		sta $26		              STA OPL2_OPERATOR
.393a33	c2 20		rep #$20	                REP #$20        ; set A long
.393a35	a9 20 00	lda #$0020	              LDA #$0020;
.393a38	85 28		sta $28		              STA OPL2_REG_REGION
.393a3a	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a3d	e2 20		sep #$20	                SEP #$20        ; set A short
.393a3f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a41	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a43	c8		iny		              INY
.393a44	c2 20		rep #$20	                REP #$20        ; set A long
.393a46	a9 40 00	lda #$0040	              LDA #$0040;
.393a49	85 28		sta $28		              STA OPL2_REG_REGION
.393a4b	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a4e	e2 20		sep #$20	                SEP #$20        ; set A short
.393a50	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a52	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a54	c8		iny		              INY
.393a55	c2 20		rep #$20	                REP #$20        ; set A long
.393a57	a9 60 00	lda #$0060	              LDA #$0060;
.393a5a	85 28		sta $28		              STA OPL2_REG_REGION
.393a5c	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a5f	e2 20		sep #$20	                SEP #$20        ; set A short
.393a61	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a63	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a65	c8		iny		              INY
.393a66	c2 20		rep #$20	                REP #$20        ; set A long
.393a68	a9 80 00	lda #$0080	              LDA #$0080;
.393a6b	85 28		sta $28		              STA OPL2_REG_REGION
.393a6d	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a70	e2 20		sep #$20	                SEP #$20        ; set A short
.393a72	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a74	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a76	c8		iny		              INY
.393a77	c2 20		rep #$20	                REP #$20        ; set A long
.393a79	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a7c	85 28		sta $28		              STA OPL2_REG_REGION
.393a7e	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393a81	e2 20		sep #$20	                SEP #$20        ; set A short
.393a83	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a85	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a87	6b		rtl		                RTL
.393a88					Percussion_A
.393a88	e2 20		sep #$20	                SEP #$20        ; set A short
.393a8a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a8c	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a90	c8		iny		              INY
.393a91	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a93	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a97	c8		iny		              INY
.393a98	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a9a	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393a9e	c8		iny		              INY
.393a9f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aa1	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393aa5	c8		iny		              INY
.393aa6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393aa8	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393aac	6b		rtl		                RTL
.393aad					Percussion_9
.393aad	e2 20		sep #$20	                SEP #$20        ; set A short
.393aaf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ab1	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393ab5	c8		iny		              INY
.393ab6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ab8	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393abc	c8		iny		              INY
.393abd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393abf	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393ac3	c8		iny		              INY
.393ac4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ac6	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393aca	c8		iny		              INY
.393acb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393acd	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393ad1	6b		rtl		              RTL
.393ad2					Percussion_8
.393ad2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ad4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ad6	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393ada	c8		iny		              INY
.393adb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393add	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393ae1	c8		iny		              INY
.393ae2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ae4	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393ae8	c8		iny		              INY
.393ae9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aeb	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393aef	c8		iny		              INY
.393af0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393af2	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393af6	6b		rtl		              RTL
.393af7					Percussion_7
.393af7	e2 20		sep #$20	                SEP #$20        ; set A short
.393af9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393afb	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393aff	c8		iny		              INY
.393b00	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b02	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393b06	c8		iny		              INY
.393b07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b09	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b0d	c8		iny		              INY
.393b0e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b10	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b14	c8		iny		              INY
.393b15	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b17	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b1b	6b		rtl		              RTL
.393b1c					Percussion_6
.393b1c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b20	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b24	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b28	c8		iny		              INY
.393b29	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b2b	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b2f	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b33	c8		iny		              INY
.393b34	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b36	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b3a	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b3e	c8		iny		              INY
.393b3f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b41	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b45	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b49	c8		iny		              INY
.393b4a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b4c	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b50	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b54	6b		rtl		              RTL
.393b55					OPL2_SET_REGISTER
.393b55	48		pha		                PHA             ; begin setdp macro
.393b56	08		php		                PHP
.393b57	c2 20		rep #$20	                REP #$20        ; set A long
.393b59	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b5c	5b		tcd		                TCD
.393b5d	28		plp		                PLP
.393b5e	68		pla		                PLA             ; end setdp macro
.393b5f	c2 20		rep #$20	                REP #$20        ; set A long
.393b61	18		clc		              CLC
.393b62	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b65	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b67	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b69	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b6c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b6e	e2 20		sep #$20	                SEP #$20        ; set A short
.393b70	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b72	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b74	6b		rtl		              RTL
.393b75					OPL2_SET_WAVEFORMSELECT
.393b75	48		pha		                PHA             ; begin setdp macro
.393b76	08		php		                PHP
.393b77	c2 20		rep #$20	                REP #$20        ; set A long
.393b79	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b7c	5b		tcd		                TCD
.393b7d	28		plp		                PLP
.393b7e	68		pla		                PLA             ; end setdp macro
.393b7f	c2 20		rep #$20	                REP #$20        ; set A long
.393b81	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b84	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b86	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b89	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b8b	e2 20		sep #$20	                SEP #$20        ; set A short
.393b8d	b0 07		bcs $393b96	              BCS OPL2_Set_WaveFormSelect_set
.393b8f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b91	29 df		and #$df	              AND #$DF
.393b93	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b95	6b		rtl		              RTL
.393b96					OPL2_Set_WaveFormSelect_set
.393b96	48		pha		                PHA             ; begin setdp macro
.393b97	08		php		                PHP
.393b98	c2 20		rep #$20	                REP #$20        ; set A long
.393b9a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b9d	5b		tcd		                TCD
.393b9e	28		plp		                PLP
.393b9f	68		pla		                PLA             ; end setdp macro
.393ba0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba2	09 20 00	ora #$0020	              ORA #$20
.393ba5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ba7	6b		rtl		                RTL
.393ba8					OPL2_SET_TREMOLO
.393ba8	48		pha		                PHA             ; begin setdp macro
.393ba9	08		php		                PHP
.393baa	c2 20		rep #$20	                REP #$20        ; set A long
.393bac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393baf	5b		tcd		                TCD
.393bb0	28		plp		                PLP
.393bb1	68		pla		                PLA             ; end setdp macro
.393bb2	08		php		                PHP ; Push the Carry
.393bb3	c2 20		rep #$20	                REP #$20        ; set A long
.393bb5	18		clc		                CLC
.393bb6	a9 20 00	lda #$0020	                LDA #$0020 ;
.393bb9	85 28		sta $28		                STA OPL2_REG_REGION
.393bbb	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393bbe	28		plp		                PLP ; Pull the Carry out
.393bbf	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc1	b0 08		bcs $393bcb	                BCS OPL2_Set_Tremolo_Set;
.393bc3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc5	29 7f		and #$7f	                AND #$7F
.393bc7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bc9	80 06		bra $393bd1	                BRA OPL2_Set_Tremolo_Exit
.393bcb					OPL2_Set_Tremolo_Set
.393bcb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bcd	09 80		ora #$80	                ORA #$80
.393bcf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd1					OPL2_Set_Tremolo_Exit
.393bd1	6b		rtl		                RTL
.393bd2					OPL2_GET_TREMOLO
.393bd2	48		pha		                PHA             ; begin setdp macro
.393bd3	08		php		                PHP
.393bd4	c2 20		rep #$20	                REP #$20        ; set A long
.393bd6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bd9	5b		tcd		                TCD
.393bda	28		plp		                PLP
.393bdb	68		pla		                PLA             ; end setdp macro
.393bdc	c2 20		rep #$20	                REP #$20        ; set A long
.393bde	a9 20 00	lda #$0020	                LDA #$0020;
.393be1	85 28		sta $28		                STA OPL2_REG_REGION
.393be3	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393be6	e2 20		sep #$20	                SEP #$20        ; set A short
.393be8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bea	29 80		and #$80	                AND #$80
.393bec	6b		rtl		                RTL
.393bed					OPL2_SET_VIBRATO
.393bed	48		pha		                PHA             ; begin setdp macro
.393bee	08		php		                PHP
.393bef	c2 20		rep #$20	                REP #$20        ; set A long
.393bf1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bf4	5b		tcd		                TCD
.393bf5	28		plp		                PLP
.393bf6	68		pla		                PLA             ; end setdp macro
.393bf7	08		php		                PHP ; Push the Carry
.393bf8	c2 20		rep #$20	                REP #$20        ; set A long
.393bfa	18		clc		                CLC
.393bfb	a9 20 00	lda #$0020	                LDA #$0020;
.393bfe	85 28		sta $28		                STA OPL2_REG_REGION
.393c00	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393c03	28		plp		                PLP ; Pull the Carry out
.393c04	e2 20		sep #$20	                SEP #$20        ; set A short
.393c06	b0 08		bcs $393c10	                BCS OPL2_Set_Vibrato_Set;
.393c08	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0a	29 bf		and #$bf	                AND #$BF
.393c0c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c0e	80 06		bra $393c16	                BRA OPL2_Set_Vibrato_Exit
.393c10					OPL2_Set_Vibrato_Set
.393c10	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c12	09 40		ora #$40	                ORA #$40
.393c14	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c16					OPL2_Set_Vibrato_Exit
.393c16	6b		rtl		                RTL
.393c17					OPL2_GET_VIBRATO
.393c17	48		pha		                PHA             ; begin setdp macro
.393c18	08		php		                PHP
.393c19	c2 20		rep #$20	                REP #$20        ; set A long
.393c1b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c1e	5b		tcd		                TCD
.393c1f	28		plp		                PLP
.393c20	68		pla		                PLA             ; end setdp macro
.393c21	c2 20		rep #$20	                REP #$20        ; set A long
.393c23	a9 20 00	lda #$0020	                LDA #$0020;
.393c26	85 28		sta $28		                STA OPL2_REG_REGION
.393c28	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393c2b	e2 20		sep #$20	                SEP #$20        ; set A short
.393c2d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c2f	29 40		and #$40	                AND #$40
.393c31	6b		rtl		                RTL
.393c32					OPL2_SET_MAINTAINSUSTAIN
.393c32	48		pha		                PHA             ; begin setdp macro
.393c33	08		php		                PHP
.393c34	c2 20		rep #$20	                REP #$20        ; set A long
.393c36	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c39	5b		tcd		                TCD
.393c3a	28		plp		                PLP
.393c3b	68		pla		                PLA             ; end setdp macro
.393c3c	08		php		              PHP ; Push the Carry
.393c3d	c2 20		rep #$20	                REP #$20        ; set A long
.393c3f	18		clc		              CLC
.393c40	a9 20 00	lda #$0020	              LDA #$0020;
.393c43	85 28		sta $28		              STA OPL2_REG_REGION
.393c45	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393c48	28		plp		              PLP ; Pull the Carry out
.393c49	e2 20		sep #$20	                SEP #$20        ; set A short
.393c4b	b0 08		bcs $393c55	              BCS OPL2_Set_MaintainSustain_Set;
.393c4d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c4f	29 df		and #$df	              AND #$DF
.393c51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c53	80 06		bra $393c5b	              BRA OPL2_Set_MaintainSustain_Exit
.393c55					OPL2_Set_MaintainSustain_Set
.393c55	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c57	09 20		ora #$20	              ORA #$20
.393c59	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c5b					OPL2_Set_MaintainSustain_Exit
.393c5b	6b		rtl		                RTL
.393c5c					OPL2_GET_MAINTAINSUSTAIN
.393c5c	48		pha		                PHA             ; begin setdp macro
.393c5d	08		php		                PHP
.393c5e	c2 20		rep #$20	                REP #$20        ; set A long
.393c60	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c63	5b		tcd		                TCD
.393c64	28		plp		                PLP
.393c65	68		pla		                PLA             ; end setdp macro
.393c66	c2 20		rep #$20	                REP #$20        ; set A long
.393c68	a9 20 00	lda #$0020	              LDA #$0020;
.393c6b	85 28		sta $28		              STA OPL2_REG_REGION
.393c6d	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393c70	e2 20		sep #$20	                SEP #$20        ; set A short
.393c72	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c74	29 20		and #$20	              AND #$20
.393c76	6b		rtl		                RTL
.393c77					OPL2_SET_ENVELOPESCALING
.393c77	48		pha		                PHA             ; begin setdp macro
.393c78	08		php		                PHP
.393c79	c2 20		rep #$20	                REP #$20        ; set A long
.393c7b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c7e	5b		tcd		                TCD
.393c7f	28		plp		                PLP
.393c80	68		pla		                PLA             ; end setdp macro
.393c81	08		php		              PHP ; Push the Carry
.393c82	c2 20		rep #$20	                REP #$20        ; set A long
.393c84	18		clc		              CLC
.393c85	a9 20 00	lda #$0020	              LDA #$0020;
.393c88	85 28		sta $28		              STA OPL2_REG_REGION
.393c8a	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393c8d	28		plp		              PLP ; Pull the Carry out
.393c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393c90	b0 08		bcs $393c9a	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c92	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c94	29 ef		and #$ef	              AND #$EF
.393c96	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c98	80 06		bra $393ca0	              BRA OPL2_Set_EnvelopeScaling_Exit
.393c9a					OPL2_Set_EnvelopeScaling_Set
.393c9a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c9c	09 10		ora #$10	              ORA #$10
.393c9e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ca0					OPL2_Set_EnvelopeScaling_Exit
.393ca0	6b		rtl		                RTL
.393ca1					OPL2_GET_ENVELOPESCALING
.393ca1	48		pha		                PHA             ; begin setdp macro
.393ca2	08		php		                PHP
.393ca3	c2 20		rep #$20	                REP #$20        ; set A long
.393ca5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca8	5b		tcd		                TCD
.393ca9	28		plp		                PLP
.393caa	68		pla		                PLA             ; end setdp macro
.393cab	c2 20		rep #$20	                REP #$20        ; set A long
.393cad	a9 20 00	lda #$0020	              LDA #$0020;
.393cb0	85 28		sta $28		              STA OPL2_REG_REGION
.393cb2	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393cb5	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cb9	29 10		and #$10	              AND #$10
.393cbb	6b		rtl		                RTL
.393cbc					OPL2_GET_MODFREQMULTIPLE
.393cbc	48		pha		                PHA             ; begin setdp macro
.393cbd	08		php		                PHP
.393cbe	c2 20		rep #$20	                REP #$20        ; set A long
.393cc0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc3	5b		tcd		                TCD
.393cc4	28		plp		                PLP
.393cc5	68		pla		                PLA             ; end setdp macro
.393cc6	c2 20		rep #$20	                REP #$20        ; set A long
.393cc8	a9 20 00	lda #$0020	              LDA #$0020;
.393ccb	85 28		sta $28		              STA OPL2_REG_REGION
.393ccd	20 b3 40	jsr $3940b3	              JSR OPL2_GET_REG_OFFSET
.393cd0	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cd4	29 0f		and #$0f	              AND #$0F
.393cd6	6b		rtl		              RTL
.393cd7					OPL2_SET_MODFREQMULTIPLE
.393cd7	48		pha		                PHA             ; begin setdp macro
.393cd8	08		php		                PHP
.393cd9	c2 20		rep #$20	                REP #$20        ; set A long
.393cdb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cde	5b		tcd		                TCD
.393cdf	28		plp		                PLP
.393ce0	68		pla		                PLA             ; end setdp macro
.393ce1	c2 20		rep #$20	                REP #$20        ; set A long
.393ce3	a9 20 00	lda #$0020	                LDA #$0020;
.393ce6	85 28		sta $28		                STA OPL2_REG_REGION
.393ce8	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393ceb	e2 20		sep #$20	                SEP #$20        ; set A short
.393ced	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cef	29 0f		and #$0f	                AND #$0F
.393cf1	85 32		sta $32		                STA OPL2_PARAMETER0
.393cf3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cf5	29 f0		and #$f0	                AND #$F0
.393cf7	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cf9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cfb	6b		rtl		                RTL
.393cfc					OPL2_SET_SCALINGLEVEL
.393cfc	48		pha		                PHA             ; begin setdp macro
.393cfd	08		php		                PHP
.393cfe	c2 20		rep #$20	                REP #$20        ; set A long
.393d00	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d03	5b		tcd		                TCD
.393d04	28		plp		                PLP
.393d05	68		pla		                PLA             ; end setdp macro
.393d06	c2 20		rep #$20	                REP #$20        ; set A long
.393d08	a9 40 00	lda #$0040	                LDA #$0040;
.393d0b	85 28		sta $28		                STA OPL2_REG_REGION
.393d0d	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393d10	e2 20		sep #$20	                SEP #$20        ; set A short
.393d12	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d14	29 03		and #$03	                AND #$03
.393d16	0a		asl a		                ASL
.393d17	0a		asl a		                ASL
.393d18	0a		asl a		                ASL
.393d19	0a		asl a		                ASL
.393d1a	0a		asl a		                ASL
.393d1b	0a		asl a		                ASL
.393d1c	85 32		sta $32		                STA OPL2_PARAMETER0
.393d1e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d20	29 3f		and #$3f	                AND #$3F
.393d22	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d24	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d26	6b		rtl		                RTL
.393d27					OPL2_SET_VOLUME
.393d27	48		pha		                PHA             ; begin setdp macro
.393d28	08		php		                PHP
.393d29	c2 20		rep #$20	                REP #$20        ; set A long
.393d2b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d2e	5b		tcd		                TCD
.393d2f	28		plp		                PLP
.393d30	68		pla		                PLA             ; end setdp macro
.393d31	c2 20		rep #$20	                REP #$20        ; set A long
.393d33	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d36	85 28		sta $28		                STA OPL2_REG_REGION
.393d38	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393d3b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d3d	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d3f	29 3f		and #$3f	                AND #$3F
.393d41	85 32		sta $32		                STA OPL2_PARAMETER0
.393d43	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d45	29 c0		and #$c0	                AND #$C0
.393d47	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d49	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d4b	6b		rtl		                RTL
.393d4c					OPL2_GET_VOLUME
.393d4c	48		pha		                PHA             ; begin setdp macro
.393d4d	08		php		                PHP
.393d4e	c2 20		rep #$20	                REP #$20        ; set A long
.393d50	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d53	5b		tcd		                TCD
.393d54	28		plp		                PLP
.393d55	68		pla		                PLA             ; end setdp macro
.393d56	c2 20		rep #$20	                REP #$20        ; set A long
.393d58	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d5b	85 28		sta $28		                STA OPL2_REG_REGION
.393d5d	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393d60	e2 20		sep #$20	                SEP #$20        ; set A short
.393d62	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d64	29 3f		and #$3f	                AND #$3F
.393d66	6b		rtl		                RTL
.393d67					OPL2_SET_ATTACK
.393d67	48		pha		                PHA             ; begin setdp macro
.393d68	08		php		                PHP
.393d69	c2 20		rep #$20	                REP #$20        ; set A long
.393d6b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d6e	5b		tcd		                TCD
.393d6f	28		plp		                PLP
.393d70	68		pla		                PLA             ; end setdp macro
.393d71	c2 20		rep #$20	                REP #$20        ; set A long
.393d73	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d76	85 28		sta $28		                STA OPL2_REG_REGION
.393d78	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393d7b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d7d	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d7f	29 0f		and #$0f	                AND #$0F
.393d81	0a		asl a		                ASL
.393d82	0a		asl a		                ASL
.393d83	0a		asl a		                ASL
.393d84	0a		asl a		                ASL
.393d85	85 32		sta $32		                STA OPL2_PARAMETER0
.393d87	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d89	29 0f		and #$0f	                AND #$0F
.393d8b	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d8d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d8f	6b		rtl		                RTL
.393d90					OPL2_GET_ATTACK
.393d90	48		pha		                PHA             ; begin setdp macro
.393d91	08		php		                PHP
.393d92	c2 20		rep #$20	                REP #$20        ; set A long
.393d94	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d97	5b		tcd		                TCD
.393d98	28		plp		                PLP
.393d99	68		pla		                PLA             ; end setdp macro
.393d9a	c2 20		rep #$20	                REP #$20        ; set A long
.393d9c	a9 60 00	lda #$0060	                LDA #$0060
.393d9f	85 28		sta $28		                STA OPL2_REG_REGION
.393da1	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393da4	e2 20		sep #$20	                SEP #$20        ; set A short
.393da6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393da8	29 f0		and #$f0	                AND #$F0
.393daa	4a		lsr a		                LSR
.393dab	4a		lsr a		                LSR
.393dac	4a		lsr a		                LSR
.393dad	4a		lsr a		                LSR
.393dae	6b		rtl		                RTL
.393daf					OPL2_SET_DECAY
.393daf	48		pha		                PHA             ; begin setdp macro
.393db0	08		php		                PHP
.393db1	c2 20		rep #$20	                REP #$20        ; set A long
.393db3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393db6	5b		tcd		                TCD
.393db7	28		plp		                PLP
.393db8	68		pla		                PLA             ; end setdp macro
.393db9	c2 20		rep #$20	                REP #$20        ; set A long
.393dbb	a9 60 00	lda #$0060	                LDA #$0060;
.393dbe	85 28		sta $28		                STA OPL2_REG_REGION
.393dc0	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393dc3	e2 20		sep #$20	                SEP #$20        ; set A short
.393dc5	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dc7	29 0f		and #$0f	                AND #$0F
.393dc9	85 32		sta $32		                STA OPL2_PARAMETER0
.393dcb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dcd	29 f0		and #$f0	                AND #$F0
.393dcf	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dd1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dd3	6b		rtl		                RTL
.393dd4					OPL2_GET_DECAY
.393dd4	48		pha		                PHA             ; begin setdp macro
.393dd5	08		php		                PHP
.393dd6	c2 20		rep #$20	                REP #$20        ; set A long
.393dd8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ddb	5b		tcd		                TCD
.393ddc	28		plp		                PLP
.393ddd	68		pla		                PLA             ; end setdp macro
.393dde	c2 20		rep #$20	                REP #$20        ; set A long
.393de0	a9 60 00	lda #$0060	                LDA #$0060
.393de3	85 28		sta $28		                STA OPL2_REG_REGION
.393de5	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393de8	e2 20		sep #$20	                SEP #$20        ; set A short
.393dea	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dec	29 0f		and #$0f	                AND #$0F
.393dee	6b		rtl		                RTL
.393def					OPL2_SET_SUSTAIN
.393def	48		pha		                PHA             ; begin setdp macro
.393df0	08		php		                PHP
.393df1	c2 20		rep #$20	                REP #$20        ; set A long
.393df3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393df6	5b		tcd		                TCD
.393df7	28		plp		                PLP
.393df8	68		pla		                PLA             ; end setdp macro
.393df9	c2 20		rep #$20	                REP #$20        ; set A long
.393dfb	a9 80 00	lda #$0080	                LDA #$0080;
.393dfe	85 28		sta $28		                STA OPL2_REG_REGION
.393e00	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393e03	e2 20		sep #$20	                SEP #$20        ; set A short
.393e05	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e07	29 0f		and #$0f	                AND #$0F
.393e09	0a		asl a		                ASL
.393e0a	0a		asl a		                ASL
.393e0b	0a		asl a		                ASL
.393e0c	0a		asl a		                ASL
.393e0d	85 32		sta $32		                STA OPL2_PARAMETER0
.393e0f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e11	29 0f		and #$0f	                AND #$0F
.393e13	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e15	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e17	6b		rtl		                RTL
.393e18					OPL2_GET_SUSTAIN
.393e18	48		pha		                PHA             ; begin setdp macro
.393e19	08		php		                PHP
.393e1a	c2 20		rep #$20	                REP #$20        ; set A long
.393e1c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e1f	5b		tcd		                TCD
.393e20	28		plp		                PLP
.393e21	68		pla		                PLA             ; end setdp macro
.393e22	c2 20		rep #$20	                REP #$20        ; set A long
.393e24	a9 80 00	lda #$0080	                LDA #$0080
.393e27	85 28		sta $28		                STA OPL2_REG_REGION
.393e29	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393e2c	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e30	29 f0		and #$f0	                AND #$F0
.393e32	4a		lsr a		                LSR
.393e33	4a		lsr a		                LSR
.393e34	4a		lsr a		                LSR
.393e35	4a		lsr a		                LSR
.393e36	6b		rtl		                RTL
.393e37					OPL2_SET_RELEASE
.393e37	48		pha		                PHA             ; begin setdp macro
.393e38	08		php		                PHP
.393e39	c2 20		rep #$20	                REP #$20        ; set A long
.393e3b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e3e	5b		tcd		                TCD
.393e3f	28		plp		                PLP
.393e40	68		pla		                PLA             ; end setdp macro
.393e41	c2 20		rep #$20	                REP #$20        ; set A long
.393e43	a9 80 00	lda #$0080	                LDA #$0080;
.393e46	85 28		sta $28		                STA OPL2_REG_REGION
.393e48	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393e4b	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4d	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e4f	29 0f		and #$0f	                AND #$0F
.393e51	85 32		sta $32		                STA OPL2_PARAMETER0
.393e53	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e55	29 f0		and #$f0	                AND #$F0
.393e57	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e59	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e5b	6b		rtl		                RTL
.393e5c					OPL2_GET_RELEASE
.393e5c	48		pha		                PHA             ; begin setdp macro
.393e5d	08		php		                PHP
.393e5e	c2 20		rep #$20	                REP #$20        ; set A long
.393e60	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e63	5b		tcd		                TCD
.393e64	28		plp		                PLP
.393e65	68		pla		                PLA             ; end setdp macro
.393e66	c2 20		rep #$20	                REP #$20        ; set A long
.393e68	a9 80 00	lda #$0080	                LDA #$0080
.393e6b	85 28		sta $28		                STA OPL2_REG_REGION
.393e6d	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.393e70	e2 20		sep #$20	                SEP #$20        ; set A short
.393e72	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e74	29 0f		and #$0f	                AND #$0F
.393e76	6b		rtl		                RTL
.393e77					OPL2_SET_FNUMBER
.393e77	48		pha		                PHA             ; begin setdp macro
.393e78	08		php		                PHP
.393e79	c2 20		rep #$20	                REP #$20        ; set A long
.393e7b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e7e	5b		tcd		                TCD
.393e7f	28		plp		                PLP
.393e80	68		pla		                PLA             ; end setdp macro
.393e81	e2 20		sep #$20	                SEP #$20        ; set A short
.393e83	18		clc		                CLC
.393e84	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e86	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e88	69 a0		adc #$a0	                ADC #$A0
.393e8a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e8c	a9 00		lda #$00	                LDA #$00
.393e8e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e90	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e92	18		clc		                CLC
.393e93	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e96	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e98	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e9a	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e9d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e9f	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea1	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393ea3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393ea5	18		clc		                CLC
.393ea6	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ea8	69 10		adc #$10	                ADC #$10
.393eaa	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eac	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393eae	29 03		and #$03	                AND #$03
.393eb0	85 33		sta $33		                STA OPL2_PARAMETER1
.393eb2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eb4	29 fc		and #$fc	                AND #$FC
.393eb6	05 33		ora $33		                ORA OPL2_PARAMETER1
.393eb8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393eba	6b		rtl		                RTL
.393ebb					OPL2_GET_FNUMBER
.393ebb	48		pha		                PHA             ; begin setdp macro
.393ebc	08		php		                PHP
.393ebd	c2 20		rep #$20	                REP #$20        ; set A long
.393ebf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ec2	5b		tcd		                TCD
.393ec3	28		plp		                PLP
.393ec4	68		pla		                PLA             ; end setdp macro
.393ec5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec7	18		clc		                CLC
.393ec8	a5 27		lda $27		                LDA OPL2_CHANNEL
.393eca	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ecc	69 a0		adc #$a0	                ADC #$A0
.393ece	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ed0	a9 00		lda #$00	                LDA #$00
.393ed2	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ed4	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ed6	18		clc		                CLC
.393ed7	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393eda	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393edc	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ede	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ee1	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ee3	e2 20		sep #$20	                SEP #$20        ; set A short
.393ee5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ee7	85 32		sta $32		                STA OPL2_PARAMETER0
.393ee9	18		clc		                CLC
.393eea	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eec	69 10		adc #$10	                ADC #$10
.393eee	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ef0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ef2	29 03		and #$03	                AND #$03
.393ef4	85 33		sta $33		                STA OPL2_PARAMETER1
.393ef6	6b		rtl		                RTL
.393ef7					OPL2_Set_Frequency
.393ef7	6b		rtl		                RTL
.393ef8					OPL2_Get_Frequency
.393ef8	6b		rtl		                RTL
.393ef9					OPL2_SET_BLOCK
.393ef9	48		pha		                PHA             ; begin setdp macro
.393efa	08		php		                PHP
.393efb	c2 20		rep #$20	                REP #$20        ; set A long
.393efd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f00	5b		tcd		                TCD
.393f01	28		plp		                PLP
.393f02	68		pla		                PLA             ; end setdp macro
.393f03	e2 20		sep #$20	                SEP #$20        ; set A short
.393f05	18		clc		                CLC
.393f06	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f08	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f0a	69 b0		adc #$b0	                ADC #$B0
.393f0c	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f0e	a9 00		lda #$00	                LDA #$00
.393f10	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f12	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f14	18		clc		                CLC
.393f15	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f18	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f1a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f1c	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f1f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f21	e2 20		sep #$20	                SEP #$20        ; set A short
.393f23	a5 31		lda $31		                LDA OPL2_OCTAVE
.393f25	29 07		and #$07	                AND #$07
.393f27	0a		asl a		                ASL
.393f28	0a		asl a		                ASL
.393f29	85 31		sta $31		                STA OPL2_OCTAVE
.393f2b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f2d	29 e3		and #$e3	                AND #$E3
.393f2f	05 31		ora $31		                ORA OPL2_OCTAVE
.393f31	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f33	60		rts		                RTS
.393f34					OPL2_SET_KEYON
.393f34	48		pha		                PHA             ; begin setdp macro
.393f35	08		php		                PHP
.393f36	c2 20		rep #$20	                REP #$20        ; set A long
.393f38	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f3b	5b		tcd		                TCD
.393f3c	28		plp		                PLP
.393f3d	68		pla		                PLA             ; end setdp macro
.393f3e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f40	18		clc		                CLC
.393f41	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f43	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f45	69 b0		adc #$b0	                ADC #$B0
.393f47	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f49	a9 00		lda #$00	                LDA #$00
.393f4b	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f4d	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f4f	18		clc		                CLC
.393f50	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f53	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f55	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f57	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f5a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f5c	e2 20		sep #$20	                SEP #$20        ; set A short
.393f5e	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f60	29 01		and #$01	                AND #$01
.393f62	f0 02		beq $393f66	                BEQ SET_KEYON_OFF
.393f64	a9 20		lda #$20	                LDA #$20
.393f66					    SET_KEYON_OFF
.393f66	85 32		sta $32		                STA OPL2_PARAMETER0
.393f68	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f6a	29 df		and #$df	                AND #$DF
.393f6c	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f6e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f70	60		rts		                RTS
.393f71					OPL2_SET_FEEDBACK
.393f71	48		pha		                PHA             ; begin setdp macro
.393f72	08		php		                PHP
.393f73	c2 20		rep #$20	                REP #$20        ; set A long
.393f75	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f78	5b		tcd		                TCD
.393f79	28		plp		                PLP
.393f7a	68		pla		                PLA             ; end setdp macro
.393f7b	e2 20		sep #$20	                SEP #$20        ; set A short
.393f7d	18		clc		              CLC
.393f7e	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f80	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f82	69 c0		adc #$c0	              ADC #$C0
.393f84	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f86	a9 00		lda #$00	              LDA #$00
.393f88	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f8a	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f8c	18		clc		              CLC
.393f8d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f90	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f92	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f94	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f97	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f99	e2 20		sep #$20	                SEP #$20        ; set A short
.393f9b	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393f9d	29 07		and #$07	              AND #$07
.393f9f	0a		asl a		              ASL
.393fa0	85 32		sta $32		              STA OPL2_PARAMETER0
.393fa2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fa4	29 01		and #$01	              AND #$01
.393fa6	05 32		ora $32		              ORA OPL2_PARAMETER0
.393fa8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393faa	6b		rtl		                RTL
.393fab					OPL2_SET_SYNTHMODE
.393fab	48		pha		                PHA             ; begin setdp macro
.393fac	08		php		                PHP
.393fad	c2 20		rep #$20	                REP #$20        ; set A long
.393faf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fb2	5b		tcd		                TCD
.393fb3	28		plp		                PLP
.393fb4	68		pla		                PLA             ; end setdp macro
.393fb5	08		php		              PHP ; Push the Carry
.393fb6	e2 20		sep #$20	                SEP #$20        ; set A short
.393fb8	18		clc		              CLC
.393fb9	a5 27		lda $27		              LDA OPL2_CHANNEL
.393fbb	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fbd	69 c0		adc #$c0	              ADC #$C0
.393fbf	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fc1	a9 00		lda #$00	              LDA #$00
.393fc3	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fc5	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fc7	18		clc		              CLC
.393fc8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fcb	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fcd	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fcf	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fd2	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fd4	28		plp		              PLP ; Pull the Carry out
.393fd5	e2 20		sep #$20	                SEP #$20        ; set A short
.393fd7	b0 08		bcs $393fe1	              BCS OPL2_Set_Synthmode_Set;
.393fd9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fdb	29 fe		and #$fe	              AND #$FE
.393fdd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fdf	80 06		bra $393fe7	              BRA OPL2_Set_Synthmode_Exit
.393fe1					OPL2_Set_Synthmode_Set
.393fe1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fe3	09 01		ora #$01	              ORA #$01
.393fe5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fe7					OPL2_Set_Synthmode_Exit
.393fe7	6b		rtl		                RTL
.393fe8					OPL2_SET_DEEPTREMOLO
.393fe8	48		pha		                PHA             ; begin setdp macro
.393fe9	08		php		                PHP
.393fea	c2 20		rep #$20	                REP #$20        ; set A long
.393fec	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fef	5b		tcd		                TCD
.393ff0	28		plp		                PLP
.393ff1	68		pla		                PLA             ; end setdp macro
.393ff2	c2 20		rep #$20	                REP #$20        ; set A long
.393ff4	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ff7	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ff9	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ffc	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ffe	e2 20		sep #$20	                SEP #$20        ; set A short
.394000	b0 08		bcs $39400a	              BCS OPL2_Set_DeepTremolo_Set;
.394002	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394004	29 7f		and #$7f	              AND #$7F
.394006	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394008	80 06		bra $394010	              BRA OPL2_Set_DeepTremolo_Exit
.39400a					OPL2_Set_DeepTremolo_Set
.39400a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39400c	09 80		ora #$80	              ORA #$80
.39400e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394010					OPL2_Set_DeepTremolo_Exit
.394010	6b		rtl		                RTL
.394011					OPL2_SET_DEEPVIBRATO
.394011	48		pha		                PHA             ; begin setdp macro
.394012	08		php		                PHP
.394013	c2 20		rep #$20	                REP #$20        ; set A long
.394015	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394018	5b		tcd		                TCD
.394019	28		plp		                PLP
.39401a	68		pla		                PLA             ; end setdp macro
.39401b	c2 20		rep #$20	                REP #$20        ; set A long
.39401d	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394020	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394022	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394025	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394027	e2 20		sep #$20	                SEP #$20        ; set A short
.394029	b0 08		bcs $394033	              BCS OPL2_Set_DeepVibrato_Set;
.39402b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39402d	29 bf		and #$bf	              AND #$BF
.39402f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394031	80 06		bra $394039	              BRA OPL2_Set_DeepVibrato_Exit
.394033					OPL2_Set_DeepVibrato_Set
.394033	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394035	09 40		ora #$40	              ORA #$40
.394037	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394039					OPL2_Set_DeepVibrato_Exit
.394039	6b		rtl		                RTL
.39403a					OPL2_SET_PERCUSSION
.39403a	48		pha		                PHA             ; begin setdp macro
.39403b	08		php		                PHP
.39403c	c2 20		rep #$20	                REP #$20        ; set A long
.39403e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394041	5b		tcd		                TCD
.394042	28		plp		                PLP
.394043	68		pla		                PLA             ; end setdp macro
.394044	c2 20		rep #$20	                REP #$20        ; set A long
.394046	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394049	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39404b	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39404e	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394050	e2 20		sep #$20	                SEP #$20        ; set A short
.394052	b0 08		bcs $39405c	                BCS OPL2_Set_Percussion_Set;
.394054	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394056	29 df		and #$df	                AND #$DF
.394058	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39405a	80 06		bra $394062	                BRA OPL2_Set_Percussion_Exit
.39405c					OPL2_Set_Percussion_Set
.39405c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39405e	09 20		ora #$20	                ORA #$20
.394060	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394062					OPL2_Set_Percussion_Exit
.394062	6b		rtl		                RTL
.394063					OPL2_SET_DRUMS
.394063	48		pha		                PHA             ; begin setdp macro
.394064	08		php		                PHP
.394065	c2 20		rep #$20	                REP #$20        ; set A long
.394067	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39406a	5b		tcd		                TCD
.39406b	28		plp		                PLP
.39406c	68		pla		                PLA             ; end setdp macro
.39406d	c2 20		rep #$20	                REP #$20        ; set A long
.39406f	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394072	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394074	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394077	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394079	e2 20		sep #$20	                SEP #$20        ; set A short
.39407b	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39407d	29 1f		and #$1f	                AND #$1F
.39407f	85 32		sta $32		                STA OPL2_PARAMETER0
.394081	49 ff		eor #$ff	                EOR #$FF
.394083	85 33		sta $33		                STA OPL2_PARAMETER1
.394085	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394087	25 33		and $33		                AND OPL2_PARAMETER1
.394089	05 32		ora $32		                ORA OPL2_PARAMETER0
.39408b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39408d	6b		rtl		                RTL
.39408e					OPL2_SET_WAVEFORM
.39408e	48		pha		                PHA             ; begin setdp macro
.39408f	08		php		                PHP
.394090	c2 20		rep #$20	                REP #$20        ; set A long
.394092	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394095	5b		tcd		                TCD
.394096	28		plp		                PLP
.394097	68		pla		                PLA             ; end setdp macro
.394098	c2 20		rep #$20	                REP #$20        ; set A long
.39409a	a9 e0 00	lda #$00e0	                LDA #$00E0;
.39409d	85 28		sta $28		                STA OPL2_REG_REGION
.39409f	20 b3 40	jsr $3940b3	                JSR OPL2_GET_REG_OFFSET
.3940a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a4	a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940a6	29 03		and #$03	                AND #$03
.3940a8	85 32		sta $32		                STA OPL2_PARAMETER0
.3940aa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940ac	29 fc		and #$fc	                AND #$FC
.3940ae	05 32		ora $32		                ORA OPL2_PARAMETER0
.3940b0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940b2	6b		rtl		                RTL
.3940b3					OPL2_GET_REG_OFFSET
.3940b3	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3940b5	a5 27		lda $27		                LDA OPL2_CHANNEL
.3940b7	29 0f		and #$0f	                AND #$0F
.3940b9	aa		tax		                TAX
.3940ba	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.3940bc	d0 06		bne $3940c4	                BNE OPL2_Get_Register_Offset_l0
.3940be	bf fb 16 39	lda $3916fb,x	                LDA @lregisterOffsets_operator0, X
.3940c2	80 04		bra $3940c8	                BRA OPL2_Get_Register_Offset_exit
.3940c4					OPL2_Get_Register_Offset_l0
.3940c4	bf 04 17 39	lda $391704,x	                LDA @lregisterOffsets_operator1, X
.3940c8					OPL2_Get_Register_Offset_exit
.3940c8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3940ca	a9 00		lda #$00	                LDA #$00
.3940cc	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3940ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940d0	18		clc		                CLC
.3940d1	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3940d4	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940d6	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940d8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940da	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940dd	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940df	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940e0					ITRACE
.3940e0	08		php		                PHP
.3940e1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940e3	8b		phb		                PHB                 ; Print the text
.3940e4	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940e6	aa		tax		                TAX                 ; ... into X
.3940e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3940e9	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940eb	48		pha		                PHA
.3940ec	ab		plb		                PLB                 ; ... into B
.3940ed	22 87 07 39	jsl $390787	                JSL IPUTS           ; Print the string
.3940f1	c2 20		rep #$20	                REP #$20        ; set A long
.3940f3	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940f5	83 08		sta $08,s	                STA #8,S
.3940f7	a3 02		lda $02,s	                LDA #2,S
.3940f9	83 06		sta $06,s	                STA #6,S
.3940fb	ab		plb		                PLB
.3940fc	68		pla		                PLA                 ; Clean up the stack
.3940fd	68		pla		                PLA
.3940fe	28		plp		                PLP
.3940ff	6b		rtl		                RTL
.394100					ISETTIMEOUT
.394100	8b		phb		                PHB
.394101	0b		phd		                PHD
.394102	08		php		                PHP
.394103	48		pha		                PHA             ; begin setdbr macro
.394104	08		php		                PHP
.394105	e2 20		sep #$20	                SEP #$20        ; set A short
.394107	a9 00		lda #$00	                LDA #0
.394109	48		pha		                PHA
.39410a	ab		plb		                PLB
.39410b	28		plp		                PLP
.39410c	68		pla		                PLA             ; end setdbr macro
.39410d	48		pha		                PHA             ; begin setdp macro
.39410e	08		php		                PHP
.39410f	c2 20		rep #$20	                REP #$20        ; set A long
.394111	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394114	5b		tcd		                TCD
.394115	28		plp		                PLP
.394116	68		pla		                PLA             ; end setdp macro
.394117	78		sei		                SEI                             ; We don't want to be interrupted
.394118	e2 20		sep #$20	                SEP #$20        ; set A short
.39411a	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.39411c	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.39411e	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.394120	85 0c		sta $032c	                STA @b BIOS_FLAGS
.394122	28		plp		done            PLP
.394123	2b		pld		                PLD
.394124	ab		plb		                PLB
.394125	6b		rtl		                RTL
.394126					ICMDBLOCK
.394126	0b		phd		                PHD
.394127	08		php		                PHP
.394128	48		pha		                PHA             ; begin setdp macro
.394129	08		php		                PHP
.39412a	c2 20		rep #$20	                REP #$20        ; set A long
.39412c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39412f	5b		tcd		                TCD
.394130	28		plp		                PLP
.394131	68		pla		                PLA             ; end setdp macro
.394132	e2 20		sep #$20	                SEP #$20        ; set A short
.394134	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394136	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394138	d0 06		bne $394140	                BNE ret_success             ; No: just return
.39413a	22 6a 68 39	jsl $39686a	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.39413e	90 0c		bcc $39414c	                BCC pass_failure
.394140					ret_success
.394140	e2 20		sep #$20	                SEP #$20        ; set A short
.394142	64 00		stz $0320	                STZ BIOS_STATUS
.394144	28		plp		                PLP
.394145	2b		pld		                PLD
.394146	38		sec		                SEC
.394147	6b		rtl		                RTL
.394148					ret_failure
.394148	e2 20		sep #$20	                SEP #$20        ; set A short
.39414a	85 00		sta $0320	                STA BIOS_STATUS
.39414c	28		plp		pass_failure    PLP
.39414d	2b		pld		                PLD
.39414e	18		clc		                CLC
.39414f	6b		rtl		                RTL
.394150					IGETBLOCK
.394150	0b		phd		                PHD
.394151	8b		phb		                PHB
.394152	08		php		                PHP
.394153	48		pha		                PHA             ; begin setdbr macro
.394154	08		php		                PHP
.394155	e2 20		sep #$20	                SEP #$20        ; set A short
.394157	a9 00		lda #$00	                LDA #0
.394159	48		pha		                PHA
.39415a	ab		plb		                PLB
.39415b	28		plp		                PLP
.39415c	68		pla		                PLA             ; end setdbr macro
.39415d	48		pha		                PHA             ; begin setdp macro
.39415e	08		php		                PHP
.39415f	c2 20		rep #$20	                REP #$20        ; set A long
.394161	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394164	5b		tcd		                TCD
.394165	28		plp		                PLP
.394166	68		pla		                PLA             ; end setdp macro
.394167	e2 20		sep #$20	                SEP #$20        ; set A short
.394169	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.39416b	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.39416d	f0 13		beq $394182	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.39416f	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.394171	f0 17		beq $39418a	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.394173	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394175	f0 1b		beq $394192	                BEQ hd_getblock
.394177	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394179					ret_failure
.394179	e2 20		sep #$20	                SEP #$20        ; set A short
.39417b	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.39417d	28		plp		                PLP
.39417e	ab		plb		                PLB
.39417f	2b		pld		                PLD
.394180	38		sec		                SEC                                 ; Return failure
.394181	6b		rtl		                RTL
.394182	22 8c 5d 39	jsl $395d8c	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394186	b0 12		bcs $39419a	                BCS ret_success
.394188	80 ef		bra $394179	                BRA ret_failure
.39418a	22 6f 66 39	jsl $39666f	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.39418e	b0 0a		bcs $39419a	                BCS ret_success
.394190	80 e7		bra $394179	                BRA ret_failure
.394192	22 2b 6c 39	jsl $396c2b	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394196	b0 02		bcs $39419a	                BCS ret_success
.394198	80 df		bra $394179	                BRA ret_failure
.39419a					ret_success
.39419a	e2 20		sep #$20	                SEP #$20        ; set A short
.39419c	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.39419e	28		plp		                PLP
.39419f	ab		plb		                PLB
.3941a0	2b		pld		                PLD
.3941a1	38		sec		                SEC                                 ; Return success
.3941a2	6b		rtl		                RTL
.3941a3					IPUTBLOCK
.3941a3	0b		phd		                PHD
.3941a4	8b		phb		                PHB
.3941a5	08		php		                PHP
.3941a6	48		pha		                PHA             ; begin setdbr macro
.3941a7	08		php		                PHP
.3941a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3941aa	a9 00		lda #$00	                LDA #0
.3941ac	48		pha		                PHA
.3941ad	ab		plb		                PLB
.3941ae	28		plp		                PLP
.3941af	68		pla		                PLA             ; end setdbr macro
.3941b0	48		pha		                PHA             ; begin setdp macro
.3941b1	08		php		                PHP
.3941b2	c2 20		rep #$20	                REP #$20        ; set A long
.3941b4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941b7	5b		tcd		                TCD
.3941b8	28		plp		                PLP
.3941b9	68		pla		                PLA             ; end setdp macro
.3941ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3941bc	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941be	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941c0	f0 13		beq $3941d5	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3941c2	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3941c4	f0 17		beq $3941dd	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3941c6	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941c8	f0 1b		beq $3941e5	                BEQ hd_putblock
.3941ca	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941cc					ret_failure
.3941cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ce	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941d0	28		plp		                PLP
.3941d1	ab		plb		                PLB
.3941d2	2b		pld		                PLD
.3941d3	18		clc		                CLC                                 ; Return failure
.3941d4	6b		rtl		                RTL
.3941d5	22 2c 5e 39	jsl $395e2c	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941d9	90 f1		bcc $3941cc	                BCC ret_failure
.3941db	80 10		bra $3941ed	                BRA ret_success
.3941dd	22 d4 66 39	jsl $3966d4	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941e1	90 e9		bcc $3941cc	                BCC ret_failure
.3941e3	80 08		bra $3941ed	                BRA ret_success
.3941e5	22 bc 6c 39	jsl $396cbc	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941e9	90 e1		bcc $3941cc	                BCC ret_failure
.3941eb	80 00		bra $3941ed	                BRA ret_success
.3941ed					ret_success
.3941ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ef	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941f1	28		plp		                PLP
.3941f2	ab		plb		                PLB
.3941f3	2b		pld		                PLD
.3941f4	38		sec		                SEC                                 ; Return success
.3941f5	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941f6					DOS_DIROPEN
.3941f6	da		phx		                PHX
.3941f7	5a		phy		                PHY
.3941f8	0b		phd		                PHD
.3941f9	8b		phb		                PHB
.3941fa	08		php		                PHP
.3941fb	48		pha		                PHA             ; begin setdbr macro
.3941fc	08		php		                PHP
.3941fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ff	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394201	48		pha		                PHA
.394202	ab		plb		                PLB
.394203	28		plp		                PLP
.394204	68		pla		                PLA             ; end setdbr macro
.394205	48		pha		                PHA             ; begin setdp macro
.394206	08		php		                PHP
.394207	c2 20		rep #$20	                REP #$20        ; set A long
.394209	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39420c	5b		tcd		                TCD
.39420d	28		plp		                PLP
.39420e	68		pla		                PLA             ; end setdp macro
.39420f	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394212	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394215	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394218	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39421b	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.39421e	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394220	85 18		sta $0338	                STA DOS_DIR_PTR
.394222	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394225	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394227	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394229	e2 20		sep #$20	                SEP #$20        ; set A short
.39422b	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.39422e	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394230	d0 24		bne $394256	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394232					fetch_fat12
.394232	e2 20		sep #$20	                SEP #$20        ; set A short
.394234	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394236	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394239	c2 20		rep #$20	                REP #$20        ; set A long
.39423b	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.39423d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39423f	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394241	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394243	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394246	85 02		sta $0322	                STA BIOS_LBA
.394248	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39424b	85 04		sta $0324	                STA BIOS_LBA+2
.39424d	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.394251	b0 1f		bcs $394272	                BCS do_success              ; If sucessful, set the directory cursor
.394253	82 bc 16	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394256					fetch_fat32
.394256	e2 20		sep #$20	                SEP #$20        ; set A short
.394258	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.39425a	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39425d	c2 20		rep #$20	                REP #$20        ; set A long
.39425f	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394262	85 10		sta $0330	                STA DOS_CLUS_ID
.394264	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394267	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394269	22 c1 47 39	jsl $3947c1	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39426d	b0 03		bcs $394272	                BCS do_success              ; If successful: set the directory cursor
.39426f	82 a0 16	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394272	82 a4 16	brl $395919	do_success      BRL IF_SUCCESS
.394275					DOS_DIRFIRST
.394275	0b		phd		                PHD
.394276	08		php		                PHP
.394277	48		pha		                PHA             ; begin setdp macro
.394278	08		php		                PHP
.394279	c2 20		rep #$20	                REP #$20        ; set A long
.39427b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39427e	5b		tcd		                TCD
.39427f	28		plp		                PLP
.394280	68		pla		                PLA             ; end setdp macro
.394281	c2 20		rep #$20	                REP #$20        ; set A long
.394283	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394286	85 18		sta $0338	                STA DOS_DIR_PTR
.394288	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39428b	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39428d	28		plp		                PLP
.39428e	2b		pld		                PLD
.39428f	6b		rtl		                RTL
.394290					DOS_DIRNEXT
.394290	da		phx		                PHX
.394291	5a		phy		                PHY
.394292	0b		phd		                PHD
.394293	8b		phb		                PHB
.394294	08		php		                PHP
.394295	48		pha		                PHA             ; begin setdbr macro
.394296	08		php		                PHP
.394297	e2 20		sep #$20	                SEP #$20        ; set A short
.394299	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39429b	48		pha		                PHA
.39429c	ab		plb		                PLB
.39429d	28		plp		                PLP
.39429e	68		pla		                PLA             ; end setdbr macro
.39429f	48		pha		                PHA             ; begin setdp macro
.3942a0	08		php		                PHP
.3942a1	c2 20		rep #$20	                REP #$20        ; set A long
.3942a3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942a6	5b		tcd		                TCD
.3942a7	28		plp		                PLP
.3942a8	68		pla		                PLA             ; end setdp macro
.3942a9	c2 20		rep #$20	                REP #$20        ; set A long
.3942ab	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3942ac	a5 18		lda $0338	                LDA DOS_DIR_PTR
.3942ae	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3942b1	85 18		sta $0338	                STA DOS_DIR_PTR
.3942b3	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942b5	69 00 00	adc #$0000	                ADC #0
.3942b8	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942ba	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3942bb	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3942be	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3942c0	85 28		sta $0348	                STA DOS_TEMP
.3942c2	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3942c5	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3942c7	85 2a		sta $034a	                STA DOS_TEMP+2
.3942c9	30 0c		bmi $3942d7	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3942cb	f0 03		beq $3942d0	                BEQ check_lower
.3942cd	82 49 16	brl $395919	                BRL IF_SUCCESS
.3942d0	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3942d2	f0 03		beq $3942d7	                BEQ get_next_block
.3942d4	82 42 16	brl $395919	                BRL IF_SUCCESS
.3942d7					get_next_block
.3942d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3942d9	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942dc	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942de	f0 38		beq $394318	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942e0					next_sector
.3942e0	c2 20		rep #$20	                REP #$20        ; set A long
.3942e2	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942e5	1a		inc a		                INC A
.3942e6	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942e9	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942ec	d0 07		bne $3942f5	                BNE read_sector
.3942ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3942f0	a9 00		lda #$00	                LDA #0
.3942f2	82 19 16	brl $39590e	                BRL IF_FAILURE
.3942f5					read_sector
.3942f5	c2 20		rep #$20	                REP #$20        ; set A long
.3942f7	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3942fa	85 02		sta $0322	                STA BIOS_LBA
.3942fc	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942ff	85 04		sta $0324	                STA BIOS_LBA+2
.394301	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394304	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394306	85 18		sta $0338	                STA DOS_DIR_PTR
.394308	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39430b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39430d	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39430f	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394313	b0 39		bcs $39434e	                BCS do_success              ; If successful: set the directory cursor
.394315	82 fa 15	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394318					next_cluster
.394318	c2 20		rep #$20	                REP #$20        ; set A long
.39431a	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.39431d	85 10		sta $0330	                STA DOS_CLUS_ID
.39431f	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394322	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394324	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394327	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394329	85 18		sta $0338	                STA DOS_DIR_PTR
.39432b	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39432e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394330	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394332	22 cc 4b 39	jsl $394bcc	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394336	b0 03		bcs $39433b	                BCS set_next
.394338	82 d7 15	brl $395912	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.39433b	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.39433d	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394340	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394342	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394345	22 c1 47 39	jsl $3947c1	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394349	b0 03		bcs $39434e	                BCS do_success              ; If successful: set the directory cursor
.39434b	82 c4 15	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39434e	82 c8 15	brl $395919	do_success      BRL IF_SUCCESS
.394351					DOS_DIRFINDFREE
.394351	da		phx		                PHX
.394352	5a		phy		                PHY
.394353	0b		phd		                PHD
.394354	8b		phb		                PHB
.394355	08		php		                PHP
.394356	48		pha		                PHA             ; begin setdbr macro
.394357	08		php		                PHP
.394358	e2 20		sep #$20	                SEP #$20        ; set A short
.39435a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39435c	48		pha		                PHA
.39435d	ab		plb		                PLB
.39435e	28		plp		                PLP
.39435f	68		pla		                PLA             ; end setdbr macro
.394360	48		pha		                PHA             ; begin setdp macro
.394361	08		php		                PHP
.394362	c2 20		rep #$20	                REP #$20        ; set A long
.394364	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394367	5b		tcd		                TCD
.394368	28		plp		                PLP
.394369	68		pla		                PLA             ; end setdp macro
.39436a	22 aa 55 39	jsl $3955aa	                JSL IF_DIROPEN
.39436e	b0 06		bcs $394376	                BCS start_walk
.394370	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394373	82 28 00	brl $39439e	                BRL ret_failure
.394376	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394379					chk_entry
.394379	e2 20		sep #$20	                SEP #$20        ; set A short
.39437b	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.39437d	f0 1c		beq $39439b	                BEQ ret_success             ; If 0: we have a blank... return it
.39437f	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.394381	f0 18		beq $39439b	                BEQ ret_success             ; Yes: return it
.394383	22 e4 55 39	jsl $3955e4	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394387	b0 ed		bcs $394376	                BCS start_walk              ; If we got one, start walking it
.394389	22 a1 43 39	jsl $3943a1	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.39438d	90 0f		bcc $39439e	                BCC ret_failure             ; If that didn't work, return the failure
.39438f	c2 20		rep #$20	                REP #$20        ; set A long
.394391	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.394394	85 18		sta $0338	                STA DOS_DIR_PTR
.394396	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394399	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39439b	82 7b 15	brl $395919	ret_success     BRL IF_SUCCESS
.39439e	82 6d 15	brl $39590e	ret_failure     BRL IF_FAILURE
.3943a1					DOS_DIRAPPEND
.3943a1	da		phx		                PHX
.3943a2	8b		phb		                PHB
.3943a3	0b		phd		                PHD
.3943a4	08		php		                PHP
.3943a5	48		pha		                PHA             ; begin setdbr macro
.3943a6	08		php		                PHP
.3943a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3943a9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943ab	48		pha		                PHA
.3943ac	ab		plb		                PLB
.3943ad	28		plp		                PLP
.3943ae	68		pla		                PLA             ; end setdbr macro
.3943af	48		pha		                PHA             ; begin setdp macro
.3943b0	08		php		                PHP
.3943b1	c2 20		rep #$20	                REP #$20        ; set A long
.3943b3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943b6	5b		tcd		                TCD
.3943b7	28		plp		                PLP
.3943b8	68		pla		                PLA             ; end setdp macro
.3943b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3943bb	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3943be	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3943c0	f0 09		beq $3943cb	                BEQ clr_sector                  ; Yes: clear out the directory data
.3943c2					ret_failure
.3943c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3943c4	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3943c6	85 0e		sta $032e	                STA DOS_STATUS
.3943c8	82 3e 00	brl $394409	                BRL pass_failure
.3943cb					clr_sector
.3943cb	c2 20		rep #$20	                REP #$20        ; set A long
.3943cd	a9 00 00	lda #$0000	                LDA #0
.3943d0	a2 00 00	ldx #$0000	                LDX #0
.3943d3	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943d6	e8		inx		                INX
.3943d7	e8		inx		                INX
.3943d8	e0 00 02	cpx #$0200	                CPX #512
.3943db	d0 f6		bne $3943d3	                BNE clr_loop
.3943dd	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943e0	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943e2	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943e5	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943e7	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943ea	85 10		sta $0330	                STA DOS_CLUS_ID
.3943ec	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943ef	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943f1	22 c0 4f 39	jsl $394fc0	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943f5	90 12		bcc $394409	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943f7	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3943fa	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943fd	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394400	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394403	28		plp		ret_success     PLP
.394404	2b		pld		                PLD
.394405	ab		plb		                PLB
.394406	fa		plx		                PLX
.394407	38		sec		                SEC
.394408	6b		rtl		                RTL
.394409	28		plp		pass_failure    PLP
.39440a	2b		pld		                PLD
.39440b	ab		plb		                PLB
.39440c	fa		plx		                PLX
.39440d	18		clc		                CLC
.39440e	6b		rtl		                RTL
.39440f					DOS_DIRWRITE
.39440f	da		phx		                PHX
.394410	5a		phy		                PHY
.394411	0b		phd		                PHD
.394412	8b		phb		                PHB
.394413	08		php		                PHP
.394414	48		pha		                PHA             ; begin setdbr macro
.394415	08		php		                PHP
.394416	e2 20		sep #$20	                SEP #$20        ; set A short
.394418	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39441a	48		pha		                PHA
.39441b	ab		plb		                PLB
.39441c	28		plp		                PLP
.39441d	68		pla		                PLA             ; end setdbr macro
.39441e	48		pha		                PHA             ; begin setdp macro
.39441f	08		php		                PHP
.394420	c2 20		rep #$20	                REP #$20        ; set A long
.394422	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394425	5b		tcd		                TCD
.394426	28		plp		                PLP
.394427	68		pla		                PLA             ; end setdp macro
.394428	e2 20		sep #$20	                SEP #$20        ; set A short
.39442a	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39442d	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39442f	f0 1f		beq $394450	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394431					write_sector
.394431	c2 20		rep #$20	                REP #$20        ; set A long
.394433	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394436	85 02		sta $0322	                STA BIOS_LBA
.394438	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39443b	85 04		sta $0324	                STA BIOS_LBA+2
.39443d	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394440	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394442	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394445	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394447	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.39444b	b0 1f		bcs $39446c	                BCS ret_success
.39444d	82 be 14	brl $39590e	ret_failure     BRL IF_FAILURE
.394450					write_cluster
.394450	c2 20		rep #$20	                REP #$20        ; set A long
.394452	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394455	85 10		sta $0330	                STA DOS_CLUS_ID
.394457	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39445a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39445c	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39445f	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394461	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394464	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394466	22 fe 47 39	jsl $3947fe	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.39446a	90 e1		bcc $39444d	                BCC ret_failure
.39446c	82 aa 14	brl $395919	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.39446f					DOS_INIT
.39446f	8b		phb		                PHB
.394470	0b		phd		                PHD
.394471	08		php		                PHP
.394472	48		pha		                PHA             ; begin setdbr macro
.394473	08		php		                PHP
.394474	e2 20		sep #$20	                SEP #$20        ; set A short
.394476	a9 00		lda #$00	                LDA #0
.394478	48		pha		                PHA
.394479	ab		plb		                PLB
.39447a	28		plp		                PLP
.39447b	68		pla		                PLA             ; end setdbr macro
.39447c	48		pha		                PHA             ; begin setdp macro
.39447d	08		php		                PHP
.39447e	c2 20		rep #$20	                REP #$20        ; set A long
.394480	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394483	5b		tcd		                TCD
.394484	28		plp		                PLP
.394485	68		pla		                PLA             ; end setdp macro
.394486	e2 20		sep #$20	                SEP #$20        ; set A short
.394488	c2 10		rep #$10	                REP #$10        ; set X long
.39448a	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.39448d	a9 00		lda #$00	                LDA #0
.39448f	9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.394492	e8		inx		                INX
.394493	e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.394496	d0 f7		bne $39448f	                BNE b0_clr_loop
.394498	48		pha		                PHA             ; begin setdbr macro
.394499	08		php		                PHP
.39449a	e2 20		sep #$20	                SEP #$20        ; set A short
.39449c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39449e	48		pha		                PHA
.39449f	ab		plb		                PLB
.3944a0	28		plp		                PLP
.3944a1	68		pla		                PLA             ; end setdbr macro
.3944a2	48		pha		                PHA             ; begin setdp macro
.3944a3	08		php		                PHP
.3944a4	c2 20		rep #$20	                REP #$20        ; set A long
.3944a6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944a9	5b		tcd		                TCD
.3944aa	28		plp		                PLP
.3944ab	68		pla		                PLA             ; end setdp macro
.3944ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3944ae	c2 10		rep #$10	                REP #$10        ; set X long
.3944b0	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3944b3	a9 00		lda #$00	                LDA #0
.3944b5	9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3944b8	e8		inx		                INX
.3944b9	e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3944bc	d0 f7		bne $3944b5	                BNE b38_clr_loop
.3944be	c2 20		rep #$20	                REP #$20        ; set A long
.3944c0	a9 56 48	lda #$4856	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3944c3	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3944c7	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3944ca	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.3944ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3944d0	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3944d2	85 01		sta $0321	                STA BIOS_DEV
.3944d4	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.3944d6	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.3944da	a9 00		lda #$00	                LDA #0
.3944dc	a2 00 00	ldx #$0000	                LDX #0
.3944df	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.3944e2	e8		inx		                INX
.3944e3	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.3944e6	d0 f7		bne $3944df	                BNE fd_zero_loop
.3944e8	a9 00		lda #$00	                LDA #0
.3944ea	a2 00 00	ldx #$0000	                LDX #0
.3944ed	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3944f0	e8		inx		                INX
.3944f1	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3944f4	d0 f7		bne $3944ed	                BNE sect_zero_loop
.3944f6	c2 20		rep #$20	                REP #$20        ; set A long
.3944f8	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.3944fb	85 20		sta $0340	                STA @b DOS_FD_PTR
.3944fd	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394500	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394502	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394505	85 28		sta $0348	                STA @b DOS_TEMP
.394507	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39450a	85 2a		sta $034a	                STA @b DOS_TEMP+2
.39450c	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.39450f	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394512	a5 28		lda $0348	                LDA @b DOS_TEMP
.394514	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394516	c8		iny		                INY
.394517	c8		iny		                INY
.394518	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39451a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39451c	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.39451d	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.39451f	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394522	85 20		sta $0340	                STA @b DOS_FD_PTR
.394524	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.394526	69 00 00	adc #$0000	                ADC #0
.394529	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39452b	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.39452c	a5 28		lda $0348	                LDA @b DOS_TEMP
.39452e	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394531	85 28		sta $0348	                STA @b DOS_TEMP
.394533	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394535	69 00 00	adc #$0000	                ADC #0
.394538	85 2a		sta $034a	                STA @b DOS_TEMP+2
.39453a	ca		dex		                DEX                     ; Count down the descriptors...
.39453b	d0 d2		bne $39450f	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.39453d	28		plp		                PLP
.39453e	2b		pld		                PLD
.39453f	ab		plb		                PLB
.394540	6b		rtl		                RTL
.394541					DOS_MOUNT
.394541	8b		phb		                PHB
.394542	0b		phd		                PHD
.394543	08		php		                PHP
.394544	48		pha		                PHA             ; begin setdbr macro
.394545	08		php		                PHP
.394546	e2 20		sep #$20	                SEP #$20        ; set A short
.394548	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39454a	48		pha		                PHA
.39454b	ab		plb		                PLB
.39454c	28		plp		                PLP
.39454d	68		pla		                PLA             ; end setdbr macro
.39454e	48		pha		                PHA             ; begin setdp macro
.39454f	08		php		                PHP
.394550	c2 20		rep #$20	                REP #$20        ; set A long
.394552	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394555	5b		tcd		                TCD
.394556	28		plp		                PLP
.394557	68		pla		                PLA             ; end setdp macro
.394558	e2 20		sep #$20	                SEP #$20        ; set A short
.39455a	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.39455c	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.394560	d0 07		bne $394569	                BNE try_mount           ; No: try to moount it
.394562	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC
.394564	f0 03		beq $394569	                BEQ try_mount
.394566	82 69 01	brl $3946d2	                BRL ret_success         ; Yes: just return success
.394569	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.39456d	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.39456f	f0 1f		beq $394590	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394571	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394573	f0 26		beq $39459b	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394575	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394577	f0 0b		beq $394584	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394579	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39457b	85 0e		sta $032e	                STA DOS_STATUS
.39457d	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39457f	85 00		sta $0320	                STA BIOS_STATUS
.394581	82 57 01	brl $3946db	                BRL ret_failure
.394584	22 40 67 39	jsl $396740	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394588	b0 03		bcs $39458d	                BCS fdc_success
.39458a	82 4e 01	brl $3946db	                BRL ret_failure
.39458d	82 42 01	brl $3946d2	fdc_success     BRL ret_success
.394590	22 4a 5d 39	jsl $395d4a	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394594	b0 10		bcs $3945a6	                BCS get_mbr             ; Continue if success
.394596	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394598	82 40 01	brl $3946db	                BRL ret_failure
.39459b	22 36 6b 39	jsl $396b36	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.39459f	b0 05		bcs $3945a6	                BCS get_mbr             ; Continue if success
.3945a1	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3945a3	82 35 01	brl $3946db	                BRL ret_failure
.3945a6					get_mbr
.3945a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a8	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3945aa	64 04		stz $0324	                STZ BIOS_LBA+2
.3945ac	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3945af	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945b1	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945b4	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945b6	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.3945ba	b0 07		bcs $3945c3	                BCS chk_signature       ; If success, check the signature bytes
.3945bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3945be	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3945c0	82 18 01	brl $3946db	                BRL ret_failure
.3945c3					chk_signature
.3945c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3945c5	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3945c8	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945ca	d0 07		bne $3945d3	                BNE not_mbr             ; No: signal we could find the MBR
.3945cc	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3945cf	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945d1	f0 05		beq $3945d8	                BEQ chk_part_type       ; Yes: we have an MBR
.3945d3	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3945d5	82 03 01	brl $3946db	                BRL ret_failure
.3945d8	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3945db	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3945dd	f0 05		beq $3945e4	                BEQ get_LBA             ; Is FAT32 with LBA?
.3945df	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3945e1	82 f7 00	brl $3946db	                BRL ret_failure
.3945e4	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3945e7	c2 20		rep #$20	                REP #$20        ; set A long
.3945e9	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3945ec	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3945ef	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3945f2	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3945f5	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3945f8	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3945fb	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3945fe	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394601	e2 20		sep #$20	                SEP #$20        ; set A short
.394603	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394605	8d 00 a0	sta $38a000	                STA DEVICE
.394608	a9 00		lda #$00	                LDA #0
.39460a	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39460d	c2 20		rep #$20	                REP #$20        ; set A long
.39460f	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394612	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394614	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394617	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394619	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39461c	85 02		sta $0322	                STA BIOS_LBA
.39461e	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394621	85 04		sta $0324	                STA BIOS_LBA+2
.394623	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394627	b0 1c		bcs $394645	                BCS get_first_sec       ; Got it? Start parsing it
.394629	e2 20		sep #$20	                SEP #$20        ; set A short
.39462b	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39462d	82 ab 00	brl $3946db	                BRL ret_failure
.394630					chk_bpb_sig
.394630	e2 20		sep #$20	                SEP #$20        ; set A short
.394632	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394635	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394637	d0 07		bne $394640	                BNE not_bpb             ; No: signal we could find the volume ID
.394639	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.39463c	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39463e	f0 05		beq $394645	                BEQ get_first_sec       ; Yes: we have an volume ID
.394640	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394642	82 96 00	brl $3946db	                BRL ret_failure
.394645					get_first_sec
.394645	c2 20		rep #$20	                REP #$20        ; set A long
.394647	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.39464a	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.39464d	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394650	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394653	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394656	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394659	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39465a	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39465d	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394660	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394663	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394666	69 00 00	adc #$0000	                ADC #0
.394669	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39466c	e2 20		sep #$20	                SEP #$20        ; set A short
.39466e	a2 00 00	ldx #$0000	                LDX #0
.394671	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394675	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394679	e8		inx		                INX
.39467a	e0 04 00	cpx #$0004	                CPX #4
.39467d	d0 f2		bne $394671	                BNE cpy_secperfat
.39467f	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394682	0a		asl a		                ASL A
.394683	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394686	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394689	2a		rol a		                ROL A
.39468a	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39468d	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394690	2a		rol a		                ROL A
.394691	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394694	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394697	2a		rol a		                ROL A
.394698	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39469b	18		clc		                CLC
.39469c	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.39469f	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3946a2	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3946a5	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3946a8	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3946ab	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946ae	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3946b1	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3946b4	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946b7	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3946ba	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3946bd	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3946c2	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3946c5	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3946c8	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3946ca	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3946cd	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3946cf	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3946d2					ret_success
.3946d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3946d4	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3946d6	28		plp		                PLP
.3946d7	2b		pld		                PLD
.3946d8	ab		plb		                PLB
.3946d9	38		sec		                SEC
.3946da	6b		rtl		                RTL
.3946db					ret_failure
.3946db	e2 20		sep #$20	                SEP #$20        ; set A short
.3946dd	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3946df	28		plp		                PLP
.3946e0	2b		pld		                PLD
.3946e1	ab		plb		                PLB
.3946e2	18		clc		                CLC
.3946e3	6b		rtl		                RTL
.3946e4					DOS_TESTBOOT
.3946e4	8b		phb		                PHB
.3946e5	0b		phd		                PHD
.3946e6	da		phx		                PHX
.3946e7	08		php		                PHP
.3946e8	48		pha		                PHA             ; begin setdbr macro
.3946e9	08		php		                PHP
.3946ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3946ec	a9 00		lda #$00	                LDA #0
.3946ee	48		pha		                PHA
.3946ef	ab		plb		                PLB
.3946f0	28		plp		                PLP
.3946f1	68		pla		                PLA             ; end setdbr macro
.3946f2	48		pha		                PHA             ; begin setdp macro
.3946f3	08		php		                PHP
.3946f4	c2 20		rep #$20	                REP #$20        ; set A long
.3946f6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946f9	5b		tcd		                TCD
.3946fa	28		plp		                PLP
.3946fb	68		pla		                PLA             ; end setdp macro
.3946fc	c2 10		rep #$10	                REP #$10        ; set X long
.3946fe					chk_dev
.3946fe	e2 20		sep #$20	                SEP #$20        ; set A short
.394700	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394702	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394704	f0 24		beq $39472a	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394706	c2 30		rep #$30	                REP #$30        ; set A&X long
.394708	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.39470b	85 02		sta $0322	                STA @b BIOS_LBA
.39470d	85 04		sta $0324	                STA @b BIOS_LBA+2
.39470f	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394712	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394714	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394717	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394719	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.39471d	b0 03		bcs $394722	                BCS chk_mbr_brl
.39471f	82 47 00	brl $394769	                BRL done                    ; If failed... just return
.394722					chk_mbr_brl
.394722	e2 20		sep #$20	                SEP #$20        ; set A short
.394724	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394728	80 04		bra $39472e	                BRA chk_brl
.39472a	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.39472e	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394730	f0 06		beq $394738	                BEQ chk_magic               ; Yes: check for the magic text
.394732	c9 82		cmp #$82	                CMP #$82
.394734	f0 02		beq $394738	                BEQ chk_magic
.394736	80 31		bra $394769	                BRA done                    ; No: just return
.394738	a2 00 00	ldx #$0000	chk_magic       LDX #0
.39473b	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.39473f	df 6e 47 39	cmp $39476e,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394743	d0 24		bne $394769	                BNE done                    ; If it's not equal, just return
.394745	e8		inx		                INX                         ; Otherwise, check the next one
.394746	e0 08 00	cpx #$0008	                CPX #8
.394749	d0 f0		bne $39473b	                BNE magic_loop              ; Until we've checked all 8 bytes
.39474b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39474d	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394750	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394753	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.394756	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.394759	e2 20		sep #$20	                SEP #$20        ; set A short
.39475b	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.39475d	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.39475f	f0 04		beq $394765	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394761	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394765	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.394769	28		plp		done            PLP
.39476a	2b		pld		                PLD
.39476b	ab		plb		                PLB
.39476c	fa		plx		                PLX
.39476d	6b		rtl		                RTL
>39476e	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394776					DOS_CALC_LBA
.394776	8b		phb		                PHB
.394777	0b		phd		                PHD
.394778	08		php		                PHP
.394779	48		pha		                PHA             ; begin setdbr macro
.39477a	08		php		                PHP
.39477b	e2 20		sep #$20	                SEP #$20        ; set A short
.39477d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39477f	48		pha		                PHA
.394780	ab		plb		                PLB
.394781	28		plp		                PLP
.394782	68		pla		                PLA             ; end setdbr macro
.394783	48		pha		                PHA             ; begin setdp macro
.394784	08		php		                PHP
.394785	c2 20		rep #$20	                REP #$20        ; set A long
.394787	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39478a	5b		tcd		                TCD
.39478b	28		plp		                PLP
.39478c	68		pla		                PLA             ; end setdp macro
.39478d	c2 20		rep #$20	                REP #$20        ; set A long
.39478f	38		sec		                SEC
.394790	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394792	e9 02 00	sbc #$0002	                SBC #2
.394795	85 28		sta $0348	                STA DOS_TEMP
.394797	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394799	e9 00 00	sbc #$0000	                SBC #0
.39479c	85 2a		sta $034a	                STA DOS_TEMP+2
.39479e	e2 10		sep #$10	                SEP #$10        ; set X short
.3947a0	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3947a3	e0 01		cpx #$01	mult_loop       CPX #1
.3947a5	f0 07		beq $3947ae	                BEQ add_offset
.3947a7	06 28		asl $0348	                ASL DOS_TEMP
.3947a9	26 28		rol $0348	                ROL DOS_TEMP
.3947ab	ca		dex		                DEX
.3947ac	80 f5		bra $3947a3	                BRA mult_loop
.3947ae	18		clc		add_offset      CLC
.3947af	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3947b1	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3947b4	85 02		sta $0322	                STA BIOS_LBA
.3947b6	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3947b8	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3947bb	85 04		sta $0324	                STA BIOS_LBA+2
.3947bd	28		plp		                PLP
.3947be	2b		pld		                PLD
.3947bf	ab		plb		                PLB
.3947c0	6b		rtl		                RTL
.3947c1					DOS_GETCLUSTER
.3947c1	8b		phb		                PHB
.3947c2	0b		phd		                PHD
.3947c3	08		php		                PHP
.3947c4	48		pha		                PHA             ; begin setdbr macro
.3947c5	08		php		                PHP
.3947c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3947c8	a9 00		lda #$00	                LDA #0
.3947ca	48		pha		                PHA
.3947cb	ab		plb		                PLB
.3947cc	28		plp		                PLP
.3947cd	68		pla		                PLA             ; end setdbr macro
.3947ce	48		pha		                PHA             ; begin setdp macro
.3947cf	08		php		                PHP
.3947d0	c2 20		rep #$20	                REP #$20        ; set A long
.3947d2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947d5	5b		tcd		                TCD
.3947d6	28		plp		                PLP
.3947d7	68		pla		                PLA             ; end setdp macro
.3947d8	c2 20		rep #$20	                REP #$20        ; set A long
.3947da	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3947dc	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947de	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947e0	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947e2	22 76 47 39	jsl $394776	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3947e6	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.3947ea	90 09		bcc $3947f5	                BCC ret_failure
.3947ec					ret_success
.3947ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3947ee	64 0e		stz $032e	                STZ DOS_STATUS
.3947f0	28		plp		                PLP
.3947f1	2b		pld		                PLD
.3947f2	ab		plb		                PLB
.3947f3	38		sec		                SEC
.3947f4	6b		rtl		                RTL
.3947f5					ret_failure
.3947f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3947f7	85 0e		sta $032e	                STA DOS_STATUS
.3947f9	28		plp		                PLP
.3947fa	2b		pld		                PLD
.3947fb	ab		plb		                PLB
.3947fc	18		clc		                CLC
.3947fd	6b		rtl		                RTL
.3947fe					DOS_PUTCLUSTER
.3947fe	8b		phb		                PHB
.3947ff	0b		phd		                PHD
.394800	08		php		                PHP
.394801	48		pha		                PHA             ; begin setdbr macro
.394802	08		php		                PHP
.394803	e2 20		sep #$20	                SEP #$20        ; set A short
.394805	a9 00		lda #$00	                LDA #0
.394807	48		pha		                PHA
.394808	ab		plb		                PLB
.394809	28		plp		                PLP
.39480a	68		pla		                PLA             ; end setdbr macro
.39480b	48		pha		                PHA             ; begin setdp macro
.39480c	08		php		                PHP
.39480d	c2 20		rep #$20	                REP #$20        ; set A long
.39480f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394812	5b		tcd		                TCD
.394813	28		plp		                PLP
.394814	68		pla		                PLA             ; end setdp macro
.394815	c2 20		rep #$20	                REP #$20        ; set A long
.394817	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394819	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39481b	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39481d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39481f	22 76 47 39	jsl $394776	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394823	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394827	90 09		bcc $394832	                BCC ret_failure
.394829					ret_success
.394829	e2 20		sep #$20	                SEP #$20        ; set A short
.39482b	64 0e		stz $032e	                STZ DOS_STATUS
.39482d	28		plp		                PLP
.39482e	2b		pld		                PLD
.39482f	ab		plb		                PLB
.394830	38		sec		                SEC
.394831	6b		rtl		                RTL
.394832					ret_failure
.394832	e2 20		sep #$20	                SEP #$20        ; set A short
.394834	85 0e		sta $032e	                STA DOS_STATUS
.394836	28		plp		                PLP
.394837	2b		pld		                PLD
.394838	ab		plb		                PLB
.394839	18		clc		                CLC
.39483a	6b		rtl		                RTL
>39483b	40 46 00			DOS_FDC_NAME    .null "@F"
.39483e					DOS_FDC_DESC
>39483e	3b 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394842	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394843	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394847	40 53 00			DOS_SDC_NAME    .null "@S"
.39484a					DOS_SDC_DESC
>39484a	47 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>39484e	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>39484f	3e 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394853	40 48 00			DOS_HDC_NAME    .null "@H"
.394856					DOS_HD_DESC
>394856	53 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39485a	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>39485b	4a 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.39485f					DOS_PARSE_DEV
.39485f	8b		phb		                PHB
.394860	0b		phd		                PHD
.394861	08		php		                PHP
.394862	48		pha		                PHA             ; begin setdbr macro
.394863	08		php		                PHP
.394864	e2 20		sep #$20	                SEP #$20        ; set A short
.394866	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394868	48		pha		                PHA
.394869	ab		plb		                PLB
.39486a	28		plp		                PLP
.39486b	68		pla		                PLA             ; end setdbr macro
.39486c	48		pha		                PHA             ; begin setdp macro
.39486d	08		php		                PHP
.39486e	c2 20		rep #$20	                REP #$20        ; set A long
.394870	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394873	5b		tcd		                TCD
.394874	28		plp		                PLP
.394875	68		pla		                PLA             ; end setdp macro
.394876	c2 30		rep #$30	                REP #$30        ; set A&X long
.394878	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39487c	85 28		sta $0348	                STA DOS_TEMP
.39487e	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394882	85 2a		sta $034a	                STA DOS_TEMP+2
.394884	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394887	85 48		sta $0368	                STA DOS_STR2_PTR
.394889	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39488c	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39488e	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394891	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394893	85 44		sta $0364	                STA DOS_STR1_PTR
.394895	c8		iny		                INY
.394896	c8		iny		                INY
.394897	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394899	85 46		sta $0366	                STA DOS_STR1_PTR+2
.39489b	e2 20		sep #$20	                SEP #$20        ; set A short
.39489d	a0 00 00	ldy #$0000	                LDY #0
.3948a0	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3948a2	f0 24		beq $3948c8	                BEQ found                   ; If it's NULL, we found a match
.3948a4	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3948a6	d0 03		bne $3948ab	                BNE next_device             ; If no match, try to load the next device
.3948a8	c8		iny		                INY                         ; Go to the next character
.3948a9	80 f5		bra $3948a0	                BRA cmp_loop
.3948ab					next_device
.3948ab	c2 20		rep #$20	                REP #$20        ; set A long
.3948ad	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3948b0	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b2	48		pha		                PHA
.3948b3	c8		iny		                INY
.3948b4	c8		iny		                INY
.3948b5	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b7	85 2a		sta $034a	                STA DOS_TEMP+2
.3948b9	68		pla		                PLA
.3948ba	85 28		sta $0348	                STA DOS_TEMP
.3948bc	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3948be	d0 ce		bne $39488e	                BNE dev_loop                ; No: check this device
.3948c0	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948c2	d0 ca		bne $39488e	                BNE dev_loop
.3948c4	28		plp		done            PLP                         ; Otherwise, return having not found a match
.3948c5	2b		pld		                PLD
.3948c6	ab		plb		                PLB
.3948c7	6b		rtl		                RTL
.3948c8	22 d9 48 39	jsl $3948d9	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3948cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ce	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3948d1	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948d3	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3948d7	80 eb		bra $3948c4	                BRA done
.3948d9					DOS_ADJUSTPATH
.3948d9	da		phx		                PHX
.3948da	5a		phy		                PHY
.3948db	8b		phb		                PHB
.3948dc	0b		phd		                PHD
.3948dd	08		php		                PHP
.3948de	48		pha		                PHA             ; begin setdbr macro
.3948df	08		php		                PHP
.3948e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3948e2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3948e4	48		pha		                PHA
.3948e5	ab		plb		                PLB
.3948e6	28		plp		                PLP
.3948e7	68		pla		                PLA             ; end setdbr macro
.3948e8	48		pha		                PHA             ; begin setdp macro
.3948e9	08		php		                PHP
.3948ea	c2 20		rep #$20	                REP #$20        ; set A long
.3948ec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948ef	5b		tcd		                TCD
.3948f0	28		plp		                PLP
.3948f1	68		pla		                PLA             ; end setdp macro
.3948f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948f4	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3948f6	98		tya		                TYA                             ; Compute the address of the first source byte
.3948f7	18		clc		                CLC
.3948f8	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3948fb	aa		tax		                TAX
.3948fc	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3948ff	a8		tay		                TAY
.394900	38		sec		                SEC                             ; Compute the number of bytes to copy
.394901	a9 00 01	lda #$0100	                LDA #256
.394904	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394906	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394909	28		plp		                PLP
.39490a	2b		pld		                PLD
.39490b	ab		plb		                PLB
.39490c	7a		ply		                PLY
.39490d	fa		plx		                PLX
.39490e	6b		rtl		                RTL
.39490f					DOS_PARSE_PATH
.39490f	8b		phb		                PHB
.394910	0b		phd		                PHD
.394911	08		php		                PHP
.394912	48		pha		                PHA             ; begin setdbr macro
.394913	08		php		                PHP
.394914	e2 20		sep #$20	                SEP #$20        ; set A short
.394916	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394918	48		pha		                PHA
.394919	ab		plb		                PLB
.39491a	28		plp		                PLP
.39491b	68		pla		                PLA             ; end setdbr macro
.39491c	48		pha		                PHA             ; begin setdp macro
.39491d	08		php		                PHP
.39491e	c2 20		rep #$20	                REP #$20        ; set A long
.394920	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394923	5b		tcd		                TCD
.394924	28		plp		                PLP
.394925	68		pla		                PLA             ; end setdp macro
.394926	c2 10		rep #$10	                REP #$10        ; set X long
.394928	e2 20		sep #$20	                SEP #$20        ; set A short
.39492a	a2 00 00	ldx #$0000	                LDX #0
.39492d	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.39492f	f0 1b		beq $39494c	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394931	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394933	b0 05		bcs $39493a	                BGE check_case          ; No: check the case
.394935	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394937	82 64 00	brl $39499e	                BRL ret_failure
.39493a	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.39493c	90 08		bcc $394946	                BLT next_char
.39493e	c9 7b		cmp #$7b	                CMP #'z'+1
.394940	b0 04		bcs $394946	                BGE next_char
.394942	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394944	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394946	e8		inx		next_char       INX                     ; Move to the next character
.394947	e0 00 01	cpx #$0100	                CPX #$100
.39494a	d0 e1		bne $39492d	                BNE upcase_loop
.39494c	22 5f 48 39	jsl $39485f	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394950	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394952	c9 3a		cmp #$3a	                CMP #':'
.394954	d0 07		bne $39495d	                BNE clr_name            ; If not colon, treat it as a file name
.394956	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394959	22 d9 48 39	jsl $3948d9	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.39495d	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394960	a9 20		lda #$20	                LDA #' '
.394962	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394965	c8		iny		                INY
.394966	c0 0b 00	cpy #$000b	                CPY #11
.394969	d0 f7		bne $394962	                BNE clr_loop
.39496b	a2 00 00	ldx #$0000	                LDX #0
.39496e	a0 00 00	ldy #$0000	                LDY #0
.394971	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394973	f0 20		beq $394995	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394975	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394977	f0 0a		beq $394983	                BEQ cpy_ext             ; And move to the extension
.394979	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39497c	e8		inx		                INX
.39497d	c8		iny		                INY                     ; Move to the next character
.39497e	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394981	d0 ee		bne $394971	                BNE cpy_name_loop       ; No: process this one
.394983	e8		inx		cpy_ext         INX                     ; Skip the dot
.394984	a0 08 00	ldy #$0008	                LDY #8
.394987	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394989	f0 0a		beq $394995	                BEQ ret_success         ; If it's NULL, we've finished
.39498b	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.39498e	e8		inx		                INX
.39498f	c8		iny		                INY                     ; Move to the next character
.394990	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394993	d0 f2		bne $394987	                BNE cpy_ext_loop        ; No: process this one
.394995					ret_success
.394995	e2 20		sep #$20	                SEP #$20        ; set A short
.394997	64 0e		stz $032e	                STZ DOS_STATUS
.394999	28		plp		                PLP
.39499a	2b		pld		                PLD
.39499b	ab		plb		                PLB
.39499c	38		sec		                SEC
.39499d	6b		rtl		                RTL
.39499e					ret_failure
.39499e	e2 20		sep #$20	                SEP #$20        ; set A short
.3949a0	85 0e		sta $032e	                STA DOS_STATUS
.3949a2	28		plp		                PLP
.3949a3	2b		pld		                PLD
.3949a4	ab		plb		                PLB
.3949a5	18		clc		                CLC
.3949a6	6b		rtl		                RTL
.3949a7					DOS_FINDFILE
.3949a7	8b		phb		                PHB
.3949a8	0b		phd		                PHD
.3949a9	08		php		                PHP
.3949aa	48		pha		                PHA             ; begin setdbr macro
.3949ab	08		php		                PHP
.3949ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3949ae	a9 00		lda #$00	                LDA #0
.3949b0	48		pha		                PHA
.3949b1	ab		plb		                PLB
.3949b2	28		plp		                PLP
.3949b3	68		pla		                PLA             ; end setdbr macro
.3949b4	48		pha		                PHA             ; begin setdp macro
.3949b5	08		php		                PHP
.3949b6	c2 20		rep #$20	                REP #$20        ; set A long
.3949b8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949bb	5b		tcd		                TCD
.3949bc	28		plp		                PLP
.3949bd	68		pla		                PLA             ; end setdp macro
.3949be	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949c0	22 0f 49 39	jsl $39490f	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3949c4	b0 05		bcs $3949cb	                BCS mount                       ; If success: try to open the directory
.3949c6	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3949c7	2b		pld		                PLD
.3949c8	ab		plb		                PLB
.3949c9	18		clc		                CLC
.3949ca	6b		rtl		                RTL
.3949cb	22 41 45 39	jsl $394541	mount           JSL DOS_MOUNT
.3949cf					get_directory
.3949cf	c2 20		rep #$20	                REP #$20        ; set A long
.3949d1	22 f6 41 39	jsl $3941f6	                JSL DOS_DIROPEN                 ; Get the directory
.3949d5	b0 07		bcs $3949de	                BCS scan_entries                ; If success: start scanning the directory entries
.3949d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d9	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3949db	82 47 00	brl $394a25	                BRL ret_failure
.3949de	22 75 42 39	jsl $394275	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3949e2					scan_loop
.3949e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3949e4	a0 00 00	ldy #$0000	                LDY #0
.3949e7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3949e9	d0 05		bne $3949f0	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3949eb	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3949ed	82 35 00	brl $394a25	                BRL ret_failure
.3949f0	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3949f2	f0 26		beq $394a1a	                BEQ next_entry                  ; Go to the next entry
.3949f4	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3949f7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3949f9	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3949fb	d0 1d		bne $394a1a	                BNE next_entry                  ; Yes: skip it!
.3949fd	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3949ff	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394a01	f0 17		beq $394a1a	                BEQ next_entry                  ; Yes: skip it!
.394a03	a2 00 00	ldx #$0000	                LDX #0
.394a06	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a09	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a0b	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a0f	d0 09		bne $394a1a	                BNE next_entry                  ; If not equal: try the next entry
.394a11	c8		iny		                INY                             ; Advance to the next character
.394a12	e8		inx		                INX
.394a13	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a16	f0 16		beq $394a2e	                BEQ match                       ; Yes: we have a match!
.394a18	80 ef		bra $394a09	                BRA scan_cmp_loop               ; No: keep checking
.394a1a	22 90 42 39	jsl $394290	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394a1e	90 05		bcc $394a25	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394a20	82 bf ff	brl $3949e2	                BRL scan_loop                   ; If found: keep scanning
.394a23	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394a25					ret_failure
.394a25	e2 20		sep #$20	                SEP #$20        ; set A short
.394a27	85 0e		sta $032e	                STA DOS_STATUS
.394a29	28		plp		                PLP
.394a2a	2b		pld		                PLD
.394a2b	ab		plb		                PLB
.394a2c	18		clc		                CLC
.394a2d	6b		rtl		                RTL
.394a2e					match
.394a2e	c2 20		rep #$20	                REP #$20        ; set A long
.394a30	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394a33	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a35	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394a37	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394a3a	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a3c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a3e					ret_success
.394a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.394a40	64 0e		stz $032e	                STZ DOS_STATUS
.394a42	28		plp		                PLP
.394a43	2b		pld		                PLD
.394a44	ab		plb		                PLB
.394a45	38		sec		                SEC
.394a46	6b		rtl		                RTL
.394a47					DOS_READFILE
.394a47	8b		phb		                PHB
.394a48	0b		phd		                PHD
.394a49	08		php		                PHP
.394a4a	48		pha		                PHA             ; begin setdbr macro
.394a4b	08		php		                PHP
.394a4c	e2 20		sep #$20	                SEP #$20        ; set A short
.394a4e	a9 00		lda #$00	                LDA #0
.394a50	48		pha		                PHA
.394a51	ab		plb		                PLB
.394a52	28		plp		                PLP
.394a53	68		pla		                PLA             ; end setdbr macro
.394a54	48		pha		                PHA             ; begin setdp macro
.394a55	08		php		                PHP
.394a56	c2 20		rep #$20	                REP #$20        ; set A long
.394a58	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a5b	5b		tcd		                TCD
.394a5c	28		plp		                PLP
.394a5d	68		pla		                PLA             ; end setdp macro
.394a5e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a60	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394a62	48		pha		                PHA
.394a63	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394a65	48		pha		                PHA
.394a66	22 a7 49 39	jsl $3949a7	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394a6a	68		pla		                PLA
.394a6b	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394a6d	68		pla		                PLA
.394a6e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394a70	90 0f		bcc $394a81	                BCC pass_failure                    ; If found: try to load the cluster
.394a72	22 c1 47 39	jsl $3947c1	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394a76	90 09		bcc $394a81	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394a78					ret_success
.394a78	e2 20		sep #$20	                SEP #$20        ; set A short
.394a7a	64 0e		stz $032e	                STZ DOS_STATUS
.394a7c	28		plp		                PLP
.394a7d	2b		pld		                PLD
.394a7e	ab		plb		                PLB
.394a7f	38		sec		                SEC
.394a80	6b		rtl		                RTL
.394a81	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394a82	2b		pld		                PLD
.394a83	ab		plb		                PLB
.394a84	18		clc		                CLC
.394a85	6b		rtl		                RTL
.394a86					ENTRYFORCLUS12
.394a86	8b		phb		                PHB
.394a87	0b		phd		                PHD
.394a88	08		php		                PHP
.394a89	48		pha		                PHA             ; begin setdbr macro
.394a8a	08		php		                PHP
.394a8b	e2 20		sep #$20	                SEP #$20        ; set A short
.394a8d	a9 00		lda #$00	                LDA #0
.394a8f	48		pha		                PHA
.394a90	ab		plb		                PLB
.394a91	28		plp		                PLP
.394a92	68		pla		                PLA             ; end setdbr macro
.394a93	48		pha		                PHA             ; begin setdp macro
.394a94	08		php		                PHP
.394a95	c2 20		rep #$20	                REP #$20        ; set A long
.394a97	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a9a	5b		tcd		                TCD
.394a9b	28		plp		                PLP
.394a9c	68		pla		                PLA             ; end setdp macro
.394a9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a9f	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394aa1	0a		asl a		                ASL A
.394aa2	85 28		sta $0348	                STA DOS_TEMP
.394aa4	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394aa6	2a		rol a		                ROL A
.394aa7	85 2a		sta $034a	                STA DOS_TEMP+2
.394aa9	18		clc		                CLC
.394aaa	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394aac	65 28		adc $0348	                ADC DOS_TEMP
.394aae	85 28		sta $0348	                STA DOS_TEMP
.394ab0	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ab2	65 2a		adc $034a	                ADC DOS_TEMP+2
.394ab4	85 2a		sta $034a	                STA DOS_TEMP+2
.394ab6	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394ab8	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394aba	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394abc	29 ff 03	and #$03ff	                AND #$003FF
.394abf	aa		tax		                TAX
.394ac0	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ac2	66 28		ror $0348	                ROR DOS_TEMP
.394ac4	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ac6	66 28		ror $0348	                ROR DOS_TEMP
.394ac8	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394aca	66 28		ror $0348	                ROR DOS_TEMP
.394acc	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ace	66 28		ror $0348	                ROR DOS_TEMP
.394ad0	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ad2	66 28		ror $0348	                ROR DOS_TEMP
.394ad4	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ad6	66 28		ror $0348	                ROR DOS_TEMP
.394ad8	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ada	66 28		ror $0348	                ROR DOS_TEMP
.394adc	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ade	66 28		ror $0348	                ROR DOS_TEMP
.394ae0	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae2	66 28		ror $0348	                ROR DOS_TEMP
.394ae4	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394ae5	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394ae9	65 28		adc $0348	                ADC DOS_TEMP
.394aeb	85 24		sta $0344	                STA DOS_FAT_LBA
.394aed	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394af1	65 2a		adc $034a	                ADC DOS_TEMP+2
.394af3	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394af5	28		plp		                PLP
.394af6	2b		pld		                PLD
.394af7	ab		plb		                PLB
.394af8	6b		rtl		                RTL
.394af9					FATFORCLUSTER12
.394af9	8b		phb		                PHB
.394afa	0b		phd		                PHD
.394afb	08		php		                PHP
.394afc	48		pha		                PHA             ; begin setdbr macro
.394afd	08		php		                PHP
.394afe	e2 20		sep #$20	                SEP #$20        ; set A short
.394b00	a9 00		lda #$00	                LDA #0
.394b02	48		pha		                PHA
.394b03	ab		plb		                PLB
.394b04	28		plp		                PLP
.394b05	68		pla		                PLA             ; end setdbr macro
.394b06	48		pha		                PHA             ; begin setdp macro
.394b07	08		php		                PHP
.394b08	c2 20		rep #$20	                REP #$20        ; set A long
.394b0a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b0d	5b		tcd		                TCD
.394b0e	28		plp		                PLP
.394b0f	68		pla		                PLA             ; end setdp macro
.394b10	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b12	a2 00 00	ldx #$0000	                LDX #0
.394b15	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b18	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b1c	e8		inx		                INX
.394b1d	e8		inx		                INX
.394b1e	e0 00 04	cpx #$0400	                CPX #1024
.394b21	d0 f5		bne $394b18	                BNE clr_loop
.394b23	22 86 4a 39	jsl $394a86	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394b27	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394b29	85 02		sta $0322	                STA BIOS_LBA
.394b2b	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b2d	85 04		sta $0324	                STA BIOS_LBA+2
.394b2f	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394b32	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b34	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b37	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b39	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b3d	90 17		bcc $394b56	                BCC error
.394b3f	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394b41	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394b44	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b46	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b49	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b4b	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b4f	90 05		bcc $394b56	                BCC error
.394b51	28		plp		                PLP
.394b52	2b		pld		                PLD
.394b53	ab		plb		                PLB
.394b54	38		sec		                SEC
.394b55	6b		rtl		                RTL
.394b56					error
.394b56	e2 20		sep #$20	                SEP #$20        ; set A short
.394b58	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b5a	85 0e		sta $032e	                STA DOS_STATUS
.394b5c	28		plp		                PLP
.394b5d	2b		pld		                PLD
.394b5e	ab		plb		                PLB
.394b5f	18		clc		                CLC
.394b60	6b		rtl		                RTL
.394b61					FATFORCLUSTER32
.394b61	8b		phb		                PHB
.394b62	0b		phd		                PHD
.394b63	48		pha		                PHA             ; begin setdbr macro
.394b64	08		php		                PHP
.394b65	e2 20		sep #$20	                SEP #$20        ; set A short
.394b67	a9 00		lda #$00	                LDA #0
.394b69	48		pha		                PHA
.394b6a	ab		plb		                PLB
.394b6b	28		plp		                PLP
.394b6c	68		pla		                PLA             ; end setdbr macro
.394b6d	48		pha		                PHA             ; begin setdp macro
.394b6e	08		php		                PHP
.394b6f	c2 20		rep #$20	                REP #$20        ; set A long
.394b71	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b74	5b		tcd		                TCD
.394b75	28		plp		                PLP
.394b76	68		pla		                PLA             ; end setdp macro
.394b77	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b79	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b7b	85 24		sta $0344	                STA DOS_FAT_LBA
.394b7d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b7f	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b81	a2 07 00	ldx #$0007	                LDX #7
.394b84	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394b86	66 24		ror $0344	                ROR DOS_FAT_LBA
.394b88	ca		dex		                DEX
.394b89	d0 f9		bne $394b84	                BNE div_loop
.394b8b	18		clc		                CLC
.394b8c	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394b8e	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394b92	85 24		sta $0344	                STA DOS_FAT_LBA
.394b94	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b96	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394b9a	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b9c	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394b9e	85 02		sta $0322	                STA BIOS_LBA
.394ba0	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394ba2	85 04		sta $0324	                STA BIOS_LBA+2
.394ba4	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394ba7	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ba9	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bac	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bae	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394bb2	b0 06		bcs $394bba	                BCS find_entry
.394bb4	e2 20		sep #$20	                SEP #$20        ; set A short
.394bb6	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bb8	80 0e		bra $394bc8	                BRA ret_failure
.394bba					find_entry
.394bba	c2 20		rep #$20	                REP #$20        ; set A long
.394bbc	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bbe	0a		asl a		                ASL A
.394bbf	0a		asl a		                ASL A                           ; * 4
.394bc0	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394bc3	aa		tax		                TAX                             ; X should be the offset within the sector
.394bc4	2b		pld		ret_success     PLD
.394bc5	ab		plb		                PLB
.394bc6	38		sec		                SEC                             ; return success
.394bc7	6b		rtl		                RTL
.394bc8	2b		pld		ret_failure     PLD
.394bc9	ab		plb		                PLB
.394bca	18		clc		                CLC                             ; Return failure
.394bcb	6b		rtl		                RTL
.394bcc					NEXTCLUSTER
.394bcc	08		php		                PHP
.394bcd	e2 20		sep #$20	                SEP #$20        ; set A short
.394bcf	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394bd3	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394bd5	d0 08		bne $394bdf	                BNE fat32                       ; No: assume it's FAT32
.394bd7	22 ed 4b 39	jsl $394bed	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394bdb	90 0d		bcc $394bea	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bdd	80 06		bra $394be5	                BRA ret_success
.394bdf	22 55 4c 39	jsl $394c55	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394be3	90 05		bcc $394bea	                BCC pass_failure                ; If there was an error, pass it up the chain
.394be5	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394be7	28		plp		                PLP
.394be8	38		sec		                SEC
.394be9	6b		rtl		                RTL
.394bea	28		plp		pass_failure    PLP
.394beb	18		clc		                CLC
.394bec	6b		rtl		                RTL
.394bed					NEXTCLUSTER12
.394bed	8b		phb		                    PHB
.394bee	0b		phd		                    PHD
.394bef	08		php		                    PHP
.394bf0	48		pha		                PHA             ; begin setdbr macro
.394bf1	08		php		                PHP
.394bf2	e2 20		sep #$20	                SEP #$20        ; set A short
.394bf4	a9 00		lda #$00	                LDA #0
.394bf6	48		pha		                PHA
.394bf7	ab		plb		                PLB
.394bf8	28		plp		                PLP
.394bf9	68		pla		                PLA             ; end setdbr macro
.394bfa	48		pha		                PHA             ; begin setdp macro
.394bfb	08		php		                PHP
.394bfc	c2 20		rep #$20	                REP #$20        ; set A long
.394bfe	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c01	5b		tcd		                TCD
.394c02	28		plp		                PLP
.394c03	68		pla		                PLA             ; end setdp macro
.394c04	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c06	22 f9 4a 39	jsl $394af9	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c0a	b0 03		bcs $394c0f	                    BCS chk_clus_id
.394c0c	82 41 00	brl $394c50	                    BRL pass_failure
.394c0f	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c11	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c14	d0 0d		bne $394c23	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c16					is_even
.394c16	c2 20		rep #$20	                REP #$20        ; set A long
.394c18	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c1c	29 ff 0f	and #$0fff	                    AND #$0FFF
.394c1f	85 28		sta $0348	                    STA DOS_TEMP
.394c21	80 0c		bra $394c2f	                    BRA check_id
.394c23					is_odd
.394c23	c2 20		rep #$20	                REP #$20        ; set A long
.394c25	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394c29	4a		lsr a		                    LSR A
.394c2a	4a		lsr a		                    LSR A
.394c2b	4a		lsr a		                    LSR A
.394c2c	4a		lsr a		                    LSR A
.394c2d	85 28		sta $0348	                    STA DOS_TEMP
.394c2f					check_id
.394c2f	c2 20		rep #$20	                REP #$20        ; set A long
.394c31	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394c33	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394c36	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394c39	f0 0f		beq $394c4a	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394c3b	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394c3d	85 10		sta $0330	                    STA DOS_CLUS_ID
.394c3f	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394c41					ret_success
.394c41	e2 20		sep #$20	                SEP #$20        ; set A short
.394c43	64 0e		stz $032e	                    STZ DOS_STATUS
.394c45	28		plp		                    PLP
.394c46	2b		pld		                    PLD
.394c47	ab		plb		                    PLB
.394c48	38		sec		                    SEC
.394c49	6b		rtl		                    RTL
.394c4a					no_more
.394c4a	e2 20		sep #$20	                SEP #$20        ; set A short
.394c4c	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394c4e	85 0e		sta $032e	                    STA DOS_STATUS
.394c50	28		plp		pass_failure        PLP
.394c51	2b		pld		                    PLD
.394c52	ab		plb		                    PLB
.394c53	18		clc		                    CLC
.394c54	6b		rtl		                    RTL
.394c55					NEXTCLUSTER32
.394c55	8b		phb		                PHB
.394c56	0b		phd		                PHD
.394c57	08		php		                PHP
.394c58	48		pha		                PHA             ; begin setdbr macro
.394c59	08		php		                PHP
.394c5a	e2 20		sep #$20	                SEP #$20        ; set A short
.394c5c	a9 00		lda #$00	                LDA #0
.394c5e	48		pha		                PHA
.394c5f	ab		plb		                PLB
.394c60	28		plp		                PLP
.394c61	68		pla		                PLA             ; end setdbr macro
.394c62	48		pha		                PHA             ; begin setdp macro
.394c63	08		php		                PHP
.394c64	c2 20		rep #$20	                REP #$20        ; set A long
.394c66	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c69	5b		tcd		                TCD
.394c6a	28		plp		                PLP
.394c6b	68		pla		                PLA             ; end setdp macro
.394c6c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c6e	22 61 4b 39	jsl $394b61	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394c72	90 33		bcc $394ca7	                BCC ret_failure                 ; If it did not work, return the error
.394c74	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394c78	85 28		sta $0348	                STA DOS_TEMP
.394c7a	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394c7e	85 2a		sta $034a	                STA DOS_TEMP+2
.394c80	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394c82	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394c85	d0 0d		bne $394c94	                BNE found_next
.394c87	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c89	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394c8c	d0 06		bne $394c94	                BNE found_next                  ; No: return this cluster as the next
.394c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.394c90	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394c92	80 13		bra $394ca7	                BRA ret_failure
.394c94					found_next
.394c94	c2 20		rep #$20	                REP #$20        ; set A long
.394c96	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394c98	85 10		sta $0330	                STA DOS_CLUS_ID
.394c9a	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c9c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c9e					ret_success
.394c9e	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca0	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394ca2	28		plp		                PLP
.394ca3	2b		pld		                PLD
.394ca4	ab		plb		                PLB
.394ca5	38		sec		                SEC
.394ca6	6b		rtl		                RTL
.394ca7					ret_failure
.394ca7	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca9	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394cab	28		plp		                PLP
.394cac	2b		pld		                PLD
.394cad	ab		plb		                PLB
.394cae	18		clc		                CLC
.394caf	6b		rtl		                RTL
.394cb0					DOS_READNEXT
.394cb0	08		php		                PHP
.394cb1	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cb3	22 cc 4b 39	jsl $394bcc	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394cb7	90 09		bcc $394cc2	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394cb9	22 c1 47 39	jsl $3947c1	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394cbd	90 03		bcc $394cc2	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394cbf	28		plp		ret_success     PLP
.394cc0	38		sec		                SEC
.394cc1	6b		rtl		                RTL
.394cc2	28		plp		pass_failure    PLP
.394cc3	18		clc		                CLC
.394cc4	6b		rtl		                RTL
.394cc5					DOS_FREECLUS
.394cc5	08		php		                PHP
.394cc6	48		pha		                PHA             ; begin setdp macro
.394cc7	08		php		                PHP
.394cc8	c2 20		rep #$20	                REP #$20        ; set A long
.394cca	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ccd	5b		tcd		                TCD
.394cce	28		plp		                PLP
.394ccf	68		pla		                PLA             ; end setdp macro
.394cd0	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd2	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394cd6	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394cd8	d0 08		bne $394ce2	                BNE fat32                       ; No: assume it's FAT32
.394cda	22 56 4d 39	jsl $394d56	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394cde	90 0d		bcc $394ced	                BCC pass_failure                ; If there was an error, pass it up the chain
.394ce0	80 06		bra $394ce8	                BRA ret_success
.394ce2	22 2e 4e 39	jsl $394e2e	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394ce6	90 05		bcc $394ced	                BCC pass_failure                ; If there was an error, pass it up the chain
.394ce8	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394cea	28		plp		                PLP
.394ceb	38		sec		                SEC
.394cec	6b		rtl		                RTL
.394ced	28		plp		pass_failure    PLP
.394cee	18		clc		                CLC
.394cef	6b		rtl		                RTL
.394cf0					FDC_READ2FAT12
.394cf0	8b		phb		                    PHB
.394cf1	0b		phd		                    PHD
.394cf2	08		php		                    PHP
.394cf3	48		pha		                PHA             ; begin setdbr macro
.394cf4	08		php		                PHP
.394cf5	e2 20		sep #$20	                SEP #$20        ; set A short
.394cf7	a9 00		lda #$00	                LDA #0
.394cf9	48		pha		                PHA
.394cfa	ab		plb		                PLB
.394cfb	28		plp		                PLP
.394cfc	68		pla		                PLA             ; end setdbr macro
.394cfd	48		pha		                PHA             ; begin setdp macro
.394cfe	08		php		                PHP
.394cff	c2 20		rep #$20	                REP #$20        ; set A long
.394d01	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d04	5b		tcd		                TCD
.394d05	28		plp		                PLP
.394d06	68		pla		                PLA             ; end setdp macro
.394d07	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d09	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394d0c	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d0e	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394d11	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d13	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394d15	85 02		sta $0322	                    STA BIOS_LBA
.394d17	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394d19	85 04		sta $0324	                    STA BIOS_LBA+2
.394d1b	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394d1f	b0 07		bcs $394d28	                    BCS inc_sect2                   ; If success: start getting the second sector
.394d21	e2 20		sep #$20	                SEP #$20        ; set A short
.394d23	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d25	82 1c 00	brl $394d44	                    BRL ret_failure
.394d28					inc_sect2
.394d28	c2 20		rep #$20	                REP #$20        ; set A long
.394d2a	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394d2c	d0 02		bne $394d30	                    BNE inc_buff_ptr
.394d2e	e6 04		inc $0324	                    INC BIOS_LBA+2
.394d30	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d33	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d35	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d38	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d3a	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394d3e	b0 0d		bcs $394d4d	                    BCS ret_success                 ; If success, return success
.394d40	e2 20		sep #$20	                SEP #$20        ; set A short
.394d42	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d44					ret_failure
.394d44	e2 20		sep #$20	                SEP #$20        ; set A short
.394d46	85 00		sta $0320	                    STA BIOS_STATUS
.394d48	28		plp		                    PLP
.394d49	2b		pld		                    PLD
.394d4a	ab		plb		                    PLB
.394d4b	18		clc		                    CLC
.394d4c	6b		rtl		                    RTL
.394d4d					ret_success
.394d4d	e2 20		sep #$20	                SEP #$20        ; set A short
.394d4f	64 00		stz $0320	                    STZ BIOS_STATUS
.394d51	28		plp		                    PLP
.394d52	2b		pld		                    PLD
.394d53	ab		plb		                    PLB
.394d54	38		sec		                    SEC
.394d55	6b		rtl		                    RTL
.394d56					DOS_FREECLUS12
.394d56	da		phx		                PHX
.394d57	8b		phb		                PHB
.394d58	0b		phd		                PHD
.394d59	08		php		                PHP
.394d5a	48		pha		                PHA             ; begin setdbr macro
.394d5b	08		php		                PHP
.394d5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394d5e	a9 00		lda #$00	                LDA #0
.394d60	48		pha		                PHA
.394d61	ab		plb		                PLB
.394d62	28		plp		                PLP
.394d63	68		pla		                PLA             ; end setdbr macro
.394d64	48		pha		                PHA             ; begin setdp macro
.394d65	08		php		                PHP
.394d66	c2 20		rep #$20	                REP #$20        ; set A long
.394d68	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d6b	5b		tcd		                TCD
.394d6c	28		plp		                PLP
.394d6d	68		pla		                PLA             ; end setdp macro
.394d6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d70	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394d73	85 10		sta $0330	                STA DOS_CLUS_ID
.394d75	a9 00 00	lda #$0000	                LDA #0
.394d78	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d7a	22 86 4a 39	jsl $394a86	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394d7e	22 f0 4c 39	jsl $394cf0	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394d82	b0 07		bcs $394d8b	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394d84	e2 20		sep #$20	                SEP #$20        ; set A short
.394d86	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d88	82 99 00	brl $394e24	                BRL ret_failure
.394d8b					start_of_fat
.394d8b	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d8d	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394d8f	89 01 00	bit #$0001	                BIT #1
.394d92	d0 09		bne $394d9d	                BNE is_odd
.394d94	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394d98	29 ff 0f	and #$0fff	                AND #$0FFF
.394d9b	80 08		bra $394da5	                BRA chk_available
.394d9d	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394da1	4a		lsr a		                LSR A
.394da2	4a		lsr a		                LSR A
.394da3	4a		lsr a		                LSR A
.394da4	4a		lsr a		                LSR A
.394da5					chk_available
.394da5	85 28		sta $0348	                STA DOS_TEMP
.394da7	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394daa	f0 03		beq $394daf	                BEQ chk_found
.394dac	82 39 00	brl $394de8	                BRL next_cluster                ; No: advance to the next cluster
.394daf	8a		txa		chk_found       TXA
.394db0	85 2a		sta $034a	                STA DOS_TEMP+2
.394db2	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394db4	89 01 00	bit #$0001	                BIT #1
.394db7	d0 0d		bne $394dc6	                BNE is_odd2
.394db9					is_even2
.394db9	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394dbd	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394dc0	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394dc4	80 0b		bra $394dd1	                BRA write_fat
.394dc6					is_odd2
.394dc6	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394dca	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394dcd	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394dd1	22 eb 4e 39	jsl $394eeb	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394dd5	b0 07		bcs $394dde	                BCS ret_success                 ; If success: return success
.394dd7	e2 20		sep #$20	                SEP #$20        ; set A short
.394dd9	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394ddb	82 46 00	brl $394e24	                BRL ret_failure
.394dde					ret_success
.394dde	e2 20		sep #$20	                SEP #$20        ; set A short
.394de0	64 0e		stz $032e	                STZ DOS_STATUS
.394de2	28		plp		                PLP
.394de3	2b		pld		                PLD
.394de4	ab		plb		                PLB
.394de5	fa		plx		                PLX
.394de6	38		sec		                SEC
.394de7	6b		rtl		                RTL
.394de8					next_cluster
.394de8	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394dea	d0 02		bne $394dee	                BNE calc_entry
.394dec	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394dee	22 86 4a 39	jsl $394a86	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394df2	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394df5	f0 03		beq $394dfa	                BEQ chk_end_of_fat
.394df7	82 93 ff	brl $394d8d	                BRL chk_cluster                 ; No: go back and check it too
.394dfa					chk_end_of_fat
.394dfa	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394dfc	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394e00	d0 0f		bne $394e11	                BNE next_2
.394e02	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394e04	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394e08	d0 07		bne $394e11	                BNE next_2                      ; No: get the next to sectors
.394e0a	e2 20		sep #$20	                SEP #$20        ; set A short
.394e0c	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394e0e	82 13 00	brl $394e24	                BRL ret_failure
.394e11					next_2
.394e11	22 f0 4c 39	jsl $394cf0	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394e15	90 06		bcc $394e1d	                BCC fat_fail                    ; If failed: return error
.394e17	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394e1a	82 70 ff	brl $394d8d	                BRL chk_cluster                 ; And start checking from there
.394e1d					fat_fail
.394e1d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1f	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e21	82 00 00	brl $394e24	                BRL ret_failure
.394e24					ret_failure
.394e24	e2 20		sep #$20	                SEP #$20        ; set A short
.394e26	85 0e		sta $032e	                STA DOS_STATUS
.394e28	28		plp		                PLP
.394e29	2b		pld		                PLD
.394e2a	ab		plb		                PLB
.394e2b	fa		plx		                PLX
.394e2c	18		clc		                CLC
.394e2d	6b		rtl		                RTL
.394e2e					DOS_FREECLUS32
.394e2e	8b		phb		                PHB
.394e2f	0b		phd		                PHD
.394e30	08		php		                PHP
.394e31	48		pha		                PHA             ; begin setdbr macro
.394e32	08		php		                PHP
.394e33	e2 20		sep #$20	                SEP #$20        ; set A short
.394e35	a9 00		lda #$00	                LDA #0
.394e37	48		pha		                PHA
.394e38	ab		plb		                PLB
.394e39	28		plp		                PLP
.394e3a	68		pla		                PLA             ; end setdbr macro
.394e3b	48		pha		                PHA             ; begin setdp macro
.394e3c	08		php		                PHP
.394e3d	c2 20		rep #$20	                REP #$20        ; set A long
.394e3f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e42	5b		tcd		                TCD
.394e43	28		plp		                PLP
.394e44	68		pla		                PLA             ; end setdp macro
.394e45	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e47	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394e4a	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e4c	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394e4f	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e51	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394e55	85 02		sta $0322	                STA BIOS_LBA
.394e57	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394e5b	85 04		sta $0324	                STA BIOS_LBA+2
.394e5d	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394e61	b0 07		bcs $394e6a	                BCS initial_entry               ; If OK: set the initial entry to check
.394e63	e2 20		sep #$20	                SEP #$20        ; set A short
.394e65	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394e67	82 5e 00	brl $394ec8	                BRL ret_failure
.394e6a					initial_entry
.394e6a	c2 20		rep #$20	                REP #$20        ; set A long
.394e6c	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394e6f	85 10		sta $0330	                STA DOS_CLUS_ID
.394e71	a9 00 00	lda #$0000	                LDA #0
.394e74	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e76	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394e79	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394e7d	d0 06		bne $394e85	                BNE next_entry                  ; No: move to the next entry
.394e7f	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394e83	f0 29		beq $394eae	                BEQ found_free                  ; Yes: go to allocate and return it
.394e85	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394e87	d0 02		bne $394e8b	                BNE inc_ptr
.394e89	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e8b	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394e8c	e8		inx		                INX
.394e8d	e8		inx		                INX
.394e8e	e8		inx		                INX
.394e8f	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394e92	90 e5		bcc $394e79	                BLT chk_entry                   ; No: check this entry
.394e94	18		clc		                CLC                             ; Point to the next sector in the FAT
.394e95	a5 02		lda $0322	                LDA BIOS_LBA
.394e97	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394e9a	85 02		sta $0322	                STA BIOS_LBA
.394e9c	a5 04		lda $0324	                LDA BIOS_LBA+2
.394e9e	69 00 00	adc #$0000	                ADC #0
.394ea1	85 04		sta $0324	                STA BIOS_LBA+2
.394ea3	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394ea7	b0 00		bcs $394ea9	                BCS set_ptr                     ; If OK: set the pointer and check it
.394ea9	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394eac	80 cb		bra $394e79	                BRA chk_entry                   ; Check this entry
.394eae					found_free
.394eae	c2 20		rep #$20	                REP #$20        ; set A long
.394eb0	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394eb3	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394eb7	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394eba	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394ebe	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ec2	b0 0d		bcs $394ed1	                BCS ret_success                 ; If OK: return success
.394ec4	e2 20		sep #$20	                SEP #$20        ; set A short
.394ec6	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394ec8					ret_failure
.394ec8	e2 20		sep #$20	                SEP #$20        ; set A short
.394eca	85 0e		sta $032e	                STA DOS_STATUS
.394ecc	28		plp		                PLP
.394ecd	2b		pld		                PLD
.394ece	ab		plb		                PLB
.394ecf	18		clc		                CLC
.394ed0	6b		rtl		                RTL
.394ed1					ret_success
.394ed1	e2 20		sep #$20	                SEP #$20        ; set A short
.394ed3	64 0e		stz $032e	                STZ DOS_STATUS
.394ed5	28		plp		                PLP
.394ed6	2b		pld		                PLD
.394ed7	ab		plb		                PLB
.394ed8	38		sec		                SEC
.394ed9	6b		rtl		                RTL
.394eda					DELCLUSTER
.394eda	e2 20		sep #$20	                SEP #$20        ; set A short
.394edc	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394ee0	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394ee2	d0 04		bne $394ee8	                BNE fat32                       ; No: assume it's FAT32
.394ee4	5c 32 4f 39	jmp $394f32	fat12           JML DELCLUSTER12
.394ee8	4c 80 4f	jmp $394f80	fat32           JMP DELCLUSTER32
.394eeb					WRITEFAT12
.394eeb	8b		phb		                PHB
.394eec	0b		phd		                PHD
.394eed	48		pha		                PHA             ; begin setdbr macro
.394eee	08		php		                PHP
.394eef	e2 20		sep #$20	                SEP #$20        ; set A short
.394ef1	a9 00		lda #$00	                LDA #0
.394ef3	48		pha		                PHA
.394ef4	ab		plb		                PLB
.394ef5	28		plp		                PLP
.394ef6	68		pla		                PLA             ; end setdbr macro
.394ef7	48		pha		                PHA             ; begin setdp macro
.394ef8	08		php		                PHP
.394ef9	c2 20		rep #$20	                REP #$20        ; set A long
.394efb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394efe	5b		tcd		                TCD
.394eff	28		plp		                PLP
.394f00	68		pla		                PLA             ; end setdp macro
.394f01	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f03	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394f06	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f08	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394f0b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f0d	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394f0f	85 02		sta $0322	                STA BIOS_LBA
.394f11	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394f13	85 04		sta $0324	                STA BIOS_LBA+2
.394f15	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394f19	90 14		bcc $394f2f	                BCC done
.394f1b	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f1e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f20	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f23	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f25	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f27	d0 02		bne $394f2b	                BNE put_second
.394f29	e6 04		inc $0324	                INC BIOS_LBA+2
.394f2b	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394f2f	2b		pld		done            PLD
.394f30	ab		plb		                PLB
.394f31	6b		rtl		                RTL
.394f32					DELCLUSTER12
.394f32	8b		phb		                PHB
.394f33	0b		phd		                PHD
.394f34	08		php		                PHP
.394f35	48		pha		                PHA             ; begin setdbr macro
.394f36	08		php		                PHP
.394f37	e2 20		sep #$20	                SEP #$20        ; set A short
.394f39	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f3b	48		pha		                PHA
.394f3c	ab		plb		                PLB
.394f3d	28		plp		                PLP
.394f3e	68		pla		                PLA             ; end setdbr macro
.394f3f	48		pha		                PHA             ; begin setdp macro
.394f40	08		php		                PHP
.394f41	c2 20		rep #$20	                REP #$20        ; set A long
.394f43	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f46	5b		tcd		                TCD
.394f47	28		plp		                PLP
.394f48	68		pla		                PLA             ; end setdp macro
.394f49	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f4b	22 f9 4a 39	jsl $394af9	                JSL FATFORCLUSTER12
.394f4f	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394f50	89 01 00	bit #$0001	                BIT #1
.394f53	d0 08		bne $394f5d	                BNE is_odd
.394f55	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394f58	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394f5b	80 06		bra $394f63	                BRA save_update
.394f5d	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394f60	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394f63	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394f66	22 eb 4e 39	jsl $394eeb	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394f6a	b0 0b		bcs $394f77	                BCS ret_success
.394f6c					ret_failure
.394f6c	e2 20		sep #$20	                SEP #$20        ; set A short
.394f6e	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394f70	85 0e		sta $032e	                STA DOS_STATUS
.394f72	28		plp		                PLP
.394f73	2b		pld		                PLD
.394f74	ab		plb		                PLB
.394f75	18		clc		                CLC
.394f76	6b		rtl		                RTL
.394f77					ret_success
.394f77	e2 20		sep #$20	                SEP #$20        ; set A short
.394f79	64 0e		stz $032e	                STZ DOS_STATUS
.394f7b	28		plp		                PLP
.394f7c	2b		pld		                PLD
.394f7d	ab		plb		                PLB
.394f7e	38		sec		                SEC
.394f7f	6b		rtl		                RTL
.394f80					DELCLUSTER32
.394f80	8b		phb		                PHB
.394f81	0b		phd		                PHD
.394f82	08		php		                PHP
.394f83	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f85	48		pha		                PHA             ; begin setdbr macro
.394f86	08		php		                PHP
.394f87	e2 20		sep #$20	                SEP #$20        ; set A short
.394f89	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f8b	48		pha		                PHA
.394f8c	ab		plb		                PLB
.394f8d	28		plp		                PLP
.394f8e	68		pla		                PLA             ; end setdbr macro
.394f8f	48		pha		                PHA             ; begin setdp macro
.394f90	08		php		                PHP
.394f91	c2 20		rep #$20	                REP #$20        ; set A long
.394f93	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f96	5b		tcd		                TCD
.394f97	28		plp		                PLP
.394f98	68		pla		                PLA             ; end setdp macro
.394f99	22 61 4b 39	jsl $394b61	                JSL FATFORCLUSTER32
.394f9d	a9 00 00	lda #$0000	                LDA #0
.394fa0	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394fa3	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394fa6	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394faa	b0 0b		bcs $394fb7	                BCS ret_success
.394fac					ret_failure
.394fac	e2 20		sep #$20	                SEP #$20        ; set A short
.394fae	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394fb0	85 0e		sta $032e	                STA DOS_STATUS
.394fb2	28		plp		                PLP
.394fb3	2b		pld		                PLD
.394fb4	ab		plb		                PLB
.394fb5	18		clc		                CLC
.394fb6	6b		rtl		                RTL
.394fb7					ret_success
.394fb7	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb9	64 0e		stz $032e	                STZ DOS_STATUS
.394fbb	28		plp		                PLP
.394fbc	2b		pld		                PLD
.394fbd	ab		plb		                PLB
.394fbe	38		sec		                SEC
.394fbf	6b		rtl		                RTL
.394fc0					DOS_APPENDCLUS
.394fc0	8b		phb		                PHB
.394fc1	0b		phd		                PHD
.394fc2	08		php		                PHP
.394fc3	48		pha		                PHA             ; begin setdbr macro
.394fc4	08		php		                PHP
.394fc5	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fc9	48		pha		                PHA
.394fca	ab		plb		                PLB
.394fcb	28		plp		                PLP
.394fcc	68		pla		                PLA             ; end setdbr macro
.394fcd	48		pha		                PHA             ; begin setdp macro
.394fce	08		php		                PHP
.394fcf	c2 20		rep #$20	                REP #$20        ; set A long
.394fd1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fd4	5b		tcd		                TCD
.394fd5	28		plp		                PLP
.394fd6	68		pla		                PLA             ; end setdp macro
.394fd7	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fd9	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394fdb	48		pha		                PHA
.394fdc	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394fde	48		pha		                PHA
.394fdf	22 c5 4c 39	jsl $394cc5	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394fe3	b0 09		bcs $394fee	                BCS save_cluster                ; If we got a cluster, write the data to it
.394fe5	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394fe6	85 10		sta $0330	                STA DOS_CLUS_ID
.394fe8	68		pla		                PLA
.394fe9	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394feb	82 7d 00	brl $39506b	                BRL pass_failure                ; Pass the failure back up the chain
.394fee	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394ff0	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ff3	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ff5	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394ff8	22 fe 47 39	jsl $3947fe	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394ffc	90 e7		bcc $394fe5	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394ffe	68		pla		                PLA                             ; Restore the cluster of the file
.394fff	85 10		sta $0330	                STA DOS_CLUS_ID
.395001	68		pla		                PLA
.395002	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395004	22 cc 4b 39	jsl $394bcc	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.395008	b0 fa		bcs $395004	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.39500a	e2 20		sep #$20	                SEP #$20        ; set A short
.39500c	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.395010	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.395012	d0 3d		bne $395051	                BNE fat32                       ; No: assume it's FAT32
.395014					fat12
.395014	c2 20		rep #$20	                REP #$20        ; set A long
.395016	22 86 4a 39	jsl $394a86	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.39501a	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.39501c	89 01 00	bit #$0001	                BIT #1
.39501f	d0 11		bne $395032	                BNE is_odd
.395021	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.395024	29 ff 0f	and #$0fff	                AND #$0FFF
.395027	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39502a	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39502d	29 00 f0	and #$f000	                AND #$F000
.395030	80 10		bra $395042	                BRA update_fat12
.395032	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.395035	0a		asl a		                ASL A
.395036	0a		asl a		                ASL A
.395037	0a		asl a		                ASL A
.395038	0a		asl a		                ASL A
.395039	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39503c	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39503f	29 0f 00	and #$000f	                AND #$000F
.395042	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.395045	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395048	22 eb 4e 39	jsl $394eeb	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.39504c	b0 22		bcs $395070	                BCS ret_success
.39504e	82 1a 00	brl $39506b	                BRL pass_failure
.395051					fat32
.395051	c2 20		rep #$20	                REP #$20        ; set A long
.395053	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.395056	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395059	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.39505c	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.39505f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.395063	b0 0b		bcs $395070	                BCS ret_success
.395065	e2 20		sep #$20	                SEP #$20        ; set A short
.395067	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.395069	85 0e		sta $032e	                STA DOS_STATUS
.39506b	28		plp		pass_failure    PLP
.39506c	2b		pld		                PLD
.39506d	ab		plb		                PLB
.39506e	18		clc		                CLC
.39506f	6b		rtl		                RTL
.395070					ret_success
.395070	e2 20		sep #$20	                SEP #$20        ; set A short
.395072	64 0e		stz $032e	                STZ DOS_STATUS
.395074	28		plp		                PLP
.395075	2b		pld		                PLD
.395076	ab		plb		                PLB
.395077	38		sec		                SEC
.395078	6b		rtl		                RTL
.395079					BCD2BIN
.395079	8b		phb		                PHB
.39507a	0b		phd		                PHD
.39507b	08		php		                PHP
.39507c	48		pha		                PHA             ; begin setdbr macro
.39507d	08		php		                PHP
.39507e	e2 20		sep #$20	                SEP #$20        ; set A short
.395080	a9 00		lda #$00	                LDA #0
.395082	48		pha		                PHA
.395083	ab		plb		                PLB
.395084	28		plp		                PLP
.395085	68		pla		                PLA             ; end setdbr macro
.395086	48		pha		                PHA             ; begin setdp macro
.395087	08		php		                PHP
.395088	c2 20		rep #$20	                REP #$20        ; set A long
.39508a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39508d	5b		tcd		                TCD
.39508e	28		plp		                PLP
.39508f	68		pla		                PLA             ; end setdp macro
.395090	c2 30		rep #$30	                REP #$30        ; set A&X long
.395092	85 28		sta $0348	                STA DOS_TEMP
.395094	29 0f 00	and #$000f	                AND #$000F
.395097	85 2a		sta $034a	                STA DOS_TEMP+2
.395099	a5 28		lda $0348	                LDA DOS_TEMP
.39509b	4a		lsr a		                LSR A
.39509c	4a		lsr a		                LSR A
.39509d	4a		lsr a		                LSR A
.39509e	4a		lsr a		                LSR A
.39509f	85 28		sta $0348	                STA DOS_TEMP
.3950a1	29 0f 00	and #$000f	                AND #$000F
.3950a4	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950a8	a9 0a 00	lda #$000a	                LDA #10
.3950ab	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950af	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950b3	18		clc		                CLC
.3950b4	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950b6	85 2a		sta $034a	                STA DOS_TEMP+2
.3950b8	a5 28		lda $0348	                LDA DOS_TEMP
.3950ba	4a		lsr a		                LSR A
.3950bb	4a		lsr a		                LSR A
.3950bc	4a		lsr a		                LSR A
.3950bd	4a		lsr a		                LSR A
.3950be	85 28		sta $0348	                STA DOS_TEMP
.3950c0	29 0f 00	and #$000f	                AND #$000F
.3950c3	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950c7	a9 64 00	lda #$0064	                LDA #100
.3950ca	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950ce	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950d2	18		clc		                CLC
.3950d3	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950d5	85 2a		sta $034a	                STA DOS_TEMP+2
.3950d7	a5 28		lda $0348	                LDA DOS_TEMP
.3950d9	4a		lsr a		                LSR A
.3950da	4a		lsr a		                LSR A
.3950db	4a		lsr a		                LSR A
.3950dc	4a		lsr a		                LSR A
.3950dd	29 0f 00	and #$000f	                AND #$000F
.3950e0	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950e4	a9 e8 03	lda #$03e8	                LDA #1000
.3950e7	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950eb	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950ef	18		clc		                CLC
.3950f0	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950f2	28		plp		                PLP
.3950f3	2b		pld		                PLD
.3950f4	ab		plb		                PLB
.3950f5	6b		rtl		                RTL
.3950f6					DOS_RTCCREATE
.3950f6	8b		phb		                PHB
.3950f7	0b		phd		                PHD
.3950f8	08		php		                PHP
.3950f9	48		pha		                PHA             ; begin setdbr macro
.3950fa	08		php		                PHP
.3950fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3950fd	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950ff	48		pha		                PHA
.395100	ab		plb		                PLB
.395101	28		plp		                PLP
.395102	68		pla		                PLA             ; end setdbr macro
.395103	48		pha		                PHA             ; begin setdp macro
.395104	08		php		                PHP
.395105	c2 20		rep #$20	                REP #$20        ; set A long
.395107	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39510a	5b		tcd		                TCD
.39510b	28		plp		                PLP
.39510c	68		pla		                PLA             ; end setdp macro
.39510d	c2 10		rep #$10	                REP #$10        ; set X long
.39510f	e2 20		sep #$20	                SEP #$20        ; set A short
.395111	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.395115	09 08		ora #$08	                ORA #%00001000
.395117	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39511b	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.39511f	85 29		sta $0349	                STA DOS_TEMP+1
.395121	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.395125	85 28		sta $0348	                STA DOS_TEMP
.395127	c2 20		rep #$20	                REP #$20        ; set A long
.395129	a5 28		lda $0348	                LDA DOS_TEMP
.39512b	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.39512f	85 28		sta $0348	                STA DOS_TEMP
.395131	38		sec		                SEC                         ; Year is relative to 1980
.395132	e9 bc 07	sbc #$07bc	                SBC #1980
.395135	c2 20		rep #$20	                REP #$20        ; set A long
.395137	0a		asl a		                ASL A
.395138	0a		asl a		                ASL A
.395139	0a		asl a		                ASL A
.39513a	0a		asl a		                ASL A
.39513b	0a		asl a		                ASL A
.39513c	0a		asl a		                ASL A
.39513d	0a		asl a		                ASL A
.39513e	0a		asl a		                ASL A
.39513f	0a		asl a		                ASL A
.395140	29 00 fe	and #$fe00	                AND #$FE00
.395143	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395146	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395148	e2 20		sep #$20	                SEP #$20        ; set A short
.39514a	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.39514e	c2 20		rep #$20	                REP #$20        ; set A long
.395150	29 ff 00	and #$00ff	                AND #$00FF
.395153	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.395157	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.39515a	0a		asl a		                ASL A
.39515b	0a		asl a		                ASL A
.39515c	0a		asl a		                ASL A
.39515d	0a		asl a		                ASL A
.39515e	0a		asl a		                ASL A
.39515f	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.395162	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395165	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395167	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395169	e2 20		sep #$20	                SEP #$20        ; set A short
.39516b	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.39516f	c2 20		rep #$20	                REP #$20        ; set A long
.395171	29 ff 00	and #$00ff	                AND #$00FF
.395174	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.395178	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39517b	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39517e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395180	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395182	e2 20		sep #$20	                SEP #$20        ; set A short
.395184	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395188	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39518a	c2 20		rep #$20	                REP #$20        ; set A long
.39518c	29 ff 00	and #$00ff	                AND #$00FF
.39518f	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.395193	c2 20		rep #$20	                REP #$20        ; set A long
.395195	0a		asl a		                ASL A
.395196	0a		asl a		                ASL A
.395197	0a		asl a		                ASL A
.395198	0a		asl a		                ASL A
.395199	0a		asl a		                ASL A
.39519a	0a		asl a		                ASL A
.39519b	0a		asl a		                ASL A
.39519c	0a		asl a		                ASL A
.39519d	0a		asl a		                ASL A
.39519e	0a		asl a		                ASL A
.39519f	0a		asl a		                ASL A
.3951a0	29 00 f8	and #$f800	                AND #$F800
.3951a3	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951a6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3951aa	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3951ae	c2 20		rep #$20	                REP #$20        ; set A long
.3951b0	29 ff 00	and #$00ff	                AND #$00FF
.3951b3	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.3951b7	c2 20		rep #$20	                REP #$20        ; set A long
.3951b9	0a		asl a		                ASL A
.3951ba	0a		asl a		                ASL A
.3951bb	0a		asl a		                ASL A
.3951bc	0a		asl a		                ASL A
.3951bd	0a		asl a		                ASL A
.3951be	29 e0 07	and #$07e0	                AND #$07E0
.3951c1	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951c4	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951c6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3951ca	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.3951ce	c2 20		rep #$20	                REP #$20        ; set A long
.3951d0	29 ff 00	and #$00ff	                AND #$00FF
.3951d3	22 79 50 39	jsl $395079	                JSL BCD2BIN                 ; Convert it to binary
.3951d7	c2 20		rep #$20	                REP #$20        ; set A long
.3951d9	29 1f 00	and #$001f	                AND #$001F
.3951dc	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951df	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951e1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951e3	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.3951e7	29 f7 00	and #$00f7	                AND #%11110111
.3951ea	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.3951ee	28		plp		                PLP
.3951ef	2b		pld		                PLD
.3951f0	ab		plb		                PLB
.3951f1	6b		rtl		                RTL
.3951f2					DOS_CREATE
.3951f2	8b		phb		                PHB
.3951f3	0b		phd		                PHD
.3951f4	08		php		                PHP
.3951f5	48		pha		                PHA             ; begin setdbr macro
.3951f6	08		php		                PHP
.3951f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3951f9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951fb	48		pha		                PHA
.3951fc	ab		plb		                PLB
.3951fd	28		plp		                PLP
.3951fe	68		pla		                PLA             ; end setdbr macro
.3951ff	48		pha		                PHA             ; begin setdp macro
.395200	08		php		                PHP
.395201	c2 20		rep #$20	                REP #$20        ; set A long
.395203	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395206	5b		tcd		                TCD
.395207	28		plp		                PLP
.395208	68		pla		                PLA             ; end setdp macro
.395209	c2 30		rep #$30	                REP #$30        ; set A&X long
.39520b	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.39520e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395210	85 28		sta $0348	                STA DOS_TEMP
.395212	c8		iny		                INY
.395213	c8		iny		                INY
.395214	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395216	85 2a		sta $034a	                STA DOS_TEMP+2
.395218	e2 20		sep #$20	                SEP #$20        ; set A short
.39521a	a0 00 00	ldy #$0000	                LDY #0
.39521d	a2 00 00	ldx #$0000	                LDX #0
.395220	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.395222	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.395224	f0 04		beq $39522a	                BEQ find_file                   ; If it's NULL, we're done
.395226	e8		inx		                INX
.395227	c8		iny		                INY
.395228	80 f6		bra $395220	                BRA path_loop
.39522a	22 0f 49 39	jsl $39490f	find_file       JSL DOS_PARSE_PATH
.39522e	22 a7 49 39	jsl $3949a7	                JSL DOS_FINDFILE
.395232	90 07		bcc $39523b	                BCC set_device
.395234	e2 20		sep #$20	                SEP #$20        ; set A short
.395236	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.395238	82 d2 00	brl $39530d	                BRL ret_failure
.39523b					set_device
.39523b	e2 20		sep #$20	                SEP #$20        ; set A short
.39523d	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395240	a5 01		lda $0321	                LDA BIOS_DEV
.395242	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395244					validate_name
.395244	22 c5 4c 39	jsl $394cc5	                JSL DOS_FREECLUS
.395248	b0 03		bcs $39524d	                BCS save_data
.39524a	82 c4 00	brl $395311	                BRL pass_failure
.39524d					save_data
.39524d	c2 20		rep #$20	                REP #$20        ; set A long
.39524f	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.395252	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.395254	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395256	c8		iny		                INY
.395257	c8		iny		                INY
.395258	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39525a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39525c	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.39525f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395261	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395263	c8		iny		                INY
.395264	c8		iny		                INY
.395265	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395267	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395269	22 fe 47 39	jsl $3947fe	                JSL DOS_PUTCLUSTER
.39526d	b0 00		bcs $39526f	                BCS find_dir
.39526f					find_dir
.39526f	c2 20		rep #$20	                REP #$20        ; set A long
.395271	22 51 43 39	jsl $394351	                JSL DOS_DIRFINDFREE
.395275	b0 1a		bcs $395291	                BCS set_entry
.395277	c2 20		rep #$20	                REP #$20        ; set A long
.395279	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39527c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39527e	85 10		sta $0330	                STA DOS_CLUS_ID
.395280	c8		iny		                INY
.395281	c8		iny		                INY
.395282	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395284	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395286	22 80 4f 39	jsl $394f80	                JSL DELCLUSTER32                ; Delete the cluster
.39528a	e2 20		sep #$20	                SEP #$20        ; set A short
.39528c	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39528e	82 7c 00	brl $39530d	                BRL ret_failure
.395291					set_entry
.395291	e2 20		sep #$20	                SEP #$20        ; set A short
.395293	a0 00 00	ldy #$0000	                LDY #0
.395296	a9 00		lda #$00	                LDA #0                          ; NULL
.395298	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39529a	c8		iny		                INY
.39529b	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39529e	d0 f8		bne $395298	                BNE copy_dir_loop
.3952a0	a0 00 00	ldy #$0000	                LDY #0
.3952a3	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.3952a6	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952a8	c8		iny		                INY
.3952a9	c0 0b 00	cpy #$000b	                CPY #11
.3952ac	d0 f5		bne $3952a3	                BNE name_loop
.3952ae	c2 20		rep #$20	                REP #$20        ; set A long
.3952b0	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3952b3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b5	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3952b8	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952ba	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.3952bd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952bf	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3952c2	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952c4	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.3952c7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952c9	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3952cc	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952ce	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3952d1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d3	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3952d6	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952d8	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.3952db	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.3952de	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952e0	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.3952e3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952e5	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.3952e8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952ea	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.3952ed	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952ef	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.3952f2	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952f4	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.3952f7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952f9	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.3952fc	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952fe	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395301	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395303	c2 20		rep #$20	                REP #$20        ; set A long
.395305	22 0f 44 39	jsl $39440f	                JSL DOS_DIRWRITE
.395309	b0 0b		bcs $395316	                BCS ret_success
.39530b	80 04		bra $395311	                BRA pass_failure
.39530d					ret_failure
.39530d	e2 20		sep #$20	                SEP #$20        ; set A short
.39530f	85 0e		sta $032e	                STA DOS_STATUS
.395311	28		plp		pass_failure    PLP
.395312	2b		pld		                PLD
.395313	ab		plb		                PLB
.395314	18		clc		                CLC
.395315	6b		rtl		                RTL
.395316					ret_success
.395316	e2 20		sep #$20	                SEP #$20        ; set A short
.395318	64 0e		stz $032e	                STZ DOS_STATUS
.39531a	28		plp		                PLP
.39531b	2b		pld		                PLD
.39531c	ab		plb		                PLB
.39531d	38		sec		                SEC
.39531e	6b		rtl		                RTL
.39531f					DOS_COPYPATH
.39531f	da		phx		                PHX
.395320	5a		phy		                PHY
.395321	8b		phb		                PHB
.395322	0b		phd		                PHD
.395323	08		php		                PHP
.395324	48		pha		                PHA             ; begin setdbr macro
.395325	08		php		                PHP
.395326	e2 20		sep #$20	                SEP #$20        ; set A short
.395328	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39532a	48		pha		                PHA
.39532b	ab		plb		                PLB
.39532c	28		plp		                PLP
.39532d	68		pla		                PLA             ; end setdbr macro
.39532e	48		pha		                PHA             ; begin setdp macro
.39532f	08		php		                PHP
.395330	c2 20		rep #$20	                REP #$20        ; set A long
.395332	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395335	5b		tcd		                TCD
.395336	28		plp		                PLP
.395337	68		pla		                PLA             ; end setdp macro
.395338	c2 30		rep #$30	                REP #$30        ; set A&X long
.39533a	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.39533d	a2 00 00	ldx #$0000	                LDX #0
.395340	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.395342	e8		inx		                INX
.395343	e8		inx		                INX
.395344	e0 00 01	cpx #$0100	                CPX #256
.395347	d0 f7		bne $395340	                BNE clr_loop
.395349	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.39534b	d0 04		bne $395351	                BNE get_path            ; No: attempt to fetch the path
.39534d	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.39534f	f0 27		beq $395378	                BEQ done                ; Yes: return an empty buffer
.395351	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.395354	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395356	85 28		sta $0348	                STA DOS_TEMP
.395358	c8		iny		                INY
.395359	c8		iny		                INY
.39535a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39535c	85 2a		sta $034a	                STA DOS_TEMP+2
.39535e	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.395360	d0 04		bne $395366	                BNE start_copy          ; No: start copying it
.395362	a5 2a		lda $034a	                LDA DOS_TEMP+2
.395364	f0 12		beq $395378	                BEQ done                ; Yes: return an empty buffer
.395366					start_copy
.395366	e2 20		sep #$20	                SEP #$20        ; set A short
.395368	a2 00 00	ldx #$0000	                LDX #0
.39536b	a0 00 00	ldy #$0000	                LDY #0
.39536e	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.395370	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.395372	f0 04		beq $395378	                BEQ done
.395374	e8		inx		                INX
.395375	c8		iny		                INY
.395376	d0 f6		bne $39536e	                BNE loop
.395378	28		plp		done            PLP
.395379	2b		pld		                PLD
.39537a	ab		plb		                PLB
.39537b	7a		ply		                PLY
.39537c	fa		plx		                PLX
.39537d	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.39537e					DOS_TEST
.39537e	8b		phb		                PHB
.39537f	0b		phd		                PHD
.395380	08		php		                PHP
.395381	48		pha		                PHA             ; begin setdbr macro
.395382	08		php		                PHP
.395383	e2 20		sep #$20	                SEP #$20        ; set A short
.395385	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395387	48		pha		                PHA
.395388	ab		plb		                PLB
.395389	28		plp		                PLP
.39538a	68		pla		                PLA             ; end setdbr macro
.39538b	48		pha		                PHA             ; begin setdp macro
.39538c	08		php		                PHP
.39538d	c2 20		rep #$20	                REP #$20        ; set A long
.39538f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395392	5b		tcd		                TCD
.395393	28		plp		                PLP
.395394	68		pla		                PLA             ; end setdp macro
.395395	c2 30		rep #$30	                REP #$30        ; set A&X long
.395397	a9 bd 53	lda #$53bd	                LDA #<>src_file
.39539a	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.39539e	a9 39 00	lda #$0039	                LDA #`src_file
.3953a1	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3953a5	a9 ca 53	lda #$53ca	                LDA #<>dst_file
.3953a8	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3953ac	a9 39 00	lda #$0039	                LDA #`dst_file
.3953af	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3953b3	22 4f 5a 39	jsl $395a4f	                JSL IF_COPY
.3953b7	b0 00		bcs $3953b9	                BCS done
.3953b9	28		plp		done            PLP
.3953ba	2b		pld		                PLD
.3953bb	ab		plb		                PLB
.3953bc	6b		rtl		                RTL
>3953bd	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>3953c5	2e 62 61 73 00
>3953ca	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>3953d2	32 2e 62 61 73 00
.3953d8					IF_OPEN
.3953d8	da		phx		                PHX
.3953d9	5a		phy		                PHY
.3953da	0b		phd		                PHD
.3953db	8b		phb		                PHB
.3953dc	08		php		                PHP
.3953dd	48		pha		                PHA             ; begin setdbr macro
.3953de	08		php		                PHP
.3953df	e2 20		sep #$20	                SEP #$20        ; set A short
.3953e1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953e3	48		pha		                PHA
.3953e4	ab		plb		                PLB
.3953e5	28		plp		                PLP
.3953e6	68		pla		                PLA             ; end setdbr macro
.3953e7	48		pha		                PHA             ; begin setdp macro
.3953e8	08		php		                PHP
.3953e9	c2 20		rep #$20	                REP #$20        ; set A long
.3953eb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953ee	5b		tcd		                TCD
.3953ef	28		plp		                PLP
.3953f0	68		pla		                PLA             ; end setdp macro
.3953f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3953f3	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3953f6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953f8	89 38		bit #$38	                BIT #FD_STAT_OPEN
.3953fa	f0 05		beq $395401	                BEQ ok_to_open
.3953fc	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3953fe	82 0d 05	brl $39590e	                BRL IF_FAILURE
.395401	22 1f 53 39	jsl $39531f	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395405	22 a7 49 39	jsl $3949a7	                JSL DOS_FINDFILE                ; Attempt to find the file
.395409	b0 03		bcs $39540e	                BCS is_found                    ; If OK: we found the file
.39540b	82 04 05	brl $395912	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.39540e					is_found
.39540e	e2 20		sep #$20	                SEP #$20        ; set A short
.395410	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395413	a5 01		lda $0321	                LDA BIOS_DEV
.395415	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395417	c2 20		rep #$20	                REP #$20        ; set A long
.395419	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.39541c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39541e	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395420	c8		iny		                INY
.395421	c8		iny		                INY
.395422	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395424	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395426	22 c1 47 39	jsl $3947c1	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.39542a	b0 03		bcs $39542f	                BCS read_cluster
.39542c	82 e3 04	brl $395912	                BRL IF_PASSFAILURE
.39542f	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.395432	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395434	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395436	c8		iny		                INY
.395437	c8		iny		                INY
.395438	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39543a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39543c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.39543f	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395441	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395443	c8		iny		                INY
.395444	c8		iny		                INY
.395445	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395447	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395449	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.39544c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39544e	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.395451	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395453	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395456	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395458	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.39545b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39545d	e2 20		sep #$20	                SEP #$20        ; set A short
.39545f	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.395462	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.395464	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395466	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395468	82 ae 04	brl $395919	                BRL IF_SUCCESS
.39546b					IF_CREATE
.39546b	da		phx		                PHX
.39546c	5a		phy		                PHY
.39546d	0b		phd		                PHD
.39546e	8b		phb		                PHB
.39546f	08		php		                PHP
.395470	48		pha		                PHA             ; begin setdbr macro
.395471	08		php		                PHP
.395472	e2 20		sep #$20	                SEP #$20        ; set A short
.395474	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395476	48		pha		                PHA
.395477	ab		plb		                PLB
.395478	28		plp		                PLP
.395479	68		pla		                PLA             ; end setdbr macro
.39547a	48		pha		                PHA             ; begin setdp macro
.39547b	08		php		                PHP
.39547c	c2 20		rep #$20	                REP #$20        ; set A long
.39547e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395481	5b		tcd		                TCD
.395482	28		plp		                PLP
.395483	68		pla		                PLA             ; end setdp macro
.395484	22 f2 51 39	jsl $3951f2	                JSL DOS_CREATE                  ; Attempt to create the file
.395488	90 18		bcc $3954a2	                BCC pass_failure                ; If it fails: pass the failure up the chain
.39548a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39548c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.39548f	a9 00 00	lda #$0000	                LDA #0
.395492	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395494	c8		iny		                INY
.395495	c8		iny		                INY
.395496	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395498	e2 20		sep #$20	                SEP #$20        ; set A short
.39549a	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39549d	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.39549f	82 77 04	brl $395919	                BRL IF_SUCCESS
.3954a2	82 69 04	brl $39590e	pass_failure    BRL IF_FAILURE
.3954a5					IF_CLOSE
.3954a5	da		phx		                PHX
.3954a6	5a		phy		                PHY
.3954a7	0b		phd		                PHD
.3954a8	8b		phb		                PHB
.3954a9	08		php		                PHP
.3954aa	48		pha		                PHA             ; begin setdbr macro
.3954ab	08		php		                PHP
.3954ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3954ae	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954b0	48		pha		                PHA
.3954b1	ab		plb		                PLB
.3954b2	28		plp		                PLP
.3954b3	68		pla		                PLA             ; end setdbr macro
.3954b4	48		pha		                PHA             ; begin setdp macro
.3954b5	08		php		                PHP
.3954b6	c2 20		rep #$20	                REP #$20        ; set A long
.3954b8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954bb	5b		tcd		                TCD
.3954bc	28		plp		                PLP
.3954bd	68		pla		                PLA             ; end setdp macro
.3954be	e2 20		sep #$20	                SEP #$20        ; set A short
.3954c0	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.3954c3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954c5	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3954c7	f0 09		beq $3954d2	                BEQ set_flag                    ; No, just mark it closed
.3954c9	22 3e 55 39	jsl $39553e	                JSL IF_WRITE                    ; Attempt to write the cluster
.3954cd	b0 03		bcs $3954d2	                BCS set_flag
.3954cf	82 40 04	brl $395912	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3954d2	22 05 5a 39	jsl $395a05	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.3954d6	82 40 04	brl $395919	                BRL IF_SUCCESS
.3954d9					IF_READ
.3954d9	da		phx		                PHX
.3954da	5a		phy		                PHY
.3954db	0b		phd		                PHD
.3954dc	8b		phb		                PHB
.3954dd	08		php		                PHP
.3954de	48		pha		                PHA             ; begin setdbr macro
.3954df	08		php		                PHP
.3954e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3954e2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954e4	48		pha		                PHA
.3954e5	ab		plb		                PLB
.3954e6	28		plp		                PLP
.3954e7	68		pla		                PLA             ; end setdbr macro
.3954e8	48		pha		                PHA             ; begin setdp macro
.3954e9	08		php		                PHP
.3954ea	c2 20		rep #$20	                REP #$20        ; set A long
.3954ec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954ef	5b		tcd		                TCD
.3954f0	28		plp		                PLP
.3954f1	68		pla		                PLA             ; end setdp macro
.3954f2	c2 10		rep #$10	                REP #$10        ; set X long
.3954f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f6					get_dev
.3954f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f8	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3954fb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954fd	85 01		sta $0321	                STA BIOS_DEV
.3954ff	22 41 45 39	jsl $394541	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395503	c2 20		rep #$20	                REP #$20        ; set A long
.395505	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395508	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39550a	85 10		sta $0330	                STA DOS_CLUS_ID
.39550c	c8		iny		                INY
.39550d	c8		iny		                INY
.39550e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395510	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395512	22 cc 4b 39	jsl $394bcc	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395516	90 13		bcc $39552b	                BCC pass_failure                ; If not OK: pass the failure up the chain
.395518	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39551b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39551d	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39551f	c8		iny		                INY
.395520	c8		iny		                INY
.395521	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395523	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395525	22 c1 47 39	jsl $3947c1	                JSL DOS_GETCLUSTER              ; Get the cluster
.395529	b0 03		bcs $39552e	                BCS ret_success                 ; If ok: return success
.39552b					pass_failure
.39552b	82 e4 03	brl $395912	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39552e	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.395531	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395533	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395535	c8		iny		                INY
.395536	c8		iny		                INY
.395537	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395539	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39553b	82 db 03	brl $395919	                BRL IF_SUCCESS
.39553e					IF_WRITE
.39553e	da		phx		                PHX
.39553f	5a		phy		                PHY
.395540	0b		phd		                PHD
.395541	8b		phb		                PHB
.395542	08		php		                PHP
.395543	48		pha		                PHA             ; begin setdbr macro
.395544	08		php		                PHP
.395545	e2 20		sep #$20	                SEP #$20        ; set A short
.395547	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395549	48		pha		                PHA
.39554a	ab		plb		                PLB
.39554b	28		plp		                PLP
.39554c	68		pla		                PLA             ; end setdbr macro
.39554d	48		pha		                PHA             ; begin setdp macro
.39554e	08		php		                PHP
.39554f	c2 20		rep #$20	                REP #$20        ; set A long
.395551	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395554	5b		tcd		                TCD
.395555	28		plp		                PLP
.395556	68		pla		                PLA             ; end setdp macro
.395557	c2 10		rep #$10	                REP #$10        ; set X long
.395559	e2 20		sep #$20	                SEP #$20        ; set A short
.39555b	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39555e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395560	85 01		sta $0321	                STA BIOS_DEV
.395562	22 41 45 39	jsl $394541	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395566	c2 20		rep #$20	                REP #$20        ; set A long
.395568	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39556b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556d	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39556f	c8		iny		                INY
.395570	c8		iny		                INY
.395571	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395573	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395575	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395578	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39557a	85 10		sta $0330	                STA DOS_CLUS_ID
.39557c	c8		iny		                INY
.39557d	c8		iny		                INY
.39557e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395580	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395582	d0 1a		bne $39559e	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395584	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395586	d0 16		bne $39559e	                BNE rewrite_cluster
.395588	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39558b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39558d	85 10		sta $0330	                STA DOS_CLUS_ID
.39558f	c8		iny		                INY
.395590	c8		iny		                INY
.395591	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395593	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395595	22 c0 4f 39	jsl $394fc0	                JSL DOS_APPENDCLUS              ; Append the cluster
.395599	b0 0c		bcs $3955a7	                BCS ret_success                 ; If OK: return success
.39559b	82 74 03	brl $395912	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39559e	22 fe 47 39	jsl $3947fe	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3955a2	b0 03		bcs $3955a7	                BCS ret_success                 ; If ok: return success
.3955a4	82 6b 03	brl $395912	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955a7	82 6f 03	brl $395919	ret_success     BRL IF_SUCCESS
.3955aa					IF_DIROPEN
.3955aa	da		phx		                PHX
.3955ab	5a		phy		                PHY
.3955ac	0b		phd		                PHD
.3955ad	8b		phb		                PHB
.3955ae	08		php		                PHP
.3955af	48		pha		                PHA             ; begin setdbr macro
.3955b0	08		php		                PHP
.3955b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3955b3	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955b5	48		pha		                PHA
.3955b6	ab		plb		                PLB
.3955b7	28		plp		                PLP
.3955b8	68		pla		                PLA             ; end setdbr macro
.3955b9	48		pha		                PHA             ; begin setdp macro
.3955ba	08		php		                PHP
.3955bb	c2 20		rep #$20	                REP #$20        ; set A long
.3955bd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955c0	5b		tcd		                TCD
.3955c1	28		plp		                PLP
.3955c2	68		pla		                PLA             ; end setdp macro
.3955c3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955c5	22 1f 53 39	jsl $39531f	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.3955c9	22 0f 49 39	jsl $39490f	                JSL DOS_PARSE_PATH          ; Parse the path
.3955cd	22 41 45 39	jsl $394541	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3955d1	b0 03		bcs $3955d6	                BCS get_root_dir            ; If successful: get the root directory
.3955d3	82 3c 03	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3955d6					get_root_dir
.3955d6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955d8	22 f6 41 39	jsl $3941f6	                JSL DOS_DIROPEN
.3955dc	b0 03		bcs $3955e1	                BCS success
.3955de	82 31 03	brl $395912	                BRL IF_PASSFAILURE
.3955e1	82 35 03	brl $395919	success         BRL IF_SUCCESS
.3955e4					IF_DIRNEXT
.3955e4	5c 90 42 39	jmp $394290	                JML DOS_DIRNEXT
.3955e8					IF_DELETE
.3955e8	da		phx		                PHX
.3955e9	5a		phy		                PHY
.3955ea	0b		phd		                PHD
.3955eb	8b		phb		                PHB
.3955ec	08		php		                PHP
.3955ed	48		pha		                PHA             ; begin setdbr macro
.3955ee	08		php		                PHP
.3955ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3955f1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955f3	48		pha		                PHA
.3955f4	ab		plb		                PLB
.3955f5	28		plp		                PLP
.3955f6	68		pla		                PLA             ; end setdbr macro
.3955f7	48		pha		                PHA             ; begin setdp macro
.3955f8	08		php		                PHP
.3955f9	c2 20		rep #$20	                REP #$20        ; set A long
.3955fb	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955fe	5b		tcd		                TCD
.3955ff	28		plp		                PLP
.395600	68		pla		                PLA             ; end setdp macro
.395601	c2 30		rep #$30	                REP #$30        ; set A&X long
.395603	22 a7 49 39	jsl $3949a7	                JSL DOS_FINDFILE
.395607	b0 03		bcs $39560c	                BCS get_first_clus
.395609	82 06 03	brl $395912	                BRL IF_PASSFAILURE
.39560c					get_first_clus
.39560c	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39560f	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395611	85 10		sta $0330	                STA DOS_CLUS_ID
.395613	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395616	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395618	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39561a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39561c	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39561f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395621	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395624	22 cc 4b 39	jsl $394bcc	del_loop        JSL NEXTCLUSTER
.395628	90 2f		bcc $395659	                BCC del_one
.39562a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39562c	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.39562f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395631	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.395634	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395637	85 10		sta $0330	                STA DOS_CLUS_ID
.395639	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39563c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39563e	22 80 4f 39	jsl $394f80	                JSL DELCLUSTER32
.395642	b0 03		bcs $395647	                BCS go_next
.395644	82 cb 02	brl $395912	                BRL IF_PASSFAILURE
.395647					go_next
.395647	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.39564a	85 10		sta $0330	                STA DOS_CLUS_ID
.39564c	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39564f	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.395652	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395654	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395657	80 cb		bra $395624	                BRA del_loop
.395659					del_one
.395659	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.39565c	85 10		sta $0330	                STA DOS_CLUS_ID
.39565e	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395661	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395663	22 da 4e 39	jsl $394eda	                JSL DELCLUSTER
.395667	b0 03		bcs $39566c	                BCS free_dir_entry
.395669	82 a6 02	brl $395912	                BRL IF_PASSFAILURE
.39566c					free_dir_entry
.39566c	e2 20		sep #$20	                SEP #$20        ; set A short
.39566e	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395671	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395673	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395675	22 0f 44 39	jsl $39440f	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395679	b0 03		bcs $39567e	                BCS ret_success
.39567b	82 94 02	brl $395912	                BRL IF_PASSFAILURE
.39567e	82 98 02	brl $395919	ret_success     BRL IF_SUCCESS
.395681					IF_DIRREAD
.395681	da		phx		                PHX
.395682	5a		phy		                PHY
.395683	0b		phd		                PHD
.395684	8b		phb		                PHB
.395685	08		php		                PHP
.395686	48		pha		                PHA             ; begin setdbr macro
.395687	08		php		                PHP
.395688	e2 20		sep #$20	                SEP #$20        ; set A short
.39568a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39568c	48		pha		                PHA
.39568d	ab		plb		                PLB
.39568e	28		plp		                PLP
.39568f	68		pla		                PLA             ; end setdbr macro
.395690	48		pha		                PHA             ; begin setdp macro
.395691	08		php		                PHP
.395692	c2 20		rep #$20	                REP #$20        ; set A long
.395694	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395697	5b		tcd		                TCD
.395698	28		plp		                PLP
.395699	68		pla		                PLA             ; end setdp macro
.39569a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39569c	22 a7 49 39	jsl $3949a7	                JSL DOS_FINDFILE
.3956a0	b0 03		bcs $3956a5	                BCS success
.3956a2	82 69 02	brl $39590e	                BRL IF_FAILURE
.3956a5	82 71 02	brl $395919	success         BRL IF_SUCCESS
.3956a8					IF_DIRWRITE
.3956a8	5c 0f 44 39	jmp $39440f	                JML DOS_DIRWRITE
.3956ac					IF_LOAD
.3956ac	da		phx		                PHX
.3956ad	5a		phy		                PHY
.3956ae	0b		phd		                PHD
.3956af	8b		phb		                PHB
.3956b0	08		php		                PHP
.3956b1	48		pha		                PHA             ; begin setdbr macro
.3956b2	08		php		                PHP
.3956b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956b7	48		pha		                PHA
.3956b8	ab		plb		                PLB
.3956b9	28		plp		                PLP
.3956ba	68		pla		                PLA             ; end setdbr macro
.3956bb	48		pha		                PHA             ; begin setdp macro
.3956bc	08		php		                PHP
.3956bd	c2 20		rep #$20	                REP #$20        ; set A long
.3956bf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956c2	5b		tcd		                TCD
.3956c3	28		plp		                PLP
.3956c4	68		pla		                PLA             ; end setdp macro
.3956c5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956c7	22 d8 53 39	jsl $3953d8	                JSL IF_OPEN
.3956cb	b0 03		bcs $3956d0	                BCS setup                   ; If success: start setting things up
.3956cd	82 42 02	brl $395912	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3956d0					setup
.3956d0	c2 20		rep #$20	                REP #$20        ; set A long
.3956d2	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3956d5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956d7	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3956d9	c8		iny		                INY
.3956da	c8		iny		                INY
.3956db	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956dd	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3956df	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.3956e2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956e4	85 30		sta $0350	                STA DOS_SRC_PTR
.3956e6	c8		iny		                INY
.3956e7	c8		iny		                INY
.3956e8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956ea	85 32		sta $0352	                STA DOS_SRC_PTR+2
.3956ec	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.3956ee	c9 40 00	cmp #$0040	                CMP #$0040
.3956f1	b0 04		bcs $3956f7	                BGE load_by_type            ; No: try to load it by type
.3956f3	5c c1 57 39	jmp $3957c1	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3956f7	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3956fa	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3956fd					type_loop
.3956fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3956ff	bf 43 57 39	lda $395743,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395703	f0 37		beq $39573c	                BEQ no_match                ; If NULL... we didn't get a match
.395705	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395708	d0 28		bne $395732	                BNE next_entry              ; If they don't match, try the next entry
.39570a	bf 44 57 39	lda $395744,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.39570e	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395711	d0 1f		bne $395732	                BNE next_entry              ; If they don't match, try the next entry
.395713	bf 45 57 39	lda $395745,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395717	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.39571a	d0 16		bne $395732	                BNE next_entry              ; If they don't match, try the next entry
.39571c	c2 20		rep #$20	                REP #$20        ; set A long
.39571e	bf 46 57 39	lda $395746,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.395722	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.395724	e2 20		sep #$20	                SEP #$20        ; set A short
.395726	bf 48 57 39	lda $395748,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.39572a	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.39572c	a2 00 00	ldx #$0000	                LDX #0
.39572f	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.395732					next_entry
.395732	c2 30		rep #$30	                REP #$30        ; set A&X long
.395734	8a		txa		                TXA
.395735	18		clc		                CLC
.395736	69 06 00	adc #$0006	                ADC #6
.395739	aa		tax		                TAX
.39573a	80 c1		bra $3956fd	                BRA type_loop               ; And check it against the file
.39573c					no_match
.39573c	e2 20		sep #$20	                SEP #$20        ; set A short
.39573e	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.395740	82 cb 01	brl $39590e	                BRL IF_FAILURE
>395743	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>395746	4a 57				                .word <>IF_LOADPGX
>395748	39				                .byte `IF_LOADPGX
>395749	00				                .byte 0
.39574a					IF_LOADPGX
.39574a	c2 10		rep #$10	                REP #$10        ; set X long
.39574c	e2 20		sep #$20	                SEP #$20        ; set A short
.39574e	a0 00 00	ldy #$0000	                LDY #0
.395751	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395753	c9 50		cmp #$50	                CMP #'P'
.395755	d0 15		bne $39576c	                BNE fail_sig                        ; If not found, fail
.395757	c8		iny		                INY
.395758	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39575a	c9 47		cmp #$47	                CMP #'G'
.39575c	d0 0e		bne $39576c	                BNE fail_sig
.39575e	c8		iny		                INY
.39575f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395761	c9 58		cmp #$58	                CMP #'X'
.395763	d0 07		bne $39576c	                BNE fail_sig
.395765	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395766	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395768	c9 01		cmp #$01	                CMP #$01
.39576a	f0 06		beq $395772	                BEQ get_dest                        ; All passes: go to get the destination address
.39576c	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39576e	22 0e 59 39	jsl $39590e	                JSL IF_FAILURE
.395772					get_dest
.395772	c2 20		rep #$20	                REP #$20        ; set A long
.395774	c8		iny		                INY
.395775	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395777	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395779	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39577b	c8		iny		                INY
.39577c	c8		iny		                INY
.39577d	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.39577f	85 36		sta $0356	                STA DOS_DST_PTR+2
.395781	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395783	c8		iny		                INY                                 ; Point to the first data byte
.395784	c8		iny		                INY
.395785					copy_loop
.395785	e2 20		sep #$20	                SEP #$20        ; set A short
.395787	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395789	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39578b	c2 20		rep #$20	                REP #$20        ; set A long
.39578d	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.39578f	d0 02		bne $395793	                BNE dec_file_size
.395791	e6 34		inc $0354	                INC DOS_DST_PTR
.395793	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395794	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395796	e9 01 00	sbc #$0001	                SBC #1
.395799	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39579b	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39579d	e9 00 00	sbc #$0000	                SBC #0
.3957a0	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957a2	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3957a4	d0 04		bne $3957aa	                BNE next_byte
.3957a6	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957a8	f0 14		beq $3957be	                BEQ done                            ; Yes: we're done
.3957aa	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3957ab	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3957ae	d0 d5		bne $395785	                BNE copy_loop                       ; No: keep copying
.3957b0	22 b0 4c 39	jsl $394cb0	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.3957b4	b0 03		bcs $3957b9	                BCS next_cluster
.3957b6	82 59 01	brl $395912	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3957b9	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.3957bc	80 c7		bra $395785	                BRA copy_loop                       ; Go back to copying
.3957be	82 58 01	brl $395919	done            BRL IF_SUCCESS
.3957c1					IF_LOADRAW
.3957c1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957c3	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3957c6					copy_loop
.3957c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c8	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3957ca	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3957cc	c2 20		rep #$20	                REP #$20        ; set A long
.3957ce	38		sec		                SEC                         ; Count down the number of bytes left
.3957cf	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957d1	e9 01 00	sbc #$0001	                SBC #1
.3957d4	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957d6	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957d8	e9 00 00	sbc #$0000	                SBC #0
.3957db	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957dd	d0 04		bne $3957e3	                BNE continue
.3957df	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957e1	f0 1b		beq $3957fe	                BEQ close_file              ; If not: we're done
.3957e3	c8		iny		continue        INY
.3957e4	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.3957e7	d0 dd		bne $3957c6	                BNE copy_loop               ; No: keep processing the bytes
.3957e9	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.3957ea	a5 34		lda $0354	                LDA DOS_DST_PTR
.3957ec	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.3957ef	85 34		sta $0354	                STA DOS_DST_PTR
.3957f1	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3957f3	69 00 00	adc #$0000	                ADC #0
.3957f6	85 36		sta $0356	                STA DOS_DST_PTR+2
.3957f8	22 d9 54 39	jsl $3954d9	                JSL IF_READ                 ; Yes: load the next cluster
.3957fc	b0 c5		bcs $3957c3	                BCS copy_cluster            ; And start copying it
.3957fe					close_file
.3957fe	82 18 01	brl $395919	ret_success     BRL IF_SUCCESS
.395801					IF_NULLBUFFER
.395801	5a		phy		                PHY
.395802	8b		phb		                PHB
.395803	0b		phd		                PHD
.395804	08		php		                PHP
.395805	48		pha		                PHA             ; begin setdbr macro
.395806	08		php		                PHP
.395807	e2 20		sep #$20	                SEP #$20        ; set A short
.395809	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39580b	48		pha		                PHA
.39580c	ab		plb		                PLB
.39580d	28		plp		                PLP
.39580e	68		pla		                PLA             ; end setdbr macro
.39580f	48		pha		                PHA             ; begin setdp macro
.395810	08		php		                PHP
.395811	c2 20		rep #$20	                REP #$20        ; set A long
.395813	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395816	5b		tcd		                TCD
.395817	28		plp		                PLP
.395818	68		pla		                PLA             ; end setdp macro
.395819	c2 30		rep #$30	                REP #$30        ; set A&X long
.39581b	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39581e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395820	85 28		sta $0348	                STA DOS_TEMP
.395822	c8		iny		                INY
.395823	c8		iny		                INY
.395824	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395826	85 2a		sta $034a	                STA DOS_TEMP+2
.395828	a0 00 00	ldy #$0000	                LDY #0
.39582b	a9 00 00	lda #$0000	                LDA #0
.39582e	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395830	c8		iny		                INY
.395831	c8		iny		                INY
.395832	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.395835	d0 f7		bne $39582e	                BNE loop
.395837	28		plp		                PLP
.395838	2b		pld		                PLD
.395839	ab		plb		                PLB
.39583a	7a		ply		                PLY
.39583b	6b		rtl		                RTL
.39583c					IF_COPY2BUFF
.39583c	5a		phy		                PHY
.39583d	8b		phb		                PHB
.39583e	0b		phd		                PHD
.39583f	08		php		                PHP
.395840	48		pha		                PHA             ; begin setdbr macro
.395841	08		php		                PHP
.395842	e2 20		sep #$20	                SEP #$20        ; set A short
.395844	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395846	48		pha		                PHA
.395847	ab		plb		                PLB
.395848	28		plp		                PLP
.395849	68		pla		                PLA             ; end setdbr macro
.39584a	48		pha		                PHA             ; begin setdp macro
.39584b	08		php		                PHP
.39584c	c2 20		rep #$20	                REP #$20        ; set A long
.39584e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395851	5b		tcd		                TCD
.395852	28		plp		                PLP
.395853	68		pla		                PLA             ; end setdp macro
.395854	c2 30		rep #$30	                REP #$30        ; set A&X long
.395856	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395859	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39585b	85 28		sta $0348	                STA DOS_TEMP
.39585d	c8		iny		                INY
.39585e	c8		iny		                INY
.39585f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395861	85 2a		sta $034a	                STA DOS_TEMP+2
.395863	a0 00 00	ldy #$0000	                LDY #0
.395866					copy_loop
.395866	e2 20		sep #$20	                SEP #$20        ; set A short
.395868	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39586a	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39586c	c2 20		rep #$20	                REP #$20        ; set A long
.39586e	c8		iny		                INY                         ; Count it
.39586f	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395872	f0 14		beq $395888	                BEQ done                    ; Yes: we're done
.395874	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395876	c5 38		cmp $0358	                CMP DOS_END_PTR
.395878	d0 06		bne $395880	                BNE next_byte
.39587a	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39587c	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39587e	f0 08		beq $395888	                BEQ done                    ; Yes: we're done
.395880	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.395882	d0 e2		bne $395866	                BNE copy_loop
.395884	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395886	80 de		bra $395866	                BRA copy_loop               ; And try this next byte
.395888	28		plp		done            PLP
.395889	2b		pld		                PLD
.39588a	ab		plb		                PLB
.39588b	7a		ply		                PLY
.39588c	6b		rtl		                RTL
.39588d					IF_SAVE
.39588d	da		phx		                PHX
.39588e	5a		phy		                PHY
.39588f	0b		phd		                PHD
.395890	8b		phb		                PHB
.395891	08		php		                PHP
.395892	48		pha		                PHA             ; begin setdbr macro
.395893	08		php		                PHP
.395894	e2 20		sep #$20	                SEP #$20        ; set A short
.395896	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395898	48		pha		                PHA
.395899	ab		plb		                PLB
.39589a	28		plp		                PLP
.39589b	68		pla		                PLA             ; end setdbr macro
.39589c	48		pha		                PHA             ; begin setdp macro
.39589d	08		php		                PHP
.39589e	c2 20		rep #$20	                REP #$20        ; set A long
.3958a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958a3	5b		tcd		                TCD
.3958a4	28		plp		                PLP
.3958a5	68		pla		                PLA             ; end setdp macro
.3958a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958a8	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3958ab	38		sec		                SEC
.3958ac	a5 38		lda $0358	                LDA DOS_END_PTR
.3958ae	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3958b0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958b2	c8		iny		                INY
.3958b3	c8		iny		                INY
.3958b4	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3958b6	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3958b8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958ba	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3958bd	18		clc		                CLC
.3958be	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958c0	69 01 00	adc #$0001	                ADC #1
.3958c3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958c5	90 09		bcc $3958d0	                BCC first_block
.3958c7	c8		iny		                INY
.3958c8	c8		iny		                INY
.3958c9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958cb	69 00 00	adc #$0000	                ADC #0
.3958ce	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958d0	22 01 58 39	jsl $395801	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958d4	22 3c 58 39	jsl $39583c	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3958d8	22 6b 54 39	jsl $39546b	                JSL IF_CREATE           ; Create file.
.3958dc	b0 03		bcs $3958e1	                BCS check_for_end
.3958de	82 31 00	brl $395912	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3958e1	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3958e3	c5 38		cmp $0358	                CMP DOS_END_PTR
.3958e5	d0 06		bne $3958ed	                BNE next_block
.3958e7	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958e9	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958eb	f0 1d		beq $39590a	                BEQ done                ; Yes: we're done
.3958ed	22 01 58 39	jsl $395801	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958f1	22 3c 58 39	jsl $39583c	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3958f5	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3958f8	a9 00 00	lda #$0000	                LDA #0
.3958fb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958fd	c8		iny		                INY
.3958fe	c8		iny		                INY
.3958ff	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395901	22 3e 55 39	jsl $39553e	                JSL IF_WRITE            ; Append to the file
.395905	b0 da		bcs $3958e1	                BCS check_for_end       ; And try again
.395907	82 08 00	brl $395912	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.39590a	5c 19 59 39	jmp $395919	done            JML IF_SUCCESS
.39590e					IF_FAILURE
.39590e	e2 20		sep #$20	                SEP #$20        ; set A short
.395910	85 0e		sta $032e	                STA DOS_STATUS
.395912	28		plp		IF_PASSFAILURE  PLP
.395913	18		clc		                CLC
.395914	ab		plb		                PLB
.395915	2b		pld		                PLD
.395916	7a		ply		                PLY
.395917	fa		plx		                PLX
.395918	6b		rtl		                RTL
.395919					IF_SUCCESS
.395919	e2 20		sep #$20	                SEP #$20        ; set A short
.39591b	64 00		stz $0320	                STZ BIOS_STATUS
.39591d	64 0e		stz $032e	                STZ DOS_STATUS
.39591f	28		plp		                PLP
.395920	38		sec		                SEC
.395921	ab		plb		                PLB
.395922	2b		pld		                PLD
.395923	7a		ply		                PLY
.395924	fa		plx		                PLX
.395925	6b		rtl		                RTL
.395926					IF_RUN
.395926	da		phx		                PHX
.395927	5a		phy		                PHY
.395928	0b		phd		                PHD
.395929	8b		phb		                PHB
.39592a	08		php		                PHP
.39592b	48		pha		                PHA             ; begin setdbr macro
.39592c	08		php		                PHP
.39592d	e2 20		sep #$20	                SEP #$20        ; set A short
.39592f	a9 00		lda #$00	                LDA #0
.395931	48		pha		                PHA
.395932	ab		plb		                PLB
.395933	28		plp		                PLP
.395934	68		pla		                PLA             ; end setdbr macro
.395935	48		pha		                PHA             ; begin setdp macro
.395936	08		php		                PHP
.395937	c2 20		rep #$20	                REP #$20        ; set A long
.395939	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39593c	5b		tcd		                TCD
.39593d	28		plp		                PLP
.39593e	68		pla		                PLA             ; end setdp macro
.39593f	e2 20		sep #$20	                SEP #$20        ; set A short
.395941	c2 10		rep #$10	                REP #$10        ; set X long
.395943	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.395945	a2 00 00	ldx #$0000	                LDX #0
.395948	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.39594c	e8		inx		                INX
.39594d	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395950	d0 f6		bne $395948	                BNE clr_fd_loop
.395952	c2 20		rep #$20	                REP #$20        ; set A long
.395954	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395957	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.39595b	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.39595e	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395962	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395964	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395968	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39596a	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.39596e	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395971	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395973	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395975	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395978	85 20		sta $0340	                STA DOS_FD_PTR
.39597a	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.39597d	85 22		sta $0342	                STA DOS_FD_PTR+2
.39597f	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395982	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395986	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39598a	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.39598e	b0 14		bcs $3959a4	                BCS try_execute
.395990	82 7f ff	brl $395912	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395993					chk_execute
.395993	c2 20		rep #$20	                REP #$20        ; set A long
.395995	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395997	d0 0b		bne $3959a4	                BNE try_execute                         ; If so: call it
.395999	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39599b	d0 07		bne $3959a4	                BNE try_execute
.39599d	e2 20		sep #$20	                SEP #$20        ; set A short
.39599f	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.3959a1	82 6a ff	brl $39590e	                BRL IF_FAILURE
.3959a4					try_execute
.3959a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3959a6	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3959a8	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3959aa	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3959ae	82 68 ff	brl $395919	                BRL IF_SUCCESS                          ; Return success
.3959b1					IF_ALLOCFD
.3959b1	da		phx		                PHX
.3959b2	5a		phy		                PHY
.3959b3	0b		phd		                PHD
.3959b4	8b		phb		                PHB
.3959b5	08		php		                PHP
.3959b6	48		pha		                PHA             ; begin setdbr macro
.3959b7	08		php		                PHP
.3959b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3959ba	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3959bc	48		pha		                PHA
.3959bd	ab		plb		                PLB
.3959be	28		plp		                PLP
.3959bf	68		pla		                PLA             ; end setdbr macro
.3959c0	48		pha		                PHA             ; begin setdp macro
.3959c1	08		php		                PHP
.3959c2	c2 20		rep #$20	                REP #$20        ; set A long
.3959c4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959c7	5b		tcd		                TCD
.3959c8	28		plp		                PLP
.3959c9	68		pla		                PLA             ; end setdp macro
.3959ca	c2 10		rep #$10	                REP #$10        ; set X long
.3959cc	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.3959cf					chk_fd
.3959cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3959d1	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.3959d4	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.3959d6	f0 14		beq $3959ec	                BEQ found                           ; No: flag and return the found descriptor
.3959d8					next_fd
.3959d8	c2 20		rep #$20	                REP #$20        ; set A long
.3959da	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.3959db	18		clc		                CLC
.3959dc	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3959df	aa		tax		                TAX
.3959e0	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.3959e3	90 ea		bcc $3959cf	                BLT chk_fd                          ; No: check this new file descriptor
.3959e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3959e7	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.3959e9	82 22 ff	brl $39590e	                BRL IF_FAILURE
.3959ec	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.3959ee	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3959f1	c2 20		rep #$20	                REP #$20        ; set A long
.3959f3	8a		txa		                TXA
.3959f4	18		clc		                CLC
.3959f5	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3959f8	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959fa	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3959fd	69 00 00	adc #$0000	                ADC #0
.395a00	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a02	82 14 ff	brl $395919	                BRL IF_SUCCESS                      ; Return this file descriptor
.395a05					IF_FREEFD
.395a05	da		phx		                PHX
.395a06	5a		phy		                PHY
.395a07	0b		phd		                PHD
.395a08	8b		phb		                PHB
.395a09	08		php		                PHP
.395a0a	48		pha		                PHA             ; begin setdbr macro
.395a0b	08		php		                PHP
.395a0c	e2 20		sep #$20	                SEP #$20        ; set A short
.395a0e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a10	48		pha		                PHA
.395a11	ab		plb		                PLB
.395a12	28		plp		                PLP
.395a13	68		pla		                PLA             ; end setdbr macro
.395a14	48		pha		                PHA             ; begin setdp macro
.395a15	08		php		                PHP
.395a16	c2 20		rep #$20	                REP #$20        ; set A long
.395a18	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a1b	5b		tcd		                TCD
.395a1c	28		plp		                PLP
.395a1d	68		pla		                PLA             ; end setdp macro
.395a1e	e2 20		sep #$20	                SEP #$20        ; set A short
.395a20	c2 10		rep #$10	                REP #$10        ; set X long
.395a22	a9 00		lda #$00	                LDA #0
.395a24	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395a26	82 f0 fe	brl $395919	                BRL IF_SUCCESS
.395a29					DOS_SRC2DST
.395a29	da		phx		                PHX
.395a2a	5a		phy		                PHY
.395a2b	0b		phd		                PHD
.395a2c	8b		phb		                PHB
.395a2d	08		php		                PHP
.395a2e	48		pha		                PHA             ; begin setdp macro
.395a2f	08		php		                PHP
.395a30	c2 20		rep #$20	                REP #$20        ; set A long
.395a32	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a35	5b		tcd		                TCD
.395a36	28		plp		                PLP
.395a37	68		pla		                PLA             ; end setdp macro
.395a38	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a3a	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395a3d	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a3f	aa		tax		                TAX                                     ; X := source buffer address
.395a40	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395a42	a8		tay		                TAY                                     ; Y := destination buffer address
.395a43	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395a46	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395a49	28		plp		                PLP
.395a4a	ab		plb		                PLB
.395a4b	2b		pld		                PLD
.395a4c	7a		ply		                PLY
.395a4d	fa		plx		                PLX
.395a4e	6b		rtl		                RTL
.395a4f					IF_COPY
.395a4f	da		phx		                PHX
.395a50	5a		phy		                PHY
.395a51	0b		phd		                PHD
.395a52	8b		phb		                PHB
.395a53	08		php		                PHP
.395a54	48		pha		                PHA             ; begin setdbr macro
.395a55	08		php		                PHP
.395a56	e2 20		sep #$20	                SEP #$20        ; set A short
.395a58	a9 00		lda #$00	                LDA #0
.395a5a	48		pha		                PHA
.395a5b	ab		plb		                PLB
.395a5c	28		plp		                PLP
.395a5d	68		pla		                PLA             ; end setdbr macro
.395a5e	48		pha		                PHA             ; begin setdp macro
.395a5f	08		php		                PHP
.395a60	c2 20		rep #$20	                REP #$20        ; set A long
.395a62	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a65	5b		tcd		                TCD
.395a66	28		plp		                PLP
.395a67	68		pla		                PLA             ; end setdp macro
.395a68	22 b1 59 39	jsl $3959b1	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395a6c	b0 03		bcs $395a71	                BCS set_src_path
.395a6e	82 a1 fe	brl $395912	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395a71					set_src_path
.395a71	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a73	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395a76	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395a78	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a7a	c8		iny		                INY
.395a7b	c8		iny		                INY
.395a7c	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395a7e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a80					alloc_dest
.395a80	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a82	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395a84	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395a86	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395a88	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395a8a	22 b1 59 39	jsl $3959b1	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395a8e	b0 0f		bcs $395a9f	                BCS set_paths                   ; If everything is ok... start setting the paths
.395a90	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a92	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a94	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a96	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a98	22 05 5a 39	jsl $395a05	                JSL IF_FREEFD                   ; And free it
.395a9c	82 73 fe	brl $395912	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395a9f					set_paths
.395a9f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395aa1	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395aa3	85 34		sta $0354	                STA @b DOS_DST_PTR
.395aa5	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395aa7	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395aa9	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395aac	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395aae	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ab0	c8		iny		                INY
.395ab1	c8		iny		                INY
.395ab2	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395ab4	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ab6	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395ab8	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aba	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395abc	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395abe	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395ac2	b0 0f		bcs $395ad3	                BCS src_open                    ; If success, work with the openned file
.395ac4	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ac6	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ac8	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395aca	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395acc	22 05 5a 39	jsl $395a05	                JSL IF_FREEFD                   ; And free it
.395ad0	82 bd ff	brl $395a90	                BRL err_free_src_fd             ; Free the source file descriptor
.395ad3	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395ad6	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395ad8	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ada	c8		iny		                INY
.395adb	c8		iny		                INY
.395adc	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395ade	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ae0	22 29 5a 39	jsl $395a29	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395ae4	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ae6	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ae8	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395aea	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395aec	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395af0	b0 0f		bcs $395b01	                BCS read_next                   ; If sucessful, try to get the next cluster
.395af2	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395af4	85 20		sta $0340	                STA @b DOS_FD_PTR
.395af6	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395af8	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395afa	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395afe	82 c3 ff	brl $395ac4	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395b01					read_next
.395b01	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b03	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b05	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b07	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b09	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b0d	b0 19		bcs $395b28	                BCS copy2dest                   ; If successful, copy the sector
.395b0f	e2 20		sep #$20	                SEP #$20        ; set A short
.395b11	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b13	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b15	f0 32		beq $395b49	                BEQ file_copied                 ; Yes: we're done copying
.395b17					err_dest_close
.395b17	c2 20		rep #$20	                REP #$20        ; set A long
.395b19	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b1b	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b1d	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b1f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b21	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395b25	82 ca ff	brl $395af2	                BRL err_src_close               ; Close the source and throw an error
.395b28					copy2dest
.395b28	22 29 5a 39	jsl $395a29	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395b2c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395b2f	a9 00 00	lda #$0000	                LDA #0
.395b32	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b34	c8		iny		                INY
.395b35	c8		iny		                INY
.395b36	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b38	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b3a	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b3c	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b3e	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b40	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395b44	90 d1		bcc $395b17	                BCC err_dest_close              ; If error: close all files and throw the error
.395b46	82 b8 ff	brl $395b01	                BRL read_next                   ; Otherwise: repeat the loop
.395b49					file_copied
.395b49	c2 20		rep #$20	                REP #$20        ; set A long
.395b4b	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b4d	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b4f	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b51	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b53	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395b57	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b59	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b5b	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b5d	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b5f	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395b63	82 b3 fd	brl $395919	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395b66					UART_SELECT
.395b66	08		php		            PHP
.395b67	c2 20		rep #$20	                REP #$20        ; set A long
.395b69	c9 02 00	cmp #$0002	            CMP #2
.395b6c	f0 07		beq $395b75	            BEQ is_COM2
.395b6e	c2 20		rep #$20	                REP #$20        ; set A long
.395b70	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395b73	80 05		bra $395b7a	            BRA setaddr
.395b75					is_COM2
.395b75	c2 20		rep #$20	                REP #$20        ; set A long
.395b77	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395b7a	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395b7e	e2 20		sep #$20	                SEP #$20        ; set A short
.395b80	a9 af		lda #$af	            LDA #`UART1_BASE
.395b82	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395b86	28		plp		            PLP
.395b87	6b		rtl		            RTL
.395b88					UART_SETBPS
.395b88	08		php		            PHP
.395b89	0b		phd		            PHD
.395b8a	48		pha		                PHA             ; begin setdp macro
.395b8b	08		php		                PHP
.395b8c	c2 20		rep #$20	                REP #$20        ; set A long
.395b8e	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b91	5b		tcd		                TCD
.395b92	28		plp		                PLP
.395b93	68		pla		                PLA             ; end setdp macro
.395b94	c2 30		rep #$30	                REP #$30        ; set A&X long
.395b96	48		pha		            PHA
.395b97	e2 20		sep #$20	                SEP #$20        ; set A short
.395b99	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395b9c	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b9e	09 80		ora #$80	            ORA #LCR_DLB
.395ba0	97 00		sta [$0700],y	            STA [CURRUART],Y
.395ba2	c2 20		rep #$20	                REP #$20        ; set A long
.395ba4	68		pla		            PLA
.395ba5	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395ba8	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395baa	e2 20		sep #$20	                SEP #$20        ; set A short
.395bac	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395baf	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bb1	49 80		eor #$80	            EOR #LCR_DLB
.395bb3	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bb5	2b		pld		            PLD
.395bb6	28		plp		            PLP
.395bb7	6b		rtl		            RTL
.395bb8					UART_SETLCR
.395bb8	08		php		            PHP
.395bb9	0b		phd		            PHD
.395bba	48		pha		                PHA             ; begin setdp macro
.395bbb	08		php		                PHP
.395bbc	c2 20		rep #$20	                REP #$20        ; set A long
.395bbe	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bc1	5b		tcd		                TCD
.395bc2	28		plp		                PLP
.395bc3	68		pla		                PLA             ; end setdp macro
.395bc4	e2 20		sep #$20	                SEP #$20        ; set A short
.395bc6	c2 10		rep #$10	                REP #$10        ; set X long
.395bc8	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395bca	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395bcd	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bcf	2b		pld		            PLD
.395bd0	28		plp		            PLP
.395bd1	6b		rtl		            RTL
.395bd2					UART_INIT
.395bd2	08		php		            PHP
.395bd3	0b		phd		            PHD
.395bd4	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bd6	48		pha		                PHA             ; begin setdp macro
.395bd7	08		php		                PHP
.395bd8	c2 20		rep #$20	                REP #$20        ; set A long
.395bda	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bdd	5b		tcd		                TCD
.395bde	28		plp		                PLP
.395bdf	68		pla		                PLA             ; end setdp macro
.395be0	a9 01 00	lda #$0001	            LDA #UART_115200
.395be3	22 88 5b 39	jsl $395b88	            JSL UART_SETBPS
.395be7	e2 20		sep #$20	                SEP #$20        ; set A short
.395be9	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395beb	22 b8 5b 39	jsl $395bb8	            JSL UART_SETLCR
.395bef	a9 e1		lda #$e1	            LDA #%11100001
.395bf1	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395bf4	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bf6	2b		pld		            PLD
.395bf7	28		plp		            PLP
.395bf8	6b		rtl		            RTL
.395bf9					UART_HASBYT
.395bf9	08		php		            PHP
.395bfa	0b		phd		            PHD
.395bfb	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bfd	48		pha		                PHA             ; begin setdp macro
.395bfe	08		php		                PHP
.395bff	c2 20		rep #$20	                REP #$20        ; set A long
.395c01	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c04	5b		tcd		                TCD
.395c05	28		plp		                PLP
.395c06	68		pla		                PLA             ; end setdp macro
.395c07	e2 20		sep #$20	                SEP #$20        ; set A short
.395c09	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c0c	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c0e	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c10	d0 04		bne $395c16	            BNE ret_true            ; If flag is set, return true
.395c12	2b		pld		ret_false   PLD                     ; Return false
.395c13	28		plp		            PLP
.395c14	18		clc		            CLC
.395c15	6b		rtl		            RTL
.395c16	2b		pld		ret_true    PLD                     ; Return true
.395c17	28		plp		            PLP
.395c18	38		sec		            SEC
.395c19	6b		rtl		            RTL
.395c1a					UART_GETC
.395c1a	08		php		            PHP
.395c1b	0b		phd		            PHD
.395c1c	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c1e	48		pha		                PHA             ; begin setdp macro
.395c1f	08		php		                PHP
.395c20	c2 20		rep #$20	                REP #$20        ; set A long
.395c22	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c25	5b		tcd		                TCD
.395c26	28		plp		                PLP
.395c27	68		pla		                PLA             ; end setdp macro
.395c28	e2 20		sep #$20	                SEP #$20        ; set A short
.395c2a	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c2d	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395c2f	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c31	f0 fa		beq $395c2d	            BEQ wait_getc           ; If the flag is clear, wait
.395c33	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395c36	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c38	2b		pld		            PLD
.395c39	28		plp		            PLP
.395c3a	6b		rtl		            RTL
.395c3b					UART_PUTC
.395c3b	08		php		            PHP
.395c3c	0b		phd		            PHD
.395c3d	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c3f	48		pha		                PHA             ; begin setdp macro
.395c40	08		php		                PHP
.395c41	c2 20		rep #$20	                REP #$20        ; set A long
.395c43	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c46	5b		tcd		                TCD
.395c47	28		plp		                PLP
.395c48	68		pla		                PLA             ; end setdp macro
.395c49	e2 20		sep #$20	                SEP #$20        ; set A short
.395c4b	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395c4c	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395c4f	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c51	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395c53	f0 fa		beq $395c4f	            BEQ wait_putc
.395c55	68		pla		            PLA
.395c56	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395c59	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c5b	2b		pld		            PLD
.395c5c	28		plp		            PLP
.395c5d	6b		rtl		            RTL
.395c5e					UART_PUTS
.395c5e	08		php		            PHP
.395c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.395c61	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395c64	f0 07		beq $395c6d	            BEQ done
.395c66	22 3b 5c 39	jsl $395c3b	            JSL UART_PUTC
.395c6a	e8		inx		            INX
.395c6b	80 f4		bra $395c61	            BRA put_loop
.395c6d	28		plp		done        PLP
.395c6e	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395c6f					JOYSTICK_SET_NES_MODE
.395c6f	e2 20		sep #$20	                SEP #$20        ; set A short
.395c71	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c75	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395c77	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c7b	6b		rtl		          RTL
.395c7c					JOYSTICK_SET_SNES_MODE
.395c7c	e2 20		sep #$20	                SEP #$20        ; set A short
.395c7e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c82	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395c84	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395c86	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c8a	6b		rtl		          RTL
.395c8b					JOYSTICK_ENABLE_NES_SNES_PORT0
.395c8b	e2 20		sep #$20	                SEP #$20        ; set A short
.395c8d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c91	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395c93	09 01		ora #$01	          ORA #NES_SNES_EN0
.395c95	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c99	6b		rtl		          RTL
.395c9a					JOYSTICK_ENABLE_NES_SNES_PORT1
.395c9a	e2 20		sep #$20	                SEP #$20        ; set A short
.395c9c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ca0	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395ca2	09 02		ora #$02	          ORA #NES_SNES_EN1
.395ca4	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ca8	6b		rtl		          RTL
.395ca9					JOYSTICK_DISABLE_NES_SNES_PORT0
.395ca9	e2 20		sep #$20	                SEP #$20        ; set A short
.395cab	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395caf	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395cb1	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cb5	6b		rtl		          RTL
.395cb6					JOYSTICK_DISABLE_NES_SNES_PORT1
.395cb6	e2 20		sep #$20	                SEP #$20        ; set A short
.395cb8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cbc	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395cbe	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cc2	6b		rtl		          RTL
.395cc3					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395cc3	e2 20		sep #$20	                SEP #$20        ; set A short
.395cc5	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cc9	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395ccb	c9 00		cmp #$00	          CMP #$00
.395ccd	f0 14		beq $395ce3	          BEQ END_OF_JOYSTICK_POLL
.395ccf	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cd3	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395cd5	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cd9					JOYSTICK_POLLING_ISNOTOVER
.395cd9	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395cdd	29 40		and #$40	          AND #NES_SNES_DONE
.395cdf	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395ce1	d0 f6		bne $395cd9	          BNE JOYSTICK_POLLING_ISNOTOVER
.395ce3					END_OF_JOYSTICK_POLL
.395ce3	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395ce4					SDC_TEST
.395ce4	8b		phb		                PHB
.395ce5	0b		phd		                PHD
.395ce6	08		php		                PHP
.395ce7	48		pha		                PHA             ; begin setdbr macro
.395ce8	08		php		                PHP
.395ce9	e2 20		sep #$20	                SEP #$20        ; set A short
.395ceb	a9 00		lda #$00	                LDA #0
.395ced	48		pha		                PHA
.395cee	ab		plb		                PLB
.395cef	28		plp		                PLP
.395cf0	68		pla		                PLA             ; end setdbr macro
.395cf1	48		pha		                PHA             ; begin setdp macro
.395cf2	08		php		                PHP
.395cf3	c2 20		rep #$20	                REP #$20        ; set A long
.395cf5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395cf8	5b		tcd		                TCD
.395cf9	28		plp		                PLP
.395cfa	68		pla		                PLA             ; end setdp macro
.395cfb	e2 20		sep #$20	                SEP #$20        ; set A short
.395cfd	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395cff	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395d02	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395d06	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395d0a	22 4a 5d 39	jsl $395d4a	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d0e	b0 03		bcs $395d13	                BCS init_ok
.395d10	82 15 00	brl $395d28	                BRL done
.395d13	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d15	85 01		sta $0321	                STA BIOS_DEV
.395d17	22 41 45 39	jsl $394541	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d1b	b0 03		bcs $395d20	                BCS mount_ok
.395d1d	82 08 00	brl $395d28	                BRL done
.395d20	22 aa 55 39	jsl $3955aa	mount_ok        JSL IF_DIROPEN
.395d24	b0 02		bcs $395d28	                BCS all_ok
.395d26	80 00		bra $395d28	                BRA done
.395d28					all_ok
.395d28	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395d2c	28		plp		                PLP
.395d2d	2b		pld		                PLD
.395d2e	ab		plb		                PLB
.395d2f	6b		rtl		                RTL
.395d30					SDC_WAITBUSY
.395d30	08		php		                PHP
.395d31	e2 20		sep #$20	                SEP #$20        ; set A short
.395d33	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395d37	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395d39	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395d3b	f0 f6		beq $395d33	                BEQ wait_xact
.395d3d	28		plp		                PLP
.395d3e	6b		rtl		                RTL
.395d3f					SDC_RESET
.395d3f	08		php		                PHP
.395d40	e2 20		sep #$20	                SEP #$20        ; set A short
.395d42	a9 01		lda #$01	                LDA #1
.395d44	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395d48	28		plp		                PLP
.395d49	6b		rtl		                RTL
.395d4a	0b		phd		SDC_INIT        PHD
.395d4b	8b		phb		                PHB
.395d4c	08		php		                PHP
.395d4d	48		pha		                PHA             ; begin setdbr macro
.395d4e	08		php		                PHP
.395d4f	e2 20		sep #$20	                SEP #$20        ; set A short
.395d51	a9 00		lda #$00	                LDA #0
.395d53	48		pha		                PHA
.395d54	ab		plb		                PLB
.395d55	28		plp		                PLP
.395d56	68		pla		                PLA             ; end setdbr macro
.395d57	48		pha		                PHA             ; begin setdp macro
.395d58	08		php		                PHP
.395d59	c2 20		rep #$20	                REP #$20        ; set A long
.395d5b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d5e	5b		tcd		                TCD
.395d5f	28		plp		                PLP
.395d60	68		pla		                PLA             ; end setdp macro
.395d61	e2 20		sep #$20	                SEP #$20        ; set A short
.395d63	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395d65	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395d69	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d6b	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d6f	22 30 5d 39	jsl $395d30	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395d73	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d77	d0 07		bne $395d80	                BNE ret_error                       ; Is there one? Process the error
.395d79	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395d7b	28		plp		                PLP
.395d7c	ab		plb		                PLB
.395d7d	2b		pld		                PLD
.395d7e	38		sec		                SEC
.395d7f	6b		rtl		                RTL
.395d80	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d83	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395d85	85 00		sta $0320	                STA BIOS_STATUS
.395d87	28		plp		                PLP
.395d88	ab		plb		                PLB
.395d89	2b		pld		                PLD
.395d8a	18		clc		                CLC
.395d8b	6b		rtl		                RTL
.395d8c					SDC_GETBLOCK
.395d8c	0b		phd		                PHD
.395d8d	8b		phb		                PHB
.395d8e	08		php		                PHP
.395d8f	48		pha		                PHA             ; begin setdbr macro
.395d90	08		php		                PHP
.395d91	e2 20		sep #$20	                SEP #$20        ; set A short
.395d93	a9 00		lda #$00	                LDA #0
.395d95	48		pha		                PHA
.395d96	ab		plb		                PLB
.395d97	28		plp		                PLP
.395d98	68		pla		                PLA             ; end setdbr macro
.395d99	48		pha		                PHA             ; begin setdp macro
.395d9a	08		php		                PHP
.395d9b	c2 20		rep #$20	                REP #$20        ; set A long
.395d9d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395da0	5b		tcd		                TCD
.395da1	28		plp		                PLP
.395da2	68		pla		                PLA             ; end setdp macro
.395da3	e2 20		sep #$20	                SEP #$20        ; set A short
.395da5	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395da9	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395dab	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395daf	a9 00		lda #$00	                LDA #0
.395db1	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395db5	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395db7	0a		asl a		                ASL A
.395db8	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395dbc	a5 03		lda $0323	                LDA BIOS_LBA+1
.395dbe	2a		rol a		                ROL A
.395dbf	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395dc3	a5 04		lda $0324	                LDA BIOS_LBA+2
.395dc5	2a		rol a		                ROL A
.395dc6	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395dca	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395dcc	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395dd0	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395dd2	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395dd6	22 30 5d 39	jsl $395d30	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395dda	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395dde	d0 36		bne $395e16	                BNE ret_error                       ; Is there one? Process the error
.395de0	e2 20		sep #$20	                SEP #$20        ; set A short
.395de2	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395de6	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395de8	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395dec	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395dee	c2 10		rep #$10	                REP #$10        ; set X long
.395df0	a0 00 00	ldy #$0000	                LDY #0
.395df3	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395df7	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395df9	c8		iny		                INY                                 ; Advance to the next byte
.395dfa	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395dfd	d0 f4		bne $395df3	                BNE loop_rd                         ; No: keep reading
.395dff	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e03	d0 11		bne $395e16	                BNE ret_error                       ; Is there one? Process the error
.395e05	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e07	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e0b	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e0d	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e11	28		plp		                PLP
.395e12	ab		plb		                PLB
.395e13	2b		pld		                PLD
.395e14	38		sec		                SEC
.395e15	6b		rtl		                RTL
.395e16	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e19	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e1b	85 00		sta $0320	                STA BIOS_STATUS
.395e1d	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e21	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e23	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e27	28		plp		                PLP
.395e28	ab		plb		                PLB
.395e29	2b		pld		                PLD
.395e2a	18		clc		                CLC
.395e2b	6b		rtl		                RTL
.395e2c					SDC_PUTBLOCK
.395e2c	0b		phd		                PHD
.395e2d	8b		phb		                PHB
.395e2e	08		php		                PHP
.395e2f	48		pha		                PHA             ; begin setdbr macro
.395e30	08		php		                PHP
.395e31	e2 20		sep #$20	                SEP #$20        ; set A short
.395e33	a9 00		lda #$00	                LDA #0
.395e35	48		pha		                PHA
.395e36	ab		plb		                PLB
.395e37	28		plp		                PLP
.395e38	68		pla		                PLA             ; end setdbr macro
.395e39	48		pha		                PHA             ; begin setdp macro
.395e3a	08		php		                PHP
.395e3b	c2 20		rep #$20	                REP #$20        ; set A long
.395e3d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e40	5b		tcd		                TCD
.395e41	28		plp		                PLP
.395e42	68		pla		                PLA             ; end setdp macro
.395e43	e2 20		sep #$20	                SEP #$20        ; set A short
.395e45	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e49	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e4b	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e4f	c2 10		rep #$10	                REP #$10        ; set X long
.395e51	a0 00 00	ldy #$0000	                LDY #0
.395e54	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395e56	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395e5a	c8		iny		                INY                                 ; Advance to the next byte
.395e5b	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e5e	d0 f4		bne $395e54	                BNE loop_wr                         ; No: keep writing
.395e60	a9 00		lda #$00	                LDA #0
.395e62	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e66	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395e68	0a		asl a		                ASL A
.395e69	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e6d	a5 03		lda $0323	                LDA BIOS_LBA+1
.395e6f	2a		rol a		                ROL A
.395e70	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e74	a5 04		lda $0324	                LDA BIOS_LBA+2
.395e76	2a		rol a		                ROL A
.395e77	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e7b	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395e7d	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e81	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e83	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e87	22 30 5d 39	jsl $395d30	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e8b	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e8f	d0 11		bne $395ea2	                BNE ret_error                       ; Is there one? Process the error
.395e91	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e93	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e97	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e99	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e9d	28		plp		                PLP
.395e9e	ab		plb		                PLB
.395e9f	2b		pld		                PLD
.395ea0	38		sec		                SEC
.395ea1	6b		rtl		                RTL
.395ea2	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395ea5	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395ea7	85 00		sta $0320	                STA BIOS_STATUS
.395ea9	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ead	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395eaf	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395eb3	28		plp		                PLP
.395eb4	ab		plb		                PLB
.395eb5	2b		pld		                PLD
.395eb6	18		clc		                CLC
.395eb7	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395eb8					FDC_TEST
.395eb8	8b		phb		                    PHB
.395eb9	0b		phd		                    PHD
.395eba	08		php		                    PHP
.395ebb	48		pha		                PHA             ; begin setdbr macro
.395ebc	08		php		                PHP
.395ebd	e2 20		sep #$20	                SEP #$20        ; set A short
.395ebf	a9 00		lda #$00	                LDA #0
.395ec1	48		pha		                PHA
.395ec2	ab		plb		                PLB
.395ec3	28		plp		                PLP
.395ec4	68		pla		                PLA             ; end setdbr macro
.395ec5	48		pha		                PHA             ; begin setdp macro
.395ec6	08		php		                PHP
.395ec7	c2 20		rep #$20	                REP #$20        ; set A long
.395ec9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ecc	5b		tcd		                TCD
.395ecd	28		plp		                PLP
.395ece	68		pla		                PLA             ; end setdp macro
.395ecf	e2 20		sep #$20	                SEP #$20        ; set A short
.395ed1	a9 f0		lda #$f0	                    LDA #$F0
.395ed3	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395ed6	22 41 0b 39	jsl $390b41	                    JSL ICLRSCREEN
.395eda	22 65 09 39	jsl $390965	                    JSL ICSRHOME
.395ede	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ee0	22 ae 61 39	jsl $3961ae	                    JSL FDC_Init
.395ee4	b0 03		bcs $395ee9	                    BCS init_ok
.395ee6	82 20 00	brl $395f09	                    BRL motor_off
.395ee9	22 ad 68 39	jsl $3968ad	init_ok             JSL FDC_CHK_MEDIA
.395eed	90 03		bcc $395ef2	                    BCC no_media
.395eef	82 03 00	brl $395ef5	                    BRL is_ok1
.395ef2					no_media
.395ef2	82 14 00	brl $395f09	                    BRL motor_off
.395ef5	22 40 67 39	jsl $396740	is_ok1              JSL FDC_MOUNT
.395ef9	90 03		bcc $395efe	                    BCC mount_err
.395efb	82 03 00	brl $395f01	                    BRL is_ok2
.395efe					mount_err
.395efe	82 08 00	brl $395f09	                    BRL motor_off
.395f01	22 15 5f 39	jsl $395f15	is_ok2              JSL FDC_TEST_PUTBLOCK
.395f05	b0 02		bcs $395f09	                    BCS all_ok
.395f07	80 00		bra $395f09	                    BRA motor_off
.395f09					all_ok
.395f09	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395f0d	22 5e 62 39	jsl $39625e	                    JSL FDC_Motor_Off
.395f11	28		plp		                    PLP
.395f12	2b		pld		                    PLD
.395f13	ab		plb		                    PLB
.395f14	6b		rtl		                    RTL
.395f15					FDC_TEST_PUTBLOCK
.395f15	e2 20		sep #$20	                SEP #$20        ; set A short
.395f17	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f19	a2 00 00	ldx #$0000	                    LDX #0
.395f1c	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f20	1a		inc a		                    INC A
.395f21	e8		inx		                    INX
.395f22	e0 00 02	cpx #$0200	                    CPX #512
.395f25	d0 f5		bne $395f1c	                    BNE init_loop
.395f27	c2 20		rep #$20	                REP #$20        ; set A long
.395f29	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395f2c	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395f30	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395f33	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395f37	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395f3a	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395f3e	a9 00 00	lda #$0000	                    LDA #0
.395f41	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395f45	22 d4 66 39	jsl $3966d4	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395f49	6b		rtl		                    RTL
>395f4a	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395f52	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395f62	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395f66					FDC_Check_RQM
.395f66	0b		phd		                    PHD
.395f67	08		php		                    PHP
.395f68	48		pha		                PHA             ; begin setdp macro
.395f69	08		php		                PHP
.395f6a	c2 20		rep #$20	                REP #$20        ; set A long
.395f6c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f6f	5b		tcd		                TCD
.395f70	28		plp		                PLP
.395f71	68		pla		                PLA             ; end setdp macro
.395f72	e2 20		sep #$20	                SEP #$20        ; set A short
.395f74	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f76	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395f7a	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f7c	30 12		bmi $395f90	                    BMI time_out            ; If so: signal a time out
.395f7e	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f82	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f84	f0 f4		beq $395f7a	                    BEQ loop
.395f86	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f88	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395f8c	28		plp		                    PLP
.395f8d	2b		pld		                    PLD
.395f8e	38		sec		                    SEC
.395f8f	60		rts		                    RTS
.395f90	28		plp		time_out            PLP
.395f91	2b		pld		                    PLD
.395f92	18		clc		                    CLC
.395f93	60		rts		                    RTS
.395f94					FDC_Check_DRV0_BSY
.395f94	0b		phd		                    PHD
.395f95	08		php		                    PHP
.395f96	48		pha		                PHA             ; begin setdp macro
.395f97	08		php		                PHP
.395f98	c2 20		rep #$20	                REP #$20        ; set A long
.395f9a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f9d	5b		tcd		                TCD
.395f9e	28		plp		                PLP
.395f9f	68		pla		                PLA             ; end setdp macro
.395fa0	e2 20		sep #$20	                SEP #$20        ; set A short
.395fa2	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fa4	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395fa8	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395faa	30 12		bmi $395fbe	                    BMI time_out            ; If so: signal a time out
.395fac	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fb0	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395fb2	d0 f4		bne $395fa8	                    BNE loop
.395fb4	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fb6	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395fba	28		plp		                    PLP
.395fbb	2b		pld		                    PLD
.395fbc	38		sec		                    SEC
.395fbd	60		rts		                    RTS
.395fbe	28		plp		time_out            PLP
.395fbf	2b		pld		                    PLD
.395fc0	18		clc		                    CLC
.395fc1	60		rts		                    RTS
.395fc2					FDC_Check_CMD_BSY
.395fc2	0b		phd		                    PHD
.395fc3	08		php		                    PHP
.395fc4	48		pha		                PHA             ; begin setdp macro
.395fc5	08		php		                PHP
.395fc6	c2 20		rep #$20	                REP #$20        ; set A long
.395fc8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fcb	5b		tcd		                TCD
.395fcc	28		plp		                PLP
.395fcd	68		pla		                PLA             ; end setdp macro
.395fce	e2 20		sep #$20	                SEP #$20        ; set A short
.395fd0	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fd2	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395fd6	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fd8	30 12		bmi $395fec	                    BMI time_out            ; If so: signal a time out
.395fda	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fde	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395fe0	d0 f4		bne $395fd6	                    BNE loop
.395fe2	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fe4	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.395fe8	28		plp		                    PLP
.395fe9	2b		pld		                    PLD
.395fea	38		sec		                    SEC
.395feb	60		rts		                    RTS
.395fec	28		plp		time_out            PLP
.395fed	2b		pld		                    PLD
.395fee	18		clc		                    CLC
.395fef	60		rts		                    RTS
.395ff0					FDC_Can_Read_Data
.395ff0	0b		phd		                    PHD
.395ff1	08		php		                    PHP
.395ff2	48		pha		                PHA             ; begin setdp macro
.395ff3	08		php		                PHP
.395ff4	c2 20		rep #$20	                REP #$20        ; set A long
.395ff6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ff9	5b		tcd		                TCD
.395ffa	28		plp		                PLP
.395ffb	68		pla		                PLA             ; end setdp macro
.395ffc	e2 20		sep #$20	                SEP #$20        ; set A short
.395ffe	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396000	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.396004	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396006	30 14		bmi $39601c	                    BMI time_out            ; If so: signal a time out
.396008	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39600c	29 40		and #$40	                    AND #FDC_MSR_DIO
.39600e	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.396010	d0 f2		bne $396004	                    BNE loop
.396012	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396014	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.396018	28		plp		                    PLP
.396019	2b		pld		                    PLD
.39601a	38		sec		                    SEC
.39601b	60		rts		                    RTS
.39601c	28		plp		time_out            PLP
.39601d	2b		pld		                    PLD
.39601e	18		clc		                    CLC
.39601f	60		rts		                    RTS
.396020					FDC_CAN_WRITE
.396020	0b		phd		                    PHD
.396021	08		php		                    PHP
.396022	48		pha		                PHA             ; begin setdp macro
.396023	08		php		                PHP
.396024	c2 20		rep #$20	                REP #$20        ; set A long
.396026	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396029	5b		tcd		                TCD
.39602a	28		plp		                PLP
.39602b	68		pla		                PLA             ; end setdp macro
.39602c	e2 20		sep #$20	                SEP #$20        ; set A short
.39602e	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396030	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.396034	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396036	30 14		bmi $39604c	                    BMI time_out            ; If so: signal a time out
.396038	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39603c	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39603e	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396040	d0 f2		bne $396034	                    BNE loop
.396042	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396044	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.396048	28		plp		                    PLP
.396049	2b		pld		                    PLD
.39604a	38		sec		                    SEC
.39604b	60		rts		                    RTS
.39604c	28		plp		time_out            PLP
.39604d	2b		pld		                    PLD
.39604e	18		clc		                    CLC
.39604f	60		rts		                    RTS
.396050					FDC_DELAY_10MS
.396050	da		phx		                    PHX
.396051	08		php		                    PHP
.396052	c2 10		rep #$10	                REP #$10        ; set X long
.396054	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.396057	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.396058	ca		dex		                    DEX
.396059	e0 00 00	cpx #$0000	                    CPX #0
.39605c	d0 f9		bne $396057	                    BNE loop
.39605e	28		plp		                    PLP
.39605f	fa		plx		                    PLX
.396060	6b		rtl		                    RTL
.396061					FDC_COMMAND
.396061	da		phx		                    PHX
.396062	8b		phb		                    PHB
.396063	0b		phd		                    PHD
.396064	08		php		                    PHP
.396065	48		pha		                PHA             ; begin setdbr macro
.396066	08		php		                PHP
.396067	e2 20		sep #$20	                SEP #$20        ; set A short
.396069	a9 00		lda #$00	                LDA #0
.39606b	48		pha		                PHA
.39606c	ab		plb		                PLB
.39606d	28		plp		                PLP
.39606e	68		pla		                PLA             ; end setdbr macro
.39606f	48		pha		                PHA             ; begin setdp macro
.396070	08		php		                PHP
.396071	c2 20		rep #$20	                REP #$20        ; set A long
.396073	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396076	5b		tcd		                TCD
.396077	28		plp		                PLP
.396078	68		pla		                PLA             ; end setdp macro
.396079	22 50 60 39	jsl $396050	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.39607d	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39607f	a2 00		ldx #$00	                    LDX #0
.396081	a9 00		lda #$00	                    LDA #0
.396083	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.396086	e8		inx		                    INX
.396087	e0 10		cpx #$10	                    CPX #16
.396089	d0 f8		bne $396083	                    BNE clr_results
.39608b	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.39608f	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396091	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396093	f0 04		beq $396099	                    BEQ start_send                          ; If so, start sending
.396095	22 ae 61 39	jsl $3961ae	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.396099					start_send
.396099	e2 10		sep #$10	                SEP #$10        ; set X short
.39609b	a2 00		ldx #$00	                    LDX #0
.39609d	20 66 5f	jsr $395f66	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3960a0	b0 03		bcs $3960a5	                    BCS send_param
.3960a2	82 5e 00	brl $396103	                    BRL time_out                            ; If there was a timeout, flag the time out
.3960a5	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3960a8	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3960ac	22 50 60 39	jsl $396050	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.3960b0	e8		inx		                    INX                                     ; Advance to the next byte
.3960b1	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.3960b4	d0 e7		bne $39609d	                    BNE send_loop                           ; Keep sending until we've sent them all
.3960b6	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.3960b9	d0 03		bne $3960be	                    BNE chk_data_dir
.3960bb	82 80 00	brl $39613e	                    BRL result_phase                        ; If 0: we just want a result
.3960be	10 3c		bpl $3960fc	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.3960c0					wr_data
.3960c0	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960c2	30 03		bmi $3960c7	                    BMI wr_chk_rqm
.3960c4	82 3c 00	brl $396103	                    BRL time_out                            ; If not, raise an error
.3960c7	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.3960cb	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3960cd	f0 f1		beq $3960c0	                    BEQ wr_data_rdy
.3960cf	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.3960d1	d0 03		bne $3960d6	                    BNE wr_data_phase                       ; If so: transfer the data
.3960d3	82 68 00	brl $39613e	                    BRL result_phase                          ; If not: it's an error
.3960d6					wr_data_phase
.3960d6	c2 10		rep #$10	                REP #$10        ; set X long
.3960d8	a0 00 00	ldy #$0000	                    LDY #0
.3960db	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3960dd	30 03		bmi $3960e2	                    BMI wr_chk_nondma
.3960df	82 21 00	brl $396103	                    BRL time_out                            ; If not, raise an error
.3960e2	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3960e6	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3960e8	f0 54		beq $39613e	                    BEQ result_phase                        ; If not: break out to result phase
.3960ea	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.3960ec	f0 ed		beq $3960db	                    BEQ wr_data_loop                        ; No: keep waiting
.3960ee	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.3960f0	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.3960f4	c8		iny		                    INY                                     ; Move to the next position
.3960f5	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3960f8	d0 e1		bne $3960db	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.3960fa	80 42		bra $39613e	                    BRA result_phase                        ; ready for the result phase
.3960fc	20 f0 5f	jsr $395ff0	rd_data             JSR FDC_Can_Read_Data
.3960ff	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396101	30 07		bmi $39610a	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.396103					time_out
.396103	e2 20		sep #$20	                SEP #$20        ; set A short
.396105	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396107	82 9c 00	brl $3961a6	                    BRL pass_error
.39610a	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.39610e	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396110	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396112	d0 eb		bne $3960ff	                    BNE rd_data_rdy
.396114	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396118	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39611a	d0 03		bne $39611f	                    BNE rd_data_phase                       ; If so: transfer the data
.39611c	82 83 00	brl $3961a2	                    BRL error                               ; If not: it's an error
.39611f					rd_data_phase
.39611f	c2 10		rep #$10	                REP #$10        ; set X long
.396121	a0 00 00	ldy #$0000	                    LDY #0
.396124	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396126	10 db		bpl $396103	                    BPL time_out                            ; If not: throw a timeout error
.396128	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.39612c	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39612e	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396130	d0 f2		bne $396124	                    BNE rd_data_loop
.396132	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.396136	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396138	c8		iny		                    INY                                     ; Move to the next position
.396139	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39613c	d0 e6		bne $396124	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.39613e	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.396141	f0 34		beq $396177	                    BEQ chk_busy                            ; Then we're done
.396143	e2 10		sep #$10	                SEP #$10        ; set X short
.396145	a2 00		ldx #$00	                    LDX #0
.396147	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.396149	22 00 41 39	jsl $394100	                    JSL ISETTIMEOUT
.39614d	20 f0 5f	jsr $395ff0	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.396150	90 b1		bcc $396103	                    BCC time_out                            ; If there was a time out, raise an error
.396152	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396156	20 f0 5f	jsr $395ff0	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396159	90 a8		bcc $396103	                    BCC time_out                            ; If there was a time out, raise an error
.39615b	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39615f	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.396162	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM
.396165	90 9c		bcc $396103	                    BCC time_out                            ; If there was a time out, flag the error
.396167	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.39616b	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39616d	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39616f	d0 06		bne $396177	                    BNE chk_busy
.396171	e8		inx		                    INX                                     ; Move to the next result positions
.396172	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.396175	d0 e4		bne $39615b	                    BNE read_result                         ; And keep looping until we've read all
.396177					chk_busy
.396177	c2 10		rep #$10	                REP #$10        ; set X long
.396179	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.39617c	22 16 16 39	jsl $391616	                    JSL ILOOP_MS
.396180	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396184	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396186	f0 12		beq $39619a	                    BEQ done                                ; If not set: we're done
.396188	20 f0 5f	jsr $395ff0	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39618b	b0 03		bcs $396190	                    BCS get_result_byte
.39618d	82 73 ff	brl $396103	                    BRL time_out                            ; If there was a time out, flag the error
.396190	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396194	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396197	e8		inx		                    INX
.396198	80 dd		bra $396177	                    BRA chk_busy                            ; And keep checking
.39619a					done
.39619a	64 20		stz $0320	                    STZ BIOS_STATUS
.39619c	28		plp		                    PLP
.39619d	2b		pld		                    PLD
.39619e	ab		plb		                    PLB
.39619f	fa		plx		                    PLX
.3961a0	38		sec		                    SEC
.3961a1	6b		rtl		                    RTL
.3961a2					error
.3961a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3961a4	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.3961a6	85 20		sta $0320	pass_error          STA BIOS_STATUS
.3961a8	28		plp		                    PLP
.3961a9	2b		pld		                    PLD
.3961aa	ab		plb		                    PLB
.3961ab	fa		plx		                    PLX
.3961ac	18		clc		                    CLC
.3961ad	6b		rtl		                    RTL
.3961ae					FDC_Init
.3961ae	08		php		                    PHP
.3961af	c2 10		rep #$10	                REP #$10        ; set X long
.3961b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3961b3	a9 00		lda #$00	                    LDA #0
.3961b5	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961b9	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3961bc	a0 00 00	ldy #$0000	                    LDY #0
.3961bf	22 23 16 39	jsl $391623	                    JSL IDELAY
.3961c3	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3961c5	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961c9	ea		nop		                    NOP
.3961ca	ea		nop		                    NOP
.3961cb	ea		nop		                    NOP
.3961cc	ea		nop		                    NOP
.3961cd	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.3961cf	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.3961d3	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3961d5	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.3961d9	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3961dc	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3961df	22 23 16 39	jsl $391623	                    JSL IDELAY
.3961e3	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.3961e7	90 25		bcc $39620e	                    BCC pass_failure
.3961e9	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.3961ed	90 1f		bcc $39620e	                    BCC pass_failure
.3961ef	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.3961f3	90 19		bcc $39620e	                    BCC pass_failure
.3961f5	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.3961f9	90 13		bcc $39620e	                    BCC pass_failure
.3961fb	22 80 63 39	jsl $396380	                    JSL FDC_Configure_Command
.3961ff	90 0d		bcc $39620e	                    BCC pass_failure
.396201	22 27 63 39	jsl $396327	                    JSL FDC_Specify_Command
.396205	90 07		bcc $39620e	                    BCC pass_failure
.396207	22 2a 62 39	jsl $39622a	                    JSL FDC_Motor_On
.39620b	28		plp		                    PLP
.39620c	38		sec		                    SEC
.39620d	6b		rtl		                    RTL
.39620e	28		plp		pass_failure        PLP
.39620f	18		clc		                    CLC
.396210	6b		rtl		                    RTL
.396211					FDC_MOTOR_NEEDED
.396211	08		php		                    PHP
.396212	c2 20		rep #$20	                REP #$20        ; set A long
.396214	78		sei		                    SEI                         ; Turn off interrupts
.396215	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396218	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39621c	e2 20		sep #$20	                SEP #$20        ; set A short
.39621e	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396222	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.396224	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396228	28		plp		                    PLP
.396229	6b		rtl		                    RTL
.39622a					FDC_Motor_On
.39622a	08		php		                    PHP
.39622b	22 11 62 39	jsl $396211	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.39622f	e2 20		sep #$20	                SEP #$20        ; set A short
.396231	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.396235	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.396237	d0 1f		bne $396258	                    BNE done                    ; If so: skip
.396239	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.39623b	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.39623f	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.396242	90 17		bcc $39625b	                    BCC time_out
.396244	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396247	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39624a	22 23 16 39	jsl $391623	                    JSL IDELAY
.39624e	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.396252	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.396254	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396258	28		plp		done                PLP
.396259	38		sec		                    SEC
.39625a	6b		rtl		                    RTL
.39625b	28		plp		time_out            PLP                         ; Return a timeout error
.39625c	18		clc		                    CLC
.39625d	6b		rtl		                    RTL
.39625e					FDC_Motor_Off
.39625e	08		php		                    PHP
.39625f	e2 20		sep #$20	                SEP #$20        ; set A short
.396261	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.396263	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.396267	c2 20		rep #$20	                REP #$20        ; set A long
.396269	78		sei		                    SEI                         ; Turn off interrupts
.39626a	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.39626d	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396271	e2 20		sep #$20	                SEP #$20        ; set A short
.396273	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396277	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396279	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.39627d	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.396281	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.396283	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396287	28		plp		                    PLP
.396288	6b		rtl		                    RTL
.396289					FDC_Recalibrate_Command
.396289	0b		phd		                    PHD
.39628a	08		php		                    PHP
.39628b	48		pha		                PHA             ; begin setdp macro
.39628c	08		php		                PHP
.39628d	c2 20		rep #$20	                REP #$20        ; set A long
.39628f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396292	5b		tcd		                TCD
.396293	28		plp		                PLP
.396294	68		pla		                PLA             ; end setdp macro
.396295	22 11 62 39	jsl $396211	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396299	e2 20		sep #$20	                SEP #$20        ; set A short
.39629b	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.39629d	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962a0	a5 00		lda $0300	                    LDA FDC_DRIVE
.3962a2	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3962a5	a9 02		lda #$02	                    LDA #2
.3962a7	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.3962aa	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.3962ad	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.3962b0	22 61 60 39	jsl $396061	                    JSL FDC_COMMAND             ; Issue the command
.3962b4	90 04		bcc $3962ba	                    BCC pass_failure            ; If failure, pass the failure up
.3962b6	28		plp		                    PLP
.3962b7	2b		pld		                    PLD
.3962b8	38		sec		                    SEC
.3962b9	6b		rtl		                    RTL
.3962ba	28		plp		pass_failure        PLP
.3962bb	2b		pld		                    PLD
.3962bc	18		clc		                    CLC
.3962bd	6b		rtl		                    RTL
.3962be					FDC_Sense_Int_Status
.3962be	8b		phb		                    PHB
.3962bf	0b		phd		                    PHD
.3962c0	08		php		                    PHP
.3962c1	48		pha		                PHA             ; begin setdbr macro
.3962c2	08		php		                PHP
.3962c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3962c5	a9 00		lda #$00	                LDA #0
.3962c7	48		pha		                PHA
.3962c8	ab		plb		                PLB
.3962c9	28		plp		                PLP
.3962ca	68		pla		                PLA             ; end setdbr macro
.3962cb	48		pha		                PHA             ; begin setdp macro
.3962cc	08		php		                PHP
.3962cd	c2 20		rep #$20	                REP #$20        ; set A long
.3962cf	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962d2	5b		tcd		                TCD
.3962d3	28		plp		                PLP
.3962d4	68		pla		                PLA             ; end setdp macro
.3962d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3962d7	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3962da	22 16 16 39	jsl $391616	                    JSL ILOOP_MS
.3962de	e2 20		sep #$20	                SEP #$20        ; set A short
.3962e0	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3962e2	a9 ff		lda #$ff	                    LDA #$FF
.3962e4	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3962e6	20 c2 5f	jsr $395fc2	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3962e9	90 30		bcc $39631b	                    BCC time_out                        ; If there was a time out, raise an error
.3962eb	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3962ee	90 2b		bcc $39631b	                    BCC time_out                        ; If there was a time out, raise an error
.3962f0	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3962f2	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962f6	20 f0 5f	jsr $395ff0	                    JSR FDC_Can_Read_Data
.3962f9	90 20		bcc $39631b	                    BCC time_out                        ; If there was a time out, raise an error
.3962fb	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3962fe	90 1b		bcc $39631b	                    BCC time_out                        ; If there was a time out, raise an error
.396300	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396304	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396306	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396309	90 10		bcc $39631b	                    BCC time_out                        ; If there was a time out, raise an error
.39630b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39630f	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.396311	e2 20		sep #$20	                SEP #$20        ; set A short
.396313	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396316	28		plp		                    PLP
.396317	2b		pld		                    PLD
.396318	ab		plb		                    PLB
.396319	38		sec		                    SEC
.39631a	6b		rtl		                    RTL
.39631b					time_out
.39631b	e2 20		sep #$20	                SEP #$20        ; set A short
.39631d	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.39631f	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396322	28		plp		                    PLP
.396323	2b		pld		                    PLD
.396324	ab		plb		                    PLB
.396325	18		clc		                    CLC
.396326	6b		rtl		                    RTL
.396327					FDC_Specify_Command
.396327	8b		phb		                    PHB
.396328	0b		phd		                    PHD
.396329	08		php		                    PHP
.39632a	48		pha		                PHA             ; begin setdbr macro
.39632b	08		php		                PHP
.39632c	e2 20		sep #$20	                SEP #$20        ; set A short
.39632e	a9 00		lda #$00	                LDA #0
.396330	48		pha		                PHA
.396331	ab		plb		                PLB
.396332	28		plp		                PLP
.396333	68		pla		                PLA             ; end setdbr macro
.396334	48		pha		                PHA             ; begin setdp macro
.396335	08		php		                PHP
.396336	c2 20		rep #$20	                REP #$20        ; set A long
.396338	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39633b	5b		tcd		                TCD
.39633c	28		plp		                PLP
.39633d	68		pla		                PLA             ; end setdp macro
.39633e	c2 30		rep #$30	                REP #$30        ; set A&X long
.396340	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396343	22 16 16 39	jsl $391616	                    JSL ILOOP_MS
.396347	e2 20		sep #$20	                SEP #$20        ; set A short
.396349	20 c2 5f	jsr $395fc2	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39634c	90 26		bcc $396374	                    BCC time_out            ; If there was a time out, raise an error
.39634e	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396351	90 21		bcc $396374	                    BCC time_out            ; If there was a time out, raise an error
.396353	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.396355	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396359	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39635c	90 16		bcc $396374	                    BCC time_out            ; If there was a time out, raise an error
.39635e	a9 cf		lda #$cf	                    LDA #$CF
.396360	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396364	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396367	90 0b		bcc $396374	                    BCC time_out            ; If there was a time out, raise an error
.396369	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.39636b	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39636f	28		plp		                    PLP
.396370	2b		pld		                    PLD
.396371	ab		plb		                    PLB
.396372	38		sec		                    SEC
.396373	6b		rtl		                    RTL
.396374					time_out
.396374	e2 20		sep #$20	                SEP #$20        ; set A short
.396376	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396378	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39637b	28		plp		                    PLP
.39637c	2b		pld		                    PLD
.39637d	ab		plb		                    PLB
.39637e	18		clc		                    CLC
.39637f	6b		rtl		                    RTL
.396380					FDC_Configure_Command
.396380	8b		phb		                    PHB
.396381	0b		phd		                    PHD
.396382	08		php		                    PHP
.396383	48		pha		                PHA             ; begin setdbr macro
.396384	08		php		                PHP
.396385	e2 20		sep #$20	                SEP #$20        ; set A short
.396387	a9 00		lda #$00	                LDA #0
.396389	48		pha		                PHA
.39638a	ab		plb		                PLB
.39638b	28		plp		                PLP
.39638c	68		pla		                PLA             ; end setdbr macro
.39638d	48		pha		                PHA             ; begin setdp macro
.39638e	08		php		                PHP
.39638f	c2 20		rep #$20	                REP #$20        ; set A long
.396391	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396394	5b		tcd		                TCD
.396395	28		plp		                PLP
.396396	68		pla		                PLA             ; end setdp macro
.396397	c2 30		rep #$30	                REP #$30        ; set A&X long
.396399	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39639c	22 16 16 39	jsl $391616	                    JSL ILOOP_MS
.3963a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3963a2	20 c2 5f	jsr $395fc2	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963a5	90 36		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963a7	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963aa	90 31		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963ac	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.3963ae	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963b2	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963b5	90 26		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963b7	a9 00		lda #$00	                    LDA #$00
.3963b9	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963bd	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963c0	90 1b		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963c2	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.3963c4	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963c8	20 66 5f	jsr $395f66	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963cb	90 10		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963cd	a9 00		lda #$00	                    LDA #$00
.3963cf	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963d3	20 c2 5f	jsr $395fc2	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963d6	90 05		bcc $3963dd	                    BCC time_out            ; If there was a time out, raise an error
.3963d8	28		plp		                    PLP
.3963d9	2b		pld		                    PLD
.3963da	ab		plb		                    PLB
.3963db	38		sec		                    SEC
.3963dc	6b		rtl		                    RTL
.3963dd					time_out
.3963dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3963df	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963e1	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963e4	28		plp		                    PLP
.3963e5	2b		pld		                    PLD
.3963e6	ab		plb		                    PLB
.3963e7	18		clc		                    CLC
.3963e8	6b		rtl		                    RTL
.3963e9					FDC_Read_ID_Command
.3963e9	8b		phb		                    PHB
.3963ea	0b		phd		                    PHD
.3963eb	08		php		                    PHP
.3963ec	48		pha		                PHA             ; begin setdbr macro
.3963ed	08		php		                PHP
.3963ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3963f0	a9 00		lda #$00	                LDA #0
.3963f2	48		pha		                PHA
.3963f3	ab		plb		                PLB
.3963f4	28		plp		                PLP
.3963f5	68		pla		                PLA             ; end setdbr macro
.3963f6	48		pha		                PHA             ; begin setdp macro
.3963f7	08		php		                PHP
.3963f8	c2 20		rep #$20	                REP #$20        ; set A long
.3963fa	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963fd	5b		tcd		                TCD
.3963fe	28		plp		                PLP
.3963ff	68		pla		                PLA             ; end setdp macro
.396400	e2 20		sep #$20	                SEP #$20        ; set A short
.396402	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396404	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396407	a9 01		lda #$01	                    LDA #1
.396409	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39640c	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39640f	a9 07		lda #$07	                    LDA #7
.396411	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396414	22 61 60 39	jsl $396061	                    JSL FDC_COMMAND                     ; Issue the command
.396418	90 27		bcc $396441	                    BCC pass_failure
.39641a	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.39641d	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39641f	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396422	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.396424	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396427	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396429	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39642c	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.39642e	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396431	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.396433	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396436	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396438	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39643b	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.39643d	28		plp		                    PLP
.39643e	2b		pld		                    PLD
.39643f	ab		plb		                    PLB
.396440	6b		rtl		                    RTL
.396441	28		plp		pass_failure        PLP
.396442	2b		pld		                    PLD
.396443	ab		plb		                    PLB
.396444	18		clc		                    CLC
.396445	6b		rtl		                    RTL
.396446					FDC_DumpReg_Command
.396446	0b		phd		                    PHD
.396447	08		php		                    PHP
.396448	e2 20		sep #$20	                SEP #$20        ; set A short
.39644a	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.39644c	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39644f	a9 01		lda #$01	                    LDA #1
.396451	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396454	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396457	a9 0a		lda #$0a	                    LDA #10
.396459	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.39645c	22 61 60 39	jsl $396061	                    JSL FDC_COMMAND                     ; Issue the command
.396460	90 03		bcc $396465	                    BCC pass_failure
.396462	28		plp		                    PLP
.396463	2b		pld		                    PLD
.396464	6b		rtl		                    RTL
.396465	28		plp		pass_failure        PLP
.396466	2b		pld		                    PLD
.396467	18		clc		                    CLC
.396468	6b		rtl		                    RTL
.396469					FDC_Seek_Track
.396469	8b		phb		                    PHB
.39646a	0b		phd		                    PHD
.39646b	08		php		                    PHP
.39646c	48		pha		                PHA             ; begin setdbr macro
.39646d	08		php		                PHP
.39646e	e2 20		sep #$20	                SEP #$20        ; set A short
.396470	a9 00		lda #$00	                LDA #0
.396472	48		pha		                PHA
.396473	ab		plb		                PLB
.396474	28		plp		                PLP
.396475	68		pla		                PLA             ; end setdbr macro
.396476	48		pha		                PHA             ; begin setdp macro
.396477	08		php		                PHP
.396478	c2 20		rep #$20	                REP #$20        ; set A long
.39647a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39647d	5b		tcd		                TCD
.39647e	28		plp		                PLP
.39647f	68		pla		                PLA             ; end setdp macro
.396480	22 11 62 39	jsl $396211	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396484	e2 20		sep #$20	                SEP #$20        ; set A short
.396486	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396488	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39648b	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39648d	29 01		and #$01	                    AND #$01
.39648f	0a		asl a		                    ASL A
.396490	0a		asl a		                    ASL A
.396491	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396493	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396496	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396498	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39649b	a9 03		lda #$03	                    LDA #3
.39649d	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.3964a0	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964a3	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.3964a6	22 61 60 39	jsl $396061	                    JSL FDC_COMMAND                     ; Issue the command
.3964aa	90 05		bcc $3964b1	                    BCC pass_failure
.3964ac	28		plp		                    PLP
.3964ad	2b		pld		                    PLD
.3964ae	ab		plb		                    PLB
.3964af	38		sec		                    SEC
.3964b0	6b		rtl		                    RTL
.3964b1	28		plp		pass_failure        PLP
.3964b2	2b		pld		                    PLD
.3964b3	ab		plb		                    PLB
.3964b4	18		clc		                    CLC
.3964b5	6b		rtl		                    RTL
.3964b6					FDC_Read_Sector
.3964b6	8b		phb		                    PHB
.3964b7	0b		phd		                    PHD
.3964b8	08		php		                    PHP
.3964b9	48		pha		                PHA             ; begin setdbr macro
.3964ba	08		php		                PHP
.3964bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3964bd	a9 00		lda #$00	                LDA #0
.3964bf	48		pha		                PHA
.3964c0	ab		plb		                PLB
.3964c1	28		plp		                PLP
.3964c2	68		pla		                PLA             ; end setdbr macro
.3964c3	48		pha		                PHA             ; begin setdp macro
.3964c4	08		php		                PHP
.3964c5	c2 20		rep #$20	                REP #$20        ; set A long
.3964c7	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964ca	5b		tcd		                TCD
.3964cb	28		plp		                PLP
.3964cc	68		pla		                PLA             ; end setdp macro
.3964cd	22 11 62 39	jsl $396211	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3964d3	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3964d5	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3964d7	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964da	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964dc	29 01		and #$01	                    AND #$01
.3964de	0a		asl a		                    ASL A
.3964df	0a		asl a		                    ASL A
.3964e0	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964e2	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964e5	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3964e7	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964ea	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3964ec	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3964ef	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3964f1	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3964f4	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3964f6	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3964f9	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3964fb	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3964fe	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396500	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396503	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396505	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396508	a9 09		lda #$09	                    LDA #9
.39650a	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39650d	a9 01		lda #$01	                    LDA #1
.39650f	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.396512	a9 07		lda #$07	                    LDA #7
.396514	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396517	22 61 60 39	jsl $396061	command             JSL FDC_COMMAND                     ; Issue the command
.39651b	08		php		                    PHP
.39651c	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39651f	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.396521	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396524	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.396526	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396529	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.39652b	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39652e	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.396530	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396533	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396535	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396538	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39653a	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39653d	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39653f	28		plp		                    PLP
.396540	90 04		bcc $396546	                    BCC pass_failure
.396542	28		plp		done                PLP
.396543	2b		pld		                    PLD
.396544	ab		plb		                    PLB
.396545	6b		rtl		                    RTL
.396546	28		plp		pass_failure        PLP
.396547	2b		pld		                    PLD
.396548	ab		plb		                    PLB
.396549	18		clc		                    CLC
.39654a	6b		rtl		                    RTL
.39654b					FDC_Write_Sector
.39654b	8b		phb		                    PHB
.39654c	0b		phd		                    PHD
.39654d	08		php		                    PHP
.39654e	48		pha		                PHA             ; begin setdbr macro
.39654f	08		php		                PHP
.396550	e2 20		sep #$20	                SEP #$20        ; set A short
.396552	a9 00		lda #$00	                LDA #0
.396554	48		pha		                PHA
.396555	ab		plb		                PLB
.396556	28		plp		                PLP
.396557	68		pla		                PLA             ; end setdbr macro
.396558	48		pha		                PHA             ; begin setdp macro
.396559	08		php		                PHP
.39655a	c2 20		rep #$20	                REP #$20        ; set A long
.39655c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39655f	5b		tcd		                TCD
.396560	28		plp		                PLP
.396561	68		pla		                PLA             ; end setdp macro
.396562	e2 20		sep #$20	                SEP #$20        ; set A short
.396564	22 11 62 39	jsl $396211	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396568	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.39656a	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39656c	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39656f	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396571	29 01		and #$01	                    AND #$01
.396573	0a		asl a		                    ASL A
.396574	0a		asl a		                    ASL A
.396575	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396577	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39657a	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39657c	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39657f	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396581	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396584	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396586	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396589	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39658b	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39658e	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396590	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396593	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396595	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396598	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.39659a	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39659d	a9 09		lda #$09	                    LDA #9
.39659f	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3965a2	a9 ff		lda #$ff	                    LDA #$FF
.3965a4	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.3965a7	a9 07		lda #$07	                    LDA #7
.3965a9	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3965ac	22 61 60 39	jsl $396061	command             JSL FDC_COMMAND                     ; Issue the command
.3965b0	08		php		                    PHP
.3965b1	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3965b4	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3965b6	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3965b9	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.3965bb	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3965be	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.3965c0	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3965c3	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.3965c5	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3965c8	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3965ca	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3965cd	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3965cf	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3965d2	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3965d4	28		plp		check_status        PLP
.3965d5	90 04		bcc $3965db	                    BCC pass_failure
.3965d7	28		plp		done                PLP
.3965d8	2b		pld		                    PLD
.3965d9	ab		plb		                    PLB
.3965da	6b		rtl		                    RTL
.3965db	28		plp		pass_failure        PLP
.3965dc	2b		pld		                    PLD
.3965dd	ab		plb		                    PLB
.3965de	18		clc		                    CLC
.3965df	6b		rtl		                    RTL
.3965e0					DIVIDE32
.3965e0	da		phx		                    PHX
.3965e1	5a		phy		                    PHY
.3965e2	0b		phd		                    PHD
.3965e3	08		php		                    PHP
.3965e4	48		pha		                PHA             ; begin setdp macro
.3965e5	08		php		                PHP
.3965e6	c2 20		rep #$20	                REP #$20        ; set A long
.3965e8	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3965eb	5b		tcd		                TCD
.3965ec	28		plp		                PLP
.3965ed	68		pla		                PLA             ; end setdp macro
.3965ee	c2 30		rep #$30	                REP #$30        ; set A&X long
.3965f0	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3965f2	64 0a		stz $0316	                    STZ REMAINDER+2
.3965f4	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3965f7	06 00		asl $030c	loop                ASL DIVIDEND
.3965f9	26 02		rol $030e	                    ROL DIVIDEND+2
.3965fb	26 08		rol $0314	                    ROL REMAINDER
.3965fd	26 0a		rol $0316	                    ROL REMAINDER+2
.3965ff	a5 08		lda $0314	                    LDA REMAINDER
.396601	38		sec		                    SEC
.396602	e5 04		sbc $0310	                    SBC DIVISOR
.396604	a8		tay		                    TAY
.396605	a5 0a		lda $0316	                    LDA REMAINDER+2
.396607	e5 06		sbc $0312	                    SBC DIVISOR+2
.396609	90 06		bcc $396611	                    BCC skip
.39660b	85 0a		sta $0316	                    STA REMAINDER+2
.39660d	84 08		sty $0314	                    STY REMAINDER
.39660f	e6 00		inc $030c	                    INC DIVIDEND
.396611	ca		dex		skip                DEX
.396612	d0 e3		bne $3965f7	                    BNE loop
.396614	28		plp		                    PLP
.396615	2b		pld		                    PLD
.396616	7a		ply		                    PLY
.396617	fa		plx		                    PLX
.396618	60		rts		                    RTS
.396619					LBA2CHS
.396619	8b		phb		                    PHB
.39661a	0b		phd		                    PHD
.39661b	08		php		                    PHP
.39661c	48		pha		                PHA             ; begin setdbr macro
.39661d	08		php		                PHP
.39661e	e2 20		sep #$20	                SEP #$20        ; set A short
.396620	a9 00		lda #$00	                LDA #0
.396622	48		pha		                PHA
.396623	ab		plb		                PLB
.396624	28		plp		                PLP
.396625	68		pla		                PLA             ; end setdbr macro
.396626	48		pha		                PHA             ; begin setdp macro
.396627	08		php		                PHP
.396628	c2 20		rep #$20	                REP #$20        ; set A long
.39662a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39662d	5b		tcd		                TCD
.39662e	28		plp		                PLP
.39662f	68		pla		                PLA             ; end setdp macro
.396630	c2 30		rep #$30	                REP #$30        ; set A&X long
.396632	a5 22		lda $0322	                    LDA BIOS_LBA
.396634	85 0c		sta $030c	                    STA DIVIDEND
.396636	a5 24		lda $0324	                    LDA BIOS_LBA+2
.396638	85 0e		sta $030e	                    STA DIVIDEND+2
.39663a	a9 24 00	lda #$0024	                    LDA #36
.39663d	85 10		sta $0310	                    STA DIVISOR
.39663f	64 12		stz $0312	                    STZ DIVISOR+2
.396641	20 e0 65	jsr $3965e0	                    JSR DIVIDE32
.396644	e2 20		sep #$20	                SEP #$20        ; set A short
.396646	a5 0c		lda $030c	                    LDA DIVIDEND
.396648	85 02		sta $0302	                    STA FDC_CYLINDER
.39664a	c2 20		rep #$20	                REP #$20        ; set A long
.39664c	a5 14		lda $0314	                    LDA REMAINDER
.39664e	85 0c		sta $030c	                    STA DIVIDEND
.396650	a5 16		lda $0316	                    LDA REMAINDER+2
.396652	85 0e		sta $030e	                    STA DIVIDEND+2
.396654	a9 12 00	lda #$0012	                    LDA #18
.396657	85 10		sta $0310	                    STA DIVISOR
.396659	64 12		stz $0312	                    STZ DIVISOR+2
.39665b	20 e0 65	jsr $3965e0	                    JSR DIVIDE32
.39665e	e2 20		sep #$20	                SEP #$20        ; set A short
.396660	a5 0c		lda $030c	                    LDA DIVIDEND
.396662	29 01		and #$01	                    AND #$01
.396664	85 01		sta $0301	                    STA FDC_HEAD
.396666	a5 14		lda $0314	                    LDA REMAINDER
.396668	1a		inc a		                    INC A
.396669	85 03		sta $0303	                    STA FDC_SECTOR
.39666b	28		plp		                    PLP
.39666c	2b		pld		                    PLD
.39666d	ab		plb		                    PLB
.39666e	6b		rtl		                    RTL
.39666f					FDC_GETBLOCK
.39666f	8b		phb		                    PHB
.396670	0b		phd		                    PHD
.396671	08		php		                    PHP
.396672	48		pha		                PHA             ; begin setdbr macro
.396673	08		php		                PHP
.396674	e2 20		sep #$20	                SEP #$20        ; set A short
.396676	a9 00		lda #$00	                LDA #0
.396678	48		pha		                PHA
.396679	ab		plb		                PLB
.39667a	28		plp		                PLP
.39667b	68		pla		                PLA             ; end setdbr macro
.39667c	48		pha		                PHA             ; begin setdp macro
.39667d	08		php		                PHP
.39667e	c2 20		rep #$20	                REP #$20        ; set A long
.396680	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396683	5b		tcd		                TCD
.396684	28		plp		                PLP
.396685	68		pla		                PLA             ; end setdp macro
.396686	e2 20		sep #$20	                SEP #$20        ; set A short
.396688	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.39668a	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.39668d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39668f	22 19 66 39	jsl $396619	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396693	e2 20		sep #$20	                SEP #$20        ; set A short
.396695	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396697	f0 29		beq $3966c2	                    BEQ read_failure
.396699					try_read
.396699	c2 20		rep #$20	                REP #$20        ; set A long
.39669b	22 b6 64 39	jsl $3964b6	                    JSL FDC_Read_Sector         ; Read the sector
.39669f	90 14		bcc $3966b5	                    BCC retry
.3966a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a3	a5 06		lda $0306	                    LDA FDC_ST0
.3966a5	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3966a7	d0 19		bne $3966c2	                    BNE read_failure
.3966a9					ret_success
.3966a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ab	a9 00		lda #$00	                    LDA #0
.3966ad	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3966b0	28		plp		                    PLP
.3966b1	2b		pld		                    PLD
.3966b2	ab		plb		                    PLB
.3966b3	38		sec		                    SEC
.3966b4	6b		rtl		                    RTL
.3966b5					retry
.3966b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b7	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.3966ba	30 13		bmi $3966cf	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.3966bc	22 ae 61 39	jsl $3961ae	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.3966c0	80 d7		bra $396699	                    BRA try_read                ; And try the read again
.3966c2					read_failure
.3966c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c4	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.3966c6	80 04		bra $3966cc	                    BRA ret_failure
.3966c8					seek_failure
.3966c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ca	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3966cc	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.3966cf	28		plp		pass_failure        PLP
.3966d0	2b		pld		                    PLD
.3966d1	ab		plb		                    PLB
.3966d2	18		clc		                    CLC
.3966d3	6b		rtl		                    RTL
.3966d4					FDC_PUTBLOCK
.3966d4	8b		phb		                    PHB
.3966d5	0b		phd		                    PHD
.3966d6	08		php		                    PHP
.3966d7	48		pha		                PHA             ; begin setdbr macro
.3966d8	08		php		                PHP
.3966d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3966db	a9 00		lda #$00	                LDA #0
.3966dd	48		pha		                PHA
.3966de	ab		plb		                PLB
.3966df	28		plp		                PLP
.3966e0	68		pla		                PLA             ; end setdbr macro
.3966e1	48		pha		                PHA             ; begin setdp macro
.3966e2	08		php		                PHP
.3966e3	c2 20		rep #$20	                REP #$20        ; set A long
.3966e5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966e8	5b		tcd		                TCD
.3966e9	28		plp		                PLP
.3966ea	68		pla		                PLA             ; end setdp macro
.3966eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ed	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3966ef	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3966f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966f4	22 19 66 39	jsl $396619	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3966f8	22 4b 65 39	jsl $39654b	retry               JSL FDC_Write_Sector        ; Write the sector
.3966fc	b0 03		bcs $396701	                    BCS chk_st0
.3966fe	82 28 00	brl $396729	                    BRL attempt_retry
.396701					chk_st0
.396701	e2 20		sep #$20	                SEP #$20        ; set A short
.396703	a5 06		lda $0306	                    LDA FDC_ST0
.396705	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396707	d0 0c		bne $396715	                    BNE write_failure
.396709					ret_success
.396709	e2 20		sep #$20	                SEP #$20        ; set A short
.39670b	a9 00		lda #$00	                    LDA #0
.39670d	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396710	28		plp		                    PLP
.396711	2b		pld		                    PLD
.396712	ab		plb		                    PLB
.396713	38		sec		                    SEC
.396714	6b		rtl		                    RTL
.396715					write_failure
.396715	e2 20		sep #$20	                SEP #$20        ; set A short
.396717	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396719	89 02		bit #$02	                    BIT #FDC_ST1_NW
.39671b	f0 04		beq $396721	                    BEQ generic_err
.39671d	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39671f	80 17		bra $396738	                    BRA ret_failure
.396721	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.396723	d0 e4		bne $396709	                    BNE ret_success
.396725	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396727	d0 e0		bne $396709	                    BNE ret_success
.396729					attempt_retry
.396729	e2 20		sep #$20	                SEP #$20        ; set A short
.39672b	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.39672e	d0 c8		bne $3966f8	                    BNE retry                           ; And retry unless we have none left
.396730	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.396732	80 04		bra $396738	                    BRA ret_failure
.396734					seek_failure
.396734	e2 20		sep #$20	                SEP #$20        ; set A short
.396736	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396738					ret_failure
.396738	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39673b	28		plp		pass_failure        PLP
.39673c	2b		pld		                    PLD
.39673d	ab		plb		                    PLB
.39673e	18		clc		                    CLC
.39673f	6b		rtl		                    RTL
.396740					FDC_MOUNT
.396740	8b		phb		                    PHB
.396741	0b		phd		                    PHD
.396742	08		php		                    PHP
.396743	48		pha		                PHA             ; begin setdbr macro
.396744	08		php		                PHP
.396745	e2 20		sep #$20	                SEP #$20        ; set A short
.396747	a9 00		lda #$00	                LDA #0
.396749	48		pha		                PHA
.39674a	ab		plb		                PLB
.39674b	28		plp		                PLP
.39674c	68		pla		                PLA             ; end setdbr macro
.39674d	48		pha		                PHA             ; begin setdp macro
.39674e	08		php		                PHP
.39674f	c2 20		rep #$20	                REP #$20        ; set A long
.396751	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396754	5b		tcd		                TCD
.396755	28		plp		                PLP
.396756	68		pla		                PLA             ; end setdp macro
.396757	22 ae 61 39	jsl $3961ae	                    JSL FDC_INIT
.39675b	e2 20		sep #$20	                SEP #$20        ; set A short
.39675d	c2 10		rep #$10	                REP #$10        ; set X long
.39675f	a9 00		lda #$00	                    LDA #0
.396761	a2 00 00	ldx #$0000	                    LDX #0
.396764	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396768	e8		inx		                    INX
.396769	e0 00 02	cpx #$0200	                    CPX #512
.39676c	d0 f6		bne $396764	                    BNE zero_loop
.39676e	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396770	85 00		sta $0300	                    STA FDC_DRIVE
.396772	22 2a 62 39	jsl $39622a	                    JSL FDC_Motor_On                        ; Turn the motor on
.396776	c2 30		rep #$30	                REP #$30        ; set A&X long
.396778	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.39677b	85 22		sta $0322	                    STA BIOS_LBA
.39677d	85 24		sta $0324	                    STA BIOS_LBA+2
.39677f	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396782	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396784	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396787	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396789	22 6f 66 39	jsl $39666f	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.39678d	b0 03		bcs $396792	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39678f	82 d3 00	brl $396865	                    BRL pass_failure                        ; Pass the error up the chain
.396792					parse_boot
.396792	e2 20		sep #$20	                SEP #$20        ; set A short
.396794	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396796	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.39679a	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.39679c	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.3967a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3967a2	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.3967a6	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.3967aa	c2 20		rep #$20	                REP #$20        ; set A long
.3967ac	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.3967af	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.3967b3	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.3967b7	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.3967bb	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.3967bf	a9 00 00	lda #$0000	                    LDA #0
.3967c2	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.3967c6	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.3967c9	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.3967cd	18		clc		                    CLC
.3967ce	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3967d2	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3967d6	a9 00 00	lda #$0000	                    LDA #0
.3967d9	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3967dd	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3967e1	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3967e2	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3967e6	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3967ea	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3967ee	a9 00 00	lda #$0000	                    LDA #0
.3967f1	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3967f5	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3967f9	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3967fd	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3967fe	4a		lsr a		                    LSR A
.3967ff	4a		lsr a		                    LSR A
.396800	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396801	18		clc		                    CLC
.396802	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396806	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.39680a	a9 00 00	lda #$0000	                    LDA #0
.39680d	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.396811	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.396815	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396819	a9 00 00	lda #$0000	                    LDA #0
.39681c	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.396820	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.396824	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396828	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.39682b	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.39682f	e2 20		sep #$20	                SEP #$20        ; set A short
.396831	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.396835	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396837	80 14		bra $39684d	                    BRA no_volume_id                        ; No: there is no volume ID
.396839					is_extended
.396839	c2 20		rep #$20	                REP #$20        ; set A long
.39683b	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.39683f	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396843	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396847	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.39684b	80 0d		bra $39685a	                    BRA ret_success
.39684d					no_volume_id
.39684d	c2 20		rep #$20	                REP #$20        ; set A long
.39684f	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.396852	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396856	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.39685a					ret_success
.39685a	e2 20		sep #$20	                SEP #$20        ; set A short
.39685c	a9 00		lda #$00	                    LDA #0
.39685e	85 20		sta $0320	                    STA BIOS_STATUS
.396860	28		plp		                    PLP
.396861	2b		pld		                    PLD
.396862	ab		plb		                    PLB
.396863	38		sec		                    SEC
.396864	6b		rtl		                    RTL
.396865	28		plp		pass_failure        PLP
.396866	2b		pld		                    PLD
.396867	ab		plb		                    PLB
.396868	18		clc		                    CLC
.396869	6b		rtl		                    RTL
.39686a					FDC_CMDBLOCK
.39686a	8b		phb		                    PHB
.39686b	0b		phd		                    PHD
.39686c	08		php		                    PHP
.39686d	48		pha		                PHA             ; begin setdbr macro
.39686e	08		php		                PHP
.39686f	e2 20		sep #$20	                SEP #$20        ; set A short
.396871	a9 00		lda #$00	                LDA #0
.396873	48		pha		                PHA
.396874	ab		plb		                PLB
.396875	28		plp		                PLP
.396876	68		pla		                PLA             ; end setdbr macro
.396877	48		pha		                PHA             ; begin setdp macro
.396878	08		php		                PHP
.396879	c2 20		rep #$20	                REP #$20        ; set A long
.39687b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39687e	5b		tcd		                TCD
.39687f	28		plp		                PLP
.396880	68		pla		                PLA             ; end setdp macro
.396881	e2 30		sep #$30	                SEP #$30        ; set A&X short
.396883	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396885	f0 0f		beq $396896	                    BEQ motor_on
.396887	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396889	f0 11		beq $39689c	                    BEQ motor_off
.39688b	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.39688d	f0 13		beq $3968a2	                    BEQ recalibrate
.39688f	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396891	28		plp		                    PLP
.396892	2b		pld		                    PLD
.396893	ab		plb		                    PLB
.396894	38		sec		                    SEC
.396895	6b		rtl		                    RTL
.396896	22 2a 62 39	jsl $39622a	motor_on            JSL FDC_Motor_On
.39689a	80 f3		bra $39688f	                    BRA ret_success
.39689c	22 5e 62 39	jsl $39625e	motor_off           JSL FDC_Motor_Off
.3968a0	80 ed		bra $39688f	                    BRA ret_success
.3968a2	22 89 62 39	jsl $396289	recalibrate         JSL FDC_Recalibrate_Command
.3968a6	b0 e7		bcs $39688f	                    BCS ret_success
.3968a8	28		plp		pass_failure        PLP
.3968a9	2b		pld		                    PLD
.3968aa	ab		plb		                    PLB
.3968ab	18		clc		                    CLC
.3968ac	6b		rtl		                    RTL
.3968ad					FDC_CHK_MEDIA
.3968ad	0b		phd		                    PHD
.3968ae	08		php		                    PHP
.3968af	48		pha		                PHA             ; begin setdp macro
.3968b0	08		php		                PHP
.3968b1	c2 20		rep #$20	                REP #$20        ; set A long
.3968b3	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968b6	5b		tcd		                TCD
.3968b7	28		plp		                PLP
.3968b8	68		pla		                PLA             ; end setdp macro
.3968b9	22 2a 62 39	jsl $39622a	                    JSL FDC_Motor_On                ; Turn on the motor
.3968bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3968bf	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.3968c3	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.3968c5	f0 42		beq $396909	                    BEQ ret_true                    ; If not: assume the disk is present
.3968c7	a9 00		lda #$00	                    LDA #0
.3968c9	85 00		sta $0300	                    STA FDC_DRIVE
.3968cb	a9 00		lda #$00	                    LDA #0
.3968cd	85 01		sta $0301	                    STA FDC_HEAD
.3968cf	a9 50		lda #$50	                    LDA #80
.3968d1	85 02		sta $0302	                    STA FDC_CYLINDER
.3968d3	22 69 64 39	jsl $396469	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3968d7	90 34		bcc $39690d	                    BCC ret_false                   ; If fail: return false
.3968d9	c2 10		rep #$10	                REP #$10        ; set X long
.3968db	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3968de	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3968e1	22 23 16 39	jsl $391623	                    JSL IDELAY
.3968e5	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.3968e9	a5 06		lda $0306	                    LDA FDC_ST0
.3968eb	29 d0		and #$d0	                    AND #%11010000
.3968ed	d0 1e		bne $39690d	                    BNE ret_false
.3968ef	22 89 62 39	jsl $396289	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3968f3	90 18		bcc $39690d	                    BCC ret_false                   ; If fail: return false
.3968f5	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3968f8	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3968fb	22 23 16 39	jsl $391623	                    JSL IDELAY
.3968ff	22 be 62 39	jsl $3962be	                    JSL FDC_Sense_Int_Status
.396903	a5 06		lda $0306	                    LDA FDC_ST0
.396905	29 d0		and #$d0	                    AND #%11010000
.396907	d0 04		bne $39690d	                    BNE ret_false
.396909					ret_true
.396909	28		plp		                    PLP
.39690a	2b		pld		                    PLD
.39690b	38		sec		                    SEC
.39690c	6b		rtl		                    RTL
.39690d					ret_false
.39690d	28		plp		                    PLP
.39690e	2b		pld		                    PLD
.39690f	18		clc		                    CLC
.396910	6b		rtl		                    RTL
.396911					FDC_WRITEVBR
.396911	8b		phb		                    PHB
.396912	0b		phd		                    PHD
.396913	08		php		                    PHP
.396914	48		pha		                PHA             ; begin setdbr macro
.396915	08		php		                PHP
.396916	e2 20		sep #$20	                SEP #$20        ; set A short
.396918	a9 00		lda #$00	                LDA #0
.39691a	48		pha		                PHA
.39691b	ab		plb		                PLB
.39691c	28		plp		                PLP
.39691d	68		pla		                PLA             ; end setdbr macro
.39691e	48		pha		                PHA             ; begin setdp macro
.39691f	08		php		                PHP
.396920	c2 20		rep #$20	                REP #$20        ; set A long
.396922	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396925	5b		tcd		                TCD
.396926	28		plp		                PLP
.396927	68		pla		                PLA             ; end setdp macro
.396928	22 40 67 39	jsl $396740	                    JSL FDC_MOUNT               ; Mount the floppy disk
.39692c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39692e	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.396931	a2 00 00	ldx #$0000	                    LDX #0
.396934	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396938	e8		inx		                    INX
.396939	e8		inx		                    INX
.39693a	e0 00 02	cpx #$0200	                    CPX #512
.39693d	d0 f5		bne $396934	                    BNE clr_loop
.39693f	e2 20		sep #$20	                SEP #$20        ; set A short
.396941	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396944	bf a7 69 39	lda $3969a7,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396948	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.39694c	e8		inx		                    INX
.39694d	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.396950	d0 f2		bne $396944	                    BNE copy_loop
.396952	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.396955	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396958	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.39695a	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.39695e	f0 07		beq $396967	                    BEQ path_copy_done
.396960	e8		inx		                    INX
.396961	c8		iny		                    INY
.396962	c0 80 00	cpy #$0080	                    CPY #128
.396965	d0 f1		bne $396958	                    BNE path_copy_loop
.396967					path_copy_done
.396967	c2 20		rep #$20	                REP #$20        ; set A long
.396969	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.39696c	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396970	c2 20		rep #$20	                REP #$20        ; set A long
.396972	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396975	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396977	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39697a	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39697c	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.39697f	85 02		sta $0322	                    STA BIOS_LBA
.396981	85 04		sta $0324	                    STA BIOS_LBA+2
.396983	e2 20		sep #$20	                SEP #$20        ; set A short
.396985	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396987	85 01		sta $0321	                    STA BIOS_DEV
.396989	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.39698d	b0 09		bcs $396998	                    BCS ret_success
.39698f	22 5e 62 39	jsl $39625e	                    JSL FDC_Motor_Off
.396993	28		plp		                    PLP                         ; Return the failure
.396994	2b		pld		                    PLD
.396995	ab		plb		                    PLB
.396996	18		clc		                    CLC
.396997	6b		rtl		                    RTL
.396998	22 5e 62 39	jsl $39625e	ret_success         JSL FDC_Motor_Off
.39699c	e2 20		sep #$20	                SEP #$20        ; set A short
.39699e	a9 00		lda #$00	                    LDA #0
.3969a0	85 00		sta $0320	                    STA BIOS_STATUS
.3969a2	28		plp		                    PLP
.3969a3	2b		pld		                    PLD
.3969a4	ab		plb		                    PLB
.3969a5	38		sec		                    SEC
.3969a6	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3969a7					FDC_VBR_BEGIN
>3969a7	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3969aa	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3969b2	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3969b4	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3969b5	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3969b7	02				num_fat             .byte 2                 ; Number of FATs
>3969b8	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3969ba	40 0b				total_sectors       .word 2880              ; Total sectors
>3969bc	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3969bd	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3969bf	12 00				sec_per_track       .word 18                ; Sectors per track
>3969c1	02 00				num_head            .word 2                 ; Number of heads
>3969c3	00 00 00 00			ignore2             .dword 0
>3969c7	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>3969cb	00 00				ignore3             .word 0
>3969cd	29				boot_signature      .byte $29
>3969ce	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>3969d2	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3969da	20 20 20
>3969dd	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3969e5	80 40		bra $396a27	                    BRA vbr_start
>3969e7					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396a27					vbr_start
.396a27	c2 20		rep #$20	                REP #$20        ; set A long
.396a29	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a2c	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396a30	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a33	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396a37	22 26 59 39	jsl $395926	                    JSL IF_RUN              ; And try to execute the binary file
.396a3b	b0 0c		bcs $396a49	                    BCS lock                ; If it returned success... lock up... I guess?
.396a3d					error
.396a3d	e2 20		sep #$20	                SEP #$20        ; set A short
.396a3f	4b		phk		                    PHK                     ; Otherwise, print an error message
.396a40	ab		plb		                    PLB
.396a41	62 08 00	per $396a4c	                    PER message
.396a44	fa		plx		                    PLX
.396a45	22 1c 10 38	jsl $38101c	                    JSL PUTS
.396a49	ea		nop		lock                NOP                     ; And lock up
.396a4a	80 fd		bra $396a49	                    BRA lock
>396a4c	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396a54	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396a64	65 20 62 69 6e 61 72 79 2e 0d 00
.396a6f					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396a6f					IDE_TEST
.396a6f	08		php		                PHP
.396a70	c2 20		rep #$20	                REP #$20        ; set A long
.396a72	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396a75	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a79	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a7c	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a80	22 9d 6b 39	jsl $396b9d	                JSL IDE_IDENTIFY
.396a84	b0 03		bcs $396a89	                BCS id_ok
.396a86	82 ab 00	brl $396b34	                BRL done
.396a89					id_ok
.396a89	c2 10		rep #$10	                REP #$10        ; set X long
.396a8b	e2 20		sep #$20	                SEP #$20        ; set A short
.396a8d	a0 28 00	ldy #$0028	                LDY #40
.396a90	a2 36 00	ldx #$0036	                LDX #27*2
.396a93	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396a97	22 18 10 38	jsl $381018	                JSL PUTC
.396a9b	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396a9f	22 18 10 38	jsl $381018	                JSL PUTC
.396aa3	e8		inx		                INX
.396aa4	e8		inx		                INX
.396aa5	88		dey		                DEY
.396aa6	88		dey		                DEY
.396aa7	d0 ea		bne $396a93	                BNE pr_model
.396aa9	c2 10		rep #$10	                REP #$10        ; set X long
.396aab	e2 20		sep #$20	                SEP #$20        ; set A short
.396aad	a0 14 00	ldy #$0014	                LDY #20
.396ab0	a2 14 00	ldx #$0014	                LDX #10*2
.396ab3	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396ab7	22 18 10 38	jsl $381018	                JSL PUTC
.396abb	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396abf	22 18 10 38	jsl $381018	                JSL PUTC
.396ac3	e8		inx		                INX
.396ac4	e8		inx		                INX
.396ac5	88		dey		                DEY
.396ac6	88		dey		                DEY
.396ac7	d0 ea		bne $396ab3	                BNE pr_serial
.396ac9	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396acd	c2 30		rep #$30	                REP #$30        ; set A&X long
.396acf	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396ad2	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396ad6	a9 00 00	lda #$0000	                LDA #0
.396ad9	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396add	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396ae0	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396ae4	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396ae7	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396aeb	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396aee	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396af1	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396af5	e8		inx		                INX
.396af6	e8		inx		                INX
.396af7	e0 00 02	cpx #$0200	                CPX #512
.396afa	d0 f5		bne $396af1	                BNE init_loop
.396afc	22 bc 6c 39	jsl $396cbc	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396b00	b0 06		bcs $396b08	                BCS read_sect1
.396b02	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b06	80 2c		bra $396b34	                BRA done
.396b08	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396b0b	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b0f	a9 00 00	lda #$0000	                LDA #0
.396b12	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b16	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396b19	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b1d	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396b20	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b24	22 2b 6c 39	jsl $396c2b	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396b28	b0 06		bcs $396b30	                BCS all_ok
.396b2a	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b2e	80 04		bra $396b34	                BRA done
.396b30					all_ok
.396b30	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b34	28		plp		done            PLP
.396b35	6b		rtl		                RTL
.396b36					IDE_INIT
.396b36	e2 20		sep #$20	                SEP #$20        ; set A short
.396b38	20 59 6b	jsr $396b59	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396b3b	a9 00		lda #$00	              LDA #$00
.396b3d	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396b41	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396b45	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396b49	a9 01		lda #$01	              LDA #$01
.396b4b	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396b4f	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396b51	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396b55	20 77 6b	jsr $396b77	              JSR IDE_DRV_READY_NOTBUSY
.396b58	6b		rtl		              RTL
.396b59					IDE_DRIVE_BSY
.396b59	08		php		                PHP
.396b5a	e2 20		sep #$20	                SEP #$20        ; set A short
.396b5c	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396b60	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396b62	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396b64	f0 f6		beq $396b5c	                BEQ loop
.396b66	28		plp		                PLP
.396b67	60		rts		                RTS
.396b68					IDE_DRIVE_READY
.396b68	08		php		                PHP
.396b69	e2 20		sep #$20	                SEP #$20        ; set A short
.396b6b	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396b6f	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396b71	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396b73	d0 f6		bne $396b6b	                BNE loop
.396b75	28		plp		                PLP
.396b76	60		rts		                RTS
.396b77					IDE_DRV_READY_NOTBUSY
.396b77	08		php		                PHP
.396b78	e2 20		sep #$20	                SEP #$20        ; set A short
.396b7a	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396b7e	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396b80	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396b82	d0 f6		bne $396b7a	                BNE loop                            ; No: keep waiting
.396b84	28		plp		ret_success     PLP                                 ; Return success
.396b85	38		sec		                SEC
.396b86	60		rts		                RTS
.396b87	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396b8b	28		plp		                PLP                                 ; Return failure
.396b8c	18		clc		                CLC
.396b8d	60		rts		                RTS
.396b8e					IDE_NOT_DRQ
.396b8e	08		php		                PHP
.396b8f	e2 20		sep #$20	                SEP #$20        ; set A short
.396b91	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396b95	29 08		and #$08	                AND #IDE_STAT_DRQ
.396b97	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396b99	d0 f6		bne $396b91	                BNE loop                ; No: keep waiting
.396b9b	28		plp		                PLP
.396b9c	60		rts		                RTS
.396b9d					IDE_IDENTIFY
.396b9d	5a		phy		                PHY
.396b9e	8b		phb		                PHB
.396b9f	0b		phd		                PHD
.396ba0	08		php		                PHP
.396ba1	48		pha		                PHA             ; begin setdbr macro
.396ba2	08		php		                PHP
.396ba3	e2 20		sep #$20	                SEP #$20        ; set A short
.396ba5	a9 00		lda #$00	                LDA #0
.396ba7	48		pha		                PHA
.396ba8	ab		plb		                PLB
.396ba9	28		plp		                PLP
.396baa	68		pla		                PLA             ; end setdbr macro
.396bab	48		pha		                PHA             ; begin setdp macro
.396bac	08		php		                PHP
.396bad	c2 20		rep #$20	                REP #$20        ; set A long
.396baf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396bb2	5b		tcd		                TCD
.396bb3	28		plp		                PLP
.396bb4	68		pla		                PLA             ; end setdp macro
.396bb5	e2 20		sep #$20	                SEP #$20        ; set A short
.396bb7	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396bba	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396bbc	29 07		and #$07	                AND #$07
.396bbe	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396bc0	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396bc4	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396bc7	e2 20		sep #$20	                SEP #$20        ; set A short
.396bc9	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396bcb	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396bcf	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396bd3	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396bd7	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396bdb	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396bdd	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396be1	f0 29		beq $396c0c	                BEQ no_media                    ; If 0: there is no drive
.396be3	20 59 6b	jsr $396b59	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396be6	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396be9	90 2d		bcc $396c18	                BCC ret_failure                 ; If an error occurred, return it
.396beb	c2 30		rep #$30	                REP #$30        ; set A&X long
.396bed	a0 00 00	ldy #$0000	                LDY #0
.396bf0	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396bf4	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396bf6	c8		iny		                INY                             ; Move to the next position
.396bf7	c8		iny		                INY
.396bf8	c0 00 02	cpy #$0200	                CPY #512
.396bfb	d0 f3		bne $396bf0	                BNE read_loop
.396bfd					ret_success
.396bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.396bff	a9 00		lda #$00	                LDA #0
.396c01	85 00		sta $0320	                STA BIOS_STATUS
.396c03	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c06	28		plp		                PLP                             ; Return success
.396c07	2b		pld		                PLD
.396c08	ab		plb		                PLB
.396c09	7a		ply		                PLY
.396c0a	38		sec		                SEC
.396c0b	6b		rtl		                RTL
.396c0c					no_media
.396c0c	e2 20		sep #$20	                SEP #$20        ; set A short
.396c0e	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396c10	80 0a		bra $396c1c	                BRA pass_failure
.396c12					not_ata
.396c12	e2 20		sep #$20	                SEP #$20        ; set A short
.396c14	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396c16	80 04		bra $396c1c	                BRA pass_failure
.396c18					ret_failure
.396c18	e2 20		sep #$20	                SEP #$20        ; set A short
.396c1a	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c1c	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396c1e	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c22	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c25	28		plp		                PLP
.396c26	2b		pld		                PLD
.396c27	ab		plb		                PLB
.396c28	7a		ply		                PLY
.396c29	18		clc		                CLC
.396c2a	6b		rtl		                RTL
.396c2b					IDE_GETBLOCK
.396c2b	5a		phy		                PHY
.396c2c	8b		phb		                PHB
.396c2d	0b		phd		                PHD
.396c2e	08		php		                PHP
.396c2f	48		pha		                PHA             ; begin setdbr macro
.396c30	08		php		                PHP
.396c31	e2 20		sep #$20	                SEP #$20        ; set A short
.396c33	a9 00		lda #$00	                LDA #0
.396c35	48		pha		                PHA
.396c36	ab		plb		                PLB
.396c37	28		plp		                PLP
.396c38	68		pla		                PLA             ; end setdbr macro
.396c39	48		pha		                PHA             ; begin setdp macro
.396c3a	08		php		                PHP
.396c3b	c2 20		rep #$20	                REP #$20        ; set A long
.396c3d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c40	5b		tcd		                TCD
.396c41	28		plp		                PLP
.396c42	68		pla		                PLA             ; end setdp macro
.396c43	e2 20		sep #$20	                SEP #$20        ; set A short
.396c45	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c48	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c4a	29 07		and #$07	                AND #$07
.396c4c	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396c4e	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c52	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c55	e2 20		sep #$20	                SEP #$20        ; set A short
.396c57	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396c59	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c5d	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396c5f	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c63	a5 03		lda $0323	                LDA BIOS_LBA+1
.396c65	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c69	a5 04		lda $0324	                LDA BIOS_LBA+2
.396c6b	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c6f	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396c71	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396c75	ea		nop		                NOP                             ; Wait about 500ns
.396c76	ea		nop		                NOP
.396c77	ea		nop		                NOP
.396c78	ea		nop		                NOP
.396c79	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c7c	90 2b		bcc $396ca9	                BCC ret_failure                 ; If an error occurred, return it
.396c7e	e2 20		sep #$20	                SEP #$20        ; set A short
.396c80	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396c84	a0 00 00	ldy #$0000	                LDY #0
.396c87	c2 20		rep #$20	                REP #$20        ; set A long
.396c89	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c8d	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c8f	c8		iny		                INY                             ; Move to the next position
.396c90	c8		iny		                INY
.396c91	c0 00 02	cpy #$0200	                CPY #512
.396c94	d0 f3		bne $396c89	                BNE read_loop
.396c96	ea		nop		                NOP                             ; Wait about 500ns
.396c97	ea		nop		                NOP
.396c98	ea		nop		                NOP
.396c99	ea		nop		                NOP
.396c9a					ret_success
.396c9a	e2 20		sep #$20	                SEP #$20        ; set A short
.396c9c	a9 00		lda #$00	                LDA #0
.396c9e	85 00		sta $0320	                STA BIOS_STATUS
.396ca0	8d 06 03	sta $0306	                STA @w FDC_ST0
.396ca3	28		plp		                PLP                             ; Return success
.396ca4	2b		pld		                PLD
.396ca5	ab		plb		                PLB
.396ca6	7a		ply		                PLY
.396ca7	38		sec		                SEC
.396ca8	6b		rtl		                RTL
.396ca9					ret_failure
.396ca9	e2 20		sep #$20	                SEP #$20        ; set A short
.396cab	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396caf	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cb2	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cb4	85 00		sta $0320	                STA BIOS_STATUS
.396cb6	28		plp		                PLP
.396cb7	2b		pld		                PLD
.396cb8	ab		plb		                PLB
.396cb9	7a		ply		                PLY
.396cba	18		clc		                CLC
.396cbb	6b		rtl		                RTL
.396cbc					IDE_PUTBLOCK
.396cbc	5a		phy		                PHY
.396cbd	8b		phb		                PHB
.396cbe	0b		phd		                PHD
.396cbf	08		php		                PHP
.396cc0	48		pha		                PHA             ; begin setdbr macro
.396cc1	08		php		                PHP
.396cc2	e2 20		sep #$20	                SEP #$20        ; set A short
.396cc4	a9 00		lda #$00	                LDA #0
.396cc6	48		pha		                PHA
.396cc7	ab		plb		                PLB
.396cc8	28		plp		                PLP
.396cc9	68		pla		                PLA             ; end setdbr macro
.396cca	48		pha		                PHA             ; begin setdp macro
.396ccb	08		php		                PHP
.396ccc	c2 20		rep #$20	                REP #$20        ; set A long
.396cce	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396cd1	5b		tcd		                TCD
.396cd2	28		plp		                PLP
.396cd3	68		pla		                PLA             ; end setdp macro
.396cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.396cd6	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396cd9	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396cdb	29 07		and #$07	                AND #$07
.396cdd	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396cdf	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396ce3	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396ce6	e2 20		sep #$20	                SEP #$20        ; set A short
.396ce8	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396cea	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396cee	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396cf0	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396cf4	a5 03		lda $0323	                LDA BIOS_LBA+1
.396cf6	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396cfa	a5 04		lda $0324	                LDA BIOS_LBA+2
.396cfc	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d00	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396d02	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d06	ea		nop		                NOP                             ; Wait about 500ns
.396d07	ea		nop		                NOP
.396d08	ea		nop		                NOP
.396d09	ea		nop		                NOP
.396d0a	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d0d	90 33		bcc $396d42	                BCC ret_failure                 ; If an error occurred, return it
.396d0f	c2 30		rep #$30	                REP #$30        ; set A&X long
.396d11	a0 00 00	ldy #$0000	                LDY #0
.396d14	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396d16	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396d1a	c8		iny		                INY                             ; Move to the next position
.396d1b	c8		iny		                INY
.396d1c	c0 00 02	cpy #$0200	                CPY #512
.396d1f	d0 f3		bne $396d14	                BNE read_loop
.396d21	ea		nop		                NOP                             ; Wait about 500ns
.396d22	ea		nop		                NOP
.396d23	ea		nop		                NOP
.396d24	ea		nop		                NOP
.396d25	20 77 6b	jsr $396b77	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d28	90 18		bcc $396d42	                BCC ret_failure                 ; If an error occurred, return it
.396d2a	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396d2e	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396d31	d0 0f		bne $396d42	                BNE ret_failure                 ; If error: return failure
.396d33					ret_success
.396d33	e2 20		sep #$20	                SEP #$20        ; set A short
.396d35	a9 00		lda #$00	                LDA #0
.396d37	85 00		sta $0320	                STA BIOS_STATUS
.396d39	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d3c	28		plp		                PLP                             ; Return success
.396d3d	2b		pld		                PLD
.396d3e	ab		plb		                PLB
.396d3f	7a		ply		                PLY
.396d40	38		sec		                SEC
.396d41	6b		rtl		                RTL
.396d42					ret_failure
.396d42	e2 20		sep #$20	                SEP #$20        ; set A short
.396d44	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d48	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d4b	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d4d	85 00		sta $0320	                STA BIOS_STATUS
.396d4f	28		plp		                PLP
.396d50	2b		pld		                PLD
.396d51	ab		plb		                PLB
.396d52	7a		ply		                PLY
.396d53	18		clc		                CLC
.396d54	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396d55					KERNEL_DATA
>396d55	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396d5d	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396d6d	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396d7d	58 20 0d
>396d80	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396d88	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396d98	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396da8	20 20 0d
>396dab	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396db3	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396dc3	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396dd3	20 20 0d
>396dd6	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396dde	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396dee	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396dfe	20 20 0d
>396e01	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396e09	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396e19	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396e29	20 20 0d
>396e2c	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396e34	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396e44	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396e54	0d
>396e55	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396e5d	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396e6d	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396e7a	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+866 (2020-08-24)"
>396e82	6c 70 68 61 2b 38 36 36 20 28 32 30 32 30 2d 30
>396e92	38 2d 32 34 29

;******  Return to file: src\kernel.asm

>396e97	0d 00				                .text $0D,$00
.396e99					old_pc_style_stat
>396e99	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ea1	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396eb1	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396ec1	fd fd
>396ec3	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ecb	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396edb	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396eeb	fd fd
>396eed	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ef5	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396f05	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f15	fd fd
>396f17	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f1f	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f2f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f3f	fd fd
>396f41	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f49	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f59	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f69	fd fd
>396f6b	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396f6f	00 00 80 ff			                .text $00, $00, $80, $FF
>396f73	00 80 00 ff			                .text $00, $80, $00, $FF
>396f77	80 00 00 ff			                .text $80, $00, $00, $FF
>396f7b	00 80 80 ff			                .text $00, $80, $80, $FF
>396f7f	80 80 00 ff			                .text $80, $80, $00, $FF
>396f83	80 00 80 ff			                .text $80, $00, $80, $FF
>396f87	80 80 80 ff			                .text $80, $80, $80, $FF
>396f8b	00 45 ff ff			                .text $00, $45, $FF, $FF
>396f8f	13 45 8b ff			                .text $13, $45, $8B, $FF
>396f93	00 00 20 ff			                .text $00, $00, $20, $FF
>396f97	00 20 00 ff			                .text $00, $20, $00, $FF
>396f9b	20 00 00 ff			                .text $20, $00, $00, $FF
>396f9f	20 20 20 ff			                .text $20, $20, $20, $FF
>396fa3	40 40 40 ff			                .text $40, $40, $40, $FF
>396fa7	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396fab	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396faf	00 00 80 ff			                .text $00, $00, $80, $FF
>396fb3	00 80 00 ff			                .text $00, $80, $00, $FF
>396fb7	80 00 00 ff			                .text $80, $00, $00, $FF
>396fbb	00 20 20 ff			                .text $00, $20, $20, $FF
>396fbf	20 20 00 ff			                .text $20, $20, $00, $FF
>396fc3	20 00 20 ff			                .text $20, $00, $20, $FF
>396fc7	20 20 20 ff			                .text $20, $20, $20, $FF
>396fcb	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396fcf	13 45 8b ff			                .text $13, $45, $8B, $FF
>396fd3	00 00 20 ff			                .text $00, $00, $20, $FF
>396fd7	00 20 00 ff			                .text $00, $20, $00, $FF
>396fdb	40 00 00 ff			                .text $40, $00, $00, $FF
>396fdf	10 10 10 ff			                .text $10, $10, $10, $FF
>396fe3	40 40 40 ff			                .text $40, $40, $40, $FF
>396fe7	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396feb	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396ff3	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397003	00
>397004	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>39700c	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39701c	00
>39701d	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>397025	20 45 78 65 63 75 74 65 64 2e 0d 00
>397031	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397039	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397049	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397051	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397061	64 2e 2e 2e 0d 00
>397067	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39706f	20 50 72 65 73 65 6e 74 0d 00
>397079	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397081	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>397091	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3970a1	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3970a9	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3970b5	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3970bd	45 44 2e 00
>3970c1	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3970c9	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3970d6	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3970de	50 72 65 73 65 6e 74 3a 00
>3970e7	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3970ef	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3970ff	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>39710d	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>397115	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>397125	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397132	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>39713a	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>39714a	72 64 2e 00
>39714e	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>397156	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397166	49 44 45 20 64 72 69 76 65 2e 00
>397171	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397179	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397189	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397197	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>39719f	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>3971ae	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3971b6	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3971be	52 4f 52 00
>3971c2	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3971ca	38 39 41 42 43 44 45 46 00
>3971d3					.align 256
>397200	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397228	27 60 00 5c 7a 78 63 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397238	00 20 00 81 82 83 84 85
>397240	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397248	11 00 00 9d 00 1d 00 00
>397250	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	8c 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397288	26 2a 28 29 5f 2b 08 09
>397290	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397298	4f 50 7b 7d 0d 00 41 53
>3972a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3972a8	22 7e 00 5c 5a 58 43 56
>3972b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397318	0f 10 5b 5d 0d 00 01 13
>397320	04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397328	27 00 00 5c 1a 18 03 16
>397330	02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397388	37 38 39 30 2d 3d 08 09
>397390	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397398	6f 70 5b 5d 0d 00 61 73
>3973a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3973a8	27 60 00 5c 7a 78 63 76
>3973b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397418	6f 70 5b 5d 0d 00 61 73
>397420	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397428	27 60 00 5c 7a 78 63 76
>397430	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397488	00 00 00 00 00 00 00 00
>397490	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397498	00 00 00 00 00 00 00 00
>3974a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3974a8	00 00 00 00 00 00 00 00
>3974b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 00 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3974c8	11 00 00 9d 00 1d 00 05
>3974d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500					.align 256
>397500	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397508	34 37 3a 3d 3f 41 44 46
>397510	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397518	57 58 5a 5b 5d 5e 60 61
>397520	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397528	6d 6f 70 71 72 73 75 76
>397530	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397538	80 81 82 83 84 85 86 87
>397540	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397548	8f 90 91 92 93 93 94 95
>397550	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397558	9d 9e 9e 9f a0 a1 a2 a2
>397560	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397568	a9 aa ab ab ac ad ae ae
>397570	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397578	b5 b5 b6 b7 b7 b8 b9 b9
>397580	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397588	bf c0 c0 c1 c2 c2 c3 c4
>397590	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397598	c9 ca ca cb cb cc cd cd
>3975a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3975a8	d2 d3 d4 d4 d5 d5 d6 d6
>3975b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3975b8	db dc dc dd de de df df
>3975c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3975c8	e4 e4 e5 e5 e6 e6 e7 e7
>3975d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3975d8	ec ec ed ed ee ee ef ef
>3975e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3975e8	f4 f4 f5 f5 f6 f6 f7 f7
>3975f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3975f8	fb fc fc fd fd fe fe ff
>397600					.align 256
>397600	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397608	25 27 2a 2c 2e 30 32 34
>397610	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397618	44 46 47 49 4a 4c 4d 4f
>397620	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397628	5b 5c 5d 5e 60 61 62 63
>397630	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397638	6d 6e 70 71 72 73 74 75
>397640	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397648	7e 7f 80 81 82 83 84 84
>397650	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397658	8d 8e 8e 8f 90 91 92 93
>397660	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397668	9a 9b 9c 9d 9e 9f 9f a0
>397670	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397678	a7 a8 a9 aa aa ab ac ad
>397680	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397688	b3 b4 b5 b6 b6 b7 b8 b8
>397690	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397698	bf bf c0 c1 c2 c2 c3 c4
>3976a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3976a8	ca ca cb cc cc cd ce ce
>3976b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3976b8	d4 d5 d6 d6 d7 d7 d8 d9
>3976c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3976c8	de df e0 e0 e1 e1 e2 e3
>3976d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3976d8	e8 e9 e9 ea ea eb ec ec
>3976e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3976e8	f1 f2 f3 f3 f4 f4 f5 f5
>3976f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3976f8	fb fb fc fc fd fd fe ff
>397700					.align 256
>397700	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397708	83 dd ce 39 cd c5 3b 15
>397710	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397718	87 12 31 65 89 27 88 42
>397720	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397728	94 ce 56 ec fe da 58 c9
>397730	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397738	d0 10 2c b2 4b ea 32 61
>397740	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397748	a1 e6 ca 2d b3 ce b0 79
>397750	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397758	5f e3 fb bd 15 2e be f5
>397760	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397768	8d 8f 2c 80 0a 5e 99 36
>397770	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397778	13 52 44 2f e3 ef 44 a2
>397780	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397788	be 23 02 58 0a 52 5e b4
>397790	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397798	d5 cf 3e df c4 9e da bb
>3977a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3977a8	77 7d b1 3b 4a 68 35 6e
>3977b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3977b8	b5 8f 44 63 55 6f e1 50
>3977c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3977c8	57 74 b9 bd 05 14 50 eb
>3977d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3977d8	44 bc ec db 22 58 fc be
>3977e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3977e8	24 aa 82 11 5c 9f 43 4d
>3977f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3977f8	3e 3d 66 7e 0a 1c 6b 74
>397800					.align 16
>397800	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397808	01 01 01 00 00 00 00 00
>397810	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397818	ff ff ff 01 00 00 00 00
>397820	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397828	01 55 ff ff 01 00 00 00
>397830	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397838	ff ff ff ff 01 00 00 00
>397840	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397848	ff ff 01 ff ff 01 00 00
>397850	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397858	01 ff ff 01 ff 01 00 00
>397860	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397868	ff 01 ff ff ff 01 00 00
>397870	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397878	ff ff ff ff ff 01 01 00
>397880	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397888	ff ff ff ff 01 ff ff 01
>397890	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397898	ff ff ff ff ff ff ff 01
>3978a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3978a8	55 55 01 ff ff 55 01 00
>3978b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3978b8	01 01 55 ff 55 01 00 00
>3978c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3978c8	01 55 55 55 01 00 00 00
>3978d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3978d8	01 55 55 01 00 00 00 00
>3978e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3978e8	00 01 01 00 00 00 00 00
>3978f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3978f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 59 69 3a 5c 6b 4f 3a		.binary "binaries/basic816.bin"
>3a0008	5c 10 21 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 6b 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a01f8	8f 24 02 af 60 08 e2 20 48 48 a9 00 22 3c 10 00
>3a0208	68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60
>3a0218	08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00
>3a0228	af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2
>3a0238	20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00
>3a0248	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0258	a5 b4 1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4
>3a0268	2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0278	28 e2 20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0
>3a0288	07 af b3 08 00 20 28 00 af b2 08 00 29 80 f0 07
>3a0298	af b3 08 00 20 fd 01 af b2 08 00 29 40 f0 14 af
>3a02a8	b3 08 00 20 18 02 af b3 08 00 c9 0d d0 05 a9 0a
>3a02b8	20 18 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06
>3a02c8	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a02d8	4a 4a 4a 4a 4a 20 ea 02 68 29 ff 00 20 ea 02 68
>3a02e8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 01 03
>3a02f8	68 20 01 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a0308	aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da
>3a0318	5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a
>3a0328	48 ab bd 00 00 f0 06 20 fd 01 e8 80 f5 c2 30 2b
>3a0338	ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a0348	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0358	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0368	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0378	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0388	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0398	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a03a8	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a03b8	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a03c8	00 f0 09 20 b2 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a03d8	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a03e8	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03f8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a0408	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0418	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a0428	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a0438	00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0448	08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f
>3a0458	10 01 00 af 14 01 00 85 21 64 23 af 16 01 00 85
>3a0468	27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2
>3a0478	20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02
>3a0488	60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48
>3a0498	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a04a8	29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20 a5 25
>3a04b8	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04c8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a04d8	e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20
>3a04e8	a5 23 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04f8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a0508	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0518	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a0528	20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0
>3a0538	29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9
>3a0548	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a0558	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a0568	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a0578	00 20 d0 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9
>3a0588	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a0598	00 c9 26 f0 44 e2 20 a7 00 20 57 03 90 76 20 d6
>3a05a8	03 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05b8	69 00 00 85 23 20 75 1b 80 db 08 c2 20 48 a9 00
>3a05c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a05d8	00 20 d0 18 e2 20 dc d2 08 20 75 1b a7 00 c9 48
>3a05e8	f0 04 c9 68 d0 d4 20 75 1b e2 20 a7 00 20 68 03
>3a05f8	90 22 20 89 03 c2 20 06 21 26 23 06 21 26 23 06
>3a0608	21 26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20
>3a0618	75 1b 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8
>3a0628	e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0638	88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0648	00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85
>3a0658	02 20 96 1b a7 00 20 57 03 90 0c 20 81 05 c2 20
>3a0668	a5 21 85 d5 20 96 1b c2 20 a5 00 85 18 e2 20 a5
>3a0678	02 85 1a 20 8f 06 e2 20 20 00 07 c9 00 f0 05 20
>3a0688	89 08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a
>3a0698	85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a06a8	00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a06b8	c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a06c8	c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a06d8	0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a06e8	75 1b 80 b3 a7 00 c9 3a d0 03 20 75 1b a9 03 85
>3a06f8	1c a9 8e 20 89 08 28 60 08 0b 08 c2 20 48 a9 00
>3a0708	08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 3e 08 a5
>3a0718	1c d0 03 4c a3 07 c2 20 a5 18 85 00 e2 20 a5 1a
>3a0728	85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0738	c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0
>3a0748	05 20 c5 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00
>3a0758	c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04
>3a0768	20 87 42 b0 09 e2 20 20 d5 07 c9 00 d0 11 c2 20
>3a0778	a5 00 85 04 e2 20 a5 02 85 06 20 75 1b 80 a9 c9
>3a0788	81 d0 18 20 1f 06 c9 00 f0 14 89 80 10 0b 20 2a
>3a0798	09 c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2
>3a07a8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a07b8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20
>3a07c8	20 75 1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2
>3a07d8	30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 54 09
>3a07e8	85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00
>3a07f8	b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85
>3a0808	0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 b2 03
>3a0818	d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28
>3a0828	60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69
>3a0838	00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 c2 30 a9 54 09 85 08 a9 3a 00 85 0a 64
>3a0858	0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c
>3a0868	90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a
>3a0878	69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28
>3a0888	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87
>3a0898	00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00
>3a08a8	85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2
>3a08b8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69
>3a08d8	54 09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08e8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a08f8	20 cd 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08
>3a0908	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0918	a9 3a 48 ab 68 28 c2 30 20 cd 08 bd 04 00 2b ab
>3a0928	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0938	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cd 08
>3a0948	bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0
>3a0958	a3 21 00 00 03 01 12 d0 e2 21 00 00 02 01 14 d0
>3a0968	f0 21 00 00 02 01 16 d0 09 22 00 00 02 03 18 d0
>3a0978	1c 22 00 00 00 01 1c d0 00 00 00 00 04 01 1e d0
>3a0988	5e 22 00 00 04 01 20 d0 94 22 00 00 04 01 22 d0
>3a0998	79 22 00 00 05 03 24 d0 4d 22 00 00 06 03 28 d0
>3a09a8	2f 22 00 00 07 02 2c d0 3e 22 00 00 ff 01 2f d0
>3a09b8	00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33 d0
>3a09c8	80 34 00 00 20 05 37 d0 85 38 00 00 20 03 3d d0
>3a09d8	d0 37 00 00 20 04 41 d0 70 37 00 00 20 03 46 d0
>3a09e8	67 37 00 00 20 02 4a d0 ff 36 00 00 50 04 4d d0
>3a09f8	00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57 d0
>3a0a08	42 36 00 00 20 06 5d d0 bb 36 00 00 20 03 64 d0
>3a0a18	97 34 00 00 50 02 68 d0 00 00 00 00 50 04 6b d0
>3a0a28	00 00 00 00 20 04 70 d0 8b 35 00 00 20 02 75 d0
>3a0a38	91 34 00 00 20 04 78 d0 94 34 00 00 50 05 7d d0
>3a0a48	00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89 d0
>3a0a58	8e 34 00 00 20 03 8e d0 c6 37 00 00 20 04 92 d0
>3a0a68	61 34 00 00 20 04 97 d0 f1 33 00 00 20 05 9c d0
>3a0a78	87 33 00 00 20 05 a2 d0 14 33 00 00 20 03 a8 d0
>3a0a88	10 33 00 00 20 04 ac d0 f1 31 00 00 20 04 b1 d0
>3a0a98	03 33 00 00 20 07 b6 d0 07 33 00 00 20 03 be d0
>3a0aa8	44 31 00 00 20 04 c2 d0 ad 30 00 00 04 02 c7 d0
>3a0ab8	e7 22 00 00 04 02 ca d0 ca 22 00 00 04 02 cd d0
>3a0ac8	af 22 00 00 30 01 d0 d0 1f 3a 00 00 30 03 d2 d0
>3a0ad8	39 3e 00 00 30 04 d6 d0 89 3e 00 00 30 05 db d0
>3a0ae8	1a 3f 00 00 30 05 e1 d0 cc 3e 00 00 30 04 e7 d0
>3a0af8	59 3f 00 00 30 03 ec d0 ae 3f 00 00 30 03 f0 d0
>3a0b08	f3 3f 00 00 30 03 f4 d0 7c 40 00 00 30 03 f8 d0
>3a0b18	05 41 00 00 30 03 fc d0 35 41 00 00 30 04 00 d1
>3a0b28	a8 3d 00 00 30 03 05 d1 47 3d 00 00 30 04 09 d1
>3a0b38	f6 3c 00 00 30 03 0e d1 a0 3c 00 00 30 05 12 d1
>3a0b48	d7 3b 00 00 30 06 18 d1 f6 3a 00 00 30 04 1f d1
>3a0b58	41 3a 00 00 10 03 24 d1 c3 41 00 00 10 03 28 d1
>3a0b68	8e 41 00 00 10 04 2c d1 4f 4b 00 00 10 04 31 d1
>3a0b78	da 41 00 00 10 03 36 d1 76 48 00 00 20 05 3a d1
>3a0b88	21 4a 00 00 10 04 40 d1 fc 4a 00 00 20 05 45 d1
>3a0b98	06 4c 00 00 20 03 4b d1 25 4d 00 00 10 04 4f d1
>3a0ba8	92 4c 00 00 20 06 54 d1 9b 4d 00 00 20 04 5b d1
>3a0bb8	b6 4e 00 00 10 07 60 d1 8b 41 00 00 20 03 68 d1
>3a0bc8	39 30 00 00 20 05 6c d1 6b 2f 00 00 20 09 72 d1
>3a0bd8	69 24 00 00 20 09 7c d1 04 24 00 00 20 0a 86 d1
>3a0be8	32 24 00 00 20 07 91 d1 71 23 00 00 30 08 99 d1
>3a0bf8	4a 39 00 00 20 07 a2 d1 06 23 00 00 30 08 aa d1
>3a0c08	b7 39 00 00 20 08 b3 d1 7a 25 00 00 20 08 bc d1
>3a0c18	d6 24 00 00 20 06 c5 d1 aa 26 00 00 20 09 cc d1
>3a0c28	a8 27 00 00 20 04 d6 d1 3a 29 00 00 20 04 db d1
>3a0c38	8f 29 00 00 20 04 e0 d1 04 2a 00 00 20 06 e5 d1
>3a0c48	b9 2a 00 00 20 08 ec d1 46 2b 00 00 20 0a f5 d1
>3a0c58	7a 2b 00 00 20 07 00 d2 9d 2c 00 00 20 07 08 d2
>3a0c68	2b 2d 00 00 20 08 10 d2 a7 2d 00 00 20 06 19 d2
>3a0c78	e6 2d 00 00 20 07 20 d2 a5 2e 00 00 50 06 28 d2
>3a0c88	00 00 00 00 50 04 2f d2 00 00 00 00 00 00 00 00
>3a0c98	00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0ca8	c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64
>3a0cb8	b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20
>3a0cc8	85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12
>3a0cd8	48 a5 10 48 20 74 0d b0 03 20 f8 0c 20 00 0f c2
>3a0ce8	20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60
>3a0cf8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d
>3a0d08	ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5
>3a0d18	ba e9 00 85 c0 20 00 0f e2 20 a5 e8 a0 00 00 97
>3a0d28	c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9
>3a0d38	00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97
>3a0d48	c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85
>3a0d58	b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85
>3a0d68	b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2
>3a0d78	20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7
>3a0d88	e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11
>3a0d98	c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b 28 18
>3a0da8	60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7
>3a0db8	85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69
>3a0dc8	00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5
>3a0dd8	0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5
>3a0de8	0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0
>3a0df8	57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7
>3a0e08	85 bd 4c b1 0e c2 20 a5 0c 69 08 00 85 10 e2 20
>3a0e18	a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08
>3a0e28	c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20
>3a0e38	a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8
>3a0e48	c8 b7 cd 85 c9 4c 8e 0d c2 20 a0 02 00 b7 c7 97
>3a0e58	cd e2 20 c8 c8 b7 c7 97 cd 4c b1 0e c2 20 a0 05
>3a0e68	00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0
>3a0e78	02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20
>3a0e88	a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb
>3a0e98	e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97
>3a0ea8	cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2
>3a0eb8	20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85
>3a0ec8	b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e
>3a0ed8	97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8
>3a0ee8	97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00
>3a0ef8	a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be e9 08
>3a0f08	00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20
>3a0f18	a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20
>3a0f28	a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5
>3a0f38	c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0
>3a0f48	01 00 b7 c1 3a 97 c1 d0 03 20 58 0f 28 60 00 ea
>3a0f58	08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85
>3a0f68	bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8
>3a0f78	c8 e2 20 97 c1 4c 3f 10 e2 20 a5 bd c5 c3 90 28
>3a0f88	c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97
>3a0f98	c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2
>3a0fa8	20 a5 c3 85 bd 4c 3f 10 c2 20 a5 bb 85 08 e2 20
>3a0fb8	a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0
>3a0fc8	0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02
>3a0fd8	00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5
>3a0fe8	c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08 4c 3f
>3a0ff8	10 c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08
>3a1008	f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7
>3a1018	08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0
>3a1028	02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1
>3a1038	c2 20 a0 02 00 97 c1 20 44 10 28 60 08 c2 20 a5
>3a1048	bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2
>3a1058	20 a5 c3 d0 03 4c e7 10 c2 20 a0 02 00 b7 c1 85
>3a1068	0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1
>3a1078	85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10
>3a1088	d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7
>3a1098	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85
>3a10a8	c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1
>3a10b8	85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7
>3a10c8	0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00
>3a10d8	b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 60 10 28
>3a10e8	60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85 15 e2 20
>3a10f8	a5 e1 85 16 c5 ba 90 29 f0 08 c2 20 a5 14 c5 b8
>3a1108	90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03
>3a1118	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a1128	08 28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97 14
>3a1138	c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5 21 49 ff
>3a1148	ff 69 01 00 85 21 a5 23 49 ff ff 69 00 00 85 23
>3a1158	a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8 06 21 26
>3a1168	23 a5 10 65 10 85 10 a5 12 65 12 85 12 ca 10 ed
>3a1178	d8 e2 20 20 e9 10 a0 00 00 a5 0c f0 04 a9 2d 80
>3a1188	02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0 4a 4a 4a
>3a1198	4a 20 2b 11 b5 10 29 0f 20 2b 11 ca 10 eb c0 01
>3a11a8	00 d0 0c a9 20 87 14 a0 01 00 a9 30 97 14 c8 a9
>3a11b8	00 97 14 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd
>3a11c8	00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20
>3a11d8	48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2
>3a11e8	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 84 0c
>3a11f8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a1208	20 bf 11 c2 20 98 38 65 0c aa e2 20 a9 02 20 c4
>3a1218	0c c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00
>3a1228	08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21
>3a1238	bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20
>3a1248	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 bd 00 00
>3a1258	97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20
>3a1268	a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08
>3a1278	c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2
>3a1288	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 98 aa
>3a1298	e8 e2 20 a9 02 20 c4 0c c2 20 a5 be 85 08 e2 20
>3a12a8	a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7
>3a12b8	a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9 00 85 24
>3a12c8	ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05
>3a12d8	c8 80 f9 84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30
>3a12e8	0d f0 0b c4 8d b0 12 a5 27 d0 0e 4c 4d 13 20 e9
>3a12f8	10 e2 20 a9 00 87 14 80 39 20 e9 10 c2 30 18 a5
>3a1308	21 65 27 85 21 a5 23 69 00 00 85 23 a0 00 00 e2
>3a1318	20 a7 21 97 14 f0 1b c2 20 18 a5 21 69 01 00 85
>3a1328	21 a5 23 69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00
>3a1338	97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a1348	85 25 20 74 12 28 60 48 5a 0b 08 08 c2 20 48 a9
>3a1358	00 08 5b 68 28 c2 30 a9 00 00 85 00 85 18 a9 36
>3a1368	00 85 02 85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0
>3a1378	0f c5 53 90 10 c5 57 f0 02 b0 05 20 b1 13 80 e5
>3a1388	28 2b 7a 68 60 20 52 1c 80 db 08 c2 20 48 a9 00
>3a1398	08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff
>3a13a8	00 20 d0 18 e2 20 dc d2 08 08 c2 30 85 21 64 23
>3a13b8	20 3a 11 a5 14 1a 85 21 a5 16 85 23 20 fa 38 18
>3a13c8	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20
>3a13d8	a9 20 20 18 00 c2 20 20 f0 13 90 fb e2 20 a9 0d
>3a13e8	20 18 00 20 52 1c 28 60 08 0b 8b 08 c2 20 48 a9
>3a13f8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a1408	20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20
>3a1418	29 7f 00 0a 0a 0a 18 69 54 09 85 08 a9 3a 00 69
>3a1428	00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02
>3a1438	00 b7 08 aa 20 c0 02 c2 20 20 75 1b ab 2b 28 18
>3a1448	60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff
>3a1458	7f 85 1f a9 ff ff 85 21 85 23 85 27 85 29 e2 20
>3a1468	85 25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1478	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a1488	a4 1d bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20
>3a1498	bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1d 7a
>3a14a8	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a14b8	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5
>3a14c8	1d 69 05 00 85 1d a8 b9 00 00 9d 00 00 b9 02 00
>3a14d8	9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab
>3a14e8	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a14f8	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4
>3a1508	1f 99 00 00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08
>3a1518	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1528	ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00
>3a1538	c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20
>3a1548	eb 14 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a1558	28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f
>3a1568	ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1578	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a1588	dc d2 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08
>3a1598	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a15a8	10 a4 1f c0 ff 7f f0 11 20 dd 08 85 0c b9 01 00
>3a15b8	20 dd 08 c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18
>3a15c8	60 c2 20 68 ab 2b 28 38 60 4c 81 05 08 e2 20 a9
>3a15d8	00 8f 00 4d 00 a2 01 00 20 7e 17 20 dd 04 c2 20
>3a15e8	a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f
>3a15f8	00 4d 00 e8 e8 20 96 1b e2 20 a7 00 c9 8d f0 09
>3a1608	c9 2c d0 0a 20 75 1b 80 cf 20 75 1b 28 60 08 c2
>3a1618	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a1628	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20
>3a1638	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a1648	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 05 45
>3a1658	90 23 e2 20 a5 e8 29 80 d0 06 20 5b 43 4c 7b 16
>3a1668	e2 20 a9 8c 20 82 1c 20 42 15 20 d4 15 20 ec 47
>3a1678	20 4c 15 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1688	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a1698	20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a16a8	e2 20 c2 10 20 75 1b a0 00 00 b7 00 f0 24 c9 22
>3a16b8	f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20 c4
>3a16c8	0c a0 00 00 c4 0c f0 29 a7 00 97 be c8 20 75 1b
>3a16d8	80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a16e8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a16f8	08 a9 00 97 be c2 20 a5 be 85 21 e2 20 a5 c0 85
>3a1708	23 a9 02 85 25 20 75 1b 2b 28 60 08 e2 20 a7 00
>3a1718	c2 20 29 ff 00 20 07 09 85 2d 20 42 15 08 e2 20
>3a1728	48 a9 00 48 ab 68 28 20 37 17 20 4c 15 28 60 20
>3a1738	75 1b 6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9
>3a1748	00 08 5b 68 28 c2 30 a2 27 08 20 ac 14 a2 21 08
>3a1758	20 ac 14 20 14 15 20 07 09 85 2d 08 e2 20 48 a9
>3a1768	00 48 ab 68 28 20 7b 17 a2 21 08 20 6e 14 68 ab
>3a1778	2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68
>3a1788	28 08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20
>3a1798	a7 00 d0 03 4c 41 18 30 33 c9 20 d0 03 4c 3b 18
>3a17a8	c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03
>3a17b8	4c 54 18 c9 5b b0 07 c9 41 90 03 4c 60 18 c9 7b
>3a17c8	b0 07 c9 61 90 03 4c 60 18 4c 41 18 c9 8c f0 40
>3a17d8	c9 8d f0 41 20 2a 09 c9 30 d0 0c 20 13 17 a2 21
>3a17e8	08 20 6e 14 4c 96 17 c9 00 d0 4e a7 00 a6 1f e0
>3a17f8	ff 7f f0 05 20 8b 15 b0 12 20 eb 14 80 35 c2 20
>3a1808	20 d1 15 a2 21 08 20 6e 14 80 83 20 3d 17 80 dd
>3a1818	20 eb 14 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f
>3a1828	b9 01 00 c9 01 f0 3d c9 8c f0 05 20 3d 17 80 ee
>3a1838	20 14 15 20 75 1b 4c 96 17 a6 1f e0 ff 7f b0 24
>3a1848	bd 01 00 c9 01 f0 1d 20 3d 17 80 ed 20 9c 16 a2
>3a1858	21 08 20 6e 14 4c 96 17 20 54 16 a2 21 08 20 6e
>3a1868	14 4c 96 17 a2 21 08 20 ac 14 fa 28 60 08 0b 8b
>3a1878	08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00
>3a1888	08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08
>3a1898	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 31 c6
>3a18a8	31 c6 31 2b 28 60 08 c2 30 29 ff 00 20 97 18 28
>3a18b8	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6
>3a18c8	31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2 20 48 a9
>3a18d8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a18e8	20 85 21 a9 00 00 85 23 e2 20 a9 00 85 25 85 e8
>3a18f8	a9 3a 85 e7 c2 20 a9 2a 19 85 e5 20 a2 44 c2 20
>3a1908	a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85 25 85 e8
>3a1918	a9 3a 85 e7 c2 20 a9 2e 19 85 e5 20 a2 44 28 2b
>3a1928	ab 60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 33
>3a1938	02 af d1 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48
>3a1948	a9 3a 48 ab 68 28 be 84 19 20 c0 02 c2 20 a5 d5
>3a1958	f0 27 a2 b2 19 20 c0 02 08 e2 20 48 a9 00 48 ab
>3a1968	68 28 c2 20 af d5 08 00 8f 21 08 00 a9 00 00 8f
>3a1978	23 08 00 20 1a 39 20 33 02 4c 58 21 b6 19 b9 19
>3a1988	bf 19 cc 19 da 19 e8 19 fb 19 11 1a 21 1a 30 1a
>3a1998	3d 1a 4e 1a 5d 1a 6a 1a 78 1a 87 1a 98 1a b1 1a
>3a19a8	c5 1a d9 1a ef 1a 03 1b 1e 1b 20 61 74 00 4f 4b
>3a19b8	00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>3a19c8	72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>3a19d8	79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>3a19e8	56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>3a19f8	6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>3a1a08	6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>3a1a18	6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>3a1a28	76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>3a1a38	61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>3a1a48	75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>3a1a58	6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>3a1a68	72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>3a1a78	4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>3a1a88	69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>3a1a98	55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>3a1aa8	69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>3a1ab8	74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>3a1ac8	62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>3a1ad8	00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>3a1ae8	65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>3a1af8	20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>3a1b08	20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>3a1b18	63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1b28	63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 08 0b
>3a1b38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85 d0
>3a1b48	2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1b58	c2 20 a9 32 19 8f d2 08 00 e2 20 a9 3a 8f d4 08
>3a1b68	00 28 20 c6 37 20 07 33 64 2f 28 2b 60 08 0b 08
>3a1b78	c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69 01
>3a1b88	00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08 0b
>3a1b98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f
>3a1ba8	c9 20 f0 06 c9 09 f0 02 80 05 20 75 1b 80 ed 2b
>3a1bb8	28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 75 1b
>3a1bc8	80 f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0
>3a1bd8	2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0
>3a1be8	16 20 75 1b 80 e3 20 52 1c c2 20 a5 d5 f0 1d e2
>3a1bf8	20 80 d6 e6 34 80 ea c6 34 30 30 80 e4 a5 33 30
>3a1c08	06 a5 34 f0 02 80 da 20 75 1b 28 60 08 c2 20 48
>3a1c18	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1c28	29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a1c38	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1c48	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 30 a0 00 00
>3a1c58	b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00 00
>3a1c68	85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00 85
>3a1c78	00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20 96
>3a1c88	1b 68 e2 20 c7 00 d0 08 20 75 1b 20 96 1b 28 60
>3a1c98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1ca8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1cb8	e2 20 20 96 1b e2 20 a7 00 f0 10 c9 3a f0 0c c5
>3a1cc8	35 f0 05 20 75 1b 80 ef 28 38 60 28 18 60 5a 08
>3a1cd8	e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0
>3a1ce8	05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48
>3a1cf8	a9 00 08 5b 68 28 20 4e 14 e2 20 a9 00 85 da ad
>3a1d08	8a 0f 30 4b a7 00 c9 3a d0 03 20 75 1b 20 96 1b
>3a1d18	a7 00 d0 03 4c a1 1d 20 3e 03 b0 52 a7 00 10 10
>3a1d28	20 2a 09 85 0c c9 20 d0 03 4c 8f 1d a5 d0 f0 51
>3a1d38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1d48	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1d58	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08
>3a1d68	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 d0
>3a1d78	37 4c a1 1d 08 e2 20 48 a9 00 48 ab 68 28 6c 2d
>3a1d88	08 a5 0c c9 10 d0 a9 a7 00 20 07 09 c2 20 85 2d
>3a1d98	20 4e 14 20 75 1b 20 7c 1d ab 2b 28 60 08 58 20
>3a1da8	36 1b 20 75 18 e2 20 9c 8a 0f c2 20 a5 18 85 00
>3a1db8	a5 1a 85 02 4c e3 1d 08 c2 20 a0 02 00 b7 18 85
>3a1dc8	d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5 18 69 04
>3a1dd8	00 85 00 e2 20 a5 1a 69 00 85 02 c2 20 20 f1 1c
>3a1de8	e2 20 a5 da c9 03 f0 f3 c9 00 d0 31 e2 20 20 96
>3a1df8	1b a7 00 f0 28 c9 3a f0 1f 08 c2 20 48 a9 00 08
>3a1e08	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1e18	20 d0 18 e2 20 dc d2 08 20 75 1b 80 be 28 60 08
>3a1e28	58 e2 20 a9 80 85 d0 9c 8a 0f 20 75 18 c2 30 64
>3a1e38	2f a0 02 00 b7 18 f0 29 20 bf 1d e2 20 a5 da c9
>3a1e48	01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00 00
>3a1e58	18 a5 18 77 18 85 18 e2 20 a5 1a 69 00 85 1a 80
>3a1e68	d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2 20 a9 00
>3a1e78	00 85 08 a9 36 00 85 0a c2 20 a0 02 00 b7 08 f0
>3a1e88	31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18 a5 08 77
>3a1e98	08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c 85
>3a1ea8	08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a 85 1a 28
>3a1eb8	38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a1ec8	c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18 a5
>3a1ed8	0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20
>3a1ee8	18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a1ef8	80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5
>3a1f08	00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9 01
>3a1f18	00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5 08
>3a1f28	e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6 28
>3a1f38	60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2 20
>3a1f48	a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04 00 85 00
>3a1f58	e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20 38 a5 d7
>3a1f68	f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20 bd 1e 20
>3a1f78	c6 37 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1f88	30 a0 02 00 97 d7 18 a5 d7 69 04 00 85 08 e2 20
>3a1f98	a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18 97 08 f0
>3a1fa8	03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20 a0
>3a1fb8	00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c 85 0c e2
>3a1fc8	20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7 c2 20 a0
>3a1fd8	00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8 20 c6 37
>3a1fe8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1ff8	a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08 f0
>3a2008	1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08 77 08 85
>3a2018	0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9 00
>3a2028	00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b 60
>3a2038	08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 18 f0
>3a2048	07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5 0a
>3a2058	85 02 18 a5 d7 69 04 00 85 0c a5 d9 69 00 00 85
>3a2068	0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00 85 d9 18
>3a2078	a5 d7 69 04 00 85 08 a5 d9 69 00 00 85 0a 20 fc
>3a2088	1e c2 20 a5 10 a0 00 00 97 00 a5 d5 a0 02 00 97
>3a2098	00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85 02
>3a20a8	a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80 f7 20 c6
>3a20b8	37 28 60 08 c2 30 85 d5 20 ea 1f c9 00 00 f0 2c
>3a20c8	c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 39 1f
>3a20d8	68 85 0a 68 85 08 a5 18 85 00 a5 1a 85 02 20 96
>3a20e8	1b e2 20 a7 00 f0 0a 20 38 20 80 05 a5 d5 20 7c
>3a20f8	1f 28 60 8b 08 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a2108	34 d2 20 c0 02 28 ab 60 08 e2 30 a9 01 20 1c 00
>3a2118	20 db 00 f0 06 c9 0d f0 02 80 f5 28 60 0b 08 08
>3a2128	c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5 a9 00 4f
>3a2138	85 18 a9 00 00 85 1a 20 41 06 c2 20 a5 d5 d0 05
>3a2148	20 a5 1d 80 07 20 bb 20 28 2b 38 60 28 2b 18 60
>3a2158	c2 30 a2 ff fe 9a 20 fb 20 20 08 00 20 0c 00 a9
>3a2168	00 00 20 1c 00 20 25 21 b0 ef 80 ea e2 20 a5 25
>3a2178	c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20 48
>3a2188	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a2198	29 ff 00 20 d0 18 e2 20 dc d2 08 20 74 21 c2 20
>3a21a8	c9 00 00 f0 27 c9 02 00 d0 03 4c d2 11 08 c2 20
>3a21b8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a21c8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 18 a5 21 65
>3a21d8	27 85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27 85
>3a21e8	21 a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5 27
>3a21f8	8f 0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85 23
>3a2208	60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14 01
>3a2218	00 85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00
>3a2228	af 16 01 00 85 21 60 c2 20 a5 21 25 27 85 21 a5
>3a2238	23 25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5 23
>3a2248	05 29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5 23
>3a2258	49 ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5 21
>3a2268	c5 27 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23
>3a2278	60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05 64
>3a2288	21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29
>3a2298	c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85
>3a22a8	23 60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5
>3a22b8	27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a22c8	23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27
>3a22d8	90 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2
>3a22e8	20 a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5 21
>3a22f8	c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2
>3a2308	20 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a
>3a2318	05 27 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 20 0a
>3a2328	04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 82 1c 20
>3a2338	7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27
>3a2348	48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af
>3a2358	68 8f 02 08 af 68 8f 04 08 af af 0e 08 af 29 f7
>3a2368	8f 0e 08 af 20 ba 1b 28 60 08 e2 20 20 7e 17 20
>3a2378	2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a2388	20 82 1c 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a
>3a2398	0a 0a 05 27 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a23a8	20 40 04 c2 20 a5 21 85 90 a5 27 85 21 20 0a 04
>3a23b8	e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2 20 a5 90 85
>3a23c8	21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a 05 27 48 af
>3a23d8	0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f
>3a23e8	0a 08 af 68 8f 09 08 af 68 8f 06 08 af af 0e 08
>3a23f8	af 29 f7 8f 0e 08 af 20 ba 1b 28 60 08 20 7e 17
>3a2408	20 2c 05 e2 20 a5 21 29 0f 0a 0a 0a 0a 8f 53 08
>3a2418	00 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 29 0f
>3a2428	0f 53 08 00 8f 1e 00 00 28 60 08 e2 20 20 7e 17
>3a2438	20 2c 05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c
>3a2448	05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5
>3a2458	21 8f 0d 00 af 68 8f 0e 00 af 68 8f 0f 00 af 28
>3a2468	60 08 e2 20 20 7e 17 20 89 04 a5 21 f0 16 a9 01
>3a2478	8f 04 00 af a9 20 8f 08 00 af 8f 09 00 af 22 2c
>3a2488	11 00 80 0a a9 00 8f 04 00 af 22 2c 11 00 a9 2c
>3a2498	85 35 20 b7 1c 90 35 20 75 1b 20 7e 17 20 2c 05
>3a24a8	a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a24b8	48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 8f 05
>3a24c8	00 af 68 8f 06 00 af 68 8f 07 00 af 28 60 08 c2
>3a24d8	20 20 7e 17 20 2c 05 a9 af 00 85 9e a5 21 c9 0a
>3a24e8	00 b0 5c 0a aa bf 66 25 3a 85 9c a9 2c 00 20 82
>3a24f8	1c 20 7e 17 20 2c 05 a5 21 0a 0a 18 65 9c 85 9c
>3a2508	a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a0 02 00 a5
>3a2518	21 e2 20 97 9c a9 2c 20 82 1c 20 7e 17 20 2c 05
>3a2528	a0 01 00 a5 21 e2 20 97 9c a9 2c 20 82 1c 20 7e
>3a2538	17 20 2c 05 a0 00 00 a5 21 e2 20 97 9c 28 60 08
>3a2548	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a2558	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 00 20
>3a2568	00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f
>3a2578	80 1f da 5a 08 20 7e 17 20 89 04 c2 20 a5 21 89
>3a2588	00 01 d0 17 af 00 00 af 89 00 01 f0 0e e2 20 a9
>3a2598	00 8f 01 00 af a9 01 8f 01 00 af c2 20 a5 21 8f
>3a25a8	00 00 af 4a 4a 4a 4a 4a 4a 4a 29 ff 00 0a aa c2
>3a25b8	20 bf 02 26 3a 8f 10 f0 3a bf 0a 26 3a 8f 12 f0
>3a25c8	3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a 8f 0a 01
>3a25d8	00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e 01 00 8f
>3a25e8	16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00 aa af 1c
>3a25f8	00 00 a8 20 20 00 28 7a fa 60 80 02 20 03 40 01
>3a2608	90 01 e0 01 58 02 f0 00 2c 01 50 00 64 00 28 00
>3a2618	32 00 3c 00 4b 00 1e 00 32 00 48 00 5c 00 20 00
>3a2628	2a 00 34 00 43 00 16 00 34 00 da 08 c2 30 a5 21
>3a2638	c9 02 00 b0 12 0a 0a aa bf 00 f0 3a 85 9c bf 02
>3a2648	f0 3a 85 9e 28 fa 60 08 c2 20 48 a9 00 08 5b 68
>3a2658	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a2668	18 e2 20 dc d2 08 da 08 c2 30 a5 21 c9 02 00 b0
>3a2678	12 0a 0a aa bf 08 f0 3a 85 9c bf 0a f0 3a 85 9e
>3a2688	28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2698	09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a26a8	d2 08 08 c2 20 20 7e 17 20 2c 05 c2 20 a5 21 c9
>3a26b8	02 00 b0 5d 85 53 a9 2c 00 20 82 1c 20 7e 17 20
>3a26c8	2c 05 c2 20 a5 21 85 57 a9 2c 00 20 82 1c 20 7e
>3a26d8	17 20 2c 05 a5 53 0a 0a 0a aa e2 20 a5 57 d0 05
>3a26e8	a5 21 0a 80 04 a5 21 38 2a 9f 00 01 af c2 20 a9
>3a26f8	2c 00 85 35 20 b7 1c b0 37 c2 20 08 c2 20 a9 00
>3a2708	00 85 21 a9 b0 00 85 23 e2 20 a9 00 85 25 28 80
>3a2718	27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2728	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a2738	c2 20 20 75 1b 20 7e 17 c2 20 a5 53 0a 0a aa a5
>3a2748	21 9f 00 f0 3a 9f 08 f0 3a 85 5b a5 23 9f 02 f0
>3a2758	3a 38 e9 b0 00 9f 0a f0 3a 85 5d a5 53 0a 0a 0a
>3a2768	aa e2 20 a5 5b 9f 01 01 af a5 5c 9f 02 01 af a5
>3a2778	5d 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af 28
>3a2788	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a2798	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a27a8	08 c2 20 20 7e 17 20 2c 05 20 6e 26 c2 20 a5 9c
>3a27b8	8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5 9e
>3a27c8	8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f 01
>3a27d8	04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00
>3a27e8	8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af
>3a27f8	10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c
>3a2808	af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9c 85 0c
>3a2818	a5 0e 65 9e 85 0e e2 20 a5 53 87 0c 28 60 c2 20
>3a2828	a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b 49 ff
>3a2838	ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd 38 a5
>3a2848	63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff
>3a2858	85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff
>3a2868	ff 1a 48 0a 68 6a 85 6f 20 ee 27 a5 57 c5 5f d0
>3a2878	06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff
>3a2888	1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5
>3a2898	57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f
>3a28a8	65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60 08 a9
>3a28b8	00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af 10
>3a28c8	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c e2
>3a28d8	20 af 0e 01 00 69 00 85 0e c2 20 18 a5 9c 65 0c
>3a28e8	8f 05 04 af e2 20 a5 9e 65 0e 8f 07 04 af c2 20
>3a28f8	38 a5 5f e5 57 85 0c 8f 08 04 af 38 af 10 f0 3a
>3a2908	8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01 00
>3a2918	8f 0c 04 af e2 20 af 53 08 00 8f 01 04 af a9 87
>3a2928	8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a2938	28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a2948	48 a9 00 48 ab 68 28 c2 30 20 7e 17 20 2c 05 20
>3a2958	32 26 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2968	85 57 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2978	85 5b a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2988	85 53 20 ee 27 28 60 08 08 c2 20 48 a9 00 08 5b
>3a2998	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 7e
>3a29a8	17 20 2c 05 20 32 26 a9 2c 00 20 82 1c 20 7e 17
>3a29b8	20 89 04 a5 21 85 57 a9 2c 00 20 82 1c 20 7e 17
>3a29c8	20 89 04 a5 21 85 5b a9 2c 00 20 82 1c 20 7e 17
>3a29d8	20 89 04 a5 21 85 5f a9 2c 00 20 82 1c 20 7e 17
>3a29e8	20 89 04 a5 21 85 63 a9 2c 00 20 82 1c 20 7e 17
>3a29f8	20 2c 05 a5 21 85 53 20 26 28 28 60 08 08 c2 20
>3a2a08	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a2a18	28 c2 30 20 7e 17 20 2c 05 20 32 26 a9 2c 00 20
>3a2a28	82 1c 20 7e 17 20 89 04 a5 21 85 57 a9 2c 00 20
>3a2a38	82 1c 20 7e 17 20 89 04 a5 21 85 5b a9 2c 00 20
>3a2a48	82 1c 20 7e 17 20 89 04 a5 21 85 5f a9 2c 00 20
>3a2a58	82 1c 20 7e 17 20 89 04 a5 21 85 63 a9 2c 00 20
>3a2a68	82 1c 20 7e 17 20 2c 05 a5 21 85 53 20 b6 28 28
>3a2a78	60 08 e2 20 a5 21 c9 40 b0 18 0a 0a 0a 18 69 00
>3a2a88	85 9c a9 0c 69 00 85 9d a9 af 69 00 85 9e 64 9f
>3a2a98	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2aa8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2ab8	08 08 e2 20 20 7e 17 20 2c 05 20 79 2a a5 21 8f
>3a2ac8	16 f0 3a a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2ad8	c9 08 b0 4b 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a2ae8	c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0 00 85
>3a2af8	23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20 a5 23
>3a2b08	c8 c8 97 9c af 16 f0 3a aa bf 18 f0 3a 29 f1 85
>3a2b18	0c 68 0a 29 0e 05 0c 87 9c 9f 18 f0 3a 28 60 08
>3a2b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a2b38	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a2b48	20 20 7e 17 20 2c 05 20 79 2a a9 2c 00 20 82 1c
>3a2b58	20 7e 17 20 89 04 a5 21 a0 04 00 97 9c a9 2c 00
>3a2b68	20 82 1c 20 7e 17 20 89 04 a5 21 a0 06 00 97 9c
>3a2b78	28 60 08 c2 20 20 7e 17 20 2c 05 20 79 2a a5 21
>3a2b88	8f 16 f0 3a a9 2c 00 20 82 1c 20 7e 17 20 89 04
>3a2b98	a5 21 48 a9 2c 00 85 35 20 b7 1c b0 1e af 16 f0
>3a2ba8	3a aa bf 18 f0 3a 29 fe 00 85 0c 68 29 01 00 05
>3a2bb8	0c 9f 18 f0 3a e2 20 87 9c 80 35 c2 20 20 75 1b
>3a2bc8	20 7e 17 20 2c 05 a5 21 c9 08 00 b0 25 0a 0a 0a
>3a2bd8	0a 85 0c 68 29 01 00 05 0c 85 0c af 16 f0 3a aa
>3a2be8	e2 20 bf 18 f0 3a 29 8e 05 0c 87 9c 9f 18 f0 3a
>3a2bf8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2c08	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2c18	08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01 a9 04
>3a2c28	00 8d 02 01 18 ad 04 01 69 80 02 85 9c a9 af 00
>3a2c38	85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c48	a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a2c58	dc d2 08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01
>3a2c68	a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9c a9
>3a2c78	af 00 85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2c88	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a2c98	e2 20 dc d2 08 08 c2 20 20 7e 17 20 2c 05 20 19
>3a2ca8	2c c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20
>3a2cb8	7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82 1c
>3a2cc8	20 7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82
>3a2cd8	1c 20 7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85
>3a2ce8	5d 68 85 57 68 85 53 68 85 9c 68 85 9e a5 5b 87
>3a2cf8	9c e2 20 38 a5 5d e9 b0 a0 02 00 97 9c c2 20 a5
>3a2d08	57 d0 11 a5 59 d0 0d e2 20 a5 53 29 07 a0 03 00
>3a2d18	97 9c 80 0d e2 20 a5 53 29 07 09 08 a0 03 00 97
>3a2d28	9c 28 60 08 c2 20 20 7e 17 20 2c 05 20 5b 2c c2
>3a2d38	20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20 7e 17
>3a2d48	20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20 7e
>3a2d58	17 20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20
>3a2d68	7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85 5d 68
>3a2d78	85 57 68 85 53 68 85 9c 68 85 9e a5 5b a0 01 00
>3a2d88	97 9c e2 20 38 a5 5d e9 b0 c8 c8 97 9c c2 20 a5
>3a2d98	53 a0 04 00 97 9c a5 57 a0 06 00 97 9c 28 60 08
>3a2da8	c2 20 20 7e 17 20 2c 05 20 5b 2c c2 20 a5 9e 48
>3a2db8	a5 9c 48 a9 2c 00 20 82 1c 20 7e 17 20 89 04 c2
>3a2dc8	20 68 85 9c 68 85 9e a5 21 d0 06 e2 20 a9 00 80
>3a2dd8	04 e2 20 a9 01 e2 20 a0 00 00 97 9c 28 60 08 c2
>3a2de8	20 20 7e 17 20 2c 05 20 5b 2c a5 9e 48 a5 9c 48
>3a2df8	a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 48 a9
>3a2e08	2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 85 57 68
>3a2e18	85 53 68 85 9c 68 85 9e a5 53 a0 08 00 97 9c a5
>3a2e28	57 a0 0a 00 97 9c 28 60 0b 08 08 c2 20 48 a9 00
>3a2e38	08 5b 68 28 c2 30 af 59 f0 3a 85 9c e2 20 af 5b
>3a2e48	f0 3a c2 20 29 ff 00 85 9e af 5c f0 3a 85 0c e2
>3a2e58	20 af 5e f0 3a c2 20 29 ff 00 85 0e af 63 f0 3a
>3a2e68	85 10 e2 20 af 65 f0 3a c2 20 29 ff 00 85 12 e2
>3a2e78	20 a7 9c 87 10 c2 20 e6 9c d0 02 e6 9e e6 10 d0
>3a2e88	02 e6 12 38 a5 0c e9 01 00 85 0c a5 0e e9 00 00
>3a2e98	85 0e a5 0c d0 d9 a5 0e d0 d5 28 2b 60 0b 08 e2
>3a2ea8	20 c2 10 20 d6 1c c9 e6 f0 1f 08 c2 20 48 a9 00
>3a2eb8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a2ec8	00 20 d0 18 e2 20 dc d2 08 20 82 1c 20 7e 17 20
>3a2ed8	89 04 c2 20 a5 21 8f 59 f0 3a e2 20 a5 23 8f 5b
>3a2ee8	f0 3a a9 2c 20 82 1c 20 7e 17 20 89 04 c2 20 a5
>3a2ef8	21 8f 5c f0 3a e2 20 a5 23 8f 5e f0 3a a9 00 8f
>3a2f08	58 f0 3a a9 99 20 82 1c 20 d6 1c c9 e6 f0 1f 08
>3a2f18	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a2f28	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 82
>3a2f38	1c 20 7e 17 20 89 04 c2 20 a5 21 8f 63 f0 3a e2
>3a2f48	20 a5 23 8f 65 f0 3a c2 20 a5 21 8f 66 f0 3a e2
>3a2f58	20 a5 23 8f 68 f0 3a a9 00 8f 62 f0 3a 20 30 2e
>3a2f68	28 2b 60 08 20 96 1b e2 20 a7 00 d0 03 4c 13 30
>3a2f78	c9 3a d0 03 4c 13 30 c9 22 d0 0b 20 9c 16 20 fa
>3a2f88	38 a9 3b 20 82 1c 20 3e 03 90 41 20 05 45 90 3c
>3a2f98	a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a2fa8	e8 c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08 c2 20
>3a2fb8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a2fc8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48
>3a2fd8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a2fe8	29 ff 00 20 d0 18 e2 20 dc d2 08 c2 20 a9 00 4c
>3a2ff8	85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 74 12
>3a3008	c2 20 20 a2 44 a9 0d 00 20 18 00 28 60 ea c2 20
>3a3018	a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00
>3a3028	85 02 20 81 05 c2 20 a5 3e 85 00 a5 40 85 02 80
>3a3038	cf 08 20 96 1b e2 20 a7 00 f0 49 c9 3a f0 45 20
>3a3048	3e 03 90 42 20 05 45 90 3d 20 14 00 e2 20 8f 00
>3a3058	4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9
>3a3068	00 00 85 23 e2 20 a9 02 85 25 20 74 12 20 a2 44
>3a3078	20 96 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>3a3088	75 1b 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3098	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a30a8	e2 20 dc d2 08 08 20 7e 17 20 89 04 e2 20 a9 5c
>3a30b8	85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20
>3a30c8	a9 2c 85 35 20 b7 1c 90 41 20 75 1b 20 7e 17 20
>3a30d8	dd 04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 b7
>3a30e8	1c 90 27 20 75 1b 20 7e 17 20 dd 04 c2 20 a5 21
>3a30f8	85 57 e2 20 a9 2c 85 35 20 b7 1c 90 0d 20 75 1b
>3a3108	20 7e 17 20 dd 04 c2 20 a4 21 a6 57 a5 53 0b 8b
>3a3118	08 22 a0 08 00 28 ab 2b 20 ba 1b 28 60 08 c2 20
>3a3128	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3138	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20 20
>3a3148	96 1b 20 05 45 90 64 a9 8c 20 82 1c a9 01 20 eb
>3a3158	14 a2 01 00 a9 00 8f 00 4d 00 20 7e 17 20 dd 04
>3a3168	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a3178	00 4d 00 30 55 e8 e8 20 96 1b a7 00 c9 2c f0 25
>3a3188	c9 8d d0 27 20 75 1b 20 b3 45 c2 20 a5 be 85 21
>3a3198	e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25
>3a31a8	20 a2 44 28 60 20 75 1b 4c 62 31 08 c2 20 48 a9
>3a31b8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a31c8	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a31d8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a31e8	00 20 d0 18 e2 20 dc d2 08 08 20 96 1b e2 20 a7
>3a31f8	00 f0 28 c9 3a f0 24 20 3e 03 90 21 20 05 45 90
>3a3208	1c 20 44 32 20 a2 44 20 96 1b a7 00 f0 0d c9 3a
>3a3218	f0 09 c9 2c d0 07 20 75 1b 80 cf 28 60 08 c2 20
>3a3228	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3238	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 a5 02 85
>3a3248	40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5
>3a3258	38 d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85 02 a5
>3a3268	3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a f0
>3a3278	4f c9 2c d0 03 20 75 1b 20 96 1b a7 00 c9 22 f0
>3a3288	4e 20 57 03 b0 4e 08 c2 20 48 a9 00 08 5b 68 28
>3a3298	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a32a8	e2 20 dc d2 08 c2 20 a9 00 00 85 18 a9 36 00 85
>3a32b8	1a 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a32c8	e2 20 a9 80 85 33 a9 a8 85 35 20 cc 1b 80 a9 20
>3a32d8	9c 16 80 03 20 d1 15 c2 20 a5 00 85 36 a5 02 85
>3a32e8	38 a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5 44 85
>3a32f8	1a a5 3e 85 00 a5 40 85 02 28 60 20 ba 1b 60 64
>3a3308	36 64 38 64 3a 64 3c 60 20 24 00 60 20 7e 17 c2
>3a3318	20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22 20
>3a3328	75 1b 20 7e 17 c2 20 a5 24 d0 35 68 85 08 68 85
>3a3338	0a c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23 97 08
>3a3348	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3358	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3368	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3378	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20
>3a3388	7e 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c
>3a3398	d0 19 20 75 1b 20 7e 17 c2 20 a5 23 d0 2c 68 85
>3a33a8	08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a33b8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a33c8	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a33d8	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a33e8	00 20 d0 18 e2 20 dc d2 08 20 7e 17 c2 20 a5 23
>3a33f8	48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 75 1b 20
>3a3408	7e 17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68 85
>3a3418	08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a3428	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3438	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3448	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3458	00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3468	5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00
>3a3478	20 d0 18 e2 20 dc d2 08 08 e2 20 a7 00 f0 05 20
>3a3488	75 1b 80 f7 28 60 08 28 60 08 28 60 08 28 60 08
>3a3498	c2 20 a5 1a 20 97 18 a5 18 20 97 18 a5 02 48 a5
>3a34a8	00 48 20 ba 1b a5 02 20 97 18 a5 00 20 97 18 68
>3a34b8	85 00 68 85 02 20 96 1b 20 05 45 b0 1f 08 c2 20
>3a34c8	48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2
>3a34d8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a5 e8
>3a34e8	20 ae 18 a5 e7 20 ae 18 c2 20 a5 e5 20 97 18 20
>3a34f8	96 1b e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0 04
>3a3508	c9 01 f0 00 20 75 1b 20 7e 17 20 a2 44 e2 20 a9
>3a3518	99 20 82 1c 20 7e 17 c2 20 a5 25 20 97 18 a5 23
>3a3528	20 97 18 a5 21 20 97 18 e2 20 a9 9a 85 35 20 b7
>3a3538	1c 90 1b 20 75 1b 20 7e 17 e2 20 a5 25 20 97 18
>3a3548	c2 20 a5 23 20 97 18 a5 21 20 97 18 80 14 c2 20
>3a3558	a9 00 00 20 97 18 a9 00 00 20 97 18 a9 01 00 20
>3a3568	97 18 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3578	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a3588	dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a3598	c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2
>3a35a8	20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00
>3a35b8	85 e8 c2 20 5a 20 5b 43 7a c2 20 b9 00 00 85 27
>3a35c8	b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20
>3a35d8	a3 21 20 a2 44 7a c2 20 b9 06 00 85 27 b9 08 00
>3a35e8	85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a
>3a35f8	20 e7 22 20 76 04 f0 28 80 08 20 ca 22 20 76 04
>3a3608	f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a3618	00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17
>3a3628	a2 21 08 20 ac 14 c2 20 18 a5 31 69 1a 00 85 31
>3a3638	a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a
>3a3648	48 20 96 1b 20 81 05 a5 21 f0 26 20 71 1e 90 42
>3a3658	e2 20 a9 02 85 da 20 ba 1b c2 20 68 20 97 18 68
>3a3668	20 97 18 a5 02 20 97 18 a5 00 20 97 18 e6 2f 28
>3a3678	60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3688	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3698	d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a36a8	a9 06 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a36b8	dc d2 08 08 c2 30 a5 2f f0 1e 20 b9 18 85 00 20
>3a36c8	b9 18 85 02 20 b9 18 85 18 20 b9 18 85 1a c6 2f
>3a36d8	e2 20 a9 03 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a36e8	68 28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00 20
>3a36f8	d0 18 e2 20 dc d2 08 08 20 7e 17 20 76 04 f0 1c
>3a3708	e2 20 a9 94 20 82 1c 20 81 05 20 76 04 f0 12 20
>3a3718	71 1e 90 2c e2 20 a9 02 85 da 80 03 20 ba 1b 28
>3a3728	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3738	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3748	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1
>3a3758	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a3768	e2 20 a9 01 85 da 28 60 08 20 96 1b 20 81 05 a5
>3a3778	21 f0 0d 20 71 1e 90 27 e2 20 a9 02 85 da 28 60
>3a3788	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3798	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a37a8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08
>3a37b8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 4e
>3a37c8	14 20 9c 0c 20 5a 42 60 08 a7 00 10 03 20 75 1b
>3a37d8	20 05 45 b0 03 4c 47 38 e2 20 20 d6 1c c9 8c d0
>3a37e8	0e a9 8c 20 82 1c a9 00 8f 00 4d 00 20 d4 15 20
>3a37f8	96 1b e2 20 a7 00 c9 87 f0 03 4c 47 38 20 75 1b
>3a3808	a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 7e 17 68
>3a3818	85 e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b 20
>3a3828	cd 42 90 3a c2 20 a0 09 00 b7 08 85 be e2 20 c8
>3a3838	c8 b7 08 85 c0 20 94 47 80 03 20 a2 44 28 60 08
>3a3848	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3858	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a3868	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00
>3a3878	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20
>3a3888	20 d6 1c c9 00 f0 66 20 7e 17 e2 20 a5 25 c9 ff
>3a3898	f0 14 c9 02 d0 05 20 fa 38 80 0b c9 00 d0 05 20
>3a38a8	1a 39 80 02 80 4a 20 96 1b a7 00 f0 40 c9 3a f0
>3a38b8	3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08
>3a38c8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a38d8	20 d0 18 e2 20 dc d2 08 a9 09 20 18 00 20 75 1b
>3a38e8	20 96 1b a7 00 f0 09 c9 3a f0 05 80 9a 20 33 02
>3a38f8	28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3908	c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6 ab
>3a3918	28 60 08 c2 20 20 3a 11 a5 14 85 21 a5 16 85 23
>3a3928	20 fa 38 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f
>3a3938	18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14 c8
>3a3948	28 60 e2 20 a9 8c 20 82 1c 08 20 7e 17 e2 20 c2
>3a3958	10 af 0e 08 af 09 08 8f 0e 08 af 20 e9 10 a0 00
>3a3968	00 af 06 08 af 20 2d 39 a9 2f 97 14 c8 af 09 08
>3a3978	af 20 2d 39 a9 2f 97 14 c8 af 0f 08 af 20 2d 39
>3a3988	af 0a 08 af 20 2d 39 a9 00 97 14 af 0e 08 af 29
>3a3998	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a39a8	20 a9 02 85 25 20 74 12 28 e2 20 20 75 1b 60 e2
>3a39b8	20 a9 8c 20 82 1c 08 20 7e 17 e2 20 c2 10 af 0e
>3a39c8	08 af 09 08 8f 0e 08 af 20 e9 10 a0 00 00 af 04
>3a39d8	08 af 29 7f 20 2d 39 a9 3a 97 14 c8 af 02 08 af
>3a39e8	20 2d 39 a9 3a 97 14 c8 af 00 08 af 20 2d 39 a9
>3a39f8	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a3a08	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 74 12
>3a3a18	28 e2 20 20 75 1b 60 08 c2 20 20 7e 17 20 89 04
>3a3a28	c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23
>3a3a38	e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 82 1c
>3a3a48	08 c2 30 20 7e 17 20 b3 04 c2 20 a5 23 48 a5 21
>3a3a58	48 20 96 1b e2 20 a7 00 c9 2c f0 03 4c b8 3a 20
>3a3a68	75 1b 20 7e 17 20 dd 04 c2 20 a5 21 48 20 96 1b
>3a3a78	e2 20 a7 00 c9 2c f0 03 4c b8 3a 20 75 1b 20 7e
>3a3a88	17 20 dd 04 c2 20 a5 21 85 8d e2 20 a5 23 85 8f
>3a3a98	c2 20 68 85 27 a9 00 00 85 29 68 85 21 68 85 23
>3a3aa8	e2 20 a9 02 85 25 20 cc 12 e2 20 20 75 1b 28 60
>3a3ab8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3ac8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a3ad8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3ae8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20
>3a3af8	a9 8c 20 82 1c 08 c2 30 20 7e 17 e2 20 a5 25 c9
>3a3b08	02 f0 03 4c 7a 3b c2 20 a5 23 48 a5 21 48 20 96
>3a3b18	1b e2 20 a7 00 c9 2c f0 03 4c 99 3b 20 75 1b 20
>3a3b28	7e 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d
>3a3b38	c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2 20
>3a3b48	a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d
>3a3b58	30 09 85 27 a9 00 00 85 29 80 07 a9 00 00 85 27
>3a3b68	85 29 e2 20 a9 00 85 2b 20 cc 12 e2 20 20 75 1b
>3a3b78	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3b88	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3b98	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3ba8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3bb8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3bc8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2
>3a3bd8	20 a9 8c 20 82 1c 08 c2 30 20 7e 17 e2 20 a5 25
>3a3be8	c9 02 f0 03 4c 43 3c c2 20 a5 23 48 a5 21 48 20
>3a3bf8	96 1b e2 20 a7 00 c9 2c f0 03 4c 62 3c 20 75 1b
>3a3c08	20 7e 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21 85
>3a3c18	8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20 a9
>3a3c28	00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02 85
>3a3c38	25 20 cc 12 e2 20 20 75 1b 28 60 08 c2 20 48 a9
>3a3c48	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3c58	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3c68	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3c78	00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3c88	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a3c98	20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 20
>3a3ca8	7e 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5 00
>3a3cb8	85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20 81
>3a3cc8	05 a5 3e 85 00 a5 40 85 02 e2 20 20 75 1b 60 08
>3a3cd8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3ce8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20
>3a3cf8	a9 8c 20 82 1c 08 20 7e 17 c2 10 e2 20 a5 25 c9
>3a3d08	00 d0 1d 20 3a 11 c2 20 a5 14 85 21 a5 16 85 23
>3a3d18	e2 20 a9 02 85 25 20 74 12 28 e2 20 20 75 1b 60
>3a3d28	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3d38	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2
>3a3d48	20 a9 8c 20 82 1c 08 20 7e 17 20 b3 04 c2 20 64
>3a3d58	0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0
>3a3d68	03 c8 80 f3 b7 21 20 68 03 90 1e c2 20 06 0c 26
>3a3d78	0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20
>3a3d88	89 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5
>3a3d98	0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 75 1b 60
>3a3da8	e2 20 a9 8c 20 82 1c 08 20 7e 17 20 89 04 20 e9
>3a3db8	10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf
>3a3dc8	00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf
>3a3dd8	00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24
>3a3de8	85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23
>3a3df8	d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23
>3a3e08	a5 17 85 24 a9 02 85 25 20 74 12 28 e2 20 20 75
>3a3e18	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3e28	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3e38	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3e48	02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20 bf 11 ab
>3a3e58	84 21 c2 20 64 23 e2 20 a9 00 85 25 e2 20 20 75
>3a3e68	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3e78	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3e88	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3e98	00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2
>3a3ea8	20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3eb8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a3ec8	20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20
>3a3ed8	a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0 02
>3a3ee8	00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20 20
>3a3ef8	75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3f08	04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3f18	d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25
>3a3f28	c9 00 d0 0e c2 20 a7 21 85 21 64 23 e2 20 20 75
>3a3f38	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3f48	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3f58	08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9
>3a3f68	00 d0 24 20 e9 10 a5 21 87 14 a9 00 a0 01 00 97
>3a3f78	14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3f88	25 e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a3f98	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a3fa8	18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17
>3a3fb8	e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64 23
>3a3fc8	64 24 a9 00 85 25 e2 20 20 75 1b 60 08 c2 20 48
>3a3fd8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3fe8	29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3ff8	82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 39 e2 20 a5
>3a4008	24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 e9 10
>3a4018	a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88
>3a4028	10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23
>3a4038	e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4048	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a4058	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4068	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a4078	20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20
>3a4088	a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e
>3a4098	a5 22 d0 4a c2 10 20 e9 10 a4 21 e2 20 a9 00 97
>3a40a8	14 88 30 07 a9 09 97 14 88 10 fb a9 02 85 25 c2
>3a40b8	20 a5 14 85 21 a5 16 85 23 e2 20 20 75 1b 60 08
>3a40c8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a40d8	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a40e8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a40f8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9
>3a4108	8c 20 82 1c 20 7e 17 20 89 04 c2 20 a5 23 10 17
>3a4118	49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85 21
>3a4128	a5 23 69 00 00 85 23 e2 20 20 75 1b 60 e2 20 a9
>3a4138	8c 20 82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 25 c2
>3a4148	20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85 23
>3a4158	a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2 20
>3a4168	20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4178	a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a4188	dc d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a4198	68 28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 36 85
>3a41a8	d9 c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00 97 d7
>3a41b8	a0 04 00 97 d7 20 4b 1b 2b 28 60 8b 08 c2 20 a9
>3a41c8	00 00 85 18 a9 36 00 85 1a 20 4b 1b 20 27 1e 28
>3a41d8	ab 60 08 c2 20 64 53 a9 ff 7f 85 57 20 33 02 20
>3a41e8	d6 1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20
>3a41f8	96 1b 20 81 05 a5 21 85 53 20 d6 1c 29 ff 00 c9
>3a4208	00 00 f0 12 c9 81 00 d0 2a 20 82 1c 20 96 1b 20
>3a4218	81 05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02 48 a5
>3a4228	00 48 20 4f 13 68 85 00 68 85 02 68 85 18 68 85
>3a4238	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4248	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4258	d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64
>3a4268	e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5 d7
>3a4278	69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60 c9
>3a4288	5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9
>3a4298	41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08
>3a42a8	e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8
>3a42b8	c0 08 00 d0 f2 b7 e5 20 b2 03 20 87 42 b0 03 28
>3a42c8	38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00
>3a42d8	b7 e5 f0 0b 20 b2 03 9f 00 4e 00 c8 e8 80 f1 a9
>3a42e8	00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9 00
>3a42f8	85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d
>3a4308	e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17 c2
>3a4318	20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85
>3a4328	0e 20 a7 42 b0 2a a0 0d 00 c2 20 b7 08 85 0c c8
>3a4338	c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2
>3a4348	20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60
>3a4358	28 38 60 08 20 cd 42 b0 1f 08 c2 20 48 a9 00 08
>3a4368	5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00
>3a4378	20 d0 18 e2 20 dc d2 08 c2 30 a0 09 00 b7 08 85
>3a4388	21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85 25
>3a4398	28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20 a5
>3a43a8	e1 69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5 b8 90
>3a43b8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a43c8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a43d8	c2 20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20 a5 08
>3a43e8	85 df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5 25 c5
>3a43f8	e8 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4408	04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4418	d2 08 c2 10 20 9a 43 c2 30 18 a5 be 69 01 00 85
>3a4428	08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00 97 08
>3a4438	c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20 b2 03
>3a4448	20 87 42 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0
>3a4458	09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2 a0 0d
>3a4468	00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5 be 85
>3a4478	e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25 97 be
>3a4488	c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20 a5 23
>3a4498	85 c0 20 00 0f 20 15 0f 80 ea 08 c2 30 a5 e2 d0
>3a44a8	06 e2 20 a5 e4 f0 05 20 cd 42 b0 05 20 f2 43 80
>3a44b8	17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21
>3a44c8	97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85
>3a44d8	be c8 c8 e2 20 b7 08 85 c0 20 00 0f 20 34 0f e2
>3a44e8	20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 be e2
>3a44f8	20 a5 23 85 c0 20 00 0f 20 15 0f 80 bc 08 20 96
>3a4508	1b e2 20 a7 00 20 3e 03 90 42 c2 20 a5 00 85 e5
>3a4518	e2 20 a5 02 85 e7 20 75 1b a7 00 f0 0d c9 24 f0
>3a4528	14 c9 25 f0 09 20 87 42 b0 ec a9 00 80 0c 20 75
>3a4538	1b a9 00 80 05 20 75 1b a9 02 85 e8 20 d6 1c c9
>3a4548	8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18 60 08
>3a4558	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5
>3a4568	23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2
>3a4578	20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49
>3a4588	ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2
>3a4598	20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5
>3a45a8	e2 20 06 26 66 23 66 22 66 21 60 08 20 00 0f c2
>3a45b8	20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d
>3a45c8	00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00
>3a45d8	4d 00 85 27 a9 00 00 85 29 20 f0 21 e8 e8 88 d0
>3a45e8	eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 f0 21
>3a45f8	e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c
>3a4608	38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29
>3a4618	e2 20 a5 e8 09 80 a6 21 20 c4 0c e2 20 af 00 4d
>3a4628	00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97
>3a4638	be e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08
>3a4648	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a4658	20 d0 18 e2 20 dc d2 08 e2 20 38 a5 be 67 be 85
>3a4668	08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64 0b c2
>3a4678	20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a4688	64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01 00
>3a4698	85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5
>3a46a8	0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af 00
>3a46b8	4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be c5 8d f0
>3a46c8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a46d8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a46e8	c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64
>3a46f8	22 64 23 64 24 b7 be 85 27 64 28 64 29 64 2a a5
>3a4708	21 c5 27 b0 68 20 f0 21 c2 20 18 a5 08 65 21 85
>3a4718	08 a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20
>3a4728	18 bf 00 4d 00 85 8e 65 08 85 08 a5 09 69 00 85
>3a4738	09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a
>3a4748	06 08 26 0a e2 20 38 a5 08 65 8d 85 08 a5 09 69
>3a4758	00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65
>3a4768	be 85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20
>3a4778	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a4788	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 00 0f
>3a4798	e2 20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25 48
>3a47a8	c2 20 a5 23 48 a5 21 48 20 ad 46 68 85 21 68 85
>3a47b8	23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5
>3a47c8	23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a47d8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a47e8	20 dc d2 08 08 20 00 0f f4 00 00 f4 00 00 e2 20
>3a47f8	48 20 ad 46 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a4808	21 a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7 c1 29
>3a4818	7f 85 25 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b
>3a4828	68 28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00 d0 0c
>3a4838	a5 21 89 00 fc d0 05 20 1a 39 80 2e a2 0a 00 46
>3a4848	23 66 21 ca d0 f9 20 1a 39 e2 20 a9 4b 20 18 00
>3a4858	c2 20 80 16 a2 14 00 46 23 66 21 ca d0 f9 20 1a
>3a4868	39 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08
>3a4878	c2 30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20 20
>3a4888	d6 1c c9 00 f0 08 20 7e 17 20 b3 04 80 11 c2 20
>3a4898	a9 00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20 20
>3a48a8	d7 49 22 08 11 00 b0 22 20 88 4a 08 c2 20 48 a9
>3a48b8	00 08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20 29
>3a48c8	ff 00 20 d0 18 e2 20 dc d2 08 20 33 02 08 c2 20
>3a48d8	48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03
>3a48e8	82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89
>3a48f8	08 f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9
>3a4908	0f d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0
>3a4918	08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18
>3a4928	00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7
>3a4938	18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 21 08 00
>3a4948	c8 c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08 00
>3a4958	20 1d 48 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0
>3a4968	1c 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53
>3a4978	20 18 00 89 10 f0 05 a9 44 20 18 00 ea 20 33 02
>3a4988	20 4a 02 22 0c 11 00 90 03 82 41 ff 20 88 4a 08
>3a4998	c2 20 48 a9 00 08 5b 68 28 20 ba 1b 28 2b 60 08
>3a49a8	c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0
>3a49b8	cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20
>3a49c8	18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b
>3a49d8	08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 6c f2
>3a49e8	85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97 20
>3a49f8	c8 c0 1e 00 d0 f8 c2 20 a9 6c f0 8f 7a f2 3a a9
>3a4a08	3a 00 8f 7c f2 3a af 21 08 00 8f 6e f2 3a af 23
>3a4a18	08 00 8f 70 f2 3a 28 2b 60 08 c2 30 20 96 1b 20
>3a4a28	7e 17 20 b3 04 20 d7 49 e2 20 a9 2c 85 35 20 b7
>3a4a38	1c b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00
>3a4a48	80 17 20 75 1b 20 7e 17 20 89 04 c2 20 a5 21 8f
>3a4a58	54 03 00 a5 23 8f 56 03 00 22 18 11 00 b0 1f 08
>3a4a68	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08
>3a4a78	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 28 60
>3a4a88	8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a4a98	48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 21 a9
>3a4aa8	00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85
>3a4ab8	e7 c2 20 a9 eb 4a 85 e5 20 a2 44 e2 20 af 20 03
>3a4ac8	00 85 21 a9 00 85 22 85 23 85 24 a9 00 85 25 85
>3a4ad8	e8 a9 3a 85 e7 c2 20 a9 f3 4a 85 e5 20 a2 44 28
>3a4ae8	2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53 53
>3a4af8	54 41 54 00 08 c2 30 20 96 1b 20 7e 17 20 b3 04
>3a4b08	a5 21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff ff 8f
>3a4b18	54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 d0 18
>3a4b28	20 88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4b38	11 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4b48	d2 08 20 d0 18 28 60 08 c2 30 20 96 1b 20 7e 17
>3a4b58	20 b3 04 20 d7 49 a9 00 00 8f 54 03 00 a9 01 00
>3a4b68	8f 56 03 00 20 8e 41 22 18 11 00 b0 22 20 88 4a
>3a4b78	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1
>3a4b88	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20
>3a4b98	88 4a c2 20 a2 12 00 18 bf 6c f2 3a 69 00 00 85
>3a4ba8	90 bf 6e f2 3a 69 01 00 85 92 e2 20 a9 00 87 90
>3a4bb8	c2 20 a9 00 00 85 78 a9 01 00 85 7a a2 00 00 e2
>3a4bc8	20 a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f
>3a4bd8	e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d
>3a4be8	00 4f 20 25 21 e6 78 d0 d3 e6 7a 80 cf e0 00 00
>3a4bf8	f0 0a e2 20 a9 00 9d 00 4f 20 25 21 28 60 08 c2
>3a4c08	30 20 96 1b 20 7e 17 20 b3 04 20 d7 49 e2 20 a9
>3a4c18	2c 20 82 1c c2 20 20 7e 17 20 89 04 a5 21 8f 50
>3a4c28	03 00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 82
>3a4c38	1c 20 7e 17 20 89 04 a5 21 8f 58 03 00 a5 23 8f
>3a4c48	5a 03 00 22 1c 11 00 b0 22 20 88 4a 08 c2 20 48
>3a4c58	a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20
>3a4c68	29 ff 00 20 d0 18 e2 20 dc d2 08 20 88 4a 28 60
>3a4c78	da 5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00 04
>3a4c88	f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 96 1b
>3a4c98	20 7e 17 20 b3 04 20 d7 49 a9 00 00 85 a4 e2 20
>3a4ca8	a9 01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9 a9
>3a4cb8	ff ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff ff
>3a4cc8	85 57 a9 ff 7f 85 59 20 4f 13 e2 20 a9 80 85 b2
>3a4cd8	c2 20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f 58
>3a4ce8	03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>3a4cf8	22 1c 11 00 b0 22 20 88 4a 08 c2 20 48 a9 00 08
>3a4d08	5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00
>3a4d18	20 d0 18 e2 20 dc d2 08 20 88 4a 28 60 08 c2 30
>3a4d28	20 96 1b 20 7e 17 20 b3 04 20 78 4c 22 04 11 00
>3a4d38	b0 22 20 88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4d48	20 a9 13 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a4d58	20 dc d2 08 20 88 4a 28 60 da 08 e2 20 c9 61 90
>3a4d68	08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>3a4d78	df 8c 4d 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>3a4d88	28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>3a4d98	5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a4da8	20 7e 17 20 b3 04 20 78 4c 22 10 11 00 b0 22 20
>3a4db8	88 4a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>3a4dc8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a4dd8	08 e2 20 a9 2c 20 82 1c c2 20 20 7e 17 20 b3 04
>3a4de8	ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>3a4df8	20 95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>3a4e08	21 f0 6d c9 2e f0 30 22 61 4d 3a b0 1f 08 c2 20
>3a4e18	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a4e28	20 29 ff 00 20 d0 18 e2 20 dc d2 08 95 7c c8 e8
>3a4e38	c0 08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0 31 22
>3a4e48	61 4d 3a b0 22 20 88 4a 08 c2 20 48 a9 00 08 5b
>3a4e58	68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a4e68	d0 18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00 d0 cb
>3a4e78	a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00 d0
>3a4e88	f5 22 14 11 00 b0 22 20 88 4a 08 c2 20 48 a9 00
>3a4e98	08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29 ff
>3a4ea8	00 20 d0 18 e2 20 dc d2 08 20 88 4a 28 60 08 08
>3a4eb8	c2 20 48 a9 00 08 5b 68 28 c2 30 20 7e 17 20 b3
>3a4ec8	04 a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2 20 a9
>3a4ed8	2c 20 82 1c c2 20 20 7e 17 20 b3 04 a5 21 8f 68
>3a4ee8	03 00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f 08 c2
>3a4ef8	20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1 08 00
>3a4f08	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 28 60 5c
>3a4f18	d4 68 3a 5c 25 67 3a 5c d5 68 3a 5c 51 58 3a 5c
>3a4f28	ae 58 3a 5c e1 57 3a 5c 67 57 3a 5c e4 5c 3a 5c
>3a4f38	d2 53 3a 5c ff 56 3a 5c ba 56 3a 5c 44 56 3a 5c
>3a4f48	e3 67 3a 5c e0 54 3a 5c 36 53 3a 5c 5e 68 3a 5c
>3a4f58	0e 54 3a 5c d7 68 3a 5c d0 68 3a 5c fd 55 3a 5c
>3a4f68	d8 68 3a 18 fb c2 20 a9 ff fe 1b 58 5c 78 4f 3a
>3a4f78	c2 30 22 36 53 3a 20 08 00 20 0c 00 8b e2 20 a9
>3a4f88	00 48 ab a2 00 4f 20 c1 03 ab 22 1b 4f 3a 22 23
>3a4f98	4f 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 af
>3a4fa8	4f 20 c0 02 ab 28 6b 41 20 3c 73 74 61 72 74 3e
>3a4fb8	20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73
>3a4fc8	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4fd8	0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74
>3a4fe8	61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66
>3a4ff8	20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61
>3a5008	72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f
>3a5018	66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61
>3a5028	72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61
>3a5038	73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61
>3a5048	6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a5058	64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c
>3a5068	20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f
>3a5078	72 79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>3a5088	47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74
>3a5098	61 72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74
>3a50a8	20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b
>3a50b8	61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20
>3a50c8	74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e
>3a50d8	20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74
>3a50e8	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a50f8	6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74
>3a5108	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>3a5118	62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66
>3a5128	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>3a5138	6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20
>3a5148	20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20 5b
>3a5158	64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c
>3a5168	73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>3a5178	75 6d 70 20 74 68 65 20 76 61 6c 75 65 20 69 6e
>3a5188	20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73
>3a5198	70 6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20
>3a51a8	6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72 73
>3a51b8	0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e
>3a51c8	20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20
>3a51d8	3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d
>3a51e8	20 20 43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e
>3a51f8	74 65 6e 74 73 20 6f 66 20 74 68 65 20 72 65 67
>3a5208	69 73 74 65 72 73 0d 0d 53 20 20 20 20 20 53 41
>3a5218	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a5228	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>3a5238	54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a5248	3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20
>3a5258	54 72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20
>3a5268	64 61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f
>3a5278	72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53
>3a5288	65 74 20 74 68 65 20 72 65 67 69 73 74 65 72 20
>3a5298	77 69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20
>3a52a8	74 68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72
>3a52b8	0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20
>3a52c8	42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e
>3a52d8	20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e
>3a52e8	2e 0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e
>3a52f8	20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73
>3a5308	70 6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c
>3a5318	70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48
>3a5328	a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2
>3a5338	20 48 a9 3a 48 ab 68 28 a2 15 69 20 c0 02 e2 20
>3a5348	a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48
>3a5358	a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 43 02 c2
>3a5368	20 a9 20 00 20 18 00 af 44 02 00 20 d0 02 a9 20
>3a5378	00 20 18 00 af 46 02 00 20 d0 02 a9 20 00 20 18
>3a5388	00 af 48 02 00 20 d0 02 a9 20 00 20 18 00 af 4a
>3a5398	02 00 20 d0 02 a9 20 00 20 18 00 af 4e 02 00 20
>3a53a8	ea 02 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20
>3a53b8	d0 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 2e
>3a53c8	66 3a 28 20 33 02 20 33 02 6b 08 0b 08 c2 20 48
>3a53d8	a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f
>3a53e8	c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 33 02 2b
>3a53f8	28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a5408	69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b
>3a5418	68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15
>3a5428	90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20
>3a5438	a5 0d c5 11 d0 03 4c c5 54 c2 20 18 a5 0d 69 01
>3a5448	00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15
>3a5458	69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2
>3a5468	20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b
>3a5478	c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85
>3a5488	17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5
>3a5498	11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85
>3a54a8	11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01
>3a54b8	00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 33 02
>3a54c8	2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0
>3a54d8	90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9
>3a54e8	46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9
>3a54f8	02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85
>3a5508	11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2
>3a5518	20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85
>3a5528	11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20
>3a5538	a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 cb
>3a5548	54 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69 01
>3a5558	00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90
>3a5568	db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18 00
>3a5578	e2 20 a5 34 20 ea 02 a9 3a 20 18 00 c2 20 a5 32
>3a5588	20 d0 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18
>3a5598	00 a7 32 20 ea 02 22 0d 66 3a e2 20 c6 47 d0 ea
>3a55a8	a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00
>3a55b8	48 ab 68 28 a2 7c 08 20 c0 02 20 33 02 20 4a 02
>3a55c8	a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 33
>3a55d8	02 2b ab 28 6b 4c 31 55 08 8d 90 08 e2 20 bd 00
>3a55e8	00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce 90
>3a55f8	08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b
>3a5608	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d
>3a5618	85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57 08
>3a5628	a0 7c 08 22 e0 55 3a a0 00 00 b9 7c 08 87 32 22
>3a5638	0d 66 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08
>3a5648	c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48
>3a5658	ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b 08
>3a5668	a0 7c 08 22 e0 55 3a c2 20 a5 0d 85 32 a5 0f 85
>3a5678	34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2
>3a5688	20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0 f4
>3a5698	c2 20 a5 32 85 4a a5 34 85 4c 22 b7 60 3a e2 20
>3a56a8	a9 20 20 18 00 22 0d 66 3a 80 c6 20 33 02 ab 2b
>3a56b8	28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31
>3a56c8	f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>3a56d8	af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>3a56e8	4c 02 00 5b e2 20 a9 3a 48 a9 56 48 a9 fa 48 4c
>3a56f8	31 57 ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b 68
>3a5708	28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5
>3a5718	0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af
>3a5728	4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48
>3a5738	ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00 af
>3a5748	41 02 00 8f a2 08 00 af 40 02 00 8f a1 08 00 af
>3a5758	4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08 00 08
>3a5768	0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48
>3a5778	a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c
>3a5788	c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01
>3a5798	00 85 47 80 08 a2 d9 68 20 c0 02 80 35 a5 0d 85
>3a57a8	4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09
>3a57b8	22 b7 60 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01
>3a57c8	00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20
>3a57d8	33 02 20 33 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48
>3a57e8	a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28
>3a57f8	e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02
>3a5808	c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e
>3a5818	46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6
>3a5828	1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9
>3a5838	06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10
>3a5848	a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48
>3a5858	a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 46 69
>3a5868	3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf
>3a5878	87 58 3a 8f 2d 08 00 22 ab 58 3a ab 2b 28 6b 27
>3a5888	4f 2f 4f 33 4f 37 4f 3b 4f 3f 4f 43 4f 47 4f 4b
>3a5898	4f 4f 4f 2b 4f 53 4f 57 4f 5b 4f 23 53 5f 4f 63
>3a58a8	4f 9c 4f 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46 08
>3a58b8	5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 54 5a c2 20
>3a58c8	a5 0d 85 32 a5 0f 85 34 c2 20 22 56 5c 3a c9 ff
>3a58d8	ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85
>3a58e8	4f 80 4c 20 33 02 08 e2 20 48 a9 3a 48 ab 68 28
>3a58f8	c2 10 a2 8b 5a 20 c0 02 4c 54 5a 20 33 02 08 e2
>3a5908	20 48 a9 3a 48 ab 68 28 c2 10 a2 9a 5a 20 c0 02
>3a5918	4c 54 5a e2 20 22 8c 5c 3a c9 ff f0 de 85 4f c9
>3a5928	03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22
>3a5938	84 5b 3a b0 03 4c 1d 5a 87 32 22 0d 66 3a 08 e2
>3a5948	20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34
>3a5958	85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14
>3a5968	f0 7c 29 3f c9 02 d0 03 4c 4b 5a c2 20 29 ff 00
>3a5978	aa e2 20 bf 53 65 3a c9 03 f0 57 c9 02 f0 5f c9
>3a5988	01 f0 67 80 71 c2 20 a5 54 c9 cb 61 f0 26 c9 2f
>3a5998	62 f0 2a c9 af 61 f0 1c c9 b3 61 f0 17 c9 bb 61
>3a59a8	f0 12 c9 a3 61 f0 0d c9 b7 61 f0 08 c9 9f 61 f0
>3a59b8	03 4c 37 59 e2 20 a9 12 85 4f 4c 37 59 e2 20 a9
>3a59c8	16 85 4f 4c 37 59 22 c7 5a 3a 90 60 c9 02 f0 0e
>3a59d8	80 18 a0 02 00 b9 96 08 97 56 22 0d 66 3a a0 01
>3a59e8	00 b9 96 08 97 56 22 0d 66 3a a0 00 00 b9 96 08
>3a59f8	97 56 22 0d 66 3a e2 20 a9 41 20 18 00 a9 20 20
>3a5a08	18 00 a6 32 86 4a a6 34 86 4c 22 b7 60 3a a9 20
>3a5a18	20 18 00 80 37 20 33 02 08 e2 20 48 a9 3a 48 ab
>3a5a28	68 28 c2 10 a2 58 5a 20 c0 02 80 20 20 33 02 08
>3a5a38	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 a8 5a 20 c0
>3a5a48	02 80 09 a5 4f 29 c0 d0 95 4c f2 59 2b ab 28 6b
>3a5a58	41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20
>3a5a68	6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20
>3a5a78	74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e
>3a5a88	2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e
>3a5a98	0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00
>3a5aa8	52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20
>3a5ab8	69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08
>3a5ac8	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f c9
>3a5ad8	12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18
>3a5ae8	a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5
>3a5af8	50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9
>3a5b08	16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9
>3a5b18	01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80
>3a5b28	18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0
>3a5b38	04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2
>3a5b48	10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2 00
>3a5b58	00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2
>3a5b68	20 06 50 26 52 06 50 26 52 06 50 26 52 06 50 26
>3a5b78	52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2
>3a5b88	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48 ab
>3a5b98	68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0
>3a5ba8	00 00 bd 51 62 f0 1b c5 54 d0 0d e2 20 b9 53 64
>3a5bb8	29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab
>3a5bc8	2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a5bd8	68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0
>3a5be8	11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8
>3a5bf8	80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20
>3a5c08	b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41
>3a5c18	b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 45
>3a5c28	5b 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28 a0
>3a5c38	00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68
>3a5c48	18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08
>3a5c58	c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36 a5
>3a5c68	13 85 38 a9 df 60 85 03 a9 3a 00 85 05 22 ce 5b
>3a5c78	3a b0 0d 22 2c 5c 3a a7 03 d0 f2 a9 ff ff 80 02
>3a5c88	a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a5c98	c2 30 a5 15 85 36 a5 17 85 38 a9 6b 65 85 03 a9
>3a5ca8	3a 00 85 05 22 ce 5b 3a b0 22 22 2c 5c 3a c2 20
>3a5cb8	18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2
>3a5cc8	20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 2c 5c 3a
>3a5cd8	e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08
>3a5ce8	c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08
>3a5cf8	00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d
>3a5d08	69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5
>3a5d18	0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32
>3a5d28	69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 50 5d
>3a5d38	3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90
>3a5d48	ec 20 33 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18
>3a5d58	00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28
>3a5d68	c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 b7 60 3a
>3a5d78	a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2
>3a5d88	20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0
>3a5d98	0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c
>3a5da8	48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff
>3a5db8	00 0a aa bf 51 62 3a aa 22 31 60 3a e2 20 a7 00
>3a5dc8	aa bf 53 64 3a 22 0d 66 3a 22 de 5d 3a 20 33 02
>3a5dd8	20 4a 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa
>3a5de8	68 7c ec 5d 1c 5e 37 5e 3e 5e 63 5e 6a 5e 85 5e
>3a5df8	a7 5e b8 5e f5 5e fd 5e 0e 5f 1f 5f 26 5f 4b 5f
>3a5e08	78 5f e4 5e c9 5e 96 5e 6b 5f 75 5f 89 5f b8 5f
>3a5e18	66 5f c9 5f a9 28 20 18 00 22 e0 5f 3a a9 2c 20
>3a5e28	18 00 a9 58 20 18 00 a9 29 20 18 00 4c da 5f 22
>3a5e38	e0 5f 3a 4c da 5f e2 20 48 a9 23 20 18 00 68 29
>3a5e48	c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 ea 5f
>3a5e58	3a 4c da 5f 22 e0 5f 3a 4c da 5f 22 ea 5f 3a 4c
>3a5e68	da 5f a9 28 20 18 00 22 e0 5f 3a a9 29 20 18 00
>3a5e78	a9 2c 20 18 00 a9 59 20 18 00 4c da 5f 22 e0 5f
>3a5e88	3a a9 2c 20 18 00 a9 58 20 18 00 4c da 5f 22 e0
>3a5e98	5f 3a a9 2c 20 18 00 a9 59 20 18 00 4c da 5f 22
>3a5ea8	ea 5f 3a a9 2c 20 18 00 a9 59 20 18 00 4c da 5f
>3a5eb8	22 ea 5f 3a a9 2c 20 18 00 a9 58 20 18 00 4c da
>3a5ec8	5f a9 28 20 18 00 22 ea 5f 3a a9 2c 20 18 00 a9
>3a5ed8	58 20 18 00 a9 29 20 18 00 4c da 5f a9 28 20 18
>3a5ee8	00 22 e0 5f 3a a9 29 20 18 00 4c da 5f a9 41 20
>3a5ef8	18 00 4c de 5f 22 e0 5f 3a a9 2c 20 18 00 a9 53
>3a5f08	20 18 00 4c da 5f a9 5b 20 18 00 22 e0 5f 3a a9
>3a5f18	5d 20 18 00 4c da 5f 22 f8 5f 3a 4c de 5f a9 28
>3a5f28	20 18 00 22 e0 5f 3a a9 2c 20 18 00 a9 53 20 18
>3a5f38	00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00
>3a5f48	4c da 5f a9 5b 20 18 00 22 e0 5f 3a a9 5d 20 18
>3a5f58	00 a9 2c 20 18 00 a9 59 20 18 00 4c da 5f a0 02
>3a5f68	00 80 03 a0 01 00 22 5e 60 3a 4c de 5f 4c de 5f
>3a5f78	22 f8 5f 3a a9 2c 20 18 00 a9 58 20 18 00 4c de
>3a5f88	5f a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01
>3a5f98	00 22 43 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6
>3a5fa8	00 a0 01 00 22 43 02 3a ab 22 0d 66 3a 4c da 5f
>3a5fb8	a9 28 20 18 00 22 ea 5f 3a a9 29 20 18 00 4c da
>3a5fc8	5f a9 5b 20 18 00 22 ea 5f 3a a9 5d 20 18 00 4c
>3a5fd8	da 5f 22 0d 66 3a 28 6b 08 e2 20 a7 00 20 ea 02
>3a5fe8	28 6b 08 c2 30 a7 00 20 d0 02 22 0d 66 3a 28 6b
>3a5ff8	08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28
>3a6008	08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7
>3a6018	00 99 90 08 22 0d 66 3a c8 c0 03 00 d0 f1 22 b7
>3a6028	60 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08
>3a6038	e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8
>3a6048	bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20
>3a6058	20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b
>3a6068	68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64
>3a6078	19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85
>3a6088	18 22 0d 66 3a a7 00 85 19 30 04 64 1a 80 04 a9
>3a6098	ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02
>3a60a8	65 1a 85 1a 22 b7 60 3a 22 0d 66 3a 2b 28 6b 08
>3a60b8	0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a60c8	a5 4c 20 ea 02 e2 20 a9 3a 20 18 00 c2 20 a5 4a
>3a60d8	20 d0 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45
>3a60e8	4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43
>3a60f8	4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c
>3a6108	53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44
>3a6118	45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53
>3a6128	54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42
>3a6138	52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50
>3a6148	48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44
>3a6158	45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43
>3a6168	4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54
>3a6178	59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54
>3a6188	58 41 00 54 58 53 00 54 41 58 00 54 53 58 00 44
>3a6198	45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42
>3a61a8	56 43 00 42 56 53 00 42 43 43 00 42 43 53 00 42
>3a61b8	4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00 53
>3a61c8	54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50
>3a61d8	48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50
>3a61e8	48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57
>3a61f8	41 49 00 58 42 41 00 54 43 53 00 54 53 43 00 54
>3a6208	43 44 00 54 44 43 00 54 58 59 00 54 59 58 00 53
>3a6218	54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57
>3a6228	44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53
>3a6238	45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50
>3a6248	45 41 00 4a 4d 4c 00 00 00 37 61 df 60 1f 62 df
>3a6258	60 bf 61 df 60 ff 60 df 60 47 61 df 60 ff 60 df
>3a6268	61 bf 61 df 60 ff 60 df 60 9f 61 df 60 df 60 df
>3a6278	60 c3 61 df 60 ff 60 df 60 67 61 df 60 1b 61 ff
>3a6288	61 c3 61 df 60 ff 60 df 60 3b 61 e3 60 23 62 e3
>3a6298	60 1f 61 e3 60 03 61 e3 60 4b 61 e3 60 03 61 e3
>3a62a8	61 1f 61 e3 60 03 61 e3 60 a3 61 e3 60 e3 60 e3
>3a62b8	60 1f 61 e3 60 03 61 e3 60 6b 61 e3 60 17 61 03
>3a62c8	62 1f 61 e3 60 03 61 e3 60 3f 61 e7 60 27 62 e7
>3a62d8	60 3b 62 e7 60 07 61 e7 60 4f 61 e7 60 07 61 e7
>3a62e8	61 23 61 e7 60 07 61 e7 60 a7 61 e7 60 e7 60 e7
>3a62f8	60 3f 62 e7 60 07 61 e7 60 6f 61 e7 60 cf 61 07
>3a6308	62 4b 62 e7 60 07 61 e7 60 43 61 eb 60 2b 62 eb
>3a6318	60 c7 61 eb 60 0b 61 eb 60 53 61 eb 60 0b 61 eb
>3a6328	61 23 61 eb 60 0b 61 eb 60 ab 61 eb 60 eb 60 eb
>3a6338	60 c7 61 eb 60 0b 61 eb 60 73 61 eb 60 d3 61 0b
>3a6348	62 23 61 eb 60 0b 61 eb 60 cb 61 ef 60 2f 62 ef
>3a6358	60 27 61 ef 60 0f 61 ef 60 57 61 1f 61 87 61 ef
>3a6368	61 27 61 ef 60 0f 61 ef 60 af 61 ef 60 ef 60 ef
>3a6378	60 27 61 ef 60 0f 61 ef 60 77 61 ef 60 8b 61 0f
>3a6388	62 c7 61 ef 60 c7 61 ef 60 2b 61 f3 60 13 61 f3
>3a6398	60 2b 61 f3 60 13 61 f3 60 5b 61 f3 60 8f 61 f3
>3a63a8	61 2b 61 f3 60 13 61 f3 60 b3 61 f3 60 f3 60 f3
>3a63b8	60 2b 61 f3 60 13 61 f3 60 7b 61 f3 60 93 61 13
>3a63c8	62 2b 61 f3 60 13 61 f3 60 2f 61 f7 60 33 62 f7
>3a63d8	60 2f 61 f7 60 17 61 f7 60 5f 61 f7 60 97 61 f7
>3a63e8	61 2f 61 f7 60 17 61 f7 60 b7 61 f7 60 f7 60 f7
>3a63f8	60 43 62 f7 60 17 61 f7 60 7f 61 f7 60 d7 61 17
>3a6408	62 4b 62 f7 60 17 61 f7 60 33 61 fb 60 37 62 fb
>3a6418	60 33 61 fb 60 1b 61 fb 60 63 61 fb 60 9b 61 fb
>3a6428	61 33 61 fb 60 1b 61 fb 60 bb 61 fb 60 fb 60 fb
>3a6438	60 47 62 fb 60 1b 61 fb 60 83 61 fb 60 db 61 1b
>3a6448	62 3b 61 fb 60 1b 61 fb 60 00 00 13 00 02 09 01
>3a6458	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01
>3a6468	05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01
>3a6478	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05
>3a6488	05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14
>3a6498	01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14
>3a64a8	05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01
>3a64b8	01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05
>3a64c8	05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01
>3a64d8	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>3a64e8	05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01
>3a64f8	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>3a6508	05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01
>3a6518	01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01
>3a6528	05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01
>3a6538	01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03
>3a6548	05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01
>3a6558	01 02 02 00 01 01 03 01 01 03 01 02 01 01 00 02
>3a6568	02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00
>3a6578	0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58
>3a6588	00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03
>3a6598	64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53
>3a65a8	00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64
>3a65b8	2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53
>3a65c8	29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28
>3a65d8	64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28
>3a65e8	64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64
>3a65f8	64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64
>3a6608	5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00 69 01
>3a6618	00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a 08
>3a6628	00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a
>3a6638	b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00
>3a6648	68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68
>3a6658	28 e2 20 a7 32 f0 0a c9 20 d0 06 22 0d 66 3a 80
>3a6668	f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 0d 66
>3a6678	3a 22 4f 66 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a
>3a6688	aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9
>3a6698	22 f0 06 22 0d 66 3a 80 f2 a9 00 87 32 22 0d 66
>3a66a8	3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a66b8	20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0
>3a66c8	0d 20 68 03 90 0e 22 45 5b 3a a9 01 85 4a 22 0d
>3a66d8	66 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a
>3a66e8	0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2
>3a66f8	20 64 31 22 4f 66 3a a7 32 f0 21 c9 22 d0 06 22
>3a6708	6a 66 3a 80 0a 22 ad 66 3a a5 31 c9 09 b0 0d a7
>3a6718	32 f0 09 c9 20 f0 dc 20 68 03 b0 d7 6b 08 0b 08
>3a6728	c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00
>3a6738	74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f
>3a6748	85 00 85 32 e2 20 22 4f 66 3a c9 00 f0 38 c2 20
>3a6758	a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 0d 66
>3a6768	3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8
>3a6778	80 eb 86 0b a9 00 87 32 22 0d 66 3a a7 08 c9 41
>3a6788	f0 07 22 f7 66 3a 2b 28 6b 22 4f 66 3a a7 32 f0
>3a6798	f5 22 ad 66 3a 22 4f 66 3a a7 32 f0 e9 c2 20 a5
>3a67a8	32 85 11 e2 20 a5 34 85 13 22 0d 66 3a a7 32 f0
>3a67b8	26 c9 20 d0 f4 a9 00 87 32 e6 31 22 0d 66 3a 22
>3a67c8	4f 66 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5
>3a67d8	34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20
>3a67e8	a5 31 d0 0f a2 d9 68 a9 3a 48 ab 20 c0 02 20 33
>3a67f8	02 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08
>3a6808	00 20 d7 49 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff
>3a6818	ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f
>3a6828	54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2
>3a6838	20 a2 ff 68 a9 3a 48 ab 20 c0 02 af 2e 03 00 20
>3a6848	ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20 33
>3a6858	02 20 33 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03
>3a6868	f0 0f a2 d9 68 a9 3a 48 ab 20 c0 02 20 33 02 80
>3a6878	54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20
>3a6888	d7 49 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15
>3a6898	8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25
>3a68a8	e2 20 a2 e9 68 a9 3a 48 ab 20 c0 02 af 2e 03 00
>3a68b8	20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20
>3a68c8	33 02 20 33 02 28 ab 6b 5c 58 21 3a 6b 00 00 00
>3a68d8	00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d
>3a68e8	00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20
>3a68f8	66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f
>3a6908	20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20
>3a6918	50 43 20 20 20 20 20 41 20 20 20 20 58 20 20 20
>3a6928	20 59 20 20 20 20 53 50 20 20 20 44 42 52 20 44
>3a6938	50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43
>3a6948	44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f
>3a6958	00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a6968	48 a9 00 48 ab 68 28 c2 30 20 98 69 a9 ff fe 1b
>3a6978	08 e2 20 48 a9 3a 48 ab 68 28 a2 3c d2 20 c0 02
>3a6988	08 e2 20 48 a9 00 48 ab 68 28 4c 58 21 4c 95 69
>3a6998	08 20 b5 01 20 8e 41 28 60 00 00 00 00 00 00 00
>3a69a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1636 times (26176 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8	4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208	54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218	00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228	4c 49 4e 45 41 52 00 52 45 43 54 00 0d 52 45 41
>3ad238	44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad248	42 41 53 49 43 38 31 36 20 76 30 2e 31 2e 30 2d
>3ad258	61 6c 70 68 61 2b 31 36 30 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
