
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 --long-address --flat -b -o kernel.bin --list kernel.lst src\kernel.asm
; Fri Dec 27 18:59:08 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: src\kernel.asm


;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				CMD_PARSER_TMPX  = $000040 ; <<< Command Parser 2Bytes
=$000042				CMD_PARSER_TMPY  = $000042 ; <<< Command Parser 2Bytes
=$000044				CMD_LIST_PTR     = $000044 ; <<< Command Parser 3 Bytes
=$000048				CMD_PARSER_PTR   = $000048 ; <<< Command Parser 3 Bytes
=$00004b				CMD_ATTRIBUTE    = $00004B ; <<< Command Parser 2 Bytes (16bits Attribute Field)
=$00004d				CMD_EXEC_ADDY    = $00004D ; <<< Command Parser 3 Bytes 24 Bits Address Jump to execute the Command
=$000050				KEY_BUFFER_RPOS  = $000050 ;
=$000052				KEY_BUFFER_WPOS  = $000052 ;
=$000054				CMD_VARIABLE_TMP = $000054 ;
=$000056				CMD_ARG_DEV      = $000056 ;
=$000057				CMD_ARG_SA       = $000057 ;
=$00005a				CMD_ARG_EA       = $00005A ;
=$00005d				CMD_VALID        = $00005D ;
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00	18		clc		RHRESET         CLC
.38ff01	fb		xce		                XCE
.38ff02	5c 00 00 39	jmp $390000	                JML BOOT
.38ff10					RHCOP
.38ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12	8b		phb		                PHB
.38ff13	0b		phd		                PHD
.38ff14	48		pha		                PHA
.38ff15	da		phx		                PHX
.38ff16	5a		phy		                PHY
.38ff17	5c 08 00 39	jmp $390008	                JML BREAK
.38ff20					RHBRK
.38ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22	8b		phb		                PHB
.38ff23	0b		phd		                PHD
.38ff24	48		pha		                PHA
.38ff25	da		phx		                PHX
.38ff26	5a		phy		                PHY
.38ff27	5c 08 00 39	jmp $390008	                JML BREAK
.38ff30					RHABORT
.38ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32	8b		phb		                PHB
.38ff33	0b		phd		                PHD
.38ff34	48		pha		                PHA
.38ff35	da		phx		                PHX
.38ff36	5a		phy		                PHY
.38ff37	5c 08 00 39	jmp $390008	                JML BREAK
.38ff40					 RHNMI
.38ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42	8b		phb		                PHB
.38ff43	0b		phd		                PHD
.38ff44	48		pha		                PHA
.38ff45	da		phx		                PHX
.38ff46	5a		phy		                PHY
.38ff47	22 90 83 39	jsl $398390	                JSL NMI_HANDLER
.38ff4b	7a		ply		                PLY
.38ff4c	fa		plx		                PLX
.38ff4d	68		pla		                PLA
.38ff4e	2b		pld		                PLD
.38ff4f	ab		plb		                PLB
.38ff50	40		rti		                RTI
.38ff60					RHIRQ
.38ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62	8b		phb		                PHB
.38ff63	0b		phd		                PHD
.38ff64	48		pha		                PHA
.38ff65	da		phx		                PHX
.38ff66	5a		phy		                PHY
.38ff67	22 7f 81 39	jsl $39817f	                JSL IRQ_HANDLER
.38ff6b	7a		ply		                PLY
.38ff6c	fa		plx		                PLX
.38ff6d	68		pla		                PLA
.38ff6e	2b		pld		                PLD
.38ff6f	ab		plb		                PLB
.38ff70	40		rti		                RTI
.38ffe0	5c 68 80 39	jmp $398068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0	5c 01 06 39	jmp $390601	RRETURN         JML IRETURN
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				LFSR          = $AFE804
=$afe808				PCB_REV_C     = $AFE808
=$afe809				PCB_REV_X     = $AFE809
=$afe80a				PCB_REV_1     = $AFE80A
=$afe80b				PCB_REV_EOL   = $AFE80B
=$afe80c				DIP_OPTIONS   = $AFE80C
=$afe80d				DIP_MEM_SIZE  = $AFE80D
=$afe80e				DIP_BOOTMODE  = $AFE80E
=$80					HD_INSTALLED  = $80
=$02					BOOT_MODE1    = $02
=$01					BOOT_MODE0    = $01
=$afe80f				MACHINE_ID    = $AFE80F
=$afe810				SDCARD_DATA   = $AFE810  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register
=$afe830				IDE_DATA_LO   = $AFE830 ; ALways Read or Write that Register in 16Bits
=$afe831				IDE_DATA_HI   = $AFE831
=$afe832				IDE_ERROR     = $AFE832 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe834				IDE_SECT_CNT  = $AFE834 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe836				IDE_SECT_SRT  = $AFE836 ; Start Sector Register (0 = 256), so start @ 1
=$afe838				IDE_CLDR_LO   = $AFE838 ; Low Byte of Cylinder Numnber {7:0}
=$afe83a				IDE_CLDR_HI   = $AFE83A ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe83c				IDE_HEAD      = $AFE83C ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe83e				IDE_CMD_STAT  = $AFE83E ; Command/Status Register - Reading this will clear the Interrupt Registers

;******  Return to file: src\kernel.asm


;******  Processing file: src\CMD_Parser.asm

.393000					SAVECHAR2CMDLINE
.393000	0b		phd		                PHD
.393001	e2 20		sep #$20	                SEP #$20        ; set A short
.393003					NOT_CARRIAGE_RETURN
.393003	a6 52		ldx $52		                LDX KEY_BUFFER_WPOS   ; So the Receive Character is saved in the Buffer
.393005	c9 20		cmp #$20	                CMP #$20
.393007	90 22		bcc $39302b	                BCC CHECK_LOWERTHANSPACE
.393009	c9 80		cmp #$80	                CMP #$80
.39300b	b0 39		bcs $393046	                BCS EXIT_SAVE2_CMDLINE
.39300d	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE  ; Make sure we haven't been overboard.
.393010	b0 34		bcs $393046	                BCS EXIT_SAVE2_CMDLINE  ; Stop storing - An error should ensue here...
.393012	c9 61		cmp #$61	                CMP #$61              ; "a"
.393014	90 06		bcc $39301c	                BCC CAPS_NO_CHANGE ;
.393016	c9 7b		cmp #$7b	                CMP #$7B              ; '{'  Char after 'z'
.393018	b0 02		bcs $39301c	                BCS CAPS_NO_CHANGE ;
.39301a	29 df		and #$df	                AND #$DF    ; remove the $20 in $61
.39301c					CAPS_NO_CHANGE
.39301c	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.393020	e8		inx		                INX
.393021	86 52		stx $52		                STX KEY_BUFFER_WPOS
.393023	a9 00		lda #$00	                LDA #$00
.393025	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X   ; Store a EOL in the following location for good measure
.393029	80 1b		bra $393046	                BRA EXIT_SAVE2_CMDLINE
.39302b					CHECK_LOWERTHANSPACE
.39302b	c9 08		cmp #$08	                CMP #$08    ; BackSpace
.39302d	f0 19		beq $393048	                BEQ GO_BACKTHEPOINTER;
.39302f	c9 0d		cmp #$0d	                CMP #$0D    ; Check to see if the incomming Character is a Cariage Return
.393031	d0 d0		bne $393003	                BNE NOT_CARRIAGE_RETURN
.393033	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.393037	a2 00 00	ldx #$0000	                LDX #$0000
.39303a	86 50		stx $50		                STX KEY_BUFFER_RPOS
.39303c	af 83 0f 00	lda $000f83	                LDA @lKEY_BUFFER_CMD
.393040	09 01		ora #$01	                ORA #$01      ; Set Bit 0 - to indicate that there is a command to process
.393042	8f 83 0f 00	sta $000f83	                STA @lKEY_BUFFER_CMD
.393046					EXIT_SAVE2_CMDLINE
.393046	2b		pld		                PLD
.393047	6b		rtl		                RTL
.393048					GO_BACKTHEPOINTER
.393048	a9 00		lda #$00	                LDA #$00
.39304a	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.39304e	e0 00 00	cpx #$0000	                CPX #$0000
.393051	f0 f3		beq $393046	                BEQ EXIT_SAVE2_CMDLINE
.393053	ca		dex		                DEX
.393054	80 f0		bra $393046	                BRA EXIT_SAVE2_CMDLINE
.393056					PROCESS_COMMAND_LINE
.393056	08		php		                PHP
.393057	c2 10		rep #$10	                REP #$10        ; set X long
.393059	e2 20		sep #$20	                SEP #$20        ; set A short
.39305b	a2 00 00	ldx #$0000	                LDX #$0000
.39305e	86 52		stx $52		                STX KEY_BUFFER_WPOS
.393060	a6 50		ldx $50		                LDX KEY_BUFFER_RPOS ; Load the Read Pointer
.393062					NOT_VALID_CHAR4CMD
.393062	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.393066	c9 0d		cmp #$0d	                CMP #$0D              ; Check for Carriage Return
.393068	f0 24		beq $39308e	                BEQ NO_CMD_2_PROCESS  ; Exit, if the first char is a Carriage return
.39306a	c9 41		cmp #$41	                CMP #$41              ; Smaller than "A"
.39306c	90 04		bcc $393072	                BCC NOT_A_VALIDCHAR   ; check for space before the Command
.39306e	c9 5b		cmp #$5b	                CMP #$5B              ; Smaller than "Z" We are going to accept the character
.393070	90 08		bcc $39307a	                BCC VALIDCHAR_GO_FIND_CMD;
.393072					NOT_A_VALIDCHAR
.393072	e8		inx		                INX
.393073	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE
.393076	d0 ea		bne $393062	                BNE NOT_VALID_CHAR4CMD
.393078	f0 0d		beq $393087	                BEQ ERROR_BUFFER_OVERRUN  ; This means that we have reached the end of Buffer
.39307a					VALIDCHAR_GO_FIND_CMD
.39307a	20 99 30	jsr $393099	                JSR HOWMANYCHARINCMD  ; Comming back from this Routine we know the size of the Command
.39307d	c0 10 00	cpy #$0010	                CPY #$0010            ; if the value of the size of the command is 16, then it is not a legit command
.393080	b0 0e		bcs $393090	                BCS NOTRECOGNIZEDCOMMAND  ; This will output a Command Not Recognized
.393082	20 b2 30	jsr $3930b2	                JSR FINDCMDINLIST     ; This is where, it gets really cool
.393085	80 07		bra $39308e	                BRA DONE_COMMANDPROCESS
.393087					ERROR_BUFFER_OVERRUN
.393087	a2 3c 36	ldx #$363c	                LDX #<>CMD_Error_Overrun
.39308a	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.39308e					DONE_COMMANDPROCESS
.39308e					NO_CMD_2_PROCESS
.39308e	28		plp		                PLP
.39308f	6b		rtl		                RTL
.393090					NOTRECOGNIZEDCOMMAND
.393090	a2 56 36	ldx #$3656	                LDX #<>CMD_Error_Notfound
.393093	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.393097	28		plp		                PLP
.393098	60		rts		                RTS
.393099					HOWMANYCHARINCMD
.393099	a0 00 00	ldy #$0000	                LDY #$0000
.39309c	da		phx		                PHX ; Push X to Stack for the time being
.39309d					ENDOFCOMMANDNOTFOUND
.39309d	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.3930a1	c9 20		cmp #$20	                CMP #$20              ; Check for a Space
.3930a3	f0 0b		beq $3930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.3930a5	c9 0d		cmp #$0d	                CMP #$0D              ; Check to see end of Command (if there is no arguments)
.3930a7	f0 07		beq $3930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.3930a9	e8		inx		                INX
.3930aa	c8		iny		                INY
.3930ab	c0 10 00	cpy #$0010	                CPY #$0010              ; Set the Maximum number of Character to 16 in the command
.3930ae	90 ed		bcc $39309d	                BCC ENDOFCOMMANDNOTFOUND
.3930b0					FOUNDTHEFOLLOWINGSPACE
.3930b0	fa		plx		                PLX ; Get the Pointer Location of the First Character of the Command
.3930b1	60		rts		                RTS
.3930b2					FINDCMDINLIST
.3930b2	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Save X for the Time Being
.3930b4	84 42		sty $42		                STY CMD_PARSER_TMPY   ; Save Y for the Time Being
.3930b6	c2 20		rep #$20	                REP #$20        ; set A long
.3930b8	a9 6f 35	lda #$356f	                LDA #<>CMDListPtr
.3930bb	85 44		sta $44		                STA CMD_LIST_PTR
.3930bd	a9 00 00	lda #$0000	                LDA #$0000  ; Just to make sure B is zero
.3930c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3930c2	a9 39		lda #$39	                LDA #`CMDListPtr
.3930c4	85 46		sta $46		                STA CMD_LIST_PTR+2
.3930c6	a0 00 00	ldy #$0000	                LDY #$0000
.3930c9	84 54		sty $54		                STY CMD_VARIABLE_TMP
.3930cb					NOTTHERIGHTSIZEMOVEON
.3930cb	a4 54		ldy $54		                LDY CMD_VARIABLE_TMP
.3930cd	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.3930cf	85 48		sta $48		                STA CMD_PARSER_PTR
.3930d1	c8		iny		                INY
.3930d2	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.3930d4	85 49		sta $49		                STA CMD_PARSER_PTR+1
.3930d6	c8		iny		                INY
.3930d7	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.3930d9	85 4a		sta $4a		                STA CMD_PARSER_PTR+2
.3930db	c8		iny		                INY
.3930dc	c0 3f 00	cpy #$003f	                CPY #size(CMDListPtr)
.3930df	b0 41		bcs $393122	                BCS COMMANDNOTFOUND   ; If we reach that limit then the Count didn't match any command in place
.3930e1	84 54		sty $54		                STY CMD_VARIABLE_TMP
.3930e3	a7 48		lda [$48]	                LDA [CMD_PARSER_PTR] ;
.3930e5	c5 42		cmp $42		                CMP CMD_PARSER_TMPY ;
.3930e7	d0 e2		bne $3930cb	                BNE NOTTHERIGHTSIZEMOVEON
.3930e9	20 2a 31	jsr $39312a	                JSR CHECKSYNTAX       ; Now we have found a Command in the list that matches the number of Char, let's see if this is one if we are looking for
.3930ec	b0 dd		bcs $3930cb	                BCS NOTTHERIGHTSIZEMOVEON ; Failed to Find
.3930ee	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Just to make sure, this is where the Pointer in the line buffer is...
.3930f0	c8		iny		                INY   ; Point to after the $00, the next 2 bytes are the Attributes
.3930f1	a9 ff		lda #$ff	                LDA #$FF
.3930f3	85 5d		sta $5d		                STA CMD_VALID
.3930f5	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.3930f7	85 4b		sta $4b		                STA CMD_ATTRIBUTE
.3930f9	c8		iny		                INY
.3930fa	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.3930fc	85 4c		sta $4c		                STA CMD_ATTRIBUTE+1
.3930fe	c8		iny		                INY   ; This will point towards the Jumping Vector for the execution of the Command
.3930ff	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.393101	85 4d		sta $4d		                STA CMD_EXEC_ADDY
.393103	c8		iny		                INY
.393104	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.393106	85 4e		sta $4e		                STA CMD_EXEC_ADDY+1
.393108	c8		iny		                INY
.393109	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.39310b	85 4f		sta $4f		                STA CMD_EXEC_ADDY+2
.39310d	a6 4b		ldx $4b		                LDX CMD_ATTRIBUTE
.39310f	e0 00 00	cpx #$0000	                CPX #$0000
.393112	f0 09		beq $39311d	                BEQ NO_ATTRIBUTE_GO_EXEC
.393114	20 43 31	jsr $393143	                JSR PROCESS_ARGUMENTS
.393117	a5 5d		lda $5d		                LDA CMD_VALID
.393119	c9 ff		cmp #$ff	                CMP #$FF
.39311b	f0 0c		beq $393129	                BEQ EXITWITHERROR       ; if Carry Set
.39311d					NO_ATTRIBUTE_GO_EXEC
.39311d	e2 20		sep #$20	                SEP #$20        ; set A short
.39311f	dc 4d 00	jmp [$004d]	                JML [CMD_EXEC_ADDY]
.393122					COMMANDNOTFOUND
.393122	a2 56 36	ldx #$3656	                LDX #<>CMD_Error_Notfound
.393125	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.393129					EXITWITHERROR
.393129	60		rts		                RTS
.39312a					CHECKSYNTAX
.39312a	a0 01 00	ldy #$0001	                LDY #$0001      ; Point towards the Next Byte after the Size
.39312d	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer in the Line Buffer where the First Character ought to be...
.39312f					CHECKSYNTAXNEXTCHAR
.39312f	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.393131	c9 00		cmp #$00	                CMP #$00  ; End of Character Check, if we reach that point, then we are on our way to have something happening! Call mom and dad and tell them how they failed to be good parents! Like all parents
.393133	f0 0c		beq $393141	                BEQ SUCCESSFOUNDCOMMAND
.393135	df 00 0f 00	cmp $000f00,x	                CMP @lKEY_BUFFER, X   ;
.393139	d0 04		bne $39313f	                BNE CHARDONTMATCH
.39313b	e8		inx		                INX
.39313c	c8		iny		                INY
.39313d	80 f0		bra $39312f	                BRA CHECKSYNTAXNEXTCHAR
.39313f	38		sec		CHARDONTMATCH   SEC
.393140	60		rts		                RTS
.393141					SUCCESSFOUNDCOMMAND
.393141	18		clc		                CLC
.393142	60		rts		                RTS
.393143					PROCESS_ARGUMENTS
.393143	c2 30		rep #$30	                REP #$30        ; set A&X long
.393145	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer after the command
.393147	20 05 32	jsr $393205	                JSR MOVE_POINTER_2_ARG  ; If there is supposed to be a parameter, this will go and fetch the next valid char
.39314a	90 03		bcc $39314f	                BCC ATTRIBUTE_2_PROCESS
.39314c	e2 20		sep #$20	                SEP #$20        ; set A short
.39314e	60		rts		                RTS
.39314f					ATTRIBUTE_2_PROCESS
.39314f	c2 20		rep #$20	                REP #$20        ; set A long
.393151	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.393153	29 01 00	and #$0001	                AND #CMD_ARGTYPE_DEV    ; This is to know, if it is for a Flppy or for the SDCard
.393156	c9 01 00	cmp #$0001	                CMP #CMD_ARGTYPE_DEV
.393159	d0 08		bne $393163	                BNE NOT_CMD_ARGTYPE_DEV ; Device Type @S, @F, @C, @P
.39315b	20 37 32	jsr $393237	                JSR FIND_CMD_ARGTYPE_DEV
.39315e	90 03		bcc $393163	                BCC NOT_CMD_ARGTYPE_DEV
.393160	e2 20		sep #$20	                SEP #$20        ; set A short
.393162	60		rts		                RTS
.393163					NOT_CMD_ARGTYPE_DEV
.393163	c2 20		rep #$20	                REP #$20        ; set A long
.393165	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.393167	29 02 00	and #$0002	                AND #CMD_ARGTYPE_FN
.39316a	c9 02 00	cmp #$0002	                CMP #CMD_ARGTYPE_FN
.39316d	d0 08		bne $393177	                BNE NOT_CMD_ARGTYPE_FN
.39316f	20 56 32	jsr $393256	                JSR FIND_CMD_ARGTYPE_FN ; File Name
.393172	90 03		bcc $393177	                BCC NOT_CMD_ARGTYPE_FN
.393174	e2 20		sep #$20	                SEP #$20        ; set A short
.393176	60		rts		                RTS
.393177					NOT_CMD_ARGTYPE_FN
.393177	c2 20		rep #$20	                REP #$20        ; set A long
.393179	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.39317b	29 04 00	and #$0004	                AND #CMD_ARGTYPE_SA
.39317e	c9 04 00	cmp #$0004	                CMP #CMD_ARGTYPE_SA
.393181	d0 03		bne $393186	                BNE NOT_CMD_ARGTYPE_SA; Starting Address (Source)
.393183	20 8b 32	jsr $39328b	                JSR FIND_CMD_ARGTYPE_SA
.393186					NOT_CMD_ARGTYPE_SA
.393186	c2 20		rep #$20	                REP #$20        ; set A long
.393188	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.39318a	29 08 00	and #$0008	                AND #CMD_ARGTYPE_EA
.39318d	c9 08 00	cmp #$0008	                CMP #CMD_ARGTYPE_EA
.393190	d0 03		bne $393195	                BNE NOT_CMD_ARGTYPE_EA ; Ending Address (Destination)
.393192	20 90 32	jsr $393290	                JSR FIND_CMD_ARGTYPE_EA
.393195					NOT_CMD_ARGTYPE_EA
.393195	c2 20		rep #$20	                REP #$20        ; set A long
.393197	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.393199	29 10 00	and #$0010	                AND #CMD_ARGTYPE_8D
.39319c	c9 10 00	cmp #$0010	                CMP #CMD_ARGTYPE_8D
.39319f	d0 03		bne $3931a4	                BNE NOT_CMD_ARGTYPE_8D
.3931a1	20 95 32	jsr $393295	                JSR FIND_CMD_ARGTYPE_8D ; 8bits Data
.3931a4					NOT_CMD_ARGTYPE_8D
.3931a4	c2 20		rep #$20	                REP #$20        ; set A long
.3931a6	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931a8	29 20 00	and #$0020	                AND #CMD_ARGTYPE_16D
.3931ab	c9 20 00	cmp #$0020	                CMP #CMD_ARGTYPE_16D
.3931ae	d0 03		bne $3931b3	                BNE NOT_CMD_ARGTYPE_16D
.3931b0	20 9a 32	jsr $39329a	                JSR FIND_CMD_ARGTYPE_16D; 16bit Data
.3931b3					NOT_CMD_ARGTYPE_16D
.3931b3	c2 20		rep #$20	                REP #$20        ; set A long
.3931b5	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931b7	29 40 00	and #$0040	                AND #CMD_ARGTYPE_TIM
.3931ba	c9 40 00	cmp #$0040	                CMP #CMD_ARGTYPE_TIM
.3931bd	d0 03		bne $3931c2	                BNE NOT_CMD_ARGTYPE_TIM
.3931bf	20 9f 32	jsr $39329f	                JSR FIND_CMD_ARGTYPE_TIM ; Time HH:MM:SS
.3931c2					NOT_CMD_ARGTYPE_TIM
.3931c2	c2 20		rep #$20	                REP #$20        ; set A long
.3931c4	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931c6	29 80 00	and #$0080	                AND #CMD_ARGTYPE_DAT
.3931c9	c9 80 00	cmp #$0080	                CMP #CMD_ARGTYPE_DAT
.3931cc	d0 03		bne $3931d1	                BNE NOT_CMD_ARGTYPE_DAT
.3931ce	20 a4 32	jsr $3932a4	                JSR FIND_CMD_ARGTYPE_DAT ; DD/MM/YY, SAT
.3931d1					NOT_CMD_ARGTYPE_DAT
.3931d1	c2 20		rep #$20	                REP #$20        ; set A long
.3931d3	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931d5	29 00 01	and #$0100	                AND #CMD_ARGTYPE_RGB
.3931d8	c9 00 01	cmp #$0100	                CMP #CMD_ARGTYPE_RGB
.3931db	d0 03		bne $3931e0	                BNE NOT_CMD_ARGTYPE_RGB ; 24bit Data
.3931dd	20 a9 32	jsr $3932a9	                JSR FIND_CMD_ARGTYPE_RGB;
.3931e0					NOT_CMD_ARGTYPE_RGB
.3931e0	c2 20		rep #$20	                REP #$20        ; set A long
.3931e2	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931e4	29 00 02	and #$0200	                AND #CMD_ARGTYPE_FN2
.3931e7	c9 00 02	cmp #$0200	                CMP #CMD_ARGTYPE_FN2
.3931ea	d0 03		bne $3931ef	                BNE NOT_CMD_ARGTYPE_FN2 ; Second File Name
.3931ec	20 ae 32	jsr $3932ae	                JSR FIND_CMD_ARGTYPE_FN2
.3931ef					NOT_CMD_ARGTYPE_FN2
.3931ef	c2 20		rep #$20	                REP #$20        ; set A long
.3931f1	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.3931f3	29 00 04	and #$0400	                AND #CMD_ARGTYPE_DEC
.3931f6	c9 00 04	cmp #$0400	                CMP #CMD_ARGTYPE_DEC
.3931f9	d0 03		bne $3931fe	                BNE NO_ATTRIBUTE_2_PROCESS
.3931fb	20 b3 32	jsr $3932b3	                JSR FIND_CMD_ARGTYPE_DEC
.3931fe					NO_ATTRIBUTE_2_PROCESS
.3931fe	e2 20		sep #$20	                SEP #$20        ; set A short
.393200	a9 00		lda #$00	                LDA #$00
.393202	85 5d		sta $5d		                STA CMD_VALID
.393204	60		rts		                RTS
.393205					MOVE_POINTER_2_ARG
.393205	e2 20		sep #$20	                SEP #$20        ; set A short
.393207					MOVE_POINTER_2_NEXT_SPACE
.393207	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.39320b	c9 0d		cmp #$0d	                CMP #$0D
.39320d	f0 12		beq $393221	                BEQ ERROR_PARAMETERMISSING
.39320f	c9 20		cmp #$20	                CMP #$20
.393211	d0 08		bne $39321b	                BNE POINTER_POINTING_NOT_A_SPACE_EXIT
.393213	e8		inx		                INX
.393214	e0 30 00	cpx #$0030	                CPX #$0030  ; If the Move Pointer gets
.393217	90 ee		bcc $393207	                BCC MOVE_POINTER_2_NEXT_SPACE
.393219	80 06		bra $393221	                BRA ERROR_PARAMETERMISSING
.39321b					POINTER_POINTING_NOT_A_SPACE_EXIT
.39321b	86 40		stx $40		                STX CMD_PARSER_TMPX
.39321d	c2 20		rep #$20	                REP #$20        ; set A long
.39321f	18		clc		                CLC
.393220	60		rts		                RTS
.393221					ERROR_PARAMETERMISSING
.393221	c2 20		rep #$20	                REP #$20        ; set A long
.393223	a2 ef 35	ldx #$35ef	                LDX #<>CMD_Error_Missing
.393226	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.39322a	38		sec		                SEC
.39322b	60		rts		                RTS
.39322c					ERROR_WRONGDEVICE
.39322c	c2 20		rep #$20	                REP #$20        ; set A long
.39322e	a2 0b 36	ldx #$360b	                LDX #<>CMD_Wrong_Device
.393231	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.393235	38		sec		                SEC
.393236	60		rts		                RTS
.393237					FIND_CMD_ARGTYPE_DEV
.393237	e2 20		sep #$20	                SEP #$20        ; set A short
.393239	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.39323d	c9 40		cmp #$40	                CMP #'@'
.39323f	d0 e0		bne $393221	                BNE ERROR_PARAMETERMISSING
.393241	e8		inx		                INX
.393242	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.393246	c9 53		cmp #$53	                CMP #'S'                ; Is it
.393248	f0 04		beq $39324e	                BEQ SDCARD_CHOICE
.39324a	c9 46		cmp #$46	                CMP #'F'
.39324c	d0 de		bne $39322c	                BNE ERROR_WRONGDEVICE
.39324e					SDCARD_CHOICE
.39324e	85 56		sta $56		                STA CMD_ARG_DEV
.393250	86 40		stx $40		                STX CMD_PARSER_TMPX
.393252	18		clc		                CLC
.393253	c2 20		rep #$20	                REP #$20        ; set A long
.393255	60		rts		                RTS
.393256					FIND_CMD_ARGTYPE_FN
.393256	a6 40		ldx $40		                LDX CMD_PARSER_TMPX
.393258	e8		inx		                INX
.393259	20 05 32	jsr $393205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.39325c	e2 20		sep #$20	                SEP #$20        ; set A short
.39325e	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.393262	c9 2c		cmp #$2c	                CMP #','
.393264	d0 bb		bne $393221	                BNE ERROR_PARAMETERMISSING
.393266	e8		inx		                INX
.393267	20 05 32	jsr $393205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.39326a	e2 20		sep #$20	                SEP #$20        ; set A short
.39326c	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.393270	c9 22		cmp #$22	                CMP #'"'
.393272	d0 ad		bne $393221	                BNE ERROR_PARAMETERMISSING
.393274	a0 00 00	ldy #$0000	                LDY #$0000
.393277	e8		inx		                INX
.393278					KEEP_READING_FN
.393278	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.39327c	c9 22		cmp #$22	                CMP #'"'
.39327e	f0 0a		beq $39328a	                BEQ DONE_FILE_SAVE
.393280	99 80 03	sta $0380,y	                STA SDOS_FILE_NAME,Y
.393283	e8		inx		                INX
.393284	c8		iny		                INY
.393285	c0 10 00	cpy #$0010	                CPY #$0010
.393288	d0 ee		bne $393278	                BNE KEEP_READING_FN
.39328a					DONE_FILE_SAVE
.39328a	60		rts		                RTS
.39328b					FIND_CMD_ARGTYPE_SA
.39328b	48		pha		                PHA
.39328c	c2 20		rep #$20	                REP #$20        ; set A long
.39328e	68		pla		                PLA
.39328f	60		rts		                RTS
.393290					FIND_CMD_ARGTYPE_EA
.393290	48		pha		                PHA
.393291	c2 20		rep #$20	                REP #$20        ; set A long
.393293	68		pla		                PLA
.393294	60		rts		                RTS
.393295					FIND_CMD_ARGTYPE_8D
.393295	48		pha		                PHA
.393296	c2 20		rep #$20	                REP #$20        ; set A long
.393298	68		pla		                PLA
.393299	60		rts		                RTS
.39329a					FIND_CMD_ARGTYPE_16D
.39329a	48		pha		                PHA
.39329b	c2 20		rep #$20	                REP #$20        ; set A long
.39329d	68		pla		                PLA
.39329e	60		rts		                RTS
.39329f					FIND_CMD_ARGTYPE_TIM
.39329f	48		pha		                PHA
.3932a0	c2 20		rep #$20	                REP #$20        ; set A long
.3932a2	68		pla		                PLA
.3932a3	60		rts		                RTS
.3932a4					FIND_CMD_ARGTYPE_DAT
.3932a4	48		pha		                PHA
.3932a5	c2 20		rep #$20	                REP #$20        ; set A long
.3932a7	68		pla		                PLA
.3932a8	60		rts		                RTS
.3932a9					FIND_CMD_ARGTYPE_RGB
.3932a9	48		pha		                PHA
.3932aa	c2 20		rep #$20	                REP #$20        ; set A long
.3932ac	68		pla		                PLA
.3932ad	60		rts		                RTS
.3932ae					FIND_CMD_ARGTYPE_FN2
.3932ae	48		pha		                PHA
.3932af	c2 20		rep #$20	                REP #$20        ; set A long
.3932b1	68		pla		                PLA
.3932b2	60		rts		                RTS
.3932b3					FIND_CMD_ARGTYPE_DEC
.3932b3	48		pha		                PHA
.3932b4	c2 20		rep #$20	                REP #$20        ; set A long
.3932b6	68		pla		                PLA
.3932b7	60		rts		                RTS
.3932b8					ENTRY_CMD_CLS
.3932b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3932ba	c2 10		rep #$10	                REP #$10        ; set X long
.3932bc	a2 00 00	ldx #$0000	              LDX #$0000		; Only Use One Pointer
.3932bf	a9 20		lda #$20	              LDA #$20		; Fill the Entire Screen with Space
.3932c1	9f 00 a0 af	sta $afa000,x	CLEARSCREENL0	STA CS_TEXT_MEM_PTR, x	;
.3932c5	e8		inx		              inx
.3932c6	e0 00 20	cpx #$2000	              cpx #$2000
.3932c9	d0 f6		bne $3932c1	              bne CLEARSCREENL0
.3932cb	a2 00 00	ldx #$0000	              LDX	#$0000		; Only Use One Pointer
.3932ce	a9 ed		lda #$ed	              LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.3932d0	9f 00 c0 af	sta $afc000,x	CLEARSCREENL1	STA CS_COLOR_MEM_PTR, x	;
.3932d4	e8		inx		              inx
.3932d5	e0 00 20	cpx #$2000	              cpx #$2000
.3932d8	d0 f6		bne $3932d0	              bne CLEARSCREENL1
.3932da	a2 00 00	ldx #$0000	              LDX #$0000
.3932dd	86 52		stx $52		              STX KEY_BUFFER_WPOS
.3932df	86 50		stx $50		              STX KEY_BUFFER_RPOS
.3932e1	a0 00 00	ldy #$0000	              LDY #$0000
.3932e4	22 f5 06 39	jsl $3906f5	              JSL ILOCATE
.3932e8	60		rts		              RTS
.3932e9					ENTRY_CMD_DIR
.3932e9	a2 ae 35	ldx #$35ae	              LDX #<>DIR_COMMAND
.3932ec	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.3932f0	22 b1 83 39	jsl $3983b1	              JSL ISDOS_INIT
.3932f4	22 fe 83 39	jsl $3983fe	              JSL ISDOS_DIR
.3932f8	60		rts		              RTS
.3932f9					SDNOT_PRESENT
.3932f9	a2 63 36	ldx #$3663	              LDX #<>CMD_Error_SD_NotPresent
.3932fc	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.393300	60		rts		              RTS
.393301	60		rts		RTS
.393302					ENTRY_CMD_EXEC
.393302	a2 bc 35	ldx #$35bc	  LDX #<>EXEC_COMMAND
.393305	22 0c 06 39	jsl $39060c	  JSL IPRINT       ; print the first line
.393309	60		rts		RTS
.39330a					ENTRY_CMD_LOAD
.39330a	a2 d6 35	ldx #$35d6	LDX #<>LOAD_COMMAND
.39330d	22 0c 06 39	jsl $39060c	JSL IPRINT       ; print the first line
.393311	60		rts		RTS
.393312	60		rts		ENTRY_CMD_SAVE RTS
.393313	60		rts		ENTRY_CMD_PEEK8     RTS
.393314	60		rts		ENTRY_CMD_POKE8     RTS
.393315	60		rts		ENTRY_CMD_POKE16    RTS
.393316	60		rts		ENTRY_CMD_PEEK16    RTS
.393317	60		rts		ENTRY_CMD_RECWAV    RTS
.393318	60		rts		ENTRY_CMD_EXECFNX   RTS
.393319					ENTRY_CMD_GETDATE
.393319	e2 20		sep #$20	                SEP #$20        ; set A short
.39331b	af 06 08 af	lda $af0806	              LDA @lRTC_DAY   ; Go Read the Hour Registers
.39331f	48		pha		              PHA
.393320	29 30		and #$30	              AND #$30
.393322	4a		lsr a		              LSR A
.393323	4a		lsr a		              LSR A
.393324	4a		lsr a		              LSR A
.393325	4a		lsr a		              LSR A
.393326	09 30		ora #$30	              ORA #$30
.393328	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39332c	68		pla		              PLA
.39332d	29 0f		and #$0f	              AND #$0F
.39332f	09 30		ora #$30	              ORA #$30
.393331	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393335	a9 2f		lda #$2f	              LDA #'/'
.393337	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39333b	af 09 08 af	lda $af0809	              LDA @lRTC_MONTH   ; Go Read the Min Registers
.39333f	48		pha		              PHA
.393340	29 10		and #$10	              AND #$10
.393342	4a		lsr a		              LSR A
.393343	4a		lsr a		              LSR A
.393344	4a		lsr a		              LSR A
.393345	4a		lsr a		              LSR A
.393346	69 30		adc #$30	              ADC #$30
.393348	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39334c	68		pla		              PLA
.39334d	29 0f		and #$0f	              AND #$0F
.39334f	09 30		ora #$30	              ORA #$30
.393351	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393355	a9 2f		lda #$2f	              LDA #'/'
.393357	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39335b	af 0a 08 af	lda $af080a	              LDA @lRTC_YEAR   ; Go Read the Sec Registers
.39335f	48		pha		              PHA
.393360	29 f0		and #$f0	              AND #$F0
.393362	4a		lsr a		              LSR A
.393363	4a		lsr a		              LSR A
.393364	4a		lsr a		              LSR A
.393365	4a		lsr a		              LSR A
.393366	09 30		ora #$30	              ORA #$30
.393368	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39336c	68		pla		              PLA
.39336d	29 0f		and #$0f	              AND #$0F
.39336f	09 30		ora #$30	              ORA #$30
.393371	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393375	a9 2c		lda #$2c	              LDA #','
.393377	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39337b	af 08 08 af	lda $af0808	              LDA @lRTC_DOW
.39337f	3a		dec a		              DEC A
.393380	0a		asl a		              ASL A
.393381	0a		asl a		              ASL A
.393382	aa		tax		              TAX
.393383					GO_PUTC_THE_DOW
.393383	bf 80 36 39	lda $393680,x	              LDA @lDOW,X
.393387	c9 00		cmp #$00	              CMP #$00
.393389	f0 09		beq $393394	              BEQ DOW_IPUTC_DONE
.39338b	e8		inx		              INX
.39338c	da		phx		              PHX
.39338d	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393391	fa		plx		              PLX
.393392	80 ef		bra $393383	              BRA GO_PUTC_THE_DOW
.393394					DOW_IPUTC_DONE
.393394	a9 0d		lda #$0d	              LDA #$0D
.393396	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39339a	60		rts		              RTS
.39339b					ENTRY_CMD_GETTIME
.39339b	e2 20		sep #$20	                SEP #$20        ; set A short
.39339d	af 04 08 af	lda $af0804	              LDA @lRTC_HRS   ; Go Read the Hour Registers
.3933a1	48		pha		              PHA
.3933a2	29 30		and #$30	              AND #$30
.3933a4	4a		lsr a		              LSR A
.3933a5	4a		lsr a		              LSR A
.3933a6	4a		lsr a		              LSR A
.3933a7	4a		lsr a		              LSR A
.3933a8	09 30		ora #$30	              ORA #$30
.3933aa	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933ae	68		pla		              PLA
.3933af	29 0f		and #$0f	              AND #$0F
.3933b1	09 30		ora #$30	              ORA #$30
.3933b3	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933b7	a9 3a		lda #$3a	              LDA #':'
.3933b9	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933bd	af 02 08 af	lda $af0802	              LDA @lRTC_MIN   ; Go Read the Min Registers
.3933c1	48		pha		              PHA
.3933c2	29 70		and #$70	              AND #$70
.3933c4	4a		lsr a		              LSR A
.3933c5	4a		lsr a		              LSR A
.3933c6	4a		lsr a		              LSR A
.3933c7	4a		lsr a		              LSR A
.3933c8	69 30		adc #$30	              ADC #$30
.3933ca	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933ce	68		pla		              PLA
.3933cf	29 0f		and #$0f	              AND #$0F
.3933d1	09 30		ora #$30	              ORA #$30
.3933d3	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933d7	a9 3a		lda #$3a	              LDA #':'
.3933d9	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933dd	af 00 08 af	lda $af0800	              LDA @lRTC_SEC   ; Go Read the Sec Registers
.3933e1	48		pha		              PHA
.3933e2	29 f0		and #$f0	              AND #$F0
.3933e4	4a		lsr a		              LSR A
.3933e5	4a		lsr a		              LSR A
.3933e6	4a		lsr a		              LSR A
.3933e7	4a		lsr a		              LSR A
.3933e8	09 30		ora #$30	              ORA #$30
.3933ea	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933ee	68		pla		              PLA
.3933ef	29 0f		and #$0f	              AND #$0F
.3933f1	09 30		ora #$30	              ORA #$30
.3933f3	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3933f7	af 04 08 af	lda $af0804	              LDA @lRTC_HRS
.3933fb	29 80		and #$80	              AND #$80
.3933fd	c9 80		cmp #$80	              CMP #$80
.3933ff	f0 08		beq $393409	              BEQ AMFMCHOICE
.393401	a9 41		lda #$41	              LDA #'A'
.393403	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393407	80 06		bra $39340f	              BRA GO_PUTC_THE_M
.393409					AMFMCHOICE
.393409	a9 50		lda #$50	              LDA #'P'
.39340b	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39340f					GO_PUTC_THE_M
.39340f	a9 4d		lda #$4d	              LDA #'M'
.393411	22 2c 06 39	jsl $39062c	              JSL IPUTC
.393415	a9 0d		lda #$0d	              LDA #$0D
.393417	22 2c 06 39	jsl $39062c	              JSL IPUTC
.39341b	60		rts		RTS
.39341c	60		rts		ENTRY_CMD_MONITOR   RTS
.39341d	60		rts		ENTRY_CMD_PLAYRAD   RTS
.39341e	60		rts		ENTRY_CMD_PLAYWAV   RTS
.39341f	60		rts		ENTRY_CMD_SETDATE   RTS
.393420	60		rts		ENTRY_CMD_SETTIME   RTS
.393421	60		rts		ENTRY_CMD_SYSINFO   RTS
.393422	60		rts		ENTRY_CMD_DISKCOPY  RTS
.393423	60		rts		ENTRY_CMD_SETTXTLUT RTS
.393424					CMD
>393424	03 43 4c 53 00 00 00 b8		CLS       .text $03, "CLS", $00, CMD_ARGTYPE_NO, ENTRY_CMD_CLS                                        ; Clear Screen
>39342c	32 39
>39342e	03 44 49 52 00 01 00 e9		DIR       .text $03, "DIR", $00, CMD_ARGTYPE_DEV, ENTRY_CMD_DIR                                       ; @F, @S
>393436	32 39
>393438	04 45 58 45 43 00 04 00		EXEC      .text $04, "EXEC", $00, CMD_ARGTYPE_SA, ENTRY_CMD_EXEC                                        ; EXEC S:$00000
>393440	02 33 39
>393443	04 4c 4f 41 44 00 0b 00		LOAD      .text $04, "LOAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_EA), ENTRY_CMD_LOAD   ; "LOAD @F, "NAME.XXX", D:$000000
>39344b	0a 33 39
>39344e	04 53 41 56 45 00 0f 00		SAVE      .text $04, "SAVE", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_SA | CMD_ARGTYPE_EA), ENTRY_CMD_SAVE           ; SAVE @F, "NAME.XXX", S:$000000, D:$000000
>393456	12 33 39
>393459	06 50 45 45 4b 38 48 00		PEEK8     .text $06, "PEEK8H", $00,  CMD_ARGTYPE_SA, ENTRY_CMD_PEEK8       ; PEEK8 $000000
>393461	04 00 13 33 39
>393466	06 50 4f 4b 45 38 48 00		POKE8     .text $06, "POKE8H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_8D), ENTRY_CMD_POKE8          ; POKE8 $000000, $00
>39346e	14 00 14 33 39
>393473	06 52 45 43 57 41 56 00		RECWAV    .text $06, "RECWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN) , ENTRY_CMD_RECWAV          ; RECWAV @S, "NAME.XXX" (Samples)
>39347b	03 00 17 33 39
>393480	07 45 58 45 43 46 4e 58		EXECFNX   .text $07, "EXECFNX", $00, CMD_ARGTYPE_FN, ENTRY_CMD_EXECFNX        ; "EXECFNX "NAME.XXX"
>393488	00 02 00 18 33 39
>39348e	07 47 45 54 44 41 54 45		GETDATE   .text $07, "GETDATE", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETDATE       ; GETDATE
>393496	00 00 00 19 33 39
>39349c	07 47 45 54 54 49 4d 45		GETTIME   .text $07, "GETTIME", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETTIME        ; GETTIME
>3934a4	00 00 00 9b 33 39
>3934aa	07 4d 4f 4e 49 54 4f 52		MONITOR   .text $07, "MONITOR", $00, CMD_ARGTYPE_NO, ENTRY_CMD_MONITOR       ; MONITOR TBD
>3934b2	00 00 00 1c 34 39
>3934b8	07 50 4c 41 59 52 41 44		PLAYRAD   .text $07, "PLAYRAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYRAD        ; PLAYRAD @S, "NAME.XXX" (music File)
>3934c0	00 03 00 1d 34 39
>3934c6	07 50 4c 41 59 57 41 56		PLAYWAV   .text $07, "PLAYWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYWAV                ; PLAYWAV @S, "NAME.XXX" (samples)
>3934ce	00 03 00 1e 34 39
>3934d4	07 50 45 45 4b 31 36 48		PEEK16    .text $07, "PEEK16H", $00, CMD_ARGTYPE_SA, ENTRY_CMD_POKE16, ENTRY_CMD_PEEK16        ; PEEK16 $000000
>3934dc	00 04 00 15 33 39 16 33 39
>3934e5	07 50 4f 4b 45 31 36 48		POKE16    .text $07, "POKE16H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_16D), ENTRY_CMD_POKE16           ; POKE16 $000000, $0000
>3934ed	00 24 00 15 33 39
>3934f3	07 53 45 54 44 41 54 45		SETDATE   .text $07, "SETDATE", $00, CMD_ARGTYPE_DAT, ENTRY_CMD_SETDATE      ; SETDATE YY:MM:DD
>3934fb	00 80 00 1f 34 39
>393501	07 53 45 54 54 49 4d 45		SETTIME   .text $07, "SETTIME", $00, CMD_ARGTYPE_TIM, ENTRY_CMD_SETTIME       ; SETTIME HH:MM:SS
>393509	00 40 00 20 34 39
>39350f	04 53 59 53 49 4e 46 4f		SYSINFO   .text $04, "SYSINFO", $00, CMD_ARGTYPE_NO, ENTRY_CMD_SYSINFO
>393517	00 00 00 21 34 39
>39351d	08 44 49 53 4b 43 4f 50		DISKCOPY  .text $08, "DISKCOPY", $00, CMD_ARGTYPE_DEV, CMD_ARGTYPE_DEV, ENTRY_CMD_DISKCOPY           ; DISKCOPY @F, @F
>393525	59 00 01 00 01 00 22 34 39
>39352e	08 46 49 4c 45 43 4f 50		FILECOPY  .text $08, "FILECOPY", $00, (CMD_ARGTYPE_FN | CMD_ARGTYPE_FN2)
>393536	59 00 02 02
>39353a	08 53 45 54 42 47 43 4c		SETBGCLR  .text $08, "SETBGCLR", $00, CMD_ARGTYPE_DEC
>393542	52 00 00 04
>393546	08 53 45 54 46 47 43 4c		SETFGCLR  .text $08, "SETFGCLR", $00, CMD_ARGTYPE_DEC
>39354e	52 00 00 04
>393552	09 53 45 54 54 58 54 4c		SETTXTLUT .text $09, "SETTXTLUT", $00, (CMD_ARGTYPE_DAT | CMD_ARGTYPE_RGB), ENTRY_CMD_SETTXTLUT        ; SETLUT $00, $000000
>39355a	55 54 00 80 01 23 34 39
>393562	09 53 45 54 42 52 44 43		SETBRDCLR .text $09, "SETBRDCLR", $00, CMD_ARGTYPE_RGB
>39356a	4c 52 00 00 01
>39356f	24 34 39 2e 34 39 38 34		CMDListPtr .long CMD.CLS, CMD.DIR, CMD.EXEC, CMD.LOAD, CMD.SAVE, CMD.PEEK8, CMD.POKE8, CMD.PEEK16, CMD.POKE16, CMD.RECWAV, CMD.EXECFNX, CMD.GETDATE, CMD.GETTIME, CMD.MONITOR, CMD.PLAYRAD, CMD.PLAYWAV, CMD.SETDATE, CMD.SETTIME, CMD.SYSINFO, CMD.DISKCOPY, CMD.SETTXTLUT
>393577	39 43 34 39 4e 34 39 59 34 39 66 34 39 d4 34 39
>393587	e5 34 39 73 34 39 80 34 39 8e 34 39 9c 34 39 aa
>393597	34 39 b8 34 39 c6 34 39 f3 34 39 01 35 39 0f 35
>3935a7	39 1d 35 39 52 35 39
=$0000					CMD_ARGTYPE_NO    = $0000 ; No Argument
=$0001					CMD_ARGTYPE_DEV   = $0001 ; Device Type @S, @F
=$0002					CMD_ARGTYPE_FN    = $0002 ; File Name
=$0004					CMD_ARGTYPE_SA    = $0004 ; Starting Address (Source)
=$0008					CMD_ARGTYPE_EA    = $0008 ; Ending Address (Destination)
=$0010					CMD_ARGTYPE_8D    = $0010 ; 8bits Data
=$0020					CMD_ARGTYPE_16D   = $0020 ; 16bits Data
=$0040					CMD_ARGTYPE_TIM   = $0040 ; Time
=$0080					CMD_ARGTYPE_DAT   = $0080 ; Date
=$0100					CMD_ARGTYPE_RGB   = $0100 ; RGB Data (24Bit Data) for LUT mainly
=$0200					CMD_ARGTYPE_FN2   = $0200 ; Second File name
=$0400					CMD_ARGTYPE_DEC   = $0400 ; Decimal value
>3935ae	0d 40 53 44 43 41 52 44		DIR_COMMAND .text $0D, "@SDCARD:", $00
>3935b6	3a 00
>3935b8	43 4c 53 00			CLS_COMMAND .text "CLS", $00
>3935bc	45 58 45 43 20 43 6f 6d		EXEC_COMMAND .text "EXEC Command Executing...", $00
>3935c4	6d 61 6e 64 20 45 78 65 63 75 74 69 6e 67 2e 2e
>3935d4	2e 00
>3935d6	4c 4f 41 44 00			LOAD_COMMAND .text "LOAD", $00
>3935db	45 30 30 30 20 2d 20 53		CMD_Error_Syntax  .text "E000 - SYNTAX ERROR", $00
>3935e3	59 4e 54 41 58 20 45 52 52 4f 52 00
>3935ef	45 30 30 31 20 2d 20 4d		CMD_Error_Missing .text "E001 - MISSING PARAMETER(S)", $00
>3935f7	49 53 53 49 4e 47 20 50 41 52 41 4d 45 54 45 52
>393607	28 53 29 00
>39360b	45 30 30 32 20 2d 20 4e		CMD_Wrong_Device  .text "E002 - NO SUCH DEVICE EXISTS", $00
>393613	4f 20 53 55 43 48 20 44 45 56 49 43 45 20 45 58
>393623	49 53 54 53 00
>393628	57 72 6f 6e 67 20 50 61		CMD_Error_Wrong   .text "Wrong Parameters...", $00
>393630	72 61 6d 65 74 65 72 73 2e 2e 2e 00
>39363c	45 30 30 34 20 42 55 46		CMD_Error_Overrun .text "E004 BUFFER OVERRUN ERROR", $00
>393644	46 45 52 20 4f 56 45 52 52 55 4e 20 45 52 52 4f
>393654	52 00
>393656	53 59 4e 54 41 58 20 45		CMD_Error_Notfound .text "SYNTAX ERROR", $00
>39365e	52 52 4f 52 00
>393663	53 44 43 41 52 44 20 4e		CMD_Error_SD_NotPresent .text "SDCARD NOT PRESENT", $00
>39366b	4f 54 20 50 52 45 53 45 4e 54 00
>393676	53 44 43 41 52 44 20 57		CMD_Error_SD_WP .text "SDCARD WP", $00
>39367e	50 00
>393680	53 55 4e 00 4d 4f 4e 00		DOW      .text "SUN", $00, "MON", $00, "TUE", $00, "WED", $00, "THU", $00, "FRI", $00, "SAT", $00
>393688	54 55 45 00 57 45 44 00 54 48 55 00 46 52 49 00
>393698	53 41 54 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\monitor.asm

.398000	5c 5c 80 39	jmp $39805c	MONITOR         JML IMONITOR
.398004	5c 8a 80 39	jmp $39808a	MSTATUS         JML IMSTATUS
.398008	5c 68 80 39	jmp $398068	MREADY          JML IMREADY
.39800c	5c 35 81 39	jmp $398135	MRETURN         JML IMRETURN
.398010	5c 36 81 39	jmp $398136	MPARSE          JML IMPARSE
.398014	5c 37 81 39	jmp $398137	MPARSE1         JML IMPARSE1
.398018	5c 38 81 39	jmp $398138	MEXECUTE        JML IMEXECUTE
.39801c	5c 39 81 39	jmp $398139	MASSEMBLE       JML IMASSEMBLE
.398020	5c 3a 81 39	jmp $39813a	MASSEMBLEA      JML IMASSEMBLEA
.398024	5c 3b 81 39	jmp $39813b	MCOMPARE        JML IMCOMPARE
.398028	5c 3c 81 39	jmp $39813c	MDISASSEMBLE    JML IMDISASSEMBLE
.39802c	5c 3d 81 39	jmp $39813d	MFILL           JML IMFILL
.398030	5c 3f 81 39	jmp $39813f	MJUMP           JML IMJUMP
.398034	5c 40 81 39	jmp $398140	MHUNT           JML IMHUNT
.398038	5c 41 81 39	jmp $398141	MLOAD           JML IMLOAD
.39803c	5c 42 81 39	jmp $398142	MMEMORY         JML IMMEMORY
.398040	5c 43 81 39	jmp $398143	MREGISTERS      JML IMREGISTERS
.398044	5c 44 81 39	jmp $398144	MSAVE           JML IMSAVE
.398048	5c 45 81 39	jmp $398145	MTRANSFER       JML IMTRANSFER
.39804c	5c 46 81 39	jmp $398146	MVERIFY         JML IMVERIFY
.398050	5c 47 81 39	jmp $398147	MEXIT           JML IMEXIT
.398054	5c 48 81 39	jmp $398148	MMODIFY         JML IMMODIFY
.398058	5c 49 81 39	jmp $398149	MDOS            JML IMDOS
.39805c	18		clc		IMONITOR        CLC           ; clear the carry flag
.39805d	fb		xce		                XCE           ; move carry to emulation flag.
.39805e	c2 20		rep #$20	                REP #$20        ; set A long
.398060	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.398063	1b		tcs		                TAS
.398064	5c 68 80 39	jmp $398068	                JML IMREADY
.398068					IMREADY
.398068	c2 30		rep #$30	                REP #$30        ; set A&X long
.39806a	a9 68 80	lda #$8068	                LDA #<>IMREADY
.39806d	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.398070	e2 20		sep #$20	                SEP #$20        ; set A short
.398072	a9 39		lda #$39	                LDA #`IMREADY
.398074	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.398077	c2 20		rep #$20	                REP #$20        ; set A long
.398079	a9 35 81	lda #$8135	                LDA #<>IMRETURN
.39807c	8d f1 ff	sta $fff1	                STA RETURN+1
.39807f	e2 20		sep #$20	                SEP #$20        ; set A short
.398081	a9 39		lda #$39	                LDA #`IMRETURN
.398083	8d f3 ff	sta $fff3	                STA RETURN+3
.398086	5c 8a 80 39	jmp $39808a	                JML IMSTATUS
.39808a					IMSTATUS
.39808a	48		pha		                PHA             ; begin setdbr macro
.39808b	08		php		                PHP
.39808c	e2 20		sep #$20	                SEP #$20        ; set A short
.39808e	a9 39		lda #$39		            LDA #`mregisters_msg
.398090	48		pha		                PHA
.398091	ab		plb		                PLB
.398092	28		plp		                PLP
.398093	68		pla		                PLA             ; end setdbr macro
.398094	a2 50 81	ldx #$8150	                LDX #<>mregisters_msg
.398097	22 0c 06 39	jsl $39060c	                JSL IPRINT
.39809b	e2 20		sep #$20	                SEP #$20        ; set A short
.39809d	a9 3b		lda #$3b	                LDA #';'
.39809f	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3980a5	48		pha		                PHA             ; begin setdbr macro
.3980a6	08		php		                PHP
.3980a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3980a9	a9 00		lda #$00		            LDA #$0
.3980ab	48		pha		                PHA
.3980ac	ab		plb		                PLB
.3980ad	28		plp		                PLP
.3980ae	68		pla		                PLA             ; end setdbr macro
.3980af	a0 03 00	ldy #$0003	                LDY #3
.3980b2	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3980b5	22 53 07 39	jsl $390753	                JSL IPRINTH
.3980b9	a5 20		lda $20		                LDA ' '
.3980bb	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980bf	a0 02 00	ldy #$0002	                LDY #2
.3980c2	a2 45 02	ldx #$0245	                LDX #CPUA+1
.3980c5	22 53 07 39	jsl $390753	                JSL IPRINTH
.3980c9	a5 20		lda $20		                LDA ' '
.3980cb	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980cf	a0 02 00	ldy #$0002	                LDY #2
.3980d2	a2 47 02	ldx #$0247	                LDX #CPUX+1
.3980d5	22 53 07 39	jsl $390753	                JSL IPRINTH
.3980d9	a5 20		lda $20		                LDA ' '
.3980db	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980df	a0 02 00	ldy #$0002	                LDY #2
.3980e2	a2 49 02	ldx #$0249	                LDX #CPUY+1
.3980e5	22 53 07 39	jsl $390753	                JSL IPRINTH
.3980e9	a5 20		lda $20		                LDA ' '
.3980eb	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980ef	a0 02 00	ldy #$0002	                LDY #2
.3980f2	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.3980f5	22 53 07 39	jsl $390753	                JSL IPRINTH
.3980f9	a5 20		lda $20		                LDA ' '
.3980fb	22 2c 06 39	jsl $39062c	                JSL IPUTC
.3980ff	a0 01 00	ldy #$0001	                LDY #1
.398102	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.398105	22 53 07 39	jsl $390753	                JSL IPRINTH
.398109	a5 20		lda $20		                LDA ' '
.39810b	22 2c 06 39	jsl $39062c	                JSL IPUTC
.39810f	22 2c 06 39	jsl $39062c	                JSL IPUTC
.398113	a0 02 00	ldy #$0002	                LDY #2
.398116	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.398119	22 53 07 39	jsl $390753	                JSL IPRINTH
.39811d	a5 20		lda $20		                LDA ' '
.39811f	22 2c 06 39	jsl $39062c	                JSL IPUTC
.398123	a0 01 00	ldy #$0001	                LDY #1
.398126	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.398129	22 53 07 39	jsl $390753	                JSL IPRINTH
.39812d	22 5a 06 39	jsl $39065a	                JSL IPRINTCR
.398131	5c fa 05 39	jmp $3905fa	                JML IREADYWAIT
.398135	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.398136	00		brk #		IMPARSE         BRK ; Parse the current command line
.398137	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.398138	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.398139	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.39813a	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.39813b	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.39813c	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.39813d	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.39813e	00		brk #		IMGO            BRK ; Execute from specified address
.39813f	00		brk #		IMJUMP          BRK ; Execute from spefified address
.398140	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.398141	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.398142	00		brk #		IMMEMORY        BRK ; View memory
.398143	00		brk #		IMREGISTERS     BRK ; View/edit registers
.398144	00		brk #		IMSAVE          BRK ; Save memory to disk
.398145	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.398146	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.398147	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.398148	00		brk #		IMMODIFY        BRK ; Modify memory
.398149	00		brk #		IMDOS           BRK ; Execute DOS command
.39814a					MMESSAGES
>39814a	45 72 72 6f 72 00		MMERROR         .text "Error", $00
>398150	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>398158	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>398168	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>398178	4d 58 44 49 5a 43 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.39817f					IRQ_HANDLER
.39817f	e2 20		sep #$20	                SEP #$20        ; set A short
.398181	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.398185	c9 00		cmp #$00	                CMP #$00
.398187	f0 37		beq $3981c0	                BEQ CHECK_PENDING_REG1
.398189	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39818d	29 01		and #$01	                AND #FNX0_INT00_SOF
.39818f	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.398191	d0 09		bne $39819c	                BNE SERVICE_NEXT_IRQ6
.398193	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398197	20 0d 83	jsr $39830d	                JSR SOF_INTERRUPT
.39819a	e2 20		sep #$20	                SEP #$20        ; set A short
.39819c					SERVICE_NEXT_IRQ6
.39819c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981a0	29 40		and #$40	                AND #FNX0_INT06_FDC
.3981a2	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.3981a4	d0 09		bne $3981af	                BNE SERVICE_NEXT_IRQ7
.3981a6	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981aa	20 59 83	jsr $398359	                JSR FDC_INTERRUPT
.3981ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3981af					SERVICE_NEXT_IRQ7
.3981af	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981b3	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3981b5	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.3981b7	d0 07		bne $3981c0	                BNE CHECK_PENDING_REG1
.3981b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981bd	20 18 83	jsr $398318	                JSR MOUSE_INTERRUPT
.3981c0					CHECK_PENDING_REG1
.3981c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3981c2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981c6	c9 00		cmp #$00	                CMP #$00
.3981c8	f0 5d		beq $398227	                BEQ EXIT_IRQ_HANDLE
.3981ca					SERVICE_NEXT_IRQ8
.3981ca	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981ce	29 01		and #$01	                AND #FNX1_INT00_KBD
.3981d0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3981d2	d0 09		bne $3981dd	                BNE SERVICE_NEXT_IRQ11
.3981d4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981d8	20 2a 82	jsr $39822a	                JSR KEYBOARD_INTERRUPT
.3981db	e2 20		sep #$20	                SEP #$20        ; set A short
.3981dd					SERVICE_NEXT_IRQ11
.3981dd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981e1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3981e3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3981e5	d0 09		bne $3981f0	                BNE SERVICE_NEXT_IRQ12
.3981e7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981eb	20 64 83	jsr $398364	                JSR COM2_INTERRUPT
.3981ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3981f0					SERVICE_NEXT_IRQ12
.3981f0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981f4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3981f6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3981f8	d0 09		bne $398203	                BNE SERVICE_NEXT_IRQ13
.3981fa	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981fe	20 6f 83	jsr $39836f	                JSR COM1_INTERRUPT
.398201	e2 20		sep #$20	                SEP #$20        ; set A short
.398203					SERVICE_NEXT_IRQ13
.398203	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398207	29 20		and #$20	                AND #FNX1_INT05_MPU401
.398209	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.39820b	d0 09		bne $398216	                BNE SERVICE_NEXT_IRQ14
.39820d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398211	20 7a 83	jsr $39837a	                JSR MPU401_INTERRUPT
.398214	e2 20		sep #$20	                SEP #$20        ; set A short
.398216					SERVICE_NEXT_IRQ14
.398216	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39821a	29 40		and #$40	                AND #FNX1_INT06_LPT
.39821c	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.39821e	d0 07		bne $398227	                BNE EXIT_IRQ_HANDLE
.398220	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398224	20 85 83	jsr $398385	                JSR LPT1_INTERRUPT
.398227					EXIT_IRQ_HANDLE
.398227	c2 30		rep #$30	                REP #$30        ; set A&X long
.398229	6b		rtl		                RTL
.39822a					KEYBOARD_INTERRUPT
.39822a	a2 00 00	ldx #$0000	                ldx #$0000
.39822d	e2 10		sep #$10	                SEP #$10        ; set X short
.39822f	e2 20		sep #$20	                SEP #$20        ; set A short
.398231	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398235	29 01		and #$01	                AND #FNX1_INT00_KBD
.398237	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39823b					IRQ_HANDLER_FETCH
.39823b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.39823f	8d 88 0f	sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.398242	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.398244	d0 03		bne $398249	                BNE NOT_KB_SET_SHIFT
.398246	82 75 00	brl $3982be	                BRL KB_SET_SHIFT
.398249					NOT_KB_SET_SHIFT
.398249	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.39824b	d0 03		bne $398250	                BNE NOT_KB_CLR_SHIFT
.39824d	82 79 00	brl $3982c9	                BRL KB_CLR_SHIFT
.398250					NOT_KB_CLR_SHIFT
.398250	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.398252	d0 03		bne $398257	                BNE NOT_KB_SET_CTRL
.398254	82 7d 00	brl $3982d4	                BRL KB_SET_CTRL
.398257					NOT_KB_SET_CTRL
.398257	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.398259	d0 03		bne $39825e	                BNE NOT_KB_CLR_CTRL
.39825b	82 81 00	brl $3982df	                BRL KB_CLR_CTRL
.39825e					NOT_KB_CLR_CTRL
.39825e	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.398260	d0 03		bne $398265	                BNE NOT_KB_SET_ALT
.398262	82 85 00	brl $3982ea	                BRL KB_SET_ALT
.398265					NOT_KB_SET_ALT
.398265	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.398267	d0 03		bne $39826c	                BNE KB_UNPRESSED
.398269	82 89 00	brl $3982f5	                BRL KB_CLR_ALT
.39826c	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.39826e	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.398270	d0 03		bne $398275	                BNE KB_NORM_SC
.398272	82 88 00	brl $3982fd	                BRL KB_CHECK_B_DONE
.398275	ad 88 0f	lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.398278	aa		tax		                TAX
.398279	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.39827c	29 10		and #$10	                AND #$10
.39827e	c9 10		cmp #$10	                CMP #$10
.398280	f0 19		beq $39829b	                BEQ SHIFT_KEY_ON
.398282	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.398285	29 20		and #$20	                AND #$20
.398287	c9 20		cmp #$20	                CMP #$20
.398289	f0 17		beq $3982a2	                BEQ CTRL_KEY_ON
.39828b	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.39828e	29 40		and #$40	                AND #$40
.398290	c9 40		cmp #$40	                CMP #$40
.398292	f0 15		beq $3982a9	                BEQ ALT_KEY_ON
.398294	bf 00 16 39	lda $391600,x	                LDA @lScanCode_Press_Set1, x
.398298	82 12 00	brl $3982ad	                BRL KB_WR_2_SCREEN
.39829b	bf 80 16 39	lda $391680,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.39829f	82 0b 00	brl $3982ad	                BRL KB_WR_2_SCREEN
.3982a2	bf 00 17 39	lda $391700,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3982a6	82 04 00	brl $3982ad	                BRL KB_WR_2_SCREEN
.3982a9	bf 80 17 39	lda $391780,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3982ad					KB_WR_2_SCREEN
.3982ad	48		pha		                PHA
.3982ae	c2 10		rep #$10	                REP #$10        ; set X long
.3982b0	22 00 30 39	jsl $393000	                JSL SAVECHAR2CMDLINE
.3982b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3982b6	68		pla		                PLA
.3982b7	22 18 00 39	jsl $390018	                JSL PUTC
.3982bb	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982be	ad 87 0f	lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3982c1	09 10		ora #$10	                ORA #$10
.3982c3	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982c6	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982c9	ad 87 0f	lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3982cc	29 ef		and #$ef	                AND #$EF
.3982ce	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982d1	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982d4	ad 87 0f	lda $0f87	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.3982d7	09 20		ora #$20	                ORA #$20
.3982d9	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982dc	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982df	ad 87 0f	lda $0f87	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.3982e2	29 df		and #$df	                AND #$DF
.3982e4	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982e7	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982ea	ad 87 0f	lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3982ed	09 40		ora #$40	                ORA #$40
.3982ef	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982f2	4c fd 82	jmp $3982fd	                JMP KB_CHECK_B_DONE
.3982f5	ad 87 0f	lda $0f87	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.3982f8	29 bf		and #$bf	                AND #$BF
.3982fa	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.3982fd					KB_CHECK_B_DONE
.3982fd	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.398301	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.398303	c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.398305	d0 03		bne $39830a	                BNE KB_DONE
.398307	4c 3b 82	jmp $39823b	                JMP IRQ_HANDLER_FETCH
.39830a					KB_DONE
.39830a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39830c	60		rts		                RTS
.39830d					SOF_INTERRUPT
.39830d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.398311	29 01		and #$01	                AND #FNX0_INT00_SOF
.398313	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398317	60		rts		                RTS
.398318					MOUSE_INTERRUPT
.398318	e2 20		sep #$20	                SEP #$20        ; set A short
.39831a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39831e	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.398320	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398324	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.398328	a2 00 00	ldx #$0000	                LDX #$0000
.39832b	e2 10		sep #$10	                SEP #$10        ; set X short
.39832d	a6 e0		ldx $e0		                LDX MOUSE_PTR
.39832f	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.398333	e8		inx		                INX
.398334	e0 03		cpx #$03	                CPX #$03
.398336	d0 1c		bne $398354	                BNE EXIT_FOR_NEXT_VALUE
.398338	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.39833c	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.39833e	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.398342	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.398344	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.398348	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.39834a	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.39834e	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.398350	e2 20		sep #$20	                SEP #$20        ; set A short
.398352	a2 00		ldx #$00	                LDX #$00
.398354					EXIT_FOR_NEXT_VALUE
.398354	86 e0		stx $e0		                STX MOUSE_PTR
.398356	c2 10		rep #$10	                REP #$10        ; set X long
.398358	60		rts		                RTS
.398359					FDC_INTERRUPT
.398359	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39835d	29 40		and #$40	                AND #FNX0_INT06_FDC
.39835f	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398363	60		rts		                RTS
.398364					COM2_INTERRUPT
.398364	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398368	29 08		and #$08	                AND #FNX1_INT03_COM2
.39836a	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39836e	60		rts		                RTS
.39836f					COM1_INTERRUPT
.39836f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398373	29 10		and #$10	                AND #FNX1_INT04_COM1
.398375	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398379	60		rts		                RTS
.39837a					MPU401_INTERRUPT
.39837a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39837e	29 20		and #$20	                AND #FNX1_INT05_MPU401
.398380	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398384	60		rts		                RTS
.398385					LPT1_INTERRUPT
.398385	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398389	29 40		and #$40	                AND #FNX1_INT06_LPT
.39838b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39838f	60		rts		                RTS
.398390					NMI_HANDLER
.398390	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR       = $00
=$2a					DEF_WILDCARD_CHAR   = $2A
=$5c					DEF_SEPAR_CHAR1     = $5C
=$2f					DEF_SEPAR_CHAR2     = $2F
=$0a					CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b					CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c					CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d					CH_CMD_WR_VAR32       = $0D
=$15					CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0       = $27     ;
=$2f					CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO   = $33
=$36					CH_CMD_FILE_CLOSE     = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE    = $39
=$3a					CH_CMD_BYTE_READ      = $3A
=$3b					CH_CMD_BYTE_RD_GO     = $3B
=$3c					CH_CMD_BYTE_WRITE     = $3C
=$3d					CH_CMD_BYTE_WR_GO     = $3D
=$44					CH_VAR_DISK_ROOT		  = $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		  = $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		  = $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS  = $14
=$17					CH376S_STAT_BUF_OVF  = $17
=$1d					CH376S_STAT_DSK_RD   = $1D
=$1e					CH376S_STAT_DSK_WR   = $1E
=$41					CH376S_ERR_OPEN_DIR  = $41
=$42					CH376S_ERR_MISS_FIL  = $42
=$43					CH376S_ERR_FND_NAME  = $43
=$82					CH376S_ERR_DISK_DSC  = $82
=$84					CH376S_ERR_LRG_SEC   = $84
=$92					CH376S_ERR_PARTTION  = $92
=$a1					CH376S_ERR_NOT_FORM  = $A1
=$b1					CH376S_ERR_DSK_FULL  = $B1
=$b2					CH376S_FDT_OVER      = $B2
=$b4					CH376S_FILE_CLOSED   = $B4
=$00					SDCARD_PRSNT_NO_CARD = $00
=$01					SDCARD_PRSNT_CD      = $01
=$02					SDCARD_PRSNT_WP      = $02
=$04					SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.398391	5c 63 85 39	jmp $398563	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.398395	5c 72 85 39	jmp $398572	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.398399	5c b1 83 39	jmp $3983b1	SDOS_INIT     JML ISDOS_INIT
.39839d	5c fe 83 39	jmp $3983fe	SDOS_DIR      JML ISDOS_DIR
.3983a1	5c b8 84 39	jmp $3984b8	SDOS_CHDIR    JML ISDOS_CHDIR
.3983a5	5c b9 84 39	jmp $3984b9	SDOS_LOAD     JML ISDOS_LOAD
.3983a9	5c bd 84 39	jmp $3984bd	SDOS_SAVE     JML ISDOS_SAVE
.3983ad	5c be 84 39	jmp $3984be	SDOS_EXEC     JML ISDOS_EXEC
.3983b1					ISDOS_INIT
.3983b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3983b3	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.3983b7	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.3983b9	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.3983bd	a9 06		lda #$06	              LDA #$06
.3983bf	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3983c3	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3983c6	a9 a8		lda #$a8	              LDA #$A8
.3983c8	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3983cc	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3983cf	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3983d2	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3983d5	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3983d9	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3983dc	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.3983de	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.3983e2	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3983e5	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3983e8	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.3983ea	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA     ; Write the MODE and Wait for around ~10us
.3983ee					ISDOS_WAIT_FOR_MODE_SW
.3983ee	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA ; Wait 0.6us
.3983f1	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3983f5	c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.3983f7	d0 f5		bne $3983ee	              BNE ISDOS_WAIT_FOR_MODE_SW
.3983f9	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA     ; See the Status Output
.3983fd	6b		rtl		              RTL
.3983fe					ISDOS_DIR
.3983fe	e2 20		sep #$20	                SEP #$20        ; set A short
.398400	c2 10		rep #$10	                REP #$10        ; set X long
.398402	20 bf 84	jsr $3984bf	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.398405	a2 00 00	ldx #$0000	              LDX #$0000
.398408					ISDOS_DIR_TRF
.398408	bf 55 87 39	lda $398755,x	              LDA sd_card_dir_string,X    ; /
.39840c	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.398410	e8		inx		              INX
.398411	e0 03 00	cpx #$0003	              CPX #$0003
.398414	d0 f2		bne $398408	              BNE ISDOS_DIR_TRF
.398416	20 f4 84	jsr $3984f4	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.398419	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.39841b	f0 03		beq $398420	              BEQ ISDOS_DIR_CONT0
.39841d	82 80 00	brl $3984a0	              BRL ISDOS_MISS_FILE
.398420					ISDOS_DIR_CONT0
.398420					ISDOS_NEXT_ENTRY
.398420	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.398422	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.398426	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA;
.398429	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;  Load First Data
.39842d	a0 00 00	ldy #$0000	              LDY #$0000
.398430	a2 00 00	ldx #$0000	              LDX #$0000
.398433	a8		tay		              TAY              ; GET Size (Save in Case we need it)
.398434					ISDOS_DIR_GET_CHAR
.398434	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA ; Wait 0.6us
.398437	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;
.39843b	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.39843f	e8		inx		              INX
.398440	e0 08 00	cpx #$0008	              CPX #$0008
.398443	d0 03		bne $398448	              BNE ISDOS_DIR_CONT1
.398445	20 b1 84	jsr $3984b1	              JSR ISDOS_DISPLAY_DOT
.398448					ISDOS_DIR_CONT1
.398448	e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.39844b	d0 e7		bne $398434	              BNE ISDOS_DIR_GET_CHAR
.39844d	a9 20		lda #$20	              LDA #$20
.39844f	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.398453	a9 28		lda #$28	              LDA #'('
.398455	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.398459	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;
.39845d	29 10		and #$10	              AND #$10
.39845f	c9 10		cmp #$10	              CMP #$10
.398461	f0 04		beq $398467	              BEQ ISDOS_DIR_ATTR0
.398463	a9 46		lda #$46	              LDA #'F'
.398465	80 02		bra $398469	              BRA ISDOS_DIR_ATTR1
.398467					ISDOS_DIR_ATTR0
.398467	a9 44		lda #$44	              LDA #'D'
.398469					ISDOS_DIR_ATTR1
.398469	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.39846d	a9 29		lda #$29	              LDA #')'
.39846f	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.398473	a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.398475	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.398479					ISDOS_DIR_GET_CHAR_FINISH
.398479	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA ; Wait 0.6us
.39847c	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ; After the name Just empty the buffer
.398480	e8		inx		              INX
.398481	e0 20 00	cpx #$0020	              CPX #$0020
.398484	d0 f3		bne $398479	              BNE ISDOS_DIR_GET_CHAR_FINISH
.398486	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.398489	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.39848b	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.39848f	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.398492	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.398494	f0 8a		beq $398420	              BEQ ISDOS_NEXT_ENTRY
.398496	c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.398498	d0 06		bne $3984a0	              BNE  ISDOS_MISS_FILE
.39849a	a2 e0 87	ldx #$87e0	              LDX #<>sd_card_msg5   ; End of File
.39849d	82 09 00	brl $3984a9	              BRL ISDOS_DIR_DONE
.3984a0					ISDOS_MISS_FILE
.3984a0	a2 6b 87	ldx #$876b	              LDX #<>sd_card_err0
.3984a3	82 03 00	brl $3984a9	              BRL ISDOS_DIR_DONE
.3984a6					NO_SDCARD_PRESENT
.3984a6	a2 58 87	ldx #$8758	              LDX #<>sd_no_card_msg
.3984a9					ISDOS_DIR_DONE
.3984a9	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.3984ad	20 04 85	jsr $398504	              JSR SDOS_FILE_CLOSE
.3984b0	6b		rtl		              RTL;
.3984b1					ISDOS_DISPLAY_DOT
.3984b1	a9 2e		lda #$2e	              LDA #'.'
.3984b3	22 2c 06 39	jsl $39062c	              JSL IPUTC        ; Print the character
.3984b7	60		rts		              RTS;
.3984b8	00		brk #		ISDOS_CHDIR   BRK;
.3984b9					ISDOS_LOAD
.3984b9	20 e0 85	jsr $3985e0	              JSR SDOS_READ_FILE;
.3984bc	6b		rtl		              RTL;
.3984bd	00		brk #		ISDOS_SAVE    BRK;
.3984be	00		brk #		ISDOS_EXEC    BRK;
.3984bf					ISDOS_MOUNT_CARD
.3984bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3984c1	c2 10		rep #$10	                REP #$10        ; set X long
.3984c3	a0 00 00	ldy #$0000	              LDY #$0000
.3984c6	a9 01		lda #$01	              LDA #$01
.3984c8	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.3984ca					TRY_MOUNT_AGAIN
.3984ca	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.3984cc	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD              ;
.3984d0	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT       ;
.3984d3	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.3984d5	f0 09		beq $3984e0	              BEQ ISDOS_MOUNTED
.3984d7	c8		iny		              INY
.3984d8	c0 05 00	cpy #$0005	              CPY #$0005
.3984db	d0 ed		bne $3984ca	              BNE TRY_MOUNT_AGAIN
.3984dd	4c e7 84	jmp $3984e7	              JMP SDCARD_ERROR_MOUNT
.3984e0					ISDOS_MOUNTED
.3984e0	a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.3984e2	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.3984e4	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.3984e6	60		rts		              RTS
.3984e7					SDCARD_ERROR_MOUNT
.3984e7	a2 bb 87	ldx #$87bb	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.3984ea	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.3984ee	60		rts		              RTS
.3984ef	a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.3984f1	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.3984f3	60		rts		              RTS
.3984f4					SDOS_FILE_OPEN
.3984f4	20 17 85	jsr $398517	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.3984f7	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3984fa	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.3984fc	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD          ; Go Request to open the File
.398500	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398503	60		rts		              RTS
.398504					SDOS_FILE_CLOSE
.398504	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.398506	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD          ; Go Request to open the File
.39850a	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.39850d	a9 00		lda #$00	              LDA #$00                ; FALSE
.39850f	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA         ; Store into the Data Register of the CH376s
.398513	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398516	60		rts		              RTS
.398517					SDOS_SET_FILE_NAME
.398517	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.398519	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.39851d	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.398520	a2 00 00	ldx #$0000	              LDX #$0000
.398523					SDOS_SET_FILE_LOOP
.398523	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.398527	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA         ; Store into the Data Register of the CH376s
.39852b	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.39852e	e8		inx		              INX
.39852f	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.398531	d0 f0		bne $398523	              BNE SDOS_SET_FILE_LOOP
.398533	60		rts		              RTS
.398534					DLYCMD_2_DTA
.398534	ea		nop		              NOP
.398535	ea		nop		              NOP
.398536	ea		nop		              NOP
.398537	ea		nop		              NOP
.398538	ea		nop		              NOP
.398539					DLYDTA_2_DTA
.398539	ea		nop		              NOP
.39853a	ea		nop		              NOP
.39853b	ea		nop		              NOP
.39853c	ea		nop		              NOP
.39853d	ea		nop		              NOP
.39853e	60		rts		              RTS;
.39853f					SDCARD_WAIT_4_INT
.39853f	e2 20		sep #$20	                SEP #$20        ; set A short
.398541					SDCARD_BUSY_INT
.398541	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Check to See if the Pending Register for the SD_INT is Set
.398545	29 80		and #$80	              AND #FNX1_INT07_SDCARD  ;
.398547	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.398549	d0 f6		bne $398541	              BNE SDCARD_BUSY_INT   ; Go Check again to see if it is checked
.39854b	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1    ;Interrupt as occured, clear the Pending Register for next time.
.39854f	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA ;
.398552	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA ;
.398555	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.398557	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.39855b	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.39855e	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA;
.398562	60		rts		              RTS           ;
.398563					ISDOS_CHK_CD
.398563	e2 20		sep #$20	                SEP #$20        ; set A short
.398565	18		clc		              CLC
.398566	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.39856a	29 01		and #$01	              AND #$01
.39856c	c9 01		cmp #$01	              CMP #$01
.39856e	f0 01		beq $398571	              BEQ SDCD_NOT_PRST;
.398570	38		sec		              SEC
.398571	60		rts		SDCD_NOT_PRST RTS
.398572					ISDOS_CHK_WP
.398572	e2 20		sep #$20	                SEP #$20        ; set A short
.398574	18		clc		              CLC
.398575	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.398579	29 02		and #$02	              AND #$02
.39857b	d0 01		bne $39857e	              BNE SDCD_NOT_WP;
.39857d	38		sec		              SEC
.39857e	60		rts		SDCD_NOT_WP   RTS
.39857f					ISDOS_GET_FILE_SIZE
.39857f	e2 20		sep #$20	                SEP #$20        ; set A short
.398581	a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.398583	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398587	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39858a	a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.39858c	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA;
.398590	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.398593	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA         ;LSB First
.398597	8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.39859b	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.39859f	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3985a2	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3985a6	8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.3985aa	8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.3985ae	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3985b1	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3985b5	8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.3985b9	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.3985bd	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3985c0	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3985c4	8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.3985c8	8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.3985cc	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3985cf	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.3985d3	af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.3985d7	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.3985db	af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.3985df	60		rts		              RTS
.3985e0					SDOS_READ_FILE
.3985e0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3985e2	20 ed 86	jsr $3986ed	              JSR SDOS_SETUP_ADDER_B;
.3985e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3985e7	20 f4 84	jsr $3984f4	              JSR SDOS_FILE_OPEN
.3985ea	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.3985ec	f0 03		beq $3985f1	              BEQ SDOS_READ_FILE_KEEP_GOING
.3985ee	82 91 00	brl $398682	              BRL SDOS_READ_END
.3985f1					SDOS_READ_FILE_KEEP_GOING
.3985f1	a2 ef 87	ldx #$87ef	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.3985f4	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.3985f8	20 7f 85	jsr $39857f	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.3985fb	c2 20		rep #$20	                REP #$20        ; set A long
.3985fd	20 11 87	jsr $398711	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.398600	a9 00 00	lda #$0000	              LDA #$0000
.398603	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.398607	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.39860b	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.39860f	e2 20		sep #$20	                SEP #$20        ; set A short
.398611					SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.398611	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.398613	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398617	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39861a	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.39861e	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.398622	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.398625	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.398629	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.39862d	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT
.398630	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.398632	f0 03		beq $398637	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398634	82 4b 00	brl $398682	              BRL SDOS_READ_END
.398637					SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398637	20 30 87	jsr $398730	              JSR SDOS_READ_BLOCK
.39863a	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.39863c	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.398640	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT
.398643	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.398645	d0 05		bne $39864c	              BNE SDOS_READ_PROC_DONE
.398647	20 8c 86	jsr $39868c	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.39864a	80 eb		bra $398637	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.39864c					SDOS_READ_PROC_DONE
.39864c	c2 20		rep #$20	                REP #$20        ; set A long
.39864e	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.398652	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.398655	d0 24		bne $39867b	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.398657	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.39865b	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.39865f	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.398663	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.398667	20 11 87	jsr $398711	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.39866a	20 d3 86	jsr $3986d3	              JSR SDOS_COMPUTE_LOCATE_POINTER
.39866d	e2 20		sep #$20	                SEP #$20        ; set A short
.39866f	20 9e 86	jsr $39869e	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.398672	20 3f 85	jsr $39853f	              JSR SDCARD_WAIT_4_INT
.398675	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.398677	d0 09		bne $398682	              BNE SDOS_READ_END
.398679	80 96		bra $398611	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.39867b					SDOS_READ_DONE1
.39867b	a9 00		lda #$00	              LDA #$00
.39867d	a2 06 88	ldx #$8806	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.398680	80 05		bra $398687	              BRA SDOS_READ_PROC_DONE1
.398682					SDOS_READ_END
.398682	a9 ff		lda #$ff	              LDA #$FF
.398684	a2 81 87	ldx #$8781	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.398687					SDOS_READ_PROC_DONE1
.398687	22 0c 06 39	jsl $39060c	              JSL IPRINT       ; print the first line
.39868b	60		rts		              RTS;
.39868c					SDOS_ADJUST_POINTER
.39868c	c2 20		rep #$20	                REP #$20        ; set A long
.39868e	18		clc		              CLC
.39868f	a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.398691	65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.398693	85 38		sta $38		              STA SDCARD_FILE_PTR;
.398695	e2 20		sep #$20	                SEP #$20        ; set A short
.398697	a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.398699	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.39869b	85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.39869d					SDOS_ADJ_DONE
.39869d	60		rts		              RTS
.39869e					SDOS_BYTE_LOCATE
.39869e	e2 20		sep #$20	                SEP #$20        ; set A short
.3986a0	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.3986a2	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.3986a6	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA
.3986a9	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.3986ad	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3986b1	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3986b4	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.3986b8	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3986bc	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3986bf	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.3986c3	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3986c7	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA
.3986ca	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.3986ce	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3986d2	60		rts		              RTS
.3986d3					SDOS_COMPUTE_LOCATE_POINTER
.3986d3	c2 20		rep #$20	                REP #$20        ; set A long
.3986d5	18		clc		              CLC
.3986d6	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.3986da	69 ff ff	adc #$ffff	              ADC #$FFFF
.3986dd	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.3986e1	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.3986e5	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.3986e8	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.3986ec	60		rts		              RTS
.3986ed					SDOS_SETUP_ADDER_B
.3986ed	c2 20		rep #$20	                REP #$20        ; set A long
.3986ef	a9 01 00	lda #$0001	              LDA #$0001
.3986f2	8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.3986f6	a9 ff ff	lda #$ffff	              LDA #$FFFF
.3986f9	8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.3986fd	60		rts		              RTS
.3986fe					SDOS_LOAD_ADDER_A_WITH_SIZE
.3986fe	c2 20		rep #$20	                REP #$20        ; set A long
.398700	af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.398704	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.398708	af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.39870c	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.398710	60		rts		              RTS
.398711					SDOS_SETUP_CH376S_BUFFER_SIZE
.398711	c2 20		rep #$20	                REP #$20        ; set A long
.398713	af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.398717	29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.39871a	c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.39871d	f0 08		beq $398727	              BEQ SDOS_SETUP_SMALLR_THAN64K
.39871f	a9 ff ff	lda #$ffff	              LDA #$FFFF
.398722	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.398726	60		rts		              RTS
.398727					SDOS_SETUP_SMALLR_THAN64K
.398727	af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.39872b	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.39872f	60		rts		              RTS
.398730					SDOS_READ_BLOCK
.398730	e2 20		sep #$20	                SEP #$20        ; set A short
.398732	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.398734	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398738	20 34 85	jsr $398534	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39873b	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA     ; Read First Byte for Number of Byte to Read
.39873f	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.398741	20 39 85	jsr $398539	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.398744	a0 00 00	ldy #$0000	              LDY #$0000
.398747					SDOS_READ_MORE
.398747	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.39874b	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.39874d	c8		iny		              INY
.39874e	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.398750	d0 f5		bne $398747	              BNE SDOS_READ_MORE
.398752	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.398754	60		rts		              RTS
>398755	2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>398758	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>398760	44 20 50 52 45 53 45 4e 54 0d 00
>39876b	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>398773	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>398781	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>398789	41 44 49 4e 47 20 46 49 4c 45 00
>398794	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>39879c	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>3987a4	45 54 45 43 54 45 44 00
>3987ac	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>3987b4	4f 55 4e 54 45 44 00
>3987bb	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>3987c3	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>3987d3	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>3987db	4e 45 44 0d 00
>3987e0	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>3987e8	49 4e 45 2e 2e 2e 00
>3987ef	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>3987f7	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>398806	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>39880e	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe501				OPL2_L_TEST               = $AFE501 ; TEST
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe508				OPL2_L_CSM                = $AFE508 ;
=$afe520				OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40				OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560				OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580				OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0				OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0				OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd				OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0				OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0				OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600				OPL2_R_BASE               = $AFE600
=$afe601				OPL2_R_TEST               = $AFE601 ; TEST
=$afe602				OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL2_R_IRQ                = $AFE604 ;
=$afe608				OPL2_R_CSM                = $AFE608 ;
=$afe620				OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700					OPL2_S_BASE_LL            = $E700
=$00af					OPL2_S_BASE_HL            = $00AF
=$afe701				OPL2_S_TEST               = $AFE701 ; TEST
=$afe702				OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL2_S_IRQ                = $AFE704 ;
=$afe708				OPL2_S_CSM                = $AFE708 ;
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=0					NOTE_C =    0
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
>398812	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39881a	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39882a	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>398832	12
>398833	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39883b	15
>39883c	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>398842	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>398847	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm

.39884d					IOPL2_TONE_TEST
.39884d	e2 20		sep #$20	                SEP #$20        ; set A short
.39884f	a9 01		lda #$01	              LDA #$01
.398851	85 26		sta $26		              STA OPL2_OPERATOR
.398853	c2 30		rep #$30	                REP #$30        ; set A&X long
.398855	22 cd 88 39	jsl $3988cd	              JSL OPL2_INIT
.398859	e2 20		sep #$20	                SEP #$20        ; set A short
.39885b	a9 00		lda #$00	              LDA #$00
.39885d	85 36		sta $36		              STA OPL2_LOOP
.39885f					OPL2_TONE_TESTING_L0
.39885f	e2 20		sep #$20	                SEP #$20        ; set A short
.398861	a5 36		lda $36		              LDA OPL2_LOOP
.398863	85 27		sta $27		              STA OPL2_CHANNEL
.398865	38		sec		              SEC
.398866	22 51 8c 39	jsl $398c51	              JSL OPL2_SET_TREMOLO
.39886a	38		sec		              SEC
.39886b	22 82 8c 39	jsl $398c82	              JSL OPL2_SET_VIBRATO
.39886f	a9 04		lda #$04	              LDA #$04
.398871	85 32		sta $32		              STA OPL2_PARAMETER0
.398873	22 26 8d 39	jsl $398d26	              JSL OPL2_SET_MULTIPLIER
.398877	a9 0a		lda #$0a	              LDA #$0A
.398879	85 32		sta $32		              STA OPL2_PARAMETER0
.39887b	22 8e 8d 39	jsl $398d8e	              JSL OPL2_SET_ATTACK
.39887f	a9 04		lda #$04	              LDA #$04
.398881	85 32		sta $32		              STA OPL2_PARAMETER0
.398883	22 c2 8d 39	jsl $398dc2	              JSL OPL2_SET_DECAY
.398887	a9 0f		lda #$0f	              LDA #$0F
.398889	85 32		sta $32		              STA OPL2_PARAMETER0
.39888b	22 ee 8d 39	jsl $398dee	              JSL OPL2_SET_SUSTAIN
.39888f	a9 0f		lda #$0f	              LDA #$0F
.398891	85 32		sta $32		              STA OPL2_PARAMETER0
.398893	22 22 8e 39	jsl $398e22	              JSL OPL2_SET_RELEASE
.398897	e2 20		sep #$20	                SEP #$20        ; set A short
.398899	e6 36		inc $36		              INC OPL2_LOOP
.39889b	a5 36		lda $36		              LDA OPL2_LOOP
.39889d	c9 03		cmp #$03	              CMP #$03
.39889f	d0 be		bne $39885f	              BNE OPL2_TONE_TESTING_L0
.3988a1	a9 00		lda #$00	              LDA #$00
.3988a3	85 36		sta $36		              STA OPL2_LOOP
.3988a5					OPL2_TONE_TESTING_L1
.3988a5	85 30		sta $30		              STA OPL2_NOTE
.3988a7	29 03		and #$03	              AND #$03        ; replace modulo 3
.3988a9	85 27		sta $27		              STA OPL2_CHANNEL
.3988ab	a9 03		lda #$03	              LDA #$03
.3988ad	85 31		sta $31		              STA OPL2_OCTAVE
.3988af	22 0f 8a 39	jsl $398a0f	              JSL OPL2_PLAYNOTE
.3988b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3988b5	c2 10		rep #$10	                REP #$10        ; set X long
.3988b7	a2 00 00	ldx #$0000	              LDX #$0000
.3988ba					OPL2_TONE_TESTING_L2
.3988ba	ea		nop		              NOP
.3988bb	ea		nop		              NOP
.3988bc	ea		nop		              NOP
.3988bd	ea		nop		              NOP
.3988be	e8		inx		              INX
.3988bf	e0 ff ff	cpx #$ffff	              CPX #$FFFF
.3988c2	d0 f6		bne $3988ba	              BNE OPL2_TONE_TESTING_L2
.3988c4	e6 36		inc $36		              INC OPL2_LOOP
.3988c6	a5 36		lda $36		              LDA OPL2_LOOP
.3988c8	c9 0c		cmp #$0c	              CMP #12
.3988ca	d0 d9		bne $3988a5	              BNE OPL2_TONE_TESTING_L1
.3988cc	6b		rtl		              RTL
.3988cd					OPL2_INIT
.3988cd	c2 20		rep #$20	                REP #$20        ; set A long
.3988cf	a9 00 00	lda #$0000	              LDA #$0000
.3988d2	85 28		sta $28		              STA OPL2_REG_REGION
.3988d4	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3988d6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3988d8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3988da	85 30		sta $30		              STA OPL2_NOTE
.3988dc	85 32		sta $32		              STA OPL2_PARAMETER0
.3988de	85 34		sta $34		              STA OPL2_PARAMETER2
.3988e0	6b		rtl		              RTL
.3988e1					OPL2_Reset
.3988e1	6b		rtl		              RTL
.3988e2					OPL2_Get_FrequencyBlock
.3988e2	6b		rtl		              RTL
.3988e3					OPL2_GET_REGISTER
.3988e3	c2 20		rep #$20	                REP #$20        ; set A long
.3988e5	18		clc		              CLC
.3988e6	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3988e9	65 32		adc $32		              ADC OPL2_PARAMETER0
.3988eb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3988ed	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3988f0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3988f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3988f4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3988f6	6b		rtl		              RTL
.3988f7					OPL2_GET_WAVEFORM_SELECT
.3988f7	c2 20		rep #$20	                REP #$20        ; set A long
.3988f9	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3988fc	69 01 00	adc #$0001	              ADC #$0001
.3988ff	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398901	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398904	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398906	e2 20		sep #$20	                SEP #$20        ; set A short
.398908	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39890a	29 20		and #$20	              AND #$20
.39890c	6b		rtl		              RTL
.39890d					OPL2_GET_SCALINGLEVEL
.39890d	c2 20		rep #$20	                REP #$20        ; set A long
.39890f	a9 40 00	lda #$0040	              LDA #$0040  ;
.398912	85 28		sta $28		              STA OPL2_REG_REGION
.398914	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398917	e2 20		sep #$20	                SEP #$20        ; set A short
.398919	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39891b	29 c0		and #$c0	              AND #$C0
.39891d	4a		lsr a		              LSR A
.39891e	4a		lsr a		              LSR A
.39891f	4a		lsr a		              LSR A
.398920	4a		lsr a		              LSR A
.398921	4a		lsr a		              LSR A
.398922	4a		lsr a		              LSR A
.398923	6b		rtl		              RTL
.398924					OPL2_GET_BLOCK
.398924	e2 20		sep #$20	                SEP #$20        ; set A short
.398926	18		clc		              CLC
.398927	a5 27		lda $27		              LDA OPL2_CHANNEL
.398929	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39892b	69 b0		adc #$b0	              ADC #$B0
.39892d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39892f	a9 00		lda #$00	              LDA #$00
.398931	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398933	c2 30		rep #$30	                REP #$30        ; set A&X long
.398935	18		clc		              CLC
.398936	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398939	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39893b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39893d	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398940	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398942	e2 20		sep #$20	                SEP #$20        ; set A short
.398944	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398946	29 1c		and #$1c	              AND #$1C
.398948	4a		lsr a		              LSR A
.398949	4a		lsr a		              LSR A
.39894a	6b		rtl		              RTL
.39894b					OPL2_GET_KEYON
.39894b	e2 20		sep #$20	                SEP #$20        ; set A short
.39894d	18		clc		              CLC
.39894e	a5 27		lda $27		              LDA OPL2_CHANNEL
.398950	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398952	69 b0		adc #$b0	              ADC #$B0
.398954	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398956	a9 00		lda #$00	              LDA #$00
.398958	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39895a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39895c	18		clc		              CLC
.39895d	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398960	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398962	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398964	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398967	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398969	e2 20		sep #$20	                SEP #$20        ; set A short
.39896b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39896d	29 20		and #$20	              AND #$20
.39896f	6b		rtl		              RTL
.398970					OPL2_GET_FEEDBACK
.398970	e2 20		sep #$20	                SEP #$20        ; set A short
.398972	18		clc		              CLC
.398973	a5 27		lda $27		              LDA OPL2_CHANNEL
.398975	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398977	69 c0		adc #$c0	              ADC #$C0
.398979	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39897b	a9 00		lda #$00	              LDA #$00
.39897d	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39897f	c2 30		rep #$30	                REP #$30        ; set A&X long
.398981	18		clc		              CLC
.398982	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398985	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398987	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398989	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.39898c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39898e	e2 20		sep #$20	                SEP #$20        ; set A short
.398990	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398992	29 e0		and #$e0	              AND #$E0
.398994	4a		lsr a		              LSR
.398995	6b		rtl		              RTL
.398996					OPL2_GET_SYNTHMODE
.398996	e2 20		sep #$20	                SEP #$20        ; set A short
.398998	18		clc		              CLC
.398999	a5 27		lda $27		              LDA OPL2_CHANNEL
.39899b	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39899d	69 c0		adc #$c0	              ADC #$C0
.39899f	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3989a1	a9 00		lda #$00	              LDA #$00
.3989a3	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3989a5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3989a7	18		clc		              CLC
.3989a8	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3989ab	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3989ad	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3989af	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3989b2	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3989b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3989b6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3989b8	29 01		and #$01	              AND #$01
.3989ba	6b		rtl		              RTL
.3989bb					OPL2_GET_DEEPTREMOLO
.3989bb	c2 20		rep #$20	                REP #$20        ; set A long
.3989bd	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3989c0	85 28		sta $28		              STA OPL2_REG_REGION
.3989c2	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.3989c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3989c7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3989c9	29 80		and #$80	              AND #$80
.3989cb	6b		rtl		              RTL
.3989cc					OPL2_GET_DEEPVIBRATO
.3989cc	c2 20		rep #$20	                REP #$20        ; set A long
.3989ce	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3989d1	69 bd 00	adc #$00bd	              ADC #$00BD
.3989d4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3989d6	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3989d9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3989db	e2 20		sep #$20	                SEP #$20        ; set A short
.3989dd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3989df	29 40		and #$40	              AND #$40
.3989e1	6b		rtl		              RTL
.3989e2					OPL2_GET_PERCUSSION
.3989e2	c2 20		rep #$20	                REP #$20        ; set A long
.3989e4	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3989e7	69 bd 00	adc #$00bd	              ADC #$00BD
.3989ea	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3989ec	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3989ef	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3989f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3989f3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3989f5	29 20		and #$20	              AND #$20
.3989f7	6b		rtl		              RTL
.3989f8					OPL2_GET_DRUMS
.3989f8	c2 20		rep #$20	                REP #$20        ; set A long
.3989fa	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3989fd	69 bd 00	adc #$00bd	              ADC #$00BD
.398a00	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398a02	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398a05	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398a07	e2 20		sep #$20	                SEP #$20        ; set A short
.398a09	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398a0b	29 1f		and #$1f	              AND #$1F
.398a0d	6b		rtl		              RTL
.398a0e					OPL2_Get_WaveForm
.398a0e	6b		rtl		              RTL
.398a0f					OPL2_PLAYNOTE
.398a0f	e2 20		sep #$20	                SEP #$20        ; set A short
.398a11	a9 00		lda #$00	              LDA #$00
.398a13	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.398a15	20 eb 8e	jsr $398eeb	              JSR OPL2_SET_KEYON
.398a18	a5 30		lda $30		              LDA OPL2_NOTE    ;Divide Note/12
.398a1a	8d 08 01	sta $0108	              STA D0_OPERAND_A
.398a1d	a9 00		lda #$00	              LDA #$00
.398a1f	8d 09 01	sta $0109	              STA D0_OPERAND_A+1
.398a22	8d 0b 01	sta $010b	              STA D0_OPERAND_B+1
.398a25	a9 0c		lda #$0c	              LDA #$0C
.398a27	8d 0a 01	sta $010a	              STA D0_OPERAND_B
.398a2a	18		clc		              CLC
.398a2b	a5 31		lda $31		              LDA OPL2_OCTAVE
.398a2d	6d 0c 01	adc $010c	              ADC D0_RESULT
.398a30	85 31		sta $31		              STA OPL2_OCTAVE
.398a32	20 ba 8e	jsr $398eba	              JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.398a35	c2 20		rep #$20	                REP #$20        ; set A long
.398a37	18		clc		              CLC
.398a38	a5 30		lda $30		              LDA OPL2_NOTE
.398a3a	29 ff 00	and #$00ff	              AND #$00FF
.398a3d	6d 0e 01	adc $010e	              ADC D0_REMAINDER    ; Remainder of the Division Modulo
.398a40	0a		asl a		              ASL A ;<<<<<<<<<<<<<<<<<<<<<<<<<
.398a41	aa		tax		              TAX
.398a42	bf 12 88 39	lda $398812,x	              LDA @lnoteFNumbers,X
.398a46	85 32		sta $32		              STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.398a48	22 4e 8e 39	jsl $398e4e	              JSL OPL2_SET_FNUMBER
.398a4c	e2 20		sep #$20	                SEP #$20        ; set A short
.398a4e	a9 01		lda #$01	              LDA #$01
.398a50	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.398a52	20 eb 8e	jsr $398eeb	              JSR OPL2_SET_KEYON
.398a55	c2 10		rep #$10	                REP #$10        ; set X long
.398a57	6b		rtl		              RTL
.398a58					OPL2_PLAYDRUM
.398a58	6b		rtl		              RTL
.398a59					OPL2_SET_INSTRUMENT
.398a59	38		sec		              SEC ; Set the WaveFormSelect to True
.398a5a	22 33 8c 39	jsl $398c33	              JSL OPL2_SET_WAVEFORMSELECT;
.398a5e	e2 20		sep #$20	                SEP #$20        ; set A short
.398a60	c2 10		rep #$10	                REP #$10        ; set X long
.398a62	a0 00 00	ldy #$0000	              LDY #$0000
.398a65	a2 00 00	ldx #$0000	              LDX #$0000
.398a68	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.398a6a	85 35		sta $35		              STA OPL2_PARAMETER3
.398a6c	c8		iny		              INY
.398a6d	c9 06		cmp #$06	              CMP #$06
.398a6f	d0 03		bne $398a74	              BNE PERCUSSION_NEXT07
.398a71	82 70 01	brl $398be4	              BRL Percussion_6
.398a74					PERCUSSION_NEXT07
.398a74	c9 07		cmp #$07	              CMP #$07
.398a76	d0 03		bne $398a7b	              BNE PERCUSSION_NEXT08
.398a78	82 44 01	brl $398bbf	              BRL Percussion_7
.398a7b					PERCUSSION_NEXT08
.398a7b	c9 08		cmp #$08	              CMP #$08
.398a7d	d0 03		bne $398a82	              BNE PERCUSSION_NEXT09
.398a7f	82 18 01	brl $398b9a	              BRL Percussion_8
.398a82					PERCUSSION_NEXT09
.398a82	c9 09		cmp #$09	              CMP #$09
.398a84	d0 03		bne $398a89	              BNE PERCUSSION_NEXT0A
.398a86	82 ec 00	brl $398b75	              BRL Percussion_9
.398a89					PERCUSSION_NEXT0A
.398a89	c9 0a		cmp #$0a	              CMP #$0A
.398a8b	d0 03		bne $398a90	              BNE Percussion_Default
.398a8d	82 c0 00	brl $398b50	              BRL Percussion_A
.398a90					Percussion_Default
.398a90	a9 00		lda #$00	              LDA #$00
.398a92	85 26		sta $26		              STA OPL2_OPERATOR
.398a94	c2 20		rep #$20	                REP #$20        ; set A long
.398a96	a9 20 00	lda #$0020	              LDA #$0020;
.398a99	85 28		sta $28		              STA OPL2_REG_REGION
.398a9b	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398a9e	e2 20		sep #$20	                SEP #$20        ; set A short
.398aa0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398aa2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398aa4	c8		iny		              INY
.398aa5	c2 20		rep #$20	                REP #$20        ; set A long
.398aa7	a9 40 00	lda #$0040	              LDA #$0040;
.398aaa	85 28		sta $28		              STA OPL2_REG_REGION
.398aac	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398aaf	e2 20		sep #$20	                SEP #$20        ; set A short
.398ab1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398ab3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ab5	c8		iny		              INY
.398ab6	c2 20		rep #$20	                REP #$20        ; set A long
.398ab8	a9 60 00	lda #$0060	              LDA #$0060;
.398abb	85 28		sta $28		              STA OPL2_REG_REGION
.398abd	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398ac0	e2 20		sep #$20	                SEP #$20        ; set A short
.398ac2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398ac4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ac6	c8		iny		              INY
.398ac7	c2 20		rep #$20	                REP #$20        ; set A long
.398ac9	a9 80 00	lda #$0080	              LDA #$0080;
.398acc	85 28		sta $28		              STA OPL2_REG_REGION
.398ace	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398ad1	e2 20		sep #$20	                SEP #$20        ; set A short
.398ad3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398ad5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ad7	c8		iny		              INY
.398ad8	c2 20		rep #$20	                REP #$20        ; set A long
.398ada	a9 e0 00	lda #$00e0	              LDA #$00E0;
.398add	85 28		sta $28		              STA OPL2_REG_REGION
.398adf	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398ae2	e2 20		sep #$20	                SEP #$20        ; set A short
.398ae4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398ae6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ae8	c8		iny		              INY
.398ae9	e2 10		sep #$10	                SEP #$10        ; set X short
.398aeb	a5 27		lda $27		              LDA OPL2_CHANNEL
.398aed	29 0f		and #$0f	              AND #$0F
.398aef	aa		tax		              TAX
.398af0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.398af2	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL2_R_FEEDBACK,X
.398af6	c8		iny		              INY
.398af7	a9 01		lda #$01	              LDA #$01
.398af9	85 26		sta $26		              STA OPL2_OPERATOR
.398afb	c2 20		rep #$20	                REP #$20        ; set A long
.398afd	a9 20 00	lda #$0020	              LDA #$0020;
.398b00	85 28		sta $28		              STA OPL2_REG_REGION
.398b02	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398b05	e2 20		sep #$20	                SEP #$20        ; set A short
.398b07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.398b09	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b0b	c8		iny		              INY
.398b0c	c2 20		rep #$20	                REP #$20        ; set A long
.398b0e	a9 40 00	lda #$0040	              LDA #$0040;
.398b11	85 28		sta $28		              STA OPL2_REG_REGION
.398b13	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398b16	e2 20		sep #$20	                SEP #$20        ; set A short
.398b18	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.398b1a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b1c	c8		iny		              INY
.398b1d	c2 20		rep #$20	                REP #$20        ; set A long
.398b1f	a9 60 00	lda #$0060	              LDA #$0060;
.398b22	85 28		sta $28		              STA OPL2_REG_REGION
.398b24	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398b27	e2 20		sep #$20	                SEP #$20        ; set A short
.398b29	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.398b2b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b2d	c8		iny		              INY
.398b2e	c2 20		rep #$20	                REP #$20        ; set A long
.398b30	a9 80 00	lda #$0080	              LDA #$0080;
.398b33	85 28		sta $28		              STA OPL2_REG_REGION
.398b35	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398b38	e2 20		sep #$20	                SEP #$20        ; set A short
.398b3a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.398b3c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b3e	c8		iny		              INY
.398b3f	c2 20		rep #$20	                REP #$20        ; set A long
.398b41	a9 e0 00	lda #$00e0	              LDA #$00E0;
.398b44	85 28		sta $28		              STA OPL2_REG_REGION
.398b46	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398b49	e2 20		sep #$20	                SEP #$20        ; set A short
.398b4b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.398b4d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b4f	6b		rtl		              RTL
.398b50					Percussion_A
.398b50	e2 20		sep #$20	                SEP #$20        ; set A short
.398b52	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398b54	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.398b58	c8		iny		              INY
.398b59	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398b5b	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.398b5f	c8		iny		              INY
.398b60	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398b62	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.398b66	c8		iny		              INY
.398b67	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398b69	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.398b6d	c8		iny		              INY
.398b6e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398b70	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.398b74	6b		rtl		              RTL
.398b75					Percussion_9
.398b75	e2 20		sep #$20	                SEP #$20        ; set A short
.398b77	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398b79	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.398b7d	c8		iny		              INY
.398b7e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398b80	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.398b84	c8		iny		              INY
.398b85	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398b87	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.398b8b	c8		iny		              INY
.398b8c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398b8e	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.398b92	c8		iny		              INY
.398b93	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398b95	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.398b99	6b		rtl		              RTL
.398b9a					Percussion_8
.398b9a	e2 20		sep #$20	                SEP #$20        ; set A short
.398b9c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398b9e	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.398ba2	c8		iny		              INY
.398ba3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398ba5	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.398ba9	c8		iny		              INY
.398baa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398bac	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.398bb0	c8		iny		              INY
.398bb1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398bb3	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.398bb7	c8		iny		              INY
.398bb8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398bba	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.398bbe	6b		rtl		              RTL
.398bbf					Percussion_7
.398bbf	e2 20		sep #$20	                SEP #$20        ; set A short
.398bc1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398bc3	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.398bc7	c8		iny		              INY
.398bc8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398bca	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.398bce	c8		iny		              INY
.398bcf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398bd1	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.398bd5	c8		iny		              INY
.398bd6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398bd8	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.398bdc	c8		iny		              INY
.398bdd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398bdf	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.398be3	6b		rtl		              RTL
.398be4					Percussion_6
.398be4	e2 20		sep #$20	                SEP #$20        ; set A short
.398be6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398be8	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.398bec	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.398bf0	c8		iny		              INY
.398bf1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398bf3	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.398bf7	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.398bfb	c8		iny		              INY
.398bfc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398bfe	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.398c02	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.398c06	c8		iny		              INY
.398c07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398c09	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.398c0d	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.398c11	c8		iny		              INY
.398c12	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398c14	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.398c18	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.398c1c	6b		rtl		              RTL
.398c1d					OPL2_SET_REGISTER
.398c1d	c2 20		rep #$20	                REP #$20        ; set A long
.398c1f	18		clc		              CLC
.398c20	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398c23	65 32		adc $32		              ADC OPL2_PARAMETER0
.398c25	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398c27	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398c2a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398c2c	e2 20		sep #$20	                SEP #$20        ; set A short
.398c2e	a5 33		lda $33		              LDA OPL2_PARAMETER1
.398c30	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c32	6b		rtl		              RTL
.398c33					OPL2_SET_WAVEFORMSELECT
.398c33	c2 20		rep #$20	                REP #$20        ; set A long
.398c35	a9 01 e7	lda #$e701	              LDA #OPL2_S_BASE_LL + $0001
.398c38	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398c3a	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398c3d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398c3f	e2 20		sep #$20	                SEP #$20        ; set A short
.398c41	b0 07		bcs $398c4a	              BCS OPL2_Set_WaveFormSelect_set
.398c43	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c45	29 df		and #$df	              AND #$DF
.398c47	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c49	6b		rtl		              RTL
.398c4a					OPL2_Set_WaveFormSelect_set
.398c4a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c4c	09 20		ora #$20	              ORA #$20
.398c4e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c50	6b		rtl		              RTL
.398c51					OPL2_SET_TREMOLO
.398c51	08		php		              PHP ; Push the Carry
.398c52	c2 20		rep #$20	                REP #$20        ; set A long
.398c54	18		clc		              CLC
.398c55	a9 20 00	lda #$0020	              LDA #$0020;
.398c58	85 28		sta $28		              STA OPL2_REG_REGION
.398c5a	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398c5d	28		plp		              PLP ; Pull the Carry out
.398c5e	e2 20		sep #$20	                SEP #$20        ; set A short
.398c60	b0 08		bcs $398c6a	              BCS OPL2_Set_Tremolo_Set;
.398c62	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c64	29 7f		and #$7f	              AND #$7F
.398c66	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c68	80 06		bra $398c70	              BRA OPL2_Set_Tremolo_Exit
.398c6a					OPL2_Set_Tremolo_Set
.398c6a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c6c	09 80		ora #$80	              ORA #$80
.398c6e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c70					OPL2_Set_Tremolo_Exit
.398c70	6b		rtl		              RTL
.398c71					OPL2_GET_TREMOLO
.398c71	c2 20		rep #$20	                REP #$20        ; set A long
.398c73	a9 20 00	lda #$0020	              LDA #$0020;
.398c76	85 28		sta $28		              STA OPL2_REG_REGION
.398c78	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398c7b	e2 20		sep #$20	                SEP #$20        ; set A short
.398c7d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c7f	29 80		and #$80	              AND #$80
.398c81	6b		rtl		              RTL
.398c82					OPL2_SET_VIBRATO
.398c82	08		php		              PHP ; Push the Carry
.398c83	c2 20		rep #$20	                REP #$20        ; set A long
.398c85	18		clc		              CLC
.398c86	a9 20 00	lda #$0020	              LDA #$0020;
.398c89	85 28		sta $28		              STA OPL2_REG_REGION
.398c8b	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398c8e	28		plp		              PLP ; Pull the Carry out
.398c8f	e2 20		sep #$20	                SEP #$20        ; set A short
.398c91	b0 08		bcs $398c9b	              BCS OPL2_Set_Vibrato_Set;
.398c93	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c95	29 bf		and #$bf	              AND #$BF
.398c97	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c99	80 06		bra $398ca1	              BRA OPL2_Set_Vibrato_Exit
.398c9b					OPL2_Set_Vibrato_Set
.398c9b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c9d	09 40		ora #$40	              ORA #$40
.398c9f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ca1					OPL2_Set_Vibrato_Exit
.398ca1	6b		rtl		              RTL
.398ca2					OPL2_GET_VIBRATO
.398ca2	c2 20		rep #$20	                REP #$20        ; set A long
.398ca4	a9 20 00	lda #$0020	              LDA #$0020;
.398ca7	85 28		sta $28		              STA OPL2_REG_REGION
.398ca9	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398cac	e2 20		sep #$20	                SEP #$20        ; set A short
.398cae	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cb0	29 40		and #$40	              AND #$40
.398cb2	6b		rtl		              RTL
.398cb3					OPL2_SET_MAINTAINSUSTAIN
.398cb3	08		php		              PHP ; Push the Carry
.398cb4	c2 20		rep #$20	                REP #$20        ; set A long
.398cb6	18		clc		              CLC
.398cb7	a9 20 00	lda #$0020	              LDA #$0020;
.398cba	85 28		sta $28		              STA OPL2_REG_REGION
.398cbc	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398cbf	28		plp		              PLP ; Pull the Carry out
.398cc0	e2 20		sep #$20	                SEP #$20        ; set A short
.398cc2	b0 08		bcs $398ccc	              BCS OPL2_Set_MaintainSustain_Set;
.398cc4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cc6	29 df		and #$df	              AND #$DF
.398cc8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398cca	80 06		bra $398cd2	              BRA OPL2_Set_MaintainSustain_Exit
.398ccc					OPL2_Set_MaintainSustain_Set
.398ccc	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cce	09 20		ora #$20	              ORA #$20
.398cd0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398cd2					OPL2_Set_MaintainSustain_Exit
.398cd2	6b		rtl		              RTL
.398cd3					OPL2_GET_MAINTAINSUSTAIN
.398cd3	c2 20		rep #$20	                REP #$20        ; set A long
.398cd5	a9 20 00	lda #$0020	              LDA #$0020;
.398cd8	85 28		sta $28		              STA OPL2_REG_REGION
.398cda	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398cdd	e2 20		sep #$20	                SEP #$20        ; set A short
.398cdf	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ce1	29 20		and #$20	              AND #$20
.398ce3	6b		rtl		              RTL
.398ce4					OPL2_SET_ENVELOPESCALING
.398ce4	08		php		              PHP ; Push the Carry
.398ce5	c2 20		rep #$20	                REP #$20        ; set A long
.398ce7	18		clc		              CLC
.398ce8	a9 20 00	lda #$0020	              LDA #$0020;
.398ceb	85 28		sta $28		              STA OPL2_REG_REGION
.398ced	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398cf0	28		plp		              PLP ; Pull the Carry out
.398cf1	e2 20		sep #$20	                SEP #$20        ; set A short
.398cf3	b0 08		bcs $398cfd	              BCS OPL2_Set_EnvelopeScaling_Set;
.398cf5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cf7	29 ef		and #$ef	              AND #$EF
.398cf9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398cfb	80 06		bra $398d03	              BRA OPL2_Set_EnvelopeScaling_Exit
.398cfd					OPL2_Set_EnvelopeScaling_Set
.398cfd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cff	09 10		ora #$10	              ORA #$10
.398d01	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d03					OPL2_Set_EnvelopeScaling_Exit
.398d03	6b		rtl		              RTL
.398d04					OPL2_GET_ENVELOPESCALING
.398d04	c2 20		rep #$20	                REP #$20        ; set A long
.398d06	a9 20 00	lda #$0020	              LDA #$0020;
.398d09	85 28		sta $28		              STA OPL2_REG_REGION
.398d0b	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d0e	e2 20		sep #$20	                SEP #$20        ; set A short
.398d10	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d12	29 10		and #$10	              AND #$10
.398d14	6b		rtl		              RTL
.398d15					OPL2_GET_MULTIPLIER
.398d15	c2 20		rep #$20	                REP #$20        ; set A long
.398d17	a9 20 00	lda #$0020	              LDA #$0020;
.398d1a	85 28		sta $28		              STA OPL2_REG_REGION
.398d1c	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d1f	e2 20		sep #$20	                SEP #$20        ; set A short
.398d21	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d23	29 0f		and #$0f	              AND #$0F
.398d25	6b		rtl		              RTL
.398d26					OPL2_SET_MULTIPLIER
.398d26	c2 20		rep #$20	                REP #$20        ; set A long
.398d28	a9 20 00	lda #$0020	              LDA #$0020;
.398d2b	85 28		sta $28		              STA OPL2_REG_REGION
.398d2d	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d30	e2 20		sep #$20	                SEP #$20        ; set A short
.398d32	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398d34	29 0f		and #$0f	              AND #$0F
.398d36	85 32		sta $32		              STA OPL2_PARAMETER0
.398d38	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d3a	29 f0		and #$f0	              AND #$F0
.398d3c	05 32		ora $32		              ORA OPL2_PARAMETER0
.398d3e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d40	6b		rtl		              RTL
.398d41					OPL2_SET_SCALINGLEVEL
.398d41	c2 20		rep #$20	                REP #$20        ; set A long
.398d43	a9 40 00	lda #$0040	              LDA #$0040;
.398d46	85 28		sta $28		              STA OPL2_REG_REGION
.398d48	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d4b	e2 20		sep #$20	                SEP #$20        ; set A short
.398d4d	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398d4f	29 03		and #$03	              AND #$03
.398d51	0a		asl a		              ASL
.398d52	0a		asl a		              ASL
.398d53	0a		asl a		              ASL
.398d54	0a		asl a		              ASL
.398d55	0a		asl a		              ASL
.398d56	0a		asl a		              ASL
.398d57	85 32		sta $32		              STA OPL2_PARAMETER0
.398d59	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d5b	29 3f		and #$3f	              AND #$3F
.398d5d	05 32		ora $32		              ORA OPL2_PARAMETER0
.398d5f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d61	6b		rtl		              RTL
.398d62					OPL2_SET_VOLUME
.398d62	c2 20		rep #$20	                REP #$20        ; set A long
.398d64	a9 40 00	lda #$0040	              LDA #$0040  ;
.398d67	85 28		sta $28		              STA OPL2_REG_REGION
.398d69	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d6c	e2 20		sep #$20	                SEP #$20        ; set A short
.398d6e	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Volume
.398d70	29 3f		and #$3f	              AND #$3F
.398d72	85 32		sta $32		              STA OPL2_PARAMETER0
.398d74	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d76	29 c0		and #$c0	              AND #$C0
.398d78	05 32		ora $32		              ORA OPL2_PARAMETER0
.398d7a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d7c	6b		rtl		              RTL
.398d7d					OPL2_GET_VOLUME
.398d7d	c2 20		rep #$20	                REP #$20        ; set A long
.398d7f	a9 40 00	lda #$0040	              LDA #$0040  ;
.398d82	85 28		sta $28		              STA OPL2_REG_REGION
.398d84	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d87	e2 20		sep #$20	                SEP #$20        ; set A short
.398d89	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d8b	29 3f		and #$3f	              AND #$3F
.398d8d	6b		rtl		              RTL
.398d8e					OPL2_SET_ATTACK
.398d8e	c2 20		rep #$20	                REP #$20        ; set A long
.398d90	a9 60 00	lda #$0060	              LDA #$0060  ;
.398d93	85 28		sta $28		              STA OPL2_REG_REGION
.398d95	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398d98	e2 20		sep #$20	                SEP #$20        ; set A short
.398d9a	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398d9c	29 0f		and #$0f	              AND #$0F
.398d9e	0a		asl a		              ASL
.398d9f	0a		asl a		              ASL
.398da0	0a		asl a		              ASL
.398da1	0a		asl a		              ASL
.398da2	85 32		sta $32		              STA OPL2_PARAMETER0
.398da4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398da6	29 0f		and #$0f	              AND #$0F
.398da8	05 32		ora $32		              ORA OPL2_PARAMETER0
.398daa	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398dac	6b		rtl		              RTL
.398dad					OPL2_GET_ATTACK
.398dad	c2 20		rep #$20	                REP #$20        ; set A long
.398daf	a9 60 00	lda #$0060	              LDA #$0060
.398db2	85 28		sta $28		              STA OPL2_REG_REGION
.398db4	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398db7	e2 20		sep #$20	                SEP #$20        ; set A short
.398db9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398dbb	29 f0		and #$f0	              AND #$F0
.398dbd	4a		lsr a		              LSR
.398dbe	4a		lsr a		              LSR
.398dbf	4a		lsr a		              LSR
.398dc0	4a		lsr a		              LSR
.398dc1	6b		rtl		              RTL
.398dc2					OPL2_SET_DECAY
.398dc2	c2 20		rep #$20	                REP #$20        ; set A long
.398dc4	a9 60 00	lda #$0060	              LDA #$0060;
.398dc7	85 28		sta $28		              STA OPL2_REG_REGION
.398dc9	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398dcc	e2 20		sep #$20	                SEP #$20        ; set A short
.398dce	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398dd0	29 0f		and #$0f	              AND #$0F
.398dd2	85 32		sta $32		              STA OPL2_PARAMETER0
.398dd4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398dd6	29 f0		and #$f0	              AND #$F0
.398dd8	05 32		ora $32		              ORA OPL2_PARAMETER0
.398dda	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ddc	6b		rtl		              RTL
.398ddd					OPL2_GET_DECAY
.398ddd	c2 20		rep #$20	                REP #$20        ; set A long
.398ddf	a9 60 00	lda #$0060	              LDA #$0060
.398de2	85 28		sta $28		              STA OPL2_REG_REGION
.398de4	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398de7	e2 20		sep #$20	                SEP #$20        ; set A short
.398de9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398deb	29 0f		and #$0f	              AND #$0F
.398ded	6b		rtl		              RTL
.398dee					OPL2_SET_SUSTAIN
.398dee	c2 20		rep #$20	                REP #$20        ; set A long
.398df0	a9 80 00	lda #$0080	              LDA #$0080;
.398df3	85 28		sta $28		              STA OPL2_REG_REGION
.398df5	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398df8	e2 20		sep #$20	                SEP #$20        ; set A short
.398dfa	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398dfc	29 0f		and #$0f	              AND #$0F
.398dfe	0a		asl a		              ASL
.398dff	0a		asl a		              ASL
.398e00	0a		asl a		              ASL
.398e01	0a		asl a		              ASL
.398e02	85 32		sta $32		              STA OPL2_PARAMETER0
.398e04	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e06	29 0f		and #$0f	              AND #$0F
.398e08	05 32		ora $32		              ORA OPL2_PARAMETER0
.398e0a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e0c	6b		rtl		              RTL
.398e0d					OPL2_GET_SUSTAIN
.398e0d	c2 20		rep #$20	                REP #$20        ; set A long
.398e0f	a9 80 00	lda #$0080	              LDA #$0080
.398e12	85 28		sta $28		              STA OPL2_REG_REGION
.398e14	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398e17	e2 20		sep #$20	                SEP #$20        ; set A short
.398e19	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e1b	29 f0		and #$f0	              AND #$F0
.398e1d	4a		lsr a		              LSR
.398e1e	4a		lsr a		              LSR
.398e1f	4a		lsr a		              LSR
.398e20	4a		lsr a		              LSR
.398e21	6b		rtl		              RTL
.398e22					OPL2_SET_RELEASE
.398e22	c2 20		rep #$20	                REP #$20        ; set A long
.398e24	a9 80 00	lda #$0080	              LDA #$0080;
.398e27	85 28		sta $28		              STA OPL2_REG_REGION
.398e29	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398e2c	e2 20		sep #$20	                SEP #$20        ; set A short
.398e2e	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398e30	29 0f		and #$0f	              AND #$0F
.398e32	85 32		sta $32		              STA OPL2_PARAMETER0
.398e34	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e36	29 f0		and #$f0	              AND #$F0
.398e38	05 32		ora $32		              ORA OPL2_PARAMETER0
.398e3a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e3c	6b		rtl		              RTL
.398e3d					OPL2_GET_RELEASE
.398e3d	c2 20		rep #$20	                REP #$20        ; set A long
.398e3f	a9 80 00	lda #$0080	              LDA #$0080
.398e42	85 28		sta $28		              STA OPL2_REG_REGION
.398e44	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.398e47	e2 20		sep #$20	                SEP #$20        ; set A short
.398e49	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e4b	29 0f		and #$0f	              AND #$0F
.398e4d	6b		rtl		              RTL
.398e4e					OPL2_SET_FNUMBER
.398e4e	e2 20		sep #$20	                SEP #$20        ; set A short
.398e50	18		clc		              CLC
.398e51	a5 27		lda $27		              LDA OPL2_CHANNEL
.398e53	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398e55	69 a0		adc #$a0	              ADC #$A0
.398e57	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398e59	a9 00		lda #$00	              LDA #$00
.398e5b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398e5d	c2 30		rep #$30	                REP #$30        ; set A&X long
.398e5f	18		clc		              CLC
.398e60	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398e63	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398e65	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398e67	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398e6a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398e6c	e2 20		sep #$20	                SEP #$20        ; set A short
.398e6e	a5 32		lda $32		              LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.398e70	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]  ; Load
.398e72	18		clc		              CLC
.398e73	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.398e75	69 10		adc #$10	              ADC #$10
.398e77	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398e79	a5 33		lda $33		              LDA OPL2_PARAMETER1
.398e7b	29 03		and #$03	              AND #$03
.398e7d	85 33		sta $33		              STA OPL2_PARAMETER1
.398e7f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e81	29 fc		and #$fc	              AND #$FC
.398e83	05 33		ora $33		              ORA OPL2_PARAMETER1
.398e85	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e87	6b		rtl		              RTL
.398e88					OPL2_GET_FNUMBER
.398e88	e2 20		sep #$20	                SEP #$20        ; set A short
.398e8a	18		clc		              CLC
.398e8b	a5 27		lda $27		              LDA OPL2_CHANNEL
.398e8d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398e8f	69 a0		adc #$a0	              ADC #$A0
.398e91	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398e93	a9 00		lda #$00	              LDA #$00
.398e95	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398e97	c2 30		rep #$30	                REP #$30        ; set A&X long
.398e99	18		clc		              CLC
.398e9a	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398e9d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398e9f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398ea1	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398ea4	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398ea6	e2 20		sep #$20	                SEP #$20        ; set A short
.398ea8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398eaa	85 32		sta $32		              STA OPL2_PARAMETER0
.398eac	18		clc		              CLC
.398ead	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.398eaf	69 10		adc #$10	              ADC #$10
.398eb1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398eb3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398eb5	29 03		and #$03	              AND #$03
.398eb7	85 33		sta $33		              STA OPL2_PARAMETER1
.398eb9	6b		rtl		              RTL
.398eba					OPL2_SET_BLOCK
.398eba	e2 20		sep #$20	                SEP #$20        ; set A short
.398ebc	18		clc		              CLC
.398ebd	a5 27		lda $27		              LDA OPL2_CHANNEL
.398ebf	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398ec1	69 b0		adc #$b0	              ADC #$B0
.398ec3	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398ec5	a9 00		lda #$00	              LDA #$00
.398ec7	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398ec9	c2 30		rep #$30	                REP #$30        ; set A&X long
.398ecb	18		clc		              CLC
.398ecc	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398ecf	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398ed1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398ed3	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398ed6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398ed8	e2 20		sep #$20	                SEP #$20        ; set A short
.398eda	a5 31		lda $31		              LDA OPL2_OCTAVE
.398edc	29 07		and #$07	              AND #$07
.398ede	0a		asl a		              ASL
.398edf	0a		asl a		              ASL
.398ee0	85 31		sta $31		              STA OPL2_OCTAVE
.398ee2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ee4	29 e3		and #$e3	              AND #$E3
.398ee6	05 31		ora $31		              ORA OPL2_OCTAVE
.398ee8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398eea	60		rts		              RTS
.398eeb					OPL2_SET_KEYON
.398eeb	e2 20		sep #$20	                SEP #$20        ; set A short
.398eed	18		clc		              CLC
.398eee	a5 27		lda $27		              LDA OPL2_CHANNEL
.398ef0	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398ef2	69 b0		adc #$b0	              ADC #$B0
.398ef4	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398ef6	a9 00		lda #$00	              LDA #$00
.398ef8	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398efa	c2 30		rep #$30	                REP #$30        ; set A&X long
.398efc	18		clc		              CLC
.398efd	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398f00	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398f02	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f04	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f07	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f09	e2 20		sep #$20	                SEP #$20        ; set A short
.398f0b	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398f0d	29 01		and #$01	              AND #$01
.398f0f	0a		asl a		              ASL
.398f10	0a		asl a		              ASL
.398f11	0a		asl a		              ASL
.398f12	0a		asl a		              ASL
.398f13	0a		asl a		              ASL
.398f14	85 32		sta $32		              STA OPL2_PARAMETER0
.398f16	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f18	29 df		and #$df	              AND #$DF
.398f1a	05 32		ora $32		              ORA OPL2_PARAMETER0
.398f1c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f1e	60		rts		              RTS
.398f1f					OPL2_SET_FEEDBACK
.398f1f	e2 20		sep #$20	                SEP #$20        ; set A short
.398f21	18		clc		              CLC
.398f22	a5 27		lda $27		              LDA OPL2_CHANNEL
.398f24	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398f26	69 c0		adc #$c0	              ADC #$C0
.398f28	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398f2a	a9 00		lda #$00	              LDA #$00
.398f2c	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398f2e	c2 30		rep #$30	                REP #$30        ; set A&X long
.398f30	18		clc		              CLC
.398f31	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398f34	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398f36	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f38	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f3b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f3d	e2 20		sep #$20	                SEP #$20        ; set A short
.398f3f	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398f41	29 07		and #$07	              AND #$07
.398f43	0a		asl a		              ASL
.398f44	85 32		sta $32		              STA OPL2_PARAMETER0
.398f46	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f48	29 01		and #$01	              AND #$01
.398f4a	05 32		ora $32		              ORA OPL2_PARAMETER0
.398f4c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f4e	6b		rtl		              RTL
.398f4f					OPL2_SET_SYNTHMODE
.398f4f	08		php		              PHP ; Push the Carry
.398f50	e2 20		sep #$20	                SEP #$20        ; set A short
.398f52	18		clc		              CLC
.398f53	a5 27		lda $27		              LDA OPL2_CHANNEL
.398f55	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398f57	69 c0		adc #$c0	              ADC #$C0
.398f59	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398f5b	a9 00		lda #$00	              LDA #$00
.398f5d	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398f5f	c2 30		rep #$30	                REP #$30        ; set A&X long
.398f61	18		clc		              CLC
.398f62	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398f65	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398f67	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f69	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f6c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f6e	28		plp		              PLP ; Pull the Carry out
.398f6f	e2 20		sep #$20	                SEP #$20        ; set A short
.398f71	b0 08		bcs $398f7b	              BCS OPL2_Set_Synthmode_Set;
.398f73	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f75	29 fe		and #$fe	              AND #$FE
.398f77	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f79	80 06		bra $398f81	              BRA OPL2_Set_Synthmode_Exit
.398f7b					OPL2_Set_Synthmode_Set
.398f7b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f7d	09 01		ora #$01	              ORA #$01
.398f7f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f81					OPL2_Set_Synthmode_Exit
.398f81	6b		rtl		              RTL
.398f82					OPL2_SET_DEEPTREMOLO
.398f82	c2 20		rep #$20	                REP #$20        ; set A long
.398f84	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398f87	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f89	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f8c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f8e	e2 20		sep #$20	                SEP #$20        ; set A short
.398f90	b0 08		bcs $398f9a	              BCS OPL2_Set_DeepTremolo_Set;
.398f92	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f94	29 7f		and #$7f	              AND #$7F
.398f96	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f98	80 06		bra $398fa0	              BRA OPL2_Set_DeepTremolo_Exit
.398f9a					OPL2_Set_DeepTremolo_Set
.398f9a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f9c	09 80		ora #$80	              ORA #$80
.398f9e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fa0					OPL2_Set_DeepTremolo_Exit
.398fa0	6b		rtl		              RTL
.398fa1					OPL2_SET_DEEPVIBRATO
.398fa1	c2 20		rep #$20	                REP #$20        ; set A long
.398fa3	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398fa6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398fa8	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398fab	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398fad	e2 20		sep #$20	                SEP #$20        ; set A short
.398faf	b0 08		bcs $398fb9	              BCS OPL2_Set_DeepVibrato_Set;
.398fb1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398fb3	29 bf		and #$bf	              AND #$BF
.398fb5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fb7	80 06		bra $398fbf	              BRA OPL2_Set_DeepVibrato_Exit
.398fb9					OPL2_Set_DeepVibrato_Set
.398fb9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398fbb	09 40		ora #$40	              ORA #$40
.398fbd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fbf					OPL2_Set_DeepVibrato_Exit
.398fbf	6b		rtl		              RTL
.398fc0					OPL2_SET_PERCUSSION
.398fc0	c2 20		rep #$20	                REP #$20        ; set A long
.398fc2	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398fc5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398fc7	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398fca	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398fcc	e2 20		sep #$20	                SEP #$20        ; set A short
.398fce	b0 08		bcs $398fd8	              BCS OPL2_Set_Percussion_Set;
.398fd0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398fd2	29 df		and #$df	              AND #$DF
.398fd4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fd6	80 06		bra $398fde	              BRA OPL2_Set_Percussion_Exit
.398fd8					OPL2_Set_Percussion_Set
.398fd8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398fda	09 20		ora #$20	              ORA #$20
.398fdc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fde					OPL2_Set_Percussion_Exit
.398fde	6b		rtl		              RTL
.398fdf					OPL2_SET_DRUMS
.398fdf	c2 20		rep #$20	                REP #$20        ; set A long
.398fe1	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398fe4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398fe6	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398fe9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398feb	e2 20		sep #$20	                SEP #$20        ; set A short
.398fed	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398fef	29 1f		and #$1f	              AND #$1F
.398ff1	85 32		sta $32		              STA OPL2_PARAMETER0
.398ff3	49 ff		eor #$ff	              EOR #$FF
.398ff5	85 33		sta $33		              STA OPL2_PARAMETER1
.398ff7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ff9	25 33		and $33		              AND OPL2_PARAMETER1
.398ffb	05 32		ora $32		              ORA OPL2_PARAMETER0
.398ffd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398fff	6b		rtl		              RTL
.399000					OPL2_SET_WAVEFORM
.399000	c2 20		rep #$20	                REP #$20        ; set A long
.399002	a9 e0 00	lda #$00e0	              LDA #$00E0;
.399005	85 28		sta $28		              STA OPL2_REG_REGION
.399007	20 1b 90	jsr $39901b	              JSR OPL2_GET_REG_OFFSET
.39900a	e2 20		sep #$20	                SEP #$20        ; set A short
.39900c	a5 32		lda $32		              LDA OPL2_PARAMETER0
.39900e	29 03		and #$03	              AND #$03
.399010	85 32		sta $32		              STA OPL2_PARAMETER0
.399012	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.399014	29 fc		and #$fc	              AND #$FC
.399016	05 32		ora $32		              ORA OPL2_PARAMETER0
.399018	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39901a	6b		rtl		              RTL
.39901b					OPL2_GET_REG_OFFSET
.39901b	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39901d	a5 27		lda $27		              LDA OPL2_CHANNEL
.39901f	29 0f		and #$0f	              AND #$0F
.399021	aa		tax		              TAX
.399022	a5 26		lda $26		              LDA OPL2_OPERATOR   ; Check which Operator In used
.399024	29 01		and #$01	              AND #$01            ; if ZERO = The operator 1, One = Operator 2
.399026	c9 01		cmp #$01	              CMP #$01
.399028	f0 06		beq $399030	              BEQ OPL2_Get_Register_Offset_l0
.39902a	bf 2a 88 39	lda $39882a,x	              LDA @lregisterOffsets_operator0, X
.39902e	80 04		bra $399034	              BRA OPL2_Get_Register_Offset_exit
.399030					OPL2_Get_Register_Offset_l0
.399030	bf 33 88 39	lda $398833,x	              LDA @lregisterOffsets_operator1, X
.399034					OPL2_Get_Register_Offset_exit
.399034	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.399036	a9 00		lda #$00	              LDA #$00
.399038	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39903a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39903c	18		clc		              CLC
.39903d	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.399040	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.399042	65 28		adc $28		              ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.399044	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.399046	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.399049	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39904b	60		rts		              RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.39904c					IDE_INIT
.39904c	e2 20		sep #$20	                SEP #$20        ; set A short
.39904e	20 6f 90	jsr $39906f	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.399051	a9 00		lda #$00	              LDA #$00
.399053	8f 3a e8 af	sta $afe83a	              STA IDE_CLDR_HI
.399057	8f 38 e8 af	sta $afe838	              STA IDE_CLDR_LO
.39905b	8f 34 e8 af	sta $afe834	              STA IDE_SECT_CNT
.39905f	a9 01		lda #$01	              LDA #$01
.399061	8f 36 e8 af	sta $afe836	              STA IDE_SECT_SRT
.399065	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.399067	8f 3c e8 af	sta $afe83c	              STA IDE_HEAD
.39906b	20 85 90	jsr $399085	              JSR IDE_DRV_READY_NOTBUSY
.39906e	6b		rtl		              RTL
.39906f					IDE_DRIVE_BSY
.39906f	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.399073	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.399075	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.399077	f0 f6		beq $39906f	              BEQ IDE_DRIVE_BSY
.399079	60		rts		              RTS
.39907a					IDE_DRIVE_READY
.39907a	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39907e	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.399080	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.399082	d0 f6		bne $39907a	              BNE IDE_DRIVE_READY
.399084	60		rts		              RTS
.399085					IDE_DRV_READY_NOTBUSY
.399085	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.399089	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.39908b	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.39908d	d0 f6		bne $399085	              BNE IDE_DRV_READY_NOTBUSY
.39908f	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.399093	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.399095	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.399097	f0 ec		beq $399085	              BEQ IDE_DRV_READY_NOTBUSY
.399099	60		rts		              RTS
.39909a					IDE_NOT_DRQ
.39909a	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.39909e	29 08		and #$08	              AND #$08
.3990a0	c9 08		cmp #$08	              CMP #$08
.3990a2	d0 f6		bne $39909a	              BNE IDE_NOT_DRQ
.3990a4	60		rts		              RTS
.3990a5					IDE_GET_512BYTES
.3990a5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3990a7	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.3990ab	a2 00 00	ldx #$0000	              LDX #$0000
.3990ae					IDE_GET_INFO_KEEP_FETCHING
.3990ae	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.3990b2	9d 00 04	sta $0400,x	              STA SDOS_BLK_BEGIN, X
.3990b5	e8		inx		              INX
.3990b6	e8		inx		              INX
.3990b7	e0 00 02	cpx #$0200	              CPX #$0200
.3990ba	d0 f2		bne $3990ae	              BNE IDE_GET_INFO_KEEP_FETCHING
.3990bc	6b		rtl		              RTL
.3990bd					IDE_GET_INFO
.3990bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3990bf	20 6f 90	jsr $39906f	              JSR IDE_DRIVE_BSY
.3990c2	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.3990c4	8f 3e e8 af	sta $afe83e	              STA IDE_CMD_STAT
.3990c8	20 85 90	jsr $399085	              JSR IDE_DRV_READY_NOTBUSY
.3990cb	20 9a 90	jsr $39909a	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.3990ce	22 a5 90 39	jsl $3990a5	              JSL IDE_GET_512BYTES
.3990d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3990d4	c2 10		rep #$10	                REP #$10        ; set X long
.3990d6	a2 00 00	ldx #$0000	              LDX #$0000
.3990d9					GET_INFO_LOOP
.3990d9	bd 37 04	lda $0437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.3990dc	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3990e0	bd 36 04	lda $0436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.3990e3	22 2c 06 39	jsl $39062c	              JSL IPUTC
.3990e7	e8		inx		              INX
.3990e8	e8		inx		              INX
.3990e9	e0 28 00	cpx #$0028	              CPX #40
.3990ec	d0 eb		bne $3990d9	              BNE GET_INFO_LOOP
.3990ee	6b		rtl		              RTL
.3990ef					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\YM26XX.asm


;******  Processing file: src\YM26XX_def.asm

=$aff000				OPM_BASE_ADDRESS		= $AFF000 ;  $AF:F000-AF:F0FF
=$aff100				PSG_BASE_ADDRESS		= $AFF100
=$fae600				OPL3_BASE_ADRESS		= $FAE600 ;  $AF:E600-AF:E7FF
=$aff200				OPN2_BASE_ADDRESS		= $AFF200 ;  $AF:F200-AF:F3FF
=$100					OPN2_OFFSET_PART_II		= $100
=11530786				OPN2_22_LFO				= OPN2_BASE_ADDRESS + $22;	LFO enable 	|	LFO frequency
=11530788				OPN2_23_TIMER_A_H		= OPN2_BASE_ADDRESS + $24;	Timer A MSBs
=11530789				OPN2_24_TIMER_A_L		= OPN2_BASE_ADDRESS + $25;	Timer A LSBs
=11530790				OPN2_25_TIMER_B			= OPN2_BASE_ADDRESS + $26;	Timer B
=11530791				OPN2_27_CHANEL_3_MODE	= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530791				OPN2_27_TIMER_CONF		= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530792				OPN2_28_KEY_ON_OFF		= OPN2_BASE_ADDRESS + $28;	Operator Channel
=11530794				OPN2_2A_ADC				= OPN2_BASE_ADDRESS + $2A;	DAC
=11530795				OPN2_2B_ADC_EN			= OPN2_BASE_ADDRESS + $2B;	DAC en
=11530800				OPN2_30_ADSR__DT1_MUL__CH1_OP1		= OPN2_BASE_ADDRESS + $30;	DT1 	MUL
=11530801				OPN2_31_ADSR__DT1_MUL__CH2_OP1		= OPN2_BASE_ADDRESS + $31;	DT1 	MUL
=11530802				OPN2_32_ADSR__DT1_MUL__CH3_OP1		= OPN2_BASE_ADDRESS + $32;	DT1 	MUL
=11530804				OPN2_34_ADSR__DT1_MUL__CH1_OP2		= OPN2_BASE_ADDRESS + $34;	DT1 	MUL
=11530805				OPN2_35_ADSR__DT1_MUL__CH2_OP2		= OPN2_BASE_ADDRESS + $35;	DT1 	MUL
=11530806				OPN2_36_ADSR__DT1_MUL__CH3_OP2		= OPN2_BASE_ADDRESS + $36;	DT1 	MUL
=11530808				OPN2_38_ADSR__DT1_MUL__CH1_OP3		= OPN2_BASE_ADDRESS + $38;	DT1 	MUL
=11530809				OPN2_39_ADSR__DT1_MUL__CH2_OP3		= OPN2_BASE_ADDRESS + $39;	DT1 	MUL
=11530810				OPN2_3A_ADSR__DT1_MUL__CH3_OP3		= OPN2_BASE_ADDRESS + $3A;	DT1 	MUL
=11530812				OPN2_3C_ADSR__DT1_MUL__CH1_OP4		= OPN2_BASE_ADDRESS + $3C;	DT1 	MUL
=11530813				OPN2_3D_ADSR__DT1_MUL__CH2_OP4		= OPN2_BASE_ADDRESS + $3D;	DT1 	MUL
=11530814				OPN2_3E_ADSR__DT1_MUL__CH3_OP4		= OPN2_BASE_ADDRESS + $3E;	DT1 	MUL
=11531056				OPN2_30_ADSR__DT1_MUL__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $30;	DT1 	MUL
=11531057				OPN2_31_ADSR__DT1_MUL__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $31;	DT1 	MUL
=11531058				OPN2_32_ADSR__DT1_MUL__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $32;	DT1 	MUL
=11531060				OPN2_34_ADSR__DT1_MUL__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $34;	DT1 	MUL
=11531061				OPN2_35_ADSR__DT1_MUL__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $35;	DT1 	MUL
=11531062				OPN2_36_ADSR__DT1_MUL__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $36;	DT1 	MUL
=11531064				OPN2_38_ADSR__DT1_MUL__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $38;	DT1 	MUL
=11531065				OPN2_39_ADSR__DT1_MUL__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $39;	DT1 	MUL
=11531066				OPN2_3A_ADSR__DT1_MUL__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3A;	DT1 	MUL
=11531068				OPN2_3C_ADSR__DT1_MUL__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3C;	DT1 	MUL
=11531069				OPN2_3D_ADSR__DT1_MUL__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3D;	DT1 	MUL
=11531070				OPN2_3E_ADSR__DT1_MUL__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3E;	DT1 	MUL
=11530816				OPN2_40_ADSR__LT__CH1_OP1		= OPN2_BASE_ADDRESS + $40;	LT
=11530817				OPN2_41_ADSR__LT__CH2_OP1		= OPN2_BASE_ADDRESS + $41;	LT
=11530818				OPN2_42_ADSR__LT__CH3_OP1		= OPN2_BASE_ADDRESS + $42;	LT
=11530820				OPN2_44_ADSR__LT__CH1_OP2		= OPN2_BASE_ADDRESS + $44;	LT
=11530821				OPN2_45_ADSR__LT__CH2_OP2		= OPN2_BASE_ADDRESS + $45;	LT
=11530822				OPN2_46_ADSR__LT__CH3_OP2		= OPN2_BASE_ADDRESS + $46;	LT
=11530824				OPN2_48_ADSR__LT__CH1_OP3		= OPN2_BASE_ADDRESS + $48;	LT
=11530825				OPN2_49_ADSR__LT__CH2_OP3		= OPN2_BASE_ADDRESS + $49;	LT
=11530826				OPN2_4A_ADSR__LT__CH3_OP3		= OPN2_BASE_ADDRESS + $4A;	LT
=11530828				OPN2_4C_ADSR__LT__CH1_OP4		= OPN2_BASE_ADDRESS + $4C;	LT
=11530829				OPN2_4D_ADSR__LT__CH2_OP4		= OPN2_BASE_ADDRESS + $4D;	LT
=11530830				OPN2_4E_ADSR__LT__CH3_OP4		= OPN2_BASE_ADDRESS + $4E;	LT
=11531072				OPN2_40_ADSR__LT__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $40;	LT
=11531073				OPN2_41_ADSR__LT__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $41;	LT
=11531074				OPN2_42_ADSR__LT__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $42;	LT
=11531076				OPN2_44_ADSR__LT__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $44;	LT
=11531077				OPN2_45_ADSR__LT__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $45;	LT
=11531078				OPN2_46_ADSR__LT__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $46;	LT
=11531080				OPN2_48_ADSR__LT__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $48;	LT
=11531081				OPN2_49_ADSR__LT__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $49;	LT
=11531082				OPN2_4A_ADSR__LT__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4A;	LT
=11531084				OPN2_4C_ADSR__LT__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4C;	LT
=11531085				OPN2_4D_ADSR__LT__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4D;	LT
=11531086				OPN2_4E_ADSR__LT__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4E;	LT
=11530832				OPN2_50_ADSR__SR_AR__CH1_OP1		= OPN2_BASE_ADDRESS + $50;	SR AR
=11530833				OPN2_51_ADSR__SR_AR__CH2_OP1		= OPN2_BASE_ADDRESS + $51;	SR AR
=11530834				OPN2_52_ADSR__SR_AR__CH3_OP1		= OPN2_BASE_ADDRESS + $52;	SR AR
=11530836				OPN2_54_ADSR__SR_AR__CH1_OP2		= OPN2_BASE_ADDRESS + $54;	SR AR
=11530837				OPN2_55_ADSR__SR_AR__CH2_OP2		= OPN2_BASE_ADDRESS + $55;	SR AR
=11530838				OPN2_56_ADSR__SR_AR__CH3_OP2		= OPN2_BASE_ADDRESS + $56;	SR AR
=11530840				OPN2_58_ADSR__SR_AR__CH1_OP3		= OPN2_BASE_ADDRESS + $58;	SR AR
=11530841				OPN2_59_ADSR__SR_AR__CH2_OP3		= OPN2_BASE_ADDRESS + $59;	SR AR
=11530842				OPN2_5A_ADSR__SR_AR__CH3_OP3		= OPN2_BASE_ADDRESS + $5A;	SR AR
=11530844				OPN2_5C_ADSR__SR_AR__CH1_OP4		= OPN2_BASE_ADDRESS + $5C;	SR AR
=11530845				OPN2_5D_ADSR__SR_AR__CH2_OP4		= OPN2_BASE_ADDRESS + $5D;	SR AR
=11530846				OPN2_5E_ADSR__SR_AR__CH3_OP4		= OPN2_BASE_ADDRESS + $5E;	SR AR
=11531088				OPN2_50_ADSR__SR_AR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $50;	SR AR
=11531089				OPN2_51_ADSR__SR_AR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $51;	SR AR
=11531090				OPN2_52_ADSR__SR_AR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $52;	SR AR
=11531092				OPN2_54_ADSR__SR_AR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $54;	SR AR
=11531093				OPN2_55_ADSR__SR_AR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $55;	SR AR
=11531094				OPN2_56_ADSR__SR_AR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $56;	SR AR
=11531096				OPN2_58_ADSR__SR_AR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $58;	SR AR
=11531097				OPN2_59_ADSR__SR_AR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $59;	SR AR
=11531098				OPN2_5A_ADSR__SR_AR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5A;	SR AR
=11531100				OPN2_5C_ADSR__SR_AR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5C;	SR AR
=11531101				OPN2_5D_ADSR__SR_AR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5D;	SR AR
=11531102				OPN2_5E_ADSR__SR_AR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5E;	SR AR
=11530848				OPN2_60_ADSR__AM_D1R__CH1_OP1		= OPN2_BASE_ADDRESS + $60;	AM D1R
=11530849				OPN2_61_ADSR__AM_D1R__CH2_OP1		= OPN2_BASE_ADDRESS + $61;	AM D1R
=11530850				OPN2_62_ADSR__AM_D1R__CH3_OP1		= OPN2_BASE_ADDRESS + $62;	AM D1R
=11530852				OPN2_64_ADSR__AM_D1R__CH1_OP2		= OPN2_BASE_ADDRESS + $64;	AM D1R
=11530853				OPN2_65_ADSR__AM_D1R__CH2_OP2		= OPN2_BASE_ADDRESS + $65;	AM D1R
=11530854				OPN2_66_ADSR__AM_D1R__CH3_OP2		= OPN2_BASE_ADDRESS + $66;	AM D1R
=11530856				OPN2_68_ADSR__AM_D1R__CH1_OP3		= OPN2_BASE_ADDRESS + $68;	AM D1R
=11530857				OPN2_69_ADSR__AM_D1R__CH2_OP3		= OPN2_BASE_ADDRESS + $69;	AM D1R
=11530858				OPN2_6A_ADSR__AM_D1R__CH3_OP3		= OPN2_BASE_ADDRESS + $6A;	AM D1R
=11530860				OPN2_6C_ADSR__AM_D1R__CH1_OP4		= OPN2_BASE_ADDRESS + $6C;	AM D1R
=11530861				OPN2_6D_ADSR__AM_D1R__CH2_OP4		= OPN2_BASE_ADDRESS + $6D;	AM D1R
=11530862				OPN2_6E_ADSR__AM_D1R__CH3_OP4		= OPN2_BASE_ADDRESS + $6E;	AM D1R
=11531104				OPN2_60_ADSR__AM_D1R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $60;	AM D1R
=11531105				OPN2_61_ADSR__AM_D1R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $61;	AM D1R
=11531106				OPN2_62_ADSR__AM_D1R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $62;	AM D1R
=11531108				OPN2_64_ADSR__AM_D1R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $64;	AM D1R
=11531109				OPN2_65_ADSR__AM_D1R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $65;	AM D1R
=11531110				OPN2_66_ADSR__AM_D1R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $66;	AM D1R
=11531112				OPN2_68_ADSR__AM_D1R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $68;	AM D1R
=11531113				OPN2_69_ADSR__AM_D1R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $69;	AM D1R
=11531114				OPN2_6A_ADSR__AM_D1R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6A;	AM D1R
=11531116				OPN2_6C_ADSR__AM_D1R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6C;	AM D1R
=11531117				OPN2_6D_ADSR__AM_D1R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6D;	AM D1R
=11531118				OPN2_6E_ADSR__AM_D1R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6E;	AM D1R
=11530864				OPN2_70_ADSR__D2R__CH1_OP1		= OPN2_BASE_ADDRESS + $70;	D2R
=11530865				OPN2_71_ADSR__D2R__CH2_OP1		= OPN2_BASE_ADDRESS + $71;	D2R
=11530866				OPN2_72_ADSR__D2R__CH3_OP1		= OPN2_BASE_ADDRESS + $72;	D2R
=11530868				OPN2_74_ADSR__D2R__CH1_OP2		= OPN2_BASE_ADDRESS + $74;	D2R
=11530869				OPN2_75_ADSR__D2R__CH2_OP2		= OPN2_BASE_ADDRESS + $75;	D2R
=11530870				OPN2_76_ADSR__D2R__CH3_OP2		= OPN2_BASE_ADDRESS + $76;	D2R
=11530872				OPN2_78_ADSR__D2R__CH1_OP3		= OPN2_BASE_ADDRESS + $78;	D2R
=11530873				OPN2_79_ADSR__D2R__CH2_OP3		= OPN2_BASE_ADDRESS + $79;	D2R
=11530874				OPN2_7A_ADSR__D2R__CH3_OP3		= OPN2_BASE_ADDRESS + $7A;	D2R
=11530876				OPN2_7C_ADSR__D2R__CH1_OP4		= OPN2_BASE_ADDRESS + $7C;	D2R
=11530877				OPN2_7D_ADSR__D2R__CH2_OP4		= OPN2_BASE_ADDRESS + $7D;	D2R
=11530878				OPN2_7E_ADSR__D2R__CH3_OP4		= OPN2_BASE_ADDRESS + $7E;	D2R
=11531120				OPN2_70_ADSR__D2R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $70;	D2R
=11531121				OPN2_71_ADSR__D2R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $71;	D2R
=11531122				OPN2_72_ADSR__D2R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $72;	D2R
=11531124				OPN2_74_ADSR__D2R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $74;	D2R
=11531125				OPN2_75_ADSR__D2R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $75;	D2R
=11531126				OPN2_76_ADSR__D2R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $76;	D2R
=11531128				OPN2_78_ADSR__D2R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $78;	D2R
=11531129				OPN2_79_ADSR__D2R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $79;	D2R
=11531130				OPN2_7A_ADSR__D2R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7A;	D2R
=11531132				OPN2_7C_ADSR__D2R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7C;	D2R
=11531133				OPN2_7D_ADSR__D2R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7D;	D2R
=11531134				OPN2_7E_ADSR__D2R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7E;	D2R
=11530880				OPN2_80_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $80;	D1L RR
=11530881				OPN2_81_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $81;	D1L RR
=11530882				OPN2_82_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $82;	D1L RR
=11530884				OPN2_84_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $84;	D1L RR
=11530885				OPN2_85_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $85;	D1L RR
=11530886				OPN2_86_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $86;	D1L RR
=11530888				OPN2_88_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $88;	D1L RR
=11530889				OPN2_89_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $89;	D1L RR
=11530890				OPN2_8A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $8A;	D1L RR
=11530892				OPN2_8C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $8C;	D1L RR
=11530893				OPN2_8D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $8D;	D1L RR
=11530894				OPN2_8E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $8E;	D1L RR
=11531136				OPN2_80_ADSR__D1L_RR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $80;	D1L RR
=11531137				OPN2_81_ADSR__D1L_RR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $81;	D1L RR
=11531138				OPN2_82_ADSR__D1L_RR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $82;	D1L RR
=11531140				OPN2_84_ADSR__D1L_RR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $84;	D1L RR
=11531141				OPN2_85_ADSR__D1L_RR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $85;	D1L RR
=11531142				OPN2_86_ADSR__D1L_RR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $86;	D1L RR
=11531144				OPN2_88_ADSR__D1L_RR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $88;	D1L RR
=11531145				OPN2_89_ADSR__D1L_RR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $89;	D1L RR
=11531146				OPN2_8A_ADSR__D1L_RR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8A;	D1L RR
=11531148				OPN2_8C_ADSR__D1L_RR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8C;	D1L RR
=11531149				OPN2_8D_ADSR__D1L_RR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8D;	D1L RR
=11531150				OPN2_8E_ADSR__D1L_RR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8E;	D1L RR
=11530896				OPN2_90_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $90;	D1L RR
=11530897				OPN2_91_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $91;	D1L RR
=11530898				OPN2_92_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $92;	D1L RR
=11530900				OPN2_94_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $94;	D1L RR
=11530901				OPN2_95_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $95;	D1L RR
=11530902				OPN2_96_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $96;	D1L RR
=11530904				OPN2_98_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $98;	D1L RR
=11530905				OPN2_99_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $99;	D1L RR
=11530906				OPN2_9A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $9A;	D1L RR
=11530908				OPN2_9C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $9C;	D1L RR
=11530909				OPN2_9D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $9D;	D1L RR
=11530910				OPN2_9E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $9E;	D1L RR
=11531152				OPN2_90_ADSR__D1L_RR__CH4_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $90;	D1L RR
=11531153				OPN2_91_ADSR__D1L_RR__CH5_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $91;	D1L RR
=11531154				OPN2_92_ADSR__D1L_RR__CH6_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $92;	D1L RR
=11531156				OPN2_94_ADSR__D1L_RR__CH4_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $94;	D1L RR
=11531157				OPN2_95_ADSR__D1L_RR__CH5_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $95;	D1L RR
=11531158				OPN2_96_ADSR__D1L_RR__CH6_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $96;	D1L RR
=11531160				OPN2_98_ADSR__D1L_RR__CH4_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $98;	D1L RR
=11531161				OPN2_99_ADSR__D1L_RR__CH5_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $99;	D1L RR
=11531162				OPN2_9A_ADSR__D1L_RR__CH6_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9A;	D1L RR
=11531164				OPN2_9C_ADSR__D1L_RR__CH4_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9C;	D1L RR
=11531165				OPN2_9D_ADSR__D1L_RR__CH5_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9D;	D1L RR
=11531166				OPN2_9E_ADSR__D1L_RR__CH6_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9E;	D1L RR
=11530912				OPN2_A0_CH1_FRECANCY_L				= OPN2_BASE_ADDRESS + $A0;	Frequency number LSB
=11530913				OPN2_A1_CH2_FRECANCY_L				= OPN2_BASE_ADDRESS + $A1;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_L				= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_OP1_L			= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB Chanel 3 Operator 1 if special mode
=11530920				OPN2_A8_CH3_FRECANCY_OP2_L			= OPN2_BASE_ADDRESS + $A8;	Frequency number LSB Chanel 3 Operator 2 if special mode
=11530921				OPN2_A9_CH3_FRECANCY_OP3_L			= OPN2_BASE_ADDRESS + $A9;	Frequency number LSB Chanel 3 Operator 3 if special mode
=11530922				OPN2_AA_CH3_FRECANCY_OP4_L			= OPN2_BASE_ADDRESS + $AA;	Frequency number LSB Chanel 3 Operator 4 if special mode
=11531168				OPN2_A0_CH4_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A0;	Frequency number LSB
=11531169				OPN2_A1_CH5_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A1;	Frequency number LSB
=11531170				OPN2_A2_CH6_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A2;	Frequency number LSB
=11530916				OPN2_A4_CH1_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A4;	OCTAVE and Frequency number MSB
=11530917				OPN2_A5_CH2_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A5;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_OP1_H	= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB Chanel 3 Operator 1 if special mode
=11530924				OPN2_AC_CH3_OCTAVE_FRECANCY_OP2_H	= OPN2_BASE_ADDRESS + $AC;	OCTAVE and Frequency number MSB Chanel 3 Operator 2 if special mode
=11530925				OPN2_AD_CH3_OCTAVE_FRECANCY_OP3_H	= OPN2_BASE_ADDRESS + $AD;	OCTAVE and Frequency number MSB Chanel 3 Operator 3 if special mode
=11530926				OPN2_AE_CH3_OCTAVE_FRECANCY_OP4_H	= OPN2_BASE_ADDRESS + $AE;	OCTAVE and Frequency number MSB Chanel 3 Operator 4 if special mode
=11531172				OPN2_A4_CH4_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A4;	OCTAVE and Frequency number MSB
=11531173				OPN2_A5_CH5_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A5;	OCTAVE and Frequency number MSB
=11531174				OPN2_A6_CH6_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A6;	OCTAVE and Frequency number MSB
=11530928				OPN2_B0_CH1_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B0;
=11530929				OPN2_B1_CH2_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B1;
=11530930				OPN2_B2_CH3_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B2;
=11531184				OPN2_B0_CH4_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B0;
=11531185				OPN2_B1_CH5_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B1;
=11531186				OPN2_B2_CH6_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B2;
=11530932				OPN2_B4_CH1_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B4;
=11530933				OPN2_B5_CH2_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B5;
=11530934				OPN2_B6_CH3_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B6;
=11531188				OPN2_B4_CH4_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B4;
=11531189				OPN2_B5_CH5_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B5;
=11531190				OPN2_B6_CH6_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B6;
=11530241				OPM_01_TEST					= OPM_BASE_ADDRESS + $01;
=11530248				OPM_08_KEY_ON_OFF		= OPM_BASE_ADDRESS + $08;
=11530255				OPM_0F_NE_NFREQ			= OPM_BASE_ADDRESS + $0F;
=11530256				OPM_10_CLK_A1				= OPM_BASE_ADDRESS + $10;
=11530257				OPM_11_CLK_A2				= OPM_BASE_ADDRESS + $11;
=11530258				OPM_12_CLK_B				= OPM_BASE_ADDRESS + $12;
=11530260				OPM_14_CMS_FLAG_RESET_IRQEN_LOAD	= OPM_BASE_ADDRESS + $14;
=11530264				OPM_18_LFRQ					= OPM_BASE_ADDRESS + $18;
=11530265				OPM_19_PMD_AMD			= OPM_BASE_ADDRESS + $19;
=11530267				OPM_1B_CT_W					= OPM_BASE_ADDRESS + $1B;
=11530272				OPM_20_A_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $20;
=11530273				OPM_21_B_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $21;
=11530274				OPM_22_C_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $22;
=11530275				OPM_23_D_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $23;
=11530276				OPM_24_E_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $24;
=11530277				OPM_25_F_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $25;
=11530278				OPM_26_G_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $26;
=11530279				OPM_27_H_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $27;
=11530280				OPM_28_A_KC							= OPM_BASE_ADDRESS + $28;
=11530281				OPM_29_B_KC							= OPM_BASE_ADDRESS + $29;
=11530282				OPM_2A_C_KC							= OPM_BASE_ADDRESS + $2A;
=11530283				OPM_2B_D_KC							= OPM_BASE_ADDRESS + $2B;
=11530284				OPM_2C_E_KC							= OPM_BASE_ADDRESS + $2C;
=11530285				OPM_2D_F_KC							= OPM_BASE_ADDRESS + $2D;
=11530286				OPM_2E_G_KC							= OPM_BASE_ADDRESS + $2E;
=11530287				OPM_2F_H_KC							= OPM_BASE_ADDRESS + $2F;
=11530288				OPM_30_A_KF							= OPM_BASE_ADDRESS + $30;
=11530289				OPM_31_B_KF							= OPM_BASE_ADDRESS + $31;
=11530290				OPM_32_C_KF							= OPM_BASE_ADDRESS + $32;
=11530291				OPM_33_D_KF							= OPM_BASE_ADDRESS + $33;
=11530292				OPM_34_E_KF							= OPM_BASE_ADDRESS + $34;
=11530293				OPM_35_F_KF							= OPM_BASE_ADDRESS + $35;
=11530294				OPM_36_G_KF							= OPM_BASE_ADDRESS + $36;
=11530295				OPM_37_H_KF							= OPM_BASE_ADDRESS + $37;
=11530296				OPM_38_A_PMS_AMS				= OPM_BASE_ADDRESS + $38;
=11530297				OPM_39_B_PMS_AMS				= OPM_BASE_ADDRESS + $39;
=11530298				OPM_3A_C_PMS_AMS				= OPM_BASE_ADDRESS + $3A;
=11530299				OPM_3B_D_PMS_AMS				= OPM_BASE_ADDRESS + $3B;
=11530300				OPM_3C_E_PMS_AMS				= OPM_BASE_ADDRESS + $3C;
=11530301				OPM_3D_F_PMS_AMS				= OPM_BASE_ADDRESS + $3D;
=11530302				OPM_3E_G_PMS_AMS				= OPM_BASE_ADDRESS + $3E;
=11530303				OPM_3F_H_PMS_AMS				= OPM_BASE_ADDRESS + $3F;
=11530304				OPM_40_A_M1_DT1_MUL			= OPM_BASE_ADDRESS + $40;
=11530305				OPM_41_B_M1_DT1_MUL			= OPM_BASE_ADDRESS + $41;
=11530306				OPM_42_C_M1_DT1_MUL			= OPM_BASE_ADDRESS + $42;
=11530307				OPM_43_D_M1_DT1_MUL			= OPM_BASE_ADDRESS + $43;
=11530308				OPM_44_E_M1_DT1_MUL			= OPM_BASE_ADDRESS + $44;
=11530309				OPM_45_F_M1_DT1_MUL			= OPM_BASE_ADDRESS + $45;
=11530310				OPM_46_G_M1_DT1_MUL			= OPM_BASE_ADDRESS + $46;
=11530311				OPM_47_H_M1_DT1_MUL			= OPM_BASE_ADDRESS + $47;
=11530312				OPM_48_A_M2_DT1_MUL			= OPM_BASE_ADDRESS + $48;
=11530313				OPM_49_B_M2_DT1_MUL			= OPM_BASE_ADDRESS + $49;
=11530314				OPM_4A_C_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4A;
=11530315				OPM_4B_D_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4B;
=11530316				OPM_4C_E_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4C;
=11530317				OPM_4D_F_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4D;
=11530318				OPM_4E_G_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4E;
=11530319				OPM_4F_H_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4F;
=11530320				OPM_50_A_C1_DT1_MUL			= OPM_BASE_ADDRESS + $50;
=11530321				OPM_51_B_C1_DT1_MUL			= OPM_BASE_ADDRESS + $51;
=11530322				OPM_52_C_C1_DT1_MUL			= OPM_BASE_ADDRESS + $52;
=11530323				OPM_53_D_C1_DT1_MUL			= OPM_BASE_ADDRESS + $53;
=11530324				OPM_54_E_C1_DT1_MUL			= OPM_BASE_ADDRESS + $54;
=11530325				OPM_55_F_C1_DT1_MUL			= OPM_BASE_ADDRESS + $55;
=11530326				OPM_56_G_C1_DT1_MUL			= OPM_BASE_ADDRESS + $56;
=11530327				OPM_57_H_C1_DT1_MUL			= OPM_BASE_ADDRESS + $57;
=11530328				OPM_58_A_C2_DT1_MUL			= OPM_BASE_ADDRESS + $58;
=11530329				OPM_59_B_C2_DT1_MUL			= OPM_BASE_ADDRESS + $59;
=11530330				OPM_5A_C_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5A;
=11530331				OPM_5B_D_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5B;
=11530332				OPM_5C_E_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5C;
=11530333				OPM_5D_F_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5D;
=11530334				OPM_5E_G_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5E;
=11530335				OPM_5F_H_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5F;
=11530336				OPM_60_A_M1_TL				= OPM_BASE_ADDRESS + $60;
=11530337				OPM_61_B_M1_TL				= OPM_BASE_ADDRESS + $61;
=11530338				OPM_62_C_M1_TL				= OPM_BASE_ADDRESS + $62;
=11530339				OPM_63_D_M1_TL				= OPM_BASE_ADDRESS + $63;
=11530340				OPM_64_E_M1_TL				= OPM_BASE_ADDRESS + $64;
=11530341				OPM_65_F_M1_TL				= OPM_BASE_ADDRESS + $65;
=11530342				OPM_66_G_M1_TL				= OPM_BASE_ADDRESS + $66;
=11530343				OPM_67_H_M1_TL				= OPM_BASE_ADDRESS + $67;
=11530344				OPM_68_A_M2_TL				= OPM_BASE_ADDRESS + $68;
=11530345				OPM_69_B_M2_TL				= OPM_BASE_ADDRESS + $69;
=11530346				OPM_6A_C_M2_TL				= OPM_BASE_ADDRESS + $6A;
=11530347				OPM_6B_D_M2_TL				= OPM_BASE_ADDRESS + $6B;
=11530348				OPM_6C_E_M2_TL				= OPM_BASE_ADDRESS + $6C;
=11530349				OPM_6D_F_M2_TL				= OPM_BASE_ADDRESS + $6D;
=11530350				OPM_6E_G_M2_TL				= OPM_BASE_ADDRESS + $6E;
=11530351				OPM_6F_H_M2_TL				= OPM_BASE_ADDRESS + $6F;
=11530352				OPM_70_A_C1_TL				= OPM_BASE_ADDRESS + $70;
=11530353				OPM_71_B_C1_TL				= OPM_BASE_ADDRESS + $71;
=11530354				OPM_72_C_C1_TL				= OPM_BASE_ADDRESS + $72;
=11530355				OPM_73_D_C1_TL				= OPM_BASE_ADDRESS + $73;
=11530356				OPM_74_E_C1_TL				= OPM_BASE_ADDRESS + $74;
=11530357				OPM_75_F_C1_TL				= OPM_BASE_ADDRESS + $75;
=11530358				OPM_76_G_C1_TL				= OPM_BASE_ADDRESS + $76;
=11530359				OPM_77_H_C1_TL				= OPM_BASE_ADDRESS + $77;
=11530360				OPM_78_A_C2_TL				= OPM_BASE_ADDRESS + $78;
=11530361				OPM_79_B_C2_TL				= OPM_BASE_ADDRESS + $79;
=11530362				OPM_7A_C_C2_TL				= OPM_BASE_ADDRESS + $7A;
=11530363				OPM_7B_D_C2_TL				= OPM_BASE_ADDRESS + $7B;
=11530364				OPM_7C_E_C2_TL				= OPM_BASE_ADDRESS + $7C;
=11530365				OPM_7D_F_C2_TL				= OPM_BASE_ADDRESS + $7D;
=11530366				OPM_7E_G_C2_TL				= OPM_BASE_ADDRESS + $7E;
=11530367				OPM_7F_H_C2_TL				= OPM_BASE_ADDRESS + $7F;
=11530368				OPM_80_A_M1_KS_AR			= OPM_BASE_ADDRESS + $80;
=11530369				OPM_81_B_M1_KS_AR			= OPM_BASE_ADDRESS + $81;
=11530370				OPM_82_C_M1_KS_AR			= OPM_BASE_ADDRESS + $82;
=11530371				OPM_83_D_M1_KS_AR			= OPM_BASE_ADDRESS + $83;
=11530372				OPM_84_E_M1_KS_AR			= OPM_BASE_ADDRESS + $84;
=11530373				OPM_85_F_M1_KS_AR			= OPM_BASE_ADDRESS + $85;
=11530374				OPM_86_G_M1_KS_AR			= OPM_BASE_ADDRESS + $86;
=11530375				OPM_87_H_M1_KS_AR			= OPM_BASE_ADDRESS + $87;
=11530376				OPM_88_A_M2_KS_AR			= OPM_BASE_ADDRESS + $88;
=11530377				OPM_89_B_M2_KS_AR			= OPM_BASE_ADDRESS + $89;
=11530378				OPM_8A_C_M2_KS_AR			= OPM_BASE_ADDRESS + $8A;
=11530379				OPM_8B_D_M2_KS_AR			= OPM_BASE_ADDRESS + $8B;
=11530380				OPM_8C_E_M2_KS_AR			= OPM_BASE_ADDRESS + $8C;
=11530381				OPM_8D_F_M2_KS_AR			= OPM_BASE_ADDRESS + $8D;
=11530382				OPM_8E_G_M2_KS_AR			= OPM_BASE_ADDRESS + $8E;
=11530383				OPM_8F_H_M2_KS_AR			= OPM_BASE_ADDRESS + $8F;
=11530384				OPM_90_A_C1_KS_AR			= OPM_BASE_ADDRESS + $90;
=11530385				OPM_91_B_C1_KS_AR			= OPM_BASE_ADDRESS + $91;
=11530386				OPM_92_C_C1_KS_AR			= OPM_BASE_ADDRESS + $92;
=11530387				OPM_93_D_C1_KS_AR			= OPM_BASE_ADDRESS + $93;
=11530388				OPM_94_E_C1_KS_AR			= OPM_BASE_ADDRESS + $94;
=11530389				OPM_95_F_C1_KS_AR			= OPM_BASE_ADDRESS + $95;
=11530390				OPM_96_G_C1_KS_AR			= OPM_BASE_ADDRESS + $96;
=11530391				OPM_97_H_C1_KS_AR			= OPM_BASE_ADDRESS + $97;
=11530392				OPM_98_A_C2_KS_AR			= OPM_BASE_ADDRESS + $98;
=11530393				OPM_99_B_C2_KS_AR			= OPM_BASE_ADDRESS + $99;
=11530394				OPM_9A_C_C2_KS_AR			= OPM_BASE_ADDRESS + $9A;
=11530395				OPM_9B_D_C2_KS_AR			= OPM_BASE_ADDRESS + $9B;
=11530396				OPM_9C_E_C2_KS_AR			= OPM_BASE_ADDRESS + $9C;
=11530397				OPM_9D_F_C2_KS_AR			= OPM_BASE_ADDRESS + $9D;
=11530398				OPM_9E_G_C2_KS_AR			= OPM_BASE_ADDRESS + $9E;
=11530399				OPM_9F_H_C2_KS_AR			= OPM_BASE_ADDRESS + $9F;
=11530400				OPM_A0_A_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A0;
=11530401				OPM_A1_B_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A1;
=11530402				OPM_A2_C_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A2;
=11530403				OPM_A3_D_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A3;
=11530404				OPM_A4_E_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A4;
=11530405				OPM_A5_F_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A5;
=11530406				OPM_A6_G_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A6;
=11530407				OPM_A7_H_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A7;
=11530408				OPM_A8_A_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A8;
=11530409				OPM_A9_B_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A9;
=11530410				OPM_AA_C_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AA;
=11530411				OPM_AB_D_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AB;
=11530412				OPM_AC_E_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AC;
=11530413				OPM_AD_F_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AD;
=11530414				OPM_AE_G_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AE;
=11530415				OPM_AF_H_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AF;
=11530416				OPM_B0_A_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B0;
=11530417				OPM_B1_B_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B1;
=11530418				OPM_B2_C_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B2;
=11530419				OPM_B3_D_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B3;
=11530420				OPM_B4_E_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B4;
=11530421				OPM_B5_F_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B5;
=11530422				OPM_B6_G_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B6;
=11530423				OPM_B7_H_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B7;
=11530424				OPM_B8_A_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B8;
=11530425				OPM_B9_B_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B9;
=11530426				OPM_BA_C_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BA;
=11530427				OPM_BB_D_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BB;
=11530428				OPM_BC_E_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BC;
=11530429				OPM_BD_F_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BD;
=11530430				OPM_BE_G_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BE;
=11530431				OPM_BF_H_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BF;
=11530432				OPM_C0_A_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C0;
=11530433				OPM_C1_B_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C1;
=11530434				OPM_C2_C_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C2;
=11530435				OPM_C3_D_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C3;
=11530436				OPM_C4_E_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C4;
=11530437				OPM_C5_F_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C5;
=11530438				OPM_C6_G_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C6;
=11530439				OPM_C7_H_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C7;
=11530440				OPM_C8_A_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C8;
=11530441				OPM_C9_B_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C9;
=11530442				OPM_CA_C_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CA;
=11530443				OPM_CB_D_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CB;
=11530444				OPM_CC_E_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CC;
=11530445				OPM_CD_F_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CD;
=11530446				OPM_CE_G_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CE;
=11530447				OPM_CF_H_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CF;
=11530448				OPM_D0_A_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D0;
=11530449				OPM_D1_B_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D1;
=11530450				OPM_D2_C_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D2;
=11530451				OPM_D3_D_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D3;
=11530452				OPM_D4_E_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D4;
=11530453				OPM_D5_F_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D5;
=11530454				OPM_D6_G_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D6;
=11530455				OPM_D7_H_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D7;
=11530456				OPM_D8_A_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D8;
=11530457				OPM_D9_B_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D9;
=11530458				OPM_DA_C_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DA;
=11530459				OPM_DB_D_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DB;
=11530460				OPM_DC_E_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DC;
=11530461				OPM_DD_F_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DD;
=11530462				OPM_DE_G_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DE;
=11530463				OPM_DF_H_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DF;
=11530464				OPM_E0_A_M1_D1L_RR			= OPM_BASE_ADDRESS + $E0;
=11530465				OPM_E1_B_M1_D1L_RR			= OPM_BASE_ADDRESS + $E1;
=11530466				OPM_E2_C_M1_D1L_RR			= OPM_BASE_ADDRESS + $E2;
=11530467				OPM_E3_D_M1_D1L_RR			= OPM_BASE_ADDRESS + $E3;
=11530468				OPM_E4_E_M1_D1L_RR			= OPM_BASE_ADDRESS + $E4;
=11530469				OPM_E5_F_M1_D1L_RR			= OPM_BASE_ADDRESS + $E5;
=11530470				OPM_E6_G_M1_D1L_RR			= OPM_BASE_ADDRESS + $E6;
=11530471				OPM_E7_H_M1_D1L_RR			= OPM_BASE_ADDRESS + $E7;
=11530472				OPM_E8_A_M2_D1L_RR			= OPM_BASE_ADDRESS + $E8;
=11530473				OPM_E9_B_M2_D1L_RR			= OPM_BASE_ADDRESS + $E9;
=11530474				OPM_EA_C_M2_D1L_RR			= OPM_BASE_ADDRESS + $EA;
=11530475				OPM_EB_D_M2_D1L_RR			= OPM_BASE_ADDRESS + $EB;
=11530476				OPM_EC_E_M2_D1L_RR			= OPM_BASE_ADDRESS + $EC;
=11530477				OPM_ED_F_M2_D1L_RR			= OPM_BASE_ADDRESS + $ED;
=11530478				OPM_EE_G_M2_D1L_RR			= OPM_BASE_ADDRESS + $EE;
=11530479				OPM_EF_H_M2_D1L_RR			= OPM_BASE_ADDRESS + $EF;
=11530480				OPM_F0_A_C1_D1L_RR			= OPM_BASE_ADDRESS + $F0;
=11530481				OPM_F1_B_C1_D1L_RR			= OPM_BASE_ADDRESS + $F1;
=11530482				OPM_F2_C_C1_D1L_RR			= OPM_BASE_ADDRESS + $F2;
=11530483				OPM_F3_D_C1_D1L_RR			= OPM_BASE_ADDRESS + $F3;
=11530484				OPM_F4_E_C1_D1L_RR			= OPM_BASE_ADDRESS + $F4;
=11530485				OPM_F5_F_C1_D1L_RR			= OPM_BASE_ADDRESS + $F5;
=11530486				OPM_F6_G_C1_D1L_RR			= OPM_BASE_ADDRESS + $F6;
=11530487				OPM_F7_H_C1_D1L_RR			= OPM_BASE_ADDRESS + $F7;
=11530488				OPM_F8_A_C2_D1L_RR			= OPM_BASE_ADDRESS + $F8;
=11530489				OPM_F9_B_C2_D1L_RR			= OPM_BASE_ADDRESS + $F9;
=11530490				OPM_FA_C_C2_D1L_RR			= OPM_BASE_ADDRESS + $FA;
=11530491				OPM_FB_D_C2_D1L_RR			= OPM_BASE_ADDRESS + $FB;
=11530492				OPM_FC_E_C2_D1L_RR			= OPM_BASE_ADDRESS + $FC;
=11530493				OPM_FD_F_C2_D1L_RR			= OPM_BASE_ADDRESS + $FD;
=11530494				OPM_FE_G_C2_D1L_RR			= OPM_BASE_ADDRESS + $FE;
=11530495				OPM_FF_H_C2_D1L_RR			= OPM_BASE_ADDRESS + $FF;

;******  Return to file: src\YM26XX.asm

.3990ef					YM2612_test_piano
.3990ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3990f1	a9 00		lda #$00				LDA #$0;
.3990f3	8f 22 f2 af	sta $aff222				STA OPN2_22_LFO ; LFO off
.3990f7	a9 00		lda #$00				LDA #$0;
.3990f9	8f 27 f2 af	sta $aff227				STA OPN2_27_CHANEL_3_MODE; chanel 3 in normal mode
.3990fd	a9 00		lda #$00				LDA #$0;
.3990ff	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399103	a9 01		lda #$01				LDA #$1;
.399105	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399109	a9 02		lda #$02				LDA #$2;
.39910b	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39910f	a9 04		lda #$04				LDA #$4;
.399111	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399115	a9 05		lda #$05				LDA #$5;
.399117	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39911b	a9 06		lda #$06				LDA #$6;
.39911d	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399121	a9 00		lda #$00				LDA #$0;
.399123	8f 2b f2 af	sta $aff22b				STA OPN2_2B_ADC_EN
.399127	a9 71		lda #$71				LDA #$71	;
.399129	8f 30 f2 af	sta $aff230				STA OPN2_30_ADSR__DT1_MUL__CH1_OP1
.39912d	8f 31 f2 af	sta $aff231				STA OPN2_31_ADSR__DT1_MUL__CH2_OP1
.399131	8f 32 f2 af	sta $aff232				STA OPN2_32_ADSR__DT1_MUL__CH3_OP1
.399135	8f 30 f3 af	sta $aff330				STA OPN2_30_ADSR__DT1_MUL__CH1_OP5
.399139	8f 31 f3 af	sta $aff331				STA OPN2_31_ADSR__DT1_MUL__CH2_OP5
.39913d	8f 32 f3 af	sta $aff332				STA OPN2_32_ADSR__DT1_MUL__CH3_OP5
.399141	a9 0d		lda #$0d				LDA #$0D	;
.399143	8f 34 f2 af	sta $aff234				STA OPN2_34_ADSR__DT1_MUL__CH1_OP2
.399147	8f 35 f2 af	sta $aff235				STA OPN2_35_ADSR__DT1_MUL__CH2_OP2
.39914b	8f 36 f2 af	sta $aff236				STA OPN2_36_ADSR__DT1_MUL__CH3_OP2
.39914f	8f 34 f3 af	sta $aff334				STA OPN2_34_ADSR__DT1_MUL__CH1_OP6
.399153	8f 35 f3 af	sta $aff335				STA OPN2_35_ADSR__DT1_MUL__CH2_OP6
.399157	8f 36 f3 af	sta $aff336				STA OPN2_36_ADSR__DT1_MUL__CH3_OP6
.39915b	a9 33		lda #$33				LDA #$33	;
.39915d	8f 38 f2 af	sta $aff238				STA OPN2_38_ADSR__DT1_MUL__CH1_OP3	;
.399161	8f 39 f2 af	sta $aff239				STA OPN2_39_ADSR__DT1_MUL__CH2_OP3
.399165	8f 3a f2 af	sta $aff23a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP3
.399169	8f 38 f3 af	sta $aff338				STA OPN2_38_ADSR__DT1_MUL__CH1_OP7	;
.39916d	8f 39 f3 af	sta $aff339				STA OPN2_39_ADSR__DT1_MUL__CH2_OP7
.399171	8f 3a f3 af	sta $aff33a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP7
.399175	a9 01		lda #$01				LDA #$01	;
.399177	8f 3c f2 af	sta $aff23c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP4	;
.39917b	8f 3d f2 af	sta $aff23d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP4
.39917f	8f 3e f2 af	sta $aff23e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP4
.399183	8f 3c f3 af	sta $aff33c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP8	;
.399187	8f 3d f3 af	sta $aff33d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP8
.39918b	8f 3e f3 af	sta $aff33e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP8
.39918f	a9 23		lda #$23				LDA #$23	;
.399191	8f 40 f2 af	sta $aff240				STA OPN2_40_ADSR__LT__CH1_OP1	;
.399195	8f 41 f2 af	sta $aff241				STA OPN2_41_ADSR__LT__CH2_OP1
.399199	8f 42 f2 af	sta $aff242				STA OPN2_42_ADSR__LT__CH3_OP1
.39919d	8f 40 f3 af	sta $aff340				STA OPN2_40_ADSR__LT__CH1_OP5	;
.3991a1	8f 41 f3 af	sta $aff341				STA OPN2_41_ADSR__LT__CH2_OP5
.3991a5	8f 42 f3 af	sta $aff342				STA OPN2_42_ADSR__LT__CH3_OP5
.3991a9	a9 2d		lda #$2d				LDA #$2D	;
.3991ab	8f 44 f2 af	sta $aff244				STA OPN2_44_ADSR__LT__CH1_OP2	;
.3991af	8f 45 f2 af	sta $aff245				STA OPN2_45_ADSR__LT__CH2_OP2
.3991b3	8f 46 f2 af	sta $aff246				STA OPN2_46_ADSR__LT__CH3_OP2
.3991b7	8f 44 f3 af	sta $aff344				STA OPN2_44_ADSR__LT__CH1_OP6	;
.3991bb	8f 45 f3 af	sta $aff345				STA OPN2_45_ADSR__LT__CH2_OP6
.3991bf	8f 46 f3 af	sta $aff346				STA OPN2_46_ADSR__LT__CH3_OP6
.3991c3	a9 26		lda #$26				LDA #$26	;
.3991c5	8f 48 f2 af	sta $aff248				STA OPN2_48_ADSR__LT__CH1_OP3	;
.3991c9	8f 49 f2 af	sta $aff249				STA OPN2_49_ADSR__LT__CH2_OP3
.3991cd	8f 4a f2 af	sta $aff24a				STA OPN2_4A_ADSR__LT__CH3_OP3
.3991d1	8f 48 f3 af	sta $aff348				STA OPN2_48_ADSR__LT__CH1_OP7	;
.3991d5	8f 49 f3 af	sta $aff349				STA OPN2_49_ADSR__LT__CH2_OP7
.3991d9	8f 4a f3 af	sta $aff34a				STA OPN2_4A_ADSR__LT__CH3_OP7
.3991dd	a9 00		lda #$00				LDA #$00	;
.3991df	8f 4c f2 af	sta $aff24c				STA OPN2_4C_ADSR__LT__CH1_OP4	;
.3991e3	8f 4d f2 af	sta $aff24d				STA OPN2_4D_ADSR__LT__CH2_OP4
.3991e7	8f 4e f2 af	sta $aff24e				STA OPN2_4E_ADSR__LT__CH3_OP4
.3991eb	8f 4c f3 af	sta $aff34c				STA OPN2_4C_ADSR__LT__CH1_OP8	;
.3991ef	8f 4d f3 af	sta $aff34d				STA OPN2_4D_ADSR__LT__CH2_OP8
.3991f3	8f 4e f3 af	sta $aff34e				STA OPN2_4E_ADSR__LT__CH3_OP8
.3991f7	a9 5f		lda #$5f				LDA #$5F	;
.3991f9	8f 50 f2 af	sta $aff250				STA OPN2_50_ADSR__SR_AR__CH1_OP1	;
.3991fd	8f 51 f2 af	sta $aff251				STA OPN2_51_ADSR__SR_AR__CH2_OP1	;
.399201	8f 52 f2 af	sta $aff252				STA OPN2_52_ADSR__SR_AR__CH3_OP1	;
.399205	8f 50 f3 af	sta $aff350				STA OPN2_50_ADSR__SR_AR__CH1_OP5	;
.399209	8f 51 f3 af	sta $aff351				STA OPN2_51_ADSR__SR_AR__CH2_OP5	;
.39920d	8f 52 f3 af	sta $aff352				STA OPN2_52_ADSR__SR_AR__CH3_OP5	;
.399211	a9 99		lda #$99				LDA #$99	;
.399213	8f 54 f2 af	sta $aff254				STA OPN2_54_ADSR__SR_AR__CH1_OP2	;
.399217	8f 55 f2 af	sta $aff255				STA OPN2_55_ADSR__SR_AR__CH2_OP2	;
.39921b	8f 56 f2 af	sta $aff256				STA OPN2_56_ADSR__SR_AR__CH3_OP2	;
.39921f	8f 54 f3 af	sta $aff354				STA OPN2_54_ADSR__SR_AR__CH1_OP6	;
.399223	8f 55 f3 af	sta $aff355				STA OPN2_55_ADSR__SR_AR__CH2_OP6	;
.399227	8f 56 f3 af	sta $aff356				STA OPN2_56_ADSR__SR_AR__CH3_OP6	;
.39922b	a9 5f		lda #$5f				LDA #$5F	;
.39922d	8f 58 f2 af	sta $aff258				STA OPN2_58_ADSR__SR_AR__CH1_OP3	;
.399231	8f 59 f2 af	sta $aff259				STA OPN2_59_ADSR__SR_AR__CH2_OP3	;
.399235	8f 5a f2 af	sta $aff25a				STA OPN2_5A_ADSR__SR_AR__CH3_OP3	;
.399239	8f 58 f3 af	sta $aff358				STA OPN2_58_ADSR__SR_AR__CH1_OP7	;
.39923d	8f 59 f3 af	sta $aff359				STA OPN2_59_ADSR__SR_AR__CH2_OP7	;
.399241	8f 5a f3 af	sta $aff35a				STA OPN2_5A_ADSR__SR_AR__CH3_OP7	;
.399245	a9 94		lda #$94				LDA #$94	;
.399247	8f 5c f2 af	sta $aff25c				STA OPN2_5C_ADSR__SR_AR__CH1_OP4	;
.39924b	8f 5d f2 af	sta $aff25d				STA OPN2_5D_ADSR__SR_AR__CH2_OP4	;
.39924f	8f 5e f2 af	sta $aff25e				STA OPN2_5E_ADSR__SR_AR__CH3_OP4	;
.399253	8f 5c f3 af	sta $aff35c				STA OPN2_5C_ADSR__SR_AR__CH1_OP8	;
.399257	8f 5d f3 af	sta $aff35d				STA OPN2_5D_ADSR__SR_AR__CH2_OP8	;
.39925b	8f 5e f3 af	sta $aff35e				STA OPN2_5E_ADSR__SR_AR__CH3_OP8	;
.39925f	a9 07		lda #$07				LDA #$7 	;
.399261	8f 60 f2 af	sta $aff260				STA OPN2_60_ADSR__AM_D1R__CH1_OP1	;
.399265	8f 61 f2 af	sta $aff261				STA OPN2_61_ADSR__AM_D1R__CH2_OP1	;
.399269	8f 62 f2 af	sta $aff262				STA OPN2_62_ADSR__AM_D1R__CH3_OP1	;
.39926d	8f 60 f3 af	sta $aff360				STA OPN2_60_ADSR__AM_D1R__CH1_OP5	;
.399271	8f 61 f3 af	sta $aff361				STA OPN2_61_ADSR__AM_D1R__CH2_OP5	;
.399275	8f 62 f3 af	sta $aff362				STA OPN2_62_ADSR__AM_D1R__CH3_OP5	;
.399279	a9 07		lda #$07				LDA #$7 	;
.39927b	8f 64 f2 af	sta $aff264				STA OPN2_64_ADSR__AM_D1R__CH1_OP2	;
.39927f	8f 65 f2 af	sta $aff265				STA OPN2_65_ADSR__AM_D1R__CH2_OP2	;
.399283	8f 66 f2 af	sta $aff266				STA OPN2_66_ADSR__AM_D1R__CH3_OP2	;
.399287	8f 64 f3 af	sta $aff364				STA OPN2_64_ADSR__AM_D1R__CH1_OP6	;
.39928b	8f 65 f3 af	sta $aff365				STA OPN2_65_ADSR__AM_D1R__CH2_OP6	;
.39928f	8f 66 f3 af	sta $aff366				STA OPN2_66_ADSR__AM_D1R__CH3_OP6	;
.399293	a9 05		lda #$05				LDA #$5 	;
.399295	8f 68 f2 af	sta $aff268				STA OPN2_68_ADSR__AM_D1R__CH1_OP3	;
.399299	8f 69 f2 af	sta $aff269				STA OPN2_69_ADSR__AM_D1R__CH2_OP3	;
.39929d	8f 6a f2 af	sta $aff26a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP3	;
.3992a1	8f 68 f3 af	sta $aff368				STA OPN2_68_ADSR__AM_D1R__CH1_OP7	;
.3992a5	8f 69 f3 af	sta $aff369				STA OPN2_69_ADSR__AM_D1R__CH2_OP7	;
.3992a9	8f 6a f3 af	sta $aff36a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP7	;
.3992ad	a9 07		lda #$07				LDA #$7 	;
.3992af	8f 6c f2 af	sta $aff26c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP4	;
.3992b3	8f 6d f2 af	sta $aff26d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP4	;
.3992b7	8f 6e f2 af	sta $aff26e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP4	;
.3992bb	8f 6c f3 af	sta $aff36c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP8	;
.3992bf	8f 6d f3 af	sta $aff36d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP8	;
.3992c3	8f 6e f3 af	sta $aff36e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP8	;
.3992c7	a9 02		lda #$02				LDA #$2 	;
.3992c9	8f 70 f2 af	sta $aff270				STA OPN2_70_ADSR__D2R__CH1_OP1	;
.3992cd	8f 71 f2 af	sta $aff271				STA OPN2_71_ADSR__D2R__CH2_OP1	;
.3992d1	8f 72 f2 af	sta $aff272				STA OPN2_72_ADSR__D2R__CH3_OP1	;
.3992d5	8f 70 f3 af	sta $aff370				STA OPN2_70_ADSR__D2R__CH1_OP5	;
.3992d9	8f 71 f3 af	sta $aff371				STA OPN2_71_ADSR__D2R__CH2_OP5	;
.3992dd	8f 72 f3 af	sta $aff372				STA OPN2_72_ADSR__D2R__CH3_OP5	;
.3992e1	a9 02		lda #$02				LDA #$2 	;
.3992e3	8f 74 f2 af	sta $aff274				STA OPN2_74_ADSR__D2R__CH1_OP2	;
.3992e7	8f 75 f2 af	sta $aff275				STA OPN2_75_ADSR__D2R__CH2_OP2	;
.3992eb	8f 76 f2 af	sta $aff276				STA OPN2_76_ADSR__D2R__CH3_OP2	;
.3992ef	8f 74 f3 af	sta $aff374				STA OPN2_74_ADSR__D2R__CH1_OP6	;
.3992f3	8f 75 f3 af	sta $aff375				STA OPN2_75_ADSR__D2R__CH2_OP6	;
.3992f7	8f 76 f3 af	sta $aff376				STA OPN2_76_ADSR__D2R__CH3_OP6	;
.3992fb	a9 02		lda #$02				LDA #$2 	;
.3992fd	8f 78 f2 af	sta $aff278				STA OPN2_78_ADSR__D2R__CH1_OP3	;
.399301	8f 79 f2 af	sta $aff279				STA OPN2_79_ADSR__D2R__CH2_OP3	;
.399305	8f 7a f2 af	sta $aff27a				STA OPN2_7A_ADSR__D2R__CH3_OP3	;
.399309	8f 78 f3 af	sta $aff378				STA OPN2_78_ADSR__D2R__CH1_OP7	;
.39930d	8f 79 f3 af	sta $aff379				STA OPN2_79_ADSR__D2R__CH2_OP7	;
.399311	8f 7a f3 af	sta $aff37a				STA OPN2_7A_ADSR__D2R__CH3_OP7	;
.399315	a9 02		lda #$02				LDA #$2 	;
.399317	8f 7c f2 af	sta $aff27c				STA OPN2_7C_ADSR__D2R__CH1_OP4	;
.39931b	8f 7d f2 af	sta $aff27d				STA OPN2_7D_ADSR__D2R__CH2_OP4	;
.39931f	8f 7e f2 af	sta $aff27e				STA OPN2_7E_ADSR__D2R__CH3_OP4	;
.399323	8f 7c f3 af	sta $aff37c				STA OPN2_7C_ADSR__D2R__CH1_OP8	;
.399327	8f 7d f3 af	sta $aff37d				STA OPN2_7D_ADSR__D2R__CH2_OP8	;
.39932b	8f 7e f3 af	sta $aff37e				STA OPN2_7E_ADSR__D2R__CH3_OP8	;
.39932f	a9 11		lda #$11				LDA #$11	;
.399331	8f 80 f2 af	sta $aff280				STA OPN2_80_ADSR__D1L_RR__CH1_OP1	;
.399335	8f 81 f2 af	sta $aff281				STA OPN2_81_ADSR__D1L_RR__CH2_OP1	;
.399339	8f 82 f2 af	sta $aff282				STA OPN2_82_ADSR__D1L_RR__CH3_OP1	;
.39933d	8f 80 f3 af	sta $aff380				STA OPN2_80_ADSR__D1L_RR__CH1_OP5	;
.399341	8f 81 f3 af	sta $aff381				STA OPN2_81_ADSR__D1L_RR__CH2_OP5	;
.399345	8f 82 f3 af	sta $aff382				STA OPN2_82_ADSR__D1L_RR__CH3_OP5	;
.399349	a9 11		lda #$11				LDA #$11	;
.39934b	8f 84 f2 af	sta $aff284				STA OPN2_84_ADSR__D1L_RR__CH1_OP2	;
.39934f	8f 85 f2 af	sta $aff285				STA OPN2_85_ADSR__D1L_RR__CH2_OP2	;
.399353	8f 86 f2 af	sta $aff286				STA OPN2_86_ADSR__D1L_RR__CH3_OP2	;
.399357	8f 84 f3 af	sta $aff384				STA OPN2_84_ADSR__D1L_RR__CH1_OP6	;
.39935b	8f 85 f3 af	sta $aff385				STA OPN2_85_ADSR__D1L_RR__CH2_OP6	;
.39935f	8f 86 f3 af	sta $aff386				STA OPN2_86_ADSR__D1L_RR__CH3_OP6	;
.399363	a9 11		lda #$11				LDA #$11	;
.399365	8f 88 f2 af	sta $aff288				STA OPN2_88_ADSR__D1L_RR__CH1_OP3	;
.399369	8f 89 f2 af	sta $aff289				STA OPN2_89_ADSR__D1L_RR__CH2_OP3	;
.39936d	8f 8a f2 af	sta $aff28a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP3	;
.399371	8f 88 f3 af	sta $aff388				STA OPN2_88_ADSR__D1L_RR__CH1_OP7	;
.399375	8f 89 f3 af	sta $aff389				STA OPN2_89_ADSR__D1L_RR__CH2_OP7	;
.399379	8f 8a f3 af	sta $aff38a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP7	;
.39937d	a9 a6		lda #$a6				LDA #$A6	;
.39937f	8f 8c f2 af	sta $aff28c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP4;
.399383	8f 8d f2 af	sta $aff28d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP4;
.399387	8f 8e f2 af	sta $aff28e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP4;
.39938b	8f 8c f3 af	sta $aff38c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP8;
.39938f	8f 8d f3 af	sta $aff38d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP8;
.399393	8f 8e f3 af	sta $aff38e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP8;
.399397	a9 00		lda #$00				LDA #$0 	;
.399399	8f 90 f2 af	sta $aff290				STA OPN2_90_ADSR__D1L_RR__CH1_OP1	;
.39939d	8f 91 f2 af	sta $aff291				STA OPN2_91_ADSR__D1L_RR__CH2_OP1	;
.3993a1	8f 92 f2 af	sta $aff292				STA OPN2_92_ADSR__D1L_RR__CH3_OP1	;
.3993a5	8f 90 f3 af	sta $aff390				STA OPN2_90_ADSR__D1L_RR__CH4_OP1	;
.3993a9	8f 91 f3 af	sta $aff391				STA OPN2_91_ADSR__D1L_RR__CH5_OP1	;
.3993ad	8f 92 f3 af	sta $aff392				STA OPN2_92_ADSR__D1L_RR__CH6_OP1	;
.3993b1	a9 00		lda #$00				LDA #$0 	;
.3993b3	8f 94 f2 af	sta $aff294				STA OPN2_94_ADSR__D1L_RR__CH1_OP2	;
.3993b7	8f 95 f2 af	sta $aff295				STA OPN2_95_ADSR__D1L_RR__CH2_OP2	;
.3993bb	8f 96 f2 af	sta $aff296				STA OPN2_96_ADSR__D1L_RR__CH3_OP2	;
.3993bf	8f 94 f3 af	sta $aff394				STA OPN2_94_ADSR__D1L_RR__CH4_OP2	;
.3993c3	8f 95 f3 af	sta $aff395				STA OPN2_95_ADSR__D1L_RR__CH5_OP2	;
.3993c7	8f 96 f3 af	sta $aff396				STA OPN2_96_ADSR__D1L_RR__CH6_OP2	;
.3993cb	a9 00		lda #$00				LDA #$0 	;
.3993cd	8f 98 f2 af	sta $aff298				STA OPN2_98_ADSR__D1L_RR__CH1_OP3	;
.3993d1	8f 99 f2 af	sta $aff299				STA OPN2_99_ADSR__D1L_RR__CH2_OP3	;
.3993d5	8f 9a f2 af	sta $aff29a				STA OPN2_9A_ADSR__D1L_RR__CH3_OP3	;
.3993d9	8f 98 f3 af	sta $aff398				STA OPN2_98_ADSR__D1L_RR__CH4_OP3	;
.3993dd	8f 99 f3 af	sta $aff399				STA OPN2_99_ADSR__D1L_RR__CH5_OP3	;
.3993e1	8f 9a f3 af	sta $aff39a				STA OPN2_9A_ADSR__D1L_RR__CH6_OP3	;
.3993e5	a9 00		lda #$00				LDA #$0 	;
.3993e7	8f 9c f2 af	sta $aff29c				STA OPN2_9C_ADSR__D1L_RR__CH1_OP4	;
.3993eb	8f 9d f2 af	sta $aff29d				STA OPN2_9D_ADSR__D1L_RR__CH2_OP4	;
.3993ef	8f 9e f2 af	sta $aff29e				STA OPN2_9E_ADSR__D1L_RR__CH3_OP4	;
.3993f3	8f 9c f3 af	sta $aff39c				STA OPN2_9C_ADSR__D1L_RR__CH4_OP4	;
.3993f7	8f 9d f3 af	sta $aff39d				STA OPN2_9D_ADSR__D1L_RR__CH5_OP4	;
.3993fb	8f 9e f3 af	sta $aff39e				STA OPN2_9E_ADSR__D1L_RR__CH6_OP4	;
.3993ff	a9 32		lda #$32				LDA #$32	;
.399401	8f b0 f2 af	sta $aff2b0				STA OPN2_B0_CH1_FEEDBACK_ALGO	;
.399405	8f b1 f2 af	sta $aff2b1				STA OPN2_B1_CH2_FEEDBACK_ALGO	;
.399409	8f b2 f2 af	sta $aff2b2				STA OPN2_B2_CH3_FEEDBACK_ALGO	;
.39940d	a9 c0		lda #$c0				LDA #$C0	;  	Both speakers on
.39940f	8f b4 f2 af	sta $aff2b4				STA OPN2_B4_CH1_L_R_AMS_FMS	;
.399413	8f b5 f2 af	sta $aff2b5				STA OPN2_B5_CH2_L_R_AMS_FMS	;
.399417	8f b6 f2 af	sta $aff2b6				STA OPN2_B6_CH3_L_R_AMS_FMS	;
.39941b	a9 23		lda #$23				LDA #$23	;  	Set frequency
.39941d	8f a4 f2 af	sta $aff2a4				STA OPN2_A4_CH1_OCTAVE_FRECANCY_H	;
.399421	a9 22		lda #$22				LDA #$22	;  	Set frequency
.399423	8f a5 f2 af	sta $aff2a5				STA OPN2_A5_CH2_OCTAVE_FRECANCY_H	;
.399427	a9 22		lda #$22				LDA #$22	;  	Set frequency
.399429	8f a6 f2 af	sta $aff2a6				STA OPN2_A6_CH3_OCTAVE_FRECANCY_H	;
.39942d	a9 9c		lda #$9c				LDA #$9C	;
.39942f	8f a0 f2 af	sta $aff2a0				STA OPN2_A0_CH1_FRECANCY_L	;
.399433	8f a1 f2 af	sta $aff2a1				STA OPN2_A1_CH2_FRECANCY_L	;
.399437	a9 24		lda #$24				LDA #$24	;
.399439	8f a2 f2 af	sta $aff2a2				STA OPN2_A2_CH3_FRECANCY_L	;
.39943d	a9 00		lda #$00				LDA #$00	;  	Key off
.39943f	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF	;
.399443	c2 10		rep #$10	                REP #$10        ; set X long
.399445					YM2612_test_piano__LOOP_FOR_EVER
.399445	a9 f0		lda #$f0				LDA #$F0;
.399447	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39944b	a9 f1		lda #$f1				LDA #$F1;
.39944d	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399451	a9 f2		lda #$f2				LDA #$F2;
.399453	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399457	a9 f4		lda #$f4				LDA #$F4;
.399459	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39945d	a9 f5		lda #$f5				LDA #$F5;
.39945f	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399463	a9 f6		lda #$f6				LDA #$F6;
.399465	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399469	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.39946c	22 1a 97 39	jsl $39971a			 	JSL ILOOP_MS
.399470	a9 00		lda #$00				LDA #$0;
.399472	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399476	a9 01		lda #$01				LDA #$1;
.399478	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39947c	a9 02		lda #$02				LDA #$2;
.39947e	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399482	a9 04		lda #$04				LDA #$4;
.399484	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399488	a9 05		lda #$05				LDA #$5;
.39948a	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39948e	a9 06		lda #$06				LDA #$6;
.399490	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399494	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.399497	22 1a 97 39	jsl $39971a			 	JSL ILOOP_MS
.39949b	6b		rtl					RTL
.39949c								YM2151_test
.39949c	e2 20		sep #$20	                SEP #$20        ; set A short
.39949e	a9 90		lda #$90							LDA #$90
.3994a0	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.3994a4	a9 55		lda #$55							LDA #$55
.3994a6	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.3994aa	a9 d7		lda #$d7							LDA #$D7
.3994ac	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT
.3994b0	8f 21 f0 af	sta $aff021							STA OPM_21_B_RL_FR_CONNECT
.3994b4	8f 22 f0 af	sta $aff022							STA OPM_22_C_RL_FR_CONNECT
.3994b8	8f 23 f0 af	sta $aff023							STA OPM_23_D_RL_FR_CONNECT
.3994bc	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.3994c0	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.3994c4	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.3994c8	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.3994cc	a9 d7		lda #$d7							LDA #$D7	; add some feedback for the next 4 chanel
.3994ce	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.3994d2	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.3994d6	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.3994da	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.3994de	a9 00		lda #$00							LDA #$00
.3994e0	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.3994e4	8f 61 f0 af	sta $aff061							STA OPM_61_B_M1_TL
.3994e8	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.3994ec	8f 69 f0 af	sta $aff069							STA OPM_69_B_M2_TL
.3994f0	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.3994f4	8f 71 f0 af	sta $aff071							STA OPM_71_B_C1_TL
.3994f8	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.3994fc	8f 79 f0 af	sta $aff079							STA OPM_79_B_C2_TL
.399500	a9 55		lda #$55							LDA #$55
.399502	8f 40 f0 af	sta $aff040							STA OPM_40_A_M1_DT1_MUL
.399506	a9 18		lda #$18							LDA #$18
.399508	8f 41 f0 af	sta $aff041							STA OPM_41_B_M1_DT1_MUL
.39950c	a9 c4		lda #$c4							LDA #$C4
.39950e	8f 80 f0 af	sta $aff080							STA OPM_80_A_M1_KS_AR
.399512	a9 c4		lda #$c4							LDA #$C4
.399514	8f 81 f0 af	sta $aff081							STA OPM_81_B_M1_KS_AR
.399518	a9 84		lda #$84							LDA #$84
.39951a	8f a0 f0 af	sta $aff0a0							STA OPM_A0_A_M1_AMS_EN_D1R
.39951e	a9 85		lda #$85							LDA #$85
.399520	8f a1 f0 af	sta $aff0a1							STA OPM_A1_B_M1_AMS_EN_D1R
.399524	a9 42		lda #$42							LDA #$42
.399526	8f c0 f0 af	sta $aff0c0							STA OPM_C0_A_M1_DT2_D2R
.39952a	8f c8 f0 af	sta $aff0c8							STA OPM_C8_A_M2_DT2_D2R
.39952e	8f d0 f0 af	sta $aff0d0							STA OPM_D0_A_C1_DT2_D2R
.399532	8f d8 f0 af	sta $aff0d8							STA OPM_D8_A_C2_DT2_D2R
.399536	a9 43		lda #$43							LDA #$43
.399538	8f c1 f0 af	sta $aff0c1							STA OPM_C1_B_M1_DT2_D2R
.39953c	8f c9 f0 af	sta $aff0c9							STA OPM_C9_B_M2_DT2_D2R
.399540	8f d1 f0 af	sta $aff0d1							STA OPM_D1_B_C1_DT2_D2R
.399544	8f d9 f0 af	sta $aff0d9							STA OPM_D9_B_C2_DT2_D2R
.399548	a9 24		lda #$24							LDA #$24
.39954a	8f e0 f0 af	sta $aff0e0							STA OPM_E0_A_M1_D1L_RR
.39954e	8f e1 f0 af	sta $aff0e1							STA OPM_E1_B_M1_D1L_RR
.399552	a9 14		lda #$14							LDA #$14
.399554	8f e8 f0 af	sta $aff0e8							STA OPM_E8_A_M2_D1L_RR
.399558	8f e9 f0 af	sta $aff0e9							STA OPM_E9_B_M2_D1L_RR
.39955c	a9 24		lda #$24							LDA #$24
.39955e	8f f0 f0 af	sta $aff0f0							STA OPM_F0_A_C1_D1L_RR
.399562	8f f1 f0 af	sta $aff0f1							STA OPM_F1_B_C1_D1L_RR
.399566	a9 44		lda #$44							LDA #$44
.399568	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.39956c	8f f9 f0 af	sta $aff0f9							STA OPM_F9_B_C2_D1L_RR
.399570	a9 96		lda #$96							LDA #$96 	;	0x20 sellect the octave (0-7), 0x06 sellect the note (0-F)
.399572	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC	;
.399576	a9 1a		lda #$1a							LDA #$1A
.399578	8f 29 f0 af	sta $aff029							STA OPM_29_B_KC	;
.39957c	a9 26		lda #$26							LDA #$26
.39957e	8f 2a f0 af	sta $aff02a							STA OPM_2A_C_KC	;
.399582	a9 2a		lda #$2a							LDA #$2A
.399584	8f 2b f0 af	sta $aff02b							STA OPM_2B_D_KC	;
.399588	a9 36		lda #$36							LDA #$36
.39958a	8f 2c f0 af	sta $aff02c							STA OPM_2C_E_KC	;
.39958e	a9 2a		lda #$2a							LDA #$2A
.399590	8f 2d f0 af	sta $aff02d							STA OPM_2D_F_KC	;
.399594	a9 46		lda #$46							LDA #$46
.399596	8f 2e f0 af	sta $aff02e							STA OPM_2E_G_KC	;
.39959a	a9 4a		lda #$4a							LDA #$4A
.39959c	8f 2f f0 af	sta $aff02f							STA OPM_2F_H_KC	;
.3995a0	a9 45		lda #$45							LDA #$45
.3995a2	8f 30 f0 af	sta $aff030							STA OPM_30_A_KF	;
.3995a6	a9 80		lda #$80							LDA #$80
.3995a8	8f 31 f0 af	sta $aff031							STA OPM_31_B_KF	;
.3995ac	a9 45		lda #$45							LDA #$45
.3995ae	8f 32 f0 af	sta $aff032							STA OPM_32_C_KF	;
.3995b2	a9 80		lda #$80							LDA #$80
.3995b4	8f 33 f0 af	sta $aff033							STA OPM_33_D_KF	;
.3995b8								YM2151_test__LOOP_FOR_EVER
.3995b8	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.3995ba	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995be	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.3995c0	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995c4	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.3995c6	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995ca	a9 7c		lda #$7c							LDA #$7C	;  	Key on chanel C all OPP
.3995cc	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995d0	a9 7d		lda #$7d							LDA #$7D	;  	Key on chanel C all OPP
.3995d2	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995d6	a9 7e		lda #$7e							LDA #$7E	;  	Key on chanel C all OPP
.3995d8	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995dc	a9 7f		lda #$7f							LDA #$7F	;  	Key on chanel C all OPP
.3995de	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995e2	a2 00 80	ldx #$8000							LDX #32768      ; 400ms
.3995e5	22 1a 97 39	jsl $39971a						 	JSL ILOOP_MS
.3995e9	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.3995eb	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995ef	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.3995f1	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995f5	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.3995f7	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995fb	a9 03		lda #$03							LDA #$03	;  	Key off chanel C all OPP
.3995fd	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399601	a9 04		lda #$04							LDA #$04	;  	Key off chanel C all OPP
.399603	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399607	a9 05		lda #$05							LDA #$05	;  	Key off chanel C all OPP
.399609	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39960d	a9 06		lda #$06							LDA #$06	;  	Key off chanel C all OPP
.39960f	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399613	a9 07		lda #$07							LDA #$07	;  	Key off chanel C all OPP
.399615	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399619	a2 00 80	ldx #$8000							LDX #32768      ; 100ms
.39961c	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.399620	6b		rtl								RTL
.399621								YM2151_test_2_from_Chibisound
.399621	08		php								PHP
.399622	0b		phd								PHD
.399623	c2 30		rep #$30	                REP #$30        ; set A&X long
.399625	da		phx								PHX
.399626	48		pha								PHA
.399627	e2 20		sep #$20	                SEP #$20        ; set A short
.399629	a9 90		lda #$90							LDA #$90
.39962b	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.39962f	a9 55		lda #$55							LDA #$55
.399631	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.399635	af 1b f0 af	lda $aff01b							LDA OPM_1B_CT_W
.399639	09 02		ora #$02							ORA #$02
.39963b	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W
.39963f	a9 c0		lda #$c0							LDA #$C0;
.399641	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT; sellect the mode and active left and  right chanel
.399645	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399648	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.39964c	a9 43		lda #$43							LDA #$43
.39964e	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC;	sellect a note
.399652	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399655	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.399659	a9 40		lda #$40							LDA #$40
.39965b	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.39965f	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.399663	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.399667	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.39966b	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39966e	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.399672	a9 0f		lda #$0f							LDA #$0F
.399674	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.399678	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39967b	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.39967f	a9 0f		lda #$0f							LDA #$0F
.399681	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W; 4Mhz(?) and square
.399685	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399688	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.39968c								YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.39968c	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.39968e	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399692	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399695	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.399699	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.39969b	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39969f	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3996a2	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.3996a6	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.3996a8	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3996ac	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3996af	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.3996b3	a2 00 20	ldx #$2000							LDX #8192      ; 400ms
.3996b6	22 1a 97 39	jsl $39971a						 	JSL ILOOP_MS
.3996ba	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.3996bc	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3996c0	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3996c3	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.3996c7	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.3996c9	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3996cd	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.3996cf	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3996d3	a2 00 20	ldx #$2000							LDX #8192     ; 100ms
.3996d6	22 1a 97 39	jsl $39971a							JSL ILOOP_MS
.3996da	80 b0		bra $39968c							BRA YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.3996dc	68		pla								PLA
.3996dd	fa		plx								PLX
.3996de	2b		pld								PLD
.3996df	28		plp								PLP
.3996e0	6b		rtl								RTL
.3996e1	ea		nop		ILOOP           NOP
.3996e2	ea		nop		                NOP
.3996e3	ea		nop		                NOP
.3996e4	ea		nop		                NOP
.3996e5	ea		nop		                NOP
.3996e6	ea		nop		                NOP
.3996e7	ea		nop		                NOP
.3996e8	ea		nop		                NOP
.3996e9	ea		nop		                NOP
.3996ea	ea		nop		                NOP
.3996eb	6b		rtl		                RTL
.3996ec	22 e1 96 39	jsl $3996e1	ILOOP_1         JSL ILOOP
.3996f0	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.3996f4	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.3996f8	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.3996fc	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.399700	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.399704	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.399708	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.39970c	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.399710	22 e1 96 39	jsl $3996e1	                JSL ILOOP
.399714	6b		rtl		                RTL
.399715	22 ec 96 39	jsl $3996ec	ILOOP_1MS       JSL ILOOP_1
.399719	6b		rtl		                RTL
.39971a	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39971d	f0 07		beq $399726	                BEQ LOOP_MS_END
.39971f	22 15 97 39	jsl $399715	                JSL ILOOP_1MS
.399723	ca		dex		                DEX
.399724	80 f4		bra $39971a	                BRA ILOOP_MS
.399726	6b		rtl		LOOP_MS_END     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.390000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.390004	5c fb 10 39	jmp $3910fb	RESTORE         JML IRESTORE
.390008	5c a0 05 39	jmp $3905a0	BREAK           JML IBREAK
.39000c	5c e7 05 39	jmp $3905e7	READY           JML IREADY
.390010	5c fc 10 39	jmp $3910fc	SCINIT          JML ISCINIT
.390014	5c fd 10 39	jmp $3910fd	IOINIT          JML IIOINIT
.390018	5c 2c 06 39	jmp $39062c	PUTC            JML IPUTC
.39001c	5c 15 06 39	jmp $390615	PUTS            JML IPUTS
.390020	5c 59 06 39	jmp $390659	PUTB            JML IPUTB
.390024	5c fe 10 39	jmp $3910fe	PUTBLOCK        JML IPUTBLOCK
.390028	5c ff 10 39	jmp $3910ff	SETLFS          JML ISETLFS
.39002c	5c 00 11 39	jmp $391100	SETNAM          JML ISETNAM
.390030	5c 01 11 39	jmp $391101	OPEN            JML IOPEN
.390034	5c 02 11 39	jmp $391102	CLOSE           JML ICLOSE
.390038	5c 03 11 39	jmp $391103	SETIN           JML ISETIN
.39003c	5c 04 11 39	jmp $391104	SETOUT          JML ISETOUT
.390040	5c 05 11 39	jmp $391105	GETB            JML IGETB
.390044	5c 06 11 39	jmp $391106	GETBLOCK        JML IGETBLOCK
.390048	5c 07 11 39	jmp $391107	GETCH           JML IGETCH
.39004c	5c 0b 06 39	jmp $39060b	GETCHW          JML IGETCHW
.390050	5c 02 06 39	jmp $390602	GETCHE          JML IGETCHE
.390054	5c 08 11 39	jmp $391108	GETS            JML IGETS
.390058	5c 09 11 39	jmp $391109	GETLINE         JML IGETLINE
.39005c	5c 0a 11 39	jmp $39110a	GETFIELD        JML IGETFIELD
.390060	5c 0b 11 39	jmp $39110b	TRIM            JML ITRIM
.390064	5c 0c 11 39	jmp $39110c	PRINTC          JML IPRINTC
.390068	5c 0d 11 39	jmp $39110d	PRINTS          JML IPRINTS
.39006c	5c 5a 06 39	jmp $39065a	PRINTCR         JML IPRINTCR
.390070	5c 0e 11 39	jmp $39110e	PRINTF          JML IPRINTF
.390074	5c 0f 11 39	jmp $39110f	PRINTI          JML IPRINTI
.390078	5c 53 07 39	jmp $390753	PRINTH          JML IPRINTH
.39007c	5c 10 11 39	jmp $391110	PRINTAI         JML IPRINTAI
.390080	5c 11 11 39	jmp $391111	PRINTAH         JML IPRINTAH
.390084	5c f5 06 39	jmp $3906f5	LOCATE          JML ILOCATE
.390088	5c 12 11 39	jmp $391112	PUSHKEY         JML IPUSHKEY
.39008c	5c 13 11 39	jmp $391113	PUSHKEYS        JML IPUSHKEYS
.390090	5c 7b 06 39	jmp $39067b	CSRRIGHT        JML ICSRRIGHT
.390094	5c 14 11 39	jmp $391114	CSRLEFT         JML ICSRLEFT
.390098	5c d0 06 39	jmp $3906d0	CSRUP           JML ICSRUP
.39009c	5c f4 06 39	jmp $3906f4	CSRDOWN         JML ICSRDOWN
.3900a0	5c 15 11 39	jmp $391115	CSRHOME         JML ICSRHOME
.3900a4	5c 2b 07 39	jmp $39072b	SCROLLUP        JML ISCROLLUP
.3900a8	5c 81 07 39	jmp $390781	CLRSCREEN       JML ICLRSCREEN
.3900ac	5c e8 07 39	jmp $3907e8	INITCHLUT	    JML IINITCHLUT
.3900b0	5c 02 0b 39	jmp $390b02	INITSUPERIO	    JML IINITSUPERIO
.3900b4	5c 01 0c 39	jmp $390c01	INITKEYBOARD    JML IINITKEYBOARD
.3900b8	5c 5d 0d 39	jmp $390d5d	TESTSID         JML ITESTSID
.3900bc	5c e1 0a 39	jmp $390ae1	INITCURSOR      JML IINITCURSOR
.3900c0	5c 97 0a 39	jmp $390a97	INITFONTSET     JML IINITFONTSET
.3900c4	5c 17 08 39	jmp $390817	INITGAMMATABLE  JML IINITGAMMATABLE
.3900c8	5c 37 08 39	jmp $390837	INITALLLUT      JML IINITALLLUT
.3900cc	5c f9 08 39	jmp $3908f9	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3900d0	5c 22 09 39	jmp $390922	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3900d4	5c 59 09 39	jmp $390959	INITTILEMODE    JML IINITTILEMODE
.3900d8	5c 5a 09 39	jmp $39095a	INITSPRITE      JML IINITSPRITE
.3900dc	5c 4d 0e 39	jmp $390e4d	INITCODEC       JML IINITCODEC
.3900e0	5c c9 0e 39	jmp $390ec9	RESETCODEC      JML IRESETCODEC
.3900e4	5c 37 0f 39	jmp $390f37	BMP_PARSER      JML IBMP_PARSER
.3900e8	5c ec 0e 39	jmp $390eec	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3900ec	5c 4d 88 39	jmp $39884d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php			            PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp			            PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390442	85 0c		sta $0c		                STA SCREENBEGIN
.390444	e2 20		sep #$20	                SEP #$20        ; set A short
.390446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390448	85 0e		sta $0e		                STA SCREENBEGIN+2
.39044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044f	85 17		sta $17		                STA CURSORPOS
.390451	e2 20		sep #$20	                SEP #$20        ; set A short
.390453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390455	85 19		sta $19		                STA CURSORPOS+2
.390457	a9 00		lda #$00	                LDA #$00
.390459	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39045c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39045e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390462	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390464	8f 00 f1 af	sta $aff100	                STA $AFF100
.390468	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39046a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046e	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390470	8f 00 f1 af	sta $aff100	                STA $AFF100
.390474	c2 30		rep #$30	                REP #$30        ; set A&X long
.390476	a2 48 00	ldx #$0048	                LDX #72
.390479	86 0f		stx $0f		                STX COLS_VISIBLE
.39047b	a0 34 00	ldy #$0034	                LDY #52
.39047e	84 13		sty $13		                STY LINES_VISIBLE
.390480	a2 80 00	ldx #$0080	                LDX #128
.390483	86 11		stx $11		                STX COLS_PER_LINE
.390485	a0 40 00	ldy #$0040	                LDY #64
.390488	84 15		sty $15		                STY LINES_MAX
.39048a	22 dc 00 39	jsl $3900dc	                JSL INITCODEC
.39048e	22 b0 00 39	jsl $3900b0	                JSL INITSUPERIO
.390492	22 c4 00 39	jsl $3900c4	                JSL INITGAMMATABLE
.390496	22 c8 00 39	jsl $3900c8	                JSL INITALLLUT
.39049a	22 ac 00 39	jsl $3900ac	                JSL INITCHLUT
.39049e	22 c2 0a 39	jsl $390ac2	                JSL INITMOUSEPOINTER
.3904a2	22 bc 00 39	jsl $3900bc	                JSL INITCURSOR
.3904a6	22 cc 00 39	jsl $3900cc	                JSL INITVKYTXTMODE
.3904aa	22 97 0a 39	jsl $390a97	                JSL IINITFONTSET
.3904ae	22 81 07 39	jsl $390781	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904b2	22 b0 07 39	jsl $3907b0	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3904b8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904ba					greet
.3904ba	48		pha		                PHA             ; begin setdbr macro
.3904bb	08		php		                PHP
.3904bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3904be	a9 39		lda #$39		            LDA #`greet_msg
.3904c0	48		pha		                PHA
.3904c1	ab		plb		                PLB
.3904c2	28		plp		                PLP
.3904c3	68		pla		                PLA             ; end setdbr macro
.3904c4	a2 18 11	ldx #$1118	                LDX #<>greet_msg
.3904c7	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.3904cb	48		pha		                PHA             ; begin setdp macro
.3904cc	08		php			            PHP
.3904cd	c2 20		rep #$20	                REP #$20        ; set A long
.3904cf	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3904d2	5b		tcd		                TCD
.3904d3	28		plp			            PLP
.3904d4	68		pla		                PLA             ; end setdp macro
.3904d5	22 b4 00 39	jsl $3900b4	                JSL INITKEYBOARD ;
.3904d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3904db	c2 10		rep #$10	                REP #$10        ; set X long
.3904dd	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.3904df	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904e3	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.3904e5	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904e9	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.3904eb	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904ef	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.3904f1	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904f5	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.3904f7	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904fb	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.3904fd	8f 00 f1 af	sta $aff100	                STA $AFF100
.390501	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390503	8f 00 f1 af	sta $aff100	                STA $AFF100
.390507	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.39050a	22 1a 97 39	jsl $39971a	          		 	JSL ILOOP_MS
.39050e	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390510	8f 00 f1 af	sta $aff100	                STA $AFF100
.390514	a9 0f		lda #$0f	                LDA #$0F
.390516	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.39051a	a9 62		lda #$62	                LDA #$62
.39051c	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390520	a9 08		lda #$08	                LDA #$08
.390522	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390526	a9 00		lda #$00	                LDA #$00
.390528	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.39052c	a9 08		lda #$08	                LDA #$08
.39052e	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI
.390532	a9 08		lda #$08	                LDA #$08
.390534	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390538	a9 c6		lda #$c6	                LDA #198
.39053a	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39053e	a9 11		lda #$11	                LDA #$11
.390540	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390544	a2 00 80	ldx #$8000	                LDX #32768      ; 100ms
.390547	22 1a 97 39	jsl $39971a	    						JSL ILOOP_MS
.39054b	a9 10		lda #$10	                LDA #$10
.39054d	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390551	a9 00		lda #$00	                LDA #$00
.390553	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.390557	a9 00		lda #$00	                LDA #$00
.390559	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.39055d	22 9c 94 39	jsl $39949c	                JSL YM2151_test
.390561	22 ef 90 39	jsl $3990ef	                JSL YM2612_test_piano
.390565	22 ef 90 39	jsl $3990ef	                JSL YM2612_test_piano
.390569	c2 30		rep #$30	                REP #$30        ; set A&X long
.39056b	a2 9d 14	ldx #$149d	                LDX #<>ready_msg
.39056e	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.390572	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.390573	e2 20		sep #$20	                SEP #$20        ; set A short
.390575	48		pha		                PHA             ; begin setdbr macro
.390576	08		php		                PHP
.390577	e2 20		sep #$20	                SEP #$20        ; set A short
.390579	a9 39		lda #$39		            LDA #`greet_msg
.39057b	48		pha		                PHA
.39057c	ab		plb		                PLB
.39057d	28		plp		                PLP
.39057e	68		pla		                PLA             ; end setdbr macro
.39057f	ea		nop		endlessloop     NOP
.390580	af 83 0f 00	lda $000f83	                LDA KEY_BUFFER_CMD
.390584	c9 01		cmp #$01	                CMP #$01
.390586	f0 04		beq $39058c	                BEQ GoProcessCommandLine
.390588	5c 7f 05 39	jmp $39057f	                JML endlessloop
.39058c					GoProcessCommandLine
.39058c	a9 00		lda #$00	                LDA #$00  ; Clear the Flag
.39058e	8f 83 0f 00	sta $000f83	                STA KEY_BUFFER_CMD
.390592	22 56 30 39	jsl $393056	                JSL PROCESS_COMMAND_LINE
.390596	a2 9d 14	ldx #$149d	                LDX #<>ready_msg
.390599	22 0c 06 39	jsl $39060c	                JSL IPRINT
.39059d	80 e0		bra $39057f	                BRA  endlessloop
.39059f	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.3905a0					IBREAK
.3905a0	48		pha		                PHA             ; begin setdp macro
.3905a1	08		php			            PHP
.3905a2	c2 20		rep #$20	                REP #$20        ; set A long
.3905a4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905a7	5b		tcd		                TCD
.3905a8	28		plp			            PLP
.3905a9	68		pla		                PLA             ; end setdp macro
.3905aa	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905ab	8f 48 02 00	sta $000248	                STA CPUY
.3905af	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905b0	8f 46 02 00	sta $000246	                STA CPUX
.3905b4	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905b5	8f 44 02 00	sta $000244	                STA CPUA
.3905b9	68		pla		                PLA
.3905ba	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905be	e2 20		sep #$20	                SEP #$20        ; set A short
.3905c0	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905c1	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905c5	68		pla		                PLA             ; Pull Flags (8 bits)
.3905c6	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905ca	c2 20		rep #$20	                REP #$20        ; set A long
.3905cc	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905cd	8f 40 02 00	sta $000240	                STA CPUPC
.3905d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d3	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905d4	8f 42 02 00	sta $000242	                STA CPUPBR
.3905d8	c2 20		rep #$20	                REP #$20        ; set A long
.3905da	3b		tsc		                TSA             ; Get the stack
.3905db	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905df	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905e2	1b		tcs		                TAS
.3905e3	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.3905e7					IREADY
.3905e7	48		pha		                PHA             ; begin setdbr macro
.3905e8	08		php		                PHP
.3905e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905eb	a9 39		lda #$39		            LDA #`ready_msg
.3905ed	48		pha		                PHA
.3905ee	ab		plb		                PLB
.3905ef	28		plp		                PLP
.3905f0	68		pla		                PLA             ; end setdbr macro
.3905f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f3	a2 9d 14	ldx #$149d	                LDX #<>ready_msg
.3905f6	22 0c 06 39	jsl $39060c	                JSL IPRINT
.3905fa					IREADYWAIT
.3905fa	22 02 06 39	jsl $390602	                JSL IGETCHE
.3905fe	80 fa		bra $3905fa	                BRA IREADYWAIT
.390600	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390601	db		stp		IRETURN         STP
.390602	22 0b 06 39	jsl $39060b	IGETCHE         JSL IGETCHW
.390606	22 2c 06 39	jsl $39062c	                JSL IPUTC
.39060a	6b		rtl		                RTL
.39060b					IGETCHW
.39060b	6b		rtl		                RTL
.39060c	22 15 06 39	jsl $390615	IPRINT          JSL IPUTS
.390610	22 5a 06 39	jsl $39065a	                JSL IPRINTCR
.390614	6b		rtl		                RTL
.390615	48		pha		IPUTS           PHA
.390616	08		php		                PHP
.390617	e2 20		sep #$20	                SEP #$20        ; set A short
.390619	c2 10		rep #$10	                REP #$10        ; set X long
.39061b	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.39061e	f0 08		beq $390628	                BEQ iputs_done
.390620	22 2c 06 39	jsl $39062c	iputs2          JSL IPUTC
.390624	e8		inx		iputs3          INX
.390625	4c 1b 06	jmp $39061b	                JMP iputs1
.390628	e8		inx		iputs_done      INX
.390629	28		plp		                PLP
.39062a	68		pla		                PLA
.39062b	6b		rtl		                RTL
.39062c	0b		phd		IPUTC           PHD
.39062d	08		php		                PHP             ; stash the flags (we'll be changing M)
.39062e	48		pha		                PHA             ; begin setdp macro
.39062f	08		php			            PHP
.390630	c2 20		rep #$20	                REP #$20        ; set A long
.390632	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390635	5b		tcd		                TCD
.390636	28		plp			            PLP
.390637	68		pla		                PLA             ; end setdp macro
.390638	e2 20		sep #$20	                SEP #$20        ; set A short
.39063a	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.39063c	d0 06		bne $390644	                BNE iputc_bs
.39063e	22 5a 06 39	jsl $39065a	                JSL IPRINTCR
.390642	80 10		bra $390654	                bra iputc_done
.390644	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.390646	d0 06		bne $39064e	                BNE iputc_print
.390648	22 6b 06 39	jsl $39066b	                JSL IPRINTBS
.39064c	80 06		bra $390654	                BRA iputc_done
.39064e	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.390650	22 7b 06 39	jsl $39067b	                JSL ICSRRIGHT
.390654					iputc_done
>390654	42 01				                .byte $42, $01
.390656	28		plp		                PLP
.390657	2b		pld		                PLD
.390658	6b		rtl		                RTL
.390659					IPUTB
.390659	6b		rtl		                RTL
.39065a	da		phx		IPRINTCR	      PHX
.39065b	5a		phy		                PHY
.39065c	08		php		                PHP
.39065d	a2 00 00	ldx #$0000	                LDX #0
.390660	a4 1c		ldy $1c		                LDY CURSORY
.390662	c8		iny		                INY
.390663	22 f5 06 39	jsl $3906f5	                JSL ILOCATE
.390667	28		plp		                PLP
.390668	7a		ply		                PLY
.390669	fa		plx		                PLX
.39066a	6b		rtl		                RTL
.39066b	da		phx		IPRINTBS	PHX
.39066c	5a		phy		                PHY
.39066d	08		php		                PHP
.39066e	a6 1a		ldx $1a		                LDX CURSORX
.390670	a4 1c		ldy $1c		                LDY CURSORY
.390672	ca		dex		                DEX
.390673	22 f5 06 39	jsl $3906f5	                JSL ILOCATE
.390677	28		plp		                PLP
.390678	7a		ply		                PLY
.390679	fa		plx		                PLX
.39067a	6b		rtl		                RTL
.39067b					ICSRRIGHT
.39067b	da		phx		                PHX
.39067c	8b		phb		                PHB
.39067d	c2 20		rep #$20	                REP #$20        ; set A long
.39067f	c2 10		rep #$10	                REP #$10        ; set X long
.390681	48		pha		                PHA             ; begin setdp macro
.390682	08		php			            PHP
.390683	c2 20		rep #$20	                REP #$20        ; set A long
.390685	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390688	5b		tcd		                TCD
.390689	28		plp			            PLP
.39068a	68		pla		                PLA             ; end setdp macro
.39068b	e6 17		inc $17		                INC CURSORPOS
.39068d	a6 1a		ldx $1a		                LDX CURSORX
.39068f	e8		inx		                INX
.390690	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.390692	90 0c		bcc $3906a0	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.390694	a2 00 00	ldx #$0000	                LDX #0
.390697	5a		phy		                PHY
.390698	a4 1c		ldy $1c		                LDY CURSORY
.39069a	c8		iny		                INY
.39069b	22 f5 06 39	jsl $3906f5	                JSL ILOCATE
.39069f	7a		ply		                PLY
.3906a0	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.3906a2	48		pha		                PHA
.3906a3	8a		txa		                TXA
.3906a4	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3906a8	68		pla		                PLA
.3906a9	ab		plb		                PLB
.3906aa	fa		plx		                PLX
.3906ab	6b		rtl		                RTL
.3906ac					ISRLEFT
.3906ac	da		phx		                PHX
.3906ad	5a		phy		                PHY
.3906ae	8b		phb		                PHB
.3906af	48		pha		                PHA
.3906b0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3906b2	48		pha		                PHA             ; begin setdp macro
.3906b3	08		php			            PHP
.3906b4	c2 20		rep #$20	                REP #$20        ; set A long
.3906b6	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3906b9	5b		tcd		                TCD
.3906ba	28		plp			            PLP
.3906bb	68		pla		                PLA             ; end setdp macro
.3906bc	a5 1a		lda $1a		                LDA CURSORX
.3906be	f0 0b		beq $3906cb	                BEQ isrleft_done_already_zero ; Check that we are not already @ Zero
.3906c0	a6 1a		ldx $1a		                LDX CURSORX
.3906c2	ca		dex		                DEX
.3906c3	86 1a		stx $1a		                STX CURSORX
.3906c5	a4 1c		ldy $1c		                LDY CURSORY
.3906c7	22 f5 06 39	jsl $3906f5	                JSL ILOCATE
.3906cb					isrleft_done_already_zero
.3906cb	68		pla		                PLA
.3906cc	ab		plb		                PLB
.3906cd	7a		ply		                PLY
.3906ce	fa		plx		                PLX
.3906cf	6b		rtl		                RTL
.3906d0					ICSRUP
.3906d0	da		phx		                PHX
.3906d1	5a		phy		                PHY
.3906d2	8b		phb		                PHB
.3906d3	48		pha		                PHA
.3906d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3906d6	48		pha		                PHA             ; begin setdp macro
.3906d7	08		php			            PHP
.3906d8	c2 20		rep #$20	                REP #$20        ; set A long
.3906da	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3906dd	5b		tcd		                TCD
.3906de	28		plp			            PLP
.3906df	68		pla		                PLA             ; end setdp macro
.3906e0	a5 1c		lda $1c		                LDA CURSORY
.3906e2	f0 0b		beq $3906ef	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3906e4	a4 1c		ldy $1c		                LDY CURSORY
.3906e6	88		dey		                DEY
.3906e7	84 1c		sty $1c		                STY CURSORY
.3906e9	a6 1a		ldx $1a		                LDX CURSORX
.3906eb	22 f5 06 39	jsl $3906f5	                JSL ILOCATE
.3906ef					isrup_done_already_zero
.3906ef	68		pla		                PLA
.3906f0	ab		plb		                PLB
.3906f1	7a		ply		                PLY
.3906f2	fa		plx		                PLX
.3906f3	6b		rtl		                RTL
.3906f4					ICSRDOWN
.3906f4	6b		rtl		                RTL
.3906f5	48		pha		ILOCATE         PHA
.3906f6	08		php		                PHP
.3906f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3906f9					ilocate_scroll
.3906f9	c4 13		cpy $13		                CPY LINES_VISIBLE
.3906fb	90 07		bcc $390704	                BCC ilocate_scrolldone
.3906fd	22 2b 07 39	jsl $39072b	                JSL ISCROLLUP
.390701	88		dey		                DEY
.390702	80 f5		bra $3906f9	                BRA ilocate_scroll
.390704					ilocate_scrolldone
.390704	86 1a		stx $1a		                STX CURSORX
.390706	84 1c		sty $1c		                STY CURSORY
.390708	a5 0c		lda $0c		                LDA SCREENBEGIN
.39070a					ilocate_row
.39070a	c0 00 00	cpy #$0000	                CPY #$0
.39070d	f0 08		beq $390717	                BEQ ilocate_right
.39070f	18		clc		ilocate_down    CLC
.390710	65 11		adc $11		                ADC COLS_PER_LINE
.390712	88		dey		                DEY
.390713	f0 02		beq $390717	                BEQ ilocate_right
.390715	80 f8		bra $39070f	                BRA ilocate_down
.390717	18		clc		ilocate_right   CLC
.390718	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.39071a	85 17		sta $17		                STA CURSORPOS
.39071c	a4 1c		ldy $1c		                LDY CURSORY
.39071e	98		tya		                TYA
.39071f	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390723	8a		txa		                TXA
.390724	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390728	28		plp		ilocate_done    PLP
.390729	68		pla		                PLA
.39072a	6b		rtl		                RTL
.39072b					ISCROLLUP
.39072b	48		pha		                PHA
.39072c	da		phx		                PHX
.39072d	5a		phy		                PHY
.39072e	8b		phb		                PHB
.39072f	08		php		                PHP
.390730	c2 30		rep #$30	                REP #$30        ; set A&X long
.390732	18		clc		                CLC
.390733	a0 00 a0	ldy #$a000	                LDY #$A000
.390736	a2 80 a0	ldx #$a080	                LDX #$A080
.390739	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.39073c	54 af af	mvn $af,$af	                MVN $AF,$AF
.39073f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390741	a0 00 c0	ldy #$c000	                LDY #$C000
.390744	a2 80 c0	ldx #$c080	                LDX #$C080
.390747	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.39074a	54 af af	mvn $af,$af	                MVN $AF,$AF
.39074d	28		plp		                PLP
.39074e	ab		plb		                PLB
.39074f	7a		ply		                PLY
.390750	fa		plx		                PLX
.390751	68		pla		                PLA
.390752	6b		rtl		                RTL
.390753	08		php		IPRINTH         PHP
.390754	48		pha		                PHA
.390755					iprinth1
.390755	e2 20		sep #$20	                SEP #$20        ; set A short
.390757	bd 00 00	lda $390000,x	                LDA #0,b,x      ; Read the value to be printed
.39075a	4a		lsr a		                LSR
.39075b	4a		lsr a		                LSR
.39075c	4a		lsr a		                LSR
.39075d	4a		lsr a		                LSR
.39075e	22 70 07 39	jsl $390770	                JSL iprint_digit
.390762	bd 00 00	lda $390000,x	                LDA #0,b,x
.390765	22 70 07 39	jsl $390770	                JSL iprint_digit
.390769	ca		dex		                DEX
.39076a	88		dey		                DEY
.39076b	d0 e8		bne $390755	                BNE iprinth1
.39076d	68		pla		                PLA
.39076e	28		plp		                PLP
.39076f	6b		rtl		                RTL
.390770	da		phx		iprint_digit    PHX
.390771	c2 20		rep #$20	                REP #$20        ; set A long
.390773	29 0f 00	and #$000f	                AND #$0F
.390776	aa		tax		                TAX
.390777	bf 27 15 39	lda $391527,x	                LDA hex_digits,X
.39077b	22 2c 06 39	jsl $39062c	                JSL IPUTC       ; Print the digit
.39077f	fa		plx		                PLX
.390780	6b		rtl		                RTL
.390781	0b		phd		ICLRSCREEN	    PHD
.390782	08		php		                PHP
.390783	48		pha		                PHA
.390784	da		phx		                PHX
.390785	e2 20		sep #$20	                SEP #$20        ; set A short
.390787	c2 10		rep #$10	                REP #$10        ; set X long
.390789	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.39078c	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.39078e	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390792	e8		inx		                inx
.390793	e0 00 20	cpx #$2000	                cpx #$2000
.390796	d0 f6		bne $39078e	                bne iclearloop0
.390798	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.39079b	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.39079d	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.3907a1	e8		inx		                inx
.3907a2	e0 00 20	cpx #$2000	                cpx #$2000
.3907a5	d0 f6		bne $39079d	                bne iclearloop1
.3907a7	c2 10		rep #$10	                REP #$10        ; set X long
.3907a9	c2 20		rep #$20	                REP #$20        ; set A long
.3907ab	fa		plx		                PLX
.3907ac	68		pla		                PLA
.3907ad	28		plp		                PLP
.3907ae	2b		pld		                PLD
.3907af	6b		rtl		                RTL
.3907b0	48		pha		ICOLORFLAG      PHA
.3907b1	da		phx		                PHX
.3907b2	08		php		                PHP
.3907b3	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3907b5	a2 00		ldx #$00	                LDX #$00
.3907b7	bf 4f 12 39	lda $39124f,x	iclearloop2	    LDA @lgreet_clr_line1,x
.3907bb	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.3907bf	bf 79 12 39	lda $391279,x	                LDA @lgreet_clr_line2,x
.3907c3	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.3907c7	bf a3 12 39	lda $3912a3,x	                LDA @lgreet_clr_line3,x
.3907cb	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.3907cf	bf cd 12 39	lda $3912cd,x	                LDA @lgreet_clr_line4,x
.3907d3	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.3907d7	bf f7 12 39	lda $3912f7,x	                LDA @lgreet_clr_line5,x
.3907db	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.3907df	e8		inx		                inx
.3907e0	e0 2a		cpx #$2a	                cpx #42
.3907e2	d0 d3		bne $3907b7	                bne iclearloop2
.3907e4	28		plp		                PLP
.3907e5	fa		plx		                PLX
.3907e6	68		pla		                PLA
.3907e7	6b		rtl		                RTL
.3907e8	0b		phd		IINITCHLUT		  PHD
.3907e9	08		php		                PHP
.3907ea	48		pha		                PHA
.3907eb	da		phx		                PHX
.3907ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3907ee	e2 10		sep #$10	                SEP #$10        ; set X short
.3907f0	a2 00		ldx #$00					        LDX	#$00
.3907f2	bf 21 13 39	lda $391321,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.3907f6	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3907fa	e8		inx		                inx
.3907fb	e0 40		cpx #$40	                cpx #$40
.3907fd	d0 f3		bne $3907f2	                bne lutinitloop0
.3907ff	a2 00		ldx #$00	                LDX	#$00
.390801	bf 61 13 39	lda $391361,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390805	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390809	e8		inx		                INX
.39080a	e0 40		cpx #$40	                CPX #$40
.39080c	d0 f3		bne $390801	                bne lutinitloop1
.39080e	c2 20		rep #$20	                REP #$20        ; set A long
.390810	c2 10		rep #$10	                REP #$10        ; set X long
.390812	fa		plx		                PLX
.390813	68		pla		                PLA
.390814	28		plp		                PLP
.390815	2b		pld		                PLD
.390816	6b		rtl		                RTL
.390817					IINITGAMMATABLE
.390817	e2 20		sep #$20	                SEP #$20        ; set A short
.390819	c2 10		rep #$10	                REP #$10        ; set X long
.39081b	a2 00 00	ldx #$0000	                ldx #$0000
.39081e	bf 00 1a 39	lda $391a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390822	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390826	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.39082a	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.39082e	e8		inx		                inx
.39082f	e0 00 01	cpx #$0100	                cpx #$0100
.390832	d0 ea		bne $39081e	                bne initgammaloop
.390834	c2 30		rep #$30	                REP #$30        ; set A&X long
.390836	6b		rtl		                RTL
.390837	48		pha		IINITALLLUT     PHA
.390838	da		phx		                PHX
.390839	a2 00 00	ldx #$0000	                LDX #$0000
.39083c	e2 20		sep #$20	                SEP #$20        ; set A short
.39083e	a9 00		lda #$00	                LDA #$00
.390840	85 0a		sta $0a		                STA $0A     ; Temp Location
.390842					iinit_lut_loop
.390842	86 02		stx $02		                STX $02
.390844	a6 0a		ldx $0a		                LDX $0A
.390846	bf 00 19 39	lda $391900,x	                LDA GAMMA_2_2_Tbl, x
.39084a	49 55		eor #$55	                EOR  #$55
.39084c	a6 02		ldx $02		                LDX $02
.39084e	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390852	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390856	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.39085a	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.39085e	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390862	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390866	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.39086a	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.39086e	e8		inx		                inx
.39086f	86 02		stx $02		                STX $02
.390871	a6 0a		ldx $0a		                LDX $0A
.390873	bf 00 1b 39	lda $391b00,x	                LDA RANDOM_LUT_Tbl, x
.390877	a6 02		ldx $02		                LDX $02
.390879	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.39087d	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390881	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390885	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390889	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.39088d	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390891	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390895	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390899	e8		inx		                inx
.39089a	86 02		stx $02		                STX $02
.39089c	a6 0a		ldx $0a		                LDX $0A
.39089e	bf 00 1a 39	lda $391a00,x	                LDA GAMMA_1_8_Tbl, x
.3908a2	49 aa		eor #$aa	                EOR  #$AA
.3908a4	a6 02		ldx $02		                LDX $02
.3908a6	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3908aa	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3908ae	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3908b2	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3908b6	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3908ba	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3908be	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3908c2	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3908c6	e8		inx		                inx
.3908c7	a9 ff		lda #$ff	                LDA #$FF
.3908c9	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3908cd	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3908d1	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3908d5	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3908d9	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3908dd	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3908e1	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3908e5	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3908e9	e6 0a		inc $0a		                inc $0A
.3908eb	e8		inx		                inx
.3908ec	e0 00 04	cpx #$0400	                cpx #$0400
.3908ef	f0 03		beq $3908f4	                beq iinit_lut_exit
.3908f1	82 4e ff	brl $390842	                brl iinit_lut_loop
.3908f4					iinit_lut_exit
.3908f4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908f6	fa		plx		                PLX
.3908f7	68		pla		                PLA
.3908f8	6b		rtl		                RTL
.3908f9	48		pha		IINITVKYTXTMODE PHA
.3908fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3908fc	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.3908fe	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390902	a9 20		lda #$20	                LDA #$20
.390904	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390908	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.39090c	a9 00		lda #$00	                LDA #$00
.39090e	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390912	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390914	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390918	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.39091a	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.39091e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390920	68		pla		                PLA
.390921	6b		rtl		                RTL
.390922					IINITVKYGRPMODE
.390922	48		pha		                PHA
.390923	e2 20		sep #$20	                SEP #$20        ; set A short
.390925	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390927	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.39092b	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.39092d	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390931	a9 c0		lda #$c0	                LDA #$C0
.390933	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390937	a9 00		lda #$00	                LDA #$00
.390939	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.39093d	a9 80		lda #$80	                LDA #$80
.39093f	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390943	a9 02		lda #$02	                LDA #$02
.390945	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390949	a9 e0		lda #$e0	                LDA #$E0
.39094b	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.39094f	a9 01		lda #$01	                LDA #$01
.390951	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390955	c2 30		rep #$30	                REP #$30        ; set A&X long
.390957	68		pla		                PLA
.390958	6b		rtl		                RTL
.390959					IINITTILEMODE
.390959	6b		rtl		                RTL
.39095a	48		pha		IINITSPRITE     PHA
.39095b	e2 20		sep #$20	                SEP #$20        ; set A short
.39095d	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.39095f	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390963	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390967	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.39096b	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.39096f	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390973	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390977	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.39097b	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.39097f	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390983	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390987	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.39098b	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.39098f	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390993	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390997	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.39099b	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.39099f	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.3909a3	a9 09		lda #$09	                LDA #$09
.3909a5	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.3909a9	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.3909ad	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.3909b1	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.3909b5	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.3909b9	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.3909bd	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.3909c1	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.3909c5	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.3909c9	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.3909cd	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.3909d1	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.3909d5	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.3909d9	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.3909dd	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.3909e1	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.3909e5	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.3909e9	a9 00		lda #$00	                LDA #$00
.3909eb	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.3909ef	a9 04		lda #$04	                LDA #$04
.3909f1	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.3909f5	a9 08		lda #$08	                LDA #$08
.3909f7	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.3909fb	a9 0c		lda #$0c	                LDA #$0C
.3909fd	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390a01	a9 10		lda #$10	                LDA #$10
.390a03	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390a07	a9 14		lda #$14	                LDA #$14
.390a09	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390a0d	a9 18		lda #$18	                LDA #$18
.390a0f	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390a13	a9 1c		lda #$1c	                LDA #$1C
.390a15	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390a19	a9 20		lda #$20	                LDA #$20
.390a1b	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390a1f	a9 24		lda #$24	                LDA #$24
.390a21	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390a25	a9 28		lda #$28	                LDA #$28
.390a27	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390a2b	a9 2c		lda #$2c	                LDA #$2C
.390a2d	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390a31	a9 30		lda #$30	                LDA #$30
.390a33	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390a37	a9 34		lda #$34	                LDA #$34
.390a39	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390a3d	a9 38		lda #$38	                LDA #$38
.390a3f	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390a43	a9 3c		lda #$3c	                LDA #$3C
.390a45	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390a49	a9 40		lda #$40	                LDA #$40
.390a4b	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390a4f	a9 00		lda #$00	                LDA #$00
.390a51	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390a55	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390a59	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390a5d	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390a61	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390a65	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390a69	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390a6d	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390a71	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390a75	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390a79	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390a7d	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390a81	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390a85	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390a89	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390a8d	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390a91	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390a95	68		pla		                PLA
.390a96	6b		rtl		                RTL
.390a97					IINITFONTSET
.390a97	e2 20		sep #$20	                SEP #$20        ; set A short
.390a99	c2 10		rep #$10	                REP #$10        ; set X long
.390a9b	a2 00 00	ldx #$0000	                LDX #$0000
.390a9e					initFontsetbranch0
.390a9e	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390aa2	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390aa6	e8		inx		                INX
.390aa7	e0 00 08	cpx #$0800	                CPX #$0800
.390aaa	d0 f2		bne $390a9e	                BNE initFontsetbranch0
.390aac	ea		nop		                NOP
.390aad	a2 00 00	ldx #$0000	                LDX #$0000
.390ab0					initFontsetbranch1
.390ab0	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390ab4	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390ab8	e8		inx		                INX
.390ab9	e0 00 08	cpx #$0800	                CPX #$0800
.390abc	d0 f2		bne $390ab0	                BNE initFontsetbranch1
.390abe	ea		nop		                NOP
.390abf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ac1	6b		rtl		                RTL
.390ac2					INITMOUSEPOINTER
.390ac2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ac4	c2 10		rep #$10	                REP #$10        ; set X long
.390ac6	a2 00 00	ldx #$0000	                LDX #$0000
.390ac9					FILL_MOUSE_MARKER
.390ac9	bf 00 1c 39	lda $391c00,x	                LDA @lMOUSE_POINTER_PTR,X
.390acd	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390ad1	e8		inx		                INX
.390ad2	e0 00 01	cpx #$0100	                CPX #$0100
.390ad5	d0 f2		bne $390ac9	                BNE FILL_MOUSE_MARKER
.390ad7	ea		nop		                nop
.390ad8	a9 01		lda #$01	                LDA #$01
.390ada	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390ade	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ae0	6b		rtl		                RTL
.390ae1	48		pha		IINITCURSOR     PHA
.390ae2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ae4	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ae6	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390aea	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390aec	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390af0	c2 30		rep #$30	                REP #$30        ; set A&X long
.390af2	a9 00 00	lda #$0000	                LDA #$0000;
.390af5	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390af9	a9 06 00	lda #$0006	                LDA #$0006;
.390afc	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390b00	68		pla		                PLA
.390b01	6b		rtl		                RTL
.390b02	0b		phd		IINITSUPERIO	  PHD
.390b03	08		php		                PHP
.390b04	48		pha		                PHA
.390b05	e2 20		sep #$20	                SEP #$20        ; set A short
.390b07	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b09	8f 23 11 af	sta $af1123	                STA GP10_REG
.390b0d	af 23 11 af	lda $af1123	                LDA GP10_REG
.390b11	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b13	8f 24 11 af	sta $af1124	                STA GP11_REG
.390b17	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b19	8f 25 11 af	sta $af1125	                STA GP12_REG
.390b1d	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b1f	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390b23	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390b25	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390b29	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390b2b	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390b2f	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390b31	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390b35	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390b37	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390b3b	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390b3d	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390b41	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b43	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390b47	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390b49	8f 30 11 af	sta $af1130					        STA GP25_REG
.390b4d	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390b4f	8f 31 11 af	sta $af1131					        STA GP26_REG
.390b53	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390b55	8f 33 11 af	sta $af1133					        STA GP30_REG
.390b59	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390b5b	8f 34 11 af	sta $af1134					        STA GP31_REG
.390b5f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390b61	8f 35 11 af	sta $af1135					        STA GP32_REG
.390b65	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390b67	8f 36 11 af	sta $af1136					        STA GP33_REG
.390b6b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390b6d	8f 37 11 af	sta $af1137					        STA GP34_REG
.390b71	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390b73	8f 38 11 af	sta $af1138					        STA GP35_REG
.390b77	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390b79	8f 39 11 af	sta $af1139					        STA GP36_REG
.390b7d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390b7f	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390b83	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b85	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390b89	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390b8b	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390b8f	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390b91	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390b95	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390b97	8f 40 11 af	sta $af1140					        STA GP51_REG
.390b9b	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390b9d	8f 41 11 af	sta $af1141					        STA GP52_REG
.390ba1	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390ba3	8f 42 11 af	sta $af1142					        STA GP53_REG
.390ba7	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390ba9	8f 43 11 af	sta $af1143					        STA GP54_REG
.390bad	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390baf	8f 44 11 af	sta $af1144					        STA GP55_REG
.390bb3	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390bb5	8f 45 11 af	sta $af1145					        STA GP56_REG
.390bb9	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390bbb	8f 46 11 af	sta $af1146					        STA GP57_REG
.390bbf	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390bc1	8f 47 11 af	sta $af1147					        STA GP60_REG
.390bc5	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390bc7	8f 48 11 af	sta $af1148					        STA GP61_REG
.390bcb	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390bcd	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390bd1	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390bd3	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390bd7	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390bd9	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390bdd	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390bdf	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390be3	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390be5	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390be9	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390beb	8f 50 11 af	sta $af1150					        STA GP6_REG
.390bef	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390bf1	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390bf5	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390bf7	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390bfb	c2 20		rep #$20	                REP #$20        ; set A long
.390bfd	68		pla		                PLA
.390bfe	28		plp						        PLP
.390bff	2b		pld					        	PLD
.390c00	6b		rtl		                RTL
.390c01	0b		phd		IINITKEYBOARD	  PHD
.390c02	08		php						        PHP
.390c03	48		pha						        PHA
.390c04	da		phx						        PHX
.390c05	e2 20		sep #$20	                SEP #$20        ; set A short
.390c07	c2 10		rep #$10	                REP #$10        ; set X long
.390c09	18		clc		                CLC
.390c0a	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf ;
.390c0d	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390c0f	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390c13	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390c16	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390c1a	c9 55		cmp #$55					        CMP #$55
.390c1c	f0 03		beq $390c21					        BEQ	passAAtest
.390c1e	82 89 00	brl $390caa	                BRL initkb_loop_out
.390c21					passAAtest
.390c21	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390c23	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390c27	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390c2a	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390c2e	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390c30	f0 03		beq $390c35					        BEQ	passABtest
.390c32	82 75 00	brl $390caa	                BRL initkb_loop_out
.390c35					passABtest
.390c35	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390c37	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390c3b	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf ;
.390c3e	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390c40	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390c44	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf ;
.390c47	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390c49	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390c4d	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390c50	ca		dex		DLY_LOOP1       DEX
.390c51	ea		nop		                NOP
.390c52	ea		nop		                NOP
.390c53	ea		nop		                NOP
.390c54	ea		nop		                NOP
.390c55	ea		nop		                NOP
.390c56	ea		nop		                NOP
.390c57	ea		nop		                NOP
.390c58	ea		nop		                NOP
.390c59	e0 00 00	cpx #$0000	                CPX #$0000
.390c5c	d0 f2		bne $390c50	                BNE DLY_LOOP1
.390c5e	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390c61	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390c65					DO_CMD_F4_AGAIN
.390c65	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf ;
.390c68	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390c6a	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390c6e	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390c71	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390c75	c9 fa		cmp #$fa	                CMP #$FA
.390c77	d0 ec		bne $390c65	                BNE DO_CMD_F4_AGAIN
.390c79	20 d0 0c	jsr $390cd0	                JSR INIT_MOUSE
.390c7c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390c80	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390c82	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390c86	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390c8a	29 01		and #$01	                AND #FNX1_INT00_KBD
.390c8c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390c90	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390c94	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390c96	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390c9a	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390c9e	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390ca0	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390ca4	a2 1d 14	ldx #$141d	                LDX #<>Success_kb_init
.390ca7	38		sec		                SEC
.390ca8	b0 03		bcs $390cad	                BCS InitSuccess
.390caa	a2 2f 14	ldx #$142f	initkb_loop_out LDX #<>Failed_kb_init
.390cad	22 0c 06 39	jsl $39060c	InitSuccess     JSL IPRINT       ; print Message
.390cb1	c2 20		rep #$20	                REP #$20        ; set A long
.390cb3	c2 10		rep #$10	                REP #$10        ; set X long
.390cb5	fa		plx		                PLX
.390cb6	68		pla		                PLA
.390cb7	28		plp						        PLP
.390cb8	2b		pld						        PLD
.390cb9	6b		rtl		                RTL
.390cba					Poll_Inbuf
.390cba	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390cbe	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390cc0	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390cc2	f0 f6		beq $390cba					        BEQ Poll_Inbuf
.390cc4	60		rts		                RTS
.390cc5					Poll_Outbuf
.390cc5	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390cc9	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390ccb	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390ccd	d0 f6		bne $390cc5	                BNE Poll_Outbuf
.390ccf	60		rts		                RTS
.390cd0					INIT_MOUSE
.390cd0	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390cd3	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390cd5	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390cd9					DO_CMD_A9_AGAIN
.390cd9	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390cdc	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390cde	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ce2	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390ce5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ce9	c9 00		cmp #$00	                CMP #$00
.390ceb	d0 ec		bne $390cd9	                BNE DO_CMD_A9_AGAIN
.390ced	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390cf0	a9 20		lda #$20	                LDA #$20
.390cf2	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390cf6	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390cf9	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390cfd	09 02		ora #$02	                ORA #$02
.390cff	48		pha		                PHA
.390d00	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390d03	a9 60		lda #$60	                LDA #$60
.390d05	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390d09	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf ;
.390d0c	68		pla		                PLA
.390d0d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390d11	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390d13	20 36 0d	jsr $390d36	                JSR MOUSE_WRITE
.390d16	20 49 0d	jsr $390d49	                JSR MOUSE_READ
.390d19	a9 e8		lda #$e8	                LDA #$E8
.390d1b	20 36 0d	jsr $390d36	                JSR MOUSE_WRITE
.390d1e	20 49 0d	jsr $390d49	                JSR MOUSE_READ
.390d21	a9 00		lda #$00	                LDA #$00
.390d23	20 36 0d	jsr $390d36	                JSR MOUSE_WRITE
.390d26	20 49 0d	jsr $390d49	                JSR MOUSE_READ
.390d29	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390d2b	20 36 0d	jsr $390d36	                JSR MOUSE_WRITE
.390d2e	20 49 0d	jsr $390d49	                JSR MOUSE_READ
.390d31	a9 00		lda #$00	                LDA #$00
.390d33	85 e0		sta $e0		                STA MOUSE_PTR
.390d35	60		rts		                RTS
.390d36					MOUSE_WRITE
.390d36	48		pha		                PHA
.390d37	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390d3a	a9 d4		lda #$d4	                LDA #$D4
.390d3c	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390d40	20 ba 0c	jsr $390cba	                JSR Poll_Inbuf
.390d43	68		pla		                PLA
.390d44	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390d48	60		rts		                RTS
.390d49					MOUSE_READ
.390d49	20 c5 0c	jsr $390cc5	                JSR Poll_Outbuf ;
.390d4c	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390d50	60		rts		                RTS
.390d51	48		pha		INITRTC         PHA
.390d52	e2 20		sep #$20	                SEP #$20        ; set A short
.390d54	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390d58	00		brk #		                BRK
.390d59	c2 20		rep #$20	                REP #$20        ; set A long
.390d5b	68		pla		                PLA
.390d5c	6b		rtl		                RTL
.390d5d					ITESTSID
.390d5d	a9 0f 00	lda #$000f	                LDA #$0F
.390d60	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390d64	a9 be 00	lda #$00be	                LDA #$BE
.390d67	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390d6b	a9 f8 00	lda #$00f8	                LDA #$F8
.390d6e	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390d72	a9 11 00	lda #$0011	                LDA #$11
.390d75	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390d79	a9 25 00	lda #$0025	                LDA #$25
.390d7c	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390d80	a9 11 00	lda #$0011	                LDA #$11
.390d83	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390d87	a9 08 00	lda #$0008	                LDA #$08
.390d8a	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390d8e	a9 00 00	lda #$0000	                LDA #$00
.390d91	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390d95	a9 c6 00	lda #$00c6	                LDA #$C6
.390d98	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390d9c	a9 08 00	lda #$0008	                LDA #$08
.390d9f	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390da3	a9 00 00	lda #$0000	                LDA #$00
.390da6	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390daa	a9 08 00	lda #$0008	                LDA #$08
.390dad	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390db1	a9 c6 00	lda #$00c6	                LDA #$C6
.390db4	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390db8	a9 08 00	lda #$0008	                LDA #$08
.390dbb	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390dbf	a9 00 00	lda #$0000	                LDA #$00
.390dc2	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390dc6	a9 08 00	lda #$0008	                LDA #$08
.390dc9	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390dcd	a9 c6 00	lda #$00c6	                LDA #$C6
.390dd0	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390dd4	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390dd7	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390ddb	a9 01 00	lda #$0001	                LDA #$01
.390dde	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390de2	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390de5	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390de9	a9 08 00	lda #$0008	                LDA #$08
.390dec	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390df0	a9 08 00	lda #$0008	                LDA #$08
.390df3	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390df7	a9 0c 00	lda #$000c	                LDA #$0C
.390dfa	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390dfe	a9 04 00	lda #$0004	                LDA #$04
.390e01	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390e05	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390e08	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390e0c	a9 08 00	lda #$0008	                LDA #$08
.390e0f	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390e13	a9 08 00	lda #$0008	                LDA #$08
.390e16	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390e1a	a9 00 00	lda #$0000	                LDA #$00
.390e1d	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390e21	a9 08 00	lda #$0008	                LDA #$08
.390e24	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390e28	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390e2b	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390e2f	a9 08 00	lda #$0008	                LDA #$08
.390e32	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390e36	a9 08 00	lda #$0008	                LDA #$08
.390e39	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390e3d	a9 10 00	lda #$0010	                LDA #$10
.390e40	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390e44	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.390e48	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.390e4c	6b		rtl		                RTL
.390e4d	48		pha		IINITCODEC      PHA
.390e4e	c2 20		rep #$20	                REP #$20        ; set A long
.390e50	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390e53	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e57	a9 01 00	lda #$0001	                LDA #$0001
.390e5a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e5e	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390e61	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.390e64	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e68	a9 01 00	lda #$0001	                LDA #$0001
.390e6b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e6f	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390e72	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390e75	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e79	a9 01 00	lda #$0001	                LDA #$0001
.390e7c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e80	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390e83	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390e86	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e8a	a9 01 00	lda #$0001	                LDA #$0001
.390e8d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e91	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390e94	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390e97	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e9b	a9 01 00	lda #$0001	                LDA #$0001
.390e9e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ea2	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390ea5	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390ea8	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390eac	a9 01 00	lda #$0001	                LDA #$0001
.390eaf	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390eb3	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390eb6	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.390eb9	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ebd	a9 01 00	lda #$0001	                LDA #$0001
.390ec0	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ec4	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390ec7	68		pla		                PLA
.390ec8	6b		rtl		                RTL
.390ec9					IRESETCODEC
.390ec9	c2 20		rep #$20	                REP #$20        ; set A long
.390ecb	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390ece	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ed2	a9 01 00	lda #$0001	                LDA #$0001
.390ed5	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ed9	20 dd 0e	jsr $390edd	                JSR CODEC_TRF_FINISHED
.390edc	6b		rtl		                RTL
.390edd					CODEC_TRF_FINISHED
.390edd	e2 20		sep #$20	                SEP #$20        ; set A short
.390edf	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390ee3	29 01		and #$01	                AND #$01
.390ee5	c9 01		cmp #$01	                CMP #$01
.390ee7	f0 f6		beq $390edf	                BEQ CODEC_LOOP
.390ee9	c2 20		rep #$20	                REP #$20        ; set A long
.390eeb	60		rts		                RTS
.390eec					IBM_FILL_SCREEN
.390eec	c2 30		rep #$30	                REP #$30        ; set A&X long
.390eee	a9 00 00	lda #$0000	                LDA #$0000
.390ef1	a2 00 00	ldx #$0000	                LDX #$0000
.390ef4					BM_FILL_SCREEN_LOOPY
.390ef4	a0 00 00	ldy #$0000	                LDY #$0000
.390ef7	e2 20		sep #$20	                SEP #$20        ; set A short
.390ef9					BM_FILL_SCREEN_LOOPX
.390ef9	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390efb	c8		iny		                INY
.390efc	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390efe	d0 f9		bne $390ef9	                BNE BM_FILL_SCREEN_LOOPX
.390f00	20 0b 0f	jsr $390f0b	                JSR BM_FILL_COMPUTE_Y_DST
.390f03	e8		inx		                INX
.390f04	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390f06	d0 ec		bne $390ef4	                BNE BM_FILL_SCREEN_LOOPY
.390f08	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f0a	6b		rtl		                RTL
.390f0b					BM_FILL_COMPUTE_Y_DST
.390f0b	c2 20		rep #$20	                REP #$20        ; set A long
.390f0d	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390f0f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f13	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390f15	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f19	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390f1c	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390f20	a9 00 00	lda #$0000	                LDA #$0000
.390f23	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390f27	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f2b	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390f2d	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f31	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390f33	a9 00 00	lda #$0000	                LDA #$0000
.390f36	60		rts		                RTS
.390f37					IBMP_PARSER
.390f37	c2 30		rep #$30	                REP #$30        ; set A&X long
.390f39	a0 00 00	ldy #$0000	                LDY #$0000
.390f3c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390f3e	c9 42 4d	cmp #$4d42	                CMP #$4D42
.390f41	f0 03		beq $390f46	                BEQ IBMP_PARSER_CONT
.390f43	82 04 01	brl $39104a	                BRL BMP_PARSER_END_WITH_ERROR
.390f46					IBMP_PARSER_CONT
.390f46	a0 02 00	ldy #$0002	                LDY #$0002
.390f49	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390f4b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390f4f	a0 04 00	ldy #$0004	                LDY #$0004
.390f52	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390f54	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390f58	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390f5b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390f5f	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390f63	18		clc		                CLC
.390f64	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f68	85 50		sta $50		                STA BMP_FILE_SIZE
.390f6a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f6e	85 52		sta $52		                STA BMP_FILE_SIZE+2
.390f70	a0 12 00	ldy #$0012	                LDY #$0012
.390f73	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f75	85 40		sta $40		                STA BMP_X_SIZE
.390f77	a0 16 00	ldy #$0016	                LDY #$0016
.390f7a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f7c	85 42		sta $42		                STA BMP_Y_SIZE
.390f7e	a0 2e 00	ldy #$002e	                LDY #$002E
.390f81	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f83	0a		asl a		                ASL A; Multiply by 2
.390f84	0a		asl a		                ASL A; Multiply by 2
.390f85	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390f87	e0 00 00	cpx #$0000	                CPX #$0000
.390f8a	d0 05		bne $390f91	                BNE BMP_LUT1_PICK
.390f8c	20 52 10	jsr $391052	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390f8f	80 08		bra $390f99	                BRA DONE_TRANSFER_LUT;
.390f91					  BMP_LUT1_PICK
.390f91	e0 01 00	cpx #$0001	                CPX #$0001
.390f94	d0 03		bne $390f99	                BNE BMP_LUT2_PICK
.390f96	20 82 10	jsr $391082	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390f99					  BMP_LUT2_PICK
.390f99					  DONE_TRANSFER_LUT
.390f99	a5 56		lda $56		                LDA BMP_POSITION_Y
.390f9b	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.390f9f	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390fa1	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.390fa5	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.390fa9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390fad	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.390fb1	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390fb5	a5 54		lda $54		                LDA BMP_POSITION_X
.390fb7	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390fbb	a9 00 00	lda #$0000	                LDA #$0000
.390fbe	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390fc2	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390fc6	85 f0		sta $f0		                STA USER_TEMP
.390fc8	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390fcc	85 f2		sta $f2		                STA USER_TEMP+2
.390fce	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390fd0	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390fd4	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390fd6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390fda	a5 f0		lda $f0		                LDA USER_TEMP
.390fdc	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390fe0	a5 f2		lda $f2		                LDA USER_TEMP+2
.390fe2	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390fe6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390fea	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390fec	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390ff0	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390ff2	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390ff4	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390ff8	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390ffa	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390ffe	a5 50		lda $50		                LDA BMP_FILE_SIZE
.391000	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391004	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391006	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39100a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39100e	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391010	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391014	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391016	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391018	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39101c	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39101e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391022	18		clc		                CLC
.391023	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391025	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391028	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39102b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39102f	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391032	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391036	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39103a	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39103c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391040	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391042	20 b2 10	jsr $3910b2	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391045	a2 6b 14	ldx #$146b	                LDX #<>bmp_parser_msg0
.391048	80 03		bra $39104d	                BRA BMP_PARSER_END_NO_ERROR
.39104a					BMP_PARSER_END_WITH_ERROR
.39104a	a2 57 14	ldx #$1457	                LDX #<>bmp_parser_err0
.39104d					BMP_PARSER_END_NO_ERROR
.39104d	22 0c 06 39	jsl $39060c	                JSL IPRINT       ; print the first line
.391051	6b		rtl		                RTL
.391052					BMP_PARSER_UPDATE_LUT0
.391052	38		sec		                SEC
.391053	a0 7a 00	ldy #$007a	                LDY #$007A
.391056	a2 00 00	ldx #$0000	                LDX #$0000
.391059	e2 20		sep #$20	                SEP #$20        ; set A short
.39105b					BMP_PARSER_UPDATE_LOOP
.39105b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39105d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391061	c8		iny		                INY
.391062	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391064	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391068	c8		iny		                INY
.391069	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39106b	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39106f	c8		iny		                INY
.391070	a9 80		lda #$80	                LDA #$80
.391072	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391076	c8		iny		                INY ; For the Alpha Value, nobody cares
.391077	e8		inx		                INX
.391078	e8		inx		                INX
.391079	e8		inx		                INX
.39107a	e8		inx		                INX
.39107b	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39107d	d0 dc		bne $39105b	                BNE BMP_PARSER_UPDATE_LOOP
.39107f	c2 20		rep #$20	                REP #$20        ; set A long
.391081	60		rts		                RTS
.391082					BMP_PARSER_UPDATE_LUT1
.391082	38		sec		                SEC
.391083	a0 36 00	ldy #$0036	                LDY #$0036
.391086	a2 00 00	ldx #$0000	                LDX #$0000
.391089	e2 20		sep #$20	                SEP #$20        ; set A short
.39108b					PALETTE_LUT1_LOOP
.39108b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39108d	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391091	c8		iny		                INY
.391092	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391094	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391098	c8		iny		                INY
.391099	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39109b	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39109f	c8		iny		                INY
.3910a0	a9 80		lda #$80	                LDA #$80
.3910a2	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3910a6	c8		iny		                INY ; For the Alpha Value, nobody cares
.3910a7	e8		inx		                INX
.3910a8	e8		inx		                INX
.3910a9	e8		inx		                INX
.3910aa	e8		inx		                INX
.3910ab	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3910ad	d0 dc		bne $39108b	                BNE PALETTE_LUT1_LOOP
.3910af	c2 20		rep #$20	                REP #$20        ; set A long
.3910b1	60		rts		                RTS
.3910b2					BMP_PARSER_DMA_SHIT_OUT
.3910b2	a2 00 00	ldx #$0000	                LDX #$0000
.3910b5					BMP_PARSER_LOOPY
.3910b5	a0 00 00	ldy #$0000	                LDY #$0000
.3910b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3910ba					BMP_PARSER_LOOPX
.3910ba	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3910bc	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3910be	c8		iny		                INY
.3910bf	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3910c1	d0 f7		bne $3910ba	                BNE BMP_PARSER_LOOPX
.3910c3	20 cf 10	jsr $3910cf	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3910c6	20 ea 10	jsr $3910ea	                JSR BMP_PARSER_COMPUTE_Y_DST
.3910c9	e8		inx		                INX
.3910ca	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3910cc	d0 e7		bne $3910b5	                BNE BMP_PARSER_LOOPY
.3910ce	60		rts		                RTS
.3910cf					BMP_PARSER_COMPUTE_Y_SRC
.3910cf	c2 20		rep #$20	                REP #$20        ; set A long
.3910d1	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910d3	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910d7	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3910d9	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910dd	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910e1	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3910e3	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910e7	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3910e9	60		rts		                RTS
.3910ea					BMP_PARSER_COMPUTE_Y_DST
.3910ea	c2 20		rep #$20	                REP #$20        ; set A long
.3910ec	18		clc		                CLC
.3910ed	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3910ef	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3910f1	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910f3	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3910f5	69 00 00	adc #$0000	                ADC #$0000
.3910f8	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910fa	60		rts		                RTS
.3910fb	00		brk #		IRESTORE        BRK ; Warm boot routine
.3910fc	00		brk #		ISCINIT         BRK ;
.3910fd	00		brk #		IIOINIT         BRK ;
.3910fe	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.3910ff	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391100	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391101	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391102	00		brk #		ICLOSE          BRK ; Close a channel
.391103	00		brk #		ISETIN          BRK ; Set the current input channel
.391104	00		brk #		ISETOUT         BRK ; Set the current output channel
.391105	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391106	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.391107	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391108	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391109	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39110a	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39110b	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39110c	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39110d	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39110e	00		brk #		IPRINTF         BRK ; Print a float value
.39110f	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391110	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391111	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.391112	00		brk #		IPUSHKEY        BRK ;
.391113	00		brk #		IPUSHKEYS       BRK ;
.391114	00		brk #		ICSRLEFT        BRK ;
.391115	00		brk #		ICSRHOME        BRK ;
.391116	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391117	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391118					KERNEL_DATA
>391118	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>391120	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>391130	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>391140	58 20 0d
>391143	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39114b	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39115b	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39116b	20 20 0d
>39116e	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>391176	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>391186	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>391196	20 20 0d
>391199	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3911a1	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3911b1	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3911c1	20 20 0d
>3911c4	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3911cc	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3911dc	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3911ec	20 20 0d
>3911ef	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3911f7	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391207	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391217	0d
>391218	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: December 16th, 2019",$0D,$00
>391220	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>391230	6e 65 6c 20 44 61 74 65 3a 20 44 65 63 65 6d 62
>391240	65 72 20 31 36 74 68 2c 20 32 30 31 39 0d 00
.39124f					old_pc_style_stat
>39124f	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391257	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>391267	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391277	fd fd
>391279	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391281	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>391291	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3912a1	fd fd
>3912a3	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3912ab	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3912bb	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3912cb	fd fd
>3912cd	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3912d5	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>3912e5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3912f5	fd fd
>3912f7	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3912ff	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39130f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39131f	fd fd
>391321	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>391325	00 00 80 ff			                .text $00, $00, $80, $FF
>391329	00 80 00 ff			                .text $00, $80, $00, $FF
>39132d	80 00 00 ff			                .text $80, $00, $00, $FF
>391331	00 80 80 ff			                .text $00, $80, $80, $FF
>391335	80 80 00 ff			                .text $80, $80, $00, $FF
>391339	80 00 80 ff			                .text $80, $00, $80, $FF
>39133d	80 80 80 ff			                .text $80, $80, $80, $FF
>391341	00 45 ff ff			                .text $00, $45, $FF, $FF
>391345	13 45 8b ff			                .text $13, $45, $8B, $FF
>391349	00 00 20 ff			                .text $00, $00, $20, $FF
>39134d	00 20 00 ff			                .text $00, $20, $00, $FF
>391351	20 00 00 ff			                .text $20, $00, $00, $FF
>391355	20 20 20 ff			                .text $20, $20, $20, $FF
>391359	40 40 40 ff			                .text $40, $40, $40, $FF
>39135d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391361	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>391365	00 00 80 ff			                .text $00, $00, $80, $FF
>391369	00 80 00 ff			                .text $00, $80, $00, $FF
>39136d	80 00 00 ff			                .text $80, $00, $00, $FF
>391371	00 20 20 ff			                .text $00, $20, $20, $FF
>391375	20 20 00 ff			                .text $20, $20, $00, $FF
>391379	20 00 20 ff			                .text $20, $00, $20, $FF
>39137d	20 20 20 ff			                .text $20, $20, $20, $FF
>391381	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>391385	13 45 8b ff			                .text $13, $45, $8B, $FF
>391389	00 00 20 ff			                .text $00, $00, $20, $FF
>39138d	00 20 00 ff			                .text $00, $20, $00, $FF
>391391	40 00 00 ff			                .text $40, $00, $00, $FF
>391395	10 10 10 ff			                .text $10, $10, $10, $FF
>391399	40 40 40 ff			                .text $40, $40, $40, $FF
>39139d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3913a1	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3913a9	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3913b9	00
>3913ba	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3913c2	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3913d2	00
>3913d3	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>3913db	20 45 78 65 63 75 74 65 64 2e 0d 00
>3913e7	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>3913ef	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>3913ff	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391407	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391417	64 2e 2e 2e 0d 00
>39141d	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>391425	20 50 72 65 73 65 6e 74 0d 00
>39142f	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>391437	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>391447	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>391457	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>39145f	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39146b	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>391473	45 44 2e 00
>391477	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>39147f	47 20 42 4d 50 20 50 41 52 53 45 52 00
>39148c	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>391494	50 72 65 73 65 6e 74 3a 00
>39149d	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3914a5	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>3914ad	0d 00
>3914af	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>3914b7	52 4c 44 0d 00
>3914bc	0d 00				                .null $0D
>3914be	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>3914c6	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3914d6	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3914e6	58 44 49 5a 43 0d 00
>3914ed	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>3914f5	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>391505	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>391515	2d 2d 2d 2d 2d 00
>39151b	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>391523	52 4f 52 00
>391527	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>39152f	38 39 41 42 43 44 45 46 00
>391538					.align 256
>391600	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391608	37 38 39 30 2d 3d 08 09
>391610	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391618	6f 70 5b 5d 0d 00 61 73
>391620	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391628	27 60 00 5c 7a 78 63 76
>391630	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391638	00 20 00 00 00 00 00 00
>391640	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391648	00 00 00 00 00 00 00 00
>391650	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391658	00 00 00 00 00 00 00 00
>391660	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391668	00 00 00 00 00 00 00 00
>391670	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391678	00 00 00 00 00 00 00 00
>391680	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391688	26 2a 28 29 5f 2b 08 09
>391690	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391698	4f 50 7b 7d 0d 00 41 53
>3916a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3916a8	22 7e 00 5c 5a 58 43 56
>3916b0	42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3916b8	00 20 00 00 00 00 00 00
>3916c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3916c8	00 00 00 00 00 00 00 00
>3916d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3916d8	00 00 00 00 00 00 00 00
>3916e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3916e8	00 00 00 00 00 00 00 00
>3916f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3916f8	00 00 00 00 00 00 00 00
>391700	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391708	37 38 39 30 2d 3d 08 09
>391710	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391718	6f 70 5b 5d 0d 00 61 73
>391720	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391728	27 60 00 5c 7a 78 63 76
>391730	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391738	00 20 00 00 00 00 00 00
>391740	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391748	00 00 00 00 00 00 00 00
>391750	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391758	00 00 00 00 00 00 00 00
>391760	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391768	00 00 00 00 00 00 00 00
>391770	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391778	00 00 00 00 00 00 00 00
>391780	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391788	37 38 39 30 2d 3d 08 09
>391790	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391798	6f 70 5b 5d 0d 00 61 73
>3917a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3917a8	27 60 00 5c 7a 78 63 76
>3917b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3917b8	00 20 00 00 00 00 00 00
>3917c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3917c8	00 00 00 00 00 00 00 00
>3917d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3917d8	00 00 00 00 00 00 00 00
>3917e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3917e8	00 00 00 00 00 00 00 00
>3917f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3917f8	00 00 00 00 00 00 00 00
>391800	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391828	27 60 00 5c 7a 78 63 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391848	00 00 00 00 00 00 00 00
>391850	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880					.align 256
>391900	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391908	34 37 3a 3d 3f 41 44 46
>391910	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391918	57 58 5a 5b 5d 5e 60 61
>391920	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391928	6d 6f 70 71 72 73 75 76
>391930	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391938	80 81 82 83 84 85 86 87
>391940	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391948	8f 90 91 92 93 93 94 95
>391950	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391958	9d 9e 9e 9f a0 a1 a2 a2
>391960	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391968	a9 aa ab ab ac ad ae ae
>391970	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391978	b5 b5 b6 b7 b7 b8 b9 b9
>391980	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391988	bf c0 c0 c1 c2 c2 c3 c4
>391990	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391998	c9 ca ca cb cb cc cd cd
>3919a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3919a8	d2 d3 d4 d4 d5 d5 d6 d6
>3919b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3919b8	db dc dc dd de de df df
>3919c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3919c8	e4 e4 e5 e5 e6 e6 e7 e7
>3919d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3919d8	ec ec ed ed ee ee ef ef
>3919e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3919e8	f4 f4 f5 f5 f6 f6 f7 f7
>3919f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3919f8	fb fc fc fd fd fe fe ff
>391a00					.align 256
>391a00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391a08	25 27 2a 2c 2e 30 32 34
>391a10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391a18	44 46 47 49 4a 4c 4d 4f
>391a20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391a28	5b 5c 5d 5e 60 61 62 63
>391a30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391a38	6d 6e 70 71 72 73 74 75
>391a40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391a48	7e 7f 80 81 82 83 84 84
>391a50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391a58	8d 8e 8e 8f 90 91 92 93
>391a60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391a68	9a 9b 9c 9d 9e 9f 9f a0
>391a70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391a78	a7 a8 a9 aa aa ab ac ad
>391a80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391a88	b3 b4 b5 b6 b6 b7 b8 b8
>391a90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391a98	bf bf c0 c1 c2 c2 c3 c4
>391aa0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391aa8	ca ca cb cc cc cd ce ce
>391ab0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391ab8	d4 d5 d6 d6 d7 d7 d8 d9
>391ac0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391ac8	de df e0 e0 e1 e1 e2 e3
>391ad0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391ad8	e8 e9 e9 ea ea eb ec ec
>391ae0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391ae8	f1 f2 f3 f3 f4 f4 f5 f5
>391af0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391af8	fb fb fc fc fd fd fe ff
>391b00					.align 256
>391b00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391b08	83 dd ce 39 cd c5 3b 15
>391b10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391b18	87 12 31 65 89 27 88 42
>391b20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391b28	94 ce 56 ec fe da 58 c9
>391b30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391b38	d0 10 2c b2 4b ea 32 61
>391b40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391b48	a1 e6 ca 2d b3 ce b0 79
>391b50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391b58	5f e3 fb bd 15 2e be f5
>391b60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391b68	8d 8f 2c 80 0a 5e 99 36
>391b70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391b78	13 52 44 2f e3 ef 44 a2
>391b80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391b88	be 23 02 58 0a 52 5e b4
>391b90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391b98	d5 cf 3e df c4 9e da bb
>391ba0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391ba8	77 7d b1 3b 4a 68 35 6e
>391bb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391bb8	b5 8f 44 63 55 6f e1 50
>391bc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391bc8	57 74 b9 bd 05 14 50 eb
>391bd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391bd8	44 bc ec db 22 58 fc be
>391be0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391be8	24 aa 82 11 5c 9f 43 4d
>391bf0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391bf8	3e 3d 66 7e 0a 1c 6b 74
>391c00					.align 16
>391c00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391c08	01 01 01 00 00 00 00 00
>391c10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391c18	ff ff ff 01 00 00 00 00
>391c20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391c28	01 55 ff ff 01 00 00 00
>391c30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391c38	ff ff ff ff 01 00 00 00
>391c40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391c48	ff ff 01 ff ff 01 00 00
>391c50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391c58	01 ff ff 01 ff 01 00 00
>391c60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391c68	ff 01 ff ff ff 01 00 00
>391c70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391c78	ff ff ff ff ff 01 01 00
>391c80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391c88	ff ff ff ff 01 ff ff 01
>391c90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391c98	ff ff ff ff ff ff ff 01
>391ca0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391ca8	55 55 01 ff ff 55 01 00
>391cb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391cb8	01 01 55 ff 55 01 00 00
>391cc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391cc8	01 55 55 55 01 00 00 00
>391cd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391cd8	01 55 55 01 00 00 00 00
>391ce0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391ce8	00 01 01 00 00 00 00 00
>391cf0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391cf8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00

;******  End of listing
