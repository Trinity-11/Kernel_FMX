
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Mon Mar 08 16:50:10 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=1						TARGET_SYS=1

;******  Processing input file: src\kernel.asm

=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_FONT := 0
=$380000					START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3f0000					START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00					ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00					HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10					HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20					HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30					HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40					HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60					HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80					Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0					VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0					JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4					VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6					VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8					VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea					VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec					VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee					VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0					RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4					VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6					VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8					VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa					VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc					VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe					VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000					VECTORS_END      = $400000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00		18		clc		RHRESET         CLC
.38ff01		fb		xce		                XCE
.38ff02		5c 00 10 00	jmp $001000	                JML BOOT
.38ff10						RHCOP
.38ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12		8b		phb		                PHB
.38ff13		0b		phd		                PHD
.38ff14		48		pha		                PHA
.38ff15		da		phx		                PHX
.38ff16		5a		phy		                PHY
.38ff17		5c 08 10 00	jmp $001008	                JML BREAK
.38ff20						RHBRK
.38ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22		8b		phb		                PHB
.38ff23		0b		phd		                PHD
.38ff24		48		pha		                PHA
.38ff25		da		phx		                PHX
.38ff26		5a		phy		                PHY
.38ff27		5c 08 10 00	jmp $001008	                JML BREAK
.38ff30						RHABORT
.38ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32		8b		phb		                PHB
.38ff33		0b		phd		                PHD
.38ff34		48		pha		                PHA
.38ff35		da		phx		                PHX
.38ff36		5a		phy		                PHY
.38ff37		5c 08 10 00	jmp $001008	                JML BREAK
.38ff40						 RHNMI
.38ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42		8b		phb		                PHB
.38ff43		0b		phd		                PHD
.38ff44		48		pha		                PHA
.38ff45		da		phx		                PHX
.38ff46		5a		phy		                PHY
.38ff47		22 d5 18 38	jsl $3818d5	                JSL NMI_HANDLER
.38ff4b		7a		ply		                PLY
.38ff4c		fa		plx		                PLX
.38ff4d		68		pla		                PLA
.38ff4e		2b		pld		                PLD
.38ff4f		ab		plb		                PLB
.38ff50		40		rti		                RTI
.38ff60						RHIRQ
.38ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62		8b		phb		                PHB
.38ff63		0b		phd		                PHD
.38ff64		48		pha		                PHA
.38ff65		da		phx		                PHX
.38ff66		5a		phy		                PHY
.38ff67		22 14 17 38	jsl $381714	                JSL IRQ_HANDLER
.38ff6b		7a		ply		                PLY
.38ff6c		fa		plx		                PLX
.38ff6d		68		pla		                PLA
.38ff6e		2b		pld		                PLD
.38ff6f		ab		plb		                PLB
.38ff70		40		rti		                RTI
.38ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec		00 00				                .word $0000    ; FFEC
>38ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0		5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>38fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					VKY_RESERVED_00         = $AF0002
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800					FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000
=$afe000					BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff					BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00						VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$01						VDMA_XFER_SRAM2VRAM = $01           ; SRAM -> VRAM transfer
=$02						VDMA_XFER_VRAM2SRAM = $02           ; VRAM -> SRAM transfer
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401   ; Read only
=$01						VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00						SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10						SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20						SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30						SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40						SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80						SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430   ; Read only
=$01						SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064					STATUS_PORT 	= $AF1064
=$af1060					KBD_OUT_BUF 	= $AF1060
=$af1060					KBD_INPT_BUF	= $AF1060
=$af1064					KBD_CMD_BUF		= $AF1064
=$af1060					KBD_DATA_BUF	= $AF1060
=$af1060					PORT_A		    = $AF1060
=$af1061					PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08						GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000					BASIC = $3A0000
=3801092					MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c ac 05 39	jmp $3905ac	RESTORE         JML IRESTORE
.381008	1008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	1010	5c 23 17 39	jmp $391723	SCINIT          JML ISCINIT
.381014	1014	5c 24 17 39	jmp $391724	IOINIT          JML IIOINIT
.381018	1018	5c a7 07 39	jmp $3907a7	PUTC            JML IPUTC
.38101c	101c	5c 90 07 39	jmp $390790	PUTS            JML IPUTS
.381020	1020	5c 55 09 39	jmp $390955	PUTB            JML IPUTB
.381024	1024	5c 08 42 39	jmp $394208	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 25 17 39	jmp $391725	SETLFS          JML ISETLFS
.38102c	102c	5c 26 17 39	jmp $391726	SETNAM          JML ISETNAM
.381030	1030	5c 27 17 39	jmp $391727	OPEN            JML IOPEN
.381034	1034	5c 28 17 39	jmp $391728	CLOSE           JML ICLOSE
.381038	1038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	1040	5c 29 17 39	jmp $391729	GETB            JML IGETB
.381044	1044	5c a5 41 39	jmp $3941a5	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 54 07 39	jmp $390754	GETCH           JML IGETCH
.38104c	104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	1050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	1054	5c 2a 17 39	jmp $39172a	GETS            JML IGETS
.381058	1058	5c 2b 17 39	jmp $39172b	GETLINE         JML IGETLINE
.38105c	105c	5c 2c 17 39	jmp $39172c	GETFIELD        JML IGETFIELD
.381060	1060	5c 2d 17 39	jmp $39172d	TRIM            JML ITRIM
.381064	1064	5c 2e 17 39	jmp $39172e	PRINTC          JML IPRINTC
.381068	1068	5c 2f 17 39	jmp $39172f	PRINTS          JML IPRINTS
.38106c	106c	5c 56 09 39	jmp $390956	PRINTCR         JML IPRINTCR
.381070	1070	5c 30 17 39	jmp $391730	PRINTF          JML IPRINTF
.381074	1074	5c 31 17 39	jmp $391731	PRINTI          JML IPRINTI
.381078	1078	5c 16 0b 39	jmp $390b16	PRINTH          JML IPRINTH
.38107c	107c	5c 32 17 39	jmp $391732	PRINTAI         JML IPRINTAI
.381080	1080	5c 33 0b 39	jmp $390b33	PRINTAH         JML IPRINTAH
.381084	1084	5c 5a 0a 39	jmp $390a5a	LOCATE          JML ILOCATE
.381088	1088	5c 33 17 39	jmp $391733	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 34 17 39	jmp $391734	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c b6 09 39	jmp $3909b6	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c e9 09 39	jmp $3909e9	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 0f 0a 39	jmp $390a0f	CSRUP           JML ICSRUP
.38109c	109c	5c 35 0a 39	jmp $390a35	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c a5 09 39	jmp $3909a5	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c a6 0a 39	jmp $390aa6	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 81 0b 39	jmp $390b81	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 4c 0c 39	jmp $390c4c	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 38 10 39	jmp $391038	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 37 11 39	jmp $391137	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c a2 12 39	jmp $3912a2	TESTSID         JML ITESTSID
.3810bc	10bc	5c 17 10 39	jmp $391017	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c df 0f 39	jmp $390fdf	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 7b 0c 39	jmp $390c7b	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 9b 0c 39	jmp $390c9b	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 5d 0d 39	jmp $390d5d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 6a 0e 39	jmp $390e6a	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c a1 0e 39	jmp $390ea1	INITTILEMODE    JML IINITTILEMODE
.3810d8	10d8	5c a2 0e 39	jmp $390ea2	INITSPRITE      JML IINITSPRITE
.3810dc	10dc	5c 71 13 39	jmp $391371	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c 00 14 39	jmp $391400	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 6e 14 39	jmp $39146e	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 23 14 39	jmp $391423	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c b1 37 39	jmp $3937b1	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 87 54 39	jmp $395487	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 1a 55 39	jmp $39551a	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 54 55 39	jmp $395554	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c ed 55 39	jmp $3955ed	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 88 55 39	jmp $395588	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 97 56 39	jmp $395697	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 59 56 39	jmp $395659	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 93 56 39	jmp $395693	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 30 57 39	jmp $395730	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 57 57 39	jmp $395757	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 5b 57 39	jmp $39575b	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 4b 59 39	jmp $39594b	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 7b 41 39	jmp $39417b	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c e4 59 39	jmp $3959e4	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c a6 45 39	jmp $3945a6	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c b7 0d 39	jmp $390db7	SETSIZES        JML ISETSIZES
.381130	1130	5c 1b 5b 39	jmp $395b1b	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 7d 5a 39	jmp $395a7d	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c d1 5a 39	jmp $395ad1	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.381700	1700	5c 73 6a 39	jmp $396a73	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 37 17 39	jmp $391737	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 37 17 39	jmp $391737	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 37 17 39	jmp $391737	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 37 17 39	jmp $391737	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381714						IRQ_HANDLER
.381714		e2 20		sep #$20	                SEP #$20        ; set A short
.381716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38171a		c9 00		cmp #$00	                CMP #$00
.38171c		f0 7d		beq $38179b	                BEQ CHECK_PENDING_REG1
.38171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381722		29 01		and #$01	                AND #FNX0_INT00_SOF
.381724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381726		d0 09		bne $381731	                BNE SERVICE_NEXT_IRQ1
.381728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38172c		20 09 18	jsr $381809	                JSR SOF_INTERRUPT
.38172f		e2 20		sep #$20	                SEP #$20        ; set A short
.381731						SERVICE_NEXT_IRQ1
.381731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381735		29 02		and #$02	                AND #FNX0_INT01_SOL
.381737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.381739		d0 07		bne $381742	                BNE SERVICE_NEXT_IRQ2
.38173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38173f		20 1a 18	jsr $38181a	                JSR SOL_INTERRUPT
.381742						SERVICE_NEXT_IRQ2
.381742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.381748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38174a		d0 07		bne $381753	                BNE SERVICE_NEXT_IRQ3
.38174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381750		20 2b 18	jsr $38182b	                JSR TIMER0_INTERRUPT
.381753						SERVICE_NEXT_IRQ3
.381753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.381759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38175b		d0 07		bne $381764	                BNE SERVICE_NEXT_IRQ4
.38175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381761		20 3c 18	jsr $38183c	                JSR TIMER1_INTERRUPT
.381764						SERVICE_NEXT_IRQ4
.381764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.38176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38176c		d0 09		bne $381777	                BNE SERVICE_NEXT_IRQ6
.38176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381772		20 4d 18	jsr $38184d	                JSR TIMER2_INTERRUPT
.381775		e2 20		sep #$20	                SEP #$20        ; set A short
.381777						SERVICE_NEXT_IRQ6
.381777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.38177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38177f		d0 09		bne $38178a	                BNE SERVICE_NEXT_IRQ7
.381781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381785		20 9e 18	jsr $38189e	                JSR FDC_INTERRUPT
.381788		e2 20		sep #$20	                SEP #$20        ; set A short
.38178a						SERVICE_NEXT_IRQ7
.38178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381792		d0 07		bne $38179b	                BNE CHECK_PENDING_REG1
.381794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381798		20 5e 18	jsr $38185e	                JSR MOUSE_INTERRUPT
.38179b						CHECK_PENDING_REG1
.38179b		e2 20		sep #$20	                SEP #$20        ; set A short
.38179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a1		c9 00		cmp #$00	                CMP #$00
.3817a3		f0 61		beq $381806	                BEQ EXIT_IRQ_HANDLE
.3817a5						SERVICE_NEXT_IRQ8
.3817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.3817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3817ad		d0 0d		bne $3817bc	                BNE SERVICE_NEXT_IRQ11
.3817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817b3		8b		phb		                PHB
.3817b4		0b		phd		                PHD
.3817b5		20 d6 18	jsr $3818d6	                JSR KEYBOARD_INTERRUPT
.3817b8		2b		pld		                PLD
.3817b9		ab		plb		                PLB
.3817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3817bc						SERVICE_NEXT_IRQ11
.3817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.3817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3817c4		d0 09		bne $3817cf	                BNE SERVICE_NEXT_IRQ12
.3817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817ca		20 a9 18	jsr $3818a9	                JSR COM2_INTERRUPT
.3817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3817cf						SERVICE_NEXT_IRQ12
.3817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.3817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3817d7		d0 09		bne $3817e2	                BNE SERVICE_NEXT_IRQ13
.3817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817dd		20 b4 18	jsr $3818b4	                JSR COM1_INTERRUPT
.3817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3817e2						SERVICE_NEXT_IRQ13
.3817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3817ea		d0 09		bne $3817f5	                BNE SERVICE_NEXT_IRQ14
.3817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817f0		20 bf 18	jsr $3818bf	                JSR MPU401_INTERRUPT
.3817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3817f5						SERVICE_NEXT_IRQ14
.3817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.3817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3817fd		d0 07		bne $381806	                BNE EXIT_IRQ_HANDLE
.3817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381803		20 ca 18	jsr $3818ca	                JSR LPT1_INTERRUPT
.381806						EXIT_IRQ_HANDLE
.381806		c2 30		rep #$30	                REP #$30        ; set A&X long
.381808		6b		rtl		                RTL
.381809						SOF_INTERRUPT
.381809		e2 20		sep #$20	                SEP #$20        ; set A short
.38180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.381811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.381819		60		rts		                RTS
.38181a						SOL_INTERRUPT
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381820		29 02		and #$02	                AND #FNX0_INT01_SOL
.381822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.38182a		60		rts		                RTS
.38182b						TIMER0_INTERRUPT
.38182b		e2 20		sep #$20	                SEP #$20        ; set A short
.38182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.38183b		60		rts		                RTS
.38183c						TIMER1_INTERRUPT
.38183c		e2 20		sep #$20	                SEP #$20        ; set A short
.38183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.381844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.38184c		60		rts		                RTS
.38184d						TIMER2_INTERRUPT
.38184d		e2 20		sep #$20	                SEP #$20        ; set A short
.38184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.381855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.38185d		60		rts		                RTS
.38185e						MOUSE_INTERRUPT
.38185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.381860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.381864		aa		tax		                TAX
.381865		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF
.381869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38186d		e8		inx		                INX
.38186e		e0 03		cpx #$03	                CPX #$03
.381870		d0 24		bne $381896	                BNE EXIT_FOR_NEXT_VALUE
.381872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.381876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.38187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.38187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.381882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.381886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.38188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.38188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.381892		e2 20		sep #$20	                SEP #$20        ; set A short
.381894		a2 00		ldx #$00	                LDX #$00
.381896						EXIT_FOR_NEXT_VALUE
.381896		8a		txa		                TXA
.381897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.38189b		c2 10		rep #$10	                REP #$10        ; set X long
.38189d		60		rts		                RTS
.38189e						FDC_INTERRUPT
.38189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.3818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3818a8		60		rts		                RTS
.3818a9						COM2_INTERRUPT
.3818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.3818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818b3		60		rts		                RTS
.3818b4						COM1_INTERRUPT
.3818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.3818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818be		60		rts		                RTS
.3818bf						MPU401_INTERRUPT
.3818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818c9		60		rts		                RTS
.3818ca						LPT1_INTERRUPT
.3818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.3818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818d4		60		rts		                RTS
.3818d5						NMI_HANDLER
.3818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3818d6						KEYBOARD_INTERRUPT
.3818d6		48		pha		                PHA             ; begin setdp macro
.3818d7		08		php		                PHP
.3818d8		c2 20		rep #$20	                REP #$20        ; set A long
.3818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3818dd		5b		tcd		                TCD
.3818de		28		plp		                PLP
.3818df		68		pla		                PLA             ; end setdp macro
.3818e0		a2 00 00	ldx #$0000	                ldx #$0000
.3818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.3818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.3818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818f1						IRQ_HANDLER_FETCH
.3818f1		af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3818f9		29 80		and #$80	                AND #$80
.3818fb		c9 80		cmp #$80	                CMP #$80
.3818fd		d0 10		bne $38190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381901		29 7f		and #$7f	                AND #$7F
.381903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381907		aa		tax		                TAX
.381908		bf 80 75 39	lda $397580,x	                LDA @lScanCode_Prefix_Set1, x
.38190c		4c b2 19	jmp $3819b2	                JMP KB_WR_2_SCREEN      ; And save it
.38190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381913		d0 03		bne $381918	                BNE NOT_KB_SET_LSHIFT
.381915		82 ad 00	brl $3819c5	                BRL KB_SET_SHIFT
.381918						NOT_KB_SET_LSHIFT
.381918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38191a		d0 03		bne $38191f	                BNE NOT_KB_CLR_LSHIFT
.38191c		82 af 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38191f						NOT_KB_CLR_LSHIFT
.38191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381921		d0 03		bne $381926	                BNE NOT_KB_SET_RSHIFT
.381923		82 9f 00	brl $3819c5	                BRL KB_SET_SHIFT
.381926						NOT_KB_SET_RSHIFT
.381926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381928		d0 03		bne $38192d	                BNE NOT_KB_CLR_RSHIFT
.38192a		82 a1 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38192d						NOT_KB_CLR_RSHIFT
.38192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38192f		d0 03		bne $381934	                BNE NOT_KB_SET_CTRL
.381931		82 a3 00	brl $3819d7	                BRL KB_SET_CTRL
.381934						NOT_KB_SET_CTRL
.381934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381936		d0 03		bne $38193b	                BNE NOT_KB_CLR_CTRL
.381938		82 a5 00	brl $3819e0	                BRL KB_CLR_CTRL
.38193b						NOT_KB_CLR_CTRL
.38193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38193d		d0 03		bne $381942	                BNE NOT_KB_SET_ALT
.38193f		82 a7 00	brl $3819e9	                BRL KB_SET_ALT
.381942						NOT_KB_SET_ALT
.381942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381944		d0 03		bne $381949	                BNE NOT_KB_CLR_ALT
.381946		82 a9 00	brl $3819f2	                BRL KB_CLR_ALT
.381949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38194b		d0 03		bne $381950	                BNE NOT_PREFIXED
.38194d		82 ab 00	brl $3819fb	                BRL KB_SET_PREFIX
.381950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381952		d0 03		bne $381957	                BNE NOT_KB_SET_NUM
.381954		82 b6 00	brl $381a0d	                BRL KB_TOG_NUMLOCK
.381957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381959		d0 03		bne $38195e	                BNE NOT_KB_SET_SCR
.38195b		82 a6 00	brl $381a04	                BRL KB_TOG_SCRLOCK
.38195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381960		d0 03		bne $381965	                BNE NOT_KB_CAPSLOCK
.381962		82 bc 00	brl $381a21	                BRL KB_TOG_CAPLOCK
.381965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381967		d0 09		bne $381972	                BNE KB_UNPRESSED
.381969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38196f		82 b5 00	brl $381a27	                BRL KB_CHECK_B_DONE
.381972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381976		d0 03		bne $38197b	                BNE KB_NORM_SC
.381978		82 ac 00	brl $381a27	                BRL KB_CHECK_B_DONE
.38197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38197d		aa		tax		                TAX
.38197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381980		29 10		and #$10	                AND #$10
.381982		c9 10		cmp #$10	                CMP #$10
.381984		f0 17		beq $38199d	                BEQ SHIFT_KEY_ON
.381986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381988		29 20		and #$20	                AND #$20
.38198a		c9 20		cmp #$20	                CMP #$20
.38198c		f0 16		beq $3819a4	                BEQ CTRL_KEY_ON
.38198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381990		29 40		and #$40	                AND #$40
.381992		c9 40		cmp #$40	                CMP #$40
.381994		f0 15		beq $3819ab	                BEQ ALT_KEY_ON
.381996		bf 00 73 39	lda $397300,x	                LDA @lScanCode_Press_Set1, x
.38199a		82 15 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.38199d		bf 80 73 39	lda $397380,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3819a1		82 0e 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819a4		bf 00 74 39	lda $397400,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3819a8		82 07 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819ab		bf 80 74 39	lda $397480,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3819af		82 00 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3819b4		d0 03		bne $3819b9	                BNE savechar
.3819b6		4c 37 1a	jmp $381a37	                JMP programmerKey       ; Yes: trigger the programmer key
.3819b9		48		pha		savechar        PHA
.3819ba		c2 10		rep #$10	                REP #$10        ; set X long
.3819bc		20 43 1a	jsr $381a43	                JSR SAVEKEY
.3819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3819c1		68		pla		                PLA
.3819c2		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3819c7		09 10		ora #$10	                ORA #$10
.3819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819cb		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3819d0		29 ef		and #$ef	                AND #$EF
.3819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819d4		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3819d9		09 20		ora #$20	                ORA #$20
.3819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819dd		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3819e2		29 df		and #$df	                AND #$DF
.3819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819e6		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3819eb		09 40		ora #$40	                ORA #$40
.3819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819ef		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3819f4		29 bf		and #$bf	                AND #$BF
.3819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819f8		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3819fd		09 80		ora #$80	                ORA #$80
.3819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381a01		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a0a		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381a11		c9 60		cmp #$60	                CMP #$60
.381a13		d0 03		bne $381a18	                BNE KB_TOG_NUMLOC2
.381a15		82 63 ff	brl $38197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a1e		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a27						KB_CHECK_B_DONE
.381a27		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381a2f		d0 03		bne $381a34	                BNE SET_LED
.381a31		4c f1 18	jmp $3818f1	                JMP IRQ_HANDLER_FETCH
.381a34						SET_LED
.381a34						KB_DONE
.381a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a36		60		rts		                RTS
.381a37						programmerKey
.381a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381a3b		ab		plb		                PLB
.381a3c		7a		ply		                PLY
.381a3d		fa		plx		                PLX
.381a3e		68		pla		                PLA
.381a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381a43						SAVEKEY
.381a43		e2 20		sep #$20	                SEP #$20        ; set A short
.381a45		48		pha		                PHA                     ; Save the character
.381a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381a4a		f0 0d		beq $381a59	                BEQ no_caps             ; No... just use the character as-is
.381a4c		68		pla		                PLA                     ; Get the character back
.381a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381a4f		90 09		bcc $381a5a	                BLT check_break         ; Yes: just use as-is
.381a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381a53		b0 05		bcs $381a5a	                BGE check_break         ; Yes: just us as-is
.381a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381a57		80 01		bra $381a5a	                BRA check_break
.381a59		68		pla		no_caps         PLA                     ; Restore the character
.381a5a		c9 00		cmp #$00	check_break     CMP #0
.381a5c		f0 18		beq $381a76	                BEQ done
.381a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381a60		f0 15		beq $381a77	                BEQ flag_break          ; Yes: flag a break
.381a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381a67		b0 0d		bcs $381a76	                BCS done                ; Stop storing - An error should ensue here...
.381a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381a6d		e8		inx		                INX
.381a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381a70		a9 00		lda #$00	                LDA #$00
.381a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381a76		60		rts		done            RTS
.381a77						flag_break
.381a77		e2 20		sep #$20	                SEP #$20        ; set A short
.381a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381a7d		60		rts		                RTS
.381a7e						KBD_GETCW
.381a7e		da		phx		                PHX
.381a7f		0b		phd		                PHD
.381a80		08		php		                PHP
.381a81		48		pha		                PHA             ; begin setdp macro
.381a82		08		php		                PHP
.381a83		c2 20		rep #$20	                REP #$20        ; set A long
.381a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381a88		5b		tcd		                TCD
.381a89		28		plp		                PLP
.381a8a		68		pla		                PLA             ; end setdp macro
.381a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.381a8d		c2 10		rep #$10	                REP #$10        ; set X long
.381a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.381a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.381a98		d0 0a		bne $381aa4	                BNE check_buffer        ; No: check the key buffer
.381a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381aa0		22 dd 16 39	jsl $3916dd	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381aa8		90 02		bcc $381aac	                BCC read_buff           ; Yes: a key is present, read it
.381aaa		80 e4		bra $381a90	                BRA get_wait            ; Otherwise, keep waiting
.381aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381aaf		e8		inx		                INX                     ; And move to the next key
.381ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ab2		f0 07		beq $381abb	                BEQ reset_indexes       ; Yes: return to 0 position
.381ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ab6		58		cli		                CLI
.381ab7		28		plp		done            PLP                     ; Restore status and interrupts
.381ab8		2b		pld		                PLD
.381ab9		fa		plx		                PLX
.381aba		6b		rtl		                RTL
.381abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381abf		80 f6		bra $381ab7	                BRA done
.381ac1						KBD_GETC
.381ac1		da		phx		                PHX
.381ac2		0b		phd		                PHD
.381ac3		08		php		                PHP
.381ac4		48		pha		                PHA             ; begin setdp macro
.381ac5		08		php		                PHP
.381ac6		c2 20		rep #$20	                REP #$20        ; set A long
.381ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381acb		5b		tcd		                TCD
.381acc		28		plp		                PLP
.381acd		68		pla		                PLA             ; end setdp macro
.381ace		e2 20		sep #$20	                SEP #$20        ; set A short
.381ad0		c2 10		rep #$10	                REP #$10        ; set X long
.381ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.381ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381ad7		90 05		bcc $381ade	                BCC read_buff           ; Yes: a key is present, read it
.381ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.381adb		38		sec		                SEC
.381adc		80 0b		bra $381ae9	                BRA done
.381ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381ae1		e8		inx		                INX                     ; And move to the next key
.381ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ae4		f0 07		beq $381aed	                BEQ reset_indexes       ; Yes: return to 0 position
.381ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ae8		58		cli		                CLI
.381ae9		28		plp		done            PLP                     ; Restore status and interrupts
.381aea		2b		pld		                PLD
.381aeb		fa		plx		                PLX
.381aec		6b		rtl		                RTL
.381aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381af1		80 f6		bra $381ae9	                BRA done

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 87 12 39	jsl $391287	                JSL INITRTC               ; Initialize the RTC
.390455		c2 30		rep #$30	                REP #$30        ; set A&X long
.390457		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a		85 0c		sta $0c		                STA SCREENBEGIN
.39045c		85 17		sta $17		                STA CURSORPOS
.39045e		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461		85 1f		sta $1f		                STA COLORPOS
.390463		e2 20		sep #$20	                SEP #$20        ; set A short
.390465		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467		85 0e		sta $0e		                STA SCREENBEGIN+2
.390469		85 19		sta $19		                STA CURSORPOS+2
.39046b		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d		85 21		sta $21		                STA COLORPOS+2
.39046f		e2 20		sep #$20	                SEP #$20        ; set A short
.390471		a9 00		lda #$00	                LDA #$00
.390473		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478		8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e		8f 00 f1 af	sta $aff100	                STA $AFF100
.390482		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484		8f 00 f1 af	sta $aff100	                STA $AFF100
.390488		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e		c2 30		rep #$30	                REP #$30        ; set A&X long
.390490		a2 48 00	ldx #$0048	                LDX #72
.390493		86 0f		stx $0f		                STX COLS_VISIBLE
.390495		a0 34 00	ldy #$0034	                LDY #52
.390498		84 13		sty $13		                STY LINES_VISIBLE
.39049a		a2 80 00	ldx #$0080	                LDX #128
.39049d		86 11		stx $11		                STX COLS_PER_LINE
.39049f		a0 40 00	ldy #$0040	                LDY #64
.3904a2		84 15		sty $15		                STY LINES_MAX
.3904a4		a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7		85 1e		sta $1e		                STA CURCOLOR
.3904a9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904ad		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.3904b1		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904b5		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904b9		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.3904bd		22 f8 0f 39	jsl $390ff8	                JSL INITMOUSEPOINTER
.3904c1		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904c5		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE
.3904c9		22 df 0f 39	jsl $390fdf	                JSL IINITFONTSET
.3904cd		22 81 0b 39	jsl $390b81	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4		22 32 5c 39	jsl $395c32	                JSL UART_SELECT
.3904d8		22 9e 5c 39	jsl $395c9e	                JSL UART_INIT
.3904dc		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df		22 32 5c 39	jsl $395c32	                JSL UART_SELECT
.3904e3		22 9e 5c 39	jsl $395c9e	                JSL UART_INIT
.3904e7		a9 00 00	lda #$0000	                LDA #0
.3904ea		22 38 10 00	jsl $001038	                JSL SETIN
.3904ee		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904f2		c2 20		rep #$20	                REP #$20        ; set A long
.3904f4		a2 00 00	ldx #$0000	                LDX #0
.3904f7		a0 00 00	ldy #$0000	                LDY #0
.3904fa		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.3904fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.390500						greet
.390500		48		pha		                PHA             ; begin setdbr macro
.390501		08		php		                PHP
.390502		e2 20		sep #$20	                SEP #$20        ; set A short
.390504		a9 39		lda #$39	                LDA #`greet_msg
.390506		48		pha		                PHA
.390507		ab		plb		                PLB
.390508		28		plp		                PLP
.390509		68		pla		                PLA             ; end setdbr macro
.39050a		a2 73 6e	ldx #$6e73	                LDX #<>greet_msg
.39050d		22 87 07 39	jsl $390787	                JSL IPRINT       ; print the first line
.390511		22 cc 0b 39	jsl $390bcc	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515		48		pha		                PHA             ; begin setdp macro
.390516		08		php		                PHP
.390517		c2 20		rep #$20	                REP #$20        ; set A long
.390519		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c		5b		tcd		                TCD
.39051d		28		plp		                PLP
.39051e		68		pla		                PLA             ; end setdp macro
.39051f		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.390523		e2 20		sep #$20	                SEP #$20        ; set A short
.390525		c2 10		rep #$10	                REP #$10        ; set X long
.390527		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529		8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f		8f 00 f1 af	sta $aff100	                STA $AFF100
.390533		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535		8f 00 f1 af	sta $aff100	                STA $AFF100
.390539		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541		8f 00 f1 af	sta $aff100	                STA $AFF100
.390545		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547		8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d		8f 00 f1 af	sta $aff100	                STA $AFF100
.390551		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554		22 6b 16 39	jsl $39166b	          		 	JSL ILOOP_MS
.390558		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f		e2 20		sep #$20	                SEP #$20        ; set A short
.390561		c2 10		rep #$10	                REP #$10        ; set X long
.390563		48		pha		                PHA             ; begin setdbr macro
.390564		08		php		                PHP
.390565		e2 20		sep #$20	                SEP #$20        ; set A short
.390567		a9 39		lda #$39	                LDA #`greet_msg
.390569		48		pha		                PHA
.39056a		ab		plb		                PLB
.39056b		28		plp		                PLP
.39056c		68		pla		                PLA             ; end setdbr macro
.39056d		a2 00 00	ldx #$0000	                LDX #0
.390570		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390574		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578		e8		inx		                INX
.390579		e0 00 10	cpx #$1000	                CPX #$1000
.39057c		d0 f2		bne $390570	                BNE jmpcopy
.39057e		22 d4 44 39	jsl $3944d4	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582		22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588		f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c		f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590		f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594		f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598		f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2		f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6		f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa		f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac						IRESTORE
.3905ac		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0		ea		nop		CREDIT_LOCK     NOP
.3905b1		80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3						BOOTSDC
.3905b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf		90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1		22 61 47 39	jsl $394761	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5		80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7		a2 51 72	ldx #$7251	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca		80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc						BOOTIDE
.3905cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8		90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da		22 61 47 39	jsl $394761	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de		82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1		a2 6d 72	ldx #$726d	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4		80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6		a2 b6 72	ldx #$72b6	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9		22 87 07 39	jsl $390787	                JSL IPRINT
.3905ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5		22 0c 68 39	jsl $39680c	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9		90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb		22 61 47 39	jsl $394761	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff		82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602		a2 90 72	ldx #$7290	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605		22 87 07 39	jsl $390787	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609		a2 2c 72	ldx #$722c	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c		22 87 07 39	jsl $390787	                JSL IPRINT
.390610		22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616		d0 03		bne $39061b	                BNE chk_r_lc
.390618		82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d		d0 03		bne $390622	                BNE chk_b_lc
.39061f		82 5c ff	brl $39057e	                BRL retry_boot
.390622		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624		f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626		c9 42		cmp #$42	                CMP #'B'
.390628		f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a		80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c						BOOT_MENU
.39062c		8b		phb		                PHB
.39062d		08		php		                PHP
.39062e		e2 20		sep #$20	                SEP #$20        ; set A short
.390630		c2 10		rep #$10	                REP #$10        ; set X long
.390632		a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634		48		pha		                PHA
.390635		ab		plb		                PLB
.390636		a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639		22 1c 10 00	jsl $00101c	                JSL PUTS                ; Display the boot menu
.39063d		c2 10		rep #$10	                REP #$10        ; set X long
.39063f		a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642		e2 20		sep #$20	                SEP #$20        ; set A short
.390644		a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647		22 6b 16 39	jsl $39166b	                JSL ILOOP_MS            ; Wait ...
.39064b		88		dey		                DEY                     ; Count down the tenths of seconds
.39064c		f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.390652		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654		f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658		f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c		f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660		f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664		f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668		d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a		a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c		28		plp		return          PLP
.39066d		ab		plb		                PLB
.39066e		6b		rtl		                RTL
>39066f		46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677		46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687		52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697		41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4						IBREAK
.3906a4		48		pha		                PHA             ; begin setdp macro
.3906a5		08		php		                PHP
.3906a6		c2 20		rep #$20	                REP #$20        ; set A long
.3906a8		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab		5b		tcd		                TCD
.3906ac		28		plp		                PLP
.3906ad		68		pla		                PLA             ; end setdp macro
.3906ae		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af		8f 48 02 00	sta $000248	                STA CPUY
.3906b3		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4		8f 46 02 00	sta $000246	                STA CPUX
.3906b8		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9		8f 44 02 00	sta $000244	                STA CPUA
.3906bd		68		pla		                PLA
.3906be		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4		68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5		8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9		68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce		c2 20		rep #$20	                REP #$20        ; set A long
.3906d0		68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1		8f 40 02 00	sta $000240	                STA CPUPC
.3906d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7		68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8		8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc		c2 20		rep #$20	                REP #$20        ; set A long
.3906de		3b		tsc		                TSA             ; Get the stack
.3906df		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6		1b		tcs		                TAS
.3906e7		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb						IREADY
.3906eb		48		pha		                PHA             ; begin setdbr macro
.3906ec		08		php		                PHP
.3906ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef		a9 39		lda #$39	                LDA #`ready_msg
.3906f1		48		pha		                PHA
.3906f2		ab		plb		                PLB
.3906f3		28		plp		                PLP
.3906f4		68		pla		                PLA             ; end setdbr macro
.3906f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7		a2 cd 72	ldx #$72cd	                LDX #<>ready_msg
.3906fa		22 87 07 39	jsl $390787	                JSL IPRINT
.3906fe						IREADYWAIT
.3906fe		22 18 07 39	jsl $390718	                JSL IGETCHE
.390702		80 fa		bra $3906fe	                BRA IREADYWAIT
.390704		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705		db		stp		IRETURN         STP
.390706		08		php		ISETIN          PHP
.390707		e2 20		sep #$20	                SEP #$20        ; set A short
.390709		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d		28		plp		                PLP
.39070e		6b		rtl		                RTL
.39070f		08		php		ISETOUT         PHP
.390710		e2 20		sep #$20	                SEP #$20        ; set A short
.390712		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716		28		plp		                PLP
.390717		6b		rtl		                RTL
.390718		22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.390720		6b		rtl		                RTL
.390721						IGETCHW
.390721		da		phx		                PHX
.390722		5a		phy		                PHY
.390723		8b		phb		                PHB
.390724		0b		phd		                PHD
.390725		08		php		                PHP
.390726		e2 20		sep #$20	                SEP #$20        ; set A short
.390728		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39072c		f0 1b		beq $390749	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072e		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390730		f0 0d		beq $39073f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390734		f0 09		beq $39073f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390736		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390738		28		plp		                PLP
.390739		38		sec		                SEC                 ; And return carry set
.39073a		2b		pld		                PLD
.39073b		ab		plb		                PLB
.39073c		7a		ply		                PLY
.39073d		fa		plx		                PLX
.39073e		6b		rtl		                RTL
.39073f		22 32 5c 39	jsl $395c32	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390743		22 e6 5c 39	jsl $395ce6	                JSL UART_GETC       ; Get the charater from the COM port
.390747		80 04		bra $39074d	                BRA done
.390749		22 7e 1a 38	jsl $381a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.39074d		28		plp		done            PLP
.39074e		18		clc		                CLC                 ; Return carry clear for valid data
.39074f		2b		pld		                PLD
.390750		ab		plb		                PLB
.390751		7a		ply		                PLY
.390752		fa		plx		                PLX
.390753		6b		rtl		                RTL
.390754						IGETCH
.390754		da		phx		                PHX
.390755		5a		phy		                PHY
.390756		8b		phb		                PHB
.390757		0b		phd		                PHD
.390758		08		php		                PHP
.390759		e2 20		sep #$20	                SEP #$20        ; set A short
.39075b		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39075f		f0 1b		beq $39077c	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390761		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390763		f0 0d		beq $390772	                BEQ getc_uart       ; Yes: handle reading from the UART
.390765		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390767		f0 09		beq $390772	                BEQ getc_uart       ; Yes: handle reading from the UART
.390769		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39076b		28		plp		                PLP
.39076c		38		sec		                SEC                 ; And return carry set
.39076d		2b		pld		                PLD
.39076e		ab		plb		                PLB
.39076f		7a		ply		                PLY
.390770		fa		plx		                PLX
.390771		6b		rtl		                RTL
.390772		22 32 5c 39	jsl $395c32	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390776		22 e6 5c 39	jsl $395ce6	                JSL UART_GETC       ; Get the charater from the COM port
.39077a		80 04		bra $390780	                BRA done
.39077c		22 c1 1a 38	jsl $381ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390780		28		plp		done            PLP
.390781		18		clc		                CLC                 ; Return carry clear for valid data
.390782		2b		pld		                PLD
.390783		ab		plb		                PLB
.390784		7a		ply		                PLY
.390785		fa		plx		                PLX
.390786		6b		rtl		                RTL
.390787		22 90 07 39	jsl $390790	IPRINT          JSL IPUTS
.39078b		22 56 09 39	jsl $390956	                JSL IPRINTCR
.39078f		6b		rtl		                RTL
.390790		48		pha		IPUTS           PHA
.390791		08		php		                PHP
.390792		e2 20		sep #$20	                SEP #$20        ; set A short
.390794		c2 10		rep #$10	                REP #$10        ; set X long
.390796		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390799		f0 08		beq $3907a3	                BEQ iputs_done
.39079b		22 a7 07 39	jsl $3907a7	iputs2          JSL IPUTC
.39079f		e8		inx		iputs3          INX
.3907a0		4c 96 07	jmp $390796	                JMP iputs1
.3907a3		e8		inx		iputs_done      INX
.3907a4		28		plp		                PLP
.3907a5		68		pla		                PLA
.3907a6		6b		rtl		                RTL
.3907a7						IPUTC
.3907a7		da		phx		                PHX
.3907a8		5a		phy		                PHY
.3907a9		0b		phd		                PHD
.3907aa		8b		phb		                PHB
.3907ab		08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907ac		48		pha		                PHA             ; begin setdp macro
.3907ad		08		php		                PHP
.3907ae		c2 20		rep #$20	                REP #$20        ; set A long
.3907b0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907b3		5b		tcd		                TCD
.3907b4		28		plp		                PLP
.3907b5		68		pla		                PLA             ; end setdp macro
.3907b6		48		pha		                PHA             ; begin setdbr macro
.3907b7		08		php		                PHP
.3907b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3907ba		a9 00		lda #$00	                LDA #0
.3907bc		48		pha		                PHA
.3907bd		ab		plb		                PLB
.3907be		28		plp		                PLP
.3907bf		68		pla		                PLA             ; end setdbr macro
.3907c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3907c2		c2 10		rep #$10	                REP #$10        ; set X long
.3907c4		48		pha		                PHA                 ; Save the character to print
.3907c5		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c9		f0 16		beq $3907e1	                BEQ putc_screen     ; If it's 0: print to the screen
.3907cb		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907cd		f0 07		beq $3907d6	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907cf		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907d1		f0 03		beq $3907d6	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907d3		68		pla		                PLA                 ; Otherwise, just exit
.3907d4		80 57		bra $39082d	                BRA done
.3907d6		22 32 5c 39	jsl $395c32	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907da		68		pla		                PLA                 ; Recover the character to send
.3907db		22 07 5d 39	jsl $395d07	                JSL UART_PUTC       ; Send the character
.3907df		80 4c		bra $39082d	                BRA done
.3907e1		68		pla		putc_screen     PLA                 ; Get the character to print
.3907e2		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907e4		f0 69		beq $39084f	                BEQ go_down
.3907e6		c9 20		cmp #$20	                CMP #$20
.3907e8		90 19		bcc $390803	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907ea		c9 7f		cmp #$7f	                CMP #$7F
.3907ec		f0 45		beq $390833	                BEQ do_del
.3907ee		b0 02		bcs $3907f2	                BCS check_A0        ; [$20..$7E]: print it
.3907f0		80 31		bra $390823	                BRA printc
.3907f2		c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907f4		90 02		bcc $3907f8	                BCC check_ctrl1
.3907f6		80 2b		bra $390823	                BRA printc          ; [$A0..$FF]: print it
.3907f8		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907fa		f0 53		beq $39084f	                BEQ go_down         ; ... move the cursor down one row
.3907fc		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907fe		f0 61		beq $390861	                BEQ go_left         ; ... move the cursor left one column
.390800		4c 2d 08	jmp $39082d	                JMP done
.390803		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.390805		f0 69		beq $390870	                BEQ do_TAB          ; ... move to the next TAB stop
.390807		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390809		f0 34		beq $39083f	                BEQ backspace       ; ... move the cursor back and replace with a space
.39080b		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.39080d		f0 3a		beq $390849	                BEQ do_cr           ; ... move cursor down and to the first column
.39080f		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390811		f0 42		beq $390855	                BEQ go_up           ; ... move the cursor up one row
.390813		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.390815		f0 44		beq $39085b	                BEQ go_right        ; ... move the cursor right one column
.390817		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390819		f0 1e		beq $390839	                BEQ do_ins          ; ... insert a space
.39081b		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.39081d		f0 48		beq $390867	                BEQ go_sol          ; ... move the cursor to the start of the line
.39081f		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390821		f0 74		beq $390897	                BEQ go_eol          ; ... move the cursor to the end of the line
.390823		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390825		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390827		87 1f		sta [$1f]	                STA [COLORPOS]
.390829		22 b6 09 39	jsl $3909b6	                JSL ICSRRIGHT       ; And advance the cursor
.39082d		28		plp		done            PLP
.39082e		ab		plb		                PLB
.39082f		2b		pld		                PLD
.390830		7a		ply		                PLY
.390831		fa		plx		                PLX
.390832		6b		rtl		                RTL
.390833		22 c4 08 39	jsl $3908c4	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390837		80 f4		bra $39082d	                BRA done
.390839		22 03 09 39	jsl $390903	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39083d		80 ee		bra $39082d	                BRA done
.39083f		22 e9 09 39	jsl $3909e9	backspace       JSL ICSRLEFT
.390843		22 c4 08 39	jsl $3908c4	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390847		80 e4		bra $39082d	                BRA done
.390849		22 56 09 39	jsl $390956	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39084d		80 de		bra $39082d	                BRA done
.39084f		22 35 0a 39	jsl $390a35	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390853		80 d8		bra $39082d	                BRA done
.390855		22 0f 0a 39	jsl $390a0f	go_up           JSL ICSRUP          ; Move the cursor up one line
.390859		80 d2		bra $39082d	                BRA done
.39085b		22 b6 09 39	jsl $3909b6	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39085f		80 cc		bra $39082d	                BRA done
.390861		22 e9 09 39	jsl $3909e9	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390865		80 c6		bra $39082d	                BRA done
.390867						go_sol
.390867		c2 20		rep #$20	                REP #$20        ; set A long
.390869		a2 00 00	ldx #$0000	                LDX #0
.39086c		a4 1c		ldy $1c		                LDY CURSORY
.39086e		80 21		bra $390891	                BRA do_locate
.390870						do_TAB
.390870		c2 20		rep #$20	                REP #$20        ; set A long
.390872		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390874		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390877		18		clc		                CLC
.390878		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39087b		aa		tax		                TAX
.39087c		a4 1c		ldy $1c		                LDY CURSORY
.39087e		e2 20		sep #$20	                SEP #$20        ; set A short
.390880		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390882		90 04		bcc $390888	                BCC check_row       ; Yes: check the row
.390884		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390887		c8		iny		                INY                 ; ... and the next row
.390888		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39088a		90 05		bcc $390891	                BCC do_locate       ; Yes: reposition the cursor
.39088c		22 a6 0a 39	jsl $390aa6	                JSL ISCROLLUP       ; No: scroll the screen
.390890		88		dey		                DEY                 ; And set the row to the last one
.390891		22 5a 0a 39	jsl $390a5a	do_locate       JSL ILOCATE         ; Set the cursor position
.390895		80 96		bra $39082d	                BRA done
.390897		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390899		ca		dex		                DEX
.39089a		a4 1c		ldy $1c		                LDY CURSORY
.39089c		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.3908a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3908a2		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.3908a4		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.3908a6		d0 0b		bne $3908b3	                BNE eol_done        ; No: exit the loop
.3908a8		22 e9 09 39	jsl $3909e9	                JSL ICSRLEFT        ; Yes: move to the left
.3908ac		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908ae		d0 f2		bne $3908a2	                BNE eol_loop        ; No: try again
.3908b0		82 7a ff	brl $39082d	                BRL done            ; Yes: we're done
.3908b3		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908b5		e8		inx		                INX
.3908b6		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908b8		d0 03		bne $3908bd	                BNE eol_right
.3908ba		82 70 ff	brl $39082d	                BRL done            ; Yes: we're done
.3908bd		22 b6 09 39	jsl $3909b6	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908c1		82 69 ff	brl $39082d	                BRL done
.3908c4						SCRSHIFTLL
.3908c4		48		pha		                PHA
.3908c5		da		phx		                PHX
.3908c6		5a		phy		                PHY
.3908c7		0b		phd		                PHD
.3908c8		08		php		                PHP
.3908c9		48		pha		                PHA             ; begin setdp macro
.3908ca		08		php		                PHP
.3908cb		c2 20		rep #$20	                REP #$20        ; set A long
.3908cd		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908d0		5b		tcd		                TCD
.3908d1		28		plp		                PLP
.3908d2		68		pla		                PLA             ; end setdp macro
.3908d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d5		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908d7		a8		tay		                TAY                 ; Set it as the destination
.3908d8		aa		tax		                TAX
.3908d9		e8		inx		                INX                 ; And set the next cell as the source
.3908da		18		clc		                CLC                 ; Calculate the length of the block to move
.3908db		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908dd		e5 1a		sbc $1a		                SBC CURSORX
.3908df		e2 20		sep #$20	                SEP #$20        ; set A short
.3908e1		85 00		sta $00		                STA TMPPTR1         ; Save the count in TMPPTR1
.3908e3		8b		phb		                PHB
.3908e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3908e6		a9 af		lda #$af	                LDA #$AF            ; Set the databank to $AF
.3908e8		48		pha		                PHA
.3908e9		ab		plb		                PLB
.3908ea		a5 00		lda $00		loop            LDA TMPPTR1
.3908ec		c9 00		cmp #$00	                CMP #0              ; Check if the count is 0
.3908ee		f0 0c		beq $3908fc	                BEQ stop_loop       ; If so, we're done
.3908f0		bd 00 00	lda $0000,x	                LDA #0,B,X          ; Get the byte to copy
.3908f3		99 00 00	sta $0000,y	                STA #0,B,Y          ; And copy it
.3908f6		c6 00		dec $00		                DEC TMPPTR1         ; Decrement the count
.3908f8		e8		inx		                INX                 ; Move to the next source byte
.3908f9		c8		iny		                INY                 ; Move to the next destination byte
.3908fa		80 ee		bra $3908ea	                BRA loop            ; And repeat
.3908fc		ab		plb		stop_loop       PLB
.3908fd		28		plp		                PLP
.3908fe		2b		pld		                PLD
.3908ff		7a		ply		                PLY
.390900		fa		plx		                PLX
.390901		68		pla		                PLA
.390902		6b		rtl		                RTL
.390903						SCRSHIFTLR
.390903		48		pha		                PHA
.390904		da		phx		                PHX
.390905		5a		phy		                PHY
.390906		0b		phd		                PHD
.390907		08		php		                PHP
.390908		48		pha		                PHA             ; begin setdp macro
.390909		08		php		                PHP
.39090a		c2 20		rep #$20	                REP #$20        ; set A long
.39090c		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39090f		5b		tcd		                TCD
.390910		28		plp		                PLP
.390911		68		pla		                PLA             ; end setdp macro
.390912		c2 30		rep #$30	                REP #$30        ; set A&X long
.390914		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.390916		1a		inc a		                INC A
.390917		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.390919		b0 34		bcs $39094f	                BGE done            ; Yes: just skip the whole thing
.39091b		38		sec		                SEC                 ; Calculate the length of the block to move
.39091c		a5 0f		lda $0f		                LDA COLS_VISIBLE
.39091e		e5 1a		sbc $1a		                SBC CURSORX
.390920		1a		inc a		                INC A
.390921		18		clc		                CLC
.390922		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.390924		3a		dec a		                DEC A
.390925		a8		tay		                TAY                 ; Make it the destination
.390926		3a		dec a		                DEC A               ; Move to the previous column
.390927		aa		tax		                TAX                 ; Make it the source
.390928		38		sec		                SEC                 ; Calculate the length of the block to move
.390929		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39092b		e5 1a		sbc $1a		                SBC CURSORX
.39092d		e2 20		sep #$20	                SEP #$20        ; set A short
.39092f		85 00		sta $00		                STA TMPPTR1         ; Save the count in TMPPTR1
.390931		8b		phb		                PHB
.390932		e2 20		sep #$20	                SEP #$20        ; set A short
.390934		a9 af		lda #$af	                LDA #$AF            ; Set the databank to $AF
.390936		48		pha		                PHA
.390937		ab		plb		                PLB
.390938		a5 00		lda $00		loop            LDA TMPPTR1
.39093a		c9 00		cmp #$00	                CMP #0              ; Check if the count is 0
.39093c		f0 0c		beq $39094a	                BEQ stop_loop       ; If so, we're done
.39093e		bd 00 00	lda $0000,x	                LDA #0,B,X          ; Get the byte to copy
.390941		99 00 00	sta $0000,y	                STA #0,B,Y          ; And copy it
.390944		c6 00		dec $00		                DEC TMPPTR1         ; Decrement the count
.390946		ca		dex		                DEX                 ; Move to the next source byte
.390947		88		dey		                DEY                 ; Move to the next destination byte
.390948		80 ee		bra $390938	                BRA loop            ; And repeat
.39094a		ab		plb		stop_loop       PLB
.39094b		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39094d		87 17		sta [$17]	                STA [CURSORPOS]
.39094f		28		plp		done            PLP
.390950		2b		pld		                PLD
.390951		7a		ply		                PLY
.390952		fa		plx		                PLX
.390953		68		pla		                PLA
.390954		6b		rtl		                RTL
.390955						IPUTB
.390955		6b		rtl		                RTL
.390956						IPRINTCR
.390956		da		phx		                PHX
.390957		5a		phy		                PHY
.390958		8b		phb		                PHB
.390959		0b		phd		                PHD
.39095a		08		php		                PHP
.39095b		48		pha		                PHA             ; begin setdbr macro
.39095c		08		php		                PHP
.39095d		e2 20		sep #$20	                SEP #$20        ; set A short
.39095f		a9 00		lda #$00	                LDA #0
.390961		48		pha		                PHA
.390962		ab		plb		                PLB
.390963		28		plp		                PLP
.390964		68		pla		                PLA             ; end setdbr macro
.390965		48		pha		                PHA             ; begin setdp macro
.390966		08		php		                PHP
.390967		c2 20		rep #$20	                REP #$20        ; set A long
.390969		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39096c		5b		tcd		                TCD
.39096d		28		plp		                PLP
.39096e		68		pla		                PLA             ; end setdp macro
.39096f		e2 20		sep #$20	                SEP #$20        ; set A short
.390971		c2 10		rep #$10	                REP #$10        ; set X long
.390973		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390977		f0 1c		beq $390995	                BEQ scr_printcr
.390979		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39097b		f0 06		beq $390983	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39097d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39097f		f0 02		beq $390983	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390981		80 1c		bra $39099f	                BRA done
.390983		22 32 5c 39	jsl $395c32	uart_printcr    JSL UART_SELECT
.390987		a9 0d		lda #$0d	                LDA #CHAR_CR
.390989		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.39098d		a9 0a		lda #$0a	                LDA #CHAR_LF
.39098f		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.390993		80 0a		bra $39099f	                BRA done
.390995		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390998		a4 1c		ldy $1c		                LDY CURSORY
.39099a		c8		iny		                INY
.39099b		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.39099f		28		plp		done            PLP
.3909a0		2b		pld		                PLD
.3909a1		ab		plb		                PLB
.3909a2		7a		ply		                PLY
.3909a3		fa		plx		                PLX
.3909a4		6b		rtl		                RTL
.3909a5		da		phx		ICSRHOME        PHX
.3909a6		5a		phy		                PHY
.3909a7		08		php		                PHP
.3909a8		a2 00 00	ldx #$0000	                LDX #0
.3909ab		a0 00 00	ldy #$0000	                LDY #0
.3909ae		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.3909b2		28		plp		                PLP
.3909b3		7a		ply		                PLY
.3909b4		fa		plx		                PLX
.3909b5		6b		rtl		                RTL
.3909b6		da		phx		ICSRRIGHT       PHX
.3909b7		5a		phy		                PHY
.3909b8		48		pha		                PHA
.3909b9		0b		phd		                PHD
.3909ba		08		php		                PHP
.3909bb		c2 20		rep #$20	                REP #$20        ; set A long
.3909bd		c2 10		rep #$10	                REP #$10        ; set X long
.3909bf		48		pha		                PHA             ; begin setdp macro
.3909c0		08		php		                PHP
.3909c1		c2 20		rep #$20	                REP #$20        ; set A long
.3909c3		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909c6		5b		tcd		                TCD
.3909c7		28		plp		                PLP
.3909c8		68		pla		                PLA             ; end setdp macro
.3909c9		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3909cb		e8		inx		                INX
.3909cc		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3909ce		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3909d0		90 0d		bcc $3909df	                BCC icsrright_nowrap  ; No: just set the position
.3909d2		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3909d5		c8		iny		                INY                   ; And move to the next row
.3909d6		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3909d8		90 05		bcc $3909df	                BCC icsrright_nowrap  ; No: just set the position
.3909da		88		dey		                DEY                   ; Yes: lock to the last row
.3909db		22 a6 0a 39	jsl $390aa6	                JSL ISCROLLUP         ; But scroll the screen up
.3909df						icsrright_nowrap
.3909df		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE           ; Set the cursor position
.3909e3		28		plp		                PLP
.3909e4		2b		pld		                PLD
.3909e5		68		pla		                PLA
.3909e6		7a		ply		                PLY
.3909e7		fa		plx		                PLX
.3909e8		6b		rtl		                RTL
.3909e9						ICSRLEFT
.3909e9		da		phx		                PHX
.3909ea		5a		phy		                PHY
.3909eb		48		pha		                PHA
.3909ec		0b		phd		                PHD
.3909ed		08		php		                PHP
.3909ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909f0		48		pha		                PHA             ; begin setdp macro
.3909f1		08		php		                PHP
.3909f2		c2 20		rep #$20	                REP #$20        ; set A long
.3909f4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909f7		5b		tcd		                TCD
.3909f8		28		plp		                PLP
.3909f9		68		pla		                PLA             ; end setdp macro
.3909fa		a5 1a		lda $1a		                LDA CURSORX
.3909fc		f0 0b		beq $390a09	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909fe		a6 1a		ldx $1a		                LDX CURSORX
.390a00		ca		dex		                DEX
.390a01		86 1a		stx $1a		                STX CURSORX
.390a03		a4 1c		ldy $1c		                LDY CURSORY
.390a05		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.390a09						icsrleft_done_already_zero
.390a09		28		plp		                PLP
.390a0a		2b		pld		                PLD
.390a0b		68		pla		                PLA
.390a0c		7a		ply		                PLY
.390a0d		fa		plx		                PLX
.390a0e		6b		rtl		                RTL
.390a0f						ICSRUP
.390a0f		da		phx		                PHX
.390a10		5a		phy		                PHY
.390a11		48		pha		                PHA
.390a12		0b		phd		                PHD
.390a13		08		php		                PHP
.390a14		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a16		48		pha		                PHA             ; begin setdp macro
.390a17		08		php		                PHP
.390a18		c2 20		rep #$20	                REP #$20        ; set A long
.390a1a		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a1d		5b		tcd		                TCD
.390a1e		28		plp		                PLP
.390a1f		68		pla		                PLA             ; end setdp macro
.390a20		a5 1c		lda $1c		                LDA CURSORY
.390a22		f0 0b		beq $390a2f	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390a24		a4 1c		ldy $1c		                LDY CURSORY
.390a26		88		dey		                DEY
.390a27		84 1c		sty $1c		                STY CURSORY
.390a29		a6 1a		ldx $1a		                LDX CURSORX
.390a2b		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE
.390a2f						isrup_done_already_zero
.390a2f		28		plp		                PLP
.390a30		2b		pld		                PLD
.390a31		68		pla		                PLA
.390a32		7a		ply		                PLY
.390a33		fa		plx		                PLX
.390a34		6b		rtl		                RTL
.390a35		da		phx		ICSRDOWN        PHX
.390a36		5a		phy		                PHY
.390a37		0b		phd		                PHD
.390a38		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a3a		48		pha		                PHA             ; begin setdp macro
.390a3b		08		php		                PHP
.390a3c		c2 20		rep #$20	                REP #$20        ; set A long
.390a3e		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a41		5b		tcd		                TCD
.390a42		28		plp		                PLP
.390a43		68		pla		                PLA             ; end setdp macro
.390a44		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a46		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a48		c8		iny		                INY
.390a49		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a4b		90 05		bcc $390a52	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a4d		88		dey		                DEY                         ; Yes: go back to the last row
.390a4e		22 a6 0a 39	jsl $390aa6	                JSL ISCROLLUP               ; But scroll the screen up
.390a52						icsrdown_noscroll
.390a52		22 5a 0a 39	jsl $390a5a	                JSL ILOCATE                 ; And set the cursor position
.390a56		2b		pld		                PLD
.390a57		7a		ply		                PLY
.390a58		fa		plx		                PLX
.390a59		6b		rtl		                RTL
.390a5a		48		pha		ILOCATE         PHA
.390a5b		0b		phd		                PHD
.390a5c		08		php		                PHP
.390a5d		48		pha		                PHA             ; begin setdp macro
.390a5e		08		php		                PHP
.390a5f		c2 20		rep #$20	                REP #$20        ; set A long
.390a61		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a64		5b		tcd		                TCD
.390a65		28		plp		                PLP
.390a66		68		pla		                PLA             ; end setdp macro
.390a67		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a69						ilocate_scroll
.390a69		c4 13		cpy $13		                CPY LINES_VISIBLE
.390a6b		90 07		bcc $390a74	                BCC ilocate_scrolldone
.390a6d		22 a6 0a 39	jsl $390aa6	                JSL ISCROLLUP
.390a71		88		dey		                DEY
.390a72		80 f5		bra $390a69	                BRA ilocate_scroll
.390a74						ilocate_scrolldone
.390a74		86 1a		stx $1a		                STX CURSORX
.390a76		84 1c		sty $1c		                STY CURSORY
.390a78		a5 0c		lda $0c		                LDA SCREENBEGIN
.390a7a						ilocate_row
.390a7a		c0 00 00	cpy #$0000	                CPY #$0
.390a7d		f0 08		beq $390a87	                BEQ ilocate_right
.390a7f		18		clc		ilocate_down    CLC
.390a80		65 11		adc $11		                ADC COLS_PER_LINE
.390a82		88		dey		                DEY
.390a83		f0 02		beq $390a87	                BEQ ilocate_right
.390a85		80 f8		bra $390a7f	                BRA ilocate_down
.390a87		18		clc		ilocate_right   CLC
.390a88		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a8a		85 17		sta $17		                STA CURSORPOS
.390a8c		a4 1c		ldy $1c		                LDY CURSORY
.390a8e		98		tya		                TYA
.390a8f		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a93		8a		txa		                TXA
.390a94		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a98		c2 20		rep #$20	                REP #$20        ; set A long
.390a9a		18		clc		                CLC
.390a9b		a5 17		lda $17		                LDA CURSORPOS
.390a9d		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390aa0		85 1f		sta $1f		                STA COLORPOS
.390aa2		28		plp		ilocate_done    PLP
.390aa3		2b		pld		                PLD
.390aa4		68		pla		                PLA
.390aa5		6b		rtl		                RTL
.390aa6						ISCROLLUP
.390aa6		48		pha		                PHA
.390aa7		da		phx		                PHX
.390aa8		5a		phy		                PHY
.390aa9		8b		phb		                PHB
.390aaa		0b		phd		                PHD
.390aab		08		php		                PHP
.390aac		48		pha		                PHA             ; begin setdp macro
.390aad		08		php		                PHP
.390aae		c2 20		rep #$20	                REP #$20        ; set A long
.390ab0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390ab3		5b		tcd		                TCD
.390ab4		28		plp		                PLP
.390ab5		68		pla		                PLA             ; end setdp macro
.390ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ab8		a5 11		lda $11		                LDA COLS_PER_LINE
.390aba		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390abe		a5 13		lda $13		                LDA LINES_VISIBLE
.390ac0		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390ac4		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390ac8		85 00		sta $00		                STA TMPPTR1
.390aca		18		clc		                CLC
.390acb		a9 00 a0	lda #$a000	                LDA #$A000
.390ace		a8		tay		                TAY
.390acf		65 11		adc $11		                ADC COLS_PER_LINE
.390ad1		aa		tax		                TAX
.390ad2		a5 00		lda $00		                LDA TMPPTR1
.390ad4		54 af af	mvn $af,$af	                MVN $AF,$AF
.390ad7		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ad9		18		clc		                CLC
.390ada		a9 00 c0	lda #$c000	                LDA #$C000
.390add		a8		tay		                TAY
.390ade		65 11		adc $11		                ADC COLS_PER_LINE
.390ae0		aa		tax		                TAX
.390ae1		a5 00		lda $00		                LDA TMPPTR1
.390ae3		54 af af	mvn $af,$af	                MVN $AF,$AF
.390ae6		a5 00		lda $00		                LDA TMPPTR1
.390ae8		48		pha		                PHA
.390ae9		18		clc		                CLC
.390aea		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aed		85 00		sta $00		                STA TMPPTR1
.390aef		a0 00 00	ldy #$0000	                LDY #0
.390af2		a9 20 00	lda #$0020	                LDA #' '
.390af5		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390af7		c8		iny		                INY
.390af8		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390afa		d0 f9		bne $390af5	                BNE clr_text
.390afc		68		pla		                PLA
.390afd		18		clc		                CLC
.390afe		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390b01		85 00		sta $00		                STA TMPPTR1
.390b03		a0 00 00	ldy #$0000	                LDY #0
.390b06		a5 1e		lda $1e		                LDA CURCOLOR
.390b08		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390b0a		c8		iny		                INY
.390b0b		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390b0d		d0 f9		bne $390b08	                BNE clr_color
.390b0f		28		plp		                PLP
.390b10		2b		pld		                PLD
.390b11		ab		plb		                PLB
.390b12		7a		ply		                PLY
.390b13		fa		plx		                PLX
.390b14		68		pla		                PLA
.390b15		6b		rtl		                RTL
.390b16		08		php		IPRINTH         PHP
.390b17		48		pha		                PHA
.390b18						iprinth1
.390b18		e2 20		sep #$20	                SEP #$20        ; set A short
.390b1a		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390b1d		4a		lsr a		                LSR
.390b1e		4a		lsr a		                LSR
.390b1f		4a		lsr a		                LSR
.390b20		4a		lsr a		                LSR
.390b21		22 70 0b 39	jsl $390b70	                JSL iprint_digit
.390b25		bd 00 00	lda $0000,x	                LDA #0,b,x
.390b28		22 70 0b 39	jsl $390b70	                JSL iprint_digit
.390b2c		ca		dex		                DEX
.390b2d		88		dey		                DEY
.390b2e		d0 e8		bne $390b18	                BNE iprinth1
.390b30		68		pla		                PLA
.390b31		28		plp		                PLP
.390b32		6b		rtl		                RTL
.390b33						IPRINTAH
.390b33		48		pha		                PHA
.390b34		08		php		                PHP
.390b35		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390b39		08		php		                PHP                   ; Get the processor status into A
.390b3a		e2 20		sep #$20	                SEP #$20        ; set A short
.390b3c		c2 10		rep #$10	                REP #$10        ; set X long
.390b3e		68		pla		                PLA
.390b3f		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b41		c9 20		cmp #$20	                CMP #%00100000
.390b43		f0 14		beq $390b59	                BEQ eight_bit
.390b45		af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b49		4a		lsr a		                LSR A
.390b4a		4a		lsr a		                LSR A
.390b4b		4a		lsr a		                LSR A
.390b4c		4a		lsr a		                LSR A
.390b4d		22 70 0b 39	jsl $390b70	                JSL iprint_digit      ; And print it
.390b51		af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b55		22 70 0b 39	jsl $390b70	                JSL iprint_digit      ; And print it
.390b59		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b5d		4a		lsr a		                LSR A
.390b5e		4a		lsr a		                LSR A
.390b5f		4a		lsr a		                LSR A
.390b60		4a		lsr a		                LSR A
.390b61		22 70 0b 39	jsl $390b70	                JSL iprint_digit      ; And print it
.390b65		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b69		22 70 0b 39	jsl $390b70	                JSL iprint_digit      ; And print it
.390b6d		28		plp		                PLP
.390b6e		68		pla		                PLA
.390b6f		6b		rtl		                RTL
.390b70		da		phx		iprint_digit    PHX
.390b71		c2 20		rep #$20	                REP #$20        ; set A long
.390b73		29 0f 00	and #$000f	                AND #$0F
.390b76		aa		tax		                TAX
.390b77		bf e1 72 39	lda $3972e1,x	                LDA hex_digits,X
.390b7b		22 a7 07 39	jsl $3907a7	                JSL IPUTC       ; Print the digit
.390b7f		fa		plx		                PLX
.390b80		6b		rtl		                RTL
.390b81		48		pha		ICLRSCREEN	    PHA
.390b82		da		phx		                PHX
.390b83		08		php		                PHP
.390b84		e2 20		sep #$20	                SEP #$20        ; set A short
.390b86		c2 10		rep #$10	                REP #$10        ; set X long
.390b88		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b8b		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b8d		9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b91		e8		inx		                inx
.390b92		e0 00 20	cpx #$2000	                cpx #$2000
.390b95		d0 f6		bne $390b8d	                bne iclearloop0
.390b97		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b9a		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b9e		9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390ba2		e8		inx		                inx
.390ba3		e0 00 20	cpx #$2000	                cpx #$2000
.390ba6		d0 f6		bne $390b9e	                bne iclearloop1
.390ba8		28		plp		                PLP
.390ba9		fa		plx		                PLX
.390baa		68		pla		                PLA
.390bab		6b		rtl		                RTL
.390bac						COPYBYTES42
.390bac		08		php		                PHP
.390bad		0b		phd		                PHD
.390bae		48		pha		                PHA             ; begin setdp macro
.390baf		08		php		                PHP
.390bb0		c2 20		rep #$20	                REP #$20        ; set A long
.390bb2		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390bb5		5b		tcd		                TCD
.390bb6		28		plp		                PLP
.390bb7		68		pla		                PLA             ; end setdp macro
.390bb8		e2 20		sep #$20	                SEP #$20        ; set A short
.390bba		c2 10		rep #$10	                REP #$10        ; set X long
.390bbc		a0 00 00	ldy #$0000	                LDY #0
.390bbf		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390bc1		97 04		sta [$04],y	                STA [TMPPTR2],Y
.390bc3		c8		iny		                INY
.390bc4		c0 2a 00	cpy #$002a	                CPY #42
.390bc7		d0 f6		bne $390bbf	                BNE copy_loop
.390bc9		2b		pld		                PLD
.390bca		28		plp		                PLP
.390bcb		60		rts		                RTS
.390bcc						ICOLORFLAG
.390bcc		48		pha		                PHA
.390bcd		da		phx		                PHX
.390bce		5a		phy		                PHY
.390bcf		08		php		                PHP
.390bd0		8b		phb		                PHB
.390bd1		0b		phd		                PHD
.390bd2		48		pha		                PHA             ; begin setdp macro
.390bd3		08		php		                PHP
.390bd4		c2 20		rep #$20	                REP #$20        ; set A long
.390bd6		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390bd9		5b		tcd		                TCD
.390bda		28		plp		                PLP
.390bdb		68		pla		                PLA             ; end setdp macro
.390bdc		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bde		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390be1		85 04		sta $04		                STA TMPPTR2
.390be3		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390be6		85 06		sta $06		                STA TMPPTR2+2
.390be8		a9 b8 6f	lda #$6fb8	                LDA #<>greet_clr_line1
.390beb		85 00		sta $00		                STA TMPPTR1
.390bed		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390bf0		85 02		sta $02		                STA TMPPTR1+2
.390bf2		20 ac 0b	jsr $390bac	                JSR COPYBYTES42
.390bf5		18		clc		                CLC
.390bf6		a5 04		lda $04		                LDA TMPPTR2
.390bf8		65 11		adc $11		                ADC COLS_PER_LINE
.390bfa		85 04		sta $04		                STA TMPPTR2
.390bfc		a9 e2 6f	lda #$6fe2	                LDA #<>greet_clr_line2
.390bff		85 00		sta $00		                STA TMPPTR1
.390c01		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390c04		85 02		sta $02		                STA TMPPTR1+2
.390c06		20 ac 0b	jsr $390bac	                JSR COPYBYTES42
.390c09		18		clc		                CLC
.390c0a		a5 04		lda $04		                LDA TMPPTR2
.390c0c		65 11		adc $11		                ADC COLS_PER_LINE
.390c0e		85 04		sta $04		                STA TMPPTR2
.390c10		a9 0c 70	lda #$700c	                LDA #<>greet_clr_line3
.390c13		85 00		sta $00		                STA TMPPTR1
.390c15		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390c18		85 02		sta $02		                STA TMPPTR1+2
.390c1a		20 ac 0b	jsr $390bac	                JSR COPYBYTES42
.390c1d		18		clc		                CLC
.390c1e		a5 04		lda $04		                LDA TMPPTR2
.390c20		65 11		adc $11		                ADC COLS_PER_LINE
.390c22		85 04		sta $04		                STA TMPPTR2
.390c24		a9 36 70	lda #$7036	                LDA #<>greet_clr_line4
.390c27		85 00		sta $00		                STA TMPPTR1
.390c29		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390c2c		85 02		sta $02		                STA TMPPTR1+2
.390c2e		20 ac 0b	jsr $390bac	                JSR COPYBYTES42
.390c31		18		clc		                CLC
.390c32		a5 04		lda $04		                LDA TMPPTR2
.390c34		65 11		adc $11		                ADC COLS_PER_LINE
.390c36		85 04		sta $04		                STA TMPPTR2
.390c38		a9 60 70	lda #$7060	                LDA #<>greet_clr_line5
.390c3b		85 00		sta $00		                STA TMPPTR1
.390c3d		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390c40		85 02		sta $02		                STA TMPPTR1+2
.390c42		20 ac 0b	jsr $390bac	                JSR COPYBYTES42
.390c45		2b		pld		                PLD
.390c46		ab		plb		                PLB
.390c47		28		plp		                PLP
.390c48		7a		ply		                PLY
.390c49		fa		plx		                PLX
.390c4a		68		pla		                PLA
.390c4b		6b		rtl		                RTL
.390c4c		0b		phd		IINITCHLUT		  PHD
.390c4d		08		php		                PHP
.390c4e		48		pha		                PHA
.390c4f		da		phx		                PHX
.390c50		e2 20		sep #$20	                SEP #$20        ; set A short
.390c52		e2 10		sep #$10	                SEP #$10        ; set X short
.390c54		a2 00		ldx #$00					        LDX	#$00
.390c56		bf 8a 70 39	lda $39708a,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c5a		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c5e		e8		inx		                inx
.390c5f		e0 40		cpx #$40	                cpx #$40
.390c61		d0 f3		bne $390c56	                bne lutinitloop0
.390c63		a2 00		ldx #$00	                LDX	#$00
.390c65		bf ca 70 39	lda $3970ca,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c69		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c6d		e8		inx		                INX
.390c6e		e0 40		cpx #$40	                CPX #$40
.390c70		d0 f3		bne $390c65	                bne lutinitloop1
.390c72		c2 20		rep #$20	                REP #$20        ; set A long
.390c74		c2 10		rep #$10	                REP #$10        ; set X long
.390c76		fa		plx		                PLX
.390c77		68		pla		                PLA
.390c78		28		plp		                PLP
.390c79		2b		pld		                PLD
.390c7a		6b		rtl		                RTL
.390c7b						IINITGAMMATABLE
.390c7b		e2 20		sep #$20	                SEP #$20        ; set A short
.390c7d		c2 10		rep #$10	                REP #$10        ; set X long
.390c7f		a2 00 00	ldx #$0000	                ldx #$0000
.390c82		bf 00 77 39	lda $397700,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c86		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c8a		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c8e		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c92		e8		inx		                inx
.390c93		e0 00 01	cpx #$0100	                cpx #$0100
.390c96		d0 ea		bne $390c82	                bne initgammaloop
.390c98		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c9a		6b		rtl		                RTL
.390c9b		48		pha		IINITALLLUT     PHA
.390c9c		da		phx		                PHX
.390c9d		a2 00 00	ldx #$0000	                LDX #$0000
.390ca0		e2 20		sep #$20	                SEP #$20        ; set A short
.390ca2		a9 00		lda #$00	                LDA #$00
.390ca4		85 0a		sta $0a		                STA $0A     ; Temp Location
.390ca6						iinit_lut_loop
.390ca6		86 02		stx $02		                STX $02
.390ca8		a6 0a		ldx $0a		                LDX $0A
.390caa		bf 00 76 39	lda $397600,x	                LDA GAMMA_2_2_Tbl, x
.390cae		49 55		eor #$55	                EOR  #$55
.390cb0		a6 02		ldx $02		                LDX $02
.390cb2		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cb6		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cba		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cbe		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cc2		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cc6		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cca		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cce		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cd2		e8		inx		                inx
.390cd3		86 02		stx $02		                STX $02
.390cd5		a6 0a		ldx $0a		                LDX $0A
.390cd7		bf 00 78 39	lda $397800,x	                LDA RANDOM_LUT_Tbl, x
.390cdb		a6 02		ldx $02		                LDX $02
.390cdd		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ce1		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ce5		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ce9		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ced		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cf1		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cf5		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cf9		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cfd		e8		inx		                inx
.390cfe		86 02		stx $02		                STX $02
.390d00		a6 0a		ldx $0a		                LDX $0A
.390d02		bf 00 77 39	lda $397700,x	                LDA GAMMA_1_8_Tbl, x
.390d06		49 aa		eor #$aa	                EOR  #$AA
.390d08		a6 02		ldx $02		                LDX $02
.390d0a		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390d0e		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390d12		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390d16		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390d1a		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d1e		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d22		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d26		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d2a		e8		inx		                inx
.390d2b		a9 ff		lda #$ff	                LDA #$FF
.390d2d		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390d31		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390d35		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390d39		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390d3d		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d41		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d45		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d49		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d4d		e6 0a		inc $0a		                inc $0A
.390d4f		e8		inx		                inx
.390d50		e0 00 04	cpx #$0400	                cpx #$0400
.390d53		f0 03		beq $390d58	                beq iinit_lut_exit
.390d55		82 4e ff	brl $390ca6	                brl iinit_lut_loop
.390d58						iinit_lut_exit
.390d58		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d5a		fa		plx		                PLX
.390d5b		68		pla		                PLA
.390d5c		6b		rtl		                RTL
.390d5d		48		pha		IINITVKYTXTMODE PHA
.390d5e		08		php		                PHP
.390d5f		e2 20		sep #$20	                SEP #$20        ; set A short
.390d61		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d65		29 01		and #$01	                AND #$01
.390d67		c9 01		cmp #$01	                CMP #$01
.390d69		d0 15		bne $390d80	                BNE INITVICKYMODE
.390d6b		a9 00		lda #$00	                LDA #$00
.390d6d		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d71		ea		nop		                NOP
.390d72		ea		nop		                NOP
.390d73		ea		nop		                NOP
.390d74		ea		nop		                NOP
.390d75		ea		nop		                NOP
.390d76		a9 01		lda #$01	                LDA #$01
.390d78		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d7c		ea		nop		                NOP
.390d7d		ea		nop		                NOP
.390d7e		ea		nop		                NOP
.390d7f		ea		nop		                NOP
.390d80						INITVICKYMODE
.390d80		a9 00		lda #$00	                LDA #$00
.390d82		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d86		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d88		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d8c		e2 20		sep #$20	                SEP #$20        ; set A short
.390d8e		a9 20		lda #$20	                LDA #$20
.390d90		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d94		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d98		a9 00		lda #$00	                LDA #$00
.390d9a		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d9e		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390da0		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390da4		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390da6		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390daa		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390dae		c2 30		rep #$30	                REP #$30        ; set A&X long
.390db0		22 b7 0d 39	jsl $390db7	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390db4		28		plp		                PLP
.390db5		68		pla		                PLA
.390db6		6b		rtl		                RTL
.390db7						ISETSIZES
.390db7		48		pha		                PHA
.390db8		da		phx		                PHX
.390db9		5a		phy		                PHY
.390dba		8b		phb		                PHB
.390dbb		0b		phd		                PHD
.390dbc		08		php		                PHP
.390dbd		48		pha		                PHA             ; begin setdp macro
.390dbe		08		php		                PHP
.390dbf		c2 20		rep #$20	                REP #$20        ; set A long
.390dc1		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390dc4		5b		tcd		                TCD
.390dc5		28		plp		                PLP
.390dc6		68		pla		                PLA             ; end setdp macro
.390dc7		48		pha		                PHA             ; begin setdbr macro
.390dc8		08		php		                PHP
.390dc9		e2 20		sep #$20	                SEP #$20        ; set A short
.390dcb		a9 00		lda #$00	                LDA #0
.390dcd		48		pha		                PHA
.390dce		ab		plb		                PLB
.390dcf		28		plp		                PLP
.390dd0		68		pla		                PLA             ; end setdbr macro
.390dd1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390dd3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390dd7		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390dd9		0a		asl a		                ASL A
.390dda		aa		tax		                TAX                         ; Index to the col/line count in X
.390ddb		c2 20		rep #$20	                REP #$20        ; set A long
.390ddd		bf 5a 0e 39	lda $390e5a,x	                LDA cols_by_res,X           ; Get the number of columns
.390de1		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390de3		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390de5		bf 62 0e 39	lda $390e62,x	                LDA lines_by_res,X          ; Get the number of lines
.390de9		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390deb		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390ded		e2 20		sep #$20	                SEP #$20        ; set A short
.390def		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390df3		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390df5		f0 5c		beq $390e53	                BEQ done                    ; No border... the sizes are correct now
.390df7		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390dfb		29 3f		and #$3f	                AND #$3F
.390dfd		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dff		d0 04		bne $390e05	                BNE frac_width
.390e01		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390e02		4a		lsr a		                LSR A
.390e03		80 03		bra $390e08	                BRA store_width
.390e05		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390e06		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390e07		1a		inc a		                INC A
.390e08		85 00		sta $00		store_width     STA TMPPTR1
.390e0a		64 01		stz $01		                STZ TMPPTR1+1
.390e0c		e2 20		sep #$20	                SEP #$20        ; set A short
.390e0e		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e12		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e14		f0 04		beq $390e1a	                BEQ adjust_width            ; No... just adjust the width of the screen
.390e16		c2 20		rep #$20	                REP #$20        ; set A long
.390e18		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e1a						adjust_width
.390e1a		c2 20		rep #$20	                REP #$20        ; set A long
.390e1c		38		sec		                SEC
.390e1d		a5 11		lda $11		                LDA COLS_PER_LINE
.390e1f		e5 00		sbc $00		                SBC TMPPTR1
.390e21		85 0f		sta $0f		                STA COLS_VISIBLE
.390e23		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390e27		29 3f 00	and #$003f	                AND #$3F
.390e2a		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390e2d		d0 04		bne $390e33	                BNE frac_height
.390e2f		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390e30		4a		lsr a		                LSR A
.390e31		80 03		bra $390e36	                BRA store_height
.390e33		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390e34		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390e35		1a		inc a		                INC A
.390e36		85 00		sta $00		store_height    STA TMPPTR1
.390e38		64 01		stz $01		                STZ TMPPTR1+1
.390e3a		e2 20		sep #$20	                SEP #$20        ; set A short
.390e3c		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e40		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e42		f0 04		beq $390e48	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e44		c2 20		rep #$20	                REP #$20        ; set A long
.390e46		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e48						adjust_height
.390e48		c2 20		rep #$20	                REP #$20        ; set A long
.390e4a		38		sec		                SEC
.390e4b		a5 15		lda $15		                LDA LINES_MAX
.390e4d		e5 00		sbc $00		                SBC TMPPTR1
.390e4f		85 13		sta $13		                STA LINES_VISIBLE
.390e51		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e53		28		plp		done            PLP
.390e54		2b		pld		                PLD
.390e55		ab		plb		                PLB
.390e56		7a		ply		                PLY
.390e57		fa		plx		                PLX
.390e58		68		pla		                PLA
.390e59		6b		rtl		                RTL
>390e5a		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e62		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e6a						IINITVKYGRPMODE
.390e6a		48		pha		                PHA
.390e6b		e2 20		sep #$20	                SEP #$20        ; set A short
.390e6d		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e6f		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e73		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e75		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e79		a9 c0		lda #$c0	                LDA #$C0
.390e7b		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e7f		a9 00		lda #$00	                LDA #$00
.390e81		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e85		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e87		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e8b		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e8d		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e91		a9 c0		lda #$c0	                LDA #$C0
.390e93		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e97		a9 00		lda #$00	                LDA #$00
.390e99		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e9d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e9f		68		pla		                PLA
.390ea0		6b		rtl		                RTL
.390ea1						IINITTILEMODE
.390ea1		6b		rtl		                RTL
.390ea2		48		pha		IINITSPRITE     PHA
.390ea3		e2 20		sep #$20	                SEP #$20        ; set A short
.390ea5		a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390ea7		8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390eab		8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390eaf		8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390eb3		8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390eb7		8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390ebb		8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390ebf		8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390ec3		8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390ec7		8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390ecb		8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390ecf		8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390ed3		8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390ed7		8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390edb		8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390edf		8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390ee3		8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390ee7		8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390eeb		a9 09		lda #$09	                LDA #$09
.390eed		8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390ef1		8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390ef5		8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390ef9		8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390efd		8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390f01		8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390f05		8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390f09		8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390f0d		8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390f11		8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390f15		8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390f19		8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390f1d		8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390f21		8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390f25		8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390f29		8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390f2d		8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390f31		a9 00		lda #$00	                LDA #$00
.390f33		8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390f37		a9 04		lda #$04	                LDA #$04
.390f39		8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390f3d		a9 08		lda #$08	                LDA #$08
.390f3f		8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390f43		a9 0c		lda #$0c	                LDA #$0C
.390f45		8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390f49		a9 10		lda #$10	                LDA #$10
.390f4b		8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390f4f		a9 14		lda #$14	                LDA #$14
.390f51		8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390f55		a9 18		lda #$18	                LDA #$18
.390f57		8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f5b		a9 1c		lda #$1c	                LDA #$1C
.390f5d		8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f61		a9 20		lda #$20	                LDA #$20
.390f63		8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f67		a9 24		lda #$24	                LDA #$24
.390f69		8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f6d		a9 28		lda #$28	                LDA #$28
.390f6f		8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f73		a9 2c		lda #$2c	                LDA #$2C
.390f75		8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f79		a9 30		lda #$30	                LDA #$30
.390f7b		8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f7f		a9 34		lda #$34	                LDA #$34
.390f81		8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f85		a9 38		lda #$38	                LDA #$38
.390f87		8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f8b		a9 3c		lda #$3c	                LDA #$3C
.390f8d		8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f91		a9 40		lda #$40	                LDA #$40
.390f93		8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f97		a9 00		lda #$00	                LDA #$00
.390f99		8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f9d		8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390fa1		8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390fa5		8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390fa9		8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390fad		8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390fb1		8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390fb5		8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390fb9		8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390fbd		8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390fc1		8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390fc5		8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390fc9		8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390fcd		8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390fd1		8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390fd5		8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390fd9		8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390fdd		68		pla		                PLA
.390fde		6b		rtl		                RTL
.390fdf						IINITFONTSET
.390fdf		48		pha		                PHA
.390fe0		da		phx		                PHX
.390fe1		5a		phy		                PHY
.390fe2		8b		phb		                PHB
.390fe3		08		php		                PHP
.390fe4		c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe6		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390fe9		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390fec		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390fef		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390ff2		28		plp		                PLP
.390ff3		ab		plb		                PLB
.390ff4		7a		ply		                PLY
.390ff5		fa		plx		                PLX
.390ff6		68		pla		                PLA
.390ff7		6b		rtl		                RTL
.390ff8						INITMOUSEPOINTER
.390ff8		e2 20		sep #$20	                SEP #$20        ; set A short
.390ffa		c2 10		rep #$10	                REP #$10        ; set X long
.390ffc		a2 00 00	ldx #$0000	                LDX #$0000
.390fff						FILL_MOUSE_MARKER
.390fff		bf 00 79 39	lda $397900,x	                LDA @lMOUSE_POINTER_PTR,X
.391003		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.391007		e8		inx		                INX
.391008		e0 00 01	cpx #$0100	                CPX #$0100
.39100b		d0 f2		bne $390fff	                BNE FILL_MOUSE_MARKER
.39100d		ea		nop		                nop
.39100e		a9 01		lda #$01	                LDA #$01
.391010		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.391014		c2 30		rep #$30	                REP #$30        ; set A&X long
.391016		6b		rtl		                RTL
.391017		48		pha		IINITCURSOR     PHA
.391018		e2 20		sep #$20	                SEP #$20        ; set A short
.39101a		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.39101c		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.391020		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.391022		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.391026		c2 30		rep #$30	                REP #$30        ; set A&X long
.391028		a9 00 00	lda #$0000	                LDA #$0000;
.39102b		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.39102f		a9 06 00	lda #$0006	                LDA #$0006;
.391032		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.391036		68		pla		                PLA
.391037		6b		rtl		                RTL
.391038		0b		phd		IINITSUPERIO	  PHD
.391039		08		php		                PHP
.39103a		48		pha		                PHA
.39103b		e2 20		sep #$20	                SEP #$20        ; set A short
.39103d		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39103f		8f 23 11 af	sta $af1123	                STA GP10_REG
.391043		af 23 11 af	lda $af1123	                LDA GP10_REG
.391047		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391049		8f 24 11 af	sta $af1124	                STA GP11_REG
.39104d		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39104f		8f 25 11 af	sta $af1125	                STA GP12_REG
.391053		a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391055		8f 26 11 af	sta $af1126	        				STA GP13_REG
.391059		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.39105b		8f 27 11 af	sta $af1127	        				STA GP14_REG
.39105f		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.391061		8f 28 11 af	sta $af1128	        				STA GP15_REG
.391065		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.391067		8f 29 11 af	sta $af1129	        				STA GP16_REG
.39106b		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.39106d		8f 2a 11 af	sta $af112a	        				STA GP17_REG
.391071		a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.391073		8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391077		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391079		8f 2f 11 af	sta $af112f					        STA GP24_REG
.39107d		a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.39107f		8f 30 11 af	sta $af1130					        STA GP25_REG
.391083		a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.391085		8f 31 11 af	sta $af1131					        STA GP26_REG
.391089		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.39108b		8f 33 11 af	sta $af1133					        STA GP30_REG
.39108f		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.391091		8f 34 11 af	sta $af1134					        STA GP31_REG
.391095		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391097		8f 35 11 af	sta $af1135					        STA GP32_REG
.39109b		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.39109d		8f 36 11 af	sta $af1136					        STA GP33_REG
.3910a1		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.3910a3		8f 37 11 af	sta $af1137					        STA GP34_REG
.3910a7		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.3910a9		8f 38 11 af	sta $af1138					        STA GP35_REG
.3910ad		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.3910af		8f 39 11 af	sta $af1139					        STA GP36_REG
.3910b3		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.3910b5		8f 3a 11 af	sta $af113a					        STA GP37_REG
.3910b9		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.3910bb		8f 3d 11 af	sta $af113d					        STA GP42_REG
.3910bf		a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.3910c1		8f 3e 11 af	sta $af113e					        STA GP43_REG
.3910c5		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.3910c7		8f 3f 11 af	sta $af113f					        STA GP50_REG
.3910cb		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.3910cd		8f 40 11 af	sta $af1140					        STA GP51_REG
.3910d1		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.3910d3		8f 41 11 af	sta $af1141					        STA GP52_REG
.3910d7		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.3910d9		8f 42 11 af	sta $af1142					        STA GP53_REG
.3910dd		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.3910df		8f 43 11 af	sta $af1143					        STA GP54_REG
.3910e3		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.3910e5		8f 44 11 af	sta $af1144					        STA GP55_REG
.3910e9		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910eb		8f 45 11 af	sta $af1145					        STA GP56_REG
.3910ef		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910f1		8f 46 11 af	sta $af1146					        STA GP57_REG
.3910f5		a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910f7		8f 47 11 af	sta $af1147					        STA GP60_REG
.3910fb		a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910fd		8f 48 11 af	sta $af1148					        STA GP61_REG
.391101		a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.391103		8f 4b 11 af	sta $af114b					        STA GP1_REG
.391107		a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.391109		8f 4c 11 af	sta $af114c					        STA GP2_REG
.39110d		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.39110f		8f 4d 11 af	sta $af114d					        STA GP3_REG
.391113		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.391115		8f 4e 11 af	sta $af114e					        STA GP4_REG
.391119		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.39111b		8f 4f 11 af	sta $af114f					        STA GP5_REG
.39111f		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.391121		8f 50 11 af	sta $af1150					        STA GP6_REG
.391125		a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.391127		8f 5d 11 af	sta $af115d					        STA LED1_REG
.39112b		a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.39112d		8f 5e 11 af	sta $af115e					        STA LED2_REG
.391131		c2 20		rep #$20	                REP #$20        ; set A long
.391133		68		pla		                PLA
.391134		28		plp						        PLP
.391135		2b		pld					        	PLD
.391136		6b		rtl		                RTL
.391137		0b		phd		IINITKEYBOARD	  PHD
.391138		08		php						        PHP
.391139		48		pha						        PHA
.39113a		da		phx						        PHX
.39113b		e2 20		sep #$20	                SEP #$20        ; set A short
.39113d		c2 10		rep #$10	                REP #$10        ; set X long
.39113f		18		clc		                CLC
.391140		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf ;
.391143		a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.391145		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391149		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.39114c		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.391150		c9 55		cmp #$55					        CMP #$55
.391152		f0 03		beq $391157					        BEQ	passAAtest
.391154		82 89 00	brl $3911e0	                BRL initkb_loop_out
.391157						passAAtest
.391157		a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391159		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.39115d		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.391160		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.391164		c9 00		cmp #$00					        CMP #$00			;Should be 00
.391166		f0 03		beq $39116b					        BEQ	passABtest
.391168		82 75 00	brl $3911e0	                BRL initkb_loop_out
.39116b						passABtest
.39116b		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.39116d		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391171		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf ;
.391174		a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.391176		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39117a		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf ;
.39117d		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.39117f		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391183		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391186		ca		dex		DLY_LOOP1       DEX
.391187		ea		nop		                NOP
.391188		ea		nop		                NOP
.391189		ea		nop		                NOP
.39118a		ea		nop		                NOP
.39118b		ea		nop		                NOP
.39118c		ea		nop		                NOP
.39118d		ea		nop		                NOP
.39118e		ea		nop		                NOP
.39118f		e0 00 00	cpx #$0000	                CPX #$0000
.391192		d0 f2		bne $391186	                BNE DLY_LOOP1
.391194		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.391197		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.39119b						DO_CMD_F4_AGAIN
.39119b		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf ;
.39119e		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.3911a0		8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.3911a4		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.3911a7		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911ab		c9 fa		cmp #$fa	                CMP #$FA
.3911ad		d0 ec		bne $39119b	                BNE DO_CMD_F4_AGAIN
.3911af		20 06 12	jsr $391206	                JSR INIT_MOUSE
.3911b2		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3911b6		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3911b8		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3911bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.3911c0		29 01		and #$01	                AND #FNX1_INT00_KBD
.3911c2		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.3911c6		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.3911ca		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.3911cc		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.3911d0		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.3911d4		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3911d6		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.3911da		a2 86 71	ldx #$7186	                LDX #<>Success_kb_init
.3911dd		38		sec		                SEC
.3911de		b0 03		bcs $3911e3	                BCS InitSuccess
.3911e0		a2 98 71	ldx #$7198	initkb_loop_out LDX #<>Failed_kb_init
.3911e3		22 87 07 39	jsl $390787	InitSuccess     JSL IPRINT       ; print Message
.3911e7		c2 20		rep #$20	                REP #$20        ; set A long
.3911e9		c2 10		rep #$10	                REP #$10        ; set X long
.3911eb		fa		plx		                PLX
.3911ec		68		pla		                PLA
.3911ed		28		plp						        PLP
.3911ee		2b		pld						        PLD
.3911ef		6b		rtl		                RTL
.3911f0						Poll_Inbuf
.3911f0		af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911f4		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911f6		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911f8		f0 f6		beq $3911f0					        BEQ Poll_Inbuf
.3911fa		60		rts		                RTS
.3911fb						Poll_Outbuf
.3911fb		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911ff		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.391201		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.391203		d0 f6		bne $3911fb	                BNE Poll_Outbuf
.391205		60		rts		                RTS
.391206						INIT_MOUSE
.391206		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391209		a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.39120b		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39120f						DO_CMD_A9_AGAIN
.39120f		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391212		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.391214		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391218		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.39121b		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.39121f		c9 00		cmp #$00	                CMP #$00
.391221		d0 ec		bne $39120f	                BNE DO_CMD_A9_AGAIN
.391223		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391226		a9 20		lda #$20	                LDA #$20
.391228		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39122c		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.39122f		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.391233		09 02		ora #$02	                ORA #$02
.391235		48		pha		                PHA
.391236		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391239		a9 60		lda #$60	                LDA #$60
.39123b		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39123f		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf ;
.391242		68		pla		                PLA
.391243		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391247		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391249		20 6c 12	jsr $39126c	                JSR MOUSE_WRITE
.39124c		20 7f 12	jsr $39127f	                JSR MOUSE_READ
.39124f		a9 e8		lda #$e8	                LDA #$E8
.391251		20 6c 12	jsr $39126c	                JSR MOUSE_WRITE
.391254		20 7f 12	jsr $39127f	                JSR MOUSE_READ
.391257		a9 00		lda #$00	                LDA #$00
.391259		20 6c 12	jsr $39126c	                JSR MOUSE_WRITE
.39125c		20 7f 12	jsr $39127f	                JSR MOUSE_READ
.39125f		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391261		20 6c 12	jsr $39126c	                JSR MOUSE_WRITE
.391264		20 7f 12	jsr $39127f	                JSR MOUSE_READ
.391267		a9 00		lda #$00	                LDA #$00
.391269		85 e0		sta $e0		                STA MOUSE_PTR
.39126b		60		rts		                RTS
.39126c						MOUSE_WRITE
.39126c		48		pha		                PHA
.39126d		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391270		a9 d4		lda #$d4	                LDA #$D4
.391272		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391276		20 f0 11	jsr $3911f0	                JSR Poll_Inbuf
.391279		68		pla		                PLA
.39127a		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39127e		60		rts		                RTS
.39127f						MOUSE_READ
.39127f		20 fb 11	jsr $3911fb	                JSR Poll_Outbuf ;
.391282		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391286		60		rts		                RTS
.391287		48		pha		INITRTC         PHA
.391288		08		php		                PHP
.391289		e2 20		sep #$20	                SEP #$20        ; set A short
.39128b		a9 00		lda #$00	                LDA #0
.39128d		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.391291		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391295		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391299		09 04		ora #$04	                ORA #%00000100
.39129b		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39129f		28		plp		                PLP
.3912a0		68		pla		                PLA
.3912a1		6b		rtl		                RTL
.3912a2						ITESTSID
.3912a2		a9 0f		lda #$0f	                LDA #$0F
.3912a4		8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.3912a8		a9 be		lda #$be	                LDA #$BE
.3912aa		8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.3912ae		a9 f8		lda #$f8	                LDA #$F8
.3912b0		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.3912b4		a9 11		lda #$11	                LDA #$11
.3912b6		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.3912ba		a9 25		lda #$25	                LDA #$25
.3912bc		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912c0		a9 11		lda #$11	                LDA #$11
.3912c2		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.3912c6		a9 08		lda #$08	                LDA #$08
.3912c8		8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912cc		a9 00		lda #$00	                LDA #$00
.3912ce		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.3912d2		a9 c6		lda #$c6	                LDA #$C6
.3912d4		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.3912d8		a9 08		lda #$08	                LDA #$08
.3912da		8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912de		a9 00		lda #$00	                LDA #$00
.3912e0		8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.3912e4		a9 08		lda #$08	                LDA #$08
.3912e6		8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912ea		a9 c6		lda #$c6	                LDA #$C6
.3912ec		8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912f0		a9 08		lda #$08	                LDA #$08
.3912f2		8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912f6		a9 00		lda #$00	                LDA #$00
.3912f8		8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912fc		a9 08		lda #$08	                LDA #$08
.3912fe		8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.391302		a9 c6		lda #$c6	                LDA #$C6
.391304		8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391308		a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.39130a		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39130e		a9 01		lda #$01	                LDA #$01
.391310		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.391314		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391316		8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.39131a		a9 08		lda #$08	                LDA #$08
.39131c		8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391320		a9 08		lda #$08	                LDA #$08
.391322		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.391326		a9 0c		lda #$0c	                LDA #$0C
.391328		8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.39132c		a9 04		lda #$04	                LDA #$04
.39132e		8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.391332		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391334		8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.391338		a9 08		lda #$08	                LDA #$08
.39133a		8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39133e		a9 08		lda #$08	                LDA #$08
.391340		8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391344		a9 00		lda #$00	                LDA #$00
.391346		8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.39134a		a9 08		lda #$08	                LDA #$08
.39134c		8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391350		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391352		8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391356		a9 08		lda #$08	                LDA #$08
.391358		8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39135c		a9 08		lda #$08	                LDA #$08
.39135e		8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391362		a9 10		lda #$10	                LDA #$10
.391364		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391368		8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39136c		8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391370		6b		rtl		                RTL
.391371		48		pha		IINITCODEC      PHA
.391372		08		php		                PHP
.391373		c2 20		rep #$20	                REP #$20        ; set A long
.391375		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.391378		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39137c		a9 01 00	lda #$0001	                LDA #$0001
.39137f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391383		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.391386		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391389		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39138d		a9 01 00	lda #$0001	                LDA #$0001
.391390		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391394		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.391397		a9 1f 2a	lda #$2a1f	                LDA #%0010101000011111       ;R21 - Enable All the Analog In
.39139a		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39139e		a9 01 00	lda #$0001	                LDA #$0001
.3913a1		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913a5		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913a8		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.3913ab		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913af		a9 01 00	lda #$0001	                LDA #$0001
.3913b2		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913b6		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913b9		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.3913bc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913c0		a9 01 00	lda #$0001	                LDA #$0001
.3913c3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913c7		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913ca		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.3913cd		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913d1		a9 01 00	lda #$0001	                LDA #$0001
.3913d4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913d8		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913db		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.3913de		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913e2		a9 01 00	lda #$0001	                LDA #$0001
.3913e5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913e9		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913ec		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.3913ef		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913f3		a9 01 00	lda #$0001	                LDA #$0001
.3913f6		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913fa		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.3913fd		28		plp		                PLP
.3913fe		68		pla		                PLA
.3913ff		6b		rtl		                RTL
.391400						IRESETCODEC
.391400		c2 20		rep #$20	                REP #$20        ; set A long
.391402		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.391405		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391409		a9 01 00	lda #$0001	                LDA #$0001
.39140c		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391410		20 14 14	jsr $391414	                JSR CODEC_TRF_FINISHED
.391413		6b		rtl		                RTL
.391414						CODEC_TRF_FINISHED
.391414		e2 20		sep #$20	                SEP #$20        ; set A short
.391416		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.39141a		29 01		and #$01	                AND #$01
.39141c		c9 01		cmp #$01	                CMP #$01
.39141e		f0 f6		beq $391416	                BEQ CODEC_LOOP
.391420		c2 20		rep #$20	                REP #$20        ; set A long
.391422		60		rts		                RTS
.391423						IBM_FILL_SCREEN
.391423		c2 30		rep #$30	                REP #$30        ; set A&X long
.391425		a9 00 00	lda #$0000	                LDA #$0000
.391428		a2 00 00	ldx #$0000	                LDX #$0000
.39142b						BM_FILL_SCREEN_LOOPY
.39142b		a0 00 00	ldy #$0000	                LDY #$0000
.39142e		e2 20		sep #$20	                SEP #$20        ; set A short
.391430						BM_FILL_SCREEN_LOOPX
.391430		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391432		c8		iny		                INY
.391433		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391435		d0 f9		bne $391430	                BNE BM_FILL_SCREEN_LOOPX
.391437		20 42 14	jsr $391442	                JSR BM_FILL_COMPUTE_Y_DST
.39143a		e8		inx		                INX
.39143b		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.39143d		d0 ec		bne $39142b	                BNE BM_FILL_SCREEN_LOOPY
.39143f		c2 30		rep #$30	                REP #$30        ; set A&X long
.391441		6b		rtl		                RTL
.391442						BM_FILL_COMPUTE_Y_DST
.391442		c2 20		rep #$20	                REP #$20        ; set A long
.391444		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391446		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39144a		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.39144c		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391450		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391453		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391457		a9 00 00	lda #$0000	                LDA #$0000
.39145a		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39145e		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391462		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391464		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391468		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39146a		a9 00 00	lda #$0000	                LDA #$0000
.39146d		60		rts		                RTS
.39146e						IBMP_PARSER
.39146e		c2 30		rep #$30	                REP #$30        ; set A&X long
.391470		a0 00 00	ldy #$0000	                LDY #$0000
.391473		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391475		c9 42 4d	cmp #$4d42	                CMP #$4D42
.391478		f0 03		beq $39147d	                BEQ IBMP_PARSER_CONT
.39147a		82 04 01	brl $391581	                BRL BMP_PARSER_END_WITH_ERROR
.39147d						IBMP_PARSER_CONT
.39147d		a0 02 00	ldy #$0002	                LDY #$0002
.391480		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391482		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391486		a0 04 00	ldy #$0004	                LDY #$0004
.391489		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39148b		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39148f		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391492		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391496		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39149a		18		clc		                CLC
.39149b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39149f		85 50		sta $50		                STA BMP_FILE_SIZE
.3914a1		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914a5		85 52		sta $52		                STA BMP_FILE_SIZE+2
.3914a7		a0 12 00	ldy #$0012	                LDY #$0012
.3914aa		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3914ac		85 40		sta $40		                STA BMP_X_SIZE
.3914ae		a0 16 00	ldy #$0016	                LDY #$0016
.3914b1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3914b3		85 42		sta $42		                STA BMP_Y_SIZE
.3914b5		a0 2e 00	ldy #$002e	                LDY #$002E
.3914b8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3914ba		0a		asl a		                ASL A; Multiply by 2
.3914bb		0a		asl a		                ASL A; Multiply by 2
.3914bc		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3914be		e0 00 00	cpx #$0000	                CPX #$0000
.3914c1		d0 05		bne $3914c8	                BNE BMP_LUT1_PICK
.3914c3		20 89 15	jsr $391589	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3914c6		80 08		bra $3914d0	                BRA DONE_TRANSFER_LUT;
.3914c8						  BMP_LUT1_PICK
.3914c8		e0 01 00	cpx #$0001	                CPX #$0001
.3914cb		d0 03		bne $3914d0	                BNE BMP_LUT2_PICK
.3914cd		20 b9 15	jsr $3915b9	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3914d0						  BMP_LUT2_PICK
.3914d0						  DONE_TRANSFER_LUT
.3914d0		a5 56		lda $56		                LDA BMP_POSITION_Y
.3914d2		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3914d6		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3914d8		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3914dc		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3914e0		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914e4		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3914e8		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914ec		a5 54		lda $54		                LDA BMP_POSITION_X
.3914ee		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3914f2		a9 00 00	lda #$0000	                LDA #$0000
.3914f5		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914f9		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914fd		85 f0		sta $f0		                STA USER_TEMP
.3914ff		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391503		85 f2		sta $f2		                STA USER_TEMP+2
.391505		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391507		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39150b		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39150d		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391511		a5 f0		lda $f0		                LDA USER_TEMP
.391513		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391517		a5 f2		lda $f2		                LDA USER_TEMP+2
.391519		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.39151d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391521		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391523		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391527		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391529		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.39152b		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39152f		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391531		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391535		a5 50		lda $50		                LDA BMP_FILE_SIZE
.391537		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39153b		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.39153d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391541		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391545		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391547		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39154b		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39154d		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39154f		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391553		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391555		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391559		18		clc		                CLC
.39155a		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.39155c		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39155f		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391562		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391566		a9 ff ff	lda #$ffff	                LDA #$FFFF
.391569		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39156d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391571		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391573		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391577		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391579		20 e9 15	jsr $3915e9	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.39157c		a2 d4 71	ldx #$71d4	                LDX #<>bmp_parser_msg0
.39157f		80 03		bra $391584	                BRA BMP_PARSER_END_NO_ERROR
.391581						BMP_PARSER_END_WITH_ERROR
.391581		a2 c0 71	ldx #$71c0	                LDX #<>bmp_parser_err0
.391584						BMP_PARSER_END_NO_ERROR
.391584		22 87 07 39	jsl $390787	                JSL IPRINT       ; print the first line
.391588		6b		rtl		                RTL
.391589						BMP_PARSER_UPDATE_LUT0
.391589		38		sec		                SEC
.39158a		a0 7a 00	ldy #$007a	                LDY #$007A
.39158d		a2 00 00	ldx #$0000	                LDX #$0000
.391590		e2 20		sep #$20	                SEP #$20        ; set A short
.391592						BMP_PARSER_UPDATE_LOOP
.391592		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391594		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391598		c8		iny		                INY
.391599		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39159b		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39159f		c8		iny		                INY
.3915a0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3915a2		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.3915a6		c8		iny		                INY
.3915a7		a9 80		lda #$80	                LDA #$80
.3915a9		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3915ad		c8		iny		                INY ; For the Alpha Value, nobody cares
.3915ae		e8		inx		                INX
.3915af		e8		inx		                INX
.3915b0		e8		inx		                INX
.3915b1		e8		inx		                INX
.3915b2		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3915b4		d0 dc		bne $391592	                BNE BMP_PARSER_UPDATE_LOOP
.3915b6		c2 20		rep #$20	                REP #$20        ; set A long
.3915b8		60		rts		                RTS
.3915b9						BMP_PARSER_UPDATE_LUT1
.3915b9		38		sec		                SEC
.3915ba		a0 36 00	ldy #$0036	                LDY #$0036
.3915bd		a2 00 00	ldx #$0000	                LDX #$0000
.3915c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3915c2						PALETTE_LUT1_LOOP
.3915c2		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3915c4		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3915c8		c8		iny		                INY
.3915c9		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3915cb		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3915cf		c8		iny		                INY
.3915d0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3915d2		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3915d6		c8		iny		                INY
.3915d7		a9 80		lda #$80	                LDA #$80
.3915d9		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3915dd		c8		iny		                INY ; For the Alpha Value, nobody cares
.3915de		e8		inx		                INX
.3915df		e8		inx		                INX
.3915e0		e8		inx		                INX
.3915e1		e8		inx		                INX
.3915e2		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3915e4		d0 dc		bne $3915c2	                BNE PALETTE_LUT1_LOOP
.3915e6		c2 20		rep #$20	                REP #$20        ; set A long
.3915e8		60		rts		                RTS
.3915e9						BMP_PARSER_DMA_SHIT_OUT
.3915e9		a2 00 00	ldx #$0000	                LDX #$0000
.3915ec						BMP_PARSER_LOOPY
.3915ec		a0 00 00	ldy #$0000	                LDY #$0000
.3915ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3915f1						BMP_PARSER_LOOPX
.3915f1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3915f3		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3915f5		c8		iny		                INY
.3915f6		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3915f8		d0 f7		bne $3915f1	                BNE BMP_PARSER_LOOPX
.3915fa		20 06 16	jsr $391606	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915fd		20 21 16	jsr $391621	                JSR BMP_PARSER_COMPUTE_Y_DST
.391600		e8		inx		                INX
.391601		e4 42		cpx $42		                CPX BMP_Y_SIZE
.391603		d0 e7		bne $3915ec	                BNE BMP_PARSER_LOOPY
.391605		60		rts		                RTS
.391606						BMP_PARSER_COMPUTE_Y_SRC
.391606		c2 20		rep #$20	                REP #$20        ; set A long
.391608		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39160a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39160e		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391610		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391614		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391618		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39161a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39161e		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391620		60		rts		                RTS
.391621						BMP_PARSER_COMPUTE_Y_DST
.391621		c2 20		rep #$20	                REP #$20        ; set A long
.391623		18		clc		                CLC
.391624		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391626		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391628		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39162a		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39162c		69 00 00	adc #$0000	                ADC #$0000
.39162f		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391631		60		rts		                RTS
.391632		ea		nop		ILOOP           NOP
.391633		ea		nop		                NOP
.391634		ea		nop		                NOP
.391635		ea		nop		                NOP
.391636		ea		nop		                NOP
.391637		ea		nop		                NOP
.391638		ea		nop		                NOP
.391639		ea		nop		                NOP
.39163a		ea		nop		                NOP
.39163b		ea		nop		                NOP
.39163c		6b		rtl		                RTL
.39163d		22 32 16 39	jsl $391632	ILOOP_1         JSL ILOOP
.391641		22 32 16 39	jsl $391632	                JSL ILOOP
.391645		22 32 16 39	jsl $391632	                JSL ILOOP
.391649		22 32 16 39	jsl $391632	                JSL ILOOP
.39164d		22 32 16 39	jsl $391632	                JSL ILOOP
.391651		22 32 16 39	jsl $391632	                JSL ILOOP
.391655		22 32 16 39	jsl $391632	                JSL ILOOP
.391659		22 32 16 39	jsl $391632	                JSL ILOOP
.39165d		22 32 16 39	jsl $391632	                JSL ILOOP
.391661		22 32 16 39	jsl $391632	                JSL ILOOP
.391665		6b		rtl		                RTL
.391666		22 3d 16 39	jsl $39163d	ILOOP_1MS       JSL ILOOP_1
.39166a		6b		rtl		                RTL
.39166b		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39166e		f0 07		beq $391677	                BEQ LOOP_MS_END
.391670		22 66 16 39	jsl $391666	                JSL ILOOP_1MS
.391674		ca		dex		                DEX
.391675		80 f4		bra $39166b	                BRA ILOOP_MS
.391677		6b		rtl		LOOP_MS_END     RTL
.391678						IDELAY
.391678		8b		phb		                PHB
.391679		08		php		                PHP
.39167a		48		pha		                PHA             ; begin setdbr macro
.39167b		08		php		                PHP
.39167c		e2 20		sep #$20	                SEP #$20        ; set A short
.39167e		a9 00		lda #$00	                LDA #0
.391680		48		pha		                PHA
.391681		ab		plb		                PLB
.391682		28		plp		                PLP
.391683		68		pla		                PLA             ; end setdbr macro
.391684		e2 20		sep #$20	                SEP #$20        ; set A short
.391686		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391688		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39168c		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391690		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391692		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391696		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391698		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39169b		a9 00		lda #$00	                LDA #0
.39169d		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.3916a1		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.3916a5		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.3916a9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3916ab		8a		txa		                TXA
.3916ac		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.3916b0		98		tya		                TYA
.3916b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3916b3		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.3916b7		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.3916b9		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3916bd		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.3916bf		cb		wai		loop            WAI                         ; Wait for an interrupt
.3916c0		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3916c3		f0 fa		beq $3916bf	                BEQ loop                    ; Keep checking until it's set
.3916c5		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3916c7		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3916cb		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3916cd		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3916d0		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3916d4		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3916d6		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3916da		28		plp		                PLP
.3916db		ab		plb		                PLB
.3916dc		6b		rtl		                RTL
.3916dd						SHOW_CREDITS
.3916dd		48		pha		                PHA
.3916de		da		phx		                PHX
.3916df		5a		phy		                PHY
.3916e0		08		php		                PHP
.3916e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3916e3		c2 10		rep #$10	                REP #$10        ; set X long
.3916e5		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3916e9		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3916eb		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916ef		a2 00 00	ldx #$0000	                LDX #0
.3916f2		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3916f6		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3916fa		bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916fe		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391702		e8		inx		                INX
.391703		e0 00 20	cpx #$2000	                CPX #128 * 64
.391706		d0 ea		bne $3916f2	                BNE credit_loop
.391708		22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.39170c		22 81 0b 39	jsl $390b81	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391710		22 a5 09 39	jsl $3909a5	                JSL ICSRHOME                    ; Move cursor to the home position
.391714		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391718		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.39171a		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39171e		28		plp		                PLP
.39171f		7a		ply		                PLY
.391720		fa		plx		                PLX
.391721		68		pla		                PLA
.391722		6b		rtl		                RTL
.391723		00		brk #		ISCINIT         BRK ;
.391724		00		brk #		IIOINIT         BRK ;
.391725		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391726		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391727		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391728		00		brk #		ICLOSE          BRK ; Close a channel
.391729		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.39172a		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39172b		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39172c		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39172d		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39172e		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39172f		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391730		00		brk #		IPRINTF         BRK ; Print a float value
.391731		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391732		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391733		00		brk #		IPUSHKEY        BRK ;
.391734		00		brk #		IPUSHKEYS       BRK ;
.391735		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391736		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391737		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391738		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>391740		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391750		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391758		12
>391759		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391761		15
>391762		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391768		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>39176d		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>391773		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39177b		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391789		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391791		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39179f		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3917a7		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3917b5		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3917bd		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3917cb		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3917d3		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3917e1		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3917e9		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3917f7		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917ff		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>39180d		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>391815		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391823		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>39182b		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391839		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391841		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39184f		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391857		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391865		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>39186d		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39187b		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391883		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391891		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391899		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3918a7		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3918af		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3918bd		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3918c5		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3918d3		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3918db		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3918e9		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3918f1		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918ff		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391907		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>391915		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>39191d		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>39192b		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>391933		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391941		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391949		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391957		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39195f		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>39196d		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391975		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391983		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>39198b		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391999		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3919a1		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3919af		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3919b7		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3919c5		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3919cd		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3919db		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3919e3		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3919f1		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3919f9		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391a07		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391a0f		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391a1d		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391a25		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>391a33		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391a3b		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391a49		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391a51		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a5f		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a67		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a75		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a7d		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a8b		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a93		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391aa1		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391aa9		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391ab7		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391abf		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391acd		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391ad5		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391ae3		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391aeb		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391af9		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391b01		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391b0f		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391b17		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391b25		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391b2d		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391b3b		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391b43		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391b51		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391b59		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b67		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b6f		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b7d		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b85		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b93		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b9b		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391ba9		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391bb1		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391bbf		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391bc7		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391bd5		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391bdd		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391beb		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391bf3		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391c01		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391c09		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391c17		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391c1f		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391c2d		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391c35		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391c43		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391c4b		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391c59		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c61		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c6f		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c77		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c85		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c8d		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c9b		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391ca3		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391cb1		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391cb9		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391cc7		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391ccf		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391cdd		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391ce5		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391cf3		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391cfb		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391d09		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391d11		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391d1f		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391d27		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391d35		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391d3d		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391d4b		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391d53		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d61		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d69		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d77		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d7f		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d8d		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d95		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391da3		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391dab		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391db9		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391dc1		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391dcf		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391dd7		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391de5		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391ded		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391dfb		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391e03		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391e11		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391e19		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391e27		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391e2f		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391e3d		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391e45		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391e53		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391e5b		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e69		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e71		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e7f		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e87		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e95		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e9d		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391eab		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391eb3		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391ec1		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391ec9		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391ed7		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391edf		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391eed		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391ef5		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391f03		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391f0b		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391f19		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391f21		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391f2f		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391f37		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391f45		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391f4d		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391f5b		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f63		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f71		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f79		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f87		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f8f		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f9d		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391fa5		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391fb3		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391fbb		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391fc9		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391fd1		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391fdf		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391fe7		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391ff5		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391ffd		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>39200b		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>392013		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>392021		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>392029		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>392037		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>39203f		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>39204d		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>392055		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>392063		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>39206b		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>392079		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>392081		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>39208f		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>392097		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>3920a5		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>3920ad		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>3920bb		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>3920c3		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>3920d1		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>3920d9		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>3920e7		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>3920ef		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920fd		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>392105		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>392113		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>39211b		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>392129		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>392131		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>39213f		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>392147		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>392155		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>39215d		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>39216b		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>392173		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392181		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392189		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>392197		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>39219f		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>3921ad		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>3921b5		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>3921c3		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>3921cb		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>3921d9		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>3921e1		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>3921ef		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>3921f7		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>392205		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>39220d		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>39221b		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>392223		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>392231		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>392239		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>392247		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>39224f		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>39225d		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392265		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392273		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>39227b		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392289		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392291		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39229f		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>3922a7		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>3922b5		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>3922bd		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>3922cb		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>3922d3		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>3922e1		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>3922e9		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3922f7		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922ff		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>39230d		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>392315		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>392323		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>39232b		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>392339		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>392341		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39234f		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392357		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392365		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>39236d		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>39237b		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392383		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392391		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392399		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>3923a7		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>3923af		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>3923bd		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>3923c5		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3923d3		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3923db		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>3923e9		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3923f1		00 87 fa 00
>3923f5		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923fd		00 88 98 03
>392401		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392409		00 88 98 03
>39240d		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392415		00 f9 69 00
>392419		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>392421		80 e8 4a 00
>392425		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39242d		00 f6 9a 00
>392431		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392439		1b f2 34 00
>39243d		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>392445		00 f7 8a 00
>392449		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392451		00 f6 47 00
>392455		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39245d		00 f9 69 00
>392461		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392469		00 f7 a9 00
>39246d		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392475		00 87 fa 00
>392479		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392481		00 f7 a9 00
>392485		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39248d		00 f5 f5 00
>392491		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392499		06 b8 d8 03
>39249d		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924a5		00 f5 f5 00
>3924a9		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3924b1		06 b8 d8 03
>3924b5		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924bd		00 f5 f5 00
>3924c1		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3924c9		10 74 f8 03
>3924cd		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924d5		00 f5 f5 00
>3924d9		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924e1		00 f5 f5 00
>3924e5		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924ed		05 c5 d4 03
>3924f1		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924f9		00 f5 f5 00
>3924fd		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392505		04 f9 44 03
>392509		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392511		05 c5 d4 03
>392515		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39251d		04 f9 44 03
>392521		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392529		03 87 f7 03
>39252d		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392535		05 c5 d4 03
>392539		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>392541		00 f6 28 00
>392545		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39254d		05 c5 d4 03
>392551		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392559		00 f5 f7 01
>39255d		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392565		04 f9 44 03
>392569		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392571		00 99 f9 00
>392575		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>39257d		00 a8 f7 00
>392581		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392589		00 99 f9 00
>39258d		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392595		00 a6 f6 00
>392599		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3925a1		00 a6 f6 00
>3925a5		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3925ad		00 f6 36 02
>3925b1		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3925b9		00 f6 36 02
>3925bd		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3925c5		00 96 e8 01
>3925c9		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3925d1		00 96 e8 01
>3925d5		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3925dd		02 79 77 03
>3925e1		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3925e9		02 79 77 03
>3925ed		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3925f5		00 a5 2b 02
>3925f9		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392601		00 93 3b 02
>392605		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>39260d		01 89 3b 03
>392611		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392619		0a 53 2b 02
>39261d		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>392625		00 f6 89 00
>392629		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392631		00 f6 9a 00
>392635		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39263d		00 f6 9a 00
>392641		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392649		00 87 4b 01
>39264d		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392655		00 78 67 01
>392659		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392661		02 f8 fc 00
>392665		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39266d		40 f5 f5 00
>392671		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392679		02 79 77 03
>39267d		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392685		40 f5 f5 00
>392689		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392691		40 f5 f5 00
>392695		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39269d		00 f9 69 00
>3926a1		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3926a9		00 f9 69 00
>3926ad		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3926b5		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>3926b9		e9 23 39 00 f5 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3926c1		01 24 39 00 0d 24 39 00
>3926c9		19 24 39 00 25 24 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3926d1		31 24 39 00 3d 24 39 00
>3926d9		49 24 39 00 55 24 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3926e1		61 24 39 00 6d 24 39 00
>3926e9		79 24 39 00 85 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3926f1		91 24 39 00 9d 24 39 00
>3926f9		a9 24 39 00 b5 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392701		c1 24 39 00 cd 24 39 00
>392709		d9 24 39 00 e5 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392711		f1 24 39 00 fd 24 39 00
>392719		09 25 39 00 15 25 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392721		21 25 39 00 2d 25 39 00
>392729		39 25 39 00 45 25 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392731		51 25 39 00 5d 25 39 00
>392739		69 25 39 00 75 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392741		81 25 39 00 8d 25 39 00
>392749		99 25 39 00 a5 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392751		b1 25 39 00 bd 25 39 00
>392759		c9 25 39 00 d5 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392761		e1 25 39 00 ed 25 39 00
>392769		f9 25 39 00 05 26 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392771		11 26 39 00 1d 26 39 00
>392779		29 26 39 00 35 26 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392781		41 26 39 00 4d 26 39 00
>392789		59 26 39 00 65 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392791		71 26 39 00 7d 26 39 00
>392799		89 26 39 00 95 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3927a1		a1 26 39 00 ad 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>3927a9		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3927b1		00 b1 f5 01
>3927b5		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3927bd		03 f1 f5 00
>3927c1		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3927c9		03 c1 f5 00
>3927cd		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3927d5		00 92 f5 01
>3927d9		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3927e1		00 f1 f9 00
>3927e5		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3927ed		00 f1 f5 00
>3927f1		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3927f9		02 81 f6 01
>3927fd		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>392805		00 c2 b9 01
>392809		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392811		05 b2 35 00
>392815		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>39281d		1b f2 34 00
>392821		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392829		01 f5 74 00
>39282d		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392835		00 61 e3 00
>392839		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392841		00 a4 64 00
>392845		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>39284d		07 b5 f5 00
>392851		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392859		00 f3 74 00
>39285d		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392865		00 c3 94 01
>392869		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392871		00 f4 0d 01
>392875		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>39287d		00 f5 0b 01
>392881		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392889		00 bf 07 00
>39288d		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392895		00 6d 08 01
>392899		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3928a1		00 51 17 01
>3928a5		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3928ad		00 51 17 01
>3928b1		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3928b9		00 53 08 01
>3928bd		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3928c5		00 53 06 01
>3928c9		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3928d1		00 d2 f8 00
>3928d5		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3928dd		00 e2 c7 01
>3928e1		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3928e9		00 f1 9c 00
>3928ed		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3928f5		02 f2 c9 01
>3928f9		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392901		03 95 fb 00
>392905		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>39290d		04 a1 59 00
>392911		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392919		03 91 fc 03
>39291d		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392925		02 b4 ec 00
>392929		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392931		00 93 f7 00
>392935		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>39293d		04 c1 58 00
>392941		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392949		02 c3 6a 00
>39294d		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392955		00 62 87 00
>392959		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392961		00 f3 97 00
>392965		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>39296d		00 b3 97 00
>392971		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392979		04 f3 cc 00
>39297d		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392985		00 93 aa 00
>392989		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392991		00 78 08 01
>392995		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39299d		00 78 08 01
>3929a1		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3929a9		00 54 27 01
>3929ad		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3929b5		00 61 56 00
>3929b9		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3929c1		00 75 16 01
>3929c5		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3929cd		00 f5 f6 01
>3929d1		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3929d9		80 f3 e3 00
>3929dd		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3929e5		00 b5 f5 00
>3929e9		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3929f1		80 71 16 00
>3929f5		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929fd		00 30 55 01
>392a01		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392a09		00 62 36 01
>392a0d		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>392a15		02 51 07 00
>392a19		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392a21		00 62 39 00
>392a25		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392a2d		00 66 27 00
>392a31		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392a39		00 73 46 00
>392a3d		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392a45		00 74 76 01
>392a49		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392a51		81 92 38 00
>392a55		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a5d		02 71 19 00
>392a61		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a69		01 81 09 00
>392a6d		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a75		00 83 4b 02
>392a79		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a81		05 71 59 00
>392a85		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a8d		03 82 39 00
>392a91		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a99		82 84 17 00
>392a9d		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392aa5		02 72 16 00
>392aa9		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392ab1		00 7b 0a 00
>392ab5		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392abd		00 85 0c 01
>392ac1		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392ac9		00 7b 0a 01
>392acd		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392ad5		00 79 18 01
>392ad9		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392ae1		01 73 08 00
>392ae5		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392aed		04 77 0a 00
>392af1		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392af9		00 51 19 00
>392afd		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392b05		01 74 09 00
>392b09		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392b11		01 63 28 00
>392b15		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392b1d		00 65 0a 00
>392b21		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392b29		00 67 29 00
>392b2d		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392b35		00 67 09 00
>392b39		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392b41		01 6a 28 00
>392b45		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392b4d		00 55 27 00
>392b51		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392b59		00 6f 08 00
>392b5d		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b65		00 7a 07 00
>392b69		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b71		06 a2 0d 00
>392b75		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b7d		00 a3 5f 00
>392b81		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b89		00 42 27 00
>392b8d		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b95		05 b2 49 00
>392b99		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392ba1		00 b2 79 01
>392ba5		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392bad		00 7a 1a 00
>392bb1		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392bb9		00 82 28 01
>392bbd		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392bc5		02 c3 5f 00
>392bc9		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392bd1		86 c4 95 01
>392bd5		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392bdd		00 44 15 00
>392be1		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392be9		00 d1 06 00
>392bed		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392bf5		00 82 37 00
>392bf9		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392c01		00 41 35 00
>392c05		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392c0d		02 32 f5 01
>392c11		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392c19		00 61 26 00
>392c1d		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392c25		84 3f 05 01
>392c29		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392c31		01 d1 f6 00
>392c35		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392c3d		00 41 05 01
>392c41		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392c49		05 f3 e4 00
>392c4d		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392c55		00 92 f5 01
>392c59		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c61		04 f2 e4 01
>392c65		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c6d		00 45 25 00
>392c71		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c79		01 a3 36 00
>392c7d		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c85		01 98 05 01
>392c89		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c91		02 a3 f6 01
>392c95		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c9d		00 f6 f8 00
>392ca1		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392ca9		00 f3 f5 00
>392cad		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392cb5		00 94 e5 01
>392cb9		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392cc1		00 84 44 00
>392cc5		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392ccd		03 83 18 01
>392cd1		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392cd9		01 78 08 01
>392cdd		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392ce5		03 8e 08 01
>392ce9		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392cf1		09 f2 46 00
>392cf5		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392cfd		00 96 e8 01
>392d01		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392d09		00 f6 f6 01
>392d0d		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392d15		00 f6 9a 00
>392d19		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392d21		00 c6 45 00
>392d25		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392d2d		00 f4 b4 00
>392d31		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392d39		00 d5 25 00
>392d3d		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392d45		0e 21 2d 00
>392d49		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392d51		00 55 87 02
>392d55		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d5d		08 98 87 01
>392d61		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d69		04 17 04 03
>392d6d		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d75		05 77 f9 02
>392d79		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d81		02 f4 08 00
>392d85		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d8d		00 36 05 01
>392d91		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d99		05 32 55 03
>392d9d		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392da5		00 f3 df 00
>392da9		a9 27 39 00 b5 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392db1		c1 27 39 00 cd 27 39 00 d9 27 39 00 e5 27 39 00
>392dc1		f1 27 39 00 fd 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392dc9		09 28 39 00 15 28 39 00 21 28 39 00 2d 28 39 00
>392dd9		39 28 39 00 45 28 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392de1		51 28 39 00 5d 28 39 00 69 28 39 00 75 28 39 00
>392df1		81 28 39 00 8d 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392df9		99 28 39 00 a5 28 39 00 b1 28 39 00 bd 28 39 00
>392e09		c9 28 39 00 d5 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392e11		e1 28 39 00 ed 28 39 00 f9 28 39 00 05 29 39 00
>392e21		11 29 39 00 1d 29 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392e29		29 29 39 00 35 29 39 00 41 29 39 00 4d 29 39 00
>392e39		59 29 39 00 65 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392e41		71 29 39 00 7d 29 39 00 89 29 39 00 95 29 39 00
>392e51		a1 29 39 00 ad 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392e59		b9 29 39 00 c5 29 39 00 d1 29 39 00 dd 29 39 00
>392e69		e9 29 39 00 f5 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e71		01 2a 39 00 0d 2a 39 00 19 2a 39 00 25 2a 39 00
>392e81		31 2a 39 00 3d 2a 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e89		49 2a 39 00 55 2a 39 00 61 2a 39 00 6d 2a 39 00
>392e99		79 2a 39 00 85 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392ea1		91 2a 39 00 9d 2a 39 00 a9 2a 39 00 b5 2a 39 00
>392eb1		c1 2a 39 00 cd 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392eb9		d9 2a 39 00 e5 2a 39 00 f1 2a 39 00 fd 2a 39 00
>392ec9		09 2b 39 00 15 2b 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392ed1		21 2b 39 00 2d 2b 39 00 39 2b 39 00 45 2b 39 00
>392ee1		51 2b 39 00 5d 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392ee9		69 2b 39 00 75 2b 39 00 81 2b 39 00 8d 2b 39 00
>392ef9		99 2b 39 00 a5 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392f01		b1 2b 39 00 bd 2b 39 00 c9 2b 39 00 d5 2b 39 00
>392f11		e1 2b 39 00 ed 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392f19		f9 2b 39 00 05 2c 39 00 11 2c 39 00 1d 2c 39 00
>392f29		29 2c 39 00 35 2c 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392f31		41 2c 39 00 4d 2c 39 00 59 2c 39 00 65 2c 39 00
>392f41		71 2c 39 00 7d 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392f49		89 2c 39 00 95 2c 39 00 a1 2c 39 00 ad 2c 39 00
>392f59		b9 2c 39 00 c5 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f61		d1 2c 39 00 dd 2c 39 00 e9 2c 39 00 f5 2c 39 00
>392f71		01 2d 39 00 0d 2d 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f79		19 2d 39 00 25 2d 39 00 31 2d 39 00 3d 2d 39 00
>392f89		49 2d 39 00 55 2d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f91		61 2d 39 00 6d 2d 39 00 79 2d 39 00 85 2d 39 00
>392fa1		91 2d 39 00 9d 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392fa9		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392fb1		0d f2 f7 00
>392fb5		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392fbd		07 f2 f7 00
>392fc1		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392fc9		07 f2 f6 00
>392fcd		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392fd5		07 f2 f7 00
>392fd9		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392fe1		07 f2 f7 00
>392fe5		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392fed		07 f2 f7 00
>392ff1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff9		00 00 00 00
>392ffd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393005		00 00 00 00
>393009		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393011		00 00 00 00
>393015		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>39301d		87 f2 f1 00
>393021		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>393029		07 f4 f4 00
>39302d		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>393035		07 f2 f6 00
>393039		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>393041		07 e7 f7 00
>393045		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>39304d		07 f6 f6 00
>393051		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>393059		87 a3 f3 00
>39305d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393065		00 00 00 00
>393069		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393071		00 00 00 00
>393075		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39307d		00 00 00 00
>393081		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>393089		07 8a 08 00
>39308d		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>393095		07 55 14 00
>393099		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>3930a1		87 55 04 00
>3930a5		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>3930ad		07 46 1a 00
>3930b1		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>3930b9		07 61 07 00
>3930bd		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>3930c5		90 61 07 00
>3930c9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930d1		00 00 00 00
>3930d5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930dd		00 00 00 00
>3930e1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930e9		00 00 00 00
>3930ed		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>3930f5		87 f3 f8 00
>3930f9		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>393101		07 f6 3a 00
>393105		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>39310d		0c 84 19 00
>393111		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>393119		07 94 19 00
>39311d		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>393125		87 d1 f8 00
>393129		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>393131		07 c3 a6 00
>393135		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39313d		00 00 00 00
>393141		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393149		00 00 00 00
>39314d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393155		00 00 00 00
>393159		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>393161		47 f2 df 00
>393165		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>39316d		0f a1 df 00
>393171		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393179		07 f1 78 00
>39317d		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>393185		07 f1 18 00
>393189		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393191		07 56 26 00
>393195		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>39319d		07 66 06 00
>3931a1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a9		00 00 00 00
>3931ad		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931b5		00 00 00 00
>3931b9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c1		00 00 00 00
>3931c5		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>3931cd		87 85 35 00
>3931d1		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>3931d9		87 f3 f4 00
>3931dd		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>3931e5		07 f2 c3 00
>3931e9		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>3931f1		08 72 08 00
>3931f5		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931fd		07 3f 07 01
>393201		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>393209		07 4f 05 00
>39320d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393215		00 00 00 00
>393219		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393221		00 00 00 00
>393225		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39322d		00 00 00 00
>393231		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>393239		07 7a 05 00
>39323d		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>393245		07 a5 45 00
>393249		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>393251		08 8f 09 00
>393255		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39325d		0c 8f 09 00
>393261		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393269		07 82 37 00
>39326d		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393275		07 62 2c 01
>393279		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393281		00 00 00 00
>393285		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39328d		00 00 00 00
>393291		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393299		00 00 00 00
>39329d		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>3932a5		07 a6 1c 00
>3932a9		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>3932b1		07 72 0b 00
>3932b5		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>3932bd		07 72 09 00
>3932c1		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>3932c9		07 82 09 00
>3932cd		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>3932d5		07 72 0f 00
>3932d9		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>3932e1		07 8f 0a 00
>3932e5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932ed		00 00 00 00
>3932f1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932f9		00 00 00 00
>3932fd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393305		00 00 00 00
>393309		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393311		07 65 1a 00
>393315		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39331d		07 65 1a 00
>393321		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>393329		07 75 0a 00
>39332d		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>393335		07 65 1a 00
>393339		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>393341		07 65 26 00
>393345		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>39334d		07 55 36 00
>393351		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393359		00 00 00 00
>39335d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393365		00 00 00 00
>393369		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393371		00 00 00 00
>393375		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39337d		07 ff 0f 01
>393381		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393389		87 64 18 00
>39338d		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393395		07 96 0a 00
>393399		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>3933a1		07 91 2a 00
>3933a5		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>3933ad		47 6f 07 00
>3933b1		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>3933b9		07 8f 06 02
>3933bd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933c5		00 00 00 00
>3933c9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933d1		00 00 00 00
>3933d5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933dd		00 00 00 00
>3933e1		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3933e9		07 55 16 00
>3933ed		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3933f5		07 6a 03 00
>3933f9		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>393401		07 42 35 00
>393405		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>39340d		07 31 47 01
>393411		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393419		0a 42 25 00
>39341d		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>393425		07 cf 07 00
>393429		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393431		00 00 00 00
>393435		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39343d		00 00 00 00
>393441		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393449		00 00 00 00
>39344d		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393455		8a f2 26 00
>393459		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393461		07 f2 f5 00
>393465		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39346d		87 11 13 00
>393471		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393479		87 1d 03 00
>39347d		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393485		07 81 23 00
>393489		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393491		0a f2 f6 01
>393495		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39349d		00 00 00 00
>3934a1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934a9		00 00 00 00
>3934ad		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934b5		00 00 00 00
>3934b9		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>3934c1		07 c2 05 00
>3934c5		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>3934cd		07 6f 0c 01
>3934d1		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3934d9		07 56 16 00
>3934dd		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3934e5		88 8f 0b 00
>3934e9		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3934f1		87 c3 e5 00
>3934f5		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934fd		07 f8 16 00
>393501		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393509		00 00 00 00
>39350d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393515		00 00 00 00
>393519		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393521		00 00 00 00
>393525		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>39352d		0a f3 03 00
>393531		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393539		07 f3 02 00
>39353d		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>393545		07 1f ff 03
>393549		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393551		8f 56 84 02
>393555		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39355d		0c 34 04 03
>393561		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393569		07 1f 02 03
>39356d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393575		00 00 00 00
>393579		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393581		00 00 00 00
>393585		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39358d		00 00 00 00
>393591		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393599		07 12 16 01
>39359d		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>3935a5		07 f6 c9 02
>3935a9		a9 2f 39 00 b5 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>3935b1		c1 2f 39 00 cd 2f 39 00 d9 2f 39 00 e5 2f 39 00
>3935c1		f1 2f 39 00 fd 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3935c9		09 30 39 00 15 30 39 00 21 30 39 00 2d 30 39 00
>3935d9		39 30 39 00 45 30 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3935e1		51 30 39 00 5d 30 39 00 69 30 39 00 75 30 39 00
>3935f1		81 30 39 00 8d 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3935f9		99 30 39 00 a5 30 39 00 b1 30 39 00 bd 30 39 00
>393609		c9 30 39 00 d5 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>393611		e1 30 39 00 ed 30 39 00 f9 30 39 00 05 31 39 00
>393621		11 31 39 00 1d 31 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393629		29 31 39 00 35 31 39 00 41 31 39 00 4d 31 39 00
>393639		59 31 39 00 65 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>393641		71 31 39 00 7d 31 39 00 89 31 39 00 95 31 39 00
>393651		a1 31 39 00 ad 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393659		b9 31 39 00 c5 31 39 00 d1 31 39 00 dd 31 39 00
>393669		e9 31 39 00 f5 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393671		01 32 39 00 0d 32 39 00 19 32 39 00 25 32 39 00
>393681		31 32 39 00 3d 32 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393689		49 32 39 00 55 32 39 00 61 32 39 00 6d 32 39 00
>393699		79 32 39 00 85 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3936a1		91 32 39 00 9d 32 39 00 a9 32 39 00 b5 32 39 00
>3936b1		c1 32 39 00 cd 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3936b9		d9 32 39 00 e5 32 39 00 f1 32 39 00 fd 32 39 00
>3936c9		09 33 39 00 15 33 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3936d1		21 33 39 00 2d 33 39 00 39 33 39 00 45 33 39 00
>3936e1		51 33 39 00 5d 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3936e9		69 33 39 00 75 33 39 00 81 33 39 00 8d 33 39 00
>3936f9		99 33 39 00 a5 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393701		b1 33 39 00 bd 33 39 00 c9 33 39 00 d5 33 39 00
>393711		e1 33 39 00 ed 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393719		f9 33 39 00 05 34 39 00 11 34 39 00 1d 34 39 00
>393729		29 34 39 00 35 34 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393731		41 34 39 00 4d 34 39 00 59 34 39 00 65 34 39 00
>393741		71 34 39 00 7d 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393749		89 34 39 00 95 34 39 00 a1 34 39 00 ad 34 39 00
>393759		b9 34 39 00 c5 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393761		d1 34 39 00 dd 34 39 00 e9 34 39 00 f5 34 39 00
>393771		01 35 39 00 0d 35 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393779		19 35 39 00 25 35 39 00 31 35 39 00 3d 35 39 00
>393789		49 35 39 00 55 35 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393791		61 35 39 00 6d 35 39 00 79 35 39 00 85 35 39 00
>3937a1		91 35 39 00 9d 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>3937a9		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3937b1						IOPL2_TONE_TEST
.3937b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3937b3		c2 10		rep #$10	                REP #$10        ; set X long
.3937b5		a2 00 00	ldx #$0000	                LDX #0
.3937b8						OPL2_TONE_TESTING_L1
.3937b8		bf a9 37 39	lda $3937a9,x	                LDA NOTE_INTRO, X
.3937bc		29 0f		and #$0f	                AND #$F
.3937be		85 30		sta $30		                STA OPL2_NOTE ; start at C
.3937c0		bf a9 37 39	lda $3937a9,x	                LDA NOTE_INTRO, X
.3937c4		29 70		and #$70	                AND #$70
.3937c6		4a		lsr a		                LSR A
.3937c7		4a		lsr a		                LSR A
.3937c8		4a		lsr a		                LSR A
.3937c9		4a		lsr a		                LSR A
.3937ca		85 31		sta $31		                STA OPL2_OCTAVE
.3937cc		8a		txa		                TXA
.3937cd		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3937cf		85 27		sta $27		                STA OPL2_CHANNEL
.3937d1		22 a1 39 39	jsl $3939a1	                JSL OPL2_PLAYNOTE
.3937d5		a0 00 00	ldy #$0000	                LDY #$0000
.3937d8						OPL2_TONE_TESTING_L2
.3937d8		ea		nop		                NOP
.3937d9		ea		nop		                NOP
.3937da		ea		nop		                NOP
.3937db		ea		nop		                NOP
.3937dc		c8		iny		                INY
.3937dd		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3937e0		d0 f6		bne $3937d8	                BNE OPL2_TONE_TESTING_L2
.3937e2		e8		inx		                INX
.3937e3		e0 08 00	cpx #$0008	                CPX #8
.3937e6		d0 d0		bne $3937b8	                BNE OPL2_TONE_TESTING_L1
.3937e8		6b		rtl		                RTL
.3937e9						OPL2_INIT
.3937e9		c2 20		rep #$20	                REP #$20        ; set A long
.3937eb		a9 00 00	lda #$0000	                LDA #$0000
.3937ee		85 28		sta $28		                STA OPL2_REG_REGION
.3937f0		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937f2		85 30		sta $30		                STA OPL2_NOTE
.3937f4		85 32		sta $32		                STA OPL2_PARAMETER0
.3937f6		85 34		sta $34		                STA OPL2_PARAMETER2
.3937f8		a9 73 17	lda #$1773	                LDA #<>INSTRUMENT_ACCORDN
.3937fb		85 50		sta $50		                STA RAD_ADDR
.3937fd		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393800		85 52		sta $52		                STA RAD_ADDR + 2
.393802		e2 20		sep #$20	                SEP #$20        ; set A short
.393804		6b		rtl		                RTL
.393805						OPL2_Reset
.393805		6b		rtl		                RTL
.393806						OPL2_Get_FrequencyBlock
.393806		6b		rtl		                RTL
.393807						OPL2_GET_REGISTER
.393807		48		pha		                PHA             ; begin setdp macro
.393808		08		php		                PHP
.393809		c2 20		rep #$20	                REP #$20        ; set A long
.39380b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39380e		5b		tcd		                TCD
.39380f		28		plp		                PLP
.393810		68		pla		                PLA             ; end setdp macro
.393811		c2 20		rep #$20	                REP #$20        ; set A long
.393813		18		clc		              CLC
.393814		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393817		65 32		adc $32		              ADC OPL2_PARAMETER0
.393819		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39381b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39381e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393820		e2 20		sep #$20	                SEP #$20        ; set A short
.393822		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393824		6b		rtl		              RTL
.393825						OPL2_GET_WAVEFORM_SELECT
.393825		48		pha		                PHA             ; begin setdp macro
.393826		08		php		                PHP
.393827		c2 20		rep #$20	                REP #$20        ; set A long
.393829		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39382c		5b		tcd		                TCD
.39382d		28		plp		                PLP
.39382e		68		pla		                PLA             ; end setdp macro
.39382f		c2 20		rep #$20	                REP #$20        ; set A long
.393831		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393834		69 01 00	adc #$0001	              ADC #$0001
.393837		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393839		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39383c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39383e		e2 20		sep #$20	                SEP #$20        ; set A short
.393840		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393842		29 20		and #$20	              AND #$20
.393844		6b		rtl		              RTL
.393845						OPL2_GET_SCALINGLEVEL
.393845		48		pha		                PHA             ; begin setdp macro
.393846		08		php		                PHP
.393847		c2 20		rep #$20	                REP #$20        ; set A long
.393849		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39384c		5b		tcd		                TCD
.39384d		28		plp		                PLP
.39384e		68		pla		                PLA             ; end setdp macro
.39384f		c2 20		rep #$20	                REP #$20        ; set A long
.393851		a9 40 00	lda #$0040	              LDA #$0040  ;
.393854		85 28		sta $28		              STA OPL2_REG_REGION
.393856		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393859		e2 20		sep #$20	                SEP #$20        ; set A short
.39385b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39385d		29 c0		and #$c0	              AND #$C0
.39385f		4a		lsr a		              LSR A
.393860		4a		lsr a		              LSR A
.393861		4a		lsr a		              LSR A
.393862		4a		lsr a		              LSR A
.393863		4a		lsr a		              LSR A
.393864		4a		lsr a		              LSR A
.393865		6b		rtl		              RTL
.393866						OPL2_GET_BLOCK
.393866		48		pha		                PHA             ; begin setdp macro
.393867		08		php		                PHP
.393868		c2 20		rep #$20	                REP #$20        ; set A long
.39386a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39386d		5b		tcd		                TCD
.39386e		28		plp		                PLP
.39386f		68		pla		                PLA             ; end setdp macro
.393870		e2 20		sep #$20	                SEP #$20        ; set A short
.393872		18		clc		              CLC
.393873		a5 27		lda $27		              LDA OPL2_CHANNEL
.393875		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393877		69 b0		adc #$b0	              ADC #$B0
.393879		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39387b		a9 00		lda #$00	              LDA #$00
.39387d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39387f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393881		18		clc		              CLC
.393882		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393885		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393887		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393889		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39388c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39388e		e2 20		sep #$20	                SEP #$20        ; set A short
.393890		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393892		29 1c		and #$1c	              AND #$1C
.393894		4a		lsr a		              LSR A
.393895		4a		lsr a		              LSR A
.393896		6b		rtl		              RTL
.393897						OPL2_GET_KEYON
.393897		48		pha		                PHA             ; begin setdp macro
.393898		08		php		                PHP
.393899		c2 20		rep #$20	                REP #$20        ; set A long
.39389b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39389e		5b		tcd		                TCD
.39389f		28		plp		                PLP
.3938a0		68		pla		                PLA             ; end setdp macro
.3938a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3938a3		18		clc		              CLC
.3938a4		a5 27		lda $27		              LDA OPL2_CHANNEL
.3938a6		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938a8		69 b0		adc #$b0	              ADC #$B0
.3938aa		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938ac		a9 00		lda #$00	              LDA #$00
.3938ae		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938b0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938b2		18		clc		              CLC
.3938b3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938b6		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938b8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ba		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938bd		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3938c1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938c3		29 20		and #$20	              AND #$20
.3938c5		6b		rtl		              RTL
.3938c6						OPL2_GET_FEEDBACK
.3938c6		48		pha		                PHA             ; begin setdp macro
.3938c7		08		php		                PHP
.3938c8		c2 20		rep #$20	                REP #$20        ; set A long
.3938ca		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938cd		5b		tcd		                TCD
.3938ce		28		plp		                PLP
.3938cf		68		pla		                PLA             ; end setdp macro
.3938d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d2		18		clc		              CLC
.3938d3		a5 27		lda $27		              LDA OPL2_CHANNEL
.3938d5		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938d7		69 c0		adc #$c0	              ADC #$C0
.3938d9		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938db		a9 00		lda #$00	              LDA #$00
.3938dd		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938df		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938e1		18		clc		              CLC
.3938e2		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938e5		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938e7		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938e9		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938ec		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3938f0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938f2		29 e0		and #$e0	              AND #$E0
.3938f4		4a		lsr a		              LSR
.3938f5		6b		rtl		              RTL
.3938f6						OPL2_GET_SYNTHMODE
.3938f6		48		pha		                PHA             ; begin setdp macro
.3938f7		08		php		                PHP
.3938f8		c2 20		rep #$20	                REP #$20        ; set A long
.3938fa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938fd		5b		tcd		                TCD
.3938fe		28		plp		                PLP
.3938ff		68		pla		                PLA             ; end setdp macro
.393900		e2 20		sep #$20	                SEP #$20        ; set A short
.393902		18		clc		              CLC
.393903		a5 27		lda $27		              LDA OPL2_CHANNEL
.393905		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393907		69 c0		adc #$c0	              ADC #$C0
.393909		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39390b		a9 00		lda #$00	              LDA #$00
.39390d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39390f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393911		18		clc		              CLC
.393912		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393915		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393917		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393919		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39391c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39391e		e2 20		sep #$20	                SEP #$20        ; set A short
.393920		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393922		29 01		and #$01	              AND #$01
.393924		6b		rtl		              RTL
.393925						OPL2_GET_DEEPTREMOLO
.393925		48		pha		                PHA             ; begin setdp macro
.393926		08		php		                PHP
.393927		c2 20		rep #$20	                REP #$20        ; set A long
.393929		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39392c		5b		tcd		                TCD
.39392d		28		plp		                PLP
.39392e		68		pla		                PLA             ; end setdp macro
.39392f		c2 20		rep #$20	                REP #$20        ; set A long
.393931		a9 bd 00	lda #$00bd	              LDA #$00BD;
.393934		85 28		sta $28		              STA OPL2_REG_REGION
.393936		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393939		e2 20		sep #$20	                SEP #$20        ; set A short
.39393b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39393d		29 80		and #$80	              AND #$80
.39393f		6b		rtl		              RTL
.393940						OPL2_GET_DEEPVIBRATO
.393940		48		pha		                PHA             ; begin setdp macro
.393941		08		php		                PHP
.393942		c2 20		rep #$20	                REP #$20        ; set A long
.393944		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393947		5b		tcd		                TCD
.393948		28		plp		                PLP
.393949		68		pla		                PLA             ; end setdp macro
.39394a		c2 20		rep #$20	                REP #$20        ; set A long
.39394c		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39394f		69 bd 00	adc #$00bd	              ADC #$00BD
.393952		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393954		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393957		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393959		e2 20		sep #$20	                SEP #$20        ; set A short
.39395b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39395d		29 40		and #$40	              AND #$40
.39395f		6b		rtl		              RTL
.393960						OPL2_GET_PERCUSSION
.393960		48		pha		                PHA             ; begin setdp macro
.393961		08		php		                PHP
.393962		c2 20		rep #$20	                REP #$20        ; set A long
.393964		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393967		5b		tcd		                TCD
.393968		28		plp		                PLP
.393969		68		pla		                PLA             ; end setdp macro
.39396a		c2 20		rep #$20	                REP #$20        ; set A long
.39396c		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39396f		69 bd 00	adc #$00bd	              ADC #$00BD
.393972		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393974		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393977		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393979		e2 20		sep #$20	                SEP #$20        ; set A short
.39397b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39397d		29 20		and #$20	              AND #$20
.39397f		6b		rtl		              RTL
.393980						OPL2_GET_DRUMS
.393980		48		pha		                PHA             ; begin setdp macro
.393981		08		php		                PHP
.393982		c2 20		rep #$20	                REP #$20        ; set A long
.393984		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393987		5b		tcd		                TCD
.393988		28		plp		                PLP
.393989		68		pla		                PLA             ; end setdp macro
.39398a		c2 20		rep #$20	                REP #$20        ; set A long
.39398c		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39398f		69 bd 00	adc #$00bd	              ADC #$00BD
.393992		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393994		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393997		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393999		e2 20		sep #$20	                SEP #$20        ; set A short
.39399b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39399d		29 1f		and #$1f	              AND #$1F
.39399f		6b		rtl		              RTL
.3939a0						OPL2_Get_WaveForm
.3939a0		6b		rtl		                RTL
.3939a1						OPL2_PLAYNOTE
.3939a1		48		pha		                PHA             ; begin setdp macro
.3939a2		08		php		                PHP
.3939a3		c2 20		rep #$20	                REP #$20        ; set A long
.3939a5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939a8		5b		tcd		                TCD
.3939a9		28		plp		                PLP
.3939aa		68		pla		                PLA             ; end setdp macro
.3939ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3939ad		da		phx		                PHX
.3939ae		a9 00		lda #$00	                LDA #$00
.3939b0		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3939b2		20 89 3f	jsr $393f89	                JSR OPL2_SET_KEYON
.3939b5		20 4e 3f	jsr $393f4e	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3939b8		e2 10		sep #$10	                SEP #$10        ; set X short
.3939ba		a5 30		lda $30		                LDA OPL2_NOTE
.3939bc		3a		dec a		                DEC A
.3939bd		0a		asl a		                ASL A
.3939be		aa		tax		                TAX
.3939bf		bf 38 17 39	lda $391738,x	                LDA @lnoteFNumbers,X
.3939c3		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3939c5		e8		inx		                INX
.3939c6		bf 38 17 39	lda $391738,x	                LDA @lnoteFNumbers,X
.3939ca		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3939cc		22 cc 3e 39	jsl $393ecc	                JSL OPL2_SET_FNUMBER
.3939d0		a9 01		lda #$01	                LDA #$01
.3939d2		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3939d4		20 89 3f	jsr $393f89	                JSR OPL2_SET_KEYON
.3939d7		c2 10		rep #$10	                REP #$10        ; set X long
.3939d9		fa		plx		                PLX
.3939da		6b		rtl		                RTL
.3939db						OPL2_PLAYDRUM
.3939db		6b		rtl		                RTL
.3939dc						OPL2_SET_INSTRUMENT
.3939dc		48		pha		                PHA             ; begin setdp macro
.3939dd		08		php		                PHP
.3939de		c2 20		rep #$20	                REP #$20        ; set A long
.3939e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e3		5b		tcd		                TCD
.3939e4		28		plp		                PLP
.3939e5		68		pla		                PLA             ; end setdp macro
.3939e6		38		sec		              SEC ; Set the WaveFormSelect to True
.3939e7		22 ca 3b 39	jsl $393bca	              JSL OPL2_SET_WAVEFORMSELECT;
.3939eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3939ed		c2 10		rep #$10	                REP #$10        ; set X long
.3939ef		a0 00 00	ldy #$0000	              LDY #$0000
.3939f2		a2 00 00	ldx #$0000	              LDX #$0000
.3939f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3939f7		85 35		sta $35		              STA OPL2_PARAMETER3
.3939f9		c8		iny		              INY
.3939fa		c9 06		cmp #$06	              CMP #$06
.3939fc		d0 03		bne $393a01	              BNE PERCUSSION_NEXT07
.3939fe		82 70 01	brl $393b71	              BRL Percussion_6
.393a01						PERCUSSION_NEXT07
.393a01		c9 07		cmp #$07	              CMP #$07
.393a03		d0 03		bne $393a08	              BNE PERCUSSION_NEXT08
.393a05		82 44 01	brl $393b4c	              BRL Percussion_7
.393a08						PERCUSSION_NEXT08
.393a08		c9 08		cmp #$08	              CMP #$08
.393a0a		d0 03		bne $393a0f	              BNE PERCUSSION_NEXT09
.393a0c		82 18 01	brl $393b27	              BRL Percussion_8
.393a0f						PERCUSSION_NEXT09
.393a0f		c9 09		cmp #$09	              CMP #$09
.393a11		d0 03		bne $393a16	              BNE PERCUSSION_NEXT0A
.393a13		82 ec 00	brl $393b02	              BRL Percussion_9
.393a16						PERCUSSION_NEXT0A
.393a16		c9 0a		cmp #$0a	              CMP #$0A
.393a18		d0 03		bne $393a1d	              BNE Percussion_Default
.393a1a		82 c0 00	brl $393add	              BRL Percussion_A
.393a1d						Percussion_Default
.393a1d		a9 00		lda #$00	              LDA #$00
.393a1f		85 26		sta $26		              STA OPL2_OPERATOR
.393a21		c2 20		rep #$20	                REP #$20        ; set A long
.393a23		a9 20 00	lda #$0020	              LDA #$0020;
.393a26		85 28		sta $28		              STA OPL2_REG_REGION
.393a28		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a2b		e2 20		sep #$20	                SEP #$20        ; set A short
.393a2d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a2f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a31		c8		iny		              INY
.393a32		c2 20		rep #$20	                REP #$20        ; set A long
.393a34		a9 40 00	lda #$0040	              LDA #$0040;
.393a37		85 28		sta $28		              STA OPL2_REG_REGION
.393a39		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a3c		e2 20		sep #$20	                SEP #$20        ; set A short
.393a3e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a40		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a42		c8		iny		              INY
.393a43		c2 20		rep #$20	                REP #$20        ; set A long
.393a45		a9 60 00	lda #$0060	              LDA #$0060;
.393a48		85 28		sta $28		              STA OPL2_REG_REGION
.393a4a		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a4d		e2 20		sep #$20	                SEP #$20        ; set A short
.393a4f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a51		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a53		c8		iny		              INY
.393a54		c2 20		rep #$20	                REP #$20        ; set A long
.393a56		a9 80 00	lda #$0080	              LDA #$0080;
.393a59		85 28		sta $28		              STA OPL2_REG_REGION
.393a5b		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a5e		e2 20		sep #$20	                SEP #$20        ; set A short
.393a60		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a62		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a64		c8		iny		              INY
.393a65		c2 20		rep #$20	                REP #$20        ; set A long
.393a67		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a6a		85 28		sta $28		              STA OPL2_REG_REGION
.393a6c		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a6f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a71		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a73		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a75		c8		iny		              INY
.393a76		e2 10		sep #$10	                SEP #$10        ; set X short
.393a78		a5 27		lda $27		              LDA OPL2_CHANNEL
.393a7a		29 0f		and #$0f	              AND #$0F
.393a7c		aa		tax		              TAX
.393a7d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a7f		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a83		c8		iny		              INY
.393a84		a9 01		lda #$01	              LDA #$01
.393a86		85 26		sta $26		              STA OPL2_OPERATOR
.393a88		c2 20		rep #$20	                REP #$20        ; set A long
.393a8a		a9 20 00	lda #$0020	              LDA #$0020;
.393a8d		85 28		sta $28		              STA OPL2_REG_REGION
.393a8f		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393a92		e2 20		sep #$20	                SEP #$20        ; set A short
.393a94		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a96		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a98		c8		iny		              INY
.393a99		c2 20		rep #$20	                REP #$20        ; set A long
.393a9b		a9 40 00	lda #$0040	              LDA #$0040;
.393a9e		85 28		sta $28		              STA OPL2_REG_REGION
.393aa0		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393aa3		e2 20		sep #$20	                SEP #$20        ; set A short
.393aa5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393aa7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393aa9		c8		iny		              INY
.393aaa		c2 20		rep #$20	                REP #$20        ; set A long
.393aac		a9 60 00	lda #$0060	              LDA #$0060;
.393aaf		85 28		sta $28		              STA OPL2_REG_REGION
.393ab1		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393ab4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ab6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393ab8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393aba		c8		iny		              INY
.393abb		c2 20		rep #$20	                REP #$20        ; set A long
.393abd		a9 80 00	lda #$0080	              LDA #$0080;
.393ac0		85 28		sta $28		              STA OPL2_REG_REGION
.393ac2		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393ac5		e2 20		sep #$20	                SEP #$20        ; set A short
.393ac7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393ac9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393acb		c8		iny		              INY
.393acc		c2 20		rep #$20	                REP #$20        ; set A long
.393ace		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393ad1		85 28		sta $28		              STA OPL2_REG_REGION
.393ad3		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393ad6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ad8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393ada		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393adc		6b		rtl		                RTL
.393add						Percussion_A
.393add		e2 20		sep #$20	                SEP #$20        ; set A short
.393adf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ae1		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393ae5		c8		iny		              INY
.393ae6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ae8		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393aec		c8		iny		              INY
.393aed		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aef		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393af3		c8		iny		              INY
.393af4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393af6		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393afa		c8		iny		              INY
.393afb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393afd		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393b01		6b		rtl		                RTL
.393b02						Percussion_9
.393b02		e2 20		sep #$20	                SEP #$20        ; set A short
.393b04		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b06		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393b0a		c8		iny		              INY
.393b0b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b0d		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393b11		c8		iny		              INY
.393b12		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b14		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393b18		c8		iny		              INY
.393b19		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b1b		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393b1f		c8		iny		              INY
.393b20		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b22		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393b26		6b		rtl		              RTL
.393b27						Percussion_8
.393b27		e2 20		sep #$20	                SEP #$20        ; set A short
.393b29		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b2b		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393b2f		c8		iny		              INY
.393b30		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b32		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393b36		c8		iny		              INY
.393b37		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b39		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393b3d		c8		iny		              INY
.393b3e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b40		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393b44		c8		iny		              INY
.393b45		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b47		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393b4b		6b		rtl		              RTL
.393b4c						Percussion_7
.393b4c		e2 20		sep #$20	                SEP #$20        ; set A short
.393b4e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b50		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393b54		c8		iny		              INY
.393b55		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b57		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393b5b		c8		iny		              INY
.393b5c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b5e		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b62		c8		iny		              INY
.393b63		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b65		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b69		c8		iny		              INY
.393b6a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b6c		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b70		6b		rtl		              RTL
.393b71						Percussion_6
.393b71		e2 20		sep #$20	                SEP #$20        ; set A short
.393b73		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b75		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b79		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b7d		c8		iny		              INY
.393b7e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b80		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b84		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b88		c8		iny		              INY
.393b89		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b8b		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b8f		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b93		c8		iny		              INY
.393b94		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b96		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b9a		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b9e		c8		iny		              INY
.393b9f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ba1		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393ba5		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393ba9		6b		rtl		              RTL
.393baa						OPL2_SET_REGISTER
.393baa		48		pha		                PHA             ; begin setdp macro
.393bab		08		php		                PHP
.393bac		c2 20		rep #$20	                REP #$20        ; set A long
.393bae		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bb1		5b		tcd		                TCD
.393bb2		28		plp		                PLP
.393bb3		68		pla		                PLA             ; end setdp macro
.393bb4		c2 20		rep #$20	                REP #$20        ; set A long
.393bb6		18		clc		              CLC
.393bb7		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393bba		65 32		adc $32		              ADC OPL2_PARAMETER0
.393bbc		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393bbe		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393bc1		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393bc3		e2 20		sep #$20	                SEP #$20        ; set A short
.393bc5		a5 33		lda $33		              LDA OPL2_PARAMETER1
.393bc7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bc9		6b		rtl		              RTL
.393bca						OPL2_SET_WAVEFORMSELECT
.393bca		48		pha		                PHA             ; begin setdp macro
.393bcb		08		php		                PHP
.393bcc		c2 20		rep #$20	                REP #$20        ; set A long
.393bce		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bd1		5b		tcd		                TCD
.393bd2		28		plp		                PLP
.393bd3		68		pla		                PLA             ; end setdp macro
.393bd4		c2 20		rep #$20	                REP #$20        ; set A long
.393bd6		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393bd9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393bdb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393bde		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393be0		e2 20		sep #$20	                SEP #$20        ; set A short
.393be2		b0 07		bcs $393beb	              BCS OPL2_Set_WaveFormSelect_set
.393be4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393be6		29 df		and #$df	              AND #$DF
.393be8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bea		6b		rtl		              RTL
.393beb						OPL2_Set_WaveFormSelect_set
.393beb		48		pha		                PHA             ; begin setdp macro
.393bec		08		php		                PHP
.393bed		c2 20		rep #$20	                REP #$20        ; set A long
.393bef		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bf2		5b		tcd		                TCD
.393bf3		28		plp		                PLP
.393bf4		68		pla		                PLA             ; end setdp macro
.393bf5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393bf7		09 20 00	ora #$0020	              ORA #$20
.393bfa		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bfc		6b		rtl		                RTL
.393bfd						OPL2_SET_TREMOLO
.393bfd		48		pha		                PHA             ; begin setdp macro
.393bfe		08		php		                PHP
.393bff		c2 20		rep #$20	                REP #$20        ; set A long
.393c01		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c04		5b		tcd		                TCD
.393c05		28		plp		                PLP
.393c06		68		pla		                PLA             ; end setdp macro
.393c07		08		php		                PHP ; Push the Carry
.393c08		c2 20		rep #$20	                REP #$20        ; set A long
.393c0a		18		clc		                CLC
.393c0b		a9 20 00	lda #$0020	                LDA #$0020 ;
.393c0e		85 28		sta $28		                STA OPL2_REG_REGION
.393c10		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393c13		28		plp		                PLP ; Pull the Carry out
.393c14		e2 20		sep #$20	                SEP #$20        ; set A short
.393c16		b0 08		bcs $393c20	                BCS OPL2_Set_Tremolo_Set;
.393c18		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c1a		29 7f		and #$7f	                AND #$7F
.393c1c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c1e		80 06		bra $393c26	                BRA OPL2_Set_Tremolo_Exit
.393c20						OPL2_Set_Tremolo_Set
.393c20		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c22		09 80		ora #$80	                ORA #$80
.393c24		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c26						OPL2_Set_Tremolo_Exit
.393c26		6b		rtl		                RTL
.393c27						OPL2_GET_TREMOLO
.393c27		48		pha		                PHA             ; begin setdp macro
.393c28		08		php		                PHP
.393c29		c2 20		rep #$20	                REP #$20        ; set A long
.393c2b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c2e		5b		tcd		                TCD
.393c2f		28		plp		                PLP
.393c30		68		pla		                PLA             ; end setdp macro
.393c31		c2 20		rep #$20	                REP #$20        ; set A long
.393c33		a9 20 00	lda #$0020	                LDA #$0020;
.393c36		85 28		sta $28		                STA OPL2_REG_REGION
.393c38		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393c3b		e2 20		sep #$20	                SEP #$20        ; set A short
.393c3d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c3f		29 80		and #$80	                AND #$80
.393c41		6b		rtl		                RTL
.393c42						OPL2_SET_VIBRATO
.393c42		48		pha		                PHA             ; begin setdp macro
.393c43		08		php		                PHP
.393c44		c2 20		rep #$20	                REP #$20        ; set A long
.393c46		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c49		5b		tcd		                TCD
.393c4a		28		plp		                PLP
.393c4b		68		pla		                PLA             ; end setdp macro
.393c4c		08		php		                PHP ; Push the Carry
.393c4d		c2 20		rep #$20	                REP #$20        ; set A long
.393c4f		18		clc		                CLC
.393c50		a9 20 00	lda #$0020	                LDA #$0020;
.393c53		85 28		sta $28		                STA OPL2_REG_REGION
.393c55		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393c58		28		plp		                PLP ; Pull the Carry out
.393c59		e2 20		sep #$20	                SEP #$20        ; set A short
.393c5b		b0 08		bcs $393c65	                BCS OPL2_Set_Vibrato_Set;
.393c5d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c5f		29 bf		and #$bf	                AND #$BF
.393c61		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c63		80 06		bra $393c6b	                BRA OPL2_Set_Vibrato_Exit
.393c65						OPL2_Set_Vibrato_Set
.393c65		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c67		09 40		ora #$40	                ORA #$40
.393c69		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c6b						OPL2_Set_Vibrato_Exit
.393c6b		6b		rtl		                RTL
.393c6c						OPL2_GET_VIBRATO
.393c6c		48		pha		                PHA             ; begin setdp macro
.393c6d		08		php		                PHP
.393c6e		c2 20		rep #$20	                REP #$20        ; set A long
.393c70		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c73		5b		tcd		                TCD
.393c74		28		plp		                PLP
.393c75		68		pla		                PLA             ; end setdp macro
.393c76		c2 20		rep #$20	                REP #$20        ; set A long
.393c78		a9 20 00	lda #$0020	                LDA #$0020;
.393c7b		85 28		sta $28		                STA OPL2_REG_REGION
.393c7d		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393c80		e2 20		sep #$20	                SEP #$20        ; set A short
.393c82		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c84		29 40		and #$40	                AND #$40
.393c86		6b		rtl		                RTL
.393c87						OPL2_SET_MAINTAINSUSTAIN
.393c87		48		pha		                PHA             ; begin setdp macro
.393c88		08		php		                PHP
.393c89		c2 20		rep #$20	                REP #$20        ; set A long
.393c8b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c8e		5b		tcd		                TCD
.393c8f		28		plp		                PLP
.393c90		68		pla		                PLA             ; end setdp macro
.393c91		08		php		              PHP ; Push the Carry
.393c92		c2 20		rep #$20	                REP #$20        ; set A long
.393c94		18		clc		              CLC
.393c95		a9 20 00	lda #$0020	              LDA #$0020;
.393c98		85 28		sta $28		              STA OPL2_REG_REGION
.393c9a		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393c9d		28		plp		              PLP ; Pull the Carry out
.393c9e		e2 20		sep #$20	                SEP #$20        ; set A short
.393ca0		b0 08		bcs $393caa	              BCS OPL2_Set_MaintainSustain_Set;
.393ca2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ca4		29 df		and #$df	              AND #$DF
.393ca6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ca8		80 06		bra $393cb0	              BRA OPL2_Set_MaintainSustain_Exit
.393caa						OPL2_Set_MaintainSustain_Set
.393caa		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cac		09 20		ora #$20	              ORA #$20
.393cae		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cb0						OPL2_Set_MaintainSustain_Exit
.393cb0		6b		rtl		                RTL
.393cb1						OPL2_GET_MAINTAINSUSTAIN
.393cb1		48		pha		                PHA             ; begin setdp macro
.393cb2		08		php		                PHP
.393cb3		c2 20		rep #$20	                REP #$20        ; set A long
.393cb5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cb8		5b		tcd		                TCD
.393cb9		28		plp		                PLP
.393cba		68		pla		                PLA             ; end setdp macro
.393cbb		c2 20		rep #$20	                REP #$20        ; set A long
.393cbd		a9 20 00	lda #$0020	              LDA #$0020;
.393cc0		85 28		sta $28		              STA OPL2_REG_REGION
.393cc2		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393cc5		e2 20		sep #$20	                SEP #$20        ; set A short
.393cc7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cc9		29 20		and #$20	              AND #$20
.393ccb		6b		rtl		                RTL
.393ccc						OPL2_SET_ENVELOPESCALING
.393ccc		48		pha		                PHA             ; begin setdp macro
.393ccd		08		php		                PHP
.393cce		c2 20		rep #$20	                REP #$20        ; set A long
.393cd0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cd3		5b		tcd		                TCD
.393cd4		28		plp		                PLP
.393cd5		68		pla		                PLA             ; end setdp macro
.393cd6		08		php		              PHP ; Push the Carry
.393cd7		c2 20		rep #$20	                REP #$20        ; set A long
.393cd9		18		clc		              CLC
.393cda		a9 20 00	lda #$0020	              LDA #$0020;
.393cdd		85 28		sta $28		              STA OPL2_REG_REGION
.393cdf		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393ce2		28		plp		              PLP ; Pull the Carry out
.393ce3		e2 20		sep #$20	                SEP #$20        ; set A short
.393ce5		b0 08		bcs $393cef	              BCS OPL2_Set_EnvelopeScaling_Set;
.393ce7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ce9		29 ef		and #$ef	              AND #$EF
.393ceb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ced		80 06		bra $393cf5	              BRA OPL2_Set_EnvelopeScaling_Exit
.393cef						OPL2_Set_EnvelopeScaling_Set
.393cef		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cf1		09 10		ora #$10	              ORA #$10
.393cf3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cf5						OPL2_Set_EnvelopeScaling_Exit
.393cf5		6b		rtl		                RTL
.393cf6						OPL2_GET_ENVELOPESCALING
.393cf6		48		pha		                PHA             ; begin setdp macro
.393cf7		08		php		                PHP
.393cf8		c2 20		rep #$20	                REP #$20        ; set A long
.393cfa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cfd		5b		tcd		                TCD
.393cfe		28		plp		                PLP
.393cff		68		pla		                PLA             ; end setdp macro
.393d00		c2 20		rep #$20	                REP #$20        ; set A long
.393d02		a9 20 00	lda #$0020	              LDA #$0020;
.393d05		85 28		sta $28		              STA OPL2_REG_REGION
.393d07		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393d0a		e2 20		sep #$20	                SEP #$20        ; set A short
.393d0c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d0e		29 10		and #$10	              AND #$10
.393d10		6b		rtl		                RTL
.393d11						OPL2_GET_MODFREQMULTIPLE
.393d11		48		pha		                PHA             ; begin setdp macro
.393d12		08		php		                PHP
.393d13		c2 20		rep #$20	                REP #$20        ; set A long
.393d15		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d18		5b		tcd		                TCD
.393d19		28		plp		                PLP
.393d1a		68		pla		                PLA             ; end setdp macro
.393d1b		c2 20		rep #$20	                REP #$20        ; set A long
.393d1d		a9 20 00	lda #$0020	              LDA #$0020;
.393d20		85 28		sta $28		              STA OPL2_REG_REGION
.393d22		20 08 41	jsr $394108	              JSR OPL2_GET_REG_OFFSET
.393d25		e2 20		sep #$20	                SEP #$20        ; set A short
.393d27		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d29		29 0f		and #$0f	              AND #$0F
.393d2b		6b		rtl		              RTL
.393d2c						OPL2_SET_MODFREQMULTIPLE
.393d2c		48		pha		                PHA             ; begin setdp macro
.393d2d		08		php		                PHP
.393d2e		c2 20		rep #$20	                REP #$20        ; set A long
.393d30		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d33		5b		tcd		                TCD
.393d34		28		plp		                PLP
.393d35		68		pla		                PLA             ; end setdp macro
.393d36		c2 20		rep #$20	                REP #$20        ; set A long
.393d38		a9 20 00	lda #$0020	                LDA #$0020;
.393d3b		85 28		sta $28		                STA OPL2_REG_REGION
.393d3d		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393d40		e2 20		sep #$20	                SEP #$20        ; set A short
.393d42		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393d44		29 0f		and #$0f	                AND #$0F
.393d46		85 32		sta $32		                STA OPL2_PARAMETER0
.393d48		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d4a		29 f0		and #$f0	                AND #$F0
.393d4c		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d4e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d50		6b		rtl		                RTL
.393d51						OPL2_SET_SCALINGLEVEL
.393d51		48		pha		                PHA             ; begin setdp macro
.393d52		08		php		                PHP
.393d53		c2 20		rep #$20	                REP #$20        ; set A long
.393d55		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d58		5b		tcd		                TCD
.393d59		28		plp		                PLP
.393d5a		68		pla		                PLA             ; end setdp macro
.393d5b		c2 20		rep #$20	                REP #$20        ; set A long
.393d5d		a9 40 00	lda #$0040	                LDA #$0040;
.393d60		85 28		sta $28		                STA OPL2_REG_REGION
.393d62		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393d65		e2 20		sep #$20	                SEP #$20        ; set A short
.393d67		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d69		29 03		and #$03	                AND #$03
.393d6b		0a		asl a		                ASL
.393d6c		0a		asl a		                ASL
.393d6d		0a		asl a		                ASL
.393d6e		0a		asl a		                ASL
.393d6f		0a		asl a		                ASL
.393d70		0a		asl a		                ASL
.393d71		85 32		sta $32		                STA OPL2_PARAMETER0
.393d73		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d75		29 3f		and #$3f	                AND #$3F
.393d77		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d79		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d7b		6b		rtl		                RTL
.393d7c						OPL2_SET_VOLUME
.393d7c		48		pha		                PHA             ; begin setdp macro
.393d7d		08		php		                PHP
.393d7e		c2 20		rep #$20	                REP #$20        ; set A long
.393d80		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d83		5b		tcd		                TCD
.393d84		28		plp		                PLP
.393d85		68		pla		                PLA             ; end setdp macro
.393d86		c2 20		rep #$20	                REP #$20        ; set A long
.393d88		a9 40 00	lda #$0040	                LDA #$0040  ;
.393d8b		85 28		sta $28		                STA OPL2_REG_REGION
.393d8d		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393d90		e2 20		sep #$20	                SEP #$20        ; set A short
.393d92		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d94		29 3f		and #$3f	                AND #$3F
.393d96		85 32		sta $32		                STA OPL2_PARAMETER0
.393d98		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d9a		29 c0		and #$c0	                AND #$C0
.393d9c		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d9e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393da0		6b		rtl		                RTL
.393da1						OPL2_GET_VOLUME
.393da1		48		pha		                PHA             ; begin setdp macro
.393da2		08		php		                PHP
.393da3		c2 20		rep #$20	                REP #$20        ; set A long
.393da5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393da8		5b		tcd		                TCD
.393da9		28		plp		                PLP
.393daa		68		pla		                PLA             ; end setdp macro
.393dab		c2 20		rep #$20	                REP #$20        ; set A long
.393dad		a9 40 00	lda #$0040	                LDA #$0040  ;
.393db0		85 28		sta $28		                STA OPL2_REG_REGION
.393db2		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393db5		e2 20		sep #$20	                SEP #$20        ; set A short
.393db7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393db9		29 3f		and #$3f	                AND #$3F
.393dbb		6b		rtl		                RTL
.393dbc						OPL2_SET_ATTACK
.393dbc		48		pha		                PHA             ; begin setdp macro
.393dbd		08		php		                PHP
.393dbe		c2 20		rep #$20	                REP #$20        ; set A long
.393dc0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dc3		5b		tcd		                TCD
.393dc4		28		plp		                PLP
.393dc5		68		pla		                PLA             ; end setdp macro
.393dc6		c2 20		rep #$20	                REP #$20        ; set A long
.393dc8		a9 60 00	lda #$0060	                LDA #$0060  ;
.393dcb		85 28		sta $28		                STA OPL2_REG_REGION
.393dcd		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393dd0		e2 20		sep #$20	                SEP #$20        ; set A short
.393dd2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dd4		29 0f		and #$0f	                AND #$0F
.393dd6		0a		asl a		                ASL
.393dd7		0a		asl a		                ASL
.393dd8		0a		asl a		                ASL
.393dd9		0a		asl a		                ASL
.393dda		85 32		sta $32		                STA OPL2_PARAMETER0
.393ddc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dde		29 0f		and #$0f	                AND #$0F
.393de0		05 32		ora $32		                ORA OPL2_PARAMETER0
.393de2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393de4		6b		rtl		                RTL
.393de5						OPL2_GET_ATTACK
.393de5		48		pha		                PHA             ; begin setdp macro
.393de6		08		php		                PHP
.393de7		c2 20		rep #$20	                REP #$20        ; set A long
.393de9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dec		5b		tcd		                TCD
.393ded		28		plp		                PLP
.393dee		68		pla		                PLA             ; end setdp macro
.393def		c2 20		rep #$20	                REP #$20        ; set A long
.393df1		a9 60 00	lda #$0060	                LDA #$0060
.393df4		85 28		sta $28		                STA OPL2_REG_REGION
.393df6		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393df9		e2 20		sep #$20	                SEP #$20        ; set A short
.393dfb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dfd		29 f0		and #$f0	                AND #$F0
.393dff		4a		lsr a		                LSR
.393e00		4a		lsr a		                LSR
.393e01		4a		lsr a		                LSR
.393e02		4a		lsr a		                LSR
.393e03		6b		rtl		                RTL
.393e04						OPL2_SET_DECAY
.393e04		48		pha		                PHA             ; begin setdp macro
.393e05		08		php		                PHP
.393e06		c2 20		rep #$20	                REP #$20        ; set A long
.393e08		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e0b		5b		tcd		                TCD
.393e0c		28		plp		                PLP
.393e0d		68		pla		                PLA             ; end setdp macro
.393e0e		c2 20		rep #$20	                REP #$20        ; set A long
.393e10		a9 60 00	lda #$0060	                LDA #$0060;
.393e13		85 28		sta $28		                STA OPL2_REG_REGION
.393e15		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393e18		e2 20		sep #$20	                SEP #$20        ; set A short
.393e1a		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e1c		29 0f		and #$0f	                AND #$0F
.393e1e		85 32		sta $32		                STA OPL2_PARAMETER0
.393e20		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e22		29 f0		and #$f0	                AND #$F0
.393e24		05 32		ora $32		                ORA OPL2_PARAMETER0
.393e26		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e28		6b		rtl		                RTL
.393e29						OPL2_GET_DECAY
.393e29		48		pha		                PHA             ; begin setdp macro
.393e2a		08		php		                PHP
.393e2b		c2 20		rep #$20	                REP #$20        ; set A long
.393e2d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e30		5b		tcd		                TCD
.393e31		28		plp		                PLP
.393e32		68		pla		                PLA             ; end setdp macro
.393e33		c2 20		rep #$20	                REP #$20        ; set A long
.393e35		a9 60 00	lda #$0060	                LDA #$0060
.393e38		85 28		sta $28		                STA OPL2_REG_REGION
.393e3a		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393e3d		e2 20		sep #$20	                SEP #$20        ; set A short
.393e3f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e41		29 0f		and #$0f	                AND #$0F
.393e43		6b		rtl		                RTL
.393e44						OPL2_SET_SUSTAIN
.393e44		48		pha		                PHA             ; begin setdp macro
.393e45		08		php		                PHP
.393e46		c2 20		rep #$20	                REP #$20        ; set A long
.393e48		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e4b		5b		tcd		                TCD
.393e4c		28		plp		                PLP
.393e4d		68		pla		                PLA             ; end setdp macro
.393e4e		c2 20		rep #$20	                REP #$20        ; set A long
.393e50		a9 80 00	lda #$0080	                LDA #$0080;
.393e53		85 28		sta $28		                STA OPL2_REG_REGION
.393e55		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393e58		e2 20		sep #$20	                SEP #$20        ; set A short
.393e5a		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e5c		29 0f		and #$0f	                AND #$0F
.393e5e		0a		asl a		                ASL
.393e5f		0a		asl a		                ASL
.393e60		0a		asl a		                ASL
.393e61		0a		asl a		                ASL
.393e62		85 32		sta $32		                STA OPL2_PARAMETER0
.393e64		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e66		29 0f		and #$0f	                AND #$0F
.393e68		05 32		ora $32		                ORA OPL2_PARAMETER0
.393e6a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e6c		6b		rtl		                RTL
.393e6d						OPL2_GET_SUSTAIN
.393e6d		48		pha		                PHA             ; begin setdp macro
.393e6e		08		php		                PHP
.393e6f		c2 20		rep #$20	                REP #$20        ; set A long
.393e71		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e74		5b		tcd		                TCD
.393e75		28		plp		                PLP
.393e76		68		pla		                PLA             ; end setdp macro
.393e77		c2 20		rep #$20	                REP #$20        ; set A long
.393e79		a9 80 00	lda #$0080	                LDA #$0080
.393e7c		85 28		sta $28		                STA OPL2_REG_REGION
.393e7e		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393e81		e2 20		sep #$20	                SEP #$20        ; set A short
.393e83		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e85		29 f0		and #$f0	                AND #$F0
.393e87		4a		lsr a		                LSR
.393e88		4a		lsr a		                LSR
.393e89		4a		lsr a		                LSR
.393e8a		4a		lsr a		                LSR
.393e8b		6b		rtl		                RTL
.393e8c						OPL2_SET_RELEASE
.393e8c		48		pha		                PHA             ; begin setdp macro
.393e8d		08		php		                PHP
.393e8e		c2 20		rep #$20	                REP #$20        ; set A long
.393e90		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e93		5b		tcd		                TCD
.393e94		28		plp		                PLP
.393e95		68		pla		                PLA             ; end setdp macro
.393e96		c2 20		rep #$20	                REP #$20        ; set A long
.393e98		a9 80 00	lda #$0080	                LDA #$0080;
.393e9b		85 28		sta $28		                STA OPL2_REG_REGION
.393e9d		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393ea0		e2 20		sep #$20	                SEP #$20        ; set A short
.393ea2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393ea4		29 0f		and #$0f	                AND #$0F
.393ea6		85 32		sta $32		                STA OPL2_PARAMETER0
.393ea8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eaa		29 f0		and #$f0	                AND #$F0
.393eac		05 32		ora $32		                ORA OPL2_PARAMETER0
.393eae		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393eb0		6b		rtl		                RTL
.393eb1						OPL2_GET_RELEASE
.393eb1		48		pha		                PHA             ; begin setdp macro
.393eb2		08		php		                PHP
.393eb3		c2 20		rep #$20	                REP #$20        ; set A long
.393eb5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393eb8		5b		tcd		                TCD
.393eb9		28		plp		                PLP
.393eba		68		pla		                PLA             ; end setdp macro
.393ebb		c2 20		rep #$20	                REP #$20        ; set A long
.393ebd		a9 80 00	lda #$0080	                LDA #$0080
.393ec0		85 28		sta $28		                STA OPL2_REG_REGION
.393ec2		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.393ec5		e2 20		sep #$20	                SEP #$20        ; set A short
.393ec7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ec9		29 0f		and #$0f	                AND #$0F
.393ecb		6b		rtl		                RTL
.393ecc						OPL2_SET_FNUMBER
.393ecc		48		pha		                PHA             ; begin setdp macro
.393ecd		08		php		                PHP
.393ece		c2 20		rep #$20	                REP #$20        ; set A long
.393ed0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ed3		5b		tcd		                TCD
.393ed4		28		plp		                PLP
.393ed5		68		pla		                PLA             ; end setdp macro
.393ed6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed8		18		clc		                CLC
.393ed9		a5 27		lda $27		                LDA OPL2_CHANNEL
.393edb		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393edd		69 a0		adc #$a0	                ADC #$A0
.393edf		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ee1		a9 00		lda #$00	                LDA #$00
.393ee3		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ee5		c2 30		rep #$30	                REP #$30        ; set A&X long
.393ee7		18		clc		                CLC
.393ee8		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393eeb		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393eed		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eef		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ef2		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ef4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ef6		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393ef8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393efa		18		clc		                CLC
.393efb		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393efd		69 10		adc #$10	                ADC #$10
.393eff		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f01		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393f03		29 03		and #$03	                AND #$03
.393f05		85 33		sta $33		                STA OPL2_PARAMETER1
.393f07		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f09		29 fc		and #$fc	                AND #$FC
.393f0b		05 33		ora $33		                ORA OPL2_PARAMETER1
.393f0d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f0f		6b		rtl		                RTL
.393f10						OPL2_GET_FNUMBER
.393f10		48		pha		                PHA             ; begin setdp macro
.393f11		08		php		                PHP
.393f12		c2 20		rep #$20	                REP #$20        ; set A long
.393f14		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f17		5b		tcd		                TCD
.393f18		28		plp		                PLP
.393f19		68		pla		                PLA             ; end setdp macro
.393f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f1c		18		clc		                CLC
.393f1d		a5 27		lda $27		                LDA OPL2_CHANNEL
.393f1f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f21		69 a0		adc #$a0	                ADC #$A0
.393f23		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f25		a9 00		lda #$00	                LDA #$00
.393f27		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f29		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f2b		18		clc		                CLC
.393f2c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f2f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f31		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f33		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f36		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f38		e2 20		sep #$20	                SEP #$20        ; set A short
.393f3a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f3c		85 32		sta $32		                STA OPL2_PARAMETER0
.393f3e		18		clc		                CLC
.393f3f		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393f41		69 10		adc #$10	                ADC #$10
.393f43		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f45		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f47		29 03		and #$03	                AND #$03
.393f49		85 33		sta $33		                STA OPL2_PARAMETER1
.393f4b		6b		rtl		                RTL
.393f4c						OPL2_Set_Frequency
.393f4c		6b		rtl		                RTL
.393f4d						OPL2_Get_Frequency
.393f4d		6b		rtl		                RTL
.393f4e						OPL2_SET_BLOCK
.393f4e		48		pha		                PHA             ; begin setdp macro
.393f4f		08		php		                PHP
.393f50		c2 20		rep #$20	                REP #$20        ; set A long
.393f52		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f55		5b		tcd		                TCD
.393f56		28		plp		                PLP
.393f57		68		pla		                PLA             ; end setdp macro
.393f58		e2 20		sep #$20	                SEP #$20        ; set A short
.393f5a		18		clc		                CLC
.393f5b		a5 27		lda $27		                LDA OPL2_CHANNEL
.393f5d		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f5f		69 b0		adc #$b0	                ADC #$B0
.393f61		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f63		a9 00		lda #$00	                LDA #$00
.393f65		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f67		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f69		18		clc		                CLC
.393f6a		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f6d		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f6f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f71		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f74		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f76		e2 20		sep #$20	                SEP #$20        ; set A short
.393f78		a5 31		lda $31		                LDA OPL2_OCTAVE
.393f7a		29 07		and #$07	                AND #$07
.393f7c		0a		asl a		                ASL
.393f7d		0a		asl a		                ASL
.393f7e		85 31		sta $31		                STA OPL2_OCTAVE
.393f80		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f82		29 e3		and #$e3	                AND #$E3
.393f84		05 31		ora $31		                ORA OPL2_OCTAVE
.393f86		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f88		60		rts		                RTS
.393f89						OPL2_SET_KEYON
.393f89		48		pha		                PHA             ; begin setdp macro
.393f8a		08		php		                PHP
.393f8b		c2 20		rep #$20	                REP #$20        ; set A long
.393f8d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f90		5b		tcd		                TCD
.393f91		28		plp		                PLP
.393f92		68		pla		                PLA             ; end setdp macro
.393f93		e2 20		sep #$20	                SEP #$20        ; set A short
.393f95		18		clc		                CLC
.393f96		a5 27		lda $27		                LDA OPL2_CHANNEL
.393f98		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f9a		69 b0		adc #$b0	                ADC #$B0
.393f9c		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f9e		a9 00		lda #$00	                LDA #$00
.393fa0		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393fa2		c2 30		rep #$30	                REP #$30        ; set A&X long
.393fa4		18		clc		                CLC
.393fa5		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393fa8		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393faa		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393fac		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393faf		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393fb1		e2 20		sep #$20	                SEP #$20        ; set A short
.393fb3		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393fb5		29 01		and #$01	                AND #$01
.393fb7		f0 02		beq $393fbb	                BEQ SET_KEYON_OFF
.393fb9		a9 20		lda #$20	                LDA #$20
.393fbb						    SET_KEYON_OFF
.393fbb		85 32		sta $32		                STA OPL2_PARAMETER0
.393fbd		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393fbf		29 df		and #$df	                AND #$DF
.393fc1		05 32		ora $32		                ORA OPL2_PARAMETER0
.393fc3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393fc5		60		rts		                RTS
.393fc6						OPL2_SET_FEEDBACK
.393fc6		48		pha		                PHA             ; begin setdp macro
.393fc7		08		php		                PHP
.393fc8		c2 20		rep #$20	                REP #$20        ; set A long
.393fca		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fcd		5b		tcd		                TCD
.393fce		28		plp		                PLP
.393fcf		68		pla		                PLA             ; end setdp macro
.393fd0		e2 20		sep #$20	                SEP #$20        ; set A short
.393fd2		18		clc		              CLC
.393fd3		a5 27		lda $27		              LDA OPL2_CHANNEL
.393fd5		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fd7		69 c0		adc #$c0	              ADC #$C0
.393fd9		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fdb		a9 00		lda #$00	              LDA #$00
.393fdd		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fdf		c2 30		rep #$30	                REP #$30        ; set A&X long
.393fe1		18		clc		              CLC
.393fe2		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fe5		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fe7		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fe9		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fec		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fee		e2 20		sep #$20	                SEP #$20        ; set A short
.393ff0		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393ff2		29 07		and #$07	              AND #$07
.393ff4		0a		asl a		              ASL
.393ff5		85 32		sta $32		              STA OPL2_PARAMETER0
.393ff7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ff9		29 01		and #$01	              AND #$01
.393ffb		05 32		ora $32		              ORA OPL2_PARAMETER0
.393ffd		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fff		6b		rtl		                RTL
.394000						OPL2_SET_SYNTHMODE
.394000		48		pha		                PHA             ; begin setdp macro
.394001		08		php		                PHP
.394002		c2 20		rep #$20	                REP #$20        ; set A long
.394004		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394007		5b		tcd		                TCD
.394008		28		plp		                PLP
.394009		68		pla		                PLA             ; end setdp macro
.39400a		08		php		              PHP ; Push the Carry
.39400b		e2 20		sep #$20	                SEP #$20        ; set A short
.39400d		18		clc		              CLC
.39400e		a5 27		lda $27		              LDA OPL2_CHANNEL
.394010		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.394012		69 c0		adc #$c0	              ADC #$C0
.394014		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.394016		a9 00		lda #$00	              LDA #$00
.394018		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39401a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39401c		18		clc		              CLC
.39401d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.394020		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.394022		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394024		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394027		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394029		28		plp		              PLP ; Pull the Carry out
.39402a		e2 20		sep #$20	                SEP #$20        ; set A short
.39402c		b0 08		bcs $394036	              BCS OPL2_Set_Synthmode_Set;
.39402e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394030		29 fe		and #$fe	              AND #$FE
.394032		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394034		80 06		bra $39403c	              BRA OPL2_Set_Synthmode_Exit
.394036						OPL2_Set_Synthmode_Set
.394036		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394038		09 01		ora #$01	              ORA #$01
.39403a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39403c						OPL2_Set_Synthmode_Exit
.39403c		6b		rtl		                RTL
.39403d						OPL2_SET_DEEPTREMOLO
.39403d		48		pha		                PHA             ; begin setdp macro
.39403e		08		php		                PHP
.39403f		c2 20		rep #$20	                REP #$20        ; set A long
.394041		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394044		5b		tcd		                TCD
.394045		28		plp		                PLP
.394046		68		pla		                PLA             ; end setdp macro
.394047		c2 20		rep #$20	                REP #$20        ; set A long
.394049		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.39404c		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39404e		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394051		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394053		e2 20		sep #$20	                SEP #$20        ; set A short
.394055		b0 08		bcs $39405f	              BCS OPL2_Set_DeepTremolo_Set;
.394057		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394059		29 7f		and #$7f	              AND #$7F
.39405b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39405d		80 06		bra $394065	              BRA OPL2_Set_DeepTremolo_Exit
.39405f						OPL2_Set_DeepTremolo_Set
.39405f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394061		09 80		ora #$80	              ORA #$80
.394063		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394065						OPL2_Set_DeepTremolo_Exit
.394065		6b		rtl		                RTL
.394066						OPL2_SET_DEEPVIBRATO
.394066		48		pha		                PHA             ; begin setdp macro
.394067		08		php		                PHP
.394068		c2 20		rep #$20	                REP #$20        ; set A long
.39406a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39406d		5b		tcd		                TCD
.39406e		28		plp		                PLP
.39406f		68		pla		                PLA             ; end setdp macro
.394070		c2 20		rep #$20	                REP #$20        ; set A long
.394072		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394075		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394077		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39407a		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39407c		e2 20		sep #$20	                SEP #$20        ; set A short
.39407e		b0 08		bcs $394088	              BCS OPL2_Set_DeepVibrato_Set;
.394080		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394082		29 bf		and #$bf	              AND #$BF
.394084		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394086		80 06		bra $39408e	              BRA OPL2_Set_DeepVibrato_Exit
.394088						OPL2_Set_DeepVibrato_Set
.394088		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39408a		09 40		ora #$40	              ORA #$40
.39408c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39408e						OPL2_Set_DeepVibrato_Exit
.39408e		6b		rtl		                RTL
.39408f						OPL2_SET_PERCUSSION
.39408f		48		pha		                PHA             ; begin setdp macro
.394090		08		php		                PHP
.394091		c2 20		rep #$20	                REP #$20        ; set A long
.394093		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394096		5b		tcd		                TCD
.394097		28		plp		                PLP
.394098		68		pla		                PLA             ; end setdp macro
.394099		c2 20		rep #$20	                REP #$20        ; set A long
.39409b		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39409e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940a0		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940a3		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3940a7		b0 08		bcs $3940b1	                BCS OPL2_Set_Percussion_Set;
.3940a9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940ab		29 df		and #$df	                AND #$DF
.3940ad		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940af		80 06		bra $3940b7	                BRA OPL2_Set_Percussion_Exit
.3940b1						OPL2_Set_Percussion_Set
.3940b1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940b3		09 20		ora #$20	                ORA #$20
.3940b5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940b7						OPL2_Set_Percussion_Exit
.3940b7		6b		rtl		                RTL
.3940b8						OPL2_SET_DRUMS
.3940b8		48		pha		                PHA             ; begin setdp macro
.3940b9		08		php		                PHP
.3940ba		c2 20		rep #$20	                REP #$20        ; set A long
.3940bc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3940bf		5b		tcd		                TCD
.3940c0		28		plp		                PLP
.3940c1		68		pla		                PLA             ; end setdp macro
.3940c2		c2 20		rep #$20	                REP #$20        ; set A long
.3940c4		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.3940c7		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940c9		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940cc		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3940d0		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940d2		29 1f		and #$1f	                AND #$1F
.3940d4		85 32		sta $32		                STA OPL2_PARAMETER0
.3940d6		49 ff		eor #$ff	                EOR #$FF
.3940d8		85 33		sta $33		                STA OPL2_PARAMETER1
.3940da		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940dc		25 33		and $33		                AND OPL2_PARAMETER1
.3940de		05 32		ora $32		                ORA OPL2_PARAMETER0
.3940e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940e2		6b		rtl		                RTL
.3940e3						OPL2_SET_WAVEFORM
.3940e3		48		pha		                PHA             ; begin setdp macro
.3940e4		08		php		                PHP
.3940e5		c2 20		rep #$20	                REP #$20        ; set A long
.3940e7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3940ea		5b		tcd		                TCD
.3940eb		28		plp		                PLP
.3940ec		68		pla		                PLA             ; end setdp macro
.3940ed		c2 20		rep #$20	                REP #$20        ; set A long
.3940ef		a9 e0 00	lda #$00e0	                LDA #$00E0;
.3940f2		85 28		sta $28		                STA OPL2_REG_REGION
.3940f4		20 08 41	jsr $394108	                JSR OPL2_GET_REG_OFFSET
.3940f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3940f9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940fb		29 03		and #$03	                AND #$03
.3940fd		85 32		sta $32		                STA OPL2_PARAMETER0
.3940ff		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394101		29 fc		and #$fc	                AND #$FC
.394103		05 32		ora $32		                ORA OPL2_PARAMETER0
.394105		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394107		6b		rtl		                RTL
.394108						OPL2_GET_REG_OFFSET
.394108		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39410a		a5 27		lda $27		                LDA OPL2_CHANNEL
.39410c		29 0f		and #$0f	                AND #$0F
.39410e		aa		tax		                TAX
.39410f		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.394111		d0 06		bne $394119	                BNE OPL2_Get_Register_Offset_l0
.394113		bf 50 17 39	lda $391750,x	                LDA @lregisterOffsets_operator0, X
.394117		80 04		bra $39411d	                BRA OPL2_Get_Register_Offset_exit
.394119						OPL2_Get_Register_Offset_l0
.394119		bf 59 17 39	lda $391759,x	                LDA @lregisterOffsets_operator1, X
.39411d						OPL2_Get_Register_Offset_exit
.39411d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39411f		a9 00		lda #$00	                LDA #$00
.394121		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.394123		c2 30		rep #$30	                REP #$30        ; set A&X long
.394125		18		clc		                CLC
.394126		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.394129		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39412b		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.39412d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39412f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394132		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394134		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.394135						ITRACE
.394135		08		php		                PHP
.394136		c2 30		rep #$30	                REP #$30        ; set A&X long
.394138		8b		phb		                PHB                 ; Print the text
.394139		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.39413b		aa		tax		                TAX                 ; ... into X
.39413c		e2 20		sep #$20	                SEP #$20        ; set A short
.39413e		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.394140		48		pha		                PHA
.394141		ab		plb		                PLB                 ; ... into B
.394142		22 90 07 39	jsl $390790	                JSL IPUTS           ; Print the string
.394146		c2 20		rep #$20	                REP #$20        ; set A long
.394148		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.39414a		83 08		sta $08,s	                STA #8,S
.39414c		a3 02		lda $02,s	                LDA #2,S
.39414e		83 06		sta $06,s	                STA #6,S
.394150		ab		plb		                PLB
.394151		68		pla		                PLA                 ; Clean up the stack
.394152		68		pla		                PLA
.394153		28		plp		                PLP
.394154		6b		rtl		                RTL
.394155						ISETTIMEOUT
.394155		8b		phb		                PHB
.394156		0b		phd		                PHD
.394157		08		php		                PHP
.394158		48		pha		                PHA             ; begin setdbr macro
.394159		08		php		                PHP
.39415a		e2 20		sep #$20	                SEP #$20        ; set A short
.39415c		a9 00		lda #$00	                LDA #0
.39415e		48		pha		                PHA
.39415f		ab		plb		                PLB
.394160		28		plp		                PLP
.394161		68		pla		                PLA             ; end setdbr macro
.394162		48		pha		                PHA             ; begin setdp macro
.394163		08		php		                PHP
.394164		c2 20		rep #$20	                REP #$20        ; set A long
.394166		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394169		5b		tcd		                TCD
.39416a		28		plp		                PLP
.39416b		68		pla		                PLA             ; end setdp macro
.39416c		78		sei		                SEI                             ; We don't want to be interrupted
.39416d		e2 20		sep #$20	                SEP #$20        ; set A short
.39416f		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394171		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.394173		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.394175		85 0c		sta $032c	                STA @b BIOS_FLAGS
.394177		28		plp		done            PLP
.394178		2b		pld		                PLD
.394179		ab		plb		                PLB
.39417a		6b		rtl		                RTL
.39417b						ICMDBLOCK
.39417b		0b		phd		                PHD
.39417c		08		php		                PHP
.39417d		48		pha		                PHA             ; begin setdp macro
.39417e		08		php		                PHP
.39417f		c2 20		rep #$20	                REP #$20        ; set A long
.394181		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394184		5b		tcd		                TCD
.394185		28		plp		                PLP
.394186		68		pla		                PLA             ; end setdp macro
.394187		e2 20		sep #$20	                SEP #$20        ; set A short
.394189		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.39418b		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.39418d		d0 06		bne $394195	                BNE ret_success             ; No: just return
.39418f		22 36 69 39	jsl $396936	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.394193		90 0c		bcc $3941a1	                BCC pass_failure
.394195						ret_success
.394195		e2 20		sep #$20	                SEP #$20        ; set A short
.394197		64 00		stz $0320	                STZ BIOS_STATUS
.394199		28		plp		                PLP
.39419a		2b		pld		                PLD
.39419b		38		sec		                SEC
.39419c		6b		rtl		                RTL
.39419d						ret_failure
.39419d		e2 20		sep #$20	                SEP #$20        ; set A short
.39419f		85 00		sta $0320	                STA BIOS_STATUS
.3941a1		28		plp		pass_failure    PLP
.3941a2		2b		pld		                PLD
.3941a3		18		clc		                CLC
.3941a4		6b		rtl		                RTL
.3941a5						IGETBLOCK
.3941a5		5a		phy		                PHY
.3941a6		0b		phd		                PHD
.3941a7		8b		phb		                PHB
.3941a8		08		php		                PHP
.3941a9		48		pha		                PHA             ; begin setdbr macro
.3941aa		08		php		                PHP
.3941ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ad		a9 00		lda #$00	                LDA #0
.3941af		48		pha		                PHA
.3941b0		ab		plb		                PLB
.3941b1		28		plp		                PLP
.3941b2		68		pla		                PLA             ; end setdbr macro
.3941b3		48		pha		                PHA             ; begin setdp macro
.3941b4		08		php		                PHP
.3941b5		c2 20		rep #$20	                REP #$20        ; set A long
.3941b7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941ba		5b		tcd		                TCD
.3941bb		28		plp		                PLP
.3941bc		68		pla		                PLA             ; end setdp macro
.3941bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3941bf		a0 00 00	ldy #$0000	                LDY #0
.3941c2		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.3941c4		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.3941c6		c8		iny		                INY
.3941c7		c0 00 02	cpy #$0200	                CPY #512
.3941ca		d0 f8		bne $3941c4	                BNE clr_loop
.3941cc		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941ce		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941d0		f0 14		beq $3941e6	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.3941d2		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.3941d4		f0 18		beq $3941ee	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.3941d6		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941d8		f0 1c		beq $3941f6	                BEQ hd_getblock
.3941da		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941dc						ret_failure
.3941dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3941de		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941e0		28		plp		                PLP
.3941e1		ab		plb		                PLB
.3941e2		2b		pld		                PLD
.3941e3		7a		ply		                PLY
.3941e4		38		sec		                SEC                                 ; Return failure
.3941e5		6b		rtl		                RTL
.3941e6		22 58 5e 39	jsl $395e58	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.3941ea		b0 12		bcs $3941fe	                BCS ret_success
.3941ec		80 ee		bra $3941dc	                BRA ret_failure
.3941ee		22 3b 67 39	jsl $39673b	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.3941f2		b0 0a		bcs $3941fe	                BCS ret_success
.3941f4		80 e6		bra $3941dc	                BRA ret_failure
.3941f6		22 49 6d 39	jsl $396d49	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.3941fa		b0 02		bcs $3941fe	                BCS ret_success
.3941fc		80 de		bra $3941dc	                BRA ret_failure
.3941fe						ret_success
.3941fe		e2 20		sep #$20	                SEP #$20        ; set A short
.394200		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394202		28		plp		                PLP
.394203		ab		plb		                PLB
.394204		2b		pld		                PLD
.394205		7a		ply		                PLY
.394206		38		sec		                SEC                                 ; Return success
.394207		6b		rtl		                RTL
.394208						IPUTBLOCK
.394208		0b		phd		                PHD
.394209		8b		phb		                PHB
.39420a		08		php		                PHP
.39420b		48		pha		                PHA             ; begin setdbr macro
.39420c		08		php		                PHP
.39420d		e2 20		sep #$20	                SEP #$20        ; set A short
.39420f		a9 00		lda #$00	                LDA #0
.394211		48		pha		                PHA
.394212		ab		plb		                PLB
.394213		28		plp		                PLP
.394214		68		pla		                PLA             ; end setdbr macro
.394215		48		pha		                PHA             ; begin setdp macro
.394216		08		php		                PHP
.394217		c2 20		rep #$20	                REP #$20        ; set A long
.394219		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39421c		5b		tcd		                TCD
.39421d		28		plp		                PLP
.39421e		68		pla		                PLA             ; end setdp macro
.39421f		e2 20		sep #$20	                SEP #$20        ; set A short
.394221		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394223		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394225		f0 13		beq $39423a	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.394227		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.394229		f0 17		beq $394242	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.39422b		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39422d		f0 1b		beq $39424a	                BEQ hd_putblock
.39422f		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394231						ret_failure
.394231		e2 20		sep #$20	                SEP #$20        ; set A short
.394233		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394235		28		plp		                PLP
.394236		ab		plb		                PLB
.394237		2b		pld		                PLD
.394238		18		clc		                CLC                                 ; Return failure
.394239		6b		rtl		                RTL
.39423a		22 f8 5e 39	jsl $395ef8	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.39423e		90 f1		bcc $394231	                BCC ret_failure
.394240		80 10		bra $394252	                BRA ret_success
.394242		22 a0 67 39	jsl $3967a0	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.394246		90 e9		bcc $394231	                BCC ret_failure
.394248		80 08		bra $394252	                BRA ret_success
.39424a		22 da 6d 39	jsl $396dda	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.39424e		90 e1		bcc $394231	                BCC ret_failure
.394250		80 00		bra $394252	                BRA ret_success
.394252						ret_success
.394252		e2 20		sep #$20	                SEP #$20        ; set A short
.394254		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394256		28		plp		                PLP
.394257		ab		plb		                PLB
.394258		2b		pld		                PLD
.394259		38		sec		                SEC                                 ; Return success
.39425a		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.39425b						DOS_DIROPEN
.39425b		da		phx		                PHX
.39425c		5a		phy		                PHY
.39425d		0b		phd		                PHD
.39425e		8b		phb		                PHB
.39425f		08		php		                PHP
.394260		48		pha		                PHA             ; begin setdbr macro
.394261		08		php		                PHP
.394262		e2 20		sep #$20	                SEP #$20        ; set A short
.394264		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394266		48		pha		                PHA
.394267		ab		plb		                PLB
.394268		28		plp		                PLP
.394269		68		pla		                PLA             ; end setdbr macro
.39426a		48		pha		                PHA             ; begin setdp macro
.39426b		08		php		                PHP
.39426c		c2 20		rep #$20	                REP #$20        ; set A long
.39426e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394271		5b		tcd		                TCD
.394272		28		plp		                PLP
.394273		68		pla		                PLA             ; end setdp macro
.394274		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394277		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.39427a		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.39427d		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394280		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394283		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394285		85 18		sta $0338	                STA DOS_DIR_PTR
.394287		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39428a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39428c		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39428e		e2 20		sep #$20	                SEP #$20        ; set A short
.394290		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394293		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394295		d0 24		bne $3942bb	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394297						fetch_fat12
.394297		e2 20		sep #$20	                SEP #$20        ; set A short
.394299		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.39429b		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39429e		c2 20		rep #$20	                REP #$20        ; set A long
.3942a0		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.3942a2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942a4		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942a6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942a8		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.3942ab		85 02		sta $0322	                STA BIOS_LBA
.3942ad		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942b0		85 04		sta $0324	                STA BIOS_LBA+2
.3942b2		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.3942b6		b0 1f		bcs $3942d7	                BCS do_success              ; If sucessful, set the directory cursor
.3942b8		82 15 17	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3942bb						fetch_fat32
.3942bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3942bd		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.3942bf		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.3942c2		c2 20		rep #$20	                REP #$20        ; set A long
.3942c4		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942c7		85 10		sta $0330	                STA DOS_CLUS_ID
.3942c9		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942cc		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942ce		22 3e 48 39	jsl $39483e	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3942d2		b0 03		bcs $3942d7	                BCS do_success              ; If successful: set the directory cursor
.3942d4		82 f9 16	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3942d7		82 fd 16	brl $3959d7	do_success      BRL IF_SUCCESS
.3942da						DOS_DIRFIRST
.3942da		0b		phd		                PHD
.3942db		08		php		                PHP
.3942dc		48		pha		                PHA             ; begin setdp macro
.3942dd		08		php		                PHP
.3942de		c2 20		rep #$20	                REP #$20        ; set A long
.3942e0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942e3		5b		tcd		                TCD
.3942e4		28		plp		                PLP
.3942e5		68		pla		                PLA             ; end setdp macro
.3942e6		c2 20		rep #$20	                REP #$20        ; set A long
.3942e8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3942eb		85 18		sta $0338	                STA DOS_DIR_PTR
.3942ed		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942f0		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942f2		28		plp		                PLP
.3942f3		2b		pld		                PLD
.3942f4		6b		rtl		                RTL
.3942f5						DOS_DIRNEXT
.3942f5		da		phx		                PHX
.3942f6		5a		phy		                PHY
.3942f7		0b		phd		                PHD
.3942f8		8b		phb		                PHB
.3942f9		08		php		                PHP
.3942fa		48		pha		                PHA             ; begin setdbr macro
.3942fb		08		php		                PHP
.3942fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3942fe		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394300		48		pha		                PHA
.394301		ab		plb		                PLB
.394302		28		plp		                PLP
.394303		68		pla		                PLA             ; end setdbr macro
.394304		48		pha		                PHA             ; begin setdp macro
.394305		08		php		                PHP
.394306		c2 20		rep #$20	                REP #$20        ; set A long
.394308		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39430b		5b		tcd		                TCD
.39430c		28		plp		                PLP
.39430d		68		pla		                PLA             ; end setdp macro
.39430e		c2 20		rep #$20	                REP #$20        ; set A long
.394310		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.394311		a5 18		lda $0338	                LDA DOS_DIR_PTR
.394313		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.394316		85 18		sta $0338	                STA DOS_DIR_PTR
.394318		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39431a		69 00 00	adc #$0000	                ADC #0
.39431d		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39431f		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.394320		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.394323		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.394325		85 28		sta $0348	                STA DOS_TEMP
.394327		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.39432a		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.39432c		85 2a		sta $034a	                STA DOS_TEMP+2
.39432e		30 0c		bmi $39433c	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.394330		f0 03		beq $394335	                BEQ check_lower
.394332		82 a2 16	brl $3959d7	                BRL IF_SUCCESS
.394335		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394337		f0 03		beq $39433c	                BEQ get_next_block
.394339		82 9b 16	brl $3959d7	                BRL IF_SUCCESS
.39433c						get_next_block
.39433c		e2 20		sep #$20	                SEP #$20        ; set A short
.39433e		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394341		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.394343		f0 38		beq $39437d	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.394345						next_sector
.394345		c2 20		rep #$20	                REP #$20        ; set A long
.394347		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39434a		1a		inc a		                INC A
.39434b		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.39434e		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394351		d0 07		bne $39435a	                BNE read_sector
.394353		e2 20		sep #$20	                SEP #$20        ; set A short
.394355		a9 00		lda #$00	                LDA #0
.394357		82 72 16	brl $3959cc	                BRL IF_FAILURE
.39435a						read_sector
.39435a		c2 20		rep #$20	                REP #$20        ; set A long
.39435c		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.39435f		85 02		sta $0322	                STA BIOS_LBA
.394361		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394364		85 04		sta $0324	                STA BIOS_LBA+2
.394366		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394369		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39436b		85 18		sta $0338	                STA DOS_DIR_PTR
.39436d		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394370		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394372		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394374		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394378		b0 39		bcs $3943b3	                BCS do_success              ; If successful: set the directory cursor
.39437a		82 53 16	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39437d						next_cluster
.39437d		c2 20		rep #$20	                REP #$20        ; set A long
.39437f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394382		85 10		sta $0330	                STA DOS_CLUS_ID
.394384		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394387		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394389		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39438c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39438e		85 18		sta $0338	                STA DOS_DIR_PTR
.394390		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394393		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394395		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394397		22 4e 4c 39	jsl $394c4e	                JSL NEXTCLUSTER             ; Try to find the next cluster
.39439b		b0 03		bcs $3943a0	                BCS set_next
.39439d		82 30 16	brl $3959d0	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.3943a0		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.3943a2		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943a5		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3943a7		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3943aa		22 3e 48 39	jsl $39483e	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3943ae		b0 03		bcs $3943b3	                BCS do_success              ; If successful: set the directory cursor
.3943b0		82 1d 16	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3943b3		82 21 16	brl $3959d7	do_success      BRL IF_SUCCESS
.3943b6						DOS_DIRFINDFREE
.3943b6		da		phx		                PHX
.3943b7		5a		phy		                PHY
.3943b8		0b		phd		                PHD
.3943b9		8b		phb		                PHB
.3943ba		08		php		                PHP
.3943bb		48		pha		                PHA             ; begin setdbr macro
.3943bc		08		php		                PHP
.3943bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3943bf		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943c1		48		pha		                PHA
.3943c2		ab		plb		                PLB
.3943c3		28		plp		                PLP
.3943c4		68		pla		                PLA             ; end setdbr macro
.3943c5		48		pha		                PHA             ; begin setdp macro
.3943c6		08		php		                PHP
.3943c7		c2 20		rep #$20	                REP #$20        ; set A long
.3943c9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943cc		5b		tcd		                TCD
.3943cd		28		plp		                PLP
.3943ce		68		pla		                PLA             ; end setdp macro
.3943cf		22 59 56 39	jsl $395659	                JSL IF_DIROPEN
.3943d3		b0 06		bcs $3943db	                BCS start_walk
.3943d5		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.3943d8		82 28 00	brl $394403	                BRL ret_failure
.3943db		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.3943de						chk_entry
.3943de		e2 20		sep #$20	                SEP #$20        ; set A short
.3943e0		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.3943e2		f0 1c		beq $394400	                BEQ ret_success             ; If 0: we have a blank... return it
.3943e4		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.3943e6		f0 18		beq $394400	                BEQ ret_success             ; Yes: return it
.3943e8		22 93 56 39	jsl $395693	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3943ec		b0 ed		bcs $3943db	                BCS start_walk              ; If we got one, start walking it
.3943ee		22 06 44 39	jsl $394406	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3943f2		90 0f		bcc $394403	                BCC ret_failure             ; If that didn't work, return the failure
.3943f4		c2 20		rep #$20	                REP #$20        ; set A long
.3943f6		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3943f9		85 18		sta $0338	                STA DOS_DIR_PTR
.3943fb		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943fe		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394400		82 d4 15	brl $3959d7	ret_success     BRL IF_SUCCESS
.394403		82 c6 15	brl $3959cc	ret_failure     BRL IF_FAILURE
.394406						DOS_DIRAPPEND
.394406		da		phx		                PHX
.394407		8b		phb		                PHB
.394408		0b		phd		                PHD
.394409		08		php		                PHP
.39440a		48		pha		                PHA             ; begin setdbr macro
.39440b		08		php		                PHP
.39440c		e2 20		sep #$20	                SEP #$20        ; set A short
.39440e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394410		48		pha		                PHA
.394411		ab		plb		                PLB
.394412		28		plp		                PLP
.394413		68		pla		                PLA             ; end setdbr macro
.394414		48		pha		                PHA             ; begin setdp macro
.394415		08		php		                PHP
.394416		c2 20		rep #$20	                REP #$20        ; set A long
.394418		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39441b		5b		tcd		                TCD
.39441c		28		plp		                PLP
.39441d		68		pla		                PLA             ; end setdp macro
.39441e		e2 20		sep #$20	                SEP #$20        ; set A short
.394420		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.394423		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.394425		f0 09		beq $394430	                BEQ clr_sector                  ; Yes: clear out the directory data
.394427						ret_failure
.394427		e2 20		sep #$20	                SEP #$20        ; set A short
.394429		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.39442b		85 0e		sta $032e	                STA DOS_STATUS
.39442d		82 3e 00	brl $39446e	                BRL pass_failure
.394430						clr_sector
.394430		c2 20		rep #$20	                REP #$20        ; set A long
.394432		a9 00 00	lda #$0000	                LDA #0
.394435		a2 00 00	ldx #$0000	                LDX #0
.394438		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.39443b		e8		inx		                INX
.39443c		e8		inx		                INX
.39443d		e0 00 02	cpx #$0200	                CPX #512
.394440		d0 f6		bne $394438	                BNE clr_loop
.394442		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.394445		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394447		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39444a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39444c		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.39444f		85 10		sta $0330	                STA DOS_CLUS_ID
.394451		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394454		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394456		22 6f 50 39	jsl $39506f	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.39445a		90 12		bcc $39446e	                BCC pass_failure                ; If there was an error, pass it up the chain
.39445c		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.39445f		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394462		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394465		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394468		28		plp		ret_success     PLP
.394469		2b		pld		                PLD
.39446a		ab		plb		                PLB
.39446b		fa		plx		                PLX
.39446c		38		sec		                SEC
.39446d		6b		rtl		                RTL
.39446e		28		plp		pass_failure    PLP
.39446f		2b		pld		                PLD
.394470		ab		plb		                PLB
.394471		fa		plx		                PLX
.394472		18		clc		                CLC
.394473		6b		rtl		                RTL
.394474						DOS_DIRWRITE
.394474		da		phx		                PHX
.394475		5a		phy		                PHY
.394476		0b		phd		                PHD
.394477		8b		phb		                PHB
.394478		08		php		                PHP
.394479		48		pha		                PHA             ; begin setdbr macro
.39447a		08		php		                PHP
.39447b		e2 20		sep #$20	                SEP #$20        ; set A short
.39447d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39447f		48		pha		                PHA
.394480		ab		plb		                PLB
.394481		28		plp		                PLP
.394482		68		pla		                PLA             ; end setdbr macro
.394483		48		pha		                PHA             ; begin setdp macro
.394484		08		php		                PHP
.394485		c2 20		rep #$20	                REP #$20        ; set A long
.394487		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39448a		5b		tcd		                TCD
.39448b		28		plp		                PLP
.39448c		68		pla		                PLA             ; end setdp macro
.39448d		e2 20		sep #$20	                SEP #$20        ; set A short
.39448f		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394492		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394494		f0 1f		beq $3944b5	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394496						write_sector
.394496		c2 20		rep #$20	                REP #$20        ; set A long
.394498		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.39449b		85 02		sta $0322	                STA BIOS_LBA
.39449d		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3944a0		85 04		sta $0324	                STA BIOS_LBA+2
.3944a2		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3944a5		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3944a7		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3944aa		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3944ac		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.3944b0		b0 1f		bcs $3944d1	                BCS ret_success
.3944b2		82 17 15	brl $3959cc	ret_failure     BRL IF_FAILURE
.3944b5						write_cluster
.3944b5		c2 20		rep #$20	                REP #$20        ; set A long
.3944b7		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.3944ba		85 10		sta $0330	                STA DOS_CLUS_ID
.3944bc		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3944bf		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944c1		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3944c4		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3944c6		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3944c9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3944cb		22 7b 48 39	jsl $39487b	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.3944cf		90 e1		bcc $3944b2	                BCC ret_failure
.3944d1		82 03 15	brl $3959d7	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38						FD_STAT_OPEN = $38                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					DOS_FILE_BUFFS          = $38B000
=3719168					DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.3944d4						DOS_INIT
.3944d4		8b		phb		                PHB
.3944d5		0b		phd		                PHD
.3944d6		08		php		                PHP
.3944d7		48		pha		                PHA             ; begin setdbr macro
.3944d8		08		php		                PHP
.3944d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3944db		a9 00		lda #$00	                LDA #0
.3944dd		48		pha		                PHA
.3944de		ab		plb		                PLB
.3944df		28		plp		                PLP
.3944e0		68		pla		                PLA             ; end setdbr macro
.3944e1		48		pha		                PHA             ; begin setdp macro
.3944e2		08		php		                PHP
.3944e3		c2 20		rep #$20	                REP #$20        ; set A long
.3944e5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944e8		5b		tcd		                TCD
.3944e9		28		plp		                PLP
.3944ea		68		pla		                PLA             ; end setdp macro
.3944eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3944ed		c2 10		rep #$10	                REP #$10        ; set X long
.3944ef		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.3944f2		a9 00		lda #$00	                LDA #0
.3944f4		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.3944f7		e8		inx		                INX
.3944f8		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.3944fb		d0 f7		bne $3944f4	                BNE b0_clr_loop
.3944fd		48		pha		                PHA             ; begin setdbr macro
.3944fe		08		php		                PHP
.3944ff		e2 20		sep #$20	                SEP #$20        ; set A short
.394501		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394503		48		pha		                PHA
.394504		ab		plb		                PLB
.394505		28		plp		                PLP
.394506		68		pla		                PLA             ; end setdbr macro
.394507		48		pha		                PHA             ; begin setdp macro
.394508		08		php		                PHP
.394509		c2 20		rep #$20	                REP #$20        ; set A long
.39450b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39450e		5b		tcd		                TCD
.39450f		28		plp		                PLP
.394510		68		pla		                PLA             ; end setdp macro
.394511		e2 20		sep #$20	                SEP #$20        ; set A short
.394513		c2 10		rep #$10	                REP #$10        ; set X long
.394515		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.394518		a9 00		lda #$00	                LDA #0
.39451a		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.39451d		e8		inx		                INX
.39451e		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.394521		d0 f7		bne $39451a	                BNE b38_clr_loop
.394523		c2 20		rep #$20	                REP #$20        ; set A long
.394525		a9 d3 48	lda #$48d3	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394528		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39452c		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.39452f		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394533		e2 20		sep #$20	                SEP #$20        ; set A short
.394535		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394537		85 01		sta $0321	                STA BIOS_DEV
.394539		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39453b		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39453f		a9 00		lda #$00	                LDA #0
.394541		a2 00 00	ldx #$0000	                LDX #0
.394544		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394547		e8		inx		                INX
.394548		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39454b		d0 f7		bne $394544	                BNE fd_zero_loop
.39454d		a9 00		lda #$00	                LDA #0
.39454f		a2 00 00	ldx #$0000	                LDX #0
.394552		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.394555		e8		inx		                INX
.394556		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394559		d0 f7		bne $394552	                BNE sect_zero_loop
.39455b		c2 20		rep #$20	                REP #$20        ; set A long
.39455d		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.394560		85 20		sta $0340	                STA @b DOS_FD_PTR
.394562		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394565		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394567		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.39456a		85 28		sta $0348	                STA @b DOS_TEMP
.39456c		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39456f		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394571		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394574		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394577		a5 28		lda $0348	                LDA @b DOS_TEMP
.394579		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39457b		c8		iny		                INY
.39457c		c8		iny		                INY
.39457d		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39457f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394581		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394582		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394584		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394587		85 20		sta $0340	                STA @b DOS_FD_PTR
.394589		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39458b		69 00 00	adc #$0000	                ADC #0
.39458e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394590		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394591		a5 28		lda $0348	                LDA @b DOS_TEMP
.394593		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394596		85 28		sta $0348	                STA @b DOS_TEMP
.394598		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39459a		69 00 00	adc #$0000	                ADC #0
.39459d		85 2a		sta $034a	                STA @b DOS_TEMP+2
.39459f		ca		dex		                DEX                     ; Count down the descriptors...
.3945a0		d0 d2		bne $394574	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.3945a2		28		plp		                PLP
.3945a3		2b		pld		                PLD
.3945a4		ab		plb		                PLB
.3945a5		6b		rtl		                RTL
.3945a6						DOS_MOUNT
.3945a6		8b		phb		                PHB
.3945a7		0b		phd		                PHD
.3945a8		08		php		                PHP
.3945a9		48		pha		                PHA             ; begin setdbr macro
.3945aa		08		php		                PHP
.3945ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3945ad		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3945af		48		pha		                PHA
.3945b0		ab		plb		                PLB
.3945b1		28		plp		                PLP
.3945b2		68		pla		                PLA             ; end setdbr macro
.3945b3		48		pha		                PHA             ; begin setdp macro
.3945b4		08		php		                PHP
.3945b5		c2 20		rep #$20	                REP #$20        ; set A long
.3945b7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945ba		5b		tcd		                TCD
.3945bb		28		plp		                PLP
.3945bc		68		pla		                PLA             ; end setdp macro
.3945bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3945bf		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.3945c1		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.3945c5		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3945c7		f0 1f		beq $3945e8	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.3945c9		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.3945cb		f0 26		beq $3945f3	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.3945cd		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.3945cf		f0 0b		beq $3945dc	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3945d1		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3945d3		85 0e		sta $032e	                STA DOS_STATUS
.3945d5		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.3945d7		85 00		sta $0320	                STA BIOS_STATUS
.3945d9		82 7c 01	brl $394758	                BRL ret_failure
.3945dc		22 0c 68 39	jsl $39680c	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.3945e0		b0 03		bcs $3945e5	                BCS fdc_success
.3945e2		82 73 01	brl $394758	                BRL ret_failure
.3945e5		82 67 01	brl $39474f	fdc_success     BRL ret_success
.3945e8		22 16 5e 39	jsl $395e16	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3945ec		b0 10		bcs $3945fe	                BCS get_mbr             ; Continue if success
.3945ee		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3945f0		82 65 01	brl $394758	                BRL ret_failure
.3945f3		22 54 6c 39	jsl $396c54	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.3945f7		b0 05		bcs $3945fe	                BCS get_mbr             ; Continue if success
.3945f9		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3945fb		82 5a 01	brl $394758	                BRL ret_failure
.3945fe						get_mbr
.3945fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.394600		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.394602		64 04		stz $0324	                STZ BIOS_LBA+2
.394604		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.394607		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394609		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39460c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39460e		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.394612		b0 07		bcs $39461b	                BCS chk_signature       ; If success, check the signature bytes
.394614		e2 20		sep #$20	                SEP #$20        ; set A short
.394616		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394618		82 3d 01	brl $394758	                BRL ret_failure
.39461b						chk_signature
.39461b		e2 20		sep #$20	                SEP #$20        ; set A short
.39461d		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394620		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394622		d0 07		bne $39462b	                BNE not_mbr             ; No: signal we could find the MBR
.394624		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.394627		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394629		f0 05		beq $394630	                BEQ chk_part_type       ; Yes: we have an MBR
.39462b		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.39462d		82 28 01	brl $394758	                BRL ret_failure
.394630		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.394633		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.394635		f0 05		beq $39463c	                BEQ get_LBA             ; Is FAT32 with LBA?
.394637		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394639		82 1c 01	brl $394758	                BRL ret_failure
.39463c		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.39463f		c2 20		rep #$20	                REP #$20        ; set A long
.394641		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.394644		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.394647		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.39464a		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.39464d		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394650		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.394653		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.394656		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394659		e2 20		sep #$20	                SEP #$20        ; set A short
.39465b		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.39465d		8d 00 a0	sta $38a000	                STA DEVICE
.394660		a9 00		lda #$00	                LDA #0
.394662		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394665		c2 20		rep #$20	                REP #$20        ; set A long
.394667		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39466a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39466c		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39466f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394671		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394674		85 02		sta $0322	                STA BIOS_LBA
.394676		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394679		85 04		sta $0324	                STA BIOS_LBA+2
.39467b		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.39467f		b0 1c		bcs $39469d	                BCS get_first_sec       ; Got it? Start parsing it
.394681		e2 20		sep #$20	                SEP #$20        ; set A short
.394683		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394685		82 d0 00	brl $394758	                BRL ret_failure
.394688						chk_bpb_sig
.394688		e2 20		sep #$20	                SEP #$20        ; set A short
.39468a		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39468d		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39468f		d0 07		bne $394698	                BNE not_bpb             ; No: signal we could find the volume ID
.394691		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394694		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394696		f0 05		beq $39469d	                BEQ get_first_sec       ; Yes: we have an volume ID
.394698		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.39469a		82 bb 00	brl $394758	                BRL ret_failure
.39469d						get_first_sec
.39469d		c2 20		rep #$20	                REP #$20        ; set A long
.39469f		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3946a2		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3946a5		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.3946a8		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3946ab		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3946ae		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.3946b1		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3946b2		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3946b5		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.3946b8		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.3946bb		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3946be		69 00 00	adc #$0000	                ADC #0
.3946c1		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3946c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3946c6		a2 00 00	ldx #$0000	                LDX #0
.3946c9		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.3946cd		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3946d1		e8		inx		                INX
.3946d2		e0 04 00	cpx #$0004	                CPX #4
.3946d5		d0 f2		bne $3946c9	                BNE cpy_secperfat
.3946d7		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.3946da		0a		asl a		                ASL A
.3946db		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3946de		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.3946e1		2a		rol a		                ROL A
.3946e2		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946e5		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.3946e8		2a		rol a		                ROL A
.3946e9		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946ec		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3946ef		2a		rol a		                ROL A
.3946f0		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946f3		18		clc		                CLC
.3946f4		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3946f7		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3946fa		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3946fd		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.394700		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.394703		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.394706		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394709		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.39470c		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.39470f		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.394712		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.394715		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394718		e2 20		sep #$20	                SEP #$20        ; set A short
.39471a		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.39471d		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394720		18		clc		                CLC
.394721		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.394724		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.394727		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.39472a		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.39472d		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.394730		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.394733		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394736		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394739		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.39473c		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.39473f		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.394742		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.394745		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.394747		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.39474a		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.39474c		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.39474f						ret_success
.39474f		e2 20		sep #$20	                SEP #$20        ; set A short
.394751		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394753		28		plp		                PLP
.394754		2b		pld		                PLD
.394755		ab		plb		                PLB
.394756		38		sec		                SEC
.394757		6b		rtl		                RTL
.394758						ret_failure
.394758		e2 20		sep #$20	                SEP #$20        ; set A short
.39475a		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39475c		28		plp		                PLP
.39475d		2b		pld		                PLD
.39475e		ab		plb		                PLB
.39475f		18		clc		                CLC
.394760		6b		rtl		                RTL
.394761						DOS_TESTBOOT
.394761		8b		phb		                PHB
.394762		0b		phd		                PHD
.394763		da		phx		                PHX
.394764		08		php		                PHP
.394765		48		pha		                PHA             ; begin setdbr macro
.394766		08		php		                PHP
.394767		e2 20		sep #$20	                SEP #$20        ; set A short
.394769		a9 00		lda #$00	                LDA #0
.39476b		48		pha		                PHA
.39476c		ab		plb		                PLB
.39476d		28		plp		                PLP
.39476e		68		pla		                PLA             ; end setdbr macro
.39476f		48		pha		                PHA             ; begin setdp macro
.394770		08		php		                PHP
.394771		c2 20		rep #$20	                REP #$20        ; set A long
.394773		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394776		5b		tcd		                TCD
.394777		28		plp		                PLP
.394778		68		pla		                PLA             ; end setdp macro
.394779		c2 10		rep #$10	                REP #$10        ; set X long
.39477b						chk_dev
.39477b		e2 20		sep #$20	                SEP #$20        ; set A short
.39477d		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.39477f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394781		f0 24		beq $3947a7	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394783		c2 30		rep #$30	                REP #$30        ; set A&X long
.394785		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394788		85 02		sta $0322	                STA @b BIOS_LBA
.39478a		85 04		sta $0324	                STA @b BIOS_LBA+2
.39478c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.39478f		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394791		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394794		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394796		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.39479a		b0 03		bcs $39479f	                BCS chk_mbr_brl
.39479c		82 47 00	brl $3947e6	                BRL done                    ; If failed... just return
.39479f						chk_mbr_brl
.39479f		e2 20		sep #$20	                SEP #$20        ; set A short
.3947a1		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3947a5		80 04		bra $3947ab	                BRA chk_brl
.3947a7		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3947ab		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3947ad		f0 06		beq $3947b5	                BEQ chk_magic               ; Yes: check for the magic text
.3947af		c9 82		cmp #$82	                CMP #$82
.3947b1		f0 02		beq $3947b5	                BEQ chk_magic
.3947b3		80 31		bra $3947e6	                BRA done                    ; No: just return
.3947b5		a2 00 00	ldx #$0000	chk_magic       LDX #0
.3947b8		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3947bc		df eb 47 39	cmp $3947eb,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3947c0		d0 24		bne $3947e6	                BNE done                    ; If it's not equal, just return
.3947c2		e8		inx		                INX                         ; Otherwise, check the next one
.3947c3		e0 08 00	cpx #$0008	                CPX #8
.3947c6		d0 f0		bne $3947b8	                BNE magic_loop              ; Until we've checked all 8 bytes
.3947c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947ca		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3947cd		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3947d0		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3947d3		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3947d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3947d8		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3947da		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3947dc		f0 04		beq $3947e2	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3947de		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3947e2		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3947e6		28		plp		done            PLP
.3947e7		2b		pld		                PLD
.3947e8		ab		plb		                PLB
.3947e9		fa		plx		                PLX
.3947ea		6b		rtl		                RTL
>3947eb		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3947f3						DOS_CALC_LBA
.3947f3		8b		phb		                PHB
.3947f4		0b		phd		                PHD
.3947f5		08		php		                PHP
.3947f6		48		pha		                PHA             ; begin setdbr macro
.3947f7		08		php		                PHP
.3947f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3947fa		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947fc		48		pha		                PHA
.3947fd		ab		plb		                PLB
.3947fe		28		plp		                PLP
.3947ff		68		pla		                PLA             ; end setdbr macro
.394800		48		pha		                PHA             ; begin setdp macro
.394801		08		php		                PHP
.394802		c2 20		rep #$20	                REP #$20        ; set A long
.394804		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394807		5b		tcd		                TCD
.394808		28		plp		                PLP
.394809		68		pla		                PLA             ; end setdp macro
.39480a		c2 20		rep #$20	                REP #$20        ; set A long
.39480c		38		sec		                SEC
.39480d		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.39480f		e9 02 00	sbc #$0002	                SBC #2
.394812		85 28		sta $0348	                STA DOS_TEMP
.394814		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394816		e9 00 00	sbc #$0000	                SBC #0
.394819		85 2a		sta $034a	                STA DOS_TEMP+2
.39481b		e2 10		sep #$10	                SEP #$10        ; set X short
.39481d		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394820		e0 01		cpx #$01	mult_loop       CPX #1
.394822		f0 07		beq $39482b	                BEQ add_offset
.394824		06 28		asl $0348	                ASL DOS_TEMP
.394826		26 28		rol $0348	                ROL DOS_TEMP
.394828		ca		dex		                DEX
.394829		80 f5		bra $394820	                BRA mult_loop
.39482b		18		clc		add_offset      CLC
.39482c		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.39482e		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394831		85 02		sta $0322	                STA BIOS_LBA
.394833		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394835		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.394838		85 04		sta $0324	                STA BIOS_LBA+2
.39483a		28		plp		                PLP
.39483b		2b		pld		                PLD
.39483c		ab		plb		                PLB
.39483d		6b		rtl		                RTL
.39483e						DOS_GETCLUSTER
.39483e		8b		phb		                PHB
.39483f		0b		phd		                PHD
.394840		08		php		                PHP
.394841		48		pha		                PHA             ; begin setdbr macro
.394842		08		php		                PHP
.394843		e2 20		sep #$20	                SEP #$20        ; set A short
.394845		a9 00		lda #$00	                LDA #0
.394847		48		pha		                PHA
.394848		ab		plb		                PLB
.394849		28		plp		                PLP
.39484a		68		pla		                PLA             ; end setdbr macro
.39484b		48		pha		                PHA             ; begin setdp macro
.39484c		08		php		                PHP
.39484d		c2 20		rep #$20	                REP #$20        ; set A long
.39484f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394852		5b		tcd		                TCD
.394853		28		plp		                PLP
.394854		68		pla		                PLA             ; end setdp macro
.394855		c2 20		rep #$20	                REP #$20        ; set A long
.394857		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394859		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39485b		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39485d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39485f		22 f3 47 39	jsl $3947f3	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394863		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394867		90 09		bcc $394872	                BCC ret_failure
.394869						ret_success
.394869		e2 20		sep #$20	                SEP #$20        ; set A short
.39486b		64 0e		stz $032e	                STZ DOS_STATUS
.39486d		28		plp		                PLP
.39486e		2b		pld		                PLD
.39486f		ab		plb		                PLB
.394870		38		sec		                SEC
.394871		6b		rtl		                RTL
.394872						ret_failure
.394872		e2 20		sep #$20	                SEP #$20        ; set A short
.394874		85 0e		sta $032e	                STA DOS_STATUS
.394876		28		plp		                PLP
.394877		2b		pld		                PLD
.394878		ab		plb		                PLB
.394879		18		clc		                CLC
.39487a		6b		rtl		                RTL
.39487b						DOS_PUTCLUSTER
.39487b		8b		phb		                PHB
.39487c		0b		phd		                PHD
.39487d		08		php		                PHP
.39487e		48		pha		                PHA             ; begin setdbr macro
.39487f		08		php		                PHP
.394880		e2 20		sep #$20	                SEP #$20        ; set A short
.394882		a9 00		lda #$00	                LDA #0
.394884		48		pha		                PHA
.394885		ab		plb		                PLB
.394886		28		plp		                PLP
.394887		68		pla		                PLA             ; end setdbr macro
.394888		48		pha		                PHA             ; begin setdp macro
.394889		08		php		                PHP
.39488a		c2 20		rep #$20	                REP #$20        ; set A long
.39488c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39488f		5b		tcd		                TCD
.394890		28		plp		                PLP
.394891		68		pla		                PLA             ; end setdp macro
.394892		c2 20		rep #$20	                REP #$20        ; set A long
.394894		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394896		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394898		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39489a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39489c		22 f3 47 39	jsl $3947f3	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3948a0		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3948a4		90 09		bcc $3948af	                BCC ret_failure
.3948a6						ret_success
.3948a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3948a8		64 0e		stz $032e	                STZ DOS_STATUS
.3948aa		28		plp		                PLP
.3948ab		2b		pld		                PLD
.3948ac		ab		plb		                PLB
.3948ad		38		sec		                SEC
.3948ae		6b		rtl		                RTL
.3948af						ret_failure
.3948af		e2 20		sep #$20	                SEP #$20        ; set A short
.3948b1		85 0e		sta $032e	                STA DOS_STATUS
.3948b3		28		plp		                PLP
.3948b4		2b		pld		                PLD
.3948b5		ab		plb		                PLB
.3948b6		18		clc		                CLC
.3948b7		6b		rtl		                RTL
>3948b8		40 46 00			DOS_FDC_NAME    .null "@F"
.3948bb						DOS_FDC_DESC
>3948bb		b8 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3948bf		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3948c0		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3948c4		40 53 00			DOS_SDC_NAME    .null "@S"
.3948c7						DOS_SDC_DESC
>3948c7		c4 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3948cb		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3948cc		bb 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3948d0		40 48 00			DOS_HDC_NAME    .null "@H"
.3948d3						DOS_HD_DESC
>3948d3		d0 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3948d7		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3948d8		c7 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3948dc						DOS_PARSE_DEV
.3948dc		8b		phb		                PHB
.3948dd		0b		phd		                PHD
.3948de		08		php		                PHP
.3948df		48		pha		                PHA             ; begin setdbr macro
.3948e0		08		php		                PHP
.3948e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3948e3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3948e5		48		pha		                PHA
.3948e6		ab		plb		                PLB
.3948e7		28		plp		                PLP
.3948e8		68		pla		                PLA             ; end setdbr macro
.3948e9		48		pha		                PHA             ; begin setdp macro
.3948ea		08		php		                PHP
.3948eb		c2 20		rep #$20	                REP #$20        ; set A long
.3948ed		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948f0		5b		tcd		                TCD
.3948f1		28		plp		                PLP
.3948f2		68		pla		                PLA             ; end setdp macro
.3948f3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948f5		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3948f9		85 28		sta $0348	                STA DOS_TEMP
.3948fb		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3948ff		85 2a		sta $034a	                STA DOS_TEMP+2
.394901		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394904		85 48		sta $0368	                STA DOS_STR2_PTR
.394906		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394909		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39490b		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.39490e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394910		85 44		sta $0364	                STA DOS_STR1_PTR
.394912		c8		iny		                INY
.394913		c8		iny		                INY
.394914		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394916		85 46		sta $0366	                STA DOS_STR1_PTR+2
.394918		e2 20		sep #$20	                SEP #$20        ; set A short
.39491a		a0 00 00	ldy #$0000	                LDY #0
.39491d		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.39491f		f0 24		beq $394945	                BEQ found                   ; If it's NULL, we found a match
.394921		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394923		d0 03		bne $394928	                BNE next_device             ; If no match, try to load the next device
.394925		c8		iny		                INY                         ; Go to the next character
.394926		80 f5		bra $39491d	                BRA cmp_loop
.394928						next_device
.394928		c2 20		rep #$20	                REP #$20        ; set A long
.39492a		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.39492d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39492f		48		pha		                PHA
.394930		c8		iny		                INY
.394931		c8		iny		                INY
.394932		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394934		85 2a		sta $034a	                STA DOS_TEMP+2
.394936		68		pla		                PLA
.394937		85 28		sta $0348	                STA DOS_TEMP
.394939		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39493b		d0 ce		bne $39490b	                BNE dev_loop                ; No: check this device
.39493d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39493f		d0 ca		bne $39490b	                BNE dev_loop
.394941		28		plp		done            PLP                         ; Otherwise, return having not found a match
.394942		2b		pld		                PLD
.394943		ab		plb		                PLB
.394944		6b		rtl		                RTL
.394945		22 56 49 39	jsl $394956	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394949		e2 20		sep #$20	                SEP #$20        ; set A short
.39494b		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.39494e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394950		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394954		80 eb		bra $394941	                BRA done
.394956						DOS_ADJUSTPATH
.394956		da		phx		                PHX
.394957		5a		phy		                PHY
.394958		8b		phb		                PHB
.394959		0b		phd		                PHD
.39495a		08		php		                PHP
.39495b		48		pha		                PHA             ; begin setdbr macro
.39495c		08		php		                PHP
.39495d		e2 20		sep #$20	                SEP #$20        ; set A short
.39495f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394961		48		pha		                PHA
.394962		ab		plb		                PLB
.394963		28		plp		                PLP
.394964		68		pla		                PLA             ; end setdbr macro
.394965		48		pha		                PHA             ; begin setdp macro
.394966		08		php		                PHP
.394967		c2 20		rep #$20	                REP #$20        ; set A long
.394969		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39496c		5b		tcd		                TCD
.39496d		28		plp		                PLP
.39496e		68		pla		                PLA             ; end setdp macro
.39496f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394971		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394973		98		tya		                TYA                             ; Compute the address of the first source byte
.394974		18		clc		                CLC
.394975		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394978		aa		tax		                TAX
.394979		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39497c		a8		tay		                TAY
.39497d		38		sec		                SEC                             ; Compute the number of bytes to copy
.39497e		a9 00 01	lda #$0100	                LDA #256
.394981		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394983		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394986		28		plp		                PLP
.394987		2b		pld		                PLD
.394988		ab		plb		                PLB
.394989		7a		ply		                PLY
.39498a		fa		plx		                PLX
.39498b		6b		rtl		                RTL
.39498c						DOS_PARSE_PATH
.39498c		8b		phb		                PHB
.39498d		0b		phd		                PHD
.39498e		08		php		                PHP
.39498f		48		pha		                PHA             ; begin setdbr macro
.394990		08		php		                PHP
.394991		e2 20		sep #$20	                SEP #$20        ; set A short
.394993		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394995		48		pha		                PHA
.394996		ab		plb		                PLB
.394997		28		plp		                PLP
.394998		68		pla		                PLA             ; end setdbr macro
.394999		48		pha		                PHA             ; begin setdp macro
.39499a		08		php		                PHP
.39499b		c2 20		rep #$20	                REP #$20        ; set A long
.39499d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949a0		5b		tcd		                TCD
.3949a1		28		plp		                PLP
.3949a2		68		pla		                PLA             ; end setdp macro
.3949a3		c2 10		rep #$10	                REP #$10        ; set X long
.3949a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3949a7		a2 00 00	ldx #$0000	                LDX #0
.3949aa		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3949ac		f0 1b		beq $3949c9	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3949ae		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3949b0		b0 05		bcs $3949b7	                BGE check_case          ; No: check the case
.3949b2		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3949b4		82 64 00	brl $394a1b	                BRL ret_failure
.3949b7		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3949b9		90 08		bcc $3949c3	                BLT next_char
.3949bb		c9 7b		cmp #$7b	                CMP #'z'+1
.3949bd		b0 04		bcs $3949c3	                BGE next_char
.3949bf		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3949c1		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3949c3		e8		inx		next_char       INX                     ; Move to the next character
.3949c4		e0 00 01	cpx #$0100	                CPX #$100
.3949c7		d0 e1		bne $3949aa	                BNE upcase_loop
.3949c9		22 dc 48 39	jsl $3948dc	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3949cd		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3949cf		c9 3a		cmp #$3a	                CMP #':'
.3949d1		d0 07		bne $3949da	                BNE clr_name            ; If not colon, treat it as a file name
.3949d3		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3949d6		22 56 49 39	jsl $394956	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3949da		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3949dd		a9 20		lda #$20	                LDA #' '
.3949df		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3949e2		c8		iny		                INY
.3949e3		c0 0b 00	cpy #$000b	                CPY #11
.3949e6		d0 f7		bne $3949df	                BNE clr_loop
.3949e8		a2 00 00	ldx #$0000	                LDX #0
.3949eb		a0 00 00	ldy #$0000	                LDY #0
.3949ee		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3949f0		f0 20		beq $394a12	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3949f2		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3949f4		f0 0a		beq $394a00	                BEQ cpy_ext             ; And move to the extension
.3949f6		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3949f9		e8		inx		                INX
.3949fa		c8		iny		                INY                     ; Move to the next character
.3949fb		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3949fe		d0 ee		bne $3949ee	                BNE cpy_name_loop       ; No: process this one
.394a00		e8		inx		cpy_ext         INX                     ; Skip the dot
.394a01		a0 08 00	ldy #$0008	                LDY #8
.394a04		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394a06		f0 0a		beq $394a12	                BEQ ret_success         ; If it's NULL, we've finished
.394a08		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394a0b		e8		inx		                INX
.394a0c		c8		iny		                INY                     ; Move to the next character
.394a0d		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394a10		d0 f2		bne $394a04	                BNE cpy_ext_loop        ; No: process this one
.394a12						ret_success
.394a12		e2 20		sep #$20	                SEP #$20        ; set A short
.394a14		64 0e		stz $032e	                STZ DOS_STATUS
.394a16		28		plp		                PLP
.394a17		2b		pld		                PLD
.394a18		ab		plb		                PLB
.394a19		38		sec		                SEC
.394a1a		6b		rtl		                RTL
.394a1b						ret_failure
.394a1b		e2 20		sep #$20	                SEP #$20        ; set A short
.394a1d		85 0e		sta $032e	                STA DOS_STATUS
.394a1f		28		plp		                PLP
.394a20		2b		pld		                PLD
.394a21		ab		plb		                PLB
.394a22		18		clc		                CLC
.394a23		6b		rtl		                RTL
.394a24						DOS_FINDFILE
.394a24		8b		phb		                PHB
.394a25		0b		phd		                PHD
.394a26		08		php		                PHP
.394a27		48		pha		                PHA             ; begin setdbr macro
.394a28		08		php		                PHP
.394a29		e2 20		sep #$20	                SEP #$20        ; set A short
.394a2b		a9 00		lda #$00	                LDA #0
.394a2d		48		pha		                PHA
.394a2e		ab		plb		                PLB
.394a2f		28		plp		                PLP
.394a30		68		pla		                PLA             ; end setdbr macro
.394a31		48		pha		                PHA             ; begin setdp macro
.394a32		08		php		                PHP
.394a33		c2 20		rep #$20	                REP #$20        ; set A long
.394a35		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a38		5b		tcd		                TCD
.394a39		28		plp		                PLP
.394a3a		68		pla		                PLA             ; end setdp macro
.394a3b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a3d		22 8c 49 39	jsl $39498c	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394a41		b0 05		bcs $394a48	                BCS mount                       ; If success: try to open the directory
.394a43		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394a44		2b		pld		                PLD
.394a45		ab		plb		                PLB
.394a46		18		clc		                CLC
.394a47		6b		rtl		                RTL
.394a48		22 a6 45 39	jsl $3945a6	mount           JSL DOS_MOUNT
.394a4c		b0 03		bcs $394a51	                BCS get_directory
.394a4e		82 56 00	brl $394aa7	                BRL ret_failure
.394a51						get_directory
.394a51		c2 20		rep #$20	                REP #$20        ; set A long
.394a53		22 5b 42 39	jsl $39425b	                JSL DOS_DIROPEN                 ; Get the directory
.394a57		b0 07		bcs $394a60	                BCS scan_entries                ; If success: start scanning the directory entries
.394a59		e2 20		sep #$20	                SEP #$20        ; set A short
.394a5b		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394a5d		82 47 00	brl $394aa7	                BRL ret_failure
.394a60		22 da 42 39	jsl $3942da	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394a64						scan_loop
.394a64		e2 20		sep #$20	                SEP #$20        ; set A short
.394a66		a0 00 00	ldy #$0000	                LDY #0
.394a69		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394a6b		d0 05		bne $394a72	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394a6d		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394a6f		82 35 00	brl $394aa7	                BRL ret_failure
.394a72		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394a74		f0 26		beq $394a9c	                BEQ next_entry                  ; Go to the next entry
.394a76		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394a79		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a7b		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394a7d		d0 1d		bne $394a9c	                BNE next_entry                  ; Yes: skip it!
.394a7f		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394a81		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394a83		f0 17		beq $394a9c	                BEQ next_entry                  ; Yes: skip it!
.394a85		a2 00 00	ldx #$0000	                LDX #0
.394a88		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a8b		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a8d		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a91		d0 09		bne $394a9c	                BNE next_entry                  ; If not equal: try the next entry
.394a93		c8		iny		                INY                             ; Advance to the next character
.394a94		e8		inx		                INX
.394a95		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a98		f0 16		beq $394ab0	                BEQ match                       ; Yes: we have a match!
.394a9a		80 ef		bra $394a8b	                BRA scan_cmp_loop               ; No: keep checking
.394a9c		22 f5 42 39	jsl $3942f5	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394aa0		90 05		bcc $394aa7	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394aa2		82 bf ff	brl $394a64	                BRL scan_loop                   ; If found: keep scanning
.394aa5		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394aa7						ret_failure
.394aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.394aa9		85 0e		sta $032e	                STA DOS_STATUS
.394aab		28		plp		                PLP
.394aac		2b		pld		                PLD
.394aad		ab		plb		                PLB
.394aae		18		clc		                CLC
.394aaf		6b		rtl		                RTL
.394ab0						match
.394ab0		c2 20		rep #$20	                REP #$20        ; set A long
.394ab2		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394ab5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394ab7		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394ab9		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394abc		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394abe		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ac0						ret_success
.394ac0		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac2		64 0e		stz $032e	                STZ DOS_STATUS
.394ac4		28		plp		                PLP
.394ac5		2b		pld		                PLD
.394ac6		ab		plb		                PLB
.394ac7		38		sec		                SEC
.394ac8		6b		rtl		                RTL
.394ac9						DOS_READFILE
.394ac9		8b		phb		                PHB
.394aca		0b		phd		                PHD
.394acb		08		php		                PHP
.394acc		48		pha		                PHA             ; begin setdbr macro
.394acd		08		php		                PHP
.394ace		e2 20		sep #$20	                SEP #$20        ; set A short
.394ad0		a9 00		lda #$00	                LDA #0
.394ad2		48		pha		                PHA
.394ad3		ab		plb		                PLB
.394ad4		28		plp		                PLP
.394ad5		68		pla		                PLA             ; end setdbr macro
.394ad6		48		pha		                PHA             ; begin setdp macro
.394ad7		08		php		                PHP
.394ad8		c2 20		rep #$20	                REP #$20        ; set A long
.394ada		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394add		5b		tcd		                TCD
.394ade		28		plp		                PLP
.394adf		68		pla		                PLA             ; end setdp macro
.394ae0		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ae2		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394ae4		48		pha		                PHA
.394ae5		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394ae7		48		pha		                PHA
.394ae8		22 24 4a 39	jsl $394a24	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394aec		68		pla		                PLA
.394aed		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394aef		68		pla		                PLA
.394af0		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394af2		90 0f		bcc $394b03	                BCC pass_failure                    ; If found: try to load the cluster
.394af4		22 3e 48 39	jsl $39483e	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394af8		90 09		bcc $394b03	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394afa						ret_success
.394afa		e2 20		sep #$20	                SEP #$20        ; set A short
.394afc		64 0e		stz $032e	                STZ DOS_STATUS
.394afe		28		plp		                PLP
.394aff		2b		pld		                PLD
.394b00		ab		plb		                PLB
.394b01		38		sec		                SEC
.394b02		6b		rtl		                RTL
.394b03		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394b04		2b		pld		                PLD
.394b05		ab		plb		                PLB
.394b06		18		clc		                CLC
.394b07		6b		rtl		                RTL
.394b08						ENTRYFORCLUS12
.394b08		8b		phb		                PHB
.394b09		0b		phd		                PHD
.394b0a		08		php		                PHP
.394b0b		48		pha		                PHA             ; begin setdbr macro
.394b0c		08		php		                PHP
.394b0d		e2 20		sep #$20	                SEP #$20        ; set A short
.394b0f		a9 00		lda #$00	                LDA #0
.394b11		48		pha		                PHA
.394b12		ab		plb		                PLB
.394b13		28		plp		                PLP
.394b14		68		pla		                PLA             ; end setdbr macro
.394b15		48		pha		                PHA             ; begin setdp macro
.394b16		08		php		                PHP
.394b17		c2 20		rep #$20	                REP #$20        ; set A long
.394b19		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b1c		5b		tcd		                TCD
.394b1d		28		plp		                PLP
.394b1e		68		pla		                PLA             ; end setdp macro
.394b1f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b21		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394b23		0a		asl a		                ASL A
.394b24		85 28		sta $0348	                STA DOS_TEMP
.394b26		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b28		2a		rol a		                ROL A
.394b29		85 2a		sta $034a	                STA DOS_TEMP+2
.394b2b		18		clc		                CLC
.394b2c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b2e		65 28		adc $0348	                ADC DOS_TEMP
.394b30		85 28		sta $0348	                STA DOS_TEMP
.394b32		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b34		65 2a		adc $034a	                ADC DOS_TEMP+2
.394b36		85 2a		sta $034a	                STA DOS_TEMP+2
.394b38		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394b3a		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394b3c		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394b3e		29 ff 03	and #$03ff	                AND #$003FF
.394b41		aa		tax		                TAX
.394b42		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b44		66 28		ror $0348	                ROR DOS_TEMP
.394b46		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b48		66 28		ror $0348	                ROR DOS_TEMP
.394b4a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b4c		66 28		ror $0348	                ROR DOS_TEMP
.394b4e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b50		66 28		ror $0348	                ROR DOS_TEMP
.394b52		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b54		66 28		ror $0348	                ROR DOS_TEMP
.394b56		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b58		66 28		ror $0348	                ROR DOS_TEMP
.394b5a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b5c		66 28		ror $0348	                ROR DOS_TEMP
.394b5e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b60		66 28		ror $0348	                ROR DOS_TEMP
.394b62		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b64		66 28		ror $0348	                ROR DOS_TEMP
.394b66		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394b67		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394b6b		65 28		adc $0348	                ADC DOS_TEMP
.394b6d		85 24		sta $0344	                STA DOS_FAT_LBA
.394b6f		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394b73		65 2a		adc $034a	                ADC DOS_TEMP+2
.394b75		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b77		28		plp		                PLP
.394b78		2b		pld		                PLD
.394b79		ab		plb		                PLB
.394b7a		6b		rtl		                RTL
.394b7b						FATFORCLUSTER12
.394b7b		8b		phb		                PHB
.394b7c		0b		phd		                PHD
.394b7d		08		php		                PHP
.394b7e		48		pha		                PHA             ; begin setdbr macro
.394b7f		08		php		                PHP
.394b80		e2 20		sep #$20	                SEP #$20        ; set A short
.394b82		a9 00		lda #$00	                LDA #0
.394b84		48		pha		                PHA
.394b85		ab		plb		                PLB
.394b86		28		plp		                PLP
.394b87		68		pla		                PLA             ; end setdbr macro
.394b88		48		pha		                PHA             ; begin setdp macro
.394b89		08		php		                PHP
.394b8a		c2 20		rep #$20	                REP #$20        ; set A long
.394b8c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b8f		5b		tcd		                TCD
.394b90		28		plp		                PLP
.394b91		68		pla		                PLA             ; end setdp macro
.394b92		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b94		a2 00 00	ldx #$0000	                LDX #0
.394b97		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b9a		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b9e		e8		inx		                INX
.394b9f		e8		inx		                INX
.394ba0		e0 00 04	cpx #$0400	                CPX #1024
.394ba3		d0 f5		bne $394b9a	                BNE clr_loop
.394ba5		22 08 4b 39	jsl $394b08	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394ba9		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394bab		85 02		sta $0322	                STA BIOS_LBA
.394bad		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394baf		85 04		sta $0324	                STA BIOS_LBA+2
.394bb1		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394bb4		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bb6		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bb9		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bbb		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394bbf		90 17		bcc $394bd8	                BCC error
.394bc1		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394bc3		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394bc6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bc8		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bcb		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bcd		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394bd1		90 05		bcc $394bd8	                BCC error
.394bd3		28		plp		                PLP
.394bd4		2b		pld		                PLD
.394bd5		ab		plb		                PLB
.394bd6		38		sec		                SEC
.394bd7		6b		rtl		                RTL
.394bd8						error
.394bd8		e2 20		sep #$20	                SEP #$20        ; set A short
.394bda		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bdc		85 0e		sta $032e	                STA DOS_STATUS
.394bde		28		plp		                PLP
.394bdf		2b		pld		                PLD
.394be0		ab		plb		                PLB
.394be1		18		clc		                CLC
.394be2		6b		rtl		                RTL
.394be3						FATFORCLUSTER32
.394be3		8b		phb		                PHB
.394be4		0b		phd		                PHD
.394be5		48		pha		                PHA             ; begin setdbr macro
.394be6		08		php		                PHP
.394be7		e2 20		sep #$20	                SEP #$20        ; set A short
.394be9		a9 00		lda #$00	                LDA #0
.394beb		48		pha		                PHA
.394bec		ab		plb		                PLB
.394bed		28		plp		                PLP
.394bee		68		pla		                PLA             ; end setdbr macro
.394bef		48		pha		                PHA             ; begin setdp macro
.394bf0		08		php		                PHP
.394bf1		c2 20		rep #$20	                REP #$20        ; set A long
.394bf3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bf6		5b		tcd		                TCD
.394bf7		28		plp		                PLP
.394bf8		68		pla		                PLA             ; end setdp macro
.394bf9		c2 30		rep #$30	                REP #$30        ; set A&X long
.394bfb		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bfd		85 24		sta $0344	                STA DOS_FAT_LBA
.394bff		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c01		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394c03		a2 07 00	ldx #$0007	                LDX #7
.394c06		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394c08		66 24		ror $0344	                ROR DOS_FAT_LBA
.394c0a		ca		dex		                DEX
.394c0b		d0 f9		bne $394c06	                BNE div_loop
.394c0d		18		clc		                CLC
.394c0e		a5 24		lda $0344	                LDA DOS_FAT_LBA
.394c10		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394c14		85 24		sta $0344	                STA DOS_FAT_LBA
.394c16		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394c18		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394c1c		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394c1e		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394c20		85 02		sta $0322	                STA BIOS_LBA
.394c22		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394c24		85 04		sta $0324	                STA BIOS_LBA+2
.394c26		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394c29		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394c2b		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394c2e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394c30		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394c34		b0 06		bcs $394c3c	                BCS find_entry
.394c36		e2 20		sep #$20	                SEP #$20        ; set A short
.394c38		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c3a		80 0e		bra $394c4a	                BRA ret_failure
.394c3c						find_entry
.394c3c		c2 20		rep #$20	                REP #$20        ; set A long
.394c3e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c40		0a		asl a		                ASL A
.394c41		0a		asl a		                ASL A                           ; * 4
.394c42		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394c45		aa		tax		                TAX                             ; X should be the offset within the sector
.394c46		2b		pld		ret_success     PLD
.394c47		ab		plb		                PLB
.394c48		38		sec		                SEC                             ; return success
.394c49		6b		rtl		                RTL
.394c4a		2b		pld		ret_failure     PLD
.394c4b		ab		plb		                PLB
.394c4c		18		clc		                CLC                             ; Return failure
.394c4d		6b		rtl		                RTL
.394c4e						NEXTCLUSTER
.394c4e		08		php		                PHP
.394c4f		e2 20		sep #$20	                SEP #$20        ; set A short
.394c51		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c55		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c57		d0 08		bne $394c61	                BNE fat32                       ; No: assume it's FAT32
.394c59		22 6f 4c 39	jsl $394c6f	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394c5d		90 0d		bcc $394c6c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c5f		80 06		bra $394c67	                BRA ret_success
.394c61		22 d7 4c 39	jsl $394cd7	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394c65		90 05		bcc $394c6c	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c67		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c69		28		plp		                PLP
.394c6a		38		sec		                SEC
.394c6b		6b		rtl		                RTL
.394c6c		28		plp		pass_failure    PLP
.394c6d		18		clc		                CLC
.394c6e		6b		rtl		                RTL
.394c6f						NEXTCLUSTER12
.394c6f		8b		phb		                    PHB
.394c70		0b		phd		                    PHD
.394c71		08		php		                    PHP
.394c72		48		pha		                PHA             ; begin setdbr macro
.394c73		08		php		                PHP
.394c74		e2 20		sep #$20	                SEP #$20        ; set A short
.394c76		a9 00		lda #$00	                LDA #0
.394c78		48		pha		                PHA
.394c79		ab		plb		                PLB
.394c7a		28		plp		                PLP
.394c7b		68		pla		                PLA             ; end setdbr macro
.394c7c		48		pha		                PHA             ; begin setdp macro
.394c7d		08		php		                PHP
.394c7e		c2 20		rep #$20	                REP #$20        ; set A long
.394c80		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c83		5b		tcd		                TCD
.394c84		28		plp		                PLP
.394c85		68		pla		                PLA             ; end setdp macro
.394c86		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c88		22 7b 4b 39	jsl $394b7b	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c8c		b0 03		bcs $394c91	                    BCS chk_clus_id
.394c8e		82 41 00	brl $394cd2	                    BRL pass_failure
.394c91		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c93		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c96		d0 0d		bne $394ca5	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c98						is_even
.394c98		c2 20		rep #$20	                REP #$20        ; set A long
.394c9a		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c9e		29 ff 0f	and #$0fff	                    AND #$0FFF
.394ca1		85 28		sta $0348	                    STA DOS_TEMP
.394ca3		80 0c		bra $394cb1	                    BRA check_id
.394ca5						is_odd
.394ca5		c2 20		rep #$20	                REP #$20        ; set A long
.394ca7		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394cab		4a		lsr a		                    LSR A
.394cac		4a		lsr a		                    LSR A
.394cad		4a		lsr a		                    LSR A
.394cae		4a		lsr a		                    LSR A
.394caf		85 28		sta $0348	                    STA DOS_TEMP
.394cb1						check_id
.394cb1		c2 20		rep #$20	                REP #$20        ; set A long
.394cb3		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394cb5		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394cb8		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394cbb		f0 0f		beq $394ccc	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394cbd		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394cbf		85 10		sta $0330	                    STA DOS_CLUS_ID
.394cc1		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394cc3						ret_success
.394cc3		e2 20		sep #$20	                SEP #$20        ; set A short
.394cc5		64 0e		stz $032e	                    STZ DOS_STATUS
.394cc7		28		plp		                    PLP
.394cc8		2b		pld		                    PLD
.394cc9		ab		plb		                    PLB
.394cca		38		sec		                    SEC
.394ccb		6b		rtl		                    RTL
.394ccc						no_more
.394ccc		e2 20		sep #$20	                SEP #$20        ; set A short
.394cce		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394cd0		85 0e		sta $032e	                    STA DOS_STATUS
.394cd2		28		plp		pass_failure        PLP
.394cd3		2b		pld		                    PLD
.394cd4		ab		plb		                    PLB
.394cd5		18		clc		                    CLC
.394cd6		6b		rtl		                    RTL
.394cd7						NEXTCLUSTER32
.394cd7		8b		phb		                PHB
.394cd8		0b		phd		                PHD
.394cd9		08		php		                PHP
.394cda		48		pha		                PHA             ; begin setdbr macro
.394cdb		08		php		                PHP
.394cdc		e2 20		sep #$20	                SEP #$20        ; set A short
.394cde		a9 00		lda #$00	                LDA #0
.394ce0		48		pha		                PHA
.394ce1		ab		plb		                PLB
.394ce2		28		plp		                PLP
.394ce3		68		pla		                PLA             ; end setdbr macro
.394ce4		48		pha		                PHA             ; begin setdp macro
.394ce5		08		php		                PHP
.394ce6		c2 20		rep #$20	                REP #$20        ; set A long
.394ce8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ceb		5b		tcd		                TCD
.394cec		28		plp		                PLP
.394ced		68		pla		                PLA             ; end setdp macro
.394cee		c2 30		rep #$30	                REP #$30        ; set A&X long
.394cf0		22 e3 4b 39	jsl $394be3	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394cf4		90 53		bcc $394d49	                BCC ret_failure                 ; If it did not work, return the error
.394cf6		e2 20		sep #$20	                SEP #$20        ; set A short
.394cf8		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394cfc		85 28		sta $0348	                STA DOS_TEMP
.394cfe		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394d02		85 29		sta $0349	                STA DOS_TEMP+1
.394d04		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394d08		85 2a		sta $034a	                STA DOS_TEMP+2
.394d0a		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394d0e		85 2b		sta $034b	                STA DOS_TEMP+3
.394d10		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394d12		c9 ff		cmp #$ff	                CMP #$FF
.394d14		d0 18		bne $394d2e	                BNE found_next
.394d16		a5 29		lda $0349	                LDA DOS_TEMP+1
.394d18		c9 ff		cmp #$ff	                CMP #$FF
.394d1a		d0 12		bne $394d2e	                BNE found_next
.394d1c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394d1e		c9 ff		cmp #$ff	                CMP #$FF
.394d20		d0 0c		bne $394d2e	                BNE found_next
.394d22		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394d24		c9 0f		cmp #$0f	                CMP #$0F
.394d26		d0 06		bne $394d2e	                BNE found_next                  ; No: return this cluster as the next
.394d28		e2 20		sep #$20	                SEP #$20        ; set A short
.394d2a		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394d2c		80 1b		bra $394d49	                BRA ret_failure
.394d2e						found_next
.394d2e		e2 20		sep #$20	                SEP #$20        ; set A short
.394d30		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394d32		85 10		sta $0330	                STA DOS_CLUS_ID
.394d34		a5 29		lda $0349	                LDA DOS_TEMP+1
.394d36		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394d38		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394d3a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d3c		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394d3e		85 13		sta $0333	                STA DOS_CLUS_ID+3
.394d40						ret_success
.394d40		e2 20		sep #$20	                SEP #$20        ; set A short
.394d42		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394d44		28		plp		                PLP
.394d45		2b		pld		                PLD
.394d46		ab		plb		                PLB
.394d47		38		sec		                SEC
.394d48		6b		rtl		                RTL
.394d49						ret_failure
.394d49		e2 20		sep #$20	                SEP #$20        ; set A short
.394d4b		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394d4d		28		plp		                PLP
.394d4e		2b		pld		                PLD
.394d4f		ab		plb		                PLB
.394d50		18		clc		                CLC
.394d51		6b		rtl		                RTL
.394d52						DOS_READNEXT
.394d52		08		php		                PHP
.394d53		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d55		22 4e 4c 39	jsl $394c4e	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394d59		90 09		bcc $394d64	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394d5b		22 3e 48 39	jsl $39483e	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394d5f		90 03		bcc $394d64	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394d61		28		plp		ret_success     PLP
.394d62		38		sec		                SEC
.394d63		6b		rtl		                RTL
.394d64		28		plp		pass_failure    PLP
.394d65		18		clc		                CLC
.394d66		6b		rtl		                RTL
.394d67						DOS_FREECLUS
.394d67		08		php		                PHP
.394d68		48		pha		                PHA             ; begin setdp macro
.394d69		08		php		                PHP
.394d6a		c2 20		rep #$20	                REP #$20        ; set A long
.394d6c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d6f		5b		tcd		                TCD
.394d70		28		plp		                PLP
.394d71		68		pla		                PLA             ; end setdp macro
.394d72		e2 20		sep #$20	                SEP #$20        ; set A short
.394d74		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d78		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d7a		d0 08		bne $394d84	                BNE fat32                       ; No: assume it's FAT32
.394d7c		22 f8 4d 39	jsl $394df8	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394d80		90 0d		bcc $394d8f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d82		80 06		bra $394d8a	                BRA ret_success
.394d84		22 d0 4e 39	jsl $394ed0	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394d88		90 05		bcc $394d8f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d8a		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394d8c		28		plp		                PLP
.394d8d		38		sec		                SEC
.394d8e		6b		rtl		                RTL
.394d8f		28		plp		pass_failure    PLP
.394d90		18		clc		                CLC
.394d91		6b		rtl		                RTL
.394d92						FDC_READ2FAT12
.394d92		8b		phb		                    PHB
.394d93		0b		phd		                    PHD
.394d94		08		php		                    PHP
.394d95		48		pha		                PHA             ; begin setdbr macro
.394d96		08		php		                PHP
.394d97		e2 20		sep #$20	                SEP #$20        ; set A short
.394d99		a9 00		lda #$00	                LDA #0
.394d9b		48		pha		                PHA
.394d9c		ab		plb		                PLB
.394d9d		28		plp		                PLP
.394d9e		68		pla		                PLA             ; end setdbr macro
.394d9f		48		pha		                PHA             ; begin setdp macro
.394da0		08		php		                PHP
.394da1		c2 20		rep #$20	                REP #$20        ; set A long
.394da3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394da6		5b		tcd		                TCD
.394da7		28		plp		                PLP
.394da8		68		pla		                PLA             ; end setdp macro
.394da9		c2 30		rep #$30	                REP #$30        ; set A&X long
.394dab		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394dae		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394db0		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394db3		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394db5		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394db7		85 02		sta $0322	                    STA BIOS_LBA
.394db9		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394dbb		85 04		sta $0324	                    STA BIOS_LBA+2
.394dbd		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.394dc1		b0 07		bcs $394dca	                    BCS inc_sect2                   ; If success: start getting the second sector
.394dc3		e2 20		sep #$20	                SEP #$20        ; set A short
.394dc5		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394dc7		82 1c 00	brl $394de6	                    BRL ret_failure
.394dca						inc_sect2
.394dca		c2 20		rep #$20	                REP #$20        ; set A long
.394dcc		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394dce		d0 02		bne $394dd2	                    BNE inc_buff_ptr
.394dd0		e6 04		inc $0324	                    INC BIOS_LBA+2
.394dd2		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dd5		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394dd7		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dda		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394ddc		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.394de0		b0 0d		bcs $394def	                    BCS ret_success                 ; If success, return success
.394de2		e2 20		sep #$20	                SEP #$20        ; set A short
.394de4		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394de6						ret_failure
.394de6		e2 20		sep #$20	                SEP #$20        ; set A short
.394de8		85 00		sta $0320	                    STA BIOS_STATUS
.394dea		28		plp		                    PLP
.394deb		2b		pld		                    PLD
.394dec		ab		plb		                    PLB
.394ded		18		clc		                    CLC
.394dee		6b		rtl		                    RTL
.394def						ret_success
.394def		e2 20		sep #$20	                SEP #$20        ; set A short
.394df1		64 00		stz $0320	                    STZ BIOS_STATUS
.394df3		28		plp		                    PLP
.394df4		2b		pld		                    PLD
.394df5		ab		plb		                    PLB
.394df6		38		sec		                    SEC
.394df7		6b		rtl		                    RTL
.394df8						DOS_FREECLUS12
.394df8		da		phx		                PHX
.394df9		8b		phb		                PHB
.394dfa		0b		phd		                PHD
.394dfb		08		php		                PHP
.394dfc		48		pha		                PHA             ; begin setdbr macro
.394dfd		08		php		                PHP
.394dfe		e2 20		sep #$20	                SEP #$20        ; set A short
.394e00		a9 00		lda #$00	                LDA #0
.394e02		48		pha		                PHA
.394e03		ab		plb		                PLB
.394e04		28		plp		                PLP
.394e05		68		pla		                PLA             ; end setdbr macro
.394e06		48		pha		                PHA             ; begin setdp macro
.394e07		08		php		                PHP
.394e08		c2 20		rep #$20	                REP #$20        ; set A long
.394e0a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e0d		5b		tcd		                TCD
.394e0e		28		plp		                PLP
.394e0f		68		pla		                PLA             ; end setdp macro
.394e10		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e12		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394e15		85 10		sta $0330	                STA DOS_CLUS_ID
.394e17		a9 00 00	lda #$0000	                LDA #0
.394e1a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e1c		22 08 4b 39	jsl $394b08	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394e20		22 92 4d 39	jsl $394d92	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394e24		b0 07		bcs $394e2d	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394e26		e2 20		sep #$20	                SEP #$20        ; set A short
.394e28		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e2a		82 99 00	brl $394ec6	                BRL ret_failure
.394e2d						start_of_fat
.394e2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e2f		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394e31		89 01 00	bit #$0001	                BIT #1
.394e34		d0 09		bne $394e3f	                BNE is_odd
.394e36		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394e3a		29 ff 0f	and #$0fff	                AND #$0FFF
.394e3d		80 08		bra $394e47	                BRA chk_available
.394e3f		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394e43		4a		lsr a		                LSR A
.394e44		4a		lsr a		                LSR A
.394e45		4a		lsr a		                LSR A
.394e46		4a		lsr a		                LSR A
.394e47						chk_available
.394e47		85 28		sta $0348	                STA DOS_TEMP
.394e49		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394e4c		f0 03		beq $394e51	                BEQ chk_found
.394e4e		82 39 00	brl $394e8a	                BRL next_cluster                ; No: advance to the next cluster
.394e51		8a		txa		chk_found       TXA
.394e52		85 2a		sta $034a	                STA DOS_TEMP+2
.394e54		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394e56		89 01 00	bit #$0001	                BIT #1
.394e59		d0 0d		bne $394e68	                BNE is_odd2
.394e5b						is_even2
.394e5b		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394e5f		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394e62		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e66		80 0b		bra $394e73	                BRA write_fat
.394e68						is_odd2
.394e68		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394e6c		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394e6f		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e73		22 9a 4f 39	jsl $394f9a	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394e77		b0 07		bcs $394e80	                BCS ret_success                 ; If success: return success
.394e79		e2 20		sep #$20	                SEP #$20        ; set A short
.394e7b		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394e7d		82 46 00	brl $394ec6	                BRL ret_failure
.394e80						ret_success
.394e80		e2 20		sep #$20	                SEP #$20        ; set A short
.394e82		64 0e		stz $032e	                STZ DOS_STATUS
.394e84		28		plp		                PLP
.394e85		2b		pld		                PLD
.394e86		ab		plb		                PLB
.394e87		fa		plx		                PLX
.394e88		38		sec		                SEC
.394e89		6b		rtl		                RTL
.394e8a						next_cluster
.394e8a		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394e8c		d0 02		bne $394e90	                BNE calc_entry
.394e8e		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e90		22 08 4b 39	jsl $394b08	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394e94		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394e97		f0 03		beq $394e9c	                BEQ chk_end_of_fat
.394e99		82 93 ff	brl $394e2f	                BRL chk_cluster                 ; No: go back and check it too
.394e9c						chk_end_of_fat
.394e9c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394e9e		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394ea2		d0 0f		bne $394eb3	                BNE next_2
.394ea4		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394ea6		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394eaa		d0 07		bne $394eb3	                BNE next_2                      ; No: get the next to sectors
.394eac		e2 20		sep #$20	                SEP #$20        ; set A short
.394eae		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394eb0		82 13 00	brl $394ec6	                BRL ret_failure
.394eb3						next_2
.394eb3		22 92 4d 39	jsl $394d92	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394eb7		90 06		bcc $394ebf	                BCC fat_fail                    ; If failed: return error
.394eb9		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394ebc		82 70 ff	brl $394e2f	                BRL chk_cluster                 ; And start checking from there
.394ebf						fat_fail
.394ebf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ec1		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ec3		82 00 00	brl $394ec6	                BRL ret_failure
.394ec6						ret_failure
.394ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.394ec8		85 0e		sta $032e	                STA DOS_STATUS
.394eca		28		plp		                PLP
.394ecb		2b		pld		                PLD
.394ecc		ab		plb		                PLB
.394ecd		fa		plx		                PLX
.394ece		18		clc		                CLC
.394ecf		6b		rtl		                RTL
.394ed0						DOS_FREECLUS32
.394ed0		8b		phb		                PHB
.394ed1		0b		phd		                PHD
.394ed2		08		php		                PHP
.394ed3		48		pha		                PHA             ; begin setdbr macro
.394ed4		08		php		                PHP
.394ed5		e2 20		sep #$20	                SEP #$20        ; set A short
.394ed7		a9 00		lda #$00	                LDA #0
.394ed9		48		pha		                PHA
.394eda		ab		plb		                PLB
.394edb		28		plp		                PLP
.394edc		68		pla		                PLA             ; end setdbr macro
.394edd		48		pha		                PHA             ; begin setdp macro
.394ede		08		php		                PHP
.394edf		c2 20		rep #$20	                REP #$20        ; set A long
.394ee1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ee4		5b		tcd		                TCD
.394ee5		28		plp		                PLP
.394ee6		68		pla		                PLA             ; end setdp macro
.394ee7		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ee9		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394eec		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394eee		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394ef1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ef3		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394ef7		85 02		sta $0322	                STA BIOS_LBA
.394ef9		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394efd		85 04		sta $0324	                STA BIOS_LBA+2
.394eff		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.394f03		b0 07		bcs $394f0c	                BCS initial_entry               ; If OK: set the initial entry to check
.394f05		e2 20		sep #$20	                SEP #$20        ; set A short
.394f07		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394f09		82 6b 00	brl $394f77	                BRL ret_failure
.394f0c						initial_entry
.394f0c		c2 20		rep #$20	                REP #$20        ; set A long
.394f0e		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394f11		85 10		sta $0330	                STA DOS_CLUS_ID
.394f13		a9 00 00	lda #$0000	                LDA #0
.394f16		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f18		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394f1b		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394f1f		d0 06		bne $394f27	                BNE next_entry                  ; No: move to the next entry
.394f21		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394f25		f0 36		beq $394f5d	                BEQ found_free                  ; Yes: go to allocate and return it
.394f27		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394f29		d0 02		bne $394f2d	                BNE inc_ptr
.394f2b		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394f2d		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394f2e		e8		inx		                INX
.394f2f		e8		inx		                INX
.394f30		e8		inx		                INX
.394f31		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394f34		90 e5		bcc $394f1b	                BLT chk_entry                   ; No: check this entry
.394f36		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f38		d0 18		bne $394f52	                BNE get_block
.394f3a		e6 04		inc $0324	                INC BIOS_LBA+2
.394f3c		a5 04		lda $0324	                LDA BIOS_LBA+2
.394f3e		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394f42		90 0e		bcc $394f52	                BLT get_block
.394f44		a5 02		lda $0322	                LDA BIOS_LBA
.394f46		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394f4a		90 06		bcc $394f52	                BLT get_block
.394f4c		e2 20		sep #$20	                SEP #$20        ; set A short
.394f4e		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394f50		80 25		bra $394f77	                BRA ret_failure
.394f52		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394f56		90 1b		bcc $394f73	                BCC ret_fat_error               ; If error: throw a FAT error
.394f58		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394f5b		80 be		bra $394f1b	                BRA chk_entry                   ; Check this entry
.394f5d						found_free
.394f5d		c2 20		rep #$20	                REP #$20        ; set A long
.394f5f		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394f62		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394f66		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394f69		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394f6d		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f71		b0 0d		bcs $394f80	                BCS ret_success                 ; If OK: return success
.394f73						ret_fat_error
.394f73		e2 20		sep #$20	                SEP #$20        ; set A short
.394f75		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394f77						ret_failure
.394f77		e2 20		sep #$20	                SEP #$20        ; set A short
.394f79		85 0e		sta $032e	                STA DOS_STATUS
.394f7b		28		plp		                PLP
.394f7c		2b		pld		                PLD
.394f7d		ab		plb		                PLB
.394f7e		18		clc		                CLC
.394f7f		6b		rtl		                RTL
.394f80						ret_success
.394f80		e2 20		sep #$20	                SEP #$20        ; set A short
.394f82		64 0e		stz $032e	                STZ DOS_STATUS
.394f84		28		plp		                PLP
.394f85		2b		pld		                PLD
.394f86		ab		plb		                PLB
.394f87		38		sec		                SEC
.394f88		6b		rtl		                RTL
.394f89						DELCLUSTER
.394f89		e2 20		sep #$20	                SEP #$20        ; set A short
.394f8b		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f8f		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394f91		d0 04		bne $394f97	                BNE fat32                       ; No: assume it's FAT32
.394f93		5c e1 4f 39	jmp $394fe1	fat12           JML DELCLUSTER12
.394f97		4c 2f 50	jmp $39502f	fat32           JMP DELCLUSTER32
.394f9a						WRITEFAT12
.394f9a		8b		phb		                PHB
.394f9b		0b		phd		                PHD
.394f9c		48		pha		                PHA             ; begin setdbr macro
.394f9d		08		php		                PHP
.394f9e		e2 20		sep #$20	                SEP #$20        ; set A short
.394fa0		a9 00		lda #$00	                LDA #0
.394fa2		48		pha		                PHA
.394fa3		ab		plb		                PLB
.394fa4		28		plp		                PLP
.394fa5		68		pla		                PLA             ; end setdbr macro
.394fa6		48		pha		                PHA             ; begin setdp macro
.394fa7		08		php		                PHP
.394fa8		c2 20		rep #$20	                REP #$20        ; set A long
.394faa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fad		5b		tcd		                TCD
.394fae		28		plp		                PLP
.394faf		68		pla		                PLA             ; end setdp macro
.394fb0		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fb2		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394fb5		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394fb7		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394fba		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394fbc		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394fbe		85 02		sta $0322	                STA BIOS_LBA
.394fc0		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394fc2		85 04		sta $0324	                STA BIOS_LBA+2
.394fc4		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394fc8		90 14		bcc $394fde	                BCC done
.394fca		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394fcd		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394fcf		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394fd2		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394fd4		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394fd6		d0 02		bne $394fda	                BNE put_second
.394fd8		e6 04		inc $0324	                INC BIOS_LBA+2
.394fda		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394fde		2b		pld		done            PLD
.394fdf		ab		plb		                PLB
.394fe0		6b		rtl		                RTL
.394fe1						DELCLUSTER12
.394fe1		8b		phb		                PHB
.394fe2		0b		phd		                PHD
.394fe3		08		php		                PHP
.394fe4		48		pha		                PHA             ; begin setdbr macro
.394fe5		08		php		                PHP
.394fe6		e2 20		sep #$20	                SEP #$20        ; set A short
.394fe8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fea		48		pha		                PHA
.394feb		ab		plb		                PLB
.394fec		28		plp		                PLP
.394fed		68		pla		                PLA             ; end setdbr macro
.394fee		48		pha		                PHA             ; begin setdp macro
.394fef		08		php		                PHP
.394ff0		c2 20		rep #$20	                REP #$20        ; set A long
.394ff2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ff5		5b		tcd		                TCD
.394ff6		28		plp		                PLP
.394ff7		68		pla		                PLA             ; end setdp macro
.394ff8		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ffa		22 7b 4b 39	jsl $394b7b	                JSL FATFORCLUSTER12
.394ffe		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394fff		89 01 00	bit #$0001	                BIT #1
.395002		d0 08		bne $39500c	                BNE is_odd
.395004		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.395007		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.39500a		80 06		bra $395012	                BRA save_update
.39500c		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.39500f		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.395012		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.395015		22 9a 4f 39	jsl $394f9a	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.395019		b0 0b		bcs $395026	                BCS ret_success
.39501b						ret_failure
.39501b		e2 20		sep #$20	                SEP #$20        ; set A short
.39501d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39501f		85 0e		sta $032e	                STA DOS_STATUS
.395021		28		plp		                PLP
.395022		2b		pld		                PLD
.395023		ab		plb		                PLB
.395024		18		clc		                CLC
.395025		6b		rtl		                RTL
.395026						ret_success
.395026		e2 20		sep #$20	                SEP #$20        ; set A short
.395028		64 0e		stz $032e	                STZ DOS_STATUS
.39502a		28		plp		                PLP
.39502b		2b		pld		                PLD
.39502c		ab		plb		                PLB
.39502d		38		sec		                SEC
.39502e		6b		rtl		                RTL
.39502f						DELCLUSTER32
.39502f		8b		phb		                PHB
.395030		0b		phd		                PHD
.395031		08		php		                PHP
.395032		c2 30		rep #$30	                REP #$30        ; set A&X long
.395034		48		pha		                PHA             ; begin setdbr macro
.395035		08		php		                PHP
.395036		e2 20		sep #$20	                SEP #$20        ; set A short
.395038		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39503a		48		pha		                PHA
.39503b		ab		plb		                PLB
.39503c		28		plp		                PLP
.39503d		68		pla		                PLA             ; end setdbr macro
.39503e		48		pha		                PHA             ; begin setdp macro
.39503f		08		php		                PHP
.395040		c2 20		rep #$20	                REP #$20        ; set A long
.395042		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395045		5b		tcd		                TCD
.395046		28		plp		                PLP
.395047		68		pla		                PLA             ; end setdp macro
.395048		22 e3 4b 39	jsl $394be3	                JSL FATFORCLUSTER32
.39504c		a9 00 00	lda #$0000	                LDA #0
.39504f		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.395052		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.395055		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.395059		b0 0b		bcs $395066	                BCS ret_success
.39505b						ret_failure
.39505b		e2 20		sep #$20	                SEP #$20        ; set A short
.39505d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39505f		85 0e		sta $032e	                STA DOS_STATUS
.395061		28		plp		                PLP
.395062		2b		pld		                PLD
.395063		ab		plb		                PLB
.395064		18		clc		                CLC
.395065		6b		rtl		                RTL
.395066						ret_success
.395066		e2 20		sep #$20	                SEP #$20        ; set A short
.395068		64 0e		stz $032e	                STZ DOS_STATUS
.39506a		28		plp		                PLP
.39506b		2b		pld		                PLD
.39506c		ab		plb		                PLB
.39506d		38		sec		                SEC
.39506e		6b		rtl		                RTL
.39506f						DOS_APPENDCLUS
.39506f		8b		phb		                PHB
.395070		0b		phd		                PHD
.395071		08		php		                PHP
.395072		48		pha		                PHA             ; begin setdbr macro
.395073		08		php		                PHP
.395074		e2 20		sep #$20	                SEP #$20        ; set A short
.395076		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395078		48		pha		                PHA
.395079		ab		plb		                PLB
.39507a		28		plp		                PLP
.39507b		68		pla		                PLA             ; end setdbr macro
.39507c		48		pha		                PHA             ; begin setdp macro
.39507d		08		php		                PHP
.39507e		c2 20		rep #$20	                REP #$20        ; set A long
.395080		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395083		5b		tcd		                TCD
.395084		28		plp		                PLP
.395085		68		pla		                PLA             ; end setdp macro
.395086		c2 30		rep #$30	                REP #$30        ; set A&X long
.395088		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.39508a		48		pha		                PHA
.39508b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39508d		48		pha		                PHA
.39508e		22 67 4d 39	jsl $394d67	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.395092		b0 09		bcs $39509d	                BCS save_cluster                ; If we got a cluster, write the data to it
.395094		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.395095		85 10		sta $0330	                STA DOS_CLUS_ID
.395097		68		pla		                PLA
.395098		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39509a		82 7d 00	brl $39511a	                BRL pass_failure                ; Pass the failure back up the chain
.39509d		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.39509f		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.3950a2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950a4		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.3950a7		22 7b 48 39	jsl $39487b	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.3950ab		90 e7		bcc $395094	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.3950ad		68		pla		                PLA                             ; Restore the cluster of the file
.3950ae		85 10		sta $0330	                STA DOS_CLUS_ID
.3950b0		68		pla		                PLA
.3950b1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3950b3		22 4e 4c 39	jsl $394c4e	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.3950b7		b0 fa		bcs $3950b3	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.3950b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3950bb		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3950bf		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3950c1		d0 3d		bne $395100	                BNE fat32                       ; No: assume it's FAT32
.3950c3						fat12
.3950c3		c2 20		rep #$20	                REP #$20        ; set A long
.3950c5		22 08 4b 39	jsl $394b08	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.3950c9		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.3950cb		89 01 00	bit #$0001	                BIT #1
.3950ce		d0 11		bne $3950e1	                BNE is_odd
.3950d0		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.3950d3		29 ff 0f	and #$0fff	                AND #$0FFF
.3950d6		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.3950d9		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.3950dc		29 00 f0	and #$f000	                AND #$F000
.3950df		80 10		bra $3950f1	                BRA update_fat12
.3950e1		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.3950e4		0a		asl a		                ASL A
.3950e5		0a		asl a		                ASL A
.3950e6		0a		asl a		                ASL A
.3950e7		0a		asl a		                ASL A
.3950e8		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.3950eb		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.3950ee		29 0f 00	and #$000f	                AND #$000F
.3950f1		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.3950f4		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3950f7		22 9a 4f 39	jsl $394f9a	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3950fb		b0 22		bcs $39511f	                BCS ret_success
.3950fd		82 1a 00	brl $39511a	                BRL pass_failure
.395100						fat32
.395100		c2 20		rep #$20	                REP #$20        ; set A long
.395102		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.395105		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395108		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.39510b		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.39510e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.395112		b0 0b		bcs $39511f	                BCS ret_success
.395114		e2 20		sep #$20	                SEP #$20        ; set A short
.395116		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.395118		85 0e		sta $032e	                STA DOS_STATUS
.39511a		28		plp		pass_failure    PLP
.39511b		2b		pld		                PLD
.39511c		ab		plb		                PLB
.39511d		18		clc		                CLC
.39511e		6b		rtl		                RTL
.39511f						ret_success
.39511f		e2 20		sep #$20	                SEP #$20        ; set A short
.395121		64 0e		stz $032e	                STZ DOS_STATUS
.395123		28		plp		                PLP
.395124		2b		pld		                PLD
.395125		ab		plb		                PLB
.395126		38		sec		                SEC
.395127		6b		rtl		                RTL
.395128						BCD2BIN
.395128		8b		phb		                PHB
.395129		0b		phd		                PHD
.39512a		08		php		                PHP
.39512b		48		pha		                PHA             ; begin setdbr macro
.39512c		08		php		                PHP
.39512d		e2 20		sep #$20	                SEP #$20        ; set A short
.39512f		a9 00		lda #$00	                LDA #0
.395131		48		pha		                PHA
.395132		ab		plb		                PLB
.395133		28		plp		                PLP
.395134		68		pla		                PLA             ; end setdbr macro
.395135		48		pha		                PHA             ; begin setdp macro
.395136		08		php		                PHP
.395137		c2 20		rep #$20	                REP #$20        ; set A long
.395139		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39513c		5b		tcd		                TCD
.39513d		28		plp		                PLP
.39513e		68		pla		                PLA             ; end setdp macro
.39513f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395141		85 28		sta $0348	                STA DOS_TEMP
.395143		29 0f 00	and #$000f	                AND #$000F
.395146		85 2a		sta $034a	                STA DOS_TEMP+2
.395148		a5 28		lda $0348	                LDA DOS_TEMP
.39514a		4a		lsr a		                LSR A
.39514b		4a		lsr a		                LSR A
.39514c		4a		lsr a		                LSR A
.39514d		4a		lsr a		                LSR A
.39514e		85 28		sta $0348	                STA DOS_TEMP
.395150		29 0f 00	and #$000f	                AND #$000F
.395153		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395157		a9 0a 00	lda #$000a	                LDA #10
.39515a		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39515e		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395162		18		clc		                CLC
.395163		65 2a		adc $034a	                ADC DOS_TEMP+2
.395165		85 2a		sta $034a	                STA DOS_TEMP+2
.395167		a5 28		lda $0348	                LDA DOS_TEMP
.395169		4a		lsr a		                LSR A
.39516a		4a		lsr a		                LSR A
.39516b		4a		lsr a		                LSR A
.39516c		4a		lsr a		                LSR A
.39516d		85 28		sta $0348	                STA DOS_TEMP
.39516f		29 0f 00	and #$000f	                AND #$000F
.395172		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395176		a9 64 00	lda #$0064	                LDA #100
.395179		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39517d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395181		18		clc		                CLC
.395182		65 2a		adc $034a	                ADC DOS_TEMP+2
.395184		85 2a		sta $034a	                STA DOS_TEMP+2
.395186		a5 28		lda $0348	                LDA DOS_TEMP
.395188		4a		lsr a		                LSR A
.395189		4a		lsr a		                LSR A
.39518a		4a		lsr a		                LSR A
.39518b		4a		lsr a		                LSR A
.39518c		29 0f 00	and #$000f	                AND #$000F
.39518f		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395193		a9 e8 03	lda #$03e8	                LDA #1000
.395196		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39519a		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39519e		18		clc		                CLC
.39519f		65 2a		adc $034a	                ADC DOS_TEMP+2
.3951a1		28		plp		                PLP
.3951a2		2b		pld		                PLD
.3951a3		ab		plb		                PLB
.3951a4		6b		rtl		                RTL
.3951a5						DOS_RTCCREATE
.3951a5		8b		phb		                PHB
.3951a6		0b		phd		                PHD
.3951a7		08		php		                PHP
.3951a8		48		pha		                PHA             ; begin setdbr macro
.3951a9		08		php		                PHP
.3951aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3951ac		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951ae		48		pha		                PHA
.3951af		ab		plb		                PLB
.3951b0		28		plp		                PLP
.3951b1		68		pla		                PLA             ; end setdbr macro
.3951b2		48		pha		                PHA             ; begin setdp macro
.3951b3		08		php		                PHP
.3951b4		c2 20		rep #$20	                REP #$20        ; set A long
.3951b6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951b9		5b		tcd		                TCD
.3951ba		28		plp		                PLP
.3951bb		68		pla		                PLA             ; end setdp macro
.3951bc		c2 10		rep #$10	                REP #$10        ; set X long
.3951be		e2 20		sep #$20	                SEP #$20        ; set A short
.3951c0		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.3951c4		09 08		ora #$08	                ORA #%00001000
.3951c6		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.3951ca		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.3951ce		85 29		sta $0349	                STA DOS_TEMP+1
.3951d0		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.3951d4		85 28		sta $0348	                STA DOS_TEMP
.3951d6		c2 20		rep #$20	                REP #$20        ; set A long
.3951d8		a5 28		lda $0348	                LDA DOS_TEMP
.3951da		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.3951de		85 28		sta $0348	                STA DOS_TEMP
.3951e0		38		sec		                SEC                         ; Year is relative to 1980
.3951e1		e9 bc 07	sbc #$07bc	                SBC #1980
.3951e4		c2 20		rep #$20	                REP #$20        ; set A long
.3951e6		0a		asl a		                ASL A
.3951e7		0a		asl a		                ASL A
.3951e8		0a		asl a		                ASL A
.3951e9		0a		asl a		                ASL A
.3951ea		0a		asl a		                ASL A
.3951eb		0a		asl a		                ASL A
.3951ec		0a		asl a		                ASL A
.3951ed		0a		asl a		                ASL A
.3951ee		0a		asl a		                ASL A
.3951ef		29 00 fe	and #$fe00	                AND #$FE00
.3951f2		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951f5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3951f9		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3951fd		c2 20		rep #$20	                REP #$20        ; set A long
.3951ff		29 ff 00	and #$00ff	                AND #$00FF
.395202		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.395206		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.395209		0a		asl a		                ASL A
.39520a		0a		asl a		                ASL A
.39520b		0a		asl a		                ASL A
.39520c		0a		asl a		                ASL A
.39520d		0a		asl a		                ASL A
.39520e		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.395211		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395214		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395216		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395218		e2 20		sep #$20	                SEP #$20        ; set A short
.39521a		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.39521e		c2 20		rep #$20	                REP #$20        ; set A long
.395220		29 ff 00	and #$00ff	                AND #$00FF
.395223		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.395227		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39522a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39522d		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39522f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395231		e2 20		sep #$20	                SEP #$20        ; set A short
.395233		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395237		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.395239		c2 20		rep #$20	                REP #$20        ; set A long
.39523b		29 ff 00	and #$00ff	                AND #$00FF
.39523e		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.395242		c2 20		rep #$20	                REP #$20        ; set A long
.395244		0a		asl a		                ASL A
.395245		0a		asl a		                ASL A
.395246		0a		asl a		                ASL A
.395247		0a		asl a		                ASL A
.395248		0a		asl a		                ASL A
.395249		0a		asl a		                ASL A
.39524a		0a		asl a		                ASL A
.39524b		0a		asl a		                ASL A
.39524c		0a		asl a		                ASL A
.39524d		0a		asl a		                ASL A
.39524e		0a		asl a		                ASL A
.39524f		29 00 f8	and #$f800	                AND #$F800
.395252		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395255		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395257		e2 20		sep #$20	                SEP #$20        ; set A short
.395259		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.39525d		c2 20		rep #$20	                REP #$20        ; set A long
.39525f		29 ff 00	and #$00ff	                AND #$00FF
.395262		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.395266		c2 20		rep #$20	                REP #$20        ; set A long
.395268		0a		asl a		                ASL A
.395269		0a		asl a		                ASL A
.39526a		0a		asl a		                ASL A
.39526b		0a		asl a		                ASL A
.39526c		0a		asl a		                ASL A
.39526d		29 e0 07	and #$07e0	                AND #$07E0
.395270		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395273		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395275		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395277		e2 20		sep #$20	                SEP #$20        ; set A short
.395279		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39527d		c2 20		rep #$20	                REP #$20        ; set A long
.39527f		29 ff 00	and #$00ff	                AND #$00FF
.395282		22 28 51 39	jsl $395128	                JSL BCD2BIN                 ; Convert it to binary
.395286		c2 20		rep #$20	                REP #$20        ; set A long
.395288		29 1f 00	and #$001f	                AND #$001F
.39528b		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39528e		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395290		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395292		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395296		29 f7 00	and #$00f7	                AND #%11110111
.395299		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39529d		28		plp		                PLP
.39529e		2b		pld		                PLD
.39529f		ab		plb		                PLB
.3952a0		6b		rtl		                RTL
.3952a1						DOS_CREATE
.3952a1		8b		phb		                PHB
.3952a2		0b		phd		                PHD
.3952a3		08		php		                PHP
.3952a4		48		pha		                PHA             ; begin setdbr macro
.3952a5		08		php		                PHP
.3952a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3952a8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952aa		48		pha		                PHA
.3952ab		ab		plb		                PLB
.3952ac		28		plp		                PLP
.3952ad		68		pla		                PLA             ; end setdbr macro
.3952ae		48		pha		                PHA             ; begin setdp macro
.3952af		08		php		                PHP
.3952b0		c2 20		rep #$20	                REP #$20        ; set A long
.3952b2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952b5		5b		tcd		                TCD
.3952b6		28		plp		                PLP
.3952b7		68		pla		                PLA             ; end setdp macro
.3952b8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3952ba		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.3952bd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952bf		85 28		sta $0348	                STA DOS_TEMP
.3952c1		c8		iny		                INY
.3952c2		c8		iny		                INY
.3952c3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952c5		85 2a		sta $034a	                STA DOS_TEMP+2
.3952c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3952c9		a0 00 00	ldy #$0000	                LDY #0
.3952cc		a2 00 00	ldx #$0000	                LDX #0
.3952cf		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3952d1		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3952d3		f0 04		beq $3952d9	                BEQ find_file                   ; If it's NULL, we're done
.3952d5		e8		inx		                INX
.3952d6		c8		iny		                INY
.3952d7		80 f6		bra $3952cf	                BRA path_loop
.3952d9		22 8c 49 39	jsl $39498c	find_file       JSL DOS_PARSE_PATH
.3952dd		22 24 4a 39	jsl $394a24	                JSL DOS_FINDFILE
.3952e1		90 07		bcc $3952ea	                BCC set_device
.3952e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3952e5		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3952e7		82 d2 00	brl $3953bc	                BRL ret_failure
.3952ea						set_device
.3952ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3952ec		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3952ef		a5 01		lda $0321	                LDA BIOS_DEV
.3952f1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952f3						validate_name
.3952f3		22 67 4d 39	jsl $394d67	                JSL DOS_FREECLUS
.3952f7		b0 03		bcs $3952fc	                BCS save_data
.3952f9		82 c4 00	brl $3953c0	                BRL pass_failure
.3952fc						save_data
.3952fc		c2 20		rep #$20	                REP #$20        ; set A long
.3952fe		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.395301		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.395303		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395305		c8		iny		                INY
.395306		c8		iny		                INY
.395307		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395309		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39530b		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.39530e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395310		85 1c		sta $033c	                STA DOS_BUFF_PTR
.395312		c8		iny		                INY
.395313		c8		iny		                INY
.395314		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395316		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395318		22 7b 48 39	jsl $39487b	                JSL DOS_PUTCLUSTER
.39531c		b0 00		bcs $39531e	                BCS find_dir
.39531e						find_dir
.39531e		c2 20		rep #$20	                REP #$20        ; set A long
.395320		22 b6 43 39	jsl $3943b6	                JSL DOS_DIRFINDFREE
.395324		b0 1a		bcs $395340	                BCS set_entry
.395326		c2 20		rep #$20	                REP #$20        ; set A long
.395328		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39532b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39532d		85 10		sta $0330	                STA DOS_CLUS_ID
.39532f		c8		iny		                INY
.395330		c8		iny		                INY
.395331		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395333		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395335		22 2f 50 39	jsl $39502f	                JSL DELCLUSTER32                ; Delete the cluster
.395339		e2 20		sep #$20	                SEP #$20        ; set A short
.39533b		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39533d		82 7c 00	brl $3953bc	                BRL ret_failure
.395340						set_entry
.395340		e2 20		sep #$20	                SEP #$20        ; set A short
.395342		a0 00 00	ldy #$0000	                LDY #0
.395345		a9 00		lda #$00	                LDA #0                          ; NULL
.395347		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.395349		c8		iny		                INY
.39534a		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39534d		d0 f8		bne $395347	                BNE copy_dir_loop
.39534f		a0 00 00	ldy #$0000	                LDY #0
.395352		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395355		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395357		c8		iny		                INY
.395358		c0 0b 00	cpy #$000b	                CPY #11
.39535b		d0 f5		bne $395352	                BNE name_loop
.39535d		c2 20		rep #$20	                REP #$20        ; set A long
.39535f		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395362		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395364		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395367		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395369		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39536c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39536e		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395371		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395373		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395376		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395378		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39537b		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39537d		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395380		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395382		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395385		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395387		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39538a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.39538d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39538f		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395392		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395394		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395397		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395399		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39539c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39539e		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.3953a1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3953a3		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.3953a6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a8		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.3953ab		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3953ad		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.3953b0		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3953b2		c2 20		rep #$20	                REP #$20        ; set A long
.3953b4		22 74 44 39	jsl $394474	                JSL DOS_DIRWRITE
.3953b8		b0 0b		bcs $3953c5	                BCS ret_success
.3953ba		80 04		bra $3953c0	                BRA pass_failure
.3953bc						ret_failure
.3953bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3953be		85 0e		sta $032e	                STA DOS_STATUS
.3953c0		28		plp		pass_failure    PLP
.3953c1		2b		pld		                PLD
.3953c2		ab		plb		                PLB
.3953c3		18		clc		                CLC
.3953c4		6b		rtl		                RTL
.3953c5						ret_success
.3953c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3953c7		64 0e		stz $032e	                STZ DOS_STATUS
.3953c9		28		plp		                PLP
.3953ca		2b		pld		                PLD
.3953cb		ab		plb		                PLB
.3953cc		38		sec		                SEC
.3953cd		6b		rtl		                RTL
.3953ce						DOS_COPYPATH
.3953ce		da		phx		                PHX
.3953cf		5a		phy		                PHY
.3953d0		8b		phb		                PHB
.3953d1		0b		phd		                PHD
.3953d2		08		php		                PHP
.3953d3		48		pha		                PHA             ; begin setdbr macro
.3953d4		08		php		                PHP
.3953d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3953d7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953d9		48		pha		                PHA
.3953da		ab		plb		                PLB
.3953db		28		plp		                PLP
.3953dc		68		pla		                PLA             ; end setdbr macro
.3953dd		48		pha		                PHA             ; begin setdp macro
.3953de		08		php		                PHP
.3953df		c2 20		rep #$20	                REP #$20        ; set A long
.3953e1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953e4		5b		tcd		                TCD
.3953e5		28		plp		                PLP
.3953e6		68		pla		                PLA             ; end setdp macro
.3953e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953e9		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3953ec		a2 00 00	ldx #$0000	                LDX #0
.3953ef		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3953f1		e8		inx		                INX
.3953f2		e8		inx		                INX
.3953f3		e0 00 01	cpx #$0100	                CPX #256
.3953f6		d0 f7		bne $3953ef	                BNE clr_loop
.3953f8		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3953fa		d0 04		bne $395400	                BNE get_path            ; No: attempt to fetch the path
.3953fc		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3953fe		f0 27		beq $395427	                BEQ done                ; Yes: return an empty buffer
.395400		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.395403		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395405		85 28		sta $0348	                STA DOS_TEMP
.395407		c8		iny		                INY
.395408		c8		iny		                INY
.395409		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39540b		85 2a		sta $034a	                STA DOS_TEMP+2
.39540d		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.39540f		d0 04		bne $395415	                BNE start_copy          ; No: start copying it
.395411		a5 2a		lda $034a	                LDA DOS_TEMP+2
.395413		f0 12		beq $395427	                BEQ done                ; Yes: return an empty buffer
.395415						start_copy
.395415		e2 20		sep #$20	                SEP #$20        ; set A short
.395417		a2 00 00	ldx #$0000	                LDX #0
.39541a		a0 00 00	ldy #$0000	                LDY #0
.39541d		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.39541f		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.395421		f0 04		beq $395427	                BEQ done
.395423		e8		inx		                INX
.395424		c8		iny		                INY
.395425		d0 f6		bne $39541d	                BNE loop
.395427		28		plp		done            PLP
.395428		2b		pld		                PLD
.395429		ab		plb		                PLB
.39542a		7a		ply		                PLY
.39542b		fa		plx		                PLX
.39542c		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.39542d						DOS_TEST
.39542d		8b		phb		                PHB
.39542e		0b		phd		                PHD
.39542f		08		php		                PHP
.395430		48		pha		                PHA             ; begin setdbr macro
.395431		08		php		                PHP
.395432		e2 20		sep #$20	                SEP #$20        ; set A short
.395434		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395436		48		pha		                PHA
.395437		ab		plb		                PLB
.395438		28		plp		                PLP
.395439		68		pla		                PLA             ; end setdbr macro
.39543a		48		pha		                PHA             ; begin setdp macro
.39543b		08		php		                PHP
.39543c		c2 20		rep #$20	                REP #$20        ; set A long
.39543e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395441		5b		tcd		                TCD
.395442		28		plp		                PLP
.395443		68		pla		                PLA             ; end setdp macro
.395444		c2 30		rep #$30	                REP #$30        ; set A&X long
.395446		a9 6c 54	lda #$546c	                LDA #<>src_file
.395449		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.39544d		a9 39 00	lda #$0039	                LDA #`src_file
.395450		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395454		a9 79 54	lda #$5479	                LDA #<>dst_file
.395457		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39545b		a9 39 00	lda #$0039	                LDA #`dst_file
.39545e		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395462		22 1b 5b 39	jsl $395b1b	                JSL IF_COPY
.395466		b0 00		bcs $395468	                BCS done
.395468		28		plp		done            PLP
.395469		2b		pld		                PLD
.39546a		ab		plb		                PLB
.39546b		6b		rtl		                RTL
>39546c		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395474		2e 62 61 73 00
>395479		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395481		32 2e 62 61 73 00
.395487						IF_OPEN
.395487		da		phx		                PHX
.395488		5a		phy		                PHY
.395489		0b		phd		                PHD
.39548a		8b		phb		                PHB
.39548b		08		php		                PHP
.39548c		48		pha		                PHA             ; begin setdbr macro
.39548d		08		php		                PHP
.39548e		e2 20		sep #$20	                SEP #$20        ; set A short
.395490		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395492		48		pha		                PHA
.395493		ab		plb		                PLB
.395494		28		plp		                PLP
.395495		68		pla		                PLA             ; end setdbr macro
.395496		48		pha		                PHA             ; begin setdp macro
.395497		08		php		                PHP
.395498		c2 20		rep #$20	                REP #$20        ; set A long
.39549a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39549d		5b		tcd		                TCD
.39549e		28		plp		                PLP
.39549f		68		pla		                PLA             ; end setdp macro
.3954a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3954a2		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3954a5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954a7		89 38		bit #$38	                BIT #FD_STAT_OPEN
.3954a9		f0 05		beq $3954b0	                BEQ ok_to_open
.3954ab		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3954ad		82 1c 05	brl $3959cc	                BRL IF_FAILURE
.3954b0		22 ce 53 39	jsl $3953ce	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3954b4		22 24 4a 39	jsl $394a24	                JSL DOS_FINDFILE                ; Attempt to find the file
.3954b8		b0 03		bcs $3954bd	                BCS is_found                    ; If OK: we found the file
.3954ba		82 13 05	brl $3959d0	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3954bd						is_found
.3954bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3954bf		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3954c2		a5 01		lda $0321	                LDA BIOS_DEV
.3954c4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954c6		c2 20		rep #$20	                REP #$20        ; set A long
.3954c8		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3954cb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954cd		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3954cf		c8		iny		                INY
.3954d0		c8		iny		                INY
.3954d1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954d3		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3954d5		22 3e 48 39	jsl $39483e	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3954d9		b0 03		bcs $3954de	                BCS read_cluster
.3954db		82 f2 04	brl $3959d0	                BRL IF_PASSFAILURE
.3954de		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3954e1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954e3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954e5		c8		iny		                INY
.3954e6		c8		iny		                INY
.3954e7		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954e9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954eb		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3954ee		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954f0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f2		c8		iny		                INY
.3954f3		c8		iny		                INY
.3954f4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954f6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f8		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3954fb		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954fd		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.395500		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395502		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395505		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395507		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.39550a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39550c		e2 20		sep #$20	                SEP #$20        ; set A short
.39550e		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.395511		a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.395513		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395515		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395517		82 bd 04	brl $3959d7	                BRL IF_SUCCESS
.39551a						IF_CREATE
.39551a		da		phx		                PHX
.39551b		5a		phy		                PHY
.39551c		0b		phd		                PHD
.39551d		8b		phb		                PHB
.39551e		08		php		                PHP
.39551f		48		pha		                PHA             ; begin setdbr macro
.395520		08		php		                PHP
.395521		e2 20		sep #$20	                SEP #$20        ; set A short
.395523		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395525		48		pha		                PHA
.395526		ab		plb		                PLB
.395527		28		plp		                PLP
.395528		68		pla		                PLA             ; end setdbr macro
.395529		48		pha		                PHA             ; begin setdp macro
.39552a		08		php		                PHP
.39552b		c2 20		rep #$20	                REP #$20        ; set A long
.39552d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395530		5b		tcd		                TCD
.395531		28		plp		                PLP
.395532		68		pla		                PLA             ; end setdp macro
.395533		22 a1 52 39	jsl $3952a1	                JSL DOS_CREATE                  ; Attempt to create the file
.395537		90 18		bcc $395551	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395539		c2 30		rep #$30	                REP #$30        ; set A&X long
.39553b		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.39553e		a9 00 00	lda #$0000	                LDA #0
.395541		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395543		c8		iny		                INY
.395544		c8		iny		                INY
.395545		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395547		e2 20		sep #$20	                SEP #$20        ; set A short
.395549		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39554c		a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.39554e		82 86 04	brl $3959d7	                BRL IF_SUCCESS
.395551		82 78 04	brl $3959cc	pass_failure    BRL IF_FAILURE
.395554						IF_CLOSE
.395554		da		phx		                PHX
.395555		5a		phy		                PHY
.395556		0b		phd		                PHD
.395557		8b		phb		                PHB
.395558		08		php		                PHP
.395559		48		pha		                PHA             ; begin setdbr macro
.39555a		08		php		                PHP
.39555b		e2 20		sep #$20	                SEP #$20        ; set A short
.39555d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39555f		48		pha		                PHA
.395560		ab		plb		                PLB
.395561		28		plp		                PLP
.395562		68		pla		                PLA             ; end setdbr macro
.395563		48		pha		                PHA             ; begin setdp macro
.395564		08		php		                PHP
.395565		c2 20		rep #$20	                REP #$20        ; set A long
.395567		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39556a		5b		tcd		                TCD
.39556b		28		plp		                PLP
.39556c		68		pla		                PLA             ; end setdp macro
.39556d		e2 20		sep #$20	                SEP #$20        ; set A short
.39556f		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395572		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395574		89 02		bit #$02	                BIT #FD_STAT_WRITE
.395576		f0 09		beq $395581	                BEQ set_flag                    ; No, just mark it closed
.395578		22 ed 55 39	jsl $3955ed	                JSL IF_WRITE                    ; Attempt to write the cluster
.39557c		b0 03		bcs $395581	                BCS set_flag
.39557e		82 4f 04	brl $3959d0	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395581		22 d1 5a 39	jsl $395ad1	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395585		82 4f 04	brl $3959d7	                BRL IF_SUCCESS
.395588						IF_READ
.395588		da		phx		                PHX
.395589		5a		phy		                PHY
.39558a		0b		phd		                PHD
.39558b		8b		phb		                PHB
.39558c		08		php		                PHP
.39558d		48		pha		                PHA             ; begin setdbr macro
.39558e		08		php		                PHP
.39558f		e2 20		sep #$20	                SEP #$20        ; set A short
.395591		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395593		48		pha		                PHA
.395594		ab		plb		                PLB
.395595		28		plp		                PLP
.395596		68		pla		                PLA             ; end setdbr macro
.395597		48		pha		                PHA             ; begin setdp macro
.395598		08		php		                PHP
.395599		c2 20		rep #$20	                REP #$20        ; set A long
.39559b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39559e		5b		tcd		                TCD
.39559f		28		plp		                PLP
.3955a0		68		pla		                PLA             ; end setdp macro
.3955a1		c2 10		rep #$10	                REP #$10        ; set X long
.3955a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3955a5						get_dev
.3955a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3955a7		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3955aa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955ac		85 01		sta $0321	                STA BIOS_DEV
.3955ae		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3955b2		c2 20		rep #$20	                REP #$20        ; set A long
.3955b4		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3955b7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955b9		85 10		sta $0330	                STA DOS_CLUS_ID
.3955bb		c8		iny		                INY
.3955bc		c8		iny		                INY
.3955bd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955bf		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955c1		22 4e 4c 39	jsl $394c4e	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3955c5		90 13		bcc $3955da	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3955c7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3955ca		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955cc		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3955ce		c8		iny		                INY
.3955cf		c8		iny		                INY
.3955d0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955d2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3955d4		22 3e 48 39	jsl $39483e	                JSL DOS_GETCLUSTER              ; Get the cluster
.3955d8		b0 03		bcs $3955dd	                BCS ret_success                 ; If ok: return success
.3955da						pass_failure
.3955da		82 f3 03	brl $3959d0	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955dd		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3955e0		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955e2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3955e4		c8		iny		                INY
.3955e5		c8		iny		                INY
.3955e6		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3955e8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3955ea		82 ea 03	brl $3959d7	                BRL IF_SUCCESS
.3955ed						IF_WRITE
.3955ed		da		phx		                PHX
.3955ee		5a		phy		                PHY
.3955ef		0b		phd		                PHD
.3955f0		8b		phb		                PHB
.3955f1		08		php		                PHP
.3955f2		48		pha		                PHA             ; begin setdbr macro
.3955f3		08		php		                PHP
.3955f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3955f6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955f8		48		pha		                PHA
.3955f9		ab		plb		                PLB
.3955fa		28		plp		                PLP
.3955fb		68		pla		                PLA             ; end setdbr macro
.3955fc		48		pha		                PHA             ; begin setdp macro
.3955fd		08		php		                PHP
.3955fe		c2 20		rep #$20	                REP #$20        ; set A long
.395600		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395603		5b		tcd		                TCD
.395604		28		plp		                PLP
.395605		68		pla		                PLA             ; end setdp macro
.395606		c2 10		rep #$10	                REP #$10        ; set X long
.395608		e2 20		sep #$20	                SEP #$20        ; set A short
.39560a		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39560d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39560f		85 01		sta $0321	                STA BIOS_DEV
.395611		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395615		c2 20		rep #$20	                REP #$20        ; set A long
.395617		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39561a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39561c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39561e		c8		iny		                INY
.39561f		c8		iny		                INY
.395620		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395622		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395624		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395627		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395629		85 10		sta $0330	                STA DOS_CLUS_ID
.39562b		c8		iny		                INY
.39562c		c8		iny		                INY
.39562d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39562f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395631		d0 1a		bne $39564d	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395633		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395635		d0 16		bne $39564d	                BNE rewrite_cluster
.395637		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39563a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39563c		85 10		sta $0330	                STA DOS_CLUS_ID
.39563e		c8		iny		                INY
.39563f		c8		iny		                INY
.395640		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395642		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395644		22 6f 50 39	jsl $39506f	                JSL DOS_APPENDCLUS              ; Append the cluster
.395648		b0 0c		bcs $395656	                BCS ret_success                 ; If OK: return success
.39564a		82 83 03	brl $3959d0	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39564d		22 7b 48 39	jsl $39487b	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395651		b0 03		bcs $395656	                BCS ret_success                 ; If ok: return success
.395653		82 7a 03	brl $3959d0	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395656		82 7e 03	brl $3959d7	ret_success     BRL IF_SUCCESS
.395659						IF_DIROPEN
.395659		da		phx		                PHX
.39565a		5a		phy		                PHY
.39565b		0b		phd		                PHD
.39565c		8b		phb		                PHB
.39565d		08		php		                PHP
.39565e		48		pha		                PHA             ; begin setdbr macro
.39565f		08		php		                PHP
.395660		e2 20		sep #$20	                SEP #$20        ; set A short
.395662		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395664		48		pha		                PHA
.395665		ab		plb		                PLB
.395666		28		plp		                PLP
.395667		68		pla		                PLA             ; end setdbr macro
.395668		48		pha		                PHA             ; begin setdp macro
.395669		08		php		                PHP
.39566a		c2 20		rep #$20	                REP #$20        ; set A long
.39566c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39566f		5b		tcd		                TCD
.395670		28		plp		                PLP
.395671		68		pla		                PLA             ; end setdp macro
.395672		c2 30		rep #$30	                REP #$30        ; set A&X long
.395674		22 ce 53 39	jsl $3953ce	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395678		22 8c 49 39	jsl $39498c	                JSL DOS_PARSE_PATH          ; Parse the path
.39567c		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395680		b0 03		bcs $395685	                BCS get_root_dir            ; If successful: get the root directory
.395682		82 4b 03	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395685						get_root_dir
.395685		c2 30		rep #$30	                REP #$30        ; set A&X long
.395687		22 5b 42 39	jsl $39425b	                JSL DOS_DIROPEN
.39568b		b0 03		bcs $395690	                BCS success
.39568d		82 40 03	brl $3959d0	                BRL IF_PASSFAILURE
.395690		82 44 03	brl $3959d7	success         BRL IF_SUCCESS
.395693						IF_DIRNEXT
.395693		5c f5 42 39	jmp $3942f5	                JML DOS_DIRNEXT
.395697						IF_DELETE
.395697		da		phx		                PHX
.395698		5a		phy		                PHY
.395699		0b		phd		                PHD
.39569a		8b		phb		                PHB
.39569b		08		php		                PHP
.39569c		48		pha		                PHA             ; begin setdbr macro
.39569d		08		php		                PHP
.39569e		e2 20		sep #$20	                SEP #$20        ; set A short
.3956a0		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956a2		48		pha		                PHA
.3956a3		ab		plb		                PLB
.3956a4		28		plp		                PLP
.3956a5		68		pla		                PLA             ; end setdbr macro
.3956a6		48		pha		                PHA             ; begin setdp macro
.3956a7		08		php		                PHP
.3956a8		c2 20		rep #$20	                REP #$20        ; set A long
.3956aa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956ad		5b		tcd		                TCD
.3956ae		28		plp		                PLP
.3956af		68		pla		                PLA             ; end setdp macro
.3956b0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956b2		22 24 4a 39	jsl $394a24	                JSL DOS_FINDFILE
.3956b6		b0 03		bcs $3956bb	                BCS get_first_clus
.3956b8		82 15 03	brl $3959d0	                BRL IF_PASSFAILURE
.3956bb						get_first_clus
.3956bb		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3956be		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3956c0		85 10		sta $0330	                STA DOS_CLUS_ID
.3956c2		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3956c5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3956c7		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956c9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3956cb		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3956ce		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3956d0		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3956d3		22 4e 4c 39	jsl $394c4e	del_loop        JSL NEXTCLUSTER
.3956d7		90 2f		bcc $395708	                BCC del_one
.3956d9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3956db		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3956de		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3956e0		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3956e3		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3956e6		85 10		sta $0330	                STA DOS_CLUS_ID
.3956e8		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3956eb		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956ed		22 2f 50 39	jsl $39502f	                JSL DELCLUSTER32
.3956f1		b0 03		bcs $3956f6	                BCS go_next
.3956f3		82 da 02	brl $3959d0	                BRL IF_PASSFAILURE
.3956f6						go_next
.3956f6		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3956f9		85 10		sta $0330	                STA DOS_CLUS_ID
.3956fb		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3956fe		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.395701		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395703		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395706		80 cb		bra $3956d3	                BRA del_loop
.395708						del_one
.395708		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.39570b		85 10		sta $0330	                STA DOS_CLUS_ID
.39570d		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395710		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395712		22 89 4f 39	jsl $394f89	                JSL DELCLUSTER
.395716		b0 03		bcs $39571b	                BCS free_dir_entry
.395718		82 b5 02	brl $3959d0	                BRL IF_PASSFAILURE
.39571b						free_dir_entry
.39571b		e2 20		sep #$20	                SEP #$20        ; set A short
.39571d		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395720		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395722		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395724		22 74 44 39	jsl $394474	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395728		b0 03		bcs $39572d	                BCS ret_success
.39572a		82 a3 02	brl $3959d0	                BRL IF_PASSFAILURE
.39572d		82 a7 02	brl $3959d7	ret_success     BRL IF_SUCCESS
.395730						IF_DIRREAD
.395730		da		phx		                PHX
.395731		5a		phy		                PHY
.395732		0b		phd		                PHD
.395733		8b		phb		                PHB
.395734		08		php		                PHP
.395735		48		pha		                PHA             ; begin setdbr macro
.395736		08		php		                PHP
.395737		e2 20		sep #$20	                SEP #$20        ; set A short
.395739		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39573b		48		pha		                PHA
.39573c		ab		plb		                PLB
.39573d		28		plp		                PLP
.39573e		68		pla		                PLA             ; end setdbr macro
.39573f		48		pha		                PHA             ; begin setdp macro
.395740		08		php		                PHP
.395741		c2 20		rep #$20	                REP #$20        ; set A long
.395743		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395746		5b		tcd		                TCD
.395747		28		plp		                PLP
.395748		68		pla		                PLA             ; end setdp macro
.395749		c2 30		rep #$30	                REP #$30        ; set A&X long
.39574b		22 24 4a 39	jsl $394a24	                JSL DOS_FINDFILE
.39574f		b0 03		bcs $395754	                BCS success
.395751		82 78 02	brl $3959cc	                BRL IF_FAILURE
.395754		82 80 02	brl $3959d7	success         BRL IF_SUCCESS
.395757						IF_DIRWRITE
.395757		5c 74 44 39	jmp $394474	                JML DOS_DIRWRITE
.39575b						IF_LOAD
.39575b		da		phx		                PHX
.39575c		5a		phy		                PHY
.39575d		0b		phd		                PHD
.39575e		8b		phb		                PHB
.39575f		08		php		                PHP
.395760		48		pha		                PHA             ; begin setdbr macro
.395761		08		php		                PHP
.395762		e2 20		sep #$20	                SEP #$20        ; set A short
.395764		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395766		48		pha		                PHA
.395767		ab		plb		                PLB
.395768		28		plp		                PLP
.395769		68		pla		                PLA             ; end setdbr macro
.39576a		48		pha		                PHA             ; begin setdp macro
.39576b		08		php		                PHP
.39576c		c2 20		rep #$20	                REP #$20        ; set A long
.39576e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395771		5b		tcd		                TCD
.395772		28		plp		                PLP
.395773		68		pla		                PLA             ; end setdp macro
.395774		c2 30		rep #$30	                REP #$30        ; set A&X long
.395776		22 87 54 39	jsl $395487	                JSL IF_OPEN
.39577a		b0 03		bcs $39577f	                BCS setup                   ; If success: start setting things up
.39577c		82 51 02	brl $3959d0	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.39577f						setup
.39577f		c2 20		rep #$20	                REP #$20        ; set A long
.395781		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395784		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395786		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395788		c8		iny		                INY
.395789		c8		iny		                INY
.39578a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39578c		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39578e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395791		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395793		85 30		sta $0350	                STA DOS_SRC_PTR
.395795		c8		iny		                INY
.395796		c8		iny		                INY
.395797		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395799		85 32		sta $0352	                STA DOS_SRC_PTR+2
.39579b		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.39579d		c9 40 00	cmp #$0040	                CMP #$0040
.3957a0		b0 04		bcs $3957a6	                BGE load_by_type            ; No: try to load it by type
.3957a2		5c 81 58 39	jmp $395881	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3957a6		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3957a9		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3957ac						type_loop
.3957ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ae		bf f2 57 39	lda $3957f2,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3957b2		f0 37		beq $3957eb	                BEQ no_match                ; If NULL... we didn't get a match
.3957b4		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.3957b7		d0 28		bne $3957e1	                BNE next_entry              ; If they don't match, try the next entry
.3957b9		bf f3 57 39	lda $3957f3,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3957bd		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3957c0		d0 1f		bne $3957e1	                BNE next_entry              ; If they don't match, try the next entry
.3957c2		bf f4 57 39	lda $3957f4,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3957c6		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3957c9		d0 16		bne $3957e1	                BNE next_entry              ; If they don't match, try the next entry
.3957cb		c2 20		rep #$20	                REP #$20        ; set A long
.3957cd		bf f5 57 39	lda $3957f5,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3957d1		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3957d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3957d5		bf f7 57 39	lda $3957f7,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3957d9		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3957db		a2 00 00	ldx #$0000	                LDX #0
.3957de		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3957e1						next_entry
.3957e1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3957e3		8a		txa		                TXA
.3957e4		18		clc		                CLC
.3957e5		69 06 00	adc #$0006	                ADC #6
.3957e8		aa		tax		                TAX
.3957e9		80 c1		bra $3957ac	                BRA type_loop               ; And check it against the file
.3957eb						no_match
.3957eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ed		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3957ef		82 da 01	brl $3959cc	                BRL IF_FAILURE
>3957f2		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3957f5		f9 57				                .word <>IF_LOADPGX
>3957f7		39				                .byte `IF_LOADPGX
>3957f8		00				                .byte 0
.3957f9						IF_LOADPGX
.3957f9		c2 10		rep #$10	                REP #$10        ; set X long
.3957fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3957fd		a0 00 00	ldy #$0000	                LDY #0
.395800		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395802		c9 50		cmp #$50	                CMP #'P'
.395804		d0 15		bne $39581b	                BNE fail_sig                        ; If not found, fail
.395806		c8		iny		                INY
.395807		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395809		c9 47		cmp #$47	                CMP #'G'
.39580b		d0 0e		bne $39581b	                BNE fail_sig
.39580d		c8		iny		                INY
.39580e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395810		c9 58		cmp #$58	                CMP #'X'
.395812		d0 07		bne $39581b	                BNE fail_sig
.395814		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395815		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395817		c9 01		cmp #$01	                CMP #$01
.395819		f0 17		beq $395832	                BEQ get_dest                        ; All passes: go to get the destination address
.39581b		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39581d		22 cc 59 39	jsl $3959cc	                JSL IF_FAILURE
.395821						adjust_size
.395821		c2 20		rep #$20	                REP #$20        ; set A long
.395823		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.395824		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395826		e9 08 00	sbc #$0008	                SBC #8
.395829		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39582b		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39582d		e9 00 00	sbc #$0000	                SBC #0
.395830		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395832						get_dest
.395832		c2 20		rep #$20	                REP #$20        ; set A long
.395834		c8		iny		                INY
.395835		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395837		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395839		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39583b		c8		iny		                INY
.39583c		c8		iny		                INY
.39583d		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.39583f		85 36		sta $0356	                STA DOS_DST_PTR+2
.395841		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395843		c8		iny		                INY                                 ; Point to the first data byte
.395844		c8		iny		                INY
.395845						copy_loop
.395845		e2 20		sep #$20	                SEP #$20        ; set A short
.395847		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395849		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39584b		c2 20		rep #$20	                REP #$20        ; set A long
.39584d		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.39584f		d0 02		bne $395853	                BNE dec_file_size
.395851		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395853		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395854		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395856		e9 01 00	sbc #$0001	                SBC #1
.395859		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39585b		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39585d		e9 00 00	sbc #$0000	                SBC #0
.395860		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395862		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395864		d0 04		bne $39586a	                BNE next_byte
.395866		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395868		f0 14		beq $39587e	                BEQ done                            ; Yes: we're done
.39586a		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39586b		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.39586e		d0 d5		bne $395845	                BNE copy_loop                       ; No: keep copying
.395870		22 52 4d 39	jsl $394d52	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395874		b0 03		bcs $395879	                BCS next_cluster
.395876		82 57 01	brl $3959d0	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395879		a0 00 00	ldy #$0000	next_cluster    LDY #0
.39587c		80 c7		bra $395845	                BRA copy_loop                       ; Go back to copying
.39587e		82 56 01	brl $3959d7	done            BRL IF_SUCCESS
.395881						IF_LOADRAW
.395881		c2 30		rep #$30	                REP #$30        ; set A&X long
.395883		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395886						copy_loop
.395886		e2 20		sep #$20	                SEP #$20        ; set A short
.395888		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39588a		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39588c		c2 20		rep #$20	                REP #$20        ; set A long
.39588e		38		sec		                SEC                         ; Count down the number of bytes left
.39588f		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395891		e9 01 00	sbc #$0001	                SBC #1
.395894		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395896		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395898		e9 00 00	sbc #$0000	                SBC #0
.39589b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39589d		d0 04		bne $3958a3	                BNE continue
.39589f		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3958a1		f0 1b		beq $3958be	                BEQ close_file              ; If not: we're done
.3958a3		c8		iny		continue        INY
.3958a4		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.3958a7		d0 dd		bne $395886	                BNE copy_loop               ; No: keep processing the bytes
.3958a9		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.3958aa		a5 34		lda $0354	                LDA DOS_DST_PTR
.3958ac		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.3958af		85 34		sta $0354	                STA DOS_DST_PTR
.3958b1		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3958b3		69 00 00	adc #$0000	                ADC #0
.3958b6		85 36		sta $0356	                STA DOS_DST_PTR+2
.3958b8		22 88 55 39	jsl $395588	                JSL IF_READ                 ; Yes: load the next cluster
.3958bc		b0 c5		bcs $395883	                BCS copy_cluster            ; And start copying it
.3958be						close_file
.3958be		82 16 01	brl $3959d7	ret_success     BRL IF_SUCCESS
.3958c1						IF_NULLBUFFER
.3958c1		5a		phy		                PHY
.3958c2		8b		phb		                PHB
.3958c3		0b		phd		                PHD
.3958c4		08		php		                PHP
.3958c5		48		pha		                PHA             ; begin setdbr macro
.3958c6		08		php		                PHP
.3958c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3958c9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958cb		48		pha		                PHA
.3958cc		ab		plb		                PLB
.3958cd		28		plp		                PLP
.3958ce		68		pla		                PLA             ; end setdbr macro
.3958cf		48		pha		                PHA             ; begin setdp macro
.3958d0		08		php		                PHP
.3958d1		c2 20		rep #$20	                REP #$20        ; set A long
.3958d3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958d6		5b		tcd		                TCD
.3958d7		28		plp		                PLP
.3958d8		68		pla		                PLA             ; end setdp macro
.3958d9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958db		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958de		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958e0		85 28		sta $0348	                STA DOS_TEMP
.3958e2		c8		iny		                INY
.3958e3		c8		iny		                INY
.3958e4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958e6		85 2a		sta $034a	                STA DOS_TEMP+2
.3958e8		a0 00 00	ldy #$0000	                LDY #0
.3958eb		a9 00 00	lda #$0000	                LDA #0
.3958ee		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3958f0		c8		iny		                INY
.3958f1		c8		iny		                INY
.3958f2		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3958f5		d0 f7		bne $3958ee	                BNE loop
.3958f7		28		plp		                PLP
.3958f8		2b		pld		                PLD
.3958f9		ab		plb		                PLB
.3958fa		7a		ply		                PLY
.3958fb		6b		rtl		                RTL
.3958fc						IF_COPY2BUFF
.3958fc		5a		phy		                PHY
.3958fd		8b		phb		                PHB
.3958fe		0b		phd		                PHD
.3958ff		08		php		                PHP
.395900		48		pha		                PHA             ; begin setdbr macro
.395901		08		php		                PHP
.395902		e2 20		sep #$20	                SEP #$20        ; set A short
.395904		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395906		48		pha		                PHA
.395907		ab		plb		                PLB
.395908		28		plp		                PLP
.395909		68		pla		                PLA             ; end setdbr macro
.39590a		48		pha		                PHA             ; begin setdp macro
.39590b		08		php		                PHP
.39590c		c2 20		rep #$20	                REP #$20        ; set A long
.39590e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395911		5b		tcd		                TCD
.395912		28		plp		                PLP
.395913		68		pla		                PLA             ; end setdp macro
.395914		c2 30		rep #$30	                REP #$30        ; set A&X long
.395916		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395919		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39591b		85 28		sta $0348	                STA DOS_TEMP
.39591d		c8		iny		                INY
.39591e		c8		iny		                INY
.39591f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395921		85 2a		sta $034a	                STA DOS_TEMP+2
.395923		a0 00 00	ldy #$0000	                LDY #0
.395926						copy_loop
.395926		e2 20		sep #$20	                SEP #$20        ; set A short
.395928		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39592a		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39592c		c2 20		rep #$20	                REP #$20        ; set A long
.39592e		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395930		d0 02		bne $395934	                BNE adv_dest
.395932		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395934		c8		iny		adv_dest        INY                         ; Count it
.395935		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395938		f0 0c		beq $395946	                BEQ done                    ; Yes: we're done
.39593a		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39593c		c5 38		cmp $0358	                CMP DOS_END_PTR
.39593e		d0 e6		bne $395926	                BNE copy_loop               ; No: keep copying
.395940		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395942		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395944		d0 e0		bne $395926	                BNE copy_loop
.395946		28		plp		done            PLP
.395947		2b		pld		                PLD
.395948		ab		plb		                PLB
.395949		7a		ply		                PLY
.39594a		6b		rtl		                RTL
.39594b						IF_SAVE
.39594b		da		phx		                PHX
.39594c		5a		phy		                PHY
.39594d		0b		phd		                PHD
.39594e		8b		phb		                PHB
.39594f		08		php		                PHP
.395950		48		pha		                PHA             ; begin setdbr macro
.395951		08		php		                PHP
.395952		e2 20		sep #$20	                SEP #$20        ; set A short
.395954		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395956		48		pha		                PHA
.395957		ab		plb		                PLB
.395958		28		plp		                PLP
.395959		68		pla		                PLA             ; end setdbr macro
.39595a		48		pha		                PHA             ; begin setdp macro
.39595b		08		php		                PHP
.39595c		c2 20		rep #$20	                REP #$20        ; set A long
.39595e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395961		5b		tcd		                TCD
.395962		28		plp		                PLP
.395963		68		pla		                PLA             ; end setdp macro
.395964		c2 30		rep #$30	                REP #$30        ; set A&X long
.395966		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395969		38		sec		                SEC
.39596a		a5 38		lda $0358	                LDA DOS_END_PTR
.39596c		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.39596e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395970		c8		iny		                INY
.395971		c8		iny		                INY
.395972		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395974		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395976		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395978		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39597b		18		clc		                CLC
.39597c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39597e		69 01 00	adc #$0001	                ADC #1
.395981		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395983		90 09		bcc $39598e	                BCC first_block
.395985		c8		iny		                INY
.395986		c8		iny		                INY
.395987		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395989		69 00 00	adc #$0000	                ADC #0
.39598c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39598e		22 c1 58 39	jsl $3958c1	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395992		22 fc 58 39	jsl $3958fc	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395996		22 1a 55 39	jsl $39551a	                JSL IF_CREATE           ; Create file.
.39599a		b0 03		bcs $39599f	                BCS check_for_end
.39599c		82 31 00	brl $3959d0	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.39599f		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3959a1		c5 38		cmp $0358	                CMP DOS_END_PTR
.3959a3		d0 06		bne $3959ab	                BNE next_block
.3959a5		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3959a7		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3959a9		f0 1d		beq $3959c8	                BEQ done                ; Yes: we're done
.3959ab		22 c1 58 39	jsl $3958c1	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3959af		22 fc 58 39	jsl $3958fc	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3959b3		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3959b6		a9 00 00	lda #$0000	                LDA #0
.3959b9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3959bb		c8		iny		                INY
.3959bc		c8		iny		                INY
.3959bd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3959bf		22 ed 55 39	jsl $3955ed	                JSL IF_WRITE            ; Append to the file
.3959c3		b0 da		bcs $39599f	                BCS check_for_end       ; And try again
.3959c5		82 08 00	brl $3959d0	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3959c8		5c d7 59 39	jmp $3959d7	done            JML IF_SUCCESS
.3959cc						IF_FAILURE
.3959cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ce		85 0e		sta $032e	                STA DOS_STATUS
.3959d0		28		plp		IF_PASSFAILURE  PLP
.3959d1		18		clc		                CLC
.3959d2		ab		plb		                PLB
.3959d3		2b		pld		                PLD
.3959d4		7a		ply		                PLY
.3959d5		fa		plx		                PLX
.3959d6		6b		rtl		                RTL
.3959d7						IF_SUCCESS
.3959d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3959d9		64 00		stz $0320	                STZ BIOS_STATUS
.3959db		64 0e		stz $032e	                STZ DOS_STATUS
.3959dd		28		plp		                PLP
.3959de		38		sec		                SEC
.3959df		ab		plb		                PLB
.3959e0		2b		pld		                PLD
.3959e1		7a		ply		                PLY
.3959e2		fa		plx		                PLX
.3959e3		6b		rtl		                RTL
.3959e4						IF_RUN
.3959e4		da		phx		                PHX
.3959e5		5a		phy		                PHY
.3959e6		0b		phd		                PHD
.3959e7		8b		phb		                PHB
.3959e8		08		php		                PHP
.3959e9		48		pha		                PHA             ; begin setdbr macro
.3959ea		08		php		                PHP
.3959eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ed		a9 00		lda #$00	                LDA #0
.3959ef		48		pha		                PHA
.3959f0		ab		plb		                PLB
.3959f1		28		plp		                PLP
.3959f2		68		pla		                PLA             ; end setdbr macro
.3959f3		48		pha		                PHA             ; begin setdp macro
.3959f4		08		php		                PHP
.3959f5		c2 20		rep #$20	                REP #$20        ; set A long
.3959f7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959fa		5b		tcd		                TCD
.3959fb		28		plp		                PLP
.3959fc		68		pla		                PLA             ; end setdp macro
.3959fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ff		c2 10		rep #$10	                REP #$10        ; set X long
.395a01		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.395a03		a2 00 00	ldx #$0000	                LDX #0
.395a06		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395a0a		e8		inx		                INX
.395a0b		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395a0e		d0 f6		bne $395a06	                BNE clr_fd_loop
.395a10		c2 20		rep #$20	                REP #$20        ; set A long
.395a12		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395a15		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395a19		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395a1c		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395a20		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395a22		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395a26		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395a28		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395a2c		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395a2f		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395a31		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395a33		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395a36		85 20		sta $0340	                STA DOS_FD_PTR
.395a38		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395a3b		85 22		sta $0342	                STA DOS_FD_PTR+2
.395a3d		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395a40		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395a44		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395a48		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.395a4c		b0 14		bcs $395a62	                BCS try_execute
.395a4e		82 7f ff	brl $3959d0	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395a51						chk_execute
.395a51		c2 20		rep #$20	                REP #$20        ; set A long
.395a53		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395a55		d0 0b		bne $395a62	                BNE try_execute                         ; If so: call it
.395a57		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395a59		d0 07		bne $395a62	                BNE try_execute
.395a5b		e2 20		sep #$20	                SEP #$20        ; set A short
.395a5d		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395a5f		82 6a ff	brl $3959cc	                BRL IF_FAILURE
.395a62						try_execute
.395a62		e2 20		sep #$20	                SEP #$20        ; set A short
.395a64		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395a66		48		pha		                PHA
.395a67		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.395a69		48		pha		                PHA
.395a6a		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395a6c		48		pha		                PHA
.395a6d		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395a6f		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395a71		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395a75		e2 20		sep #$20	                SEP #$20        ; set A short
.395a77		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.395a78		68		pla		                PLA
.395a79		68		pla		                PLA
.395a7a		82 5a ff	brl $3959d7	                BRL IF_SUCCESS                          ; Return success
.395a7d						IF_ALLOCFD
.395a7d		da		phx		                PHX
.395a7e		5a		phy		                PHY
.395a7f		0b		phd		                PHD
.395a80		8b		phb		                PHB
.395a81		08		php		                PHP
.395a82		48		pha		                PHA             ; begin setdbr macro
.395a83		08		php		                PHP
.395a84		e2 20		sep #$20	                SEP #$20        ; set A short
.395a86		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a88		48		pha		                PHA
.395a89		ab		plb		                PLB
.395a8a		28		plp		                PLP
.395a8b		68		pla		                PLA             ; end setdbr macro
.395a8c		48		pha		                PHA             ; begin setdp macro
.395a8d		08		php		                PHP
.395a8e		c2 20		rep #$20	                REP #$20        ; set A long
.395a90		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a93		5b		tcd		                TCD
.395a94		28		plp		                PLP
.395a95		68		pla		                PLA             ; end setdp macro
.395a96		c2 10		rep #$10	                REP #$10        ; set X long
.395a98		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395a9b						chk_fd
.395a9b		e2 20		sep #$20	                SEP #$20        ; set A short
.395a9d		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395aa0		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395aa2		f0 14		beq $395ab8	                BEQ found                           ; No: flag and return the found descriptor
.395aa4						next_fd
.395aa4		c2 20		rep #$20	                REP #$20        ; set A long
.395aa6		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395aa7		18		clc		                CLC
.395aa8		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395aab		aa		tax		                TAX
.395aac		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395aaf		90 ea		bcc $395a9b	                BLT chk_fd                          ; No: check this new file descriptor
.395ab1		e2 20		sep #$20	                SEP #$20        ; set A short
.395ab3		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395ab5		82 14 ff	brl $3959cc	                BRL IF_FAILURE
.395ab8		09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395aba		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395abd		c2 20		rep #$20	                REP #$20        ; set A long
.395abf		8a		txa		                TXA
.395ac0		18		clc		                CLC
.395ac1		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395ac4		85 20		sta $0340	                STA @b DOS_FD_PTR
.395ac6		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395ac9		69 00 00	adc #$0000	                ADC #0
.395acc		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ace		82 06 ff	brl $3959d7	                BRL IF_SUCCESS                      ; Return this file descriptor
.395ad1						IF_FREEFD
.395ad1		da		phx		                PHX
.395ad2		5a		phy		                PHY
.395ad3		0b		phd		                PHD
.395ad4		8b		phb		                PHB
.395ad5		08		php		                PHP
.395ad6		48		pha		                PHA             ; begin setdbr macro
.395ad7		08		php		                PHP
.395ad8		e2 20		sep #$20	                SEP #$20        ; set A short
.395ada		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395adc		48		pha		                PHA
.395add		ab		plb		                PLB
.395ade		28		plp		                PLP
.395adf		68		pla		                PLA             ; end setdbr macro
.395ae0		48		pha		                PHA             ; begin setdp macro
.395ae1		08		php		                PHP
.395ae2		c2 20		rep #$20	                REP #$20        ; set A long
.395ae4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ae7		5b		tcd		                TCD
.395ae8		28		plp		                PLP
.395ae9		68		pla		                PLA             ; end setdp macro
.395aea		e2 20		sep #$20	                SEP #$20        ; set A short
.395aec		c2 10		rep #$10	                REP #$10        ; set X long
.395aee		a9 00		lda #$00	                LDA #0
.395af0		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395af2		82 e2 fe	brl $3959d7	                BRL IF_SUCCESS
.395af5						DOS_SRC2DST
.395af5		da		phx		                PHX
.395af6		5a		phy		                PHY
.395af7		0b		phd		                PHD
.395af8		8b		phb		                PHB
.395af9		08		php		                PHP
.395afa		48		pha		                PHA             ; begin setdp macro
.395afb		08		php		                PHP
.395afc		c2 20		rep #$20	                REP #$20        ; set A long
.395afe		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395b01		5b		tcd		                TCD
.395b02		28		plp		                PLP
.395b03		68		pla		                PLA             ; end setdp macro
.395b04		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b06		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395b09		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b0b		aa		tax		                TAX                                     ; X := source buffer address
.395b0c		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395b0e		a8		tay		                TAY                                     ; Y := destination buffer address
.395b0f		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395b12		54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395b15		28		plp		                PLP
.395b16		ab		plb		                PLB
.395b17		2b		pld		                PLD
.395b18		7a		ply		                PLY
.395b19		fa		plx		                PLX
.395b1a		6b		rtl		                RTL
.395b1b						IF_COPY
.395b1b		da		phx		                PHX
.395b1c		5a		phy		                PHY
.395b1d		0b		phd		                PHD
.395b1e		8b		phb		                PHB
.395b1f		08		php		                PHP
.395b20		48		pha		                PHA             ; begin setdbr macro
.395b21		08		php		                PHP
.395b22		e2 20		sep #$20	                SEP #$20        ; set A short
.395b24		a9 00		lda #$00	                LDA #0
.395b26		48		pha		                PHA
.395b27		ab		plb		                PLB
.395b28		28		plp		                PLP
.395b29		68		pla		                PLA             ; end setdbr macro
.395b2a		48		pha		                PHA             ; begin setdp macro
.395b2b		08		php		                PHP
.395b2c		c2 20		rep #$20	                REP #$20        ; set A long
.395b2e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395b31		5b		tcd		                TCD
.395b32		28		plp		                PLP
.395b33		68		pla		                PLA             ; end setdp macro
.395b34		22 7d 5a 39	jsl $395a7d	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395b38		b0 03		bcs $395b3d	                BCS set_src_path
.395b3a		82 93 fe	brl $3959d0	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395b3d						set_src_path
.395b3d		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b3f		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395b42		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395b44		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395b46		c8		iny		                INY
.395b47		c8		iny		                INY
.395b48		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395b4a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395b4c						alloc_dest
.395b4c		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b4e		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395b50		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395b52		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395b54		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395b56		22 7d 5a 39	jsl $395a7d	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395b5a		b0 0f		bcs $395b6b	                BCS set_paths                   ; If everything is ok... start setting the paths
.395b5c		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b5e		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b60		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b62		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b64		22 d1 5a 39	jsl $395ad1	                JSL IF_FREEFD                   ; And free it
.395b68		82 65 fe	brl $3959d0	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395b6b						set_paths
.395b6b		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b6d		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395b6f		85 34		sta $0354	                STA @b DOS_DST_PTR
.395b71		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395b73		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395b75		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395b78		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395b7a		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b7c		c8		iny		                INY
.395b7d		c8		iny		                INY
.395b7e		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395b80		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b82		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b84		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b86		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b88		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b8a		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395b8e		b0 0f		bcs $395b9f	                BCS src_open                    ; If success, work with the openned file
.395b90		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b92		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b94		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b96		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b98		22 d1 5a 39	jsl $395ad1	                JSL IF_FREEFD                   ; And free it
.395b9c		82 bd ff	brl $395b5c	                BRL err_free_src_fd             ; Free the source file descriptor
.395b9f		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395ba2		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395ba4		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ba6		c8		iny		                INY
.395ba7		c8		iny		                INY
.395ba8		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395baa		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395bac		22 f5 5a 39	jsl $395af5	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395bb0		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395bb2		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bb4		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395bb6		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bb8		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.395bbc		b0 0f		bcs $395bcd	                BCS read_next                   ; If sucessful, try to get the next cluster
.395bbe		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395bc0		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bc2		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395bc4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bc6		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395bca		82 c3 ff	brl $395b90	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395bcd						read_next
.395bcd		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395bcf		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bd1		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395bd3		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bd5		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395bd9		b0 19		bcs $395bf4	                BCS copy2dest                   ; If successful, copy the sector
.395bdb		e2 20		sep #$20	                SEP #$20        ; set A short
.395bdd		a5 0e		lda $032e	                LDA @b DOS_STATUS
.395bdf		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395be1		f0 32		beq $395c15	                BEQ file_copied                 ; Yes: we're done copying
.395be3						err_dest_close
.395be3		c2 20		rep #$20	                REP #$20        ; set A long
.395be5		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395be7		85 20		sta $0340	                STA @b DOS_FD_PTR
.395be9		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395beb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bed		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395bf1		82 ca ff	brl $395bbe	                BRL err_src_close               ; Close the source and throw an error
.395bf4						copy2dest
.395bf4		22 f5 5a 39	jsl $395af5	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395bf8		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395bfb		a9 00 00	lda #$0000	                LDA #0
.395bfe		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395c00		c8		iny		                INY
.395c01		c8		iny		                INY
.395c02		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395c04		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395c06		85 20		sta $0340	                STA @b DOS_FD_PTR
.395c08		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395c0a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395c0c		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395c10		90 d1		bcc $395be3	                BCC err_dest_close              ; If error: close all files and throw the error
.395c12		82 b8 ff	brl $395bcd	                BRL read_next                   ; Otherwise: repeat the loop
.395c15						file_copied
.395c15		c2 20		rep #$20	                REP #$20        ; set A long
.395c17		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395c19		85 20		sta $0340	                STA @b DOS_FD_PTR
.395c1b		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395c1d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395c1f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395c23		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395c25		85 20		sta $0340	                STA @b DOS_FD_PTR
.395c27		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395c29		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395c2b		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395c2f		82 a5 fd	brl $3959d7	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8					UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395c32						UART_SELECT
.395c32		08		php		            PHP
.395c33		c2 20		rep #$20	                REP #$20        ; set A long
.395c35		c9 02 00	cmp #$0002	            CMP #2
.395c38		f0 07		beq $395c41	            BEQ is_COM2
.395c3a		c2 20		rep #$20	                REP #$20        ; set A long
.395c3c		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395c3f		80 05		bra $395c46	            BRA setaddr
.395c41						is_COM2
.395c41		c2 20		rep #$20	                REP #$20        ; set A long
.395c43		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395c46		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395c4a		e2 20		sep #$20	                SEP #$20        ; set A short
.395c4c		a9 af		lda #$af	            LDA #`UART1_BASE
.395c4e		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395c52		28		plp		            PLP
.395c53		6b		rtl		            RTL
.395c54						UART_SETBPS
.395c54		08		php		            PHP
.395c55		0b		phd		            PHD
.395c56		48		pha		                PHA             ; begin setdp macro
.395c57		08		php		                PHP
.395c58		c2 20		rep #$20	                REP #$20        ; set A long
.395c5a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c5d		5b		tcd		                TCD
.395c5e		28		plp		                PLP
.395c5f		68		pla		                PLA             ; end setdp macro
.395c60		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c62		48		pha		            PHA
.395c63		e2 20		sep #$20	                SEP #$20        ; set A short
.395c65		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395c68		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c6a		09 80		ora #$80	            ORA #LCR_DLB
.395c6c		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c6e		c2 20		rep #$20	                REP #$20        ; set A long
.395c70		68		pla		            PLA
.395c71		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395c74		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395c76		e2 20		sep #$20	                SEP #$20        ; set A short
.395c78		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395c7b		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c7d		49 80		eor #$80	            EOR #LCR_DLB
.395c7f		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c81		2b		pld		            PLD
.395c82		28		plp		            PLP
.395c83		6b		rtl		            RTL
.395c84						UART_SETLCR
.395c84		08		php		            PHP
.395c85		0b		phd		            PHD
.395c86		48		pha		                PHA             ; begin setdp macro
.395c87		08		php		                PHP
.395c88		c2 20		rep #$20	                REP #$20        ; set A long
.395c8a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c8d		5b		tcd		                TCD
.395c8e		28		plp		                PLP
.395c8f		68		pla		                PLA             ; end setdp macro
.395c90		e2 20		sep #$20	                SEP #$20        ; set A short
.395c92		c2 10		rep #$10	                REP #$10        ; set X long
.395c94		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395c96		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395c99		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c9b		2b		pld		            PLD
.395c9c		28		plp		            PLP
.395c9d		6b		rtl		            RTL
.395c9e						UART_INIT
.395c9e		08		php		            PHP
.395c9f		0b		phd		            PHD
.395ca0		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ca2		48		pha		                PHA             ; begin setdp macro
.395ca3		08		php		                PHP
.395ca4		c2 20		rep #$20	                REP #$20        ; set A long
.395ca6		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ca9		5b		tcd		                TCD
.395caa		28		plp		                PLP
.395cab		68		pla		                PLA             ; end setdp macro
.395cac		a9 01 00	lda #$0001	            LDA #UART_115200
.395caf		22 54 5c 39	jsl $395c54	            JSL UART_SETBPS
.395cb3		e2 20		sep #$20	                SEP #$20        ; set A short
.395cb5		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395cb7		22 84 5c 39	jsl $395c84	            JSL UART_SETLCR
.395cbb		a9 e1		lda #$e1	            LDA #%11100001
.395cbd		a0 02 00	ldy #$0002	            LDY #UART_FCR
.395cc0		97 00		sta [$0700],y	            STA [CURRUART],Y
.395cc2		2b		pld		            PLD
.395cc3		28		plp		            PLP
.395cc4		6b		rtl		            RTL
.395cc5						UART_HASBYT
.395cc5		08		php		            PHP
.395cc6		0b		phd		            PHD
.395cc7		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cc9		48		pha		                PHA             ; begin setdp macro
.395cca		08		php		                PHP
.395ccb		c2 20		rep #$20	                REP #$20        ; set A long
.395ccd		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395cd0		5b		tcd		                TCD
.395cd1		28		plp		                PLP
.395cd2		68		pla		                PLA             ; end setdp macro
.395cd3		e2 20		sep #$20	                SEP #$20        ; set A short
.395cd5		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395cd8		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395cda		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395cdc		d0 04		bne $395ce2	            BNE ret_true            ; If flag is set, return true
.395cde		2b		pld		ret_false   PLD                     ; Return false
.395cdf		28		plp		            PLP
.395ce0		18		clc		            CLC
.395ce1		6b		rtl		            RTL
.395ce2		2b		pld		ret_true    PLD                     ; Return true
.395ce3		28		plp		            PLP
.395ce4		38		sec		            SEC
.395ce5		6b		rtl		            RTL
.395ce6						UART_GETC
.395ce6		08		php		            PHP
.395ce7		0b		phd		            PHD
.395ce8		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cea		48		pha		                PHA             ; begin setdp macro
.395ceb		08		php		                PHP
.395cec		c2 20		rep #$20	                REP #$20        ; set A long
.395cee		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395cf1		5b		tcd		                TCD
.395cf2		28		plp		                PLP
.395cf3		68		pla		                PLA             ; end setdp macro
.395cf4		e2 20		sep #$20	                SEP #$20        ; set A short
.395cf6		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395cf9		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395cfb		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395cfd		f0 fa		beq $395cf9	            BEQ wait_getc           ; If the flag is clear, wait
.395cff		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395d02		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395d04		2b		pld		            PLD
.395d05		28		plp		            PLP
.395d06		6b		rtl		            RTL
.395d07						UART_PUTC
.395d07		08		php		            PHP
.395d08		0b		phd		            PHD
.395d09		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d0b		48		pha		                PHA             ; begin setdp macro
.395d0c		08		php		                PHP
.395d0d		c2 20		rep #$20	                REP #$20        ; set A long
.395d0f		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395d12		5b		tcd		                TCD
.395d13		28		plp		                PLP
.395d14		68		pla		                PLA             ; end setdp macro
.395d15		e2 20		sep #$20	                SEP #$20        ; set A short
.395d17		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395d18		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395d1b		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395d1d		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395d1f		f0 fa		beq $395d1b	            BEQ wait_putc
.395d21		68		pla		            PLA
.395d22		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395d25		97 00		sta [$0700],y	            STA [CURRUART],Y
.395d27		2b		pld		            PLD
.395d28		28		plp		            PLP
.395d29		6b		rtl		            RTL
.395d2a						UART_PUTS
.395d2a		08		php		            PHP
.395d2b		e2 20		sep #$20	                SEP #$20        ; set A short
.395d2d		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395d30		f0 07		beq $395d39	            BEQ done
.395d32		22 07 5d 39	jsl $395d07	            JSL UART_PUTC
.395d36		e8		inx		            INX
.395d37		80 f4		bra $395d2d	            BRA put_loop
.395d39		28		plp		done        PLP
.395d3a		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395d3b						JOYSTICK_SET_NES_MODE
.395d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.395d3d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d41		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395d43		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d47		6b		rtl		          RTL
.395d48						JOYSTICK_SET_SNES_MODE
.395d48		e2 20		sep #$20	                SEP #$20        ; set A short
.395d4a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d4e		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395d50		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395d52		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d56		6b		rtl		          RTL
.395d57						JOYSTICK_ENABLE_NES_SNES_PORT0
.395d57		e2 20		sep #$20	                SEP #$20        ; set A short
.395d59		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d5d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d5f		09 01		ora #$01	          ORA #NES_SNES_EN0
.395d61		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d65		6b		rtl		          RTL
.395d66						JOYSTICK_ENABLE_NES_SNES_PORT1
.395d66		e2 20		sep #$20	                SEP #$20        ; set A short
.395d68		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d6c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d6e		09 02		ora #$02	          ORA #NES_SNES_EN1
.395d70		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d74		6b		rtl		          RTL
.395d75						JOYSTICK_DISABLE_NES_SNES_PORT0
.395d75		e2 20		sep #$20	                SEP #$20        ; set A short
.395d77		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d7b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d7d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d81		6b		rtl		          RTL
.395d82						JOYSTICK_DISABLE_NES_SNES_PORT1
.395d82		e2 20		sep #$20	                SEP #$20        ; set A short
.395d84		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d88		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d8a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d8e		6b		rtl		          RTL
.395d8f						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395d8f		e2 20		sep #$20	                SEP #$20        ; set A short
.395d91		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d95		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395d97		c9 00		cmp #$00	          CMP #$00
.395d99		f0 14		beq $395daf	          BEQ END_OF_JOYSTICK_POLL
.395d9b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d9f		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395da1		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395da5						JOYSTICK_POLLING_ISNOTOVER
.395da5		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395da9		29 40		and #$40	          AND #NES_SNES_DONE
.395dab		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395dad		d0 f6		bne $395da5	          BNE JOYSTICK_POLLING_ISNOTOVER
.395daf						END_OF_JOYSTICK_POLL
.395daf		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395db0						SDC_TEST
.395db0		8b		phb		                PHB
.395db1		0b		phd		                PHD
.395db2		08		php		                PHP
.395db3		48		pha		                PHA             ; begin setdbr macro
.395db4		08		php		                PHP
.395db5		e2 20		sep #$20	                SEP #$20        ; set A short
.395db7		a9 00		lda #$00	                LDA #0
.395db9		48		pha		                PHA
.395dba		ab		plb		                PLB
.395dbb		28		plp		                PLP
.395dbc		68		pla		                PLA             ; end setdbr macro
.395dbd		48		pha		                PHA             ; begin setdp macro
.395dbe		08		php		                PHP
.395dbf		c2 20		rep #$20	                REP #$20        ; set A long
.395dc1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395dc4		5b		tcd		                TCD
.395dc5		28		plp		                PLP
.395dc6		68		pla		                PLA             ; end setdp macro
.395dc7		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc9		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395dcb		8d 1e 00	sta $001e	                STA @w CURCOLOR
.395dce		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.395dd2		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.395dd6		22 16 5e 39	jsl $395e16	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395dda		b0 03		bcs $395ddf	                BCS init_ok
.395ddc		82 15 00	brl $395df4	                BRL done
.395ddf		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395de1		85 01		sta $0321	                STA BIOS_DEV
.395de3		22 a6 45 39	jsl $3945a6	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395de7		b0 03		bcs $395dec	                BCS mount_ok
.395de9		82 08 00	brl $395df4	                BRL done
.395dec		22 59 56 39	jsl $395659	mount_ok        JSL IF_DIROPEN
.395df0		b0 02		bcs $395df4	                BCS all_ok
.395df2		80 00		bra $395df4	                BRA done
.395df4						all_ok
.395df4		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.395df8		28		plp		                PLP
.395df9		2b		pld		                PLD
.395dfa		ab		plb		                PLB
.395dfb		6b		rtl		                RTL
.395dfc						SDC_WAITBUSY
.395dfc		08		php		                PHP
.395dfd		e2 20		sep #$20	                SEP #$20        ; set A short
.395dff		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395e03		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395e05		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395e07		f0 f6		beq $395dff	                BEQ wait_xact
.395e09		28		plp		                PLP
.395e0a		6b		rtl		                RTL
.395e0b						SDC_RESET
.395e0b		08		php		                PHP
.395e0c		e2 20		sep #$20	                SEP #$20        ; set A short
.395e0e		a9 01		lda #$01	                LDA #1
.395e10		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395e14		28		plp		                PLP
.395e15		6b		rtl		                RTL
.395e16						SDC_INIT
.395e16		0b		phd		                PHD
.395e17		8b		phb		                PHB
.395e18		08		php		                PHP
.395e19		48		pha		                PHA             ; begin setdbr macro
.395e1a		08		php		                PHP
.395e1b		e2 20		sep #$20	                SEP #$20        ; set A short
.395e1d		a9 00		lda #$00	                LDA #0
.395e1f		48		pha		                PHA
.395e20		ab		plb		                PLB
.395e21		28		plp		                PLP
.395e22		68		pla		                PLA             ; end setdbr macro
.395e23		48		pha		                PHA             ; begin setdp macro
.395e24		08		php		                PHP
.395e25		c2 20		rep #$20	                REP #$20        ; set A long
.395e27		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e2a		5b		tcd		                TCD
.395e2b		28		plp		                PLP
.395e2c		68		pla		                PLA             ; end setdp macro
.395e2d		e2 20		sep #$20	                SEP #$20        ; set A short
.395e2f		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395e31		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395e35		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e37		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e3b		22 fc 5d 39	jsl $395dfc	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395e3f		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e43		d0 07		bne $395e4c	                BNE ret_error                       ; Is there one? Process the error
.395e45		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395e47		28		plp		                PLP
.395e48		ab		plb		                PLB
.395e49		2b		pld		                PLD
.395e4a		38		sec		                SEC
.395e4b		6b		rtl		                RTL
.395e4c		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e4f		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395e51		85 00		sta $0320	set_error       STA BIOS_STATUS
.395e53		28		plp		                PLP
.395e54		ab		plb		                PLB
.395e55		2b		pld		                PLD
.395e56		18		clc		                CLC
.395e57		6b		rtl		                RTL
.395e58						SDC_GETBLOCK
.395e58		0b		phd		                PHD
.395e59		8b		phb		                PHB
.395e5a		08		php		                PHP
.395e5b		48		pha		                PHA             ; begin setdbr macro
.395e5c		08		php		                PHP
.395e5d		e2 20		sep #$20	                SEP #$20        ; set A short
.395e5f		a9 00		lda #$00	                LDA #0
.395e61		48		pha		                PHA
.395e62		ab		plb		                PLB
.395e63		28		plp		                PLP
.395e64		68		pla		                PLA             ; end setdbr macro
.395e65		48		pha		                PHA             ; begin setdp macro
.395e66		08		php		                PHP
.395e67		c2 20		rep #$20	                REP #$20        ; set A long
.395e69		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e6c		5b		tcd		                TCD
.395e6d		28		plp		                PLP
.395e6e		68		pla		                PLA             ; end setdp macro
.395e6f		e2 20		sep #$20	                SEP #$20        ; set A short
.395e71		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e75		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e77		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e7b		a9 00		lda #$00	                LDA #0
.395e7d		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e81		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395e83		0a		asl a		                ASL A
.395e84		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e88		a5 03		lda $0323	                LDA BIOS_LBA+1
.395e8a		2a		rol a		                ROL A
.395e8b		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e8f		a5 04		lda $0324	                LDA BIOS_LBA+2
.395e91		2a		rol a		                ROL A
.395e92		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e96		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395e98		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e9c		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e9e		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395ea2		22 fc 5d 39	jsl $395dfc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395ea6		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395eaa		d0 36		bne $395ee2	                BNE ret_error                       ; Is there one? Process the error
.395eac		e2 20		sep #$20	                SEP #$20        ; set A short
.395eae		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395eb2		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395eb4		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395eb8		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395eba		c2 10		rep #$10	                REP #$10        ; set X long
.395ebc		a0 00 00	ldy #$0000	                LDY #0
.395ebf		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395ec3		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395ec5		c8		iny		                INY                                 ; Advance to the next byte
.395ec6		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395ec9		d0 f4		bne $395ebf	                BNE loop_rd                         ; No: keep reading
.395ecb		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ecf		d0 11		bne $395ee2	                BNE ret_error                       ; Is there one? Process the error
.395ed1		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395ed3		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ed7		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ed9		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395edd		28		plp		                PLP
.395ede		ab		plb		                PLB
.395edf		2b		pld		                PLD
.395ee0		38		sec		                SEC
.395ee1		6b		rtl		                RTL
.395ee2		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395ee5		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395ee7		85 00		sta $0320	                STA BIOS_STATUS
.395ee9		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395eed		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395eef		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ef3		28		plp		                PLP
.395ef4		ab		plb		                PLB
.395ef5		2b		pld		                PLD
.395ef6		18		clc		                CLC
.395ef7		6b		rtl		                RTL
.395ef8						SDC_PUTBLOCK
.395ef8		0b		phd		                PHD
.395ef9		8b		phb		                PHB
.395efa		08		php		                PHP
.395efb		48		pha		                PHA             ; begin setdbr macro
.395efc		08		php		                PHP
.395efd		e2 20		sep #$20	                SEP #$20        ; set A short
.395eff		a9 00		lda #$00	                LDA #0
.395f01		48		pha		                PHA
.395f02		ab		plb		                PLB
.395f03		28		plp		                PLP
.395f04		68		pla		                PLA             ; end setdbr macro
.395f05		48		pha		                PHA             ; begin setdp macro
.395f06		08		php		                PHP
.395f07		c2 20		rep #$20	                REP #$20        ; set A long
.395f09		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395f0c		5b		tcd		                TCD
.395f0d		28		plp		                PLP
.395f0e		68		pla		                PLA             ; end setdp macro
.395f0f		e2 20		sep #$20	                SEP #$20        ; set A short
.395f11		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395f15		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395f17		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f1b		c2 10		rep #$10	                REP #$10        ; set X long
.395f1d		a0 00 00	ldy #$0000	                LDY #0
.395f20		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395f22		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395f26		c8		iny		                INY                                 ; Advance to the next byte
.395f27		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395f2a		d0 f4		bne $395f20	                BNE loop_wr                         ; No: keep writing
.395f2c		a9 00		lda #$00	                LDA #0
.395f2e		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395f32		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395f34		0a		asl a		                ASL A
.395f35		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395f39		a5 03		lda $0323	                LDA BIOS_LBA+1
.395f3b		2a		rol a		                ROL A
.395f3c		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395f40		a5 04		lda $0324	                LDA BIOS_LBA+2
.395f42		2a		rol a		                ROL A
.395f43		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395f47		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395f49		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395f4d		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395f4f		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395f53		22 fc 5d 39	jsl $395dfc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395f57		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395f5b		d0 11		bne $395f6e	                BNE ret_error                       ; Is there one? Process the error
.395f5d		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395f5f		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f63		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f65		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f69		28		plp		                PLP
.395f6a		ab		plb		                PLB
.395f6b		2b		pld		                PLD
.395f6c		38		sec		                SEC
.395f6d		6b		rtl		                RTL
.395f6e		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395f71		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395f73		85 00		sta $0320	                STA BIOS_STATUS
.395f75		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f79		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f7b		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f7f		28		plp		                PLP
.395f80		ab		plb		                PLB
.395f81		2b		pld		                PLD
.395f82		18		clc		                CLC
.395f83		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395f84						FDC_TEST
.395f84		8b		phb		                    PHB
.395f85		0b		phd		                    PHD
.395f86		08		php		                    PHP
.395f87		48		pha		                PHA             ; begin setdbr macro
.395f88		08		php		                PHP
.395f89		e2 20		sep #$20	                SEP #$20        ; set A short
.395f8b		a9 00		lda #$00	                LDA #0
.395f8d		48		pha		                PHA
.395f8e		ab		plb		                PLB
.395f8f		28		plp		                PLP
.395f90		68		pla		                PLA             ; end setdbr macro
.395f91		48		pha		                PHA             ; begin setdp macro
.395f92		08		php		                PHP
.395f93		c2 20		rep #$20	                REP #$20        ; set A long
.395f95		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f98		5b		tcd		                TCD
.395f99		28		plp		                PLP
.395f9a		68		pla		                PLA             ; end setdp macro
.395f9b		e2 20		sep #$20	                SEP #$20        ; set A short
.395f9d		a9 f0		lda #$f0	                    LDA #$F0
.395f9f		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395fa2		22 81 0b 39	jsl $390b81	                    JSL ICLRSCREEN
.395fa6		22 a5 09 39	jsl $3909a5	                    JSL ICSRHOME
.395faa		c2 30		rep #$30	                REP #$30        ; set A&X long
.395fac		22 7a 62 39	jsl $39627a	                    JSL FDC_Init
.395fb0		b0 03		bcs $395fb5	                    BCS init_ok
.395fb2		82 20 00	brl $395fd5	                    BRL motor_off
.395fb5		22 79 69 39	jsl $396979	init_ok             JSL FDC_CHK_MEDIA
.395fb9		90 03		bcc $395fbe	                    BCC no_media
.395fbb		82 03 00	brl $395fc1	                    BRL is_ok1
.395fbe						no_media
.395fbe		82 14 00	brl $395fd5	                    BRL motor_off
.395fc1		22 0c 68 39	jsl $39680c	is_ok1              JSL FDC_MOUNT
.395fc5		90 03		bcc $395fca	                    BCC mount_err
.395fc7		82 03 00	brl $395fcd	                    BRL is_ok2
.395fca						mount_err
.395fca		82 08 00	brl $395fd5	                    BRL motor_off
.395fcd		22 e1 5f 39	jsl $395fe1	is_ok2              JSL FDC_TEST_PUTBLOCK
.395fd1		b0 02		bcs $395fd5	                    BCS all_ok
.395fd3		80 00		bra $395fd5	                    BRA motor_off
.395fd5						all_ok
.395fd5		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395fd9		22 2a 63 39	jsl $39632a	                    JSL FDC_Motor_Off
.395fdd		28		plp		                    PLP
.395fde		2b		pld		                    PLD
.395fdf		ab		plb		                    PLB
.395fe0		6b		rtl		                    RTL
.395fe1						FDC_TEST_PUTBLOCK
.395fe1		e2 20		sep #$20	                SEP #$20        ; set A short
.395fe3		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395fe5		a2 00 00	ldx #$0000	                    LDX #0
.395fe8		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395fec		1a		inc a		                    INC A
.395fed		e8		inx		                    INX
.395fee		e0 00 02	cpx #$0200	                    CPX #512
.395ff1		d0 f5		bne $395fe8	                    BNE init_loop
.395ff3		c2 20		rep #$20	                REP #$20        ; set A long
.395ff5		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395ff8		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395ffc		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395fff		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.396003		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.396006		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.39600a		a9 00 00	lda #$0000	                    LDA #0
.39600d		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.396011		22 a0 67 39	jsl $3967a0	                    JSL FDC_PUTBLOCK                ; Try to write the data
.396015		6b		rtl		                    RTL
>396016		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>39601e		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>39602e		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.396032						FDC_Check_RQM
.396032		0b		phd		                    PHD
.396033		08		php		                    PHP
.396034		48		pha		                PHA             ; begin setdp macro
.396035		08		php		                PHP
.396036		c2 20		rep #$20	                REP #$20        ; set A long
.396038		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39603b		5b		tcd		                TCD
.39603c		28		plp		                PLP
.39603d		68		pla		                PLA             ; end setdp macro
.39603e		e2 20		sep #$20	                SEP #$20        ; set A short
.396040		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396042		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396046		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396048		30 12		bmi $39605c	                    BMI time_out            ; If so: signal a time out
.39604a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39604e		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396050		f0 f4		beq $396046	                    BEQ loop
.396052		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396054		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396058		28		plp		                    PLP
.396059		2b		pld		                    PLD
.39605a		38		sec		                    SEC
.39605b		60		rts		                    RTS
.39605c		28		plp		time_out            PLP
.39605d		2b		pld		                    PLD
.39605e		18		clc		                    CLC
.39605f		60		rts		                    RTS
.396060						FDC_Check_DRV0_BSY
.396060		0b		phd		                    PHD
.396061		08		php		                    PHP
.396062		48		pha		                PHA             ; begin setdp macro
.396063		08		php		                PHP
.396064		c2 20		rep #$20	                REP #$20        ; set A long
.396066		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396069		5b		tcd		                TCD
.39606a		28		plp		                PLP
.39606b		68		pla		                PLA             ; end setdp macro
.39606c		e2 20		sep #$20	                SEP #$20        ; set A short
.39606e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396070		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396074		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396076		30 12		bmi $39608a	                    BMI time_out            ; If so: signal a time out
.396078		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39607c		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.39607e		d0 f4		bne $396074	                    BNE loop
.396080		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396082		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396086		28		plp		                    PLP
.396087		2b		pld		                    PLD
.396088		38		sec		                    SEC
.396089		60		rts		                    RTS
.39608a		28		plp		time_out            PLP
.39608b		2b		pld		                    PLD
.39608c		18		clc		                    CLC
.39608d		60		rts		                    RTS
.39608e						FDC_Check_CMD_BSY
.39608e		0b		phd		                    PHD
.39608f		08		php		                    PHP
.396090		48		pha		                PHA             ; begin setdp macro
.396091		08		php		                PHP
.396092		c2 20		rep #$20	                REP #$20        ; set A long
.396094		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396097		5b		tcd		                TCD
.396098		28		plp		                PLP
.396099		68		pla		                PLA             ; end setdp macro
.39609a		e2 20		sep #$20	                SEP #$20        ; set A short
.39609c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39609e		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.3960a2		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3960a4		30 12		bmi $3960b8	                    BMI time_out            ; If so: signal a time out
.3960a6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3960aa		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3960ac		d0 f4		bne $3960a2	                    BNE loop
.3960ae		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3960b0		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.3960b4		28		plp		                    PLP
.3960b5		2b		pld		                    PLD
.3960b6		38		sec		                    SEC
.3960b7		60		rts		                    RTS
.3960b8		28		plp		time_out            PLP
.3960b9		2b		pld		                    PLD
.3960ba		18		clc		                    CLC
.3960bb		60		rts		                    RTS
.3960bc						FDC_Can_Read_Data
.3960bc		0b		phd		                    PHD
.3960bd		08		php		                    PHP
.3960be		48		pha		                PHA             ; begin setdp macro
.3960bf		08		php		                PHP
.3960c0		c2 20		rep #$20	                REP #$20        ; set A long
.3960c2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960c5		5b		tcd		                TCD
.3960c6		28		plp		                PLP
.3960c7		68		pla		                PLA             ; end setdp macro
.3960c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ca		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3960cc		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.3960d0		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3960d2		30 14		bmi $3960e8	                    BMI time_out            ; If so: signal a time out
.3960d4		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3960d8		29 40		and #$40	                    AND #FDC_MSR_DIO
.3960da		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.3960dc		d0 f2		bne $3960d0	                    BNE loop
.3960de		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3960e0		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.3960e4		28		plp		                    PLP
.3960e5		2b		pld		                    PLD
.3960e6		38		sec		                    SEC
.3960e7		60		rts		                    RTS
.3960e8		28		plp		time_out            PLP
.3960e9		2b		pld		                    PLD
.3960ea		18		clc		                    CLC
.3960eb		60		rts		                    RTS
.3960ec						FDC_CAN_WRITE
.3960ec		0b		phd		                    PHD
.3960ed		08		php		                    PHP
.3960ee		48		pha		                PHA             ; begin setdp macro
.3960ef		08		php		                PHP
.3960f0		c2 20		rep #$20	                REP #$20        ; set A long
.3960f2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960f5		5b		tcd		                TCD
.3960f6		28		plp		                PLP
.3960f7		68		pla		                PLA             ; end setdp macro
.3960f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3960fa		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3960fc		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396100		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396102		30 14		bmi $396118	                    BMI time_out            ; If so: signal a time out
.396104		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396108		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39610a		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.39610c		d0 f2		bne $396100	                    BNE loop
.39610e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396110		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396114		28		plp		                    PLP
.396115		2b		pld		                    PLD
.396116		38		sec		                    SEC
.396117		60		rts		                    RTS
.396118		28		plp		time_out            PLP
.396119		2b		pld		                    PLD
.39611a		18		clc		                    CLC
.39611b		60		rts		                    RTS
.39611c						FDC_DELAY_10MS
.39611c		da		phx		                    PHX
.39611d		08		php		                    PHP
.39611e		c2 10		rep #$10	                REP #$10        ; set X long
.396120		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.396123		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.396124		ca		dex		                    DEX
.396125		e0 00 00	cpx #$0000	                    CPX #0
.396128		d0 f9		bne $396123	                    BNE loop
.39612a		28		plp		                    PLP
.39612b		fa		plx		                    PLX
.39612c		6b		rtl		                    RTL
.39612d						FDC_COMMAND
.39612d		da		phx		                    PHX
.39612e		8b		phb		                    PHB
.39612f		0b		phd		                    PHD
.396130		08		php		                    PHP
.396131		48		pha		                PHA             ; begin setdbr macro
.396132		08		php		                PHP
.396133		e2 20		sep #$20	                SEP #$20        ; set A short
.396135		a9 00		lda #$00	                LDA #0
.396137		48		pha		                PHA
.396138		ab		plb		                PLB
.396139		28		plp		                PLP
.39613a		68		pla		                PLA             ; end setdbr macro
.39613b		48		pha		                PHA             ; begin setdp macro
.39613c		08		php		                PHP
.39613d		c2 20		rep #$20	                REP #$20        ; set A long
.39613f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396142		5b		tcd		                TCD
.396143		28		plp		                PLP
.396144		68		pla		                PLA             ; end setdp macro
.396145		22 1c 61 39	jsl $39611c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.396149		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39614b		a2 00		ldx #$00	                    LDX #0
.39614d		a9 00		lda #$00	                    LDA #0
.39614f		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.396152		e8		inx		                    INX
.396153		e0 10		cpx #$10	                    CPX #16
.396155		d0 f8		bne $39614f	                    BNE clr_results
.396157		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.39615b		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39615d		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.39615f		f0 04		beq $396165	                    BEQ start_send                          ; If so, start sending
.396161		22 7a 62 39	jsl $39627a	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.396165						start_send
.396165		e2 10		sep #$10	                SEP #$10        ; set X short
.396167		a2 00		ldx #$00	                    LDX #0
.396169		20 32 60	jsr $396032	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.39616c		b0 03		bcs $396171	                    BCS send_param
.39616e		82 5e 00	brl $3961cf	                    BRL time_out                            ; If there was a timeout, flag the time out
.396171		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.396174		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.396178		22 1c 61 39	jsl $39611c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.39617c		e8		inx		                    INX                                     ; Advance to the next byte
.39617d		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.396180		d0 e7		bne $396169	                    BNE send_loop                           ; Keep sending until we've sent them all
.396182		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.396185		d0 03		bne $39618a	                    BNE chk_data_dir
.396187		82 80 00	brl $39620a	                    BRL result_phase                        ; If 0: we just want a result
.39618a		10 3c		bpl $3961c8	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.39618c						wr_data
.39618c		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39618e		30 03		bmi $396193	                    BMI wr_chk_rqm
.396190		82 3c 00	brl $3961cf	                    BRL time_out                            ; If not, raise an error
.396193		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.396197		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396199		f0 f1		beq $39618c	                    BEQ wr_data_rdy
.39619b		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.39619d		d0 03		bne $3961a2	                    BNE wr_data_phase                       ; If so: transfer the data
.39619f		82 68 00	brl $39620a	                    BRL result_phase                          ; If not: it's an error
.3961a2						wr_data_phase
.3961a2		c2 10		rep #$10	                REP #$10        ; set X long
.3961a4		a0 00 00	ldy #$0000	                    LDY #0
.3961a7		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3961a9		30 03		bmi $3961ae	                    BMI wr_chk_nondma
.3961ab		82 21 00	brl $3961cf	                    BRL time_out                            ; If not, raise an error
.3961ae		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3961b2		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3961b4		f0 54		beq $39620a	                    BEQ result_phase                        ; If not: break out to result phase
.3961b6		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.3961b8		f0 ed		beq $3961a7	                    BEQ wr_data_loop                        ; No: keep waiting
.3961ba		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.3961bc		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.3961c0		c8		iny		                    INY                                     ; Move to the next position
.3961c1		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3961c4		d0 e1		bne $3961a7	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.3961c6		80 42		bra $39620a	                    BRA result_phase                        ; ready for the result phase
.3961c8		20 bc 60	jsr $3960bc	rd_data             JSR FDC_Can_Read_Data
.3961cb		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3961cd		30 07		bmi $3961d6	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.3961cf						time_out
.3961cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3961d1		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.3961d3		82 9c 00	brl $396272	                    BRL pass_error
.3961d6		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.3961da		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3961dc		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3961de		d0 eb		bne $3961cb	                    BNE rd_data_rdy
.3961e0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3961e4		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3961e6		d0 03		bne $3961eb	                    BNE rd_data_phase                       ; If so: transfer the data
.3961e8		82 83 00	brl $39626e	                    BRL error                               ; If not: it's an error
.3961eb						rd_data_phase
.3961eb		c2 10		rep #$10	                REP #$10        ; set X long
.3961ed		a0 00 00	ldy #$0000	                    LDY #0
.3961f0		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3961f2		10 db		bpl $3961cf	                    BPL time_out                            ; If not: throw a timeout error
.3961f4		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.3961f8		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3961fa		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3961fc		d0 f2		bne $3961f0	                    BNE rd_data_loop
.3961fe		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.396202		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396204		c8		iny		                    INY                                     ; Move to the next position
.396205		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396208		d0 e6		bne $3961f0	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.39620a		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.39620d		f0 34		beq $396243	                    BEQ chk_busy                            ; Then we're done
.39620f		e2 10		sep #$10	                SEP #$10        ; set X short
.396211		a2 00		ldx #$00	                    LDX #0
.396213		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.396215		22 55 41 39	jsl $394155	                    JSL ISETTIMEOUT
.396219		20 bc 60	jsr $3960bc	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.39621c		90 b1		bcc $3961cf	                    BCC time_out                            ; If there was a time out, raise an error
.39621e		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396222		20 bc 60	jsr $3960bc	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396225		90 a8		bcc $3961cf	                    BCC time_out                            ; If there was a time out, raise an error
.396227		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39622b		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.39622e		20 32 60	jsr $396032	                    JSR FDC_Check_RQM
.396231		90 9c		bcc $3961cf	                    BCC time_out                            ; If there was a time out, flag the error
.396233		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.396237		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396239		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39623b		d0 06		bne $396243	                    BNE chk_busy
.39623d		e8		inx		                    INX                                     ; Move to the next result positions
.39623e		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.396241		d0 e4		bne $396227	                    BNE read_result                         ; And keep looping until we've read all
.396243						chk_busy
.396243		c2 10		rep #$10	                REP #$10        ; set X long
.396245		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.396248		22 6b 16 39	jsl $39166b	                    JSL ILOOP_MS
.39624c		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396250		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396252		f0 12		beq $396266	                    BEQ done                                ; If not set: we're done
.396254		20 bc 60	jsr $3960bc	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396257		b0 03		bcs $39625c	                    BCS get_result_byte
.396259		82 73 ff	brl $3961cf	                    BRL time_out                            ; If there was a time out, flag the error
.39625c		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396260		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396263		e8		inx		                    INX
.396264		80 dd		bra $396243	                    BRA chk_busy                            ; And keep checking
.396266						done
.396266		64 20		stz $0320	                    STZ BIOS_STATUS
.396268		28		plp		                    PLP
.396269		2b		pld		                    PLD
.39626a		ab		plb		                    PLB
.39626b		fa		plx		                    PLX
.39626c		38		sec		                    SEC
.39626d		6b		rtl		                    RTL
.39626e						error
.39626e		e2 20		sep #$20	                SEP #$20        ; set A short
.396270		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396272		85 20		sta $0320	pass_error          STA BIOS_STATUS
.396274		28		plp		                    PLP
.396275		2b		pld		                    PLD
.396276		ab		plb		                    PLB
.396277		fa		plx		                    PLX
.396278		18		clc		                    CLC
.396279		6b		rtl		                    RTL
.39627a						FDC_Init
.39627a		08		php		                    PHP
.39627b		c2 10		rep #$10	                REP #$10        ; set X long
.39627d		e2 20		sep #$20	                SEP #$20        ; set A short
.39627f		a9 00		lda #$00	                    LDA #0
.396281		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396285		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396288		a0 00 00	ldy #$0000	                    LDY #0
.39628b		22 78 16 39	jsl $391678	                    JSL IDELAY
.39628f		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396291		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396295		ea		nop		                    NOP
.396296		ea		nop		                    NOP
.396297		ea		nop		                    NOP
.396298		ea		nop		                    NOP
.396299		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.39629b		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.39629f		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3962a1		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.3962a5		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3962a8		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3962ab		22 78 16 39	jsl $391678	                    JSL IDELAY
.3962af		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3962b3		90 25		bcc $3962da	                    BCC pass_failure
.3962b5		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3962b9		90 1f		bcc $3962da	                    BCC pass_failure
.3962bb		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3962bf		90 19		bcc $3962da	                    BCC pass_failure
.3962c1		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3962c5		90 13		bcc $3962da	                    BCC pass_failure
.3962c7		22 4c 64 39	jsl $39644c	                    JSL FDC_Configure_Command
.3962cb		90 0d		bcc $3962da	                    BCC pass_failure
.3962cd		22 f3 63 39	jsl $3963f3	                    JSL FDC_Specify_Command
.3962d1		90 07		bcc $3962da	                    BCC pass_failure
.3962d3		22 f6 62 39	jsl $3962f6	                    JSL FDC_Motor_On
.3962d7		28		plp		                    PLP
.3962d8		38		sec		                    SEC
.3962d9		6b		rtl		                    RTL
.3962da		28		plp		pass_failure        PLP
.3962db		18		clc		                    CLC
.3962dc		6b		rtl		                    RTL
.3962dd						FDC_MOTOR_NEEDED
.3962dd		08		php		                    PHP
.3962de		c2 20		rep #$20	                REP #$20        ; set A long
.3962e0		78		sei		                    SEI                         ; Turn off interrupts
.3962e1		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.3962e4		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3962e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3962ea		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962ee		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3962f0		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962f4		28		plp		                    PLP
.3962f5		6b		rtl		                    RTL
.3962f6						FDC_Motor_On
.3962f6		08		php		                    PHP
.3962f7		22 dd 62 39	jsl $3962dd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3962fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3962fd		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.396301		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.396303		d0 1f		bne $396324	                    BNE done                    ; If so: skip
.396305		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396307		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.39630b		20 32 60	jsr $396032	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.39630e		90 17		bcc $396327	                    BCC time_out
.396310		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396313		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396316		22 78 16 39	jsl $391678	                    JSL IDELAY
.39631a		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39631e		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.396320		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396324		28		plp		done                PLP
.396325		38		sec		                    SEC
.396326		6b		rtl		                    RTL
.396327		28		plp		time_out            PLP                         ; Return a timeout error
.396328		18		clc		                    CLC
.396329		6b		rtl		                    RTL
.39632a						FDC_Motor_Off
.39632a		08		php		                    PHP
.39632b		e2 20		sep #$20	                SEP #$20        ; set A short
.39632d		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39632f		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.396333		c2 20		rep #$20	                REP #$20        ; set A long
.396335		78		sei		                    SEI                         ; Turn off interrupts
.396336		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.396339		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39633d		e2 20		sep #$20	                SEP #$20        ; set A short
.39633f		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396343		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396345		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396349		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39634d		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39634f		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396353		28		plp		                    PLP
.396354		6b		rtl		                    RTL
.396355						FDC_Recalibrate_Command
.396355		0b		phd		                    PHD
.396356		08		php		                    PHP
.396357		48		pha		                PHA             ; begin setdp macro
.396358		08		php		                PHP
.396359		c2 20		rep #$20	                REP #$20        ; set A long
.39635b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39635e		5b		tcd		                TCD
.39635f		28		plp		                PLP
.396360		68		pla		                PLA             ; end setdp macro
.396361		22 dd 62 39	jsl $3962dd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396365		e2 20		sep #$20	                SEP #$20        ; set A short
.396367		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396369		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39636c		a5 00		lda $0300	                    LDA FDC_DRIVE
.39636e		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396371		a9 02		lda #$02	                    LDA #2
.396373		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396376		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396379		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39637c		22 2d 61 39	jsl $39612d	                    JSL FDC_COMMAND             ; Issue the command
.396380		90 04		bcc $396386	                    BCC pass_failure            ; If failure, pass the failure up
.396382		28		plp		                    PLP
.396383		2b		pld		                    PLD
.396384		38		sec		                    SEC
.396385		6b		rtl		                    RTL
.396386		28		plp		pass_failure        PLP
.396387		2b		pld		                    PLD
.396388		18		clc		                    CLC
.396389		6b		rtl		                    RTL
.39638a						FDC_Sense_Int_Status
.39638a		8b		phb		                    PHB
.39638b		0b		phd		                    PHD
.39638c		08		php		                    PHP
.39638d		48		pha		                PHA             ; begin setdbr macro
.39638e		08		php		                PHP
.39638f		e2 20		sep #$20	                SEP #$20        ; set A short
.396391		a9 00		lda #$00	                LDA #0
.396393		48		pha		                PHA
.396394		ab		plb		                PLB
.396395		28		plp		                PLP
.396396		68		pla		                PLA             ; end setdbr macro
.396397		48		pha		                PHA             ; begin setdp macro
.396398		08		php		                PHP
.396399		c2 20		rep #$20	                REP #$20        ; set A long
.39639b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39639e		5b		tcd		                TCD
.39639f		28		plp		                PLP
.3963a0		68		pla		                PLA             ; end setdp macro
.3963a1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963a3		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3963a6		22 6b 16 39	jsl $39166b	                    JSL ILOOP_MS
.3963aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3963ac		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3963ae		a9 ff		lda #$ff	                    LDA #$FF
.3963b0		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3963b2		20 8e 60	jsr $39608e	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3963b5		90 30		bcc $3963e7	                    BCC time_out                        ; If there was a time out, raise an error
.3963b7		20 32 60	jsr $396032	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3963ba		90 2b		bcc $3963e7	                    BCC time_out                        ; If there was a time out, raise an error
.3963bc		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3963be		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963c2		20 bc 60	jsr $3960bc	                    JSR FDC_Can_Read_Data
.3963c5		90 20		bcc $3963e7	                    BCC time_out                        ; If there was a time out, raise an error
.3963c7		20 32 60	jsr $396032	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3963ca		90 1b		bcc $3963e7	                    BCC time_out                        ; If there was a time out, raise an error
.3963cc		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3963d0		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3963d2		20 32 60	jsr $396032	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3963d5		90 10		bcc $3963e7	                    BCC time_out                        ; If there was a time out, raise an error
.3963d7		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3963db		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.3963dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3963df		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.3963e2		28		plp		                    PLP
.3963e3		2b		pld		                    PLD
.3963e4		ab		plb		                    PLB
.3963e5		38		sec		                    SEC
.3963e6		6b		rtl		                    RTL
.3963e7						time_out
.3963e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3963e9		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.3963eb		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963ee		28		plp		                    PLP
.3963ef		2b		pld		                    PLD
.3963f0		ab		plb		                    PLB
.3963f1		18		clc		                    CLC
.3963f2		6b		rtl		                    RTL
.3963f3						FDC_Specify_Command
.3963f3		8b		phb		                    PHB
.3963f4		0b		phd		                    PHD
.3963f5		08		php		                    PHP
.3963f6		48		pha		                PHA             ; begin setdbr macro
.3963f7		08		php		                PHP
.3963f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3963fa		a9 00		lda #$00	                LDA #0
.3963fc		48		pha		                PHA
.3963fd		ab		plb		                PLB
.3963fe		28		plp		                PLP
.3963ff		68		pla		                PLA             ; end setdbr macro
.396400		48		pha		                PHA             ; begin setdp macro
.396401		08		php		                PHP
.396402		c2 20		rep #$20	                REP #$20        ; set A long
.396404		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396407		5b		tcd		                TCD
.396408		28		plp		                PLP
.396409		68		pla		                PLA             ; end setdp macro
.39640a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39640c		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39640f		22 6b 16 39	jsl $39166b	                    JSL ILOOP_MS
.396413		e2 20		sep #$20	                SEP #$20        ; set A short
.396415		20 8e 60	jsr $39608e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396418		90 26		bcc $396440	                    BCC time_out            ; If there was a time out, raise an error
.39641a		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39641d		90 21		bcc $396440	                    BCC time_out            ; If there was a time out, raise an error
.39641f		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.396421		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396425		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396428		90 16		bcc $396440	                    BCC time_out            ; If there was a time out, raise an error
.39642a		a9 cf		lda #$cf	                    LDA #$CF
.39642c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396430		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396433		90 0b		bcc $396440	                    BCC time_out            ; If there was a time out, raise an error
.396435		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.396437		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39643b		28		plp		                    PLP
.39643c		2b		pld		                    PLD
.39643d		ab		plb		                    PLB
.39643e		38		sec		                    SEC
.39643f		6b		rtl		                    RTL
.396440						time_out
.396440		e2 20		sep #$20	                SEP #$20        ; set A short
.396442		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396444		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396447		28		plp		                    PLP
.396448		2b		pld		                    PLD
.396449		ab		plb		                    PLB
.39644a		18		clc		                    CLC
.39644b		6b		rtl		                    RTL
.39644c						FDC_Configure_Command
.39644c		8b		phb		                    PHB
.39644d		0b		phd		                    PHD
.39644e		08		php		                    PHP
.39644f		48		pha		                PHA             ; begin setdbr macro
.396450		08		php		                PHP
.396451		e2 20		sep #$20	                SEP #$20        ; set A short
.396453		a9 00		lda #$00	                LDA #0
.396455		48		pha		                PHA
.396456		ab		plb		                PLB
.396457		28		plp		                PLP
.396458		68		pla		                PLA             ; end setdbr macro
.396459		48		pha		                PHA             ; begin setdp macro
.39645a		08		php		                PHP
.39645b		c2 20		rep #$20	                REP #$20        ; set A long
.39645d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396460		5b		tcd		                TCD
.396461		28		plp		                PLP
.396462		68		pla		                PLA             ; end setdp macro
.396463		c2 30		rep #$30	                REP #$30        ; set A&X long
.396465		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396468		22 6b 16 39	jsl $39166b	                    JSL ILOOP_MS
.39646c		e2 20		sep #$20	                SEP #$20        ; set A short
.39646e		20 8e 60	jsr $39608e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396471		90 36		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.396473		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396476		90 31		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.396478		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39647a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39647e		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396481		90 26		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.396483		a9 00		lda #$00	                    LDA #$00
.396485		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396489		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39648c		90 1b		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.39648e		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396490		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396494		20 32 60	jsr $396032	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396497		90 10		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.396499		a9 00		lda #$00	                    LDA #$00
.39649b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39649f		20 8e 60	jsr $39608e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3964a2		90 05		bcc $3964a9	                    BCC time_out            ; If there was a time out, raise an error
.3964a4		28		plp		                    PLP
.3964a5		2b		pld		                    PLD
.3964a6		ab		plb		                    PLB
.3964a7		38		sec		                    SEC
.3964a8		6b		rtl		                    RTL
.3964a9						time_out
.3964a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3964ab		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3964ad		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3964b0		28		plp		                    PLP
.3964b1		2b		pld		                    PLD
.3964b2		ab		plb		                    PLB
.3964b3		18		clc		                    CLC
.3964b4		6b		rtl		                    RTL
.3964b5						FDC_Read_ID_Command
.3964b5		8b		phb		                    PHB
.3964b6		0b		phd		                    PHD
.3964b7		08		php		                    PHP
.3964b8		48		pha		                PHA             ; begin setdbr macro
.3964b9		08		php		                PHP
.3964ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3964bc		a9 00		lda #$00	                LDA #0
.3964be		48		pha		                PHA
.3964bf		ab		plb		                PLB
.3964c0		28		plp		                PLP
.3964c1		68		pla		                PLA             ; end setdbr macro
.3964c2		48		pha		                PHA             ; begin setdp macro
.3964c3		08		php		                PHP
.3964c4		c2 20		rep #$20	                REP #$20        ; set A long
.3964c6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964c9		5b		tcd		                TCD
.3964ca		28		plp		                PLP
.3964cb		68		pla		                PLA             ; end setdp macro
.3964cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3964ce		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.3964d0		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964d3		a9 01		lda #$01	                    LDA #1
.3964d5		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3964d8		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964db		a9 07		lda #$07	                    LDA #7
.3964dd		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3964e0		22 2d 61 39	jsl $39612d	                    JSL FDC_COMMAND                     ; Issue the command
.3964e4		90 27		bcc $39650d	                    BCC pass_failure
.3964e6		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.3964e9		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.3964eb		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3964ee		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3964f0		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3964f3		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3964f5		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3964f8		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3964fa		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3964fd		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3964ff		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396502		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396504		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396507		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396509		28		plp		                    PLP
.39650a		2b		pld		                    PLD
.39650b		ab		plb		                    PLB
.39650c		6b		rtl		                    RTL
.39650d		28		plp		pass_failure        PLP
.39650e		2b		pld		                    PLD
.39650f		ab		plb		                    PLB
.396510		18		clc		                    CLC
.396511		6b		rtl		                    RTL
.396512						FDC_DumpReg_Command
.396512		0b		phd		                    PHD
.396513		08		php		                    PHP
.396514		e2 20		sep #$20	                SEP #$20        ; set A short
.396516		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.396518		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39651b		a9 01		lda #$01	                    LDA #1
.39651d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396520		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396523		a9 0a		lda #$0a	                    LDA #10
.396525		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.396528		22 2d 61 39	jsl $39612d	                    JSL FDC_COMMAND                     ; Issue the command
.39652c		90 03		bcc $396531	                    BCC pass_failure
.39652e		28		plp		                    PLP
.39652f		2b		pld		                    PLD
.396530		6b		rtl		                    RTL
.396531		28		plp		pass_failure        PLP
.396532		2b		pld		                    PLD
.396533		18		clc		                    CLC
.396534		6b		rtl		                    RTL
.396535						FDC_Seek_Track
.396535		8b		phb		                    PHB
.396536		0b		phd		                    PHD
.396537		08		php		                    PHP
.396538		48		pha		                PHA             ; begin setdbr macro
.396539		08		php		                PHP
.39653a		e2 20		sep #$20	                SEP #$20        ; set A short
.39653c		a9 00		lda #$00	                LDA #0
.39653e		48		pha		                PHA
.39653f		ab		plb		                PLB
.396540		28		plp		                PLP
.396541		68		pla		                PLA             ; end setdbr macro
.396542		48		pha		                PHA             ; begin setdp macro
.396543		08		php		                PHP
.396544		c2 20		rep #$20	                REP #$20        ; set A long
.396546		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396549		5b		tcd		                TCD
.39654a		28		plp		                PLP
.39654b		68		pla		                PLA             ; end setdp macro
.39654c		22 dd 62 39	jsl $3962dd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396550		e2 20		sep #$20	                SEP #$20        ; set A short
.396552		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396554		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396557		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396559		29 01		and #$01	                    AND #$01
.39655b		0a		asl a		                    ASL A
.39655c		0a		asl a		                    ASL A
.39655d		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39655f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396562		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396564		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396567		a9 03		lda #$03	                    LDA #3
.396569		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39656c		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39656f		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396572		22 2d 61 39	jsl $39612d	                    JSL FDC_COMMAND                     ; Issue the command
.396576		90 05		bcc $39657d	                    BCC pass_failure
.396578		28		plp		                    PLP
.396579		2b		pld		                    PLD
.39657a		ab		plb		                    PLB
.39657b		38		sec		                    SEC
.39657c		6b		rtl		                    RTL
.39657d		28		plp		pass_failure        PLP
.39657e		2b		pld		                    PLD
.39657f		ab		plb		                    PLB
.396580		18		clc		                    CLC
.396581		6b		rtl		                    RTL
.396582						FDC_Read_Sector
.396582		8b		phb		                    PHB
.396583		0b		phd		                    PHD
.396584		08		php		                    PHP
.396585		48		pha		                PHA             ; begin setdbr macro
.396586		08		php		                PHP
.396587		e2 20		sep #$20	                SEP #$20        ; set A short
.396589		a9 00		lda #$00	                LDA #0
.39658b		48		pha		                PHA
.39658c		ab		plb		                PLB
.39658d		28		plp		                PLP
.39658e		68		pla		                PLA             ; end setdbr macro
.39658f		48		pha		                PHA             ; begin setdp macro
.396590		08		php		                PHP
.396591		c2 20		rep #$20	                REP #$20        ; set A long
.396593		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396596		5b		tcd		                TCD
.396597		28		plp		                PLP
.396598		68		pla		                PLA             ; end setdp macro
.396599		22 dd 62 39	jsl $3962dd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39659d		e2 20		sep #$20	                SEP #$20        ; set A short
.39659f		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3965a1		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3965a3		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3965a6		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3965a8		29 01		and #$01	                    AND #$01
.3965aa		0a		asl a		                    ASL A
.3965ab		0a		asl a		                    ASL A
.3965ac		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3965ae		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3965b1		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3965b3		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3965b6		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3965b8		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3965bb		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3965bd		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3965c0		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3965c2		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3965c5		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3965c7		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3965ca		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3965cc		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3965cf		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3965d1		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3965d4		a9 09		lda #$09	                    LDA #9
.3965d6		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3965d9		a9 01		lda #$01	                    LDA #1
.3965db		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3965de		a9 07		lda #$07	                    LDA #7
.3965e0		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3965e3		22 2d 61 39	jsl $39612d	command             JSL FDC_COMMAND                     ; Issue the command
.3965e7		08		php		                    PHP
.3965e8		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3965eb		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3965ed		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3965f0		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3965f2		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3965f5		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3965f7		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3965fa		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3965fc		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3965ff		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396601		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396604		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396606		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396609		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39660b		28		plp		                    PLP
.39660c		90 04		bcc $396612	                    BCC pass_failure
.39660e		28		plp		done                PLP
.39660f		2b		pld		                    PLD
.396610		ab		plb		                    PLB
.396611		6b		rtl		                    RTL
.396612		28		plp		pass_failure        PLP
.396613		2b		pld		                    PLD
.396614		ab		plb		                    PLB
.396615		18		clc		                    CLC
.396616		6b		rtl		                    RTL
.396617						FDC_Write_Sector
.396617		8b		phb		                    PHB
.396618		0b		phd		                    PHD
.396619		08		php		                    PHP
.39661a		48		pha		                PHA             ; begin setdbr macro
.39661b		08		php		                PHP
.39661c		e2 20		sep #$20	                SEP #$20        ; set A short
.39661e		a9 00		lda #$00	                LDA #0
.396620		48		pha		                PHA
.396621		ab		plb		                PLB
.396622		28		plp		                PLP
.396623		68		pla		                PLA             ; end setdbr macro
.396624		48		pha		                PHA             ; begin setdp macro
.396625		08		php		                PHP
.396626		c2 20		rep #$20	                REP #$20        ; set A long
.396628		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39662b		5b		tcd		                TCD
.39662c		28		plp		                PLP
.39662d		68		pla		                PLA             ; end setdp macro
.39662e		e2 20		sep #$20	                SEP #$20        ; set A short
.396630		22 dd 62 39	jsl $3962dd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396634		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396636		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396638		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39663b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39663d		29 01		and #$01	                    AND #$01
.39663f		0a		asl a		                    ASL A
.396640		0a		asl a		                    ASL A
.396641		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396643		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396646		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396648		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39664b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39664d		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396650		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396652		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396655		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396657		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39665a		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39665c		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39665f		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396661		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396664		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396666		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396669		a9 09		lda #$09	                    LDA #9
.39666b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39666e		a9 ff		lda #$ff	                    LDA #$FF
.396670		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396673		a9 07		lda #$07	                    LDA #7
.396675		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396678		22 2d 61 39	jsl $39612d	command             JSL FDC_COMMAND                     ; Issue the command
.39667c		08		php		                    PHP
.39667d		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396680		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396682		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396685		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396687		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39668a		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39668c		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39668f		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396691		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396694		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396696		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396699		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39669b		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39669e		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3966a0		28		plp		check_status        PLP
.3966a1		90 04		bcc $3966a7	                    BCC pass_failure
.3966a3		28		plp		done                PLP
.3966a4		2b		pld		                    PLD
.3966a5		ab		plb		                    PLB
.3966a6		6b		rtl		                    RTL
.3966a7		28		plp		pass_failure        PLP
.3966a8		2b		pld		                    PLD
.3966a9		ab		plb		                    PLB
.3966aa		18		clc		                    CLC
.3966ab		6b		rtl		                    RTL
.3966ac						DIVIDE32
.3966ac		da		phx		                    PHX
.3966ad		5a		phy		                    PHY
.3966ae		0b		phd		                    PHD
.3966af		08		php		                    PHP
.3966b0		48		pha		                PHA             ; begin setdp macro
.3966b1		08		php		                PHP
.3966b2		c2 20		rep #$20	                REP #$20        ; set A long
.3966b4		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3966b7		5b		tcd		                TCD
.3966b8		28		plp		                PLP
.3966b9		68		pla		                PLA             ; end setdp macro
.3966ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.3966bc		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3966be		64 0a		stz $0316	                    STZ REMAINDER+2
.3966c0		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3966c3		06 00		asl $030c	loop                ASL DIVIDEND
.3966c5		26 02		rol $030e	                    ROL DIVIDEND+2
.3966c7		26 08		rol $0314	                    ROL REMAINDER
.3966c9		26 0a		rol $0316	                    ROL REMAINDER+2
.3966cb		a5 08		lda $0314	                    LDA REMAINDER
.3966cd		38		sec		                    SEC
.3966ce		e5 04		sbc $0310	                    SBC DIVISOR
.3966d0		a8		tay		                    TAY
.3966d1		a5 0a		lda $0316	                    LDA REMAINDER+2
.3966d3		e5 06		sbc $0312	                    SBC DIVISOR+2
.3966d5		90 06		bcc $3966dd	                    BCC skip
.3966d7		85 0a		sta $0316	                    STA REMAINDER+2
.3966d9		84 08		sty $0314	                    STY REMAINDER
.3966db		e6 00		inc $030c	                    INC DIVIDEND
.3966dd		ca		dex		skip                DEX
.3966de		d0 e3		bne $3966c3	                    BNE loop
.3966e0		28		plp		                    PLP
.3966e1		2b		pld		                    PLD
.3966e2		7a		ply		                    PLY
.3966e3		fa		plx		                    PLX
.3966e4		60		rts		                    RTS
.3966e5						LBA2CHS
.3966e5		8b		phb		                    PHB
.3966e6		0b		phd		                    PHD
.3966e7		08		php		                    PHP
.3966e8		48		pha		                PHA             ; begin setdbr macro
.3966e9		08		php		                PHP
.3966ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3966ec		a9 00		lda #$00	                LDA #0
.3966ee		48		pha		                PHA
.3966ef		ab		plb		                PLB
.3966f0		28		plp		                PLP
.3966f1		68		pla		                PLA             ; end setdbr macro
.3966f2		48		pha		                PHA             ; begin setdp macro
.3966f3		08		php		                PHP
.3966f4		c2 20		rep #$20	                REP #$20        ; set A long
.3966f6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966f9		5b		tcd		                TCD
.3966fa		28		plp		                PLP
.3966fb		68		pla		                PLA             ; end setdp macro
.3966fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3966fe		a5 22		lda $0322	                    LDA BIOS_LBA
.396700		85 0c		sta $030c	                    STA DIVIDEND
.396702		a5 24		lda $0324	                    LDA BIOS_LBA+2
.396704		85 0e		sta $030e	                    STA DIVIDEND+2
.396706		a9 24 00	lda #$0024	                    LDA #36
.396709		85 10		sta $0310	                    STA DIVISOR
.39670b		64 12		stz $0312	                    STZ DIVISOR+2
.39670d		20 ac 66	jsr $3966ac	                    JSR DIVIDE32
.396710		e2 20		sep #$20	                SEP #$20        ; set A short
.396712		a5 0c		lda $030c	                    LDA DIVIDEND
.396714		85 02		sta $0302	                    STA FDC_CYLINDER
.396716		c2 20		rep #$20	                REP #$20        ; set A long
.396718		a5 14		lda $0314	                    LDA REMAINDER
.39671a		85 0c		sta $030c	                    STA DIVIDEND
.39671c		a5 16		lda $0316	                    LDA REMAINDER+2
.39671e		85 0e		sta $030e	                    STA DIVIDEND+2
.396720		a9 12 00	lda #$0012	                    LDA #18
.396723		85 10		sta $0310	                    STA DIVISOR
.396725		64 12		stz $0312	                    STZ DIVISOR+2
.396727		20 ac 66	jsr $3966ac	                    JSR DIVIDE32
.39672a		e2 20		sep #$20	                SEP #$20        ; set A short
.39672c		a5 0c		lda $030c	                    LDA DIVIDEND
.39672e		29 01		and #$01	                    AND #$01
.396730		85 01		sta $0301	                    STA FDC_HEAD
.396732		a5 14		lda $0314	                    LDA REMAINDER
.396734		1a		inc a		                    INC A
.396735		85 03		sta $0303	                    STA FDC_SECTOR
.396737		28		plp		                    PLP
.396738		2b		pld		                    PLD
.396739		ab		plb		                    PLB
.39673a		6b		rtl		                    RTL
.39673b						FDC_GETBLOCK
.39673b		8b		phb		                    PHB
.39673c		0b		phd		                    PHD
.39673d		08		php		                    PHP
.39673e		48		pha		                PHA             ; begin setdbr macro
.39673f		08		php		                PHP
.396740		e2 20		sep #$20	                SEP #$20        ; set A short
.396742		a9 00		lda #$00	                LDA #0
.396744		48		pha		                PHA
.396745		ab		plb		                PLB
.396746		28		plp		                PLP
.396747		68		pla		                PLA             ; end setdbr macro
.396748		48		pha		                PHA             ; begin setdp macro
.396749		08		php		                PHP
.39674a		c2 20		rep #$20	                REP #$20        ; set A long
.39674c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39674f		5b		tcd		                TCD
.396750		28		plp		                PLP
.396751		68		pla		                PLA             ; end setdp macro
.396752		e2 20		sep #$20	                SEP #$20        ; set A short
.396754		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396756		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396759		c2 30		rep #$30	                REP #$30        ; set A&X long
.39675b		22 e5 66 39	jsl $3966e5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39675f		e2 20		sep #$20	                SEP #$20        ; set A short
.396761		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396763		f0 29		beq $39678e	                    BEQ read_failure
.396765						try_read
.396765		c2 20		rep #$20	                REP #$20        ; set A long
.396767		22 82 65 39	jsl $396582	                    JSL FDC_Read_Sector         ; Read the sector
.39676b		90 14		bcc $396781	                    BCC retry
.39676d		e2 20		sep #$20	                SEP #$20        ; set A short
.39676f		a5 06		lda $0306	                    LDA FDC_ST0
.396771		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396773		d0 19		bne $39678e	                    BNE read_failure
.396775						ret_success
.396775		e2 20		sep #$20	                SEP #$20        ; set A short
.396777		a9 00		lda #$00	                    LDA #0
.396779		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39677c		28		plp		                    PLP
.39677d		2b		pld		                    PLD
.39677e		ab		plb		                    PLB
.39677f		38		sec		                    SEC
.396780		6b		rtl		                    RTL
.396781						retry
.396781		e2 20		sep #$20	                SEP #$20        ; set A short
.396783		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396786		30 13		bmi $39679b	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396788		22 7a 62 39	jsl $39627a	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39678c		80 d7		bra $396765	                    BRA try_read                ; And try the read again
.39678e						read_failure
.39678e		e2 20		sep #$20	                SEP #$20        ; set A short
.396790		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396792		80 04		bra $396798	                    BRA ret_failure
.396794						seek_failure
.396794		e2 20		sep #$20	                SEP #$20        ; set A short
.396796		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396798		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39679b		28		plp		pass_failure        PLP
.39679c		2b		pld		                    PLD
.39679d		ab		plb		                    PLB
.39679e		18		clc		                    CLC
.39679f		6b		rtl		                    RTL
.3967a0						FDC_PUTBLOCK
.3967a0		8b		phb		                    PHB
.3967a1		0b		phd		                    PHD
.3967a2		08		php		                    PHP
.3967a3		48		pha		                PHA             ; begin setdbr macro
.3967a4		08		php		                PHP
.3967a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a7		a9 00		lda #$00	                LDA #0
.3967a9		48		pha		                PHA
.3967aa		ab		plb		                PLB
.3967ab		28		plp		                PLP
.3967ac		68		pla		                PLA             ; end setdbr macro
.3967ad		48		pha		                PHA             ; begin setdp macro
.3967ae		08		php		                PHP
.3967af		c2 20		rep #$20	                REP #$20        ; set A long
.3967b1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967b4		5b		tcd		                TCD
.3967b5		28		plp		                PLP
.3967b6		68		pla		                PLA             ; end setdp macro
.3967b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3967b9		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3967bb		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3967be		c2 30		rep #$30	                REP #$30        ; set A&X long
.3967c0		22 e5 66 39	jsl $3966e5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3967c4		22 17 66 39	jsl $396617	retry               JSL FDC_Write_Sector        ; Write the sector
.3967c8		b0 03		bcs $3967cd	                    BCS chk_st0
.3967ca		82 28 00	brl $3967f5	                    BRL attempt_retry
.3967cd						chk_st0
.3967cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3967cf		a5 06		lda $0306	                    LDA FDC_ST0
.3967d1		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3967d3		d0 0c		bne $3967e1	                    BNE write_failure
.3967d5						ret_success
.3967d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3967d7		a9 00		lda #$00	                    LDA #0
.3967d9		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3967dc		28		plp		                    PLP
.3967dd		2b		pld		                    PLD
.3967de		ab		plb		                    PLB
.3967df		38		sec		                    SEC
.3967e0		6b		rtl		                    RTL
.3967e1						write_failure
.3967e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3967e3		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3967e5		89 02		bit #$02	                    BIT #FDC_ST1_NW
.3967e7		f0 04		beq $3967ed	                    BEQ generic_err
.3967e9		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3967eb		80 17		bra $396804	                    BRA ret_failure
.3967ed		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3967ef		d0 e4		bne $3967d5	                    BNE ret_success
.3967f1		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3967f3		d0 e0		bne $3967d5	                    BNE ret_success
.3967f5						attempt_retry
.3967f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3967f7		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3967fa		d0 c8		bne $3967c4	                    BNE retry                           ; And retry unless we have none left
.3967fc		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3967fe		80 04		bra $396804	                    BRA ret_failure
.396800						seek_failure
.396800		e2 20		sep #$20	                SEP #$20        ; set A short
.396802		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396804						ret_failure
.396804		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396807		28		plp		pass_failure        PLP
.396808		2b		pld		                    PLD
.396809		ab		plb		                    PLB
.39680a		18		clc		                    CLC
.39680b		6b		rtl		                    RTL
.39680c						FDC_MOUNT
.39680c		8b		phb		                    PHB
.39680d		0b		phd		                    PHD
.39680e		08		php		                    PHP
.39680f		48		pha		                PHA             ; begin setdbr macro
.396810		08		php		                PHP
.396811		e2 20		sep #$20	                SEP #$20        ; set A short
.396813		a9 00		lda #$00	                LDA #0
.396815		48		pha		                PHA
.396816		ab		plb		                PLB
.396817		28		plp		                PLP
.396818		68		pla		                PLA             ; end setdbr macro
.396819		48		pha		                PHA             ; begin setdp macro
.39681a		08		php		                PHP
.39681b		c2 20		rep #$20	                REP #$20        ; set A long
.39681d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396820		5b		tcd		                TCD
.396821		28		plp		                PLP
.396822		68		pla		                PLA             ; end setdp macro
.396823		22 7a 62 39	jsl $39627a	                    JSL FDC_INIT
.396827		e2 20		sep #$20	                SEP #$20        ; set A short
.396829		c2 10		rep #$10	                REP #$10        ; set X long
.39682b		a9 00		lda #$00	                    LDA #0
.39682d		a2 00 00	ldx #$0000	                    LDX #0
.396830		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396834		e8		inx		                    INX
.396835		e0 00 02	cpx #$0200	                    CPX #512
.396838		d0 f6		bne $396830	                    BNE zero_loop
.39683a		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.39683c		85 00		sta $0300	                    STA FDC_DRIVE
.39683e		22 f6 62 39	jsl $3962f6	                    JSL FDC_Motor_On                        ; Turn the motor on
.396842		c2 30		rep #$30	                REP #$30        ; set A&X long
.396844		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396847		85 22		sta $0322	                    STA BIOS_LBA
.396849		85 24		sta $0324	                    STA BIOS_LBA+2
.39684b		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39684e		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396850		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396853		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396855		22 3b 67 39	jsl $39673b	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396859		b0 03		bcs $39685e	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39685b		82 d3 00	brl $396931	                    BRL pass_failure                        ; Pass the error up the chain
.39685e						parse_boot
.39685e		e2 20		sep #$20	                SEP #$20        ; set A short
.396860		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396862		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396866		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396868		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39686c		e2 20		sep #$20	                SEP #$20        ; set A short
.39686e		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396872		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396876		c2 20		rep #$20	                REP #$20        ; set A long
.396878		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39687b		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39687f		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396883		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396887		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.39688b		a9 00 00	lda #$0000	                    LDA #0
.39688e		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396892		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396895		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396899		18		clc		                    CLC
.39689a		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39689e		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3968a2		a9 00 00	lda #$0000	                    LDA #0
.3968a5		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3968a9		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3968ad		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3968ae		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3968b2		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3968b6		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3968ba		a9 00 00	lda #$0000	                    LDA #0
.3968bd		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3968c1		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3968c5		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3968c9		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3968ca		4a		lsr a		                    LSR A
.3968cb		4a		lsr a		                    LSR A
.3968cc		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3968cd		18		clc		                    CLC
.3968ce		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3968d2		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3968d6		a9 00 00	lda #$0000	                    LDA #0
.3968d9		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3968dd		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3968e1		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.3968e5		a9 00 00	lda #$0000	                    LDA #0
.3968e8		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.3968ec		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3968f0		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3968f4		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3968f7		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3968fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3968fd		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.396901		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396903		80 14		bra $396919	                    BRA no_volume_id                        ; No: there is no volume ID
.396905						is_extended
.396905		c2 20		rep #$20	                REP #$20        ; set A long
.396907		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.39690b		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39690f		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396913		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396917		80 0d		bra $396926	                    BRA ret_success
.396919						no_volume_id
.396919		c2 20		rep #$20	                REP #$20        ; set A long
.39691b		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.39691e		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396922		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396926						ret_success
.396926		e2 20		sep #$20	                SEP #$20        ; set A short
.396928		a9 00		lda #$00	                    LDA #0
.39692a		85 20		sta $0320	                    STA BIOS_STATUS
.39692c		28		plp		                    PLP
.39692d		2b		pld		                    PLD
.39692e		ab		plb		                    PLB
.39692f		38		sec		                    SEC
.396930		6b		rtl		                    RTL
.396931		28		plp		pass_failure        PLP
.396932		2b		pld		                    PLD
.396933		ab		plb		                    PLB
.396934		18		clc		                    CLC
.396935		6b		rtl		                    RTL
.396936						FDC_CMDBLOCK
.396936		8b		phb		                    PHB
.396937		0b		phd		                    PHD
.396938		08		php		                    PHP
.396939		48		pha		                PHA             ; begin setdbr macro
.39693a		08		php		                PHP
.39693b		e2 20		sep #$20	                SEP #$20        ; set A short
.39693d		a9 00		lda #$00	                LDA #0
.39693f		48		pha		                PHA
.396940		ab		plb		                PLB
.396941		28		plp		                PLP
.396942		68		pla		                PLA             ; end setdbr macro
.396943		48		pha		                PHA             ; begin setdp macro
.396944		08		php		                PHP
.396945		c2 20		rep #$20	                REP #$20        ; set A long
.396947		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39694a		5b		tcd		                TCD
.39694b		28		plp		                PLP
.39694c		68		pla		                PLA             ; end setdp macro
.39694d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39694f		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396951		f0 0f		beq $396962	                    BEQ motor_on
.396953		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396955		f0 11		beq $396968	                    BEQ motor_off
.396957		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396959		f0 13		beq $39696e	                    BEQ recalibrate
.39695b		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39695d		28		plp		                    PLP
.39695e		2b		pld		                    PLD
.39695f		ab		plb		                    PLB
.396960		38		sec		                    SEC
.396961		6b		rtl		                    RTL
.396962		22 f6 62 39	jsl $3962f6	motor_on            JSL FDC_Motor_On
.396966		80 f3		bra $39695b	                    BRA ret_success
.396968		22 2a 63 39	jsl $39632a	motor_off           JSL FDC_Motor_Off
.39696c		80 ed		bra $39695b	                    BRA ret_success
.39696e		22 55 63 39	jsl $396355	recalibrate         JSL FDC_Recalibrate_Command
.396972		b0 e7		bcs $39695b	                    BCS ret_success
.396974		28		plp		pass_failure        PLP
.396975		2b		pld		                    PLD
.396976		ab		plb		                    PLB
.396977		18		clc		                    CLC
.396978		6b		rtl		                    RTL
.396979						FDC_CHK_MEDIA
.396979		0b		phd		                    PHD
.39697a		08		php		                    PHP
.39697b		48		pha		                PHA             ; begin setdp macro
.39697c		08		php		                PHP
.39697d		c2 20		rep #$20	                REP #$20        ; set A long
.39697f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396982		5b		tcd		                TCD
.396983		28		plp		                PLP
.396984		68		pla		                PLA             ; end setdp macro
.396985		22 f6 62 39	jsl $3962f6	                    JSL FDC_Motor_On                ; Turn on the motor
.396989		e2 20		sep #$20	                SEP #$20        ; set A short
.39698b		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39698f		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.396991		f0 42		beq $3969d5	                    BEQ ret_true                    ; If not: assume the disk is present
.396993		a9 00		lda #$00	                    LDA #0
.396995		85 00		sta $0300	                    STA FDC_DRIVE
.396997		a9 00		lda #$00	                    LDA #0
.396999		85 01		sta $0301	                    STA FDC_HEAD
.39699b		a9 50		lda #$50	                    LDA #80
.39699d		85 02		sta $0302	                    STA FDC_CYLINDER
.39699f		22 35 65 39	jsl $396535	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3969a3		90 34		bcc $3969d9	                    BCC ret_false                   ; If fail: return false
.3969a5		c2 10		rep #$10	                REP #$10        ; set X long
.3969a7		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3969aa		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3969ad		22 78 16 39	jsl $391678	                    JSL IDELAY
.3969b1		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3969b5		a5 06		lda $0306	                    LDA FDC_ST0
.3969b7		29 d0		and #$d0	                    AND #%11010000
.3969b9		d0 1e		bne $3969d9	                    BNE ret_false
.3969bb		22 55 63 39	jsl $396355	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3969bf		90 18		bcc $3969d9	                    BCC ret_false                   ; If fail: return false
.3969c1		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3969c4		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3969c7		22 78 16 39	jsl $391678	                    JSL IDELAY
.3969cb		22 8a 63 39	jsl $39638a	                    JSL FDC_Sense_Int_Status
.3969cf		a5 06		lda $0306	                    LDA FDC_ST0
.3969d1		29 d0		and #$d0	                    AND #%11010000
.3969d3		d0 04		bne $3969d9	                    BNE ret_false
.3969d5						ret_true
.3969d5		28		plp		                    PLP
.3969d6		2b		pld		                    PLD
.3969d7		38		sec		                    SEC
.3969d8		6b		rtl		                    RTL
.3969d9						ret_false
.3969d9		28		plp		                    PLP
.3969da		2b		pld		                    PLD
.3969db		18		clc		                    CLC
.3969dc		6b		rtl		                    RTL
.3969dd						FDC_WRITEVBR
.3969dd		8b		phb		                    PHB
.3969de		0b		phd		                    PHD
.3969df		08		php		                    PHP
.3969e0		48		pha		                PHA             ; begin setdbr macro
.3969e1		08		php		                PHP
.3969e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3969e4		a9 00		lda #$00	                LDA #0
.3969e6		48		pha		                PHA
.3969e7		ab		plb		                PLB
.3969e8		28		plp		                PLP
.3969e9		68		pla		                PLA             ; end setdbr macro
.3969ea		48		pha		                PHA             ; begin setdp macro
.3969eb		08		php		                PHP
.3969ec		c2 20		rep #$20	                REP #$20        ; set A long
.3969ee		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3969f1		5b		tcd		                TCD
.3969f2		28		plp		                PLP
.3969f3		68		pla		                PLA             ; end setdp macro
.3969f4		22 0c 68 39	jsl $39680c	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3969f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3969fa		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3969fd		a2 00 00	ldx #$0000	                    LDX #0
.396a00		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396a04		e8		inx		                    INX
.396a05		e8		inx		                    INX
.396a06		e0 00 02	cpx #$0200	                    CPX #512
.396a09		d0 f5		bne $396a00	                    BNE clr_loop
.396a0b		e2 20		sep #$20	                SEP #$20        ; set A short
.396a0d		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396a10		bf c5 6a 39	lda $396ac5,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396a14		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396a18		e8		inx		                    INX
.396a19		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.396a1c		d0 f2		bne $396a10	                    BNE copy_loop
.396a1e		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.396a21		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396a24		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396a26		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396a2a		f0 07		beq $396a33	                    BEQ path_copy_done
.396a2c		e8		inx		                    INX
.396a2d		c8		iny		                    INY
.396a2e		c0 80 00	cpy #$0080	                    CPY #128
.396a31		d0 f1		bne $396a24	                    BNE path_copy_loop
.396a33						path_copy_done
.396a33		c2 20		rep #$20	                REP #$20        ; set A long
.396a35		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396a38		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396a3c		c2 20		rep #$20	                REP #$20        ; set A long
.396a3e		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396a41		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396a43		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396a46		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396a48		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.396a4b		85 02		sta $0322	                    STA BIOS_LBA
.396a4d		85 04		sta $0324	                    STA BIOS_LBA+2
.396a4f		e2 20		sep #$20	                SEP #$20        ; set A short
.396a51		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396a53		85 01		sta $0321	                    STA BIOS_DEV
.396a55		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396a59		b0 09		bcs $396a64	                    BCS ret_success
.396a5b		22 2a 63 39	jsl $39632a	                    JSL FDC_Motor_Off
.396a5f		28		plp		                    PLP                         ; Return the failure
.396a60		2b		pld		                    PLD
.396a61		ab		plb		                    PLB
.396a62		18		clc		                    CLC
.396a63		6b		rtl		                    RTL
.396a64		22 2a 63 39	jsl $39632a	ret_success         JSL FDC_Motor_Off
.396a68		e2 20		sep #$20	                SEP #$20        ; set A short
.396a6a		a9 00		lda #$00	                    LDA #0
.396a6c		85 00		sta $0320	                    STA BIOS_STATUS
.396a6e		28		plp		                    PLP
.396a6f		2b		pld		                    PLD
.396a70		ab		plb		                    PLB
.396a71		38		sec		                    SEC
.396a72		6b		rtl		                    RTL
.396a73						FDC_TIME_HANDLE
.396a73		08		php		                    PHP
.396a74		e2 20		sep #$20	                SEP #$20        ; set A short
.396a76		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.396a7a		d0 06		bne $396a82	                    BNE dec_motor                   ; If not zero: decrement the timer
.396a7c		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.396a80		f0 28		beq $396aaa	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.396a82		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.396a86		3a		dec a		                    DEC A
.396a87		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396a8b		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.396a8d		d0 0b		bne $396a9a	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396a8f		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396a93		3a		dec a		                    DEC A
.396a94		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.396a98		80 10		bra $396aaa	                    BRA sof_timeout                 ; And move on to the next timer
.396a9a		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.396a9e		d0 0a		bne $396aaa	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.396aa0		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.396aa4		d0 04		bne $396aaa	                    BNE sof_timeout
.396aa6		22 2a 63 39	jsl $39632a	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.396aaa						sof_timeout
.396aaa		e2 20		sep #$20	                SEP #$20        ; set A short
.396aac		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.396ab0		f0 11		beq $396ac3	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.396ab2		3a		dec a		                    DEC A                           ; Count down one tick
.396ab3		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.396ab7		d0 0a		bne $396ac3	                    BNE sof_int_done                ; If not 0, we're done
.396ab9		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.396abd		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396abf		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.396ac3		28		plp		sof_int_done        PLP
.396ac4		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396ac5						FDC_VBR_BEGIN
>396ac5		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396ac8		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396ad0		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396ad2		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396ad3		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396ad5		02				num_fat             .byte 2                 ; Number of FATs
>396ad6		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396ad8		40 0b				total_sectors       .word 2880              ; Total sectors
>396ada		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396adb		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396add		12 00				sec_per_track       .word 18                ; Sectors per track
>396adf		02 00				num_head            .word 2                 ; Number of heads
>396ae1		00 00 00 00			ignore2             .dword 0
>396ae5		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396ae9		00 00				ignore3             .word 0
>396aeb		29				boot_signature      .byte $29
>396aec		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396af0		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396af8		20 20 20
>396afb		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396b03		80 40		bra $396b45	                    BRA vbr_start
>396b05						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396b45						vbr_start
.396b45		c2 20		rep #$20	                REP #$20        ; set A long
.396b47		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396b4a		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396b4e		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396b51		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396b55		22 e4 59 39	jsl $3959e4	                    JSL IF_RUN              ; And try to execute the binary file
.396b59		b0 0c		bcs $396b67	                    BCS lock                ; If it returned success... lock up... I guess?
.396b5b						error
.396b5b		e2 20		sep #$20	                SEP #$20        ; set A short
.396b5d		4b		phk		                    PHK                     ; Otherwise, print an error message
.396b5e		ab		plb		                    PLB
.396b5f		62 08 00	per $396b6a	                    PER message
.396b62		fa		plx		                    PLX
.396b63		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396b67		ea		nop		lock                NOP                     ; And lock up
.396b68		80 fd		bra $396b67	                    BRA lock
>396b6a		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396b72		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396b82		65 20 62 69 6e 61 72 79 2e 0d 00
.396b8d						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396b8d						IDE_TEST
.396b8d		08		php		                PHP
.396b8e		c2 20		rep #$20	                REP #$20        ; set A long
.396b90		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b93		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b97		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b9a		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b9e		22 bb 6c 39	jsl $396cbb	                JSL IDE_IDENTIFY
.396ba2		b0 03		bcs $396ba7	                BCS id_ok
.396ba4		82 ab 00	brl $396c52	                BRL done
.396ba7						id_ok
.396ba7		c2 10		rep #$10	                REP #$10        ; set X long
.396ba9		e2 20		sep #$20	                SEP #$20        ; set A short
.396bab		a0 28 00	ldy #$0028	                LDY #40
.396bae		a2 36 00	ldx #$0036	                LDX #27*2
.396bb1		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396bb5		22 18 10 00	jsl $001018	                JSL PUTC
.396bb9		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396bbd		22 18 10 00	jsl $001018	                JSL PUTC
.396bc1		e8		inx		                INX
.396bc2		e8		inx		                INX
.396bc3		88		dey		                DEY
.396bc4		88		dey		                DEY
.396bc5		d0 ea		bne $396bb1	                BNE pr_model
.396bc7		c2 10		rep #$10	                REP #$10        ; set X long
.396bc9		e2 20		sep #$20	                SEP #$20        ; set A short
.396bcb		a0 14 00	ldy #$0014	                LDY #20
.396bce		a2 14 00	ldx #$0014	                LDX #10*2
.396bd1		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396bd5		22 18 10 00	jsl $001018	                JSL PUTC
.396bd9		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396bdd		22 18 10 00	jsl $001018	                JSL PUTC
.396be1		e8		inx		                INX
.396be2		e8		inx		                INX
.396be3		88		dey		                DEY
.396be4		88		dey		                DEY
.396be5		d0 ea		bne $396bd1	                BNE pr_serial
.396be7		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396beb		c2 30		rep #$30	                REP #$30        ; set A&X long
.396bed		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396bf0		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396bf4		a9 00 00	lda #$0000	                LDA #0
.396bf7		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396bfb		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396bfe		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396c02		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396c05		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396c09		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396c0c		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396c0f		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396c13		e8		inx		                INX
.396c14		e8		inx		                INX
.396c15		e0 00 02	cpx #$0200	                CPX #512
.396c18		d0 f5		bne $396c0f	                BNE init_loop
.396c1a		22 da 6d 39	jsl $396dda	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396c1e		b0 06		bcs $396c26	                BCS read_sect1
.396c20		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396c24		80 2c		bra $396c52	                BRA done
.396c26		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396c29		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396c2d		a9 00 00	lda #$0000	                LDA #0
.396c30		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396c34		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396c37		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396c3b		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396c3e		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396c42		22 49 6d 39	jsl $396d49	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396c46		b0 06		bcs $396c4e	                BCS all_ok
.396c48		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396c4c		80 04		bra $396c52	                BRA done
.396c4e						all_ok
.396c4e		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396c52		28		plp		done            PLP
.396c53		6b		rtl		                RTL
.396c54						IDE_INIT
.396c54		e2 20		sep #$20	                SEP #$20        ; set A short
.396c56		20 77 6c	jsr $396c77	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396c59		a9 00		lda #$00	              LDA #$00
.396c5b		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396c5f		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396c63		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396c67		a9 01		lda #$01	              LDA #$01
.396c69		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396c6d		a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396c6f		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396c73		20 95 6c	jsr $396c95	              JSR IDE_DRV_READY_NOTBUSY
.396c76		6b		rtl		              RTL
.396c77						IDE_DRIVE_BSY
.396c77		08		php		                PHP
.396c78		e2 20		sep #$20	                SEP #$20        ; set A short
.396c7a		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396c7e		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396c80		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396c82		f0 f6		beq $396c7a	                BEQ loop
.396c84		28		plp		                PLP
.396c85		60		rts		                RTS
.396c86						IDE_DRIVE_READY
.396c86		08		php		                PHP
.396c87		e2 20		sep #$20	                SEP #$20        ; set A short
.396c89		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396c8d		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396c8f		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396c91		d0 f6		bne $396c89	                BNE loop
.396c93		28		plp		                PLP
.396c94		60		rts		                RTS
.396c95						IDE_DRV_READY_NOTBUSY
.396c95		08		php		                PHP
.396c96		e2 20		sep #$20	                SEP #$20        ; set A short
.396c98		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396c9c		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396c9e		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396ca0		d0 f6		bne $396c98	                BNE loop                            ; No: keep waiting
.396ca2		28		plp		ret_success     PLP                                 ; Return success
.396ca3		38		sec		                SEC
.396ca4		60		rts		                RTS
.396ca5		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396ca9		28		plp		                PLP                                 ; Return failure
.396caa		18		clc		                CLC
.396cab		60		rts		                RTS
.396cac						IDE_NOT_DRQ
.396cac		08		php		                PHP
.396cad		e2 20		sep #$20	                SEP #$20        ; set A short
.396caf		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396cb3		29 08		and #$08	                AND #IDE_STAT_DRQ
.396cb5		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396cb7		d0 f6		bne $396caf	                BNE loop                ; No: keep waiting
.396cb9		28		plp		                PLP
.396cba		60		rts		                RTS
.396cbb						IDE_IDENTIFY
.396cbb		5a		phy		                PHY
.396cbc		8b		phb		                PHB
.396cbd		0b		phd		                PHD
.396cbe		08		php		                PHP
.396cbf		48		pha		                PHA             ; begin setdbr macro
.396cc0		08		php		                PHP
.396cc1		e2 20		sep #$20	                SEP #$20        ; set A short
.396cc3		a9 00		lda #$00	                LDA #0
.396cc5		48		pha		                PHA
.396cc6		ab		plb		                PLB
.396cc7		28		plp		                PLP
.396cc8		68		pla		                PLA             ; end setdbr macro
.396cc9		48		pha		                PHA             ; begin setdp macro
.396cca		08		php		                PHP
.396ccb		c2 20		rep #$20	                REP #$20        ; set A long
.396ccd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396cd0		5b		tcd		                TCD
.396cd1		28		plp		                PLP
.396cd2		68		pla		                PLA             ; end setdp macro
.396cd3		e2 20		sep #$20	                SEP #$20        ; set A short
.396cd5		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396cd8		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396cda		29 07		and #$07	                AND #$07
.396cdc		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396cde		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396ce2		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396ce5		e2 20		sep #$20	                SEP #$20        ; set A short
.396ce7		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396ce9		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396ced		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396cf1		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396cf5		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396cf9		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396cfb		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396cff		f0 29		beq $396d2a	                BEQ no_media                    ; If 0: there is no drive
.396d01		20 77 6c	jsr $396c77	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396d04		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d07		90 2d		bcc $396d36	                BCC ret_failure                 ; If an error occurred, return it
.396d09		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d0b		a0 00 00	ldy #$0000	                LDY #0
.396d0e		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396d12		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396d14		c8		iny		                INY                             ; Move to the next position
.396d15		c8		iny		                INY
.396d16		c0 00 02	cpy #$0200	                CPY #512
.396d19		d0 f3		bne $396d0e	                BNE read_loop
.396d1b						ret_success
.396d1b		e2 20		sep #$20	                SEP #$20        ; set A short
.396d1d		a9 00		lda #$00	                LDA #0
.396d1f		85 00		sta $0320	                STA BIOS_STATUS
.396d21		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d24		28		plp		                PLP                             ; Return success
.396d25		2b		pld		                PLD
.396d26		ab		plb		                PLB
.396d27		7a		ply		                PLY
.396d28		38		sec		                SEC
.396d29		6b		rtl		                RTL
.396d2a						no_media
.396d2a		e2 20		sep #$20	                SEP #$20        ; set A short
.396d2c		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396d2e		80 0a		bra $396d3a	                BRA pass_failure
.396d30						not_ata
.396d30		e2 20		sep #$20	                SEP #$20        ; set A short
.396d32		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396d34		80 04		bra $396d3a	                BRA pass_failure
.396d36						ret_failure
.396d36		e2 20		sep #$20	                SEP #$20        ; set A short
.396d38		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d3a		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396d3c		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d40		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d43		28		plp		                PLP
.396d44		2b		pld		                PLD
.396d45		ab		plb		                PLB
.396d46		7a		ply		                PLY
.396d47		18		clc		                CLC
.396d48		6b		rtl		                RTL
.396d49						IDE_GETBLOCK
.396d49		5a		phy		                PHY
.396d4a		8b		phb		                PHB
.396d4b		0b		phd		                PHD
.396d4c		08		php		                PHP
.396d4d		48		pha		                PHA             ; begin setdbr macro
.396d4e		08		php		                PHP
.396d4f		e2 20		sep #$20	                SEP #$20        ; set A short
.396d51		a9 00		lda #$00	                LDA #0
.396d53		48		pha		                PHA
.396d54		ab		plb		                PLB
.396d55		28		plp		                PLP
.396d56		68		pla		                PLA             ; end setdbr macro
.396d57		48		pha		                PHA             ; begin setdp macro
.396d58		08		php		                PHP
.396d59		c2 20		rep #$20	                REP #$20        ; set A long
.396d5b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396d5e		5b		tcd		                TCD
.396d5f		28		plp		                PLP
.396d60		68		pla		                PLA             ; end setdp macro
.396d61		e2 20		sep #$20	                SEP #$20        ; set A short
.396d63		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396d66		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396d68		29 07		and #$07	                AND #$07
.396d6a		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396d6c		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396d70		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396d73		e2 20		sep #$20	                SEP #$20        ; set A short
.396d75		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396d77		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396d7b		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396d7d		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d81		a5 03		lda $0323	                LDA BIOS_LBA+1
.396d83		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d87		a5 04		lda $0324	                LDA BIOS_LBA+2
.396d89		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d8d		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396d8f		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d93		ea		nop		                NOP                             ; Wait about 500ns
.396d94		ea		nop		                NOP
.396d95		ea		nop		                NOP
.396d96		ea		nop		                NOP
.396d97		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d9a		90 2b		bcc $396dc7	                BCC ret_failure                 ; If an error occurred, return it
.396d9c		e2 20		sep #$20	                SEP #$20        ; set A short
.396d9e		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396da2		a0 00 00	ldy #$0000	                LDY #0
.396da5		c2 20		rep #$20	                REP #$20        ; set A long
.396da7		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396dab		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396dad		c8		iny		                INY                             ; Move to the next position
.396dae		c8		iny		                INY
.396daf		c0 00 02	cpy #$0200	                CPY #512
.396db2		d0 f3		bne $396da7	                BNE read_loop
.396db4		ea		nop		                NOP                             ; Wait about 500ns
.396db5		ea		nop		                NOP
.396db6		ea		nop		                NOP
.396db7		ea		nop		                NOP
.396db8						ret_success
.396db8		e2 20		sep #$20	                SEP #$20        ; set A short
.396dba		a9 00		lda #$00	                LDA #0
.396dbc		85 00		sta $0320	                STA BIOS_STATUS
.396dbe		8d 06 03	sta $0306	                STA @w FDC_ST0
.396dc1		28		plp		                PLP                             ; Return success
.396dc2		2b		pld		                PLD
.396dc3		ab		plb		                PLB
.396dc4		7a		ply		                PLY
.396dc5		38		sec		                SEC
.396dc6		6b		rtl		                RTL
.396dc7						ret_failure
.396dc7		e2 20		sep #$20	                SEP #$20        ; set A short
.396dc9		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396dcd		8d 06 03	sta $0306	                STA @w FDC_ST0
.396dd0		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396dd2		85 00		sta $0320	                STA BIOS_STATUS
.396dd4		28		plp		                PLP
.396dd5		2b		pld		                PLD
.396dd6		ab		plb		                PLB
.396dd7		7a		ply		                PLY
.396dd8		18		clc		                CLC
.396dd9		6b		rtl		                RTL
.396dda						IDE_PUTBLOCK
.396dda		5a		phy		                PHY
.396ddb		8b		phb		                PHB
.396ddc		0b		phd		                PHD
.396ddd		08		php		                PHP
.396dde		48		pha		                PHA             ; begin setdbr macro
.396ddf		08		php		                PHP
.396de0		e2 20		sep #$20	                SEP #$20        ; set A short
.396de2		a9 00		lda #$00	                LDA #0
.396de4		48		pha		                PHA
.396de5		ab		plb		                PLB
.396de6		28		plp		                PLP
.396de7		68		pla		                PLA             ; end setdbr macro
.396de8		48		pha		                PHA             ; begin setdp macro
.396de9		08		php		                PHP
.396dea		c2 20		rep #$20	                REP #$20        ; set A long
.396dec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396def		5b		tcd		                TCD
.396df0		28		plp		                PLP
.396df1		68		pla		                PLA             ; end setdp macro
.396df2		e2 20		sep #$20	                SEP #$20        ; set A short
.396df4		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396df7		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396df9		29 07		and #$07	                AND #$07
.396dfb		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396dfd		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396e01		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396e04		e2 20		sep #$20	                SEP #$20        ; set A short
.396e06		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396e08		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396e0c		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396e0e		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396e12		a5 03		lda $0323	                LDA BIOS_LBA+1
.396e14		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396e18		a5 04		lda $0324	                LDA BIOS_LBA+2
.396e1a		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396e1e		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396e20		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396e24		ea		nop		                NOP                             ; Wait about 500ns
.396e25		ea		nop		                NOP
.396e26		ea		nop		                NOP
.396e27		ea		nop		                NOP
.396e28		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396e2b		90 33		bcc $396e60	                BCC ret_failure                 ; If an error occurred, return it
.396e2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e2f		a0 00 00	ldy #$0000	                LDY #0
.396e32		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396e34		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396e38		c8		iny		                INY                             ; Move to the next position
.396e39		c8		iny		                INY
.396e3a		c0 00 02	cpy #$0200	                CPY #512
.396e3d		d0 f3		bne $396e32	                BNE read_loop
.396e3f		ea		nop		                NOP                             ; Wait about 500ns
.396e40		ea		nop		                NOP
.396e41		ea		nop		                NOP
.396e42		ea		nop		                NOP
.396e43		20 95 6c	jsr $396c95	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396e46		90 18		bcc $396e60	                BCC ret_failure                 ; If an error occurred, return it
.396e48		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396e4c		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396e4f		d0 0f		bne $396e60	                BNE ret_failure                 ; If error: return failure
.396e51						ret_success
.396e51		e2 20		sep #$20	                SEP #$20        ; set A short
.396e53		a9 00		lda #$00	                LDA #0
.396e55		85 00		sta $0320	                STA BIOS_STATUS
.396e57		8d 06 03	sta $0306	                STA @w FDC_ST0
.396e5a		28		plp		                PLP                             ; Return success
.396e5b		2b		pld		                PLD
.396e5c		ab		plb		                PLB
.396e5d		7a		ply		                PLY
.396e5e		38		sec		                SEC
.396e5f		6b		rtl		                RTL
.396e60						ret_failure
.396e60		e2 20		sep #$20	                SEP #$20        ; set A short
.396e62		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396e66		8d 06 03	sta $0306	                STA @w FDC_ST0
.396e69		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396e6b		85 00		sta $0320	                STA BIOS_STATUS
.396e6d		28		plp		                PLP
.396e6e		2b		pld		                PLD
.396e6f		ab		plb		                PLB
.396e70		7a		ply		                PLY
.396e71		18		clc		                CLC
.396e72		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396e73						KERNEL_DATA
>396e73		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396e7b		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396e8b		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396e9b		58 20 0d
>396e9e		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396ea6		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396eb6		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396ec6		20 20 0d
>396ec9		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396ed1		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396ee1		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396ef1		20 20 0d
>396ef4		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396efc		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396f0c		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396f1c		20 20 0d
>396f1f		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396f27		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396f37		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396f47		20 20 0d
>396f4a		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396f52		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396f62		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396f72		0d
>396f73		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396f7b		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396f8b		6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396f98		76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+1044 (2021-03-08)"
>396fa0		6c 70 68 61 2b 31 30 34 34 20 28 32 30 32 31 2d
>396fb0		30 33 2d 30 38 29

;******  Return to file: src\kernel.asm

>396fb6		0d 00				                .text $0D,$00
.396fb8						old_pc_style_stat
>396fb8		1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396fc0		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396fd0		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fe0		fd fd
>396fe2		1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396fea		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396ffa		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39700a		fd fd
>39700c		1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397014		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>397024		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397034		fd fd
>397036		1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39703e		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>39704e		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39705e		fd fd
>397060		1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397068		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397078		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397088		fd fd
>39708a		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39708e		00 00 80 ff			                .text $00, $00, $80, $FF
>397092		00 80 00 ff			                .text $00, $80, $00, $FF
>397096		80 00 00 ff			                .text $80, $00, $00, $FF
>39709a		00 80 80 ff			                .text $00, $80, $80, $FF
>39709e		80 80 00 ff			                .text $80, $80, $00, $FF
>3970a2		80 00 80 ff			                .text $80, $00, $80, $FF
>3970a6		80 80 80 ff			                .text $80, $80, $80, $FF
>3970aa		00 45 ff ff			                .text $00, $45, $FF, $FF
>3970ae		13 45 8b ff			                .text $13, $45, $8B, $FF
>3970b2		00 00 20 ff			                .text $00, $00, $20, $FF
>3970b6		00 20 00 ff			                .text $00, $20, $00, $FF
>3970ba		20 00 00 ff			                .text $20, $00, $00, $FF
>3970be		20 20 20 ff			                .text $20, $20, $20, $FF
>3970c2		40 40 40 ff			                .text $40, $40, $40, $FF
>3970c6		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3970ca		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>3970ce		00 00 80 ff			                .text $00, $00, $80, $FF
>3970d2		00 80 00 ff			                .text $00, $80, $00, $FF
>3970d6		80 00 00 ff			                .text $80, $00, $00, $FF
>3970da		00 20 20 ff			                .text $00, $20, $20, $FF
>3970de		20 20 00 ff			                .text $20, $20, $00, $FF
>3970e2		20 00 20 ff			                .text $20, $00, $20, $FF
>3970e6		20 20 20 ff			                .text $20, $20, $20, $FF
>3970ea		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3970ee		13 45 8b ff			                .text $13, $45, $8B, $FF
>3970f2		00 00 20 ff			                .text $00, $00, $20, $FF
>3970f6		00 20 00 ff			                .text $00, $20, $00, $FF
>3970fa		40 00 00 ff			                .text $40, $00, $00, $FF
>3970fe		10 10 10 ff			                .text $10, $10, $10, $FF
>397102		40 40 40 ff			                .text $40, $40, $40, $FF
>397106		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39710a		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>397112		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397122		00
>397123		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>39712b		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39713b		00
>39713c		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>397144		20 45 78 65 63 75 74 65 64 2e 0d 00
>397150		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397158		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397168		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397170		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397180		64 2e 2e 2e 0d 00
>397186		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39718e		20 50 72 65 73 65 6e 74 0d 00
>397198		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3971a0		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3971b0		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3971c0		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3971c8		54 55 52 45 20 46 4f 55 4e 44 2e 00
>3971d4		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3971dc		45 44 2e 00
>3971e0		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3971e8		47 20 42 4d 50 20 50 41 52 53 45 52 00
>3971f5		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3971fd		50 72 65 73 65 6e 74 3a 00
>397206		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>39720e		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>39721e		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>39722c		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>397234		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>397244		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397251		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397259		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>397269		72 64 2e 00
>39726d		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>397275		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397285		49 44 45 20 64 72 69 76 65 2e 00
>397290		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397298		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3972a8		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>3972b6		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>3972be		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>3972cd		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3972d5		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3972dd		52 4f 52 00
>3972e1		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3972e9		38 39 41 42 43 44 45 46 00
>3972f2						.align 256
>397300		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308		37 38 39 30 2d 3d 08 09
>397310		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318		6f 70 5b 5d 0d 00 61 73
>397320		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328		27 60 00 5c 7a 78 63 76
>397330		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397338		00 20 00 81 82 83 84 85
>397340		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397348		11 00 00 9d 00 1d 00 00
>397350		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358		8c 00 00 00 00 00 00 00
>397360		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368		00 00 00 00 00 00 00 00
>397370		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378		00 00 00 00 00 00 00 00
>397380		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397388		26 2a 28 29 5f 2b 08 09
>397390		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397398		4f 50 7b 7d 0d 00 41 53
>3973a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3973a8		22 7e 00 7c 5a 58 43 56
>3973b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8		00 20 00 00 00 00 00 00
>3973c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8		00 00 00 00 00 00 00 00
>3973d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8		00 00 00 00 00 00 00 00
>3973e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8		00 00 00 00 00 00 00 00
>3973f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8		00 00 00 00 00 00 00 00
>397400		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408		37 38 39 30 2d 3d 08 09
>397410		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397418		0f 10 5b 5d 0d 00 01 13
>397420		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397428		27 00 00 5c 1a 18 03 16
>397430		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438		00 20 00 00 00 00 00 00
>397440		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448		00 00 00 00 00 00 00 00
>397450		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458		00 00 00 00 00 00 00 00
>397460		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468		00 00 00 00 00 00 00 00
>397470		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478		00 00 00 00 00 00 00 00
>397480		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397488		37 38 39 30 2d 3d 08 09
>397490		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397498		6f 70 5b 5d 0d 00 61 73
>3974a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3974a8		27 60 00 5c 7a 78 63 76
>3974b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3974b8		00 20 00 00 00 00 00 00
>3974c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3974c8		00 00 00 00 00 00 00 00
>3974d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8		00 00 00 00 00 00 00 00
>3974e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8		00 00 00 00 00 00 00 00
>3974f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8		00 00 00 00 00 00 00 00
>397500		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397508		37 38 39 30 2d 3d 08 09
>397510		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397518		6f 70 5b 5d 0d 00 61 73
>397520		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397528		27 60 00 5c 7a 78 63 76
>397530		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397538		00 20 00 00 00 00 00 00
>397540		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397548		00 00 00 00 00 00 00 00
>397550		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397558		00 00 00 00 00 00 00 00
>397560		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397568		00 00 00 00 00 00 00 00
>397570		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397578		00 00 00 00 00 00 00 00
>397580		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397588		00 00 00 00 00 00 00 00
>397590		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397598		00 00 00 00 00 00 00 00
>3975a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3975a8		00 00 00 00 00 00 00 00
>3975b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3975b8		00 00 00 00 00 00 00 00
>3975c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3975c8		11 00 00 9d 00 1d 00 05
>3975d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3975d8		00 00 00 00 00 00 00 00
>3975e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3975e8		00 00 00 00 00 00 00 00
>3975f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3975f8		00 00 00 00 00 00 00 00
>397600						.align 256
>397600		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397608		34 37 3a 3d 3f 41 44 46
>397610		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397618		57 58 5a 5b 5d 5e 60 61
>397620		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397628		6d 6f 70 71 72 73 75 76
>397630		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397638		80 81 82 83 84 85 86 87
>397640		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397648		8f 90 91 92 93 93 94 95
>397650		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397658		9d 9e 9e 9f a0 a1 a2 a2
>397660		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397668		a9 aa ab ab ac ad ae ae
>397670		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397678		b5 b5 b6 b7 b7 b8 b9 b9
>397680		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397688		bf c0 c0 c1 c2 c2 c3 c4
>397690		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397698		c9 ca ca cb cb cc cd cd
>3976a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3976a8		d2 d3 d4 d4 d5 d5 d6 d6
>3976b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3976b8		db dc dc dd de de df df
>3976c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3976c8		e4 e4 e5 e5 e6 e6 e7 e7
>3976d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3976d8		ec ec ed ed ee ee ef ef
>3976e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3976e8		f4 f4 f5 f5 f6 f6 f7 f7
>3976f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3976f8		fb fc fc fd fd fe fe ff
>397700						.align 256
>397700		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397708		25 27 2a 2c 2e 30 32 34
>397710		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397718		44 46 47 49 4a 4c 4d 4f
>397720		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397728		5b 5c 5d 5e 60 61 62 63
>397730		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397738		6d 6e 70 71 72 73 74 75
>397740		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397748		7e 7f 80 81 82 83 84 84
>397750		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397758		8d 8e 8e 8f 90 91 92 93
>397760		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397768		9a 9b 9c 9d 9e 9f 9f a0
>397770		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397778		a7 a8 a9 aa aa ab ac ad
>397780		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397788		b3 b4 b5 b6 b6 b7 b8 b8
>397790		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397798		bf bf c0 c1 c2 c2 c3 c4
>3977a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3977a8		ca ca cb cc cc cd ce ce
>3977b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3977b8		d4 d5 d6 d6 d7 d7 d8 d9
>3977c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3977c8		de df e0 e0 e1 e1 e2 e3
>3977d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3977d8		e8 e9 e9 ea ea eb ec ec
>3977e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3977e8		f1 f2 f3 f3 f4 f4 f5 f5
>3977f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3977f8		fb fb fc fc fd fd fe ff
>397800						.align 256
>397800		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397808		83 dd ce 39 cd c5 3b 15
>397810		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397818		87 12 31 65 89 27 88 42
>397820		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397828		94 ce 56 ec fe da 58 c9
>397830		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397838		d0 10 2c b2 4b ea 32 61
>397840		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397848		a1 e6 ca 2d b3 ce b0 79
>397850		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397858		5f e3 fb bd 15 2e be f5
>397860		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397868		8d 8f 2c 80 0a 5e 99 36
>397870		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397878		13 52 44 2f e3 ef 44 a2
>397880		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397888		be 23 02 58 0a 52 5e b4
>397890		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397898		d5 cf 3e df c4 9e da bb
>3978a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3978a8		77 7d b1 3b 4a 68 35 6e
>3978b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3978b8		b5 8f 44 63 55 6f e1 50
>3978c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3978c8		57 74 b9 bd 05 14 50 eb
>3978d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3978d8		44 bc ec db 22 58 fc be
>3978e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3978e8		24 aa 82 11 5c 9f 43 4d
>3978f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3978f8		3e 3d 66 7e 0a 1c 6b 74
>397900						.align 16
>397900		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397908		01 01 01 00 00 00 00 00
>397910		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397918		ff ff ff 01 00 00 00 00
>397920		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397928		01 55 ff ff 01 00 00 00
>397930		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397938		ff ff ff ff 01 00 00 00
>397940		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397948		ff ff 01 ff ff 01 00 00
>397950		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397958		01 ff ff 01 ff 01 00 00
>397960		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397968		ff 01 ff ff ff 01 00 00
>397970		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397978		ff ff ff ff ff 01 01 00
>397980		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397988		ff ff ff ff 01 ff ff 01
>397990		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397998		ff ff ff ff ff ff ff 01
>3979a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3979a8		55 55 01 ff ff 55 01 00
>3979b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3979b8		01 01 55 ff 55 01 00 00
>3979c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3979c8		01 55 55 55 01 00 00 00
>3979d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3979d8		01 55 55 01 00 00 00 00
>3979e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3979e8		00 01 01 00 00 00 00 00
>3979f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3979f8		00 00 00 00 00 00 00 00
>3a0000		5c c2 7d 3a 5c d1 63 3a		.binary "binaries/basic816.bin"
>3a0008		5c f5 24 3a 5c 5b 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018		5c 86 02 3a 5c ff 00 3a 5c 1a 01 3a 5c 21 01 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 af
>3a00e8		00 00 af 89 3c f0 08 09 03 8f 00 00 af 80 06 09
>3a00f8		01 8f 00 00 af 28 60 08 e2 20 c9 00 f0 08 af 10
>3a0108		00 af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af
>3a0118		28 60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20
>3a0128		c2 10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f
>3a0138		00 c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00
>3a0148		5b 68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a
>3a0158		fa 68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0168		28 c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2
>3a0178		20 29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c
>3a0188		00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08
>3a0198		a5 0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0
>3a01a8		00 00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0
>3a01b8		f4 ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00
>3a01c8		ca 10 ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00
>3a01d8		a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af
>3a01e8		a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6 a9
>3a01f8		80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f
>3a0208		00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af 60
>3a0218		08 e2 20 48 48 a9 00 22 3c 10 00 68 22 18 10 00
>3a0228		af 89 0f 00 29 01 d0 f8 68 28 60 08 e2 20 48 48
>3a0238		a9 01 22 3c 10 00 68 22 18 10 00 af 89 0f 00 29
>3a0248		01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20 18
>3a0258		00 c2 20 68 28 60 08 22 78 10 00 28 60 08 0b 08
>3a0268		c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b6 1a 85 b6
>3a0278		cf 13 00 00 90 05 20 14 00 64 b6 2b 28 60 da 5a
>3a0288		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>3a0298		8f b5 08 00 af b4 08 00 29 20 f0 07 af b5 08 00
>3a02a8		20 28 00 af b4 08 00 29 80 f0 07 af b5 08 00 20
>3a02b8		18 02 af b4 08 00 29 40 f0 14 af b5 08 00 20 33
>3a02c8		02 af b5 08 00 c9 0d d0 05 a9 0a 20 33 02 28 2b
>3a02d8		7a fa 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8 80
>3a02e8		f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a
>3a02f8		20 05 03 68 29 ff 00 20 05 03 68 28 60 08 c2 20
>3a0308		48 e2 20 48 4a 4a 4a 4a 20 1c 03 68 20 1c 03 c2
>3a0318		20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0 3a
>3a0328		20 18 00 fa 28 60 08 c2 30 48 da 5a 8b 0b c2 30
>3a0338		a3 0b 18 69 03 00 aa e2 20 a9 3a 48 ab bd 00 00
>3a0348		f0 06 20 18 02 e8 80 f5 c2 30 2b ab 7a fa 68 28
>3a0358		60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b b0 04
>3a0368		c9 61 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0
>3a0378		04 c9 30 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a
>3a0388		b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b c9 47
>3a0398		b0 04 c9 41 b0 03 28 18 60 28 38 60 08 e2 20 c9
>3a03a8		3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f c9
>3a03b8		47 b0 04 c9 41 b0 09 28 60 38 e9 30 80 f9 29 df
>3a03c8		38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9 61 90 02
>3a03d8		29 df 28 60 08 e2 20 c2 10 bd 00 00 f0 09 20 cd
>3a03e8		03 9d 00 00 e8 80 f2 28 60 08 0b 08 c2 20 48 a9
>3a03f8		00 08 5b 68 28 c2 20 48 06 23 26 25 a5 23 85 0c
>3a0408		a5 25 85 0e 06 0c 26 0e 06 0c 26 0e 18 a5 23 65
>3a0418		0c 85 23 a5 25 65 0e 85 25 68 2b 28 60 08 0b 08
>3a0428		c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01
>3a0438		00 a9 0a 00 8f 18 01 00 af 1c 01 00 85 23 64 25
>3a0448		af 1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d
>3a0458		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a0468		20 a5 23 8f 1a 01 00 a9 64 00 8f 18 01 00 af 1c
>3a0478		01 00 85 23 64 25 af 1e 01 00 85 29 64 2b e2 20
>3a0488		a9 00 85 27 85 2d 2b 28 60 08 c2 20 a5 23 d0 08
>3a0498		a5 25 d0 04 28 e2 02 60 28 c2 02 60 08 c2 30 a9
>3a04a8		ff ff 85 23 85 25 e2 20 a9 00 85 27 28 60 08 c2
>3a04b8		30 a9 00 00 85 23 85 25 e2 20 a9 00 85 27 28 60
>3a04c8		08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 05 20 c6 57
>3a04d8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a04e8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a04f8		08 08 e2 20 a5 2d c9 00 f0 37 c9 01 d0 35 c2 20
>3a0508		a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25
>3a0518		e2 20 a9 01 85 27 20 c6 57 c2 20 a5 23 85 29 a5
>3a0528		25 85 2b e2 20 a9 00 85 2d c2 20 68 85 23 68 85
>3a0538		25 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0548		04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a0558		d4 08 08 e2 20 a5 27 c9 02 d0 02 28 60 08 c2 20
>3a0568		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0578		20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 e2 20 a5
>3a0588		27 c9 00 f0 07 c9 01 d0 0b 20 c6 57 c2 20 a5 25
>3a0598		d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a05a8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a05b8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a05c8		09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a05d8		d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 11 20
>3a05e8		c6 57 a5 26 d0 29 a5 25 d0 25 a5 24 d0 21 28 60
>3a05f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a0608		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08
>3a0618		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a0628		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 e2
>3a0638		20 a5 27 c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9
>3a0648		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0658		ff 00 20 f8 1b e2 20 dc d4 08 20 38 57 28 60 08
>3a0668		e2 20 a5 2d c9 01 f0 26 c9 00 f0 1f 08 c2 20 48
>3a0678		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a0688		29 ff 00 20 f8 1b e2 20 dc d4 08 20 98 06 28 60
>3a0698		c2 20 a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5 2b
>3a06a8		85 25 e2 20 a9 00 85 27 20 38 57 c2 20 a5 23 85
>3a06b8		29 a5 25 85 2b e2 20 a9 01 85 2d c2 20 68 85 23
>3a06c8		68 85 25 60 08 e2 20 a5 27 c9 00 f0 23 c9 01 f0
>3a06d8		2e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a06e8		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a06f8		a5 2d c9 00 f0 16 c9 01 d0 d7 20 38 57 80 0d a5
>3a0708		2d c9 01 f0 07 c9 00 d0 c8 20 98 06 e2 20 a5 27
>3a0718		28 60 08 e2 20 a5 27 c9 02 d0 25 a5 2d c9 02 f0
>3a0728		24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0738		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a0748		20 cc 06 a5 27 28 60 08 0b 08 c2 20 48 a9 00 08
>3a0758		5b 68 28 c2 30 64 23 64 25 e2 20 64 27 a7 00 c9
>3a0768		26 f0 44 e2 20 a7 00 20 72 03 90 76 20 f1 03 38
>3a0778		e9 30 c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00
>3a0788		00 85 25 20 9d 1e 80 db 08 c2 20 48 a9 00 08 5b
>3a0798		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a07a8		f8 1b e2 20 dc d4 08 20 9d 1e a7 00 c9 48 f0 04
>3a07b8		c9 68 d0 d4 20 9d 1e e2 20 a7 00 20 83 03 90 22
>3a07c8		20 a4 03 c2 20 06 23 26 25 06 23 26 25 06 23 26
>3a07d8		25 06 23 26 25 29 ff 00 18 65 23 85 23 20 9d 1e
>3a07e8		80 d5 2b 28 60 08 c2 30 38 a5 04 e5 1a a8 e2 20
>3a07f8		b7 1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0
>3a0808		ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08
>3a0818		5b 68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20
>3a0828		be 1e a7 00 20 72 03 90 0c 20 4f 07 c2 20 a5 23
>3a0838		85 d7 20 be 1e c2 20 a5 00 85 1a e2 20 a5 02 85
>3a0848		1c 20 5d 08 e2 20 20 ce 08 c9 00 f0 05 20 6c 0a
>3a0858		80 f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02
>3a0868		a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0
>3a0878		53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52
>3a0888		f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72
>3a0898		d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8
>3a08a8		b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 9d 1e
>3a08b8		80 b3 a7 00 c9 3a d0 03 20 9d 1e a9 03 85 1e a9
>3a08c8		91 20 6c 0a 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a08d8		68 28 e2 20 a9 7f 85 1e c2 10 20 21 0a a5 1e d0
>3a08e8		03 4c 71 09 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02
>3a08f8		c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 91
>3a0908		f0 d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20
>3a0918		93 09 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a
>3a0928		d0 08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20 69
>3a0938		4c b0 09 e2 20 20 a3 09 c9 00 d0 11 c2 20 a5 00
>3a0948		85 04 e2 20 a5 02 85 06 20 9d 1e 80 a9 c9 81 d0
>3a0958		18 20 ed 07 c9 00 f0 14 89 80 10 0b 20 0d 0b c9
>3a0968		30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48
>3a0978		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a0988		29 ff 00 20 f8 1b e2 20 dc d4 08 08 e2 20 20 9d
>3a0998		1e a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08
>3a09a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a7 04 20 69 4c
>3a09b8		a9 00 2a 85 28 c2 30 a9 61 0b 85 08 e2 20 a9 3a
>3a09c8		85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e
>3a09d8		d0 32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a 85
>3a09e8		0e a5 28 f0 07 a7 0c 20 69 4c b0 18 e2 10 a0 00
>3a09f8		b7 00 20 cd 03 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b
>3a0a08		28 7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20
>3a0a18		a5 0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48
>3a0a28		a9 00 08 5b 68 28 c2 30 a9 61 0b 85 08 a9 3a 00
>3a0a38		85 0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0
>3a0a48		06 c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85
>3a0a58		08 a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e
>3a0a68		ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0a78		e2 20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02
>3a0a88		69 00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08
>3a0a98		f0 13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>3a0aa8		00 85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a
>3a0ab8		0a 18 69 61 0b aa 28 60 08 8b 0b 08 c2 20 48 a9
>3a0ac8		00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2
>3a0ad8		20 c2 10 20 b0 0a bd 00 00 c2 20 29 0f 00 2b ab
>3a0ae8		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0af8		e2 20 48 a9 3a 48 ab 68 28 c2 30 20 b0 0a bd 04
>3a0b08		00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a0b18		68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a0b28		20 b0 0a bd 00 00 c2 20 29 f0 00 2b ab 28 60 08
>3a0b38		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0b48		a9 3a 48 ab 68 28 e2 20 c2 10 20 b0 0a bd 06 00
>3a0b58		c2 20 29 ff 00 2b ab 28 60 03 01 10 d0 5c 25 02
>3a0b68		00 03 01 12 d0 9c 25 02 00 02 01 14 d0 d3 25 02
>3a0b78		00 02 01 16 d0 0a 26 02 00 02 03 18 d0 14 26 02
>3a0b88		00 00 01 1c d0 00 00 02 00 04 02 1e d0 ab 27 02
>3a0b98		00 04 02 21 d0 6b 27 02 00 04 02 24 d0 2b 27 02
>3a0ba8		00 04 01 27 d0 6b 26 02 00 04 01 29 d0 eb 26 02
>3a0bb8		00 04 01 2b d0 ab 26 02 00 05 03 2d d0 55 26 01
>3a0bc8		00 06 03 31 d0 27 26 02 00 07 02 35 d0 3e 26 02
>3a0bd8		00 ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00
>3a0be8		00 20 03 3c d0 44 3e 00 00 20 05 40 d0 49 42 00
>3a0bf8		00 20 03 46 d0 94 41 00 00 20 04 4a d0 34 41 00
>3a0c08		00 20 03 4f d0 2b 41 00 00 20 02 53 d0 c3 40 00
>3a0c18		00 50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00
>3a0c28		00 20 05 60 d0 06 40 00 00 20 06 66 d0 7f 40 00
>3a0c38		00 20 03 6d d0 5b 3e 00 00 50 02 71 d0 00 00 00
>3a0c48		00 50 04 74 d0 00 00 00 00 20 04 79 d0 4f 3f 00
>3a0c58		00 20 02 7e d0 55 3e 00 00 20 04 81 d0 58 3e 00
>3a0c68		00 50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00
>3a0c78		00 20 04 92 d0 52 3e 00 00 20 03 97 d0 8a 41 00
>3a0c88		00 20 04 9b d0 25 3e 00 00 20 04 a0 d0 b5 3d 00
>3a0c98		00 20 05 a5 d0 4b 3d 00 00 20 05 ab d0 d8 3c 00
>3a0ca8		00 20 03 b1 d0 d4 3c 00 00 20 04 b5 d0 b5 3b 00
>3a0cb8		00 20 04 ba d0 c7 3c 00 00 20 07 bf d0 cb 3c 00
>3a0cc8		00 20 03 c7 d0 08 3b 00 00 20 04 cb d0 71 3a 00
>3a0cd8		00 00 01 d0 d0 eb 27 01 00 30 03 d2 d0 e9 47 00
>3a0ce8		00 30 04 d6 d0 39 48 00 00 30 05 db d0 ca 48 00
>3a0cf8		00 30 05 e1 d0 7c 48 00 00 30 04 e7 d0 09 49 00
>3a0d08		00 30 03 ec d0 5e 49 00 00 30 03 f0 d0 a3 49 00
>3a0d18		00 30 03 f4 d0 2c 4a 00 00 30 03 f8 d0 b5 4a 00
>3a0d28		00 30 03 fc d0 17 4b 00 00 30 04 00 d1 5b 47 00
>3a0d38		00 30 03 05 d1 fa 46 00 00 30 04 09 d1 ac 46 00
>3a0d48		00 30 03 0e d1 56 46 00 00 30 05 12 d1 8d 45 00
>3a0d58		00 30 06 18 d1 ac 44 00 00 30 04 1f d1 f7 43 00
>3a0d68		00 10 03 24 d1 a5 4b 00 00 10 03 28 d1 70 4b 00
>3a0d78		00 10 04 2c d1 aa 5f 00 00 10 04 31 d1 bc 4b 00
>3a0d88		00 10 03 36 d1 d1 5c 00 00 20 05 3a d1 7c 5e 00
>3a0d98		00 10 04 40 d1 57 5f 00 00 20 05 45 d1 63 60 00
>3a0da8		00 20 03 4b d1 82 61 00 00 10 04 4f d1 ef 60 00
>3a0db8		00 20 06 54 d1 f8 61 00 00 20 04 5b d1 1c 63 00
>3a0dc8		00 10 07 60 d1 6d 4b 00 00 20 03 68 d1 00 3a 00
>3a0dd8		00 20 05 6c d1 35 39 00 00 20 09 72 d1 aa 29 00
>3a0de8		00 20 09 7c d1 37 29 00 00 20 0a 86 d1 67 29 00
>3a0df8		00 20 07 91 d1 a4 28 00 00 30 08 99 d1 28 43 00
>3a0e08		00 20 07 a2 d1 39 28 00 00 30 08 aa d1 92 43 00
>3a0e18		00 20 08 b3 d1 ee 2a 00 00 20 08 bc d1 23 2a 00
>3a0e28		00 20 06 c5 d1 28 2c 00 00 20 09 cc d1 30 2d 00
>3a0e38		00 20 04 d6 d1 40 2e 00 00 20 04 db d1 b1 2e 00
>3a0e48		00 20 04 e0 d1 4a 2f 00 00 20 06 e5 d1 86 30 00
>3a0e58		00 20 08 ec d1 22 31 00 00 20 0a f5 d1 6e 31 00
>3a0e68		00 20 07 00 d2 a3 32 00 00 20 07 08 d2 21 33 00
>3a0e78		00 20 08 10 d2 93 33 00 00 20 06 19 d2 d0 33 00
>3a0e88		00 20 07 20 d2 00 37 00 00 50 06 28 d2 00 00 00
>3a0e98		00 50 04 2f d2 00 00 00 00 20 06 34 d2 15 39 00
>3a0ea8		00 00 00 00 00 00 00 00 00 08 0b 08 c2 20 48 a9
>3a0eb8		00 08 5b 68 28 c2 30 a9 ff ff 85 ba e2 20 a9 37
>3a0ec8		85 bc c2 20 64 b7 64 bd e2 20 64 b9 64 bf 2b 28
>3a0ed8		60 5a 08 e2 20 85 ea c2 10 86 8f c2 20 a5 0e 48
>3a0ee8		a5 0c 48 a5 12 48 a5 10 48 20 89 0f b0 03 20 0d
>3a0ef8		0f 20 15 11 c2 20 68 85 10 68 85 12 68 85 0c 68
>3a0f08		85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0f18		28 e2 20 a6 8f ca 86 0c e8 c2 30 38 a5 ba e5 0c
>3a0f28		85 c0 e2 20 a5 bc e9 00 85 c2 20 15 11 e2 20 a5
>3a0f38		ea a0 00 00 97 c3 a9 00 a0 01 00 97 c3 a0 02 00
>3a0f48		97 c3 c2 20 a9 00 00 97 c3 c2 20 18 a5 ba 69 01
>3a0f58		00 a0 05 00 97 c3 e2 20 c8 c8 a5 bc 69 00 97 c3
>3a0f68		c2 20 a5 c0 85 b7 e2 20 a5 c2 85 b9 c2 20 38 a5
>3a0f78		c3 e9 01 00 85 ba e2 20 a5 c5 e9 00 85 bc 2b 28
>3a0f88		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a0f98		20 a5 bd 85 c9 e2 20 a5 bf 85 cb a5 c9 d0 17 e2
>3a0fa8		20 a5 cb d0 11 c2 20 a9 00 00 85 cf e2 20 a9 00
>3a0fb8		85 d1 2b 28 18 60 c2 20 a0 05 00 b7 c9 85 cc e2
>3a0fc8		20 c8 c8 b7 c9 85 ce c2 20 18 a5 c9 65 8f 85 0c
>3a0fd8		e2 20 a5 cb 69 00 85 0e c2 20 18 a5 0c 69 08 00
>3a0fe8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5 cc
>3a0ff8		d0 28 e2 20 a5 0e c5 ce d0 20 c2 20 a5 cf d0 5d
>3a1008		e2 20 a5 d1 d0 57 c2 20 a0 02 00 b7 c9 85 bd e2
>3a1018		20 c8 c8 b7 c9 85 bf 4c c6 10 c2 20 a5 0c 69 08
>3a1028		00 85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c6 c5
>3a1038		10 b0 3e 90 08 c2 20 a5 c6 c5 10 b0 34 c2 20 a5
>3a1048		c9 85 cf e2 20 a5 cb 85 d1 c2 20 a0 02 00 b7 cf
>3a1058		85 c9 e2 20 c8 c8 b7 cf 85 cb 4c a3 0f c2 20 a0
>3a1068		02 00 b7 c9 97 cf e2 20 c8 c8 b7 c9 97 cf 4c c6
>3a1078		10 c2 20 a0 05 00 b7 c9 97 0c e2 20 c8 c8 b7 c9
>3a1088		97 0c c2 20 a0 02 00 b7 c9 97 0c e2 20 c8 c8 b7
>3a1098		c9 97 0c c2 20 a5 cf d0 14 e2 20 a5 cf d0 0e c2
>3a10a8		20 a5 0c 85 bd e2 20 a5 0e 85 bf 80 11 c2 20 a0
>3a10b8		02 00 a5 0c 97 cf e2 20 c8 c8 a5 0e 97 cf c2 20
>3a10c8		a5 c9 85 c3 e2 20 a5 cb 85 c5 c2 20 a5 c3 85 b7
>3a10d8		e2 20 a5 c5 85 b9 c2 20 a0 05 00 a5 0c 97 c3 e2
>3a10e8		20 c8 c8 a5 0e 97 c3 c2 20 a0 02 00 a9 00 00 97
>3a10f8		c3 e2 20 c8 c8 97 c3 e2 20 a5 ea e2 20 a0 00 00
>3a1108		97 c3 a0 01 00 a9 00 97 c3 2b 28 38 60 08 c2 20
>3a1118		38 a5 c0 e9 08 00 85 c3 e2 20 a5 c2 e9 00 85 c5
>3a1128		28 60 08 e2 20 a5 c5 f0 04 c9 38 b0 12 c2 20 a5
>3a1138		c3 f0 0c e2 20 a0 01 00 b7 c3 1a 97 c3 28 60 00
>3a1148		ea 08 e2 20 a5 c5 f0 04 c9 38 b0 17 c2 20 a5 c3
>3a1158		f0 11 e2 20 a0 01 00 b7 c3 3a 97 c3 d0 03 20 6d
>3a1168		11 28 60 00 ea 08 c2 20 a5 bd d0 21 e2 20 a5 bf
>3a1178		d0 1b a5 c5 85 bf c2 20 a5 c3 85 bd a9 00 00 a0
>3a1188		02 00 97 c3 c8 c8 e2 20 97 c3 4c 54 12 e2 20 a5
>3a1198		bf c5 c5 90 28 c2 20 a5 bd c5 c3 90 20 c2 20 a5
>3a11a8		bd a0 02 00 97 c3 e2 20 c8 c8 a5 bf 97 c3 c2 20
>3a11b8		a5 c3 85 bd e2 20 a5 c5 85 bf 4c 54 12 c2 20 a5
>3a11c8		bd 85 08 e2 20 a5 bf 85 0a e2 20 a0 04 00 b7 08
>3a11d8		c5 c8 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c6 90
>3a11e8		25 c2 20 a0 02 00 b7 08 97 c3 e2 20 c8 c8 b7 08
>3a11f8		97 c3 c2 20 a5 c3 a0 02 00 97 08 e2 20 a5 c5 c8
>3a1208		c8 97 08 4c 54 12 c2 20 a0 02 00 b7 08 d0 08 e2
>3a1218		20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c
>3a1228		e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99
>3a1238		c2 20 a5 c3 a0 02 00 97 08 e2 20 c8 c8 a5 c5 97
>3a1248		08 a9 00 97 c3 c2 20 a0 02 00 97 c3 20 59 12 28
>3a1258		60 08 c2 20 a5 bd 85 c3 e2 20 a5 bf 85 c5 c2 20
>3a1268		a5 c3 d0 09 e2 20 a5 c5 d0 03 4c fc 12 c2 20 a0
>3a1278		02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20
>3a1288		a0 05 00 b7 c3 85 10 e2 20 c8 c8 b7 c3 85 12 c2
>3a1298		20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2
>3a12a8		20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e
>3a12b8		c2 20 a5 0c 85 c3 e2 20 a5 0e 85 c5 80 a0 c2 20
>3a12c8		a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2
>3a12d8		20 a0 02 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3
>3a12e8		c2 20 a0 05 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97
>3a12f8		c3 4c 75 12 28 60 08 c2 20 64 16 64 18 28 60 08
>3a1308		c2 30 a5 16 d0 16 a5 18 d0 12 e2 20 64 16 a5 e2
>3a1318		1a 1a 85 17 a5 e3 85 18 64 19 80 07 c2 20 a5 17
>3a1328		1a 85 17 c2 20 a5 bb 3a c5 17 f0 02 b0 1f 08 c2
>3a1338		20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f d3 08 00
>3a1348		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 28 60 c9
>3a1358		00 d0 05 c0 01 00 f0 05 09 30 97 16 c8 60 08 c2
>3a1368		30 64 0c a5 25 10 1a 18 a5 23 49 ff ff 69 01 00
>3a1378		85 23 a5 25 49 ff ff 69 00 00 85 25 a9 ff ff 85
>3a1388		0c 64 10 64 12 64 14 a2 1f 00 f8 06 23 26 25 a5
>3a1398		10 65 10 85 10 a5 12 65 12 85 12 a5 14 65 14 85
>3a13a8		14 ca 10 e7 d8 e2 20 20 07 13 a0 00 00 a5 0c f0
>3a13b8		04 a9 2d 80 02 a9 20 97 16 c8 a2 05 00 b5 10 29
>3a13c8		f0 4a 4a 4a 4a 20 57 13 b5 10 29 0f 20 57 13 ca
>3a13d8		10 eb c0 01 00 d0 0c a9 20 87 16 a0 01 00 a9 30
>3a13e8		97 16 c8 a9 00 97 16 28 60 00 ea 08 e2 20 c2 10
>3a13f8		a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60 08 0b
>3a1408		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00
>3a1418		00 b7 23 d0 04 b7 29 f0 25 b7 23 d7 29 90 12 d0
>3a1428		03 c8 80 ed c2 20 a9 01 00 85 23 e2 20 64 25 80
>3a1438		15 c2 20 a9 ff ff 85 23 e2 20 85 25 80 08 c2 20
>3a1448		64 23 e2 20 64 25 e2 20 a9 00 85 27 2b 28 60 08
>3a1458		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>3a1468		08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23
>3a1478		20 f3 13 84 0c 08 c2 20 48 e2 20 a5 2b 48 ab c2
>3a1488		20 68 28 a6 29 20 f3 13 c2 20 98 38 65 0c aa e2
>3a1498		20 a9 02 20 d9 0e c2 20 a5 b7 85 08 e2 20 a5 b9
>3a14a8		85 0a a0 00 00 08 c2 20 48 e2 20 a5 25 48 ab c2
>3a14b8		20 68 28 a6 23 bd 00 00 f0 06 97 08 e8 c8 80 f5
>3a14c8		e2 20 08 c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28
>3a14d8		a6 29 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20 a5
>3a14e8		08 85 23 e2 20 a5 0a 85 25 a9 02 85 27 ab 2b 28
>3a14f8		60 da 5a 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1508		c2 20 a5 0a 48 a5 08 48 c2 30 08 c2 20 48 e2 20
>3a1518		a5 25 48 ab c2 20 68 28 a6 23 20 f3 13 98 aa e8
>3a1528		e2 20 a9 02 20 d9 0e c2 20 a5 c0 85 08 a5 c2 85
>3a1538		0a a0 00 00 e2 20 b7 23 97 08 f0 03 c8 80 f7 c2
>3a1548		20 a5 08 85 23 a5 0a 85 25 c2 20 68 85 08 68 85
>3a1558		0a ab 2b 28 7a fa 60 08 e2 20 c2 10 a0 00 00 b7
>3a1568		23 f0 05 c8 80 f9 84 92 c2 30 c4 29 90 13 f0 11
>3a1578		a5 8f 30 0d f0 0b c4 8f b0 12 a5 29 d0 0e 4c dd
>3a1588		15 20 07 13 e2 20 a9 00 87 16 80 39 20 07 13 c2
>3a1598		30 18 a5 23 65 29 85 23 a5 25 69 00 00 85 25 a0
>3a15a8		00 00 e2 20 a7 23 97 16 f0 1b c2 20 18 a5 23 69
>3a15b8		01 00 85 23 a5 25 69 00 00 85 25 c8 c4 8f d0 e2
>3a15c8		a9 00 00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2
>3a15d8		20 a9 02 85 27 28 60 08 c2 30 20 06 14 a5 23 c9
>3a15e8		ff ff d0 05 20 a4 04 80 03 20 b6 04 28 60 08 c2
>3a15f8		30 20 06 14 a5 23 c9 01 00 d0 05 20 a4 04 80 03
>3a1608		20 b6 04 28 60 08 c2 30 20 06 14 a5 23 c9 00 00
>3a1618		d0 05 20 a4 04 80 03 20 b6 04 28 60 08 c2 30 20
>3a1628		06 14 a5 23 c9 00 00 f0 05 20 a4 04 80 03 20 b6
>3a1638		04 28 60 08 c2 30 20 06 14 a5 23 c9 ff ff f0 05
>3a1648		20 a4 04 80 03 20 b6 04 28 60 08 c2 30 20 06 14
>3a1658		a5 23 c9 01 00 f0 05 20 a4 04 80 03 20 b6 04 28
>3a1668		60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1678		30 a9 00 00 85 00 85 1a a9 36 00 85 02 85 1c ad
>3a1688		8a 0f 30 20 a0 02 00 b7 1a f0 0f c5 55 90 10 c5
>3a1698		59 f0 02 b0 05 20 cb 16 80 e5 28 2b 7a 68 60 20
>3a16a8		7a 1f 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a16b8		a9 01 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a16c8		dc d4 08 08 c2 30 85 23 64 25 20 66 13 a5 16 1a
>3a16d8		85 23 a5 18 85 25 20 c5 42 18 a5 1a 69 04 00 85
>3a16e8		00 a5 1c 69 00 00 85 02 e2 20 a9 20 20 18 00 c2
>3a16f8		20 20 0a 17 90 fb e2 20 a9 0d 20 18 00 20 7a 1f
>3a1708		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1718		e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0
>3a1728		3a 30 05 20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a
>3a1738		18 69 61 0b 85 08 a9 3a 00 69 00 00 85 0a 08 e2
>3a1748		20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08 aa 20 db
>3a1758		02 c2 20 20 9d 1e ab 2b 28 18 60 ab 2b 28 38 60
>3a1768		08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21 a9 ff ff
>3a1778		85 23 85 25 85 29 85 2b e2 20 85 27 85 2d 28 60
>3a1788		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1798		48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd 00 00 99
>3a17a8		00 00 bd 02 00 99 02 00 e2 20 bd 04 00 99 04 00
>3a17b8		c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28 60 08 0b
>3a17c8		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a17d8		00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05 00 85 1f
>3a17e8		a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9
>3a17f8		04 00 9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b 8b
>3a1808		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a1818		48 ab 68 28 e2 20 c2 10 5a a4 21 99 00 00 88 84
>3a1828		21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1838		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a1848		10 5a a4 21 c8 84 21 b9 00 00 c2 20 29 ff 00 7a
>3a1858		ab 2b 28 60 08 e2 20 a9 01 20 05 18 28 60 5a 08
>3a1868		8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21 b9
>3a1878		01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a 60 08 c2
>3a1888		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a1898		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 48 08 0b
>3a18a8		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a18b8		00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0 11 20 c0
>3a18c8		0a 85 0c b9 01 00 20 c0 0a c5 0c f0 02 90 08 c2
>3a18d8		20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68 38 60 4c
>3a18e8		4f 07 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 a6
>3a18f8		1a 20 84 05 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a1908		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 be 1e e2 20
>3a1918		a7 00 c9 90 f0 09 c9 2c d0 0a 20 9d 1e 80 cf 20
>3a1928		9d 1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1938		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a1948		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1958		0a 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a1968		d4 08 08 20 3c 4f 90 23 e2 20 a5 ea 29 80 d0 06
>3a1978		20 3d 4d 4c 91 19 e2 20 a9 8f 20 aa 1f 20 5c 18
>3a1988		20 ea 18 20 47 5c 20 66 18 28 60 08 c2 20 48 a9
>3a1998		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a19a8		ff 00 20 f8 1b e2 20 dc d4 08 08 0b 08 c2 20 48
>3a19b8		a9 00 08 5b 68 28 e2 20 c2 10 20 9d 1e a0 00 00
>3a19c8		b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9
>3a19d8		02 a6 0c e8 20 07 13 a0 00 00 c4 0c f0 29 a7 00
>3a19e8		97 16 c8 20 9d 1e 80 f2 08 c2 20 48 a9 00 08 5b
>3a19f8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a1a08		f8 1b e2 20 dc d4 08 a9 00 97 16 c2 20 a5 16 85
>3a1a18		23 a5 18 85 25 a9 02 00 85 27 20 9d 1e 2b 28 60
>3a1a28		08 e2 20 a7 00 c2 20 29 ff 00 20 ea 0a 85 2f 20
>3a1a38		5c 18 08 e2 20 48 a9 00 48 ab 68 28 20 4c 1a 20
>3a1a48		66 18 28 60 20 9d 1e 6c 2f 08 48 08 0b 8b 08 c2
>3a1a58		20 48 a9 00 08 5b 68 28 c2 30 20 2e 18 89 80 00
>3a1a68		f0 37 48 20 ea 0a 85 2f 68 20 37 0b c9 01 00 f0
>3a1a78		08 c2 30 a2 29 08 20 c6 17 c2 30 a2 23 08 20 c6
>3a1a88		17 08 e2 20 48 a9 00 48 ab 68 28 20 a3 1a a2 23
>3a1a98		08 20 88 17 ab 2b 28 68 60 00 ea 6c 2f 08 08 08
>3a1aa8		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1ab8		ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c 69 1b 30
>3a1ac8		33 c9 20 d0 03 4c 63 1b c9 3a b0 04 c9 30 b0 56
>3a1ad8		c9 26 f0 52 c9 22 d0 03 4c 7c 1b c9 5b b0 07 c9
>3a1ae8		41 90 03 4c 88 1b c9 7b b0 07 c9 61 90 03 4c 88
>3a1af8		1b 4c 69 1b c9 8f f0 40 c9 90 f0 41 20 0d 0b c9
>3a1b08		30 d0 0c 20 28 1a a2 23 08 20 88 17 4c be 1a c9
>3a1b18		00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20 a5 18 b0
>3a1b28		12 20 05 18 80 35 c2 20 20 92 55 a2 23 08 20 88
>3a1b38		17 80 83 20 52 1a 80 dd 20 05 18 80 1e e2 20 a4
>3a1b48		21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01 f0 3d c9
>3a1b58		8f f0 05 20 52 1a 80 ee 20 2e 18 20 9d 1e 4c be
>3a1b68		1a a6 21 e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20
>3a1b78		52 1a 80 ed 20 b2 19 a2 23 08 20 88 17 4c be 1a
>3a1b88		20 6a 19 a2 23 08 20 88 17 4c be 1a a2 23 08 20
>3a1b98		c6 17 fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab
>3a1ba8		68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd
>3a1bb8		5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1bc8		5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28 60 08 c2
>3a1bd8		30 29 ff 00 20 bf 1b 28 60 08 0b 08 c2 20 48 a9
>3a1be8		00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33 2b 28 60
>3a1bf8		8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1c08		48 a9 00 48 ab 68 28 c2 20 85 23 a9 00 00 85 25
>3a1c18		e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9 52
>3a1c28		1c 85 e7 20 9f 4e c2 20 a5 d7 85 23 a5 d9 85 25
>3a1c38		e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9 56
>3a1c48		1c 85 e7 20 9f 4e 28 2b ab 60 45 52 52 00 45 52
>3a1c58		4c 00 e2 20 c2 10 20 4e 02 af d3 08 00 0a c2 20
>3a1c68		29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be ac
>3a1c78		1c 20 db 02 c2 20 a5 d7 f0 27 a2 da 1c 20 db 02
>3a1c88		08 e2 20 48 a9 00 48 ab 68 28 c2 20 af d7 08 00
>3a1c98		8f 23 08 00 a9 00 00 8f 25 08 00 20 e5 42 20 4e
>3a1ca8		02 4c 3d 25 de 1c e1 1c e7 1c f4 1c 02 1d 10 1d
>3a1cb8		23 1d 39 1d 49 1d 58 1d 65 1d 76 1d 85 1d 92 1d
>3a1cc8		a0 1d af 1d c0 1d d9 1d ed 1d 01 1e 17 1e 2b 1e
>3a1cd8		46 1e 20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53
>3a1ce8		79 6e 74 61 78 20 65 72 72 6f 72 00 4f 75 74 20
>3a1cf8		6f 66 20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d
>3a1d08		69 73 6d 61 74 63 68 00 56 61 72 69 61 62 6c 65
>3a1d18		20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20
>3a1d28		6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>3a1d38		00 53 74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77
>3a1d48		00 53 74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00
>3a1d58		4f 75 74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c
>3a1d68		65 67 61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69
>3a1d78		6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74
>3a1d88		20 61 20 6e 75 6d 62 65 72 00 4d 61 74 68 20 6f
>3a1d98		76 65 72 66 6c 6f 77 00 4d 61 74 68 20 75 6e 64
>3a1da8		65 72 66 6c 6f 77 00 44 69 76 69 73 69 6f 6e 20
>3a1db8		62 79 20 7a 65 72 6f 00 55 6e 61 62 6c 65 20 74
>3a1dc8		6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>3a1dd8		00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20
>3a1de8		66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 73
>3a1df8		61 76 65 20 66 69 6c 65 00 55 6e 61 62 6c 65 20
>3a1e08		74 6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00 43
>3a1e18		6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66 69
>3a1e28		6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 75 70 64
>3a1e38		61 74 65 20 64 69 72 65 63 74 6f 72 79 00 43 6f
>3a1e48		75 6c 64 20 6e 6f 74 20 63 6f 70 79 20 74 68 65
>3a1e58		20 66 69 6c 65 00 08 0b 08 c2 20 48 a9 00 08 5b
>3a1e68		68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20
>3a1e78		48 a9 00 08 5b 68 28 08 c2 20 a9 5a 1c 8f d4 08
>3a1e88		00 e2 20 a9 3a 8f d6 08 00 28 20 8a 41 20 cb 3c
>3a1e98		64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1ea8		28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69
>3a1eb8		00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1ec8		68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02
>3a1ed8		80 05 20 9d 1e 80 ed 2b 28 60 08 e2 20 a7 00 f0
>3a1ee8		09 c9 3a f0 05 20 9d 1e 80 f3 28 60 08 e2 20 64
>3a1ef8		36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0
>3a1f08		1a c9 9e f0 1a c9 a0 f0 16 20 9d 1e 80 e3 20 7a
>3a1f18		1f c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6
>3a1f28		36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20
>3a1f38		9d 1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1f48		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a1f58		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1f68		02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a1f78		d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65
>3a1f88		0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85
>3a1f98		d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>3a1fa8		28 60 08 e2 20 48 20 be 1e 68 e2 20 c7 00 d0 08
>3a1fb8		20 9d 1e 20 be 1e 28 60 08 c2 20 48 a9 00 08 5b
>3a1fc8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a1fd8		f8 1b e2 20 dc d4 08 08 e2 20 20 be 1e e2 20 a7
>3a1fe8		00 f0 10 c9 3a f0 0c c5 37 f0 05 20 9d 1e 80 ef
>3a1ff8		28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0
>3a2008		0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a
>3a2018		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 68
>3a2028		17 e2 20 a9 00 85 dc ad 8a 0f 30 4b a7 00 c9 3a
>3a2038		d0 03 20 9d 1e 20 be 1e a7 00 d0 03 4c c9 20 20
>3a2048		59 03 b0 52 a7 00 10 10 20 0d 0b 85 0c c9 20 d0
>3a2058		03 4c b7 20 a5 d2 f0 51 08 c2 20 48 a9 00 08 5b
>3a2068		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a2078		f8 1b e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a2088		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a2098		1b e2 20 dc d4 08 20 94 41 4c c9 20 08 e2 20 48
>3a20a8		a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9 a7
>3a20b8		00 20 ea 0a c2 20 85 2f 20 68 17 20 9d 1e 20 a4
>3a20c8		20 ab 2b 28 60 08 58 20 5e 1e 20 9d 1b e2 20 9c
>3a20d8		8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 0e 21 08
>3a20e8		c2 20 a0 02 00 b7 1a 85 d7 20 fe 12 e2 20 a5 dc
>3a20f8		c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20
>3a2108		a5 1c 69 00 85 02 c2 20 20 19 20 e2 20 a5 dc c9
>3a2118		03 f0 f3 c9 00 d0 31 e2 20 20 be 1e a7 00 f0 28
>3a2128		c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2138		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a2148		dc d4 08 20 9d 1e 80 be 28 60 08 58 e2 20 a9 80
>3a2158		85 d2 9c 8a 0f 20 9d 1b c2 30 64 31 a0 02 00 b7
>3a2168		1a f0 29 20 e7 20 e2 20 a5 dc c9 01 f0 1e c9 02
>3a2178		f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a
>3a2188		85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00
>3a2198		85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 36
>3a21a8		00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e
>3a21b8		b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20
>3a21c8		a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20
>3a21d8		a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60
>3a21e8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2
>3a21f8		20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85
>3a2208		0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01
>3a2218		00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08
>3a2228		e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e
>3a2238		c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20
>3a2248		a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08
>3a2258		e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00
>3a2268		c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>3a2278		0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69
>3a2288		00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2
>3a2298		20 a5 db e9 00 85 db 20 e8 21 20 8a 41 28 60 08
>3a22a8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97
>3a22b8		d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85
>3a22c8		0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2
>3a22d8		20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97
>3a22e8		d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00
>3a22f8		85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00
>3a2308		97 d9 c8 c0 05 00 d0 f8 20 8a 41 28 60 0b 08 08
>3a2318		c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08
>3a2328		a9 36 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25
>3a2338		b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00
>3a2348		00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9
>3a2358		01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05
>3a2368		00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10
>3a2378		c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9
>3a2388		69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65
>3a2398		10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00
>3a23a8		85 08 a5 db 69 00 00 85 0a 20 27 22 c2 20 a5 10
>3a23b8		a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69
>3a23c8		04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20
>3a23d8		b7 1a 97 00 f0 03 c8 80 f7 20 8a 41 28 60 08 c2
>3a23e8		30 85 d7 20 15 23 c9 00 00 f0 2c c9 01 00 f0 22
>3a23f8		c2 20 a5 08 48 a5 0a 48 20 64 22 68 85 0a 68 85
>3a2408		08 a5 1a 85 00 a5 1c 85 02 20 be 1e e2 20 a7 00
>3a2418		f0 0a 20 63 23 80 05 a5 d7 20 a7 22 28 60 0b 08
>3a2428		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2 00
>3a2438		00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9 02
>3a2448		00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c 3a
>3a2458		8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b 54
>3a2468		00 3a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22 9d
>3a2478		00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00 e8
>3a2488		9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48 a9
>3a2498		00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0 0a
>3a24a8		c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00 85
>3a24b8		8f a9 d4 24 85 55 20 26 24 80 e9 c2 20 a9 04 00
>3a24c8		85 8f a9 d8 24 85 55 20 26 24 80 d8 44 49 52 00
>3a24d8		42 52 55 4e 00 8b 08 20 e4 00 08 e2 20 48 a9 3a
>3a24e8		48 ab 68 28 a2 3b d2 20 db 02 28 ab 60 08 e2 30
>3a24f8		a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80 f5
>3a2508		28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a2518		64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 0f 08 c2
>3a2528		20 a5 d7 d0 05 20 cd 20 80 07 20 e6 23 28 2b 38
>3a2538		60 28 2b 18 60 c2 30 a2 ff fe 9a 20 dd 24 20 08
>3a2548		00 20 0c 00 a9 00 00 20 1c 00 20 8e 24 20 0a 25
>3a2558		b0 ec 80 e7 08 e2 20 20 1a 07 c9 00 f0 2c c9 01
>3a2568		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2578		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a2588		e2 20 dc d4 08 20 57 14 80 08 20 8e 4f 80 03 20
>3a2598		31 52 28 60 08 e2 20 20 cc 06 c9 00 f0 23 c9 01
>3a25a8		f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a25b8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a25c8		08 20 a0 4f 80 03 20 26 52 28 60 08 e2 20 20 cc
>3a25d8		06 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08
>3a25e8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a25f8		20 f8 1b e2 20 dc d4 08 20 b2 4f 80 03 20 c7 52
>3a2608		28 60 20 36 06 20 67 06 20 7c 52 60 a5 23 8f 1a
>3a2618		01 00 a5 29 8f 18 01 00 af 1e 01 00 85 23 60 08
>3a2628		20 c8 04 20 f9 04 c2 20 a5 23 25 29 85 23 a5 25
>3a2638		25 2b 85 25 28 60 08 20 c8 04 20 f9 04 c2 20 a5
>3a2648		23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20 c8
>3a2658		04 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85
>3a2668		25 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a2678		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2688		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a2698		20 dc d4 08 20 df 15 80 08 20 b3 50 80 03 20 0c
>3a26a8		58 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a26b8		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a26c8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a26d8		20 dc d4 08 20 f6 15 80 08 20 d4 50 80 03 20 21
>3a26e8		58 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a26f8		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2708		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a2718		20 dc d4 08 20 0d 16 80 08 20 01 51 80 03 20 36
>3a2728		58 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a2738		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2748		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a2758		20 dc d4 08 20 24 16 80 08 20 1f 51 80 03 20 75
>3a2768		58 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a2778		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2788		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a2798		20 dc d4 08 20 3b 16 80 08 20 3d 51 80 03 20 60
>3a27a8		58 28 60 08 e2 20 20 1a 07 c9 00 f0 2c c9 01 f0
>3a27b8		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a27c8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a27d8		20 dc d4 08 20 52 16 80 08 20 6a 51 80 03 20 4b
>3a27e8		58 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0 1f
>3a27f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2808		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 e2
>3a2818		20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff ff
>3a2828		85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25 28
>3a2838		60 08 e2 20 20 a6 1a 20 da 05 20 25 04 a5 23 0a
>3a2848		0a 0a 0a 05 29 48 a9 2c 20 aa 1f 20 a6 1a 20 da
>3a2858		05 20 25 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20
>3a2868		aa 1f 20 a6 1a 20 da 05 20 25 04 a5 23 0a 0a 0a
>3a2878		0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f
>3a2888		00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08
>3a2898		af 29 f7 8f 0e 08 af 20 e2 1e 28 60 08 e2 20 20
>3a28a8		a6 1a 20 da 05 20 25 04 a5 23 0a 0a 0a 0a 05 29
>3a28b8		48 a9 2c 20 aa 1f 20 a6 1a 20 da 05 20 25 04 a5
>3a28c8		23 0a 0a 0a 0a 05 29 48 a9 2c 20 aa 1f 20 a6 1a
>3a28d8		20 c8 04 20 5b 04 c2 20 a5 23 85 92 a5 29 85 23
>3a28e8		20 25 04 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2 20
>3a28f8		a5 92 85 23 20 25 04 e2 20 a5 23 0a 0a 0a 0a 05
>3a2908		29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08
>3a2918		af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af
>3a2928		af 0e 08 af 29 f7 8f 0e 08 af 20 e2 1e 28 60 08
>3a2938		e2 20 48 20 a6 1a 20 da 05 e2 20 a5 23 29 0f 0a
>3a2948		0a 0a 0a 83 01 a9 2c 20 aa 1f 20 a6 1a 20 da 05
>3a2958		a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60 08
>3a2968		c2 20 f4 00 00 e2 20 20 a6 1a 20 da 05 a5 23 83
>3a2978		01 a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23 83 02
>3a2988		a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23 8f 0d 00
>3a2998		af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20 68
>3a29a8		28 60 08 c2 20 f4 00 00 e2 20 20 a6 1a 20 c8 04
>3a29b8		a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af
>3a29c8		8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af
>3a29d8		22 2c 11 00 a9 2c 85 37 20 df 1f 90 39 20 9d 1e
>3a29e8		20 a6 1a 20 da 05 a5 23 83 01 a9 2c 20 aa 1f 20
>3a29f8		a6 1a 20 da 05 a5 23 83 02 a9 2c 20 aa 1f 20 a6
>3a2a08		1a 20 da 05 a5 23 8f 05 00 af a3 02 8f 06 00 af
>3a2a18		a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b 38
>3a2a28		e9 05 00 1b e2 20 20 a6 1a 20 da 05 c9 0a 90 1f
>3a2a38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a2a48		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 a5
>3a2a58		23 83 01 a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23
>3a2a68		83 02 a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23 83
>3a2a78		03 a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23 83 04
>3a2a88		a9 2c 20 aa 1f 20 a6 1a 20 da 05 a5 23 83 05 a9
>3a2a98		af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf da 2a 3a
>3a2aa8		85 9e e2 20 a3 02 0a 0a 18 65 9e 85 9e a5 9f 69
>3a2ab8		00 85 9f a0 02 00 a3 03 97 9e a0 01 00 a3 04 97
>3a2ac8		9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05 00 1b
>3a2ad8		28 60 00 20 00 24 00 28 00 2c 00 30 00 34 00 38
>3a2ae8		00 3c 40 1f 80 1f da 5a 08 20 a6 1a 20 c8 04 c2
>3a2af8		20 a5 23 89 00 01 d0 17 af 00 00 af 89 00 01 f0
>3a2b08		0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af c2
>3a2b18		20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29 03 00
>3a2b28		0a aa c2 20 bf 75 2b 3a 8f 10 f0 3a bf 7d 2b 3a
>3a2b38		8f 12 f0 3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a
>3a2b48		8f 0a 01 00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e
>3a2b58		01 00 8f 16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00
>3a2b68		aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20
>3a2b78		03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64
>3a2b88		00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c
>3a2b98		00 20 00 2a 00 34 00 43 00 16 00 34 00 da 08 c2
>3a2ba8		30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 3a 85 9e bf
>3a2bb8		02 f0 3a 85 a0 c9 f0 00 b0 08 c9 b0 00 90 03 28
>3a2bc8		fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2bd8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a2be8		08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf 08 f0
>3a2bf8		3a 85 9e bf 0a f0 3a 85 a0 c9 40 00 b0 03 28 fa
>3a2c08		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2c18		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a2c28		08 c2 30 3b 38 e9 07 00 1b 20 a6 1a 20 da 05 c2
>3a2c38		20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c 20 aa
>3a2c48		1f 20 a6 1a 20 da 05 a5 23 83 03 a9 2c 20 aa 1f
>3a2c58		20 a6 1a 20 da 05 a3 01 0a 0a 0a aa a3 03 d0 05
>3a2c68		a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2 20 a9
>3a2c78		2c 00 85 37 20 df 1f b0 37 c2 20 08 c2 20 a9 00
>3a2c88		00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28 80
>3a2c98		27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2ca8		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a2cb8		c2 20 20 9d 1e 20 a6 1a c2 20 a3 01 0a 0a aa a5
>3a2cc8		23 9f 00 f0 3a 9f 08 f0 3a 83 04 a5 25 9f 02 f0
>3a2cd8		3a 38 e9 b0 00 9f 0a f0 3a 83 06 a3 01 0a 0a 0a
>3a2ce8		aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01 af a3
>3a2cf8		06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af c2
>3a2d08		30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9 00 08
>3a2d18		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a2d28		20 f8 1b e2 20 dc d4 08 08 c2 20 20 a6 1a 20 da
>3a2d38		05 a5 23 20 e9 2b c2 20 a5 9e 8f 05 04 af af 14
>3a2d48		f0 3a 8f 08 04 af e2 20 a5 a0 8f 07 04 af af 16
>3a2d58		f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00
>3a2d68		04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28 60
>3a2d78		08 c2 20 a5 5d 8f 08 01 00 af 10 f0 3a 8f 0a 01
>3a2d88		00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69 00
>3a2d98		00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e
>3a2da8		e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd 38
>3a2db8		a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9 ff
>3a2dc8		ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d 10
>3a2dd8		0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c5 69
>3a2de8		b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a
>3a2df8		85 71 20 78 2d a5 59 c5 61 d0 06 a5 5d c5 65 f0
>3a2e08		36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0
>3a2e18		0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5
>3a2e28		75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5
>3a2e38		5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 04 00
>3a2e48		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a2e58		00 48 ab 68 28 c2 30 20 a6 1a 20 da 05 83 01 a9
>3a2e68		2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 01 a9
>3a2e78		2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 03 a9
>3a2e88		2c 00 20 aa 1f 20 a6 1a 20 da 05 a5 23 85 55 a3
>3a2e98		01 85 59 a3 03 85 5d a3 01 20 a5 2b 20 78 2d c2
>3a2ea8		20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 0a
>3a2eb8		00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2ec8		a9 00 48 ab 68 28 c2 30 20 a6 1a 20 da 05 83 01
>3a2ed8		a9 2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 03
>3a2ee8		a9 2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 05
>3a2ef8		a9 2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 07
>3a2f08		a9 2c 00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 09
>3a2f18		a9 2c 00 20 aa 1f 20 a6 1a 20 da 05 a5 23 85 55
>3a2f28		a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65
>3a2f38		a3 01 20 a5 2b 20 b0 2d c2 20 3b 18 69 0a 00 1b
>3a2f48		28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9
>3a2f58		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a2f68		30 20 a6 1a 20 da 05 83 01 a9 2c 00 20 aa 1f 20
>3a2f78		a6 1a 20 c8 04 a5 23 83 03 a9 2c 00 20 aa 1f 20
>3a2f88		a6 1a 20 c8 04 a5 23 83 05 a9 2c 00 20 aa 1f 20
>3a2f98		a6 1a 20 c8 04 a5 23 83 07 a9 2c 00 20 aa 1f 20
>3a2fa8		a6 1a 20 c8 04 a5 23 83 09 a9 2c 00 20 aa 1f 20
>3a2fb8		a6 1a 20 da 05 a5 23 83 0b a3 01 20 e9 2b a9 07
>3a2fc8		00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0
>3a2fd8		3a 8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20
>3a2fe8		af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f
>3a2ff8		05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38
>3a3008		a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 3a 8f
>3a3018		0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b
>3a3028		8f 01 04 af af 00 04 af 09 80 8f 00 04 af af 01
>3a3038		04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c
>3a3048		00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18
>3a3058		69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08
>3a3068		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a3078		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2
>3a3088		20 3b 38 e9 03 00 1b c2 30 20 a6 1a 20 da 05 83
>3a3098		01 a9 2c 00 20 aa 1f e2 20 20 a6 1a 20 da 05 a5
>3a30a8		23 c9 08 b0 56 83 03 a9 2c 20 aa 1f 20 a6 1a 20
>3a30b8		c8 04 c2 20 38 a5 23 e9 00 00 85 23 a5 25 e9 b0
>3a30c8		00 85 25 30 36 c2 20 a3 01 aa 20 4c 30 a5 23 a0
>3a30d8		01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18 f0 3a
>3a30e8		29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f 18 f0
>3a30f8		3a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20 48 a9
>3a3108		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>3a3118		ff 00 20 f8 1b e2 20 dc d4 08 08 c2 20 3b 38 e9
>3a3128		04 00 1b c2 30 20 a6 1a 20 da 05 83 01 a9 2c 00
>3a3138		20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 03 a9 2c 00
>3a3148		20 aa 1f 20 a6 1a 20 c8 04 a3 01 20 4c 30 a3 03
>3a3158		a0 04 00 97 9e a5 23 a0 06 00 97 9e c2 20 3b 18
>3a3168		69 04 00 1b 28 60 08 c2 20 3b 38 e9 03 00 1b c2
>3a3178		30 20 a6 1a 20 da 05 83 01 a9 2c 00 20 aa 1f e2
>3a3188		20 20 a6 1a 20 c8 04 a5 23 d0 04 83 03 80 04 a9
>3a3198		01 83 03 a9 2c 85 37 20 df 1f b0 20 c2 30 a3 01
>3a31a8		aa 20 4c 30 e2 20 bf 18 f0 3a 29 fe 85 0c a3 03
>3a31b8		29 01 05 0c 9f 18 f0 3a 87 9e 80 36 c2 30 20 9d
>3a31c8		1e 20 a6 1a 20 da 05 a5 23 c9 08 00 b0 2e 0a 0a
>3a31d8		0a 0a 85 0c a3 01 aa 20 4c 30 e2 20 a3 03 29 01
>3a31e8		05 0c 85 0c bf 18 f0 3a 29 8e 05 0c 87 9e 9f 18
>3a31f8		f0 3a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20 48
>3a3208		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a3218		29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2 20 c9 04
>3a3228		00 b0 19 8d 00 01 a9 04 00 8d 02 01 18 ad 04 01
>3a3238		69 80 02 85 9e a9 af 00 85 a0 28 60 08 c2 20 48
>3a3248		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a3258		29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2 20 c9 04
>3a3268		00 b0 19 8d 00 01 a9 0c 00 8d 02 01 18 ad 04 01
>3a3278		69 00 02 85 9e a9 af 00 85 a0 28 60 08 c2 20 48
>3a3288		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a3298		29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2 20 3b 38
>3a32a8		e9 06 00 1b c2 20 20 a6 1a 20 da 05 a5 23 83 01
>3a32b8		a9 2c 00 20 aa 1f 20 a6 1a 20 da 05 a5 23 83 03
>3a32c8		a9 2c 00 20 aa 1f 20 a6 1a 20 da 05 a5 23 83 05
>3a32d8		a9 2c 00 20 aa 1f 20 a6 1a 20 c8 04 a3 01 20 23
>3a32e8		32 a5 23 87 9e e2 20 38 a5 25 e9 b0 a0 02 00 97
>3a32f8		9e a3 05 d0 0d e2 20 a3 03 29 07 a0 03 00 97 9e
>3a3308		80 0d e2 20 a3 03 29 07 09 08 a0 03 00 97 9e c2
>3a3318		20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 06
>3a3328		00 1b c2 20 20 a6 1a 20 da 05 a5 23 83 01 a9 2c
>3a3338		00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 03 a9 2c
>3a3348		00 20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 05 a9 2c
>3a3358		00 20 aa 1f 20 a6 1a 20 c8 04 a3 01 20 63 32 a5
>3a3368		23 a0 01 00 97 9e e2 20 38 a5 25 e9 b0 c8 c8 97
>3a3378		9e c2 20 a3 03 a0 04 00 97 9e a3 05 a0 06 00 97
>3a3388		9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 f4 00
>3a3398		00 c2 20 20 a6 1a 20 da 05 a5 23 83 01 a9 2c 00
>3a33a8		20 aa 1f 20 a6 1a 20 c8 04 a3 01 20 63 32 a5 23
>3a33b8		d0 06 e2 20 a9 00 80 04 e2 20 a9 01 e2 20 a0 00
>3a33c8		00 97 9e c2 20 68 28 60 08 c2 20 3b 38 e9 04 00
>3a33d8		1b c2 20 20 a6 1a 20 da 05 a5 23 83 01 a9 2c 00
>3a33e8		20 aa 1f 20 a6 1a 20 c8 04 a5 23 83 03 a9 2c 00
>3a33f8		20 aa 1f 20 a6 1a 20 c8 04 a3 01 20 63 32 a5 23
>3a3408		a0 0a 00 97 9e a3 03 a0 08 00 97 9e c2 20 3b 18
>3a3418		69 04 00 1b 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a3428		68 28 e2 20 a9 00 8f 58 f0 3a af 5c f0 3a c9 b0
>3a3438		b0 1c 8f 24 04 af af 5b f0 3a 8f 23 04 af af 5a
>3a3448		f0 3a 8f 22 04 af a9 10 8f 58 f0 3a 80 17 38 e9
>3a3458		b0 8f 04 04 af af 5b f0 3a 8f 03 04 af af 5a f0
>3a3468		3a 8f 02 04 af af 59 f0 3a d0 3c af 58 f0 3a f0
>3a3478		1b af 5d f0 3a 8f 28 04 af af 5e f0 3a 8f 29 04
>3a3488		af af 5f f0 3a 8f 2a 04 af 82 8b 00 af 5d f0 3a
>3a3498		8f 08 04 af af 5e f0 3a 8f 09 04 af af 5f f0 3a
>3a34a8		8f 0a 04 af 82 70 00 af 58 f0 3a 09 01 8f 58 f0
>3a34b8		3a 89 10 f0 32 af 60 f0 3a 8f 28 04 af af 61 f0
>3a34c8		3a 8f 29 04 af af 62 f0 3a 8f 2a 04 af af 63 f0
>3a34d8		3a 8f 2b 04 af af 64 f0 3a 8f 2c 04 af af 65 f0
>3a34e8		3a 8f 2d 04 af 80 30 af 60 f0 3a 8f 08 04 af af
>3a34f8		61 f0 3a 8f 09 04 af af 62 f0 3a 8f 0a 04 af af
>3a3508		63 f0 3a 8f 0b 04 af af 64 f0 3a 8f 0c 04 af af
>3a3518		65 f0 3a 8f 0d 04 af e2 20 af 69 f0 3a c9 b0 b0
>3a3528		20 8f 27 04 af af 68 f0 3a 8f 26 04 af af 67 f0
>3a3538		3a 8f 25 04 af af 58 f0 3a 09 20 8f 58 f0 3a 80
>3a3548		17 38 e9 b0 8f 07 04 af af 68 f0 3a 8f 06 04 af
>3a3558		af 67 f0 3a 8f 05 04 af af 66 f0 3a d0 3e af 58
>3a3568		f0 3a 89 20 f0 1b af 6a f0 3a 8f 28 04 af af 6b
>3a3578		f0 3a 8f 29 04 af af 6c f0 3a 8f 2a 04 af 82 8b
>3a3588		00 af 6a f0 3a 8f 08 04 af af 6b f0 3a 8f 09 04
>3a3598		af af 6c f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a
>3a35a8		09 02 8f 58 f0 3a 89 20 f0 32 af 6d f0 3a 8f 28
>3a35b8		04 af af 6e f0 3a 8f 29 04 af af 6f f0 3a 8f 2a
>3a35c8		04 af af 70 f0 3a 8f 2b 04 af af 71 f0 3a 8f 2e
>3a35d8		04 af af 72 f0 3a 8f 2f 04 af 80 30 af 6d f0 3a
>3a35e8		8f 08 04 af af 6e f0 3a 8f 09 04 af af 6f f0 3a
>3a35f8		8f 0a 04 af af 70 f0 3a 8f 0b 04 af af 71 f0 3a
>3a3608		8f 0e 04 af af 72 f0 3a 8f 0f 04 af af 58 f0 3a
>3a3618		29 30 f0 43 c9 10 f0 76 c9 20 d0 03 82 8a 00 af
>3a3628		58 f0 3a 29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9
>3a3638		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>3a3648		ff 00 20 f8 1b e2 20 dc d4 08 a9 01 80 02 a9 03
>3a3658		8f 20 04 af 82 7d 00 af 58 f0 3a 29 03 f0 23 c9
>3a3668		03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3678		0a 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a3688		d4 08 a9 01 80 02 a9 03 8f 00 04 af 80 34 af 58
>3a3698		f0 3a 29 01 0a 09 11 8f 20 04 af af 58 f0 3a 29
>3a36a8		02 09 11 8f 00 04 af 80 19 af 58 f0 3a 29 02 09
>3a36b8		21 8f 20 04 af af 58 f0 3a 29 01 0a 09 21 8f 00
>3a36c8		04 af af 00 04 af 09 80 8f 00 04 af af 58 f0 3a
>3a36d8		29 30 f0 0f af 20 04 af 09 80 8f 20 04 af ea ea
>3a36e8		ea ea ea af 01 04 af 89 80 d0 f8 a9 00 8f 20 04
>3a36f8		af 8f 00 04 af 28 2b 60 0b 08 e2 20 c2 10 a9 00
>3a3708		a2 00 00 8f 59 f0 3a e8 e0 1a 00 d0 f6 20 fe 1f
>3a3718		c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b
>3a3728		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a3738		f8 1b e2 20 dc d4 08 20 aa 1f 20 a6 1a 20 c8 04
>3a3748		c2 20 a5 23 8f 5a f0 3a e2 20 a5 25 8f 5c f0 3a
>3a3758		a9 2c 20 aa 1f 20 a6 1a 20 c8 04 c2 20 a5 23 8f
>3a3768		5d f0 3a e2 20 a5 25 8f 5f f0 3a e2 20 a9 00 8f
>3a3778		59 f0 3a 82 74 00 20 aa 1f 20 a6 1a 20 c8 04 c2
>3a3788		20 a5 23 8f 5a f0 3a e2 20 a5 25 8f 5c f0 3a a9
>3a3798		2c 20 aa 1f 20 a6 1a 20 84 05 c2 20 a5 23 8f 60
>3a37a8		f0 3a 8d 00 01 a9 2c 00 20 aa 1f 20 a6 1a 20 84
>3a37b8		05 c2 20 a5 23 8f 62 f0 3a 8d 02 01 a9 2c 00 20
>3a37c8		aa 1f 20 a6 1a 20 84 05 c2 20 a5 23 8f 64 f0 3a
>3a37d8		c2 20 ad 04 01 8f 5d f0 3a e2 20 ad 06 01 8f 5f
>3a37e8		f0 3a e2 20 a9 01 8f 59 f0 3a e2 20 a9 9c 20 aa
>3a37f8		1f 20 fe 1f c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48
>3a3808		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3818		29 ff 00 20 f8 1b e2 20 dc d4 08 20 aa 1f 20 a6
>3a3828		1a 20 c8 04 c2 20 a5 23 8f 67 f0 3a e2 20 a5 25
>3a3838		8f 69 f0 3a a9 2c 20 aa 1f 20 a6 1a 20 c8 04 c2
>3a3848		20 a5 23 8f 6a f0 3a e2 20 a5 25 8f 6c f0 3a e2
>3a3858		20 a9 00 8f 66 f0 3a 82 74 00 20 aa 1f 20 a6 1a
>3a3868		20 c8 04 c2 20 a5 23 8f 67 f0 3a e2 20 a5 25 8f
>3a3878		69 f0 3a a9 2c 20 aa 1f 20 a6 1a 20 84 05 c2 20
>3a3888		a5 23 8f 6d f0 3a 8d 00 01 a9 2c 00 20 aa 1f 20
>3a3898		a6 1a 20 84 05 c2 20 a5 23 8f 6f f0 3a 8d 02 01
>3a38a8		a9 2c 00 20 aa 1f 20 a6 1a 20 84 05 c2 20 a5 23
>3a38b8		8f 71 f0 3a c2 20 ad 04 01 8f 6a f0 3a e2 20 ad
>3a38c8		06 01 8f 6c f0 3a e2 20 a9 01 8f 66 f0 3a c2 20
>3a38d8		af 5d f0 3a cf 6a f0 3a d0 14 e2 20 af 5f f0 3a
>3a38e8		cf 6c f0 3a d0 08 c2 20 20 1e 34 28 2b 60 08 c2
>3a38f8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a3908		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2 30
>3a3918		20 a6 1a 20 da 05 a5 23 48 a9 2c 00 20 aa 1f 20
>3a3928		a6 1a 20 da 05 a4 23 fa 20 20 00 28 60 08 20 be
>3a3938		1e e2 20 a7 00 d0 03 4c da 39 c9 3a d0 03 4c da
>3a3948		39 c9 22 d0 0b 20 b2 19 20 c5 42 a9 3b 20 aa 1f
>3a3958		20 59 03 90 41 20 3c 4f 90 3c a9 3f 20 18 00 a9
>3a3968		20 20 18 00 20 10 00 e2 20 a5 ea c9 02 f0 46 c9
>3a3978		00 f0 62 c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68
>3a3988		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a3998		1b e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a39a8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a39b8		e2 20 dc d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85
>3a39c8		25 e2 20 a9 02 85 27 c2 20 20 9f 4e a9 0d 00 20
>3a39d8		18 00 28 60 ea c2 20 a5 00 85 40 a5 02 85 42 a9
>3a39e8		00 4c 85 00 a9 00 00 85 02 20 4f 07 c2 20 a5 40
>3a39f8		85 00 a5 42 85 02 80 cf 08 20 be 1e e2 20 a7 00
>3a3a08		f0 46 c9 3a f0 42 20 59 03 90 3f 20 3c 4f 90 3a
>3a3a18		20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e 00 c2
>3a3a28		20 a9 00 4e 85 23 a9 00 00 85 25 e2 20 a9 02 85
>3a3a38		27 20 9f 4e 20 be 1e a7 00 f0 0d c9 3a f0 09 c9
>3a3a48		2c d0 07 20 9d 1e 80 b1 28 60 08 c2 20 48 a9 00
>3a3a58		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3a68		00 20 f8 1b e2 20 dc d4 08 08 20 a6 1a 20 c8 04
>3a3a78		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>3a3a88		85 a5 e2 20 a9 2c 85 37 20 df 1f 90 41 20 9d 1e
>3a3a98		20 a6 1a 20 84 05 c2 20 a5 23 85 55 e2 20 a9 2c
>3a3aa8		85 37 20 df 1f 90 27 20 9d 1e 20 a6 1a 20 84 05
>3a3ab8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 df 1f 90
>3a3ac8		0d 20 9d 1e 20 a6 1a 20 84 05 c2 20 a4 23 a6 59
>3a3ad8		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 e2 1e 28
>3a3ae8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3af8		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a3b08		08 e2 20 20 be 1e 20 3c 4f 90 64 a9 8f 20 aa 1f
>3a3b18		a9 01 20 05 18 a2 01 00 a9 00 8f 00 4d 00 20 a6
>3a3b28		1a 20 84 05 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a3b38		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 be 1e a7 00
>3a3b48		c9 2c f0 25 c9 90 d0 27 20 9d 1e 20 0e 5a c2 20
>3a3b58		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>3a3b68		85 ea 85 27 20 9f 4e 28 60 20 9d 1e 4c 26 3b 08
>3a3b78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3b88		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2
>3a3b98		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a3ba8		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 20 be
>3a3bb8		1e e2 20 a7 00 f0 28 c9 3a f0 24 20 59 03 90 21
>3a3bc8		20 3c 4f 90 1c 20 08 3c 20 9f 4e 20 be 1e a7 00
>3a3bd8		f0 0d c9 3a f0 09 c9 2c d0 07 20 9d 1e 80 cf 28
>3a3be8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3bf8		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a3c08		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>3a3c18		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>3a3c28		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>3a3c38		53 c9 3a f0 4f c9 2c d0 03 20 9d 1e 20 be 1e a7
>3a3c48		00 c9 22 f0 4e 20 72 03 b0 4e 08 c2 20 48 a9 00
>3a3c58		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3c68		00 20 f8 1b e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>3a3c78		a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>3a3c88		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 f4
>3a3c98		1e 80 a9 20 b2 19 80 03 20 e7 18 c2 20 a5 00 85
>3a3ca8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>3a3cb8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>3a3cc8		e2 1e 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>3a3cd8		20 a6 1a c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>3a3ce8		2c d0 22 20 9d 1e 20 a6 1a c2 20 a5 26 d0 35 68
>3a3cf8		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>3a3d08		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3d18		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a3d28		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3d38		a9 09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a3d48		dc d4 08 20 a6 1a c2 20 a5 25 48 a5 23 48 e2 20
>3a3d58		a7 00 c9 2c d0 19 20 9d 1e 20 a6 1a c2 20 a5 25
>3a3d68		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>3a3d78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3d88		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2
>3a3d98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a3da8		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 20 a6 1a
>3a3db8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>3a3dc8		20 9d 1e 20 a6 1a e2 20 a5 24 d0 32 c2 20 a5 25
>3a3dd8		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>3a3de8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3df8		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2
>3a3e08		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a3e18		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2 20
>3a3e28		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>3a3e38		20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 e2 20 a7
>3a3e48		00 f0 05 20 9d 1e 80 f7 28 60 08 28 60 08 28 60
>3a3e58		08 28 60 08 c2 20 a5 1c 20 bf 1b a5 1a 20 bf 1b
>3a3e68		a5 02 48 a5 00 48 20 e2 1e a5 02 20 bf 1b a5 00
>3a3e78		20 bf 1b 68 85 00 68 85 02 20 be 1e 20 3c 4f b0
>3a3e88		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a3e98		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a3ea8		e2 20 a5 ea 20 d6 1b a5 e9 20 d6 1b c2 20 a5 e7
>3a3eb8		20 bf 1b 20 be 1e e2 20 a7 00 c9 8a d0 6a a5 ea
>3a3ec8		c9 00 f0 04 c9 01 f0 00 20 9d 1e 20 a6 1a 20 9f
>3a3ed8		4e e2 20 a9 9c 20 aa 1f 20 a6 1a c2 20 a5 27 20
>3a3ee8		bf 1b a5 25 20 bf 1b a5 23 20 bf 1b e2 20 a9 9d
>3a3ef8		85 37 20 df 1f 90 1b 20 9d 1e 20 a6 1a e2 20 a5
>3a3f08		27 20 bf 1b c2 20 a5 25 20 bf 1b a5 23 20 bf 1b
>3a3f18		80 14 c2 20 a9 00 00 20 bf 1b a9 00 00 20 bf 1b
>3a3f28		a9 01 00 20 bf 1b 28 60 08 c2 20 48 a9 00 08 5b
>3a3f38		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a3f48		f8 1b e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>3a3f58		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>3a3f68		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>3a3f78		e9 b9 10 00 85 ea c2 20 5a 20 3d 4d 7a c2 20 b9
>3a3f88		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>3a3f98		c2 20 5a 20 5c 25 20 9f 4e 7a c2 20 b9 06 00 85
>3a3fa8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>3a3fb8		02 00 30 0a 20 ab 27 20 91 04 f0 28 80 08 20 6b
>3a3fc8		27 20 91 04 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>3a3fd8		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>3a3fe8		85 dc 80 17 a2 23 08 20 c6 17 c2 20 18 a5 33 69
>3a3ff8		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>3a4008		1a 48 a5 1c 48 20 be 1e 20 4f 07 a5 23 f0 26 20
>3a4018		9c 21 90 42 e2 20 a9 02 85 dc 20 e2 1e c2 20 68
>3a4028		20 bf 1b 68 20 bf 1b a5 02 20 bf 1b a5 00 20 bf
>3a4038		1b e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>3a4048		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a4058		1b e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>3a4068		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>3a4078		f8 1b e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 e1
>3a4088		1b 85 00 20 e1 1b 85 02 20 e1 1b 85 1a 20 e1 1b
>3a4098		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>3a40a8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>3a40b8		29 ff 00 20 f8 1b e2 20 dc d4 08 08 20 a6 1a 20
>3a40c8		91 04 f0 1c e2 20 a9 97 20 aa 1f 20 4f 07 20 91
>3a40d8		04 f0 12 20 9c 21 90 2c e2 20 a9 02 85 dc 80 03
>3a40e8		20 e2 1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a40f8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a4108		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4118		a9 06 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a4128		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 be 1e
>3a4138		20 4f 07 a5 23 f0 0d 20 9c 21 90 27 e2 20 a9 02
>3a4148		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4158		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a4168		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4178		06 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a4188		d4 08 20 68 17 20 b1 0e 20 3c 4c 60 08 a7 00 10
>3a4198		03 20 9d 1e 20 3c 4f b0 03 4c 0b 42 e2 20 20 fe
>3a41a8		1f c9 8f d0 0e a9 8f 20 aa 1f a9 00 8f 00 4d 00
>3a41b8		20 ea 18 20 be 1e e2 20 a7 00 c9 8a f0 03 4c 0b
>3a41c8		42 20 9d 1e a5 ea 48 a5 e9 48 a5 e8 48 a5 e7 48
>3a41d8		20 a6 1a 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>3a41e8		80 f0 1b 20 af 4c 90 3a c2 20 a0 09 00 b7 08 85
>3a41f8		c0 e2 20 c8 c8 b7 08 85 c2 20 ef 5b 80 03 20 9f
>3a4208		4e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4218		02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a4228		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>3a4238		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a4248		08 08 e2 20 20 fe 1f c9 00 f0 6d 20 a6 1a e2 20
>3a4258		a5 27 c9 ff f0 1b c9 02 d0 05 20 c5 42 80 12 c9
>3a4268		00 d0 05 20 e5 42 80 09 c9 01 d0 4f 20 f8 42 80
>3a4278		00 20 be 1e a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>3a4288		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4298		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a42a8		dc d4 08 a9 09 20 18 00 20 9d 1e 20 be 1e a7 00
>3a42b8		f0 09 c9 3a f0 05 80 93 20 4e 02 28 60 08 8b 08
>3a42c8		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00
>3a42d8		b7 23 f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20
>3a42e8		20 66 13 a5 16 85 23 a5 18 85 25 20 c5 42 28 60
>3a42f8		08 20 e9 58 c2 20 a5 16 85 23 a5 18 85 25 20 c5
>3a4308		42 28 60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69
>3a4318		30 97 16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60
>3a4328		e2 20 a9 8f 20 aa 1f 08 20 a6 1a e2 20 c2 10 af
>3a4338		0e 08 af 09 08 8f 0e 08 af 20 07 13 a0 00 00 af
>3a4348		06 08 af 20 0b 43 a9 2f 97 16 c8 af 09 08 af 20
>3a4358		0b 43 a9 2f 97 16 c8 af 0f 08 af 20 0b 43 af 0a
>3a4368		08 af 20 0b 43 a9 00 97 16 af 0e 08 af 29 f7 8f
>3a4378		0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>3a4388		02 85 27 28 e2 20 20 9d 1e 60 e2 20 a9 8f 20 aa
>3a4398		1f 08 20 a6 1a e2 20 c2 10 af 0e 08 af 09 08 8f
>3a43a8		0e 08 af 20 07 13 a0 00 00 af 04 08 af 29 7f 20
>3a43b8		0b 43 a9 3a 97 16 c8 af 02 08 af 20 0b 43 a9 3a
>3a43c8		97 16 c8 af 00 08 af 20 0b 43 a9 00 97 16 af 0e
>3a43d8		08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18
>3a43e8		85 25 e2 20 a9 02 85 27 28 e2 20 20 9d 1e 60 e2
>3a43f8		20 a9 8f 20 aa 1f 08 c2 30 20 a6 1a 20 5a 05 c2
>3a4408		20 a5 25 48 a5 23 48 20 be 1e e2 20 a7 00 c9 2c
>3a4418		f0 03 4c 6e 44 20 9d 1e 20 a6 1a 20 84 05 c2 20
>3a4428		a5 23 48 20 be 1e e2 20 a7 00 c9 2c f0 03 4c 6e
>3a4438		44 20 9d 1e 20 a6 1a 20 84 05 c2 20 a5 23 85 8f
>3a4448		e2 20 a5 25 85 91 c2 20 68 85 29 a9 00 00 85 2b
>3a4458		68 85 23 68 85 25 e2 20 a9 02 85 27 20 5f 15 e2
>3a4468		20 20 9d 1e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4478		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a4488		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4498		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a44a8		20 dc d4 08 e2 20 a9 8f 20 aa 1f 08 c2 30 20 a6
>3a44b8		1a e2 20 a5 27 c9 02 f0 03 4c 30 45 c2 20 a5 25
>3a44c8		48 a5 23 48 20 be 1e e2 20 a7 00 c9 2c f0 03 4c
>3a44d8		4f 45 20 9d 1e 20 a6 1a e2 20 a5 27 c9 00 d0 48
>3a44e8		c2 20 a5 23 85 8f c2 20 68 85 23 68 85 25 e2 20
>3a44f8		a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03 c8 80 f9
>3a4508		c2 20 98 38 e5 8f 30 09 85 29 a9 00 00 85 2b 80
>3a4518		07 a9 00 00 85 29 85 2b e2 20 a9 00 85 2d 20 5f
>3a4528		15 e2 20 20 9d 1e 28 60 08 c2 20 48 a9 00 08 5b
>3a4538		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a4548		f8 1b e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a4558		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a4568		1b e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4578		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a4588		e2 20 dc d4 08 e2 20 a9 8f 20 aa 1f 08 c2 30 20
>3a4598		a6 1a e2 20 a5 27 c9 02 f0 03 4c f9 45 c2 20 a5
>3a45a8		25 48 a5 23 48 20 be 1e e2 20 a7 00 c9 2c f0 03
>3a45b8		4c 18 46 20 9d 1e 20 a6 1a e2 20 a5 27 c9 00 d0
>3a45c8		30 c2 20 a5 23 85 8f c2 20 a9 00 00 85 29 a9 00
>3a45d8		00 85 2b e2 20 a9 00 85 2d c2 20 68 85 23 68 85
>3a45e8		25 e2 20 a9 02 85 27 20 5f 15 e2 20 20 9d 1e 28
>3a45f8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a4608		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a4618		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4628		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08
>3a4638		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a4648		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 e2 20
>3a4658		a9 8f 20 aa 1f 20 a6 1a c2 10 e2 20 a5 27 c9 02
>3a4668		d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5 23 85 00
>3a4678		a5 25 85 02 20 4f 07 a5 40 85 00 a5 42 85 02 e2
>3a4688		20 20 9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4698		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a46a8		20 dc d4 08 e2 20 a9 8f 20 aa 1f 08 20 a6 1a c2
>3a46b8		10 e2 20 a5 27 c9 00 d0 1a 20 66 13 c2 20 a5 16
>3a46c8		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20
>3a46d8		9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a46e8		04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a46f8		d4 08 e2 20 a9 8f 20 aa 1f 08 20 a6 1a 20 5a 05
>3a4708		c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9 20 f0 04
>3a4718		c9 24 d0 03 c8 80 f3 b7 23 20 83 03 90 1e c2 20
>3a4728		06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e
>3a4738		e2 20 20 a4 03 05 0c 85 0c c8 80 db c2 20 a5 0c
>3a4748		85 23 a5 0e 85 25 e2 20 a9 00 85 27 28 e2 20 20
>3a4758		9d 1e 60 e2 20 a9 8f 20 aa 1f 08 20 a6 1a 20 c8
>3a4768		04 20 07 13 e2 30 a0 ff a9 00 97 16 88 a5 23 29
>3a4778		0f aa bf 00 d0 3a 97 16 88 a5 23 29 f0 4a 4a 4a
>3a4788		4a aa bf 00 d0 3a 97 16 88 a5 24 85 23 a5 25 85
>3a4798		24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0 a5 24 d0
>3a47a8		cc a5 25 d0 c8 98 38 65 16 85 23 a5 17 85 24 a5
>3a47b8		18 85 25 a5 19 85 26 a9 02 85 27 28 e2 20 20 9d
>3a47c8		1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a47d8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a47e8		08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20 a5 27 c9
>3a47f8		02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20 f3 13 ab
>3a4808		84 23 c2 20 64 25 e2 20 a9 00 85 27 e2 20 20 9d
>3a4818		1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4828		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a4838		08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20 a5 27 c9
>3a4848		00 d0 12 e2 20 a7 23 85 23 64 24 64 25 64 30 e2
>3a4858		20 20 9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4868		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a4878		20 dc d4 08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20
>3a4888		a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2 20 a0 02
>3a4898		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>3a48a8		9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a48b8		04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a48c8		d4 08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20 a5 27
>3a48d8		c9 00 d0 0e c2 20 a7 23 85 23 64 25 e2 20 20 9d
>3a48e8		1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a48f8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a4908		08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20 a5 27 c9
>3a4918		00 d0 24 20 07 13 a5 23 87 16 a9 00 a0 01 00 97
>3a4928		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4938		27 e2 20 20 9d 1e 60 08 c2 20 48 a9 00 08 5b 68
>3a4948		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a4958		1b e2 20 dc d4 08 e2 20 a9 8f 20 aa 1f 20 a6 1a
>3a4968		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>3a4978		64 26 a9 00 85 27 e2 20 20 9d 1e 60 08 c2 20 48
>3a4988		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a4998		29 ff 00 20 f8 1b e2 20 dc d4 08 e2 20 a9 8f 20
>3a49a8		aa 1f 20 a6 1a e2 20 a5 27 c9 00 d0 39 e2 20 a5
>3a49b8		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 07 13
>3a49c8		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>3a49d8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>3a49e8		e2 20 20 9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28
>3a49f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a4a08		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4a18		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a4a28		20 dc d4 08 e2 20 a9 8f 20 aa 1f 20 a6 1a e2 20
>3a4a38		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>3a4a48		a5 24 d0 4a c2 10 20 07 13 a4 23 e2 20 a9 00 97
>3a4a58		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>3a4a68		20 a5 16 85 23 a5 18 85 25 e2 20 20 9d 1e 60 08
>3a4a78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4a88		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08 c2
>3a4a98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4aa8		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 e2 20 a9
>3a4ab8		8f 20 aa 1f 20 a6 1a e2 20 a5 27 c9 00 f0 23 c9
>3a4ac8		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4ad8		04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a4ae8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>3a4af8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>3a4b08		08 e2 20 a5 26 29 7f 85 26 e2 20 20 9d 1e 60 e2
>3a4b18		20 a9 8f 20 aa 1f 20 a6 1a e2 20 a5 27 c9 00 d0
>3a4b28		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>3a4b38		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>3a4b48		e2 20 20 9d 1e 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4b58		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a4b68		e2 20 dc d4 08 00 ea 60 08 0b 08 c2 20 48 a9 00
>3a4b78		08 5b 68 28 c2 30 c2 20 a9 00 00 85 d9 e2 20 a9
>3a4b88		36 85 db c2 30 a9 00 00 a0 00 00 97 d9 a0 02 00
>3a4b98		97 d9 a0 04 00 97 d9 20 73 1e 2b 28 60 8b 08 c2
>3a4ba8		20 a9 00 00 85 1a a9 36 00 85 1c 20 73 1e 20 52
>3a4bb8		21 28 ab 60 08 c2 20 64 55 a9 ff 7f 85 59 20 4e
>3a4bc8		02 20 fe 1f 29 ff 00 c9 00 00 f0 2c c9 81 00 f0
>3a4bd8		1a 20 be 1e 20 4f 07 a5 23 85 55 20 fe 1f 29 ff
>3a4be8		00 c9 00 00 f0 12 c9 81 00 d0 2a 20 aa 1f 20 be
>3a4bf8		1e 20 4f 07 a5 23 85 59 a5 1c 48 a5 1a 48 a5 02
>3a4c08		48 a5 00 48 20 69 16 68 85 00 68 85 02 68 85 1a
>3a4c18		68 85 1c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4c28		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2
>3a4c38		20 dc d4 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a4c48		20 64 e4 64 e7 e2 20 64 e6 64 e9 64 ea c2 20 38
>3a4c58		a5 d9 69 04 00 85 e1 e2 20 a5 db 69 00 85 e3 28
>3a4c68		60 c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0
>3a4c78		04 c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38
>3a4c88		60 08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e7 d0
>3a4c98		13 c8 c0 08 00 d0 f2 b7 e7 20 cd 03 20 69 4c b0
>3a4ca8		03 28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2
>3a4cb8		00 00 b7 e7 f0 0b 20 cd 03 9f 00 4e 00 c8 e8 80
>3a4cc8		f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e7 e2 20
>3a4cd8		a9 00 85 e9 c2 20 a5 e4 85 08 d0 06 e2 20 a5 e6
>3a4ce8		f0 4d e2 20 a5 e6 85 0a a5 ea a0 00 00 d7 08 d0
>3a4cf8		17 c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69
>3a4d08		00 85 0e 20 89 4c b0 2a a0 0d 00 c2 20 b7 08 85
>3a4d18		0c c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0
>3a4d28		0e c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28
>3a4d38		18 60 28 38 60 08 20 af 4c b0 1f 08 c2 20 48 a9
>3a4d48		00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20 29
>3a4d58		ff 00 20 f8 1b e2 20 dc d4 08 c2 30 a0 09 00 b7
>3a4d68		08 85 23 c8 c8 b7 08 85 25 e2 20 a0 00 00 b7 08
>3a4d78		85 27 28 60 08 c2 20 18 a5 e1 69 10 00 85 08 e2
>3a4d88		20 a5 e3 69 00 85 0a c5 bc 90 27 c2 20 a5 08 c5
>3a4d98		ba 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4da8		09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc
>3a4db8		d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3 85 c2 c2 20
>3a4dc8		a5 08 85 e1 e2 20 a5 0a 85 e3 28 60 08 e2 20 a5
>3a4dd8		27 c5 ea f0 33 a5 ea c9 00 d0 05 20 c8 04 80 2f
>3a4de8		c9 01 d0 05 20 36 06 80 26 08 c2 20 48 a9 00 08
>3a4df8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4e08		20 f8 1b e2 20 dc d4 08 c9 02 d0 03 20 f9 14 c2
>3a4e18		10 20 7c 4d c2 30 18 a5 c0 69 01 00 85 08 e2 20
>3a4e28		a5 c2 69 00 85 0a a0 00 00 a9 00 97 08 c8 c0 08
>3a4e38		00 d0 f8 a0 00 00 b7 e7 f0 10 20 cd 03 20 69 4c
>3a4e48		90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09 00 a5
>3a4e58		23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0 0d 00 97 c0
>3a4e68		c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0 85 e4 e2 20
>3a4e78		a5 c2 85 e6 e2 20 a0 00 00 a5 27 97 c0 c9 02 f0
>3a4e88		02 28 60 c2 20 a5 23 85 c0 e2 20 a5 25 85 c2 20
>3a4e98		15 11 20 2a 11 80 ea 08 c2 30 a5 e4 d0 06 e2 20
>3a4ea8		a5 e6 f0 05 20 af 4c b0 05 20 d4 4d 80 4e e2 20
>3a4eb8		a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20 c8 04 80
>3a4ec8		2c c9 01 d0 05 20 36 06 80 23 08 c2 20 48 a9 00
>3a4ed8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4ee8		00 20 f8 1b e2 20 dc d4 08 c9 02 f0 11 c2 30 a0
>3a4ef8		09 00 a5 23 97 08 c8 c8 a5 25 97 08 28 60 20 f9
>3a4f08		14 a0 09 00 b7 08 85 c0 c8 c8 e2 20 b7 08 85 c2
>3a4f18		20 15 11 20 49 11 e2 20 a5 27 c9 02 f0 02 80 cd
>3a4f28		c2 20 a5 23 85 c0 e2 20 a5 25 85 c2 20 15 11 20
>3a4f38		2a 11 80 b9 08 20 be 1e e2 20 a7 00 20 59 03 90
>3a4f48		42 c2 20 a5 00 85 e7 e2 20 a5 02 85 e9 20 9d 1e
>3a4f58		a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20 69 4c b0
>3a4f68		ec a9 01 80 0c 20 9d 1e a9 00 80 05 20 9d 1e a9
>3a4f78		02 85 ea 20 fe 1f c9 8f d0 06 a5 ea 09 80 85 ea
>3a4f88		28 38 60 28 18 60 08 c2 20 18 a5 23 65 29 85 23
>3a4f98		a5 25 65 2b 85 25 28 60 08 c2 20 38 a5 23 e5 29
>3a4fa8		85 23 a5 25 e5 2b 85 25 28 60 08 c2 20 3b 38 e9
>3a4fb8		0a 00 1b c2 30 a9 00 00 83 01 83 03 83 05 83 07
>3a4fc8		83 09 a5 25 10 18 a9 00 80 83 01 a5 25 49 ff ff
>3a4fd8		85 25 a5 23 49 ff ff 1a 85 23 d0 02 e6 25 a5 2b
>3a4fe8		10 1a a3 01 49 00 80 83 01 a5 2b 49 ff ff 85 2b
>3a4ff8		a5 29 49 ff ff 1a 85 29 d0 02 e6 2b a5 25 f0 04
>3a5008		a5 2b d0 5a a5 23 8f 00 01 00 a5 29 8f 02 01 00
>3a5018		af 04 01 00 83 03 af 06 01 00 83 05 a5 25 8f 00
>3a5028		01 00 a5 29 8f 02 01 00 18 af 04 01 00 63 05 83
>3a5038		05 af 06 01 00 63 07 83 07 a5 23 8f 00 01 00 a5
>3a5048		2b 8f 02 01 00 18 af 04 01 00 63 05 83 05 af 06
>3a5058		01 00 63 07 83 07 a3 07 f0 23 a3 09 f0 1f 08 c2
>3a5068		20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00
>3a5078		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 c2 30 a3
>3a5088		01 10 16 a3 05 49 ff ff 83 05 a3 03 49 ff ff 1a
>3a5098		83 03 d0 05 a3 05 1a 83 05 a3 03 85 23 a3 05 85
>3a50a8		25 c2 20 3b 18 69 0a 00 1b 28 60 08 c2 20 a5 23
>3a50b8		c5 29 a5 25 e5 2b 50 03 49 00 80 30 06 64 23 64
>3a50c8		25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2 20 a5
>3a50d8		23 c5 29 d0 0c a5 25 c5 2b d0 06 64 23 64 25 80
>3a50e8		16 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 10 eb
>3a50f8		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 2b c5 25
>3a5108		d0 0f a5 29 c5 23 d0 09 a9 ff ff 85 23 85 25 80
>3a5118		04 64 23 64 25 28 60 08 c2 20 a5 2b c5 25 d0 0c
>3a5128		a5 29 c5 23 d0 06 64 23 64 25 80 07 a9 ff ff 85
>3a5138		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5 25
>3a5148		c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 29 c5
>3a5158		23 a5 2b e5 25 50 03 49 00 80 30 e8 64 23 64 25
>3a5168		28 60 08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b d0
>3a5178		09 a9 ff ff 85 23 85 25 80 13 a5 23 c5 29 a5 25
>3a5188		e5 2b 50 03 49 00 80 30 e8 64 23 64 25 28 60 08
>3a5198		c2 20 8f 12 01 00 8a 8f 10 01 00 af 16 01 00 aa
>3a51a8		af 14 01 00 28 60 08 e2 20 a9 49 8f 00 e2 af a9
>3a51b8		02 8f 01 e2 af c2 20 a9 00 00 8f 08 e2 af 8f 0a
>3a51c8		e2 af a5 23 8f 0c e2 af a5 25 8f 0e e2 af ea ea
>3a51d8		ea ea ea ea af 0c e2 af 85 23 af 0e e2 af 85 25
>3a51e8		e2 20 a5 24 85 23 a5 25 85 24 a5 26 85 25 30 04
>3a51f8		64 26 80 04 a9 ff 85 26 c2 20 a5 25 0a 66 25 66
>3a5208		23 a5 25 0a 66 25 66 23 a5 25 0a 66 25 66 23 a5
>3a5218		25 0a 66 25 66 23 e2 20 a9 00 85 27 28 60 08 e2
>3a5228		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>3a5238		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>3a5248		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5258		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>3a5268		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5278		12 53 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>3a5288		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5298		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a52a8		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>3a52b8		85 23 af 0a e2 af 85 25 28 60 20 12 53 80 f9 08
>3a52c8		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>3a52d8		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>3a52e8		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>3a52f8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>3a5308		af 85 25 28 60 20 12 53 80 f9 e2 20 89 01 f0 20
>3a5318		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>3a5328		d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08
>3a5338		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5348		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a5358		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5368		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 f8
>3a5378		1b e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>3a5388		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>3a5398		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>3a53a8		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>3a53b8		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>3a53c8		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>3a53d8		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>3a53e8		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>3a53f8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>3a5408		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>3a5418		08 e2 20 38 e9 30 20 f1 03 c2 20 29 ff 00 18 65
>3a5428		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>3a5438		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>3a5448		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>3a5458		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>3a5468		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>3a5478		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>3a5488		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>3a5498		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>3a54a8		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>3a54b8		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>3a54c8		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>3a54d8		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>3a54e8		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>3a54f8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>3a5508		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>3a5518		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>3a5528		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>3a5538		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 38
>3a5548		57 c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>3a5558		23 a5 5b 85 25 20 7c 52 c2 20 a5 55 85 29 a5 57
>3a5568		85 2b 20 31 52 c2 20 a5 23 85 29 a5 25 85 2b 20
>3a5578		a2 54 20 c7 52 c2 20 a5 65 f0 07 a5 25 09 00 80
>3a5588		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>3a5598		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>3a55a8		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>3a55b8		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 72 03 90
>3a55c8		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a55d8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a55e8		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 72
>3a55f8		03 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>3a5608		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 83
>3a5618		03 b0 02 80 af 20 34 54 c8 b7 00 20 83 03 b0 f5
>3a5628		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>3a5638		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>3a5648		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>3a5658		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>3a5668		84 54 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>3a5678		20 18 54 c8 b7 00 c9 2e f0 08 20 72 03 b0 f1 82
>3a5688		9e ff c2 20 20 38 57 c2 20 a5 23 85 55 a5 25 85
>3a5698		57 64 23 64 25 e2 20 80 1a 20 18 54 c2 20 a5 5d
>3a56a8		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>3a56b8		5d e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20 72
>3a56c8		03 b0 d6 c2 20 20 38 57 c2 20 a5 23 85 59 a5 25
>3a56d8		85 5b 64 23 64 25 20 3b 55 e2 20 82 5f ff c2 20
>3a56e8		20 38 57 c2 20 a5 23 85 59 a5 25 85 5b 64 23 64
>3a56f8		25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20 72
>3a5708		03 b0 12 82 be fe a9 01 85 69 c8 b7 00 20 72 03
>3a5718		b0 03 82 af fe 20 18 54 c8 b7 00 20 72 03 b0 f5
>3a5728		c2 20 a5 23 85 61 a5 25 85 63 20 3b 55 82 0d ff
>3a5738		08 e2 20 a9 96 85 0c a9 00 85 0d c2 30 a5 23 d0
>3a5748		0d a5 25 d0 09 e2 20 a9 01 85 27 82 6e 00 a5 25
>3a5758		10 17 c2 20 38 a9 00 00 e5 23 85 23 a9 00 00 e5
>3a5768		25 85 25 e2 20 a9 80 85 0d c2 20 a5 25 29 80 ff
>3a5778		f0 1c c9 80 00 f0 2b 46 25 66 23 e2 20 e6 0c c2
>3a5788		20 a5 25 29 80 ff c9 80 00 d0 ec 82 14 00 06 23
>3a5798		26 25 e2 20 c6 0c c2 20 a5 25 29 80 ff c9 80 00
>3a57a8		d0 ec e2 20 a5 25 29 7f 85 25 a5 0c 4a 05 0d 85
>3a57b8		26 a9 00 6a 05 25 85 25 a9 01 85 27 28 60 c2 20
>3a57c8		20 04 54 90 0a e2 20 a9 00 85 27 64 28 80 05 c2
>3a57d8		20 20 ae 51 60 da 08 c2 20 a5 25 48 a5 23 48 20
>3a57e8		26 52 20 04 54 b0 11 a5 25 89 00 80 d0 05 a9 01
>3a57f8		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>3a5808		25 28 fa 60 08 c2 30 20 dd 57 c9 ff ff d0 05 20
>3a5818		a4 04 80 03 20 b6 04 28 60 08 c2 30 20 dd 57 c9
>3a5828		01 00 d0 05 20 a4 04 80 03 20 b6 04 28 60 08 c2
>3a5838		30 20 dd 57 c9 00 00 d0 05 20 a4 04 80 03 20 b6
>3a5848		04 28 60 08 c2 30 20 dd 57 c9 01 00 f0 05 20 a4
>3a5858		04 80 03 20 b6 04 28 60 08 c2 30 20 dd 57 c9 ff
>3a5868		ff f0 05 20 a4 04 80 03 20 b6 04 28 60 08 c2 30
>3a5878		20 dd 57 c9 00 00 f0 05 20 a4 04 80 03 20 b6 04
>3a5888		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>3a5898		e2 20 c9 80 90 0a 48 a9 2d 20 8a 58 68 49 ff 1a
>3a58a8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 97 51
>3a58b8		18 69 30 00 20 8a 58 8a a2 0a 00 20 97 51 18 69
>3a58c8		30 00 20 8a 58 8a 18 69 30 00 20 8a 58 28 fa 60
>3a58d8		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>3a58e8		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>3a58f8		04 54 90 19 20 07 13 e2 20 a0 00 00 a9 20 97 16
>3a5908		c8 a9 30 97 16 c8 a9 00 97 16 82 cf 00 e2 20 a5
>3a5918		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>3a5928		83 03 c2 20 af fe 59 3a 85 29 af 00 5a 3a 85 2b
>3a5938		20 dd 57 89 00 80 d0 13 20 c8 53 a3 03 1a 83 03
>3a5948		20 dd 57 c9 00 00 b0 f0 82 10 00 20 7f 53 a3 03
>3a5958		3a 83 03 20 dd 57 c9 ff ff f0 f0 e2 30 a5 25 0a
>3a5968		a5 26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09
>3a5978		80 85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20
>3a5988		64 26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00
>3a5998		e5 23 85 23 a9 00 00 e5 25 85 25 20 66 13 c2 20
>3a59a8		a5 16 85 23 a5 18 85 25 20 d8 58 e2 20 c8 a9 00
>3a59b8		97 23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e
>3a59c8		97 23 e2 20 18 a3 03 69 05 83 06 f0 19 20 d8 58
>3a59d8		a9 45 20 8a 58 a3 06 20 96 58 80 0a c2 20 a5 16
>3a59e8		85 23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18
>3a59f8		69 06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04
>3a5a08		b5 3f f3 04 35 3f 08 20 15 11 c2 20 a9 01 00 85
>3a5a18		23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20 29 ff
>3a5a28		00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9
>3a5a38		00 00 85 2b 20 d3 25 e8 e8 88 d0 eb c2 20 a9 04
>3a5a48		00 85 29 a9 00 00 85 2b 20 d3 25 e2 20 af 00 4d
>3a5a58		00 85 0c a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c
>3a5a68		85 23 a5 25 69 00 00 85 25 d0 29 e2 20 a5 ea 09
>3a5a78		80 a6 23 20 d9 0e e2 20 af 00 4d 00 87 c0 a0 01
>3a5a88		00 a2 00 00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23
>3a5a98		e8 c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5aa8		a9 09 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a5ab8		dc d4 08 e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00
>3a5ac8		85 09 a5 c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7
>3a5ad8		c3 85 0c e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9
>3a5ae8		00 87 08 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69
>3a5af8		00 00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60
>3a5b08		08 c2 20 64 08 64 0a e2 20 af 00 4d 00 85 8f 64
>3a5b18		90 a2 01 00 e2 20 a7 c0 c5 8f f0 1f 08 c2 20 48
>3a5b28		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>3a5b38		29 ff 00 20 f8 1b e2 20 dc d4 08 c9 01 f0 3a a0
>3a5b48		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>3a5b58		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>3a5b68		20 d3 25 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>3a5b78		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>3a5b88		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>3a5b98		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>3a5ba8		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>3a5bb8		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>3a5bc8		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>3a5bd8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a5be8		f8 1b e2 20 dc d4 08 08 20 15 11 e2 20 a0 00 00
>3a5bf8		b7 c3 29 7f c5 27 d0 28 a5 27 48 c2 20 a5 25 48
>3a5c08		a5 23 48 20 08 5b 68 85 23 68 85 25 e2 20 68 85
>3a5c18		27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08 28 60
>3a5c28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a5c38		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 08
>3a5c48		20 15 11 f4 00 00 f4 00 00 e2 20 48 20 08 5b e2
>3a5c58		20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02 00 b7
>3a5c68		08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27 28 60
>3a5c78		da 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5
>3a5c88		25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23 89 00 fc
>3a5c98		d0 05 20 e5 42 80 2e a2 0a 00 46 25 66 23 ca d0
>3a5ca8		f9 20 e5 42 e2 20 a9 4b 20 18 00 c2 20 80 16 a2
>3a5cb8		14 00 46 25 66 23 ca d0 f9 20 e5 42 e2 20 a9 4d
>3a5cc8		20 18 00 c2 20 28 2b fa 60 0b 08 c2 30 a9 00 00
>3a5cd8		8f b6 08 00 8f b8 08 00 e2 20 20 fe 1f c9 00 f0
>3a5ce8		08 20 a6 1a 20 5a 05 80 11 c2 20 a9 00 00 85 23
>3a5cf8		85 25 e2 20 a9 02 85 27 c2 20 20 32 5e 22 08 11
>3a5d08		00 b0 22 20 e3 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a5d18		e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a5d28		e2 20 dc d4 08 20 4e 02 08 c2 20 48 a9 20 03 5b
>3a5d38		68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9 00 c9 e5
>3a5d48		d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0 03 82 a9
>3a5d58		00 89 02 f0 03 82 83 00 29 0f c9 0f d0 03 82 7a
>3a5d68		00 a0 00 00 b7 18 20 18 00 c8 c0 08 00 d0 f5 a9
>3a5d78		20 20 18 00 a0 08 00 b7 18 20 18 00 c8 c0 0b 00
>3a5d88		d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89 10 d0 1e
>3a5d98		c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8 b7 18 8f
>3a5da8		25 08 00 e2 20 a9 00 8f 27 08 00 20 78 5c a9 09
>3a5db8		20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89 01 f0 05
>3a5dc8		a9 52 20 18 00 89 04 f0 05 a9 53 20 18 00 89 10
>3a5dd8		f0 05 a9 44 20 18 00 ea 20 4e 02 20 65 02 22 0c
>3a5de8		11 00 90 03 82 41 ff 20 e3 5e 08 c2 20 48 a9 00
>3a5df8		08 5b 68 28 20 e2 1e 28 2b 60 08 c2 20 48 a9 20
>3a5e08		03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9 5b 20 18
>3a5e18		00 a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08
>3a5e28		00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08 c2 20 48
>3a5e38		a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20 a9 3a 00
>3a5e48		85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0
>3a5e58		f8 c2 20 a9 73 f0 8f 81 f2 3a a9 3a 00 8f 83 f2
>3a5e68		3a af 23 08 00 8f 75 f2 3a af 25 08 00 8f 77 f2
>3a5e78		3a 28 2b 60 08 c2 30 20 be 1e 20 a6 1a 20 5a 05
>3a5e88		20 32 5e e2 20 a9 2c 85 37 20 df 1f b0 0f c2 20
>3a5e98		a9 ff ff 8f 54 03 00 8f 56 03 00 80 17 20 9d 1e
>3a5ea8		20 a6 1a 20 c8 04 c2 20 a5 23 8f 54 03 00 a5 25
>3a5eb8		8f 56 03 00 22 18 11 00 b0 1f 08 c2 20 48 a9 00
>3a5ec8		08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff
>3a5ed8		00 20 f8 1b e2 20 dc d4 08 28 60 8b 0b 08 08 c2
>3a5ee8		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a5ef8		68 28 e2 20 af 2e 03 00 85 23 a9 00 85 24 85 25
>3a5f08		85 26 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9 46
>3a5f18		5f 85 e7 20 9f 4e e2 20 af 20 03 00 85 23 a9 00
>3a5f28		85 24 85 25 85 26 a9 00 85 27 85 ea a9 3a 85 e9
>3a5f38		c2 20 a9 4e 5f 85 e7 20 9f 4e 28 2b ab 60 44 4f
>3a5f48		53 53 54 41 54 00 42 49 4f 53 53 54 41 54 00 08
>3a5f58		c2 30 20 be 1e 20 a6 1a 20 5a 05 a5 23 8f 60 03
>3a5f68		00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56
>3a5f78		03 00 22 24 11 00 b0 25 20 f8 1b 20 e3 5e 08 c2
>3a5f88		20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00
>3a5f98		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 20 f8 1b
>3a5fa8		28 60 08 c2 30 20 be 1e 20 a6 1a 20 5a 05 20 32
>3a5fb8		5e a9 00 00 8f 54 03 00 a9 01 00 8f 56 03 00 20
>3a5fc8		70 4b 22 18 11 00 b0 22 20 e3 5e 08 c2 20 48 a9
>3a5fd8		00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20 29
>3a5fe8		ff 00 20 f8 1b e2 20 dc d4 08 20 e3 5e c2 20 a2
>3a5ff8		12 00 18 bf 73 f2 3a 69 00 00 85 92 bf 75 f2 3a
>3a6008		69 01 00 85 94 e2 20 a9 00 87 92 c2 20 a9 00 00
>3a6018		85 7a a9 01 00 85 7c a2 00 00 e2 20 a7 7a f0 2a
>3a6028		c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 7a
>3a6038		d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f 20 0a 25
>3a6048		c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00 f0 0a e2
>3a6058		20 a9 00 9d 00 4f 20 0a 25 28 60 08 c2 30 20 be
>3a6068		1e 20 a6 1a 20 5a 05 20 32 5e e2 20 a9 2c 20 aa
>3a6078		1f c2 20 20 a6 1a 20 c8 04 a5 23 8f 50 03 00 a5
>3a6088		25 8f 52 03 00 e2 20 a9 2c c2 20 20 aa 1f 20 a6
>3a6098		1a 20 c8 04 a5 23 8f 58 03 00 a5 25 8f 5a 03 00
>3a60a8		22 1c 11 00 b0 22 20 e3 5e 08 c2 20 48 a9 00 08
>3a60b8		5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00
>3a60c8		20 f8 1b e2 20 dc d4 08 20 e3 5e 28 60 da 5a 08
>3a60d8		a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04 f0 04 e8
>3a60e8		c8 80 f5 28 7a fa 60 08 c2 30 20 be 1e 20 a6 1a
>3a60f8		20 5a 05 20 32 5e a9 00 00 85 a6 e2 20 a9 01 85
>3a6108		a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9 ff ff 85
>3a6118		a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff 85 59 a9
>3a6128		ff 7f 85 5b 20 69 16 e2 20 a9 80 85 b4 c2 20 c6
>3a6138		ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58 03 00 a9
>3a6148		01 00 8f 52 03 00 69 00 00 8f 5a 03 00 22 1c 11
>3a6158		00 b0 22 20 e3 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a6168		e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00 20 f8 1b
>3a6178		e2 20 dc d4 08 20 e3 5e 28 60 08 c2 30 20 be 1e
>3a6188		20 a6 1a 20 5a 05 20 d5 60 22 04 11 00 b0 22 20
>3a6198		e3 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13
>3a61a8		8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4
>3a61b8		08 20 e3 5e 28 60 da 08 e2 20 c9 61 90 08 c9 7b
>3a61c8		b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df e9 61
>3a61d8		3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18 fa
>3a61e8		6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22
>3a61f8		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 a6 1a
>3a6208		20 5a 05 20 d5 60 22 10 11 00 b0 22 20 e3 5e 08
>3a6218		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14 8f d3 08
>3a6228		00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 e2 20
>3a6238		a9 2c 20 aa 1f c2 20 20 a6 1a 20 5a 05 ad 38 03
>3a6248		85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9 20 95 7e
>3a6258		e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7 23 f0 76
>3a6268		c9 2e f0 39 22 be 61 3a b0 1f 08 c2 20 48 a9 00
>3a6278		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>3a6288		00 20 f8 1b e2 20 dc d4 08 95 7e c8 e8 c0 08 00
>3a6298		d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5 c8 a2 08
>3a62a8		00 b7 23 f0 31 22 be 61 3a b0 22 20 e3 5e 08 c2
>3a62b8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a62c8		c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 95 7e c8
>3a62d8		e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5 7e 97 08
>3a62e8		e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20 e3 5e
>3a62f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15 8f d3
>3a6308		08 00 c2 20 29 ff 00 20 f8 1b e2 20 dc d4 08 20
>3a6318		e3 5e 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a6328		30 20 a6 1a 20 5a 05 a5 23 8f 64 03 00 a5 25 8f
>3a6338		66 03 00 e2 20 a9 2c 20 aa 1f c2 20 20 a6 1a 20
>3a6348		5a 05 a5 23 8f 68 03 00 a5 25 8f 6a 03 00 22 30
>3a6358		11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a6368		a9 16 8f d3 08 00 c2 20 29 ff 00 20 f8 1b e2 20
>3a6378		dc d4 08 28 60 5c 3d 7d 3a 5c 8e 7b 3a 5c 3e 7d
>3a6388		3a 5c ba 6c 3a 5c 17 6d 3a 5c 4a 6c 3a 5c d0 6b
>3a6398		3a 5c 4d 71 3a 5c 3b 68 3a 5c 68 6b 3a 5c 23 6b
>3a63a8		3a 5c ad 6a 3a 5c 4c 7c 3a 5c 49 69 3a 5c 9c 67
>3a63b8		3a 5c c7 7c 3a 5c 77 68 3a 5c 40 7d 3a 5c 39 7d
>3a63c8		3a 5c 66 6a 3a 5c 41 7d 3a 18 fb c2 20 a9 ff fe
>3a63d8		1b 58 5c de 63 3a c2 30 22 9c 67 3a 20 08 00 20
>3a63e8		0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 dc 03 ab
>3a63f8		22 81 63 3a 22 89 63 3a 80 e2 08 8b e2 20 a9 3a
>3a6408		48 ab c2 10 a2 15 64 20 db 02 ab 28 6b 41 20 3c
>3a6418		73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62 6c 79
>3a6428		3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61 20 70
>3a6438		72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61 72 74
>3a6448		31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>3a6458		20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20
>3a6468		20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65 63 74
>3a6478		69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d
>3a6488		44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>3a6498		20 20 44 69 73 61 73 73 65 6d 62 6c 65 20 61 20
>3a64a8		70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74 61 72
>3a64b8		74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>3a64c8		20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f
>3a64d8		66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20 61 20
>3a64e8		62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65 73 73
>3a64f8		5d 0d 20 20 53 74 61 72 74 20 65 78 65 63 75 74
>3a6508		69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74 69 6f
>3a6518		6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d 20 2d
>3a6528		20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61 74
>3a6538		69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20
>3a6548		4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69
>3a6558		6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20
>3a6568		3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62
>3a6578		79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20
>3a6588		48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65 73 20
>3a6598		69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20
>3a65a8		20 4c 4f 41 44 20 20 20 20 20 20 20 20 20 22 46
>3a65b8		69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74 69 6f
>3a65c8		6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e
>3a65d8		64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20 76 61
>3a65e8		6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52
>3a65f8		20 2d 20 44 69 73 70 6c 61 79 20 74 68 65 20 76
>3a6608		61 6c 75 65 73 20 6f 66 20 74 68 65 20 72 65 67
>3a6618		69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c
>3a6628		41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>3a6638		3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>3a6648		44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65 20 74
>3a6658		68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74
>3a6668		68 65 20 72 65 67 69 73 74 65 72 73 0d 0d 53 20
>3a6678		20 20 20 20 53 41 56 45 20 20 20 20 20 20 20 20
>3a6688		20 22 46 69 6c 65 22 20 3c 73 74 61 72 74 3e 20
>3a6698		3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74 3e 20
>3a66a8		3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61 74 69
>3a66b8		6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72 20 28
>3a66c8		63 6f 70 79 29 20 64 61 74 61 20 77 69 74 68 69
>3a66d8		6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74
>3a66e8		65 3e 0d 20 20 53 65 74 20 74 68 65 20 72 65 67
>3a66f8		69 73 74 65 72 20 77 69 64 74 68 20 66 6c 61 67
>3a6708		73 20 66 6f 72 20 74 68 65 20 64 69 73 61 73 73
>3a6718		65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65 74 75
>3a6728		72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c
>3a6738		73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20 5b 62
>3a6748		79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64
>3a6758		61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f
>3a6768		20 2d 20 44 69 73 70 6c 61 79 20 61 20 73 68 6f
>3a6778		72 74 20 68 65 6c 70 20 73 63 72 65 65 6e 0d 0d
>3a6788		00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d
>3a6798		85 4e 28 6b 20 e4 00 08 e2 20 48 a9 3a 48 ab 68
>3a67a8		28 a2 7e 7d 20 db 02 e2 20 a9 3b 20 18 00 a9 20
>3a67b8		20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0
>3a67c8		03 00 a2 42 02 20 5e 02 c2 20 a9 20 00 20 18 00
>3a67d8		af 44 02 00 20 eb 02 a9 20 00 20 18 00 af 46 02
>3a67e8		00 20 eb 02 a9 20 00 20 18 00 af 48 02 00 20 eb
>3a67f8		02 a9 20 00 20 18 00 af 4a 02 00 20 eb 02 a9 20
>3a6808		00 20 18 00 af 4e 02 00 20 05 03 a9 20 00 20 18
>3a6818		00 20 18 00 af 4c 02 00 20 eb 02 a9 20 00 20 18
>3a6828		00 08 e2 20 ad 4f 02 22 97 7a 3a 28 20 4e 02 20
>3a6838		4e 02 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a6848		20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>3a6858		0d c5 11 d0 06 20 4e 02 2b 28 6b c2 20 18 a5 0d
>3a6868		69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>3a6878		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5
>3a6888		17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>3a6898		15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>3a68a8		2e 69 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a68b8		69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>3a68c8		a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>3a68d8		19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>3a68e8		85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>3a68f8		a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>3a6908		c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>3a6918		85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>3a6928		e9 00 85 16 80 c4 20 4e 02 2b 28 6b 08 e2 20 c9
>3a6938		21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>3a6948		6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a6958		a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>3a6968		c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a6978		85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a6988		c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a6998		85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a69a8		34 85 1b e2 20 a7 19 22 34 69 3a b0 02 a9 3f 99
>3a69b8		7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a69c8		69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e 08 a9
>3a69d8		3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 05 03
>3a69e8		a9 3a 20 18 00 c2 20 a5 32 20 eb 02 c2 20 a9 08
>3a69f8		00 85 47 e2 20 a9 20 20 18 00 a7 32 20 05 03 22
>3a6a08		76 7a 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a6a18		20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08
>3a6a28		20 db 02 20 4e 02 20 65 02 a5 34 c5 13 90 0f c2
>3a6a38		20 a5 32 c5 11 90 07 20 4e 02 2b ab 28 6b 4c 9a
>3a6a48		69 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad 92 08
>3a6a58		f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b
>3a6a68		8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9
>3a6a78		00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>3a6a88		20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 49 6a 3a
>3a6a98		a0 00 00 b9 7e 08 87 32 22 76 7a 3a c8 c4 47 d0
>3a6aa8		f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>3a6ab8		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a6ac8		a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 49 6a 3a
>3a6ad8		c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>3a6ae8		d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>3a6af8		7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>3a6b08		34 85 4c 22 20 75 3a e2 20 a9 20 20 18 00 22 76
>3a6b18		7a 3a 80 c6 20 4e 02 ab 2b 28 6b 08 c2 20 48 a9
>3a6b28		48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>3a6b38		40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>3a6b48		02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>3a6b58		3a 48 a9 6b 48 a9 63 48 4c 9a 6b ea 5c 04 00 3a
>3a6b68		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9
>3a6b78		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a6b88		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a6b98		00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2 08 00
>3a6ba8		af 42 02 00 8f a5 08 00 af 41 02 00 8f a4 08 00
>3a6bb8		af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2 20 af
>3a6bc8		44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9
>3a6bd8		3a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a6be8		10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>3a6bf8		15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 42
>3a6c08		7d 20 db 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>3a6c18		00 e2 20 a7 4a d7 11 f0 09 22 20 75 3a a9 20 20
>3a6c28		18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>3a6c38		00 85 4c c8 c4 47 d0 d9 20 4e 02 20 4e 02 ab 2b
>3a6c48		28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a6c58		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6
>3a6c68		0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>3a6c78		44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>3a6c88		19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>3a6c98		1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>3a6ca8		8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>3a6cb8		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a6cc8		20 c2 10 a2 00 00 bf af 7d 3a f0 18 c7 08 f0 03
>3a6cd8		e8 80 f3 c2 20 8a 0a aa bf f0 6c 3a 8f 2f 08 00
>3a6ce8		22 14 6d 3a ab 2b 28 6b 8d 63 95 63 99 63 9d 63
>3a6cf8		a1 63 a5 63 a9 63 ad 63 b1 63 b5 63 91 63 b9 63
>3a6d08		bd 63 c1 63 89 67 c5 63 c9 63 02 64 6c 2f 08 08
>3a6d18		8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>3a6d28		c9 02 b0 03 4c bd 6e c2 20 a5 0d 85 32 a5 0f 85
>3a6d38		34 c2 20 22 bf 70 3a c9 ff ff f0 10 85 54 e2 20
>3a6d48		a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 4e 02 08
>3a6d58		e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 f4 6e 20 db
>3a6d68		02 4c bd 6e 20 4e 02 08 e2 20 48 a9 3a 48 ab 68
>3a6d78		28 c2 10 a2 03 6f 20 db 02 4c bd 6e e2 20 22 f5
>3a6d88		70 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>3a6d98		c9 13 f0 04 c9 08 f0 00 22 ed 6f 3a b0 03 4c 86
>3a6da8		6e 87 32 22 76 7a 3a 08 e2 20 48 a9 00 48 ab 68
>3a6db8		28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>3a6dc8		12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>3a6dd8		03 4c b4 6e c2 20 29 ff 00 aa e2 20 bf bc 79 3a
>3a6de8		c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>3a6df8		a5 54 c9 34 76 f0 26 c9 98 76 f0 2a c9 18 76 f0
>3a6e08		1c c9 1c 76 f0 17 c9 24 76 f0 12 c9 0c 76 f0 0d
>3a6e18		c9 20 76 f0 08 c9 08 76 f0 03 4c a0 6d e2 20 a9
>3a6e28		12 85 4f 4c a0 6d e2 20 a9 16 85 4f 4c a0 6d 22
>3a6e38		30 6f 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98
>3a6e48		08 97 56 22 76 7a 3a a0 01 00 b9 98 08 97 56 22
>3a6e58		76 7a 3a a0 00 00 b9 98 08 97 56 22 76 7a 3a e2
>3a6e68		20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>3a6e78		34 86 4c 22 20 75 3a a9 20 20 18 00 80 37 20 4e
>3a6e88		02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 c1 6e
>3a6e98		20 db 02 80 20 20 4e 02 08 e2 20 48 a9 3a 48 ab
>3a6ea8		68 28 c2 10 a2 11 6f 20 db 02 80 09 a5 4f 29 c0
>3a6eb8		d0 95 4c 5b 6e 2b ab 28 6b 41 64 64 72 65 73 73
>3a6ec8		69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>3a6ed8		69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>3a6ee8		73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>3a6ef8		6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>3a6f08		70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>3a6f18		65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>3a6f28		6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48
>3a6f38		08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>3a6f48		32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>3a6f58		a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>3a6f68		e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>3a6f78		a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>3a6f88		d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>3a6f98		d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>3a6fa8		18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>3a6fb8		48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08
>3a6fc8		e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>3a6fd8		26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>3a6fe8		50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68
>3a6ff8		28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29
>3a7008		3f 85 4a c2 30 a2 00 00 a0 00 00 bd ba 76 f0 1b
>3a7018		c5 54 d0 0d e2 20 b9 bc 78 29 3f c5 4a f0 07 c2
>3a7028		20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>3a7038		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0
>3a7048		00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>3a7058		36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>3a7068		28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>3a7078		30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>3a7088		61 b0 02 80 de 29 df 22 ae 6f 3a 80 cb 0b 08 c2
>3a7098		20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>3a70a8		03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>3a70b8		69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b
>3a70c8		68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 48 75 85
>3a70d8		03 a9 3a 00 85 05 22 37 70 3a b0 0d 22 95 70 3a
>3a70e8		a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>3a70f8		c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5
>3a7108		17 85 38 a9 d4 79 85 03 a9 3a 00 85 05 22 37 70
>3a7118		3a b0 22 22 95 70 3a c2 20 18 a5 03 69 01 00 85
>3a7128		03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>3a7138		a9 ff ff 80 0d 22 95 70 3a e2 20 a7 03 c2 20 29
>3a7148		ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b
>3a7158		68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16
>3a7168		c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>3a7178		a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>3a7188		85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>3a7198		a5 34 69 00 85 13 22 b9 71 3a e2 20 a5 34 c5 13
>3a71a8		90 f4 c2 20 a5 32 c5 11 90 ec 20 4e 02 2b ab 28
>3a71b8		6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>3a71c8		c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2
>3a71d8		20 a5 02 85 1a 22 20 75 3a a9 20 20 18 00 c2 20
>3a71e8		18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>3a71f8		e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>3a7208		96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00
>3a7218		8f 96 08 00 68 c2 20 29 ff 00 0a aa bf ba 76 3a
>3a7228		aa 22 9a 74 3a e2 20 a7 00 aa bf bc 78 3a 22 76
>3a7238		7a 3a 22 47 72 3a 20 4e 02 20 65 02 2b 28 6b 08
>3a7248		e2 20 48 29 3f 0a c2 10 aa 68 7c 55 72 85 72 a0
>3a7258		72 a7 72 cc 72 d3 72 ee 72 10 73 21 73 5e 73 66
>3a7268		73 77 73 88 73 8f 73 b4 73 e1 73 4d 73 32 73 ff
>3a7278		72 d4 73 de 73 f2 73 21 74 cf 73 32 74 a9 28 20
>3a7288		18 00 22 49 74 3a a9 2c 20 18 00 a9 58 20 18 00
>3a7298		a9 29 20 18 00 4c 43 74 22 49 74 3a 4c 43 74 e2
>3a72a8		20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>3a72b8		2f 96 08 00 d0 07 22 53 74 3a 4c 43 74 22 49 74
>3a72c8		3a 4c 43 74 22 53 74 3a 4c 43 74 a9 28 20 18 00
>3a72d8		22 49 74 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>3a72e8		20 18 00 4c 43 74 22 49 74 3a a9 2c 20 18 00 a9
>3a72f8		58 20 18 00 4c 43 74 22 49 74 3a a9 2c 20 18 00
>3a7308		a9 59 20 18 00 4c 43 74 22 53 74 3a a9 2c 20 18
>3a7318		00 a9 59 20 18 00 4c 43 74 22 53 74 3a a9 2c 20
>3a7328		18 00 a9 58 20 18 00 4c 43 74 a9 28 20 18 00 22
>3a7338		53 74 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a7348		18 00 4c 43 74 a9 28 20 18 00 22 49 74 3a a9 29
>3a7358		20 18 00 4c 43 74 a9 41 20 18 00 4c 47 74 22 49
>3a7368		74 3a a9 2c 20 18 00 a9 53 20 18 00 4c 43 74 a9
>3a7378		5b 20 18 00 22 49 74 3a a9 5d 20 18 00 4c 43 74
>3a7388		22 61 74 3a 4c 47 74 a9 28 20 18 00 22 49 74 3a
>3a7398		a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>3a73a8		2c 20 18 00 a9 59 20 18 00 4c 43 74 a9 5b 20 18
>3a73b8		00 22 49 74 3a a9 5d 20 18 00 a9 2c 20 18 00 a9
>3a73c8		59 20 18 00 4c 43 74 a0 02 00 80 03 a0 01 00 22
>3a73d8		c7 74 3a 4c 47 74 4c 47 74 22 61 74 3a a9 2c 20
>3a73e8		18 00 a9 58 20 18 00 4c 47 74 a9 23 20 18 00 8b
>3a73f8		a5 02 48 ab a6 00 e8 a0 01 00 22 5e 02 3a a9 2c
>3a7408		20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 5e 02
>3a7418		3a ab 22 76 7a 3a 4c 43 74 a9 28 20 18 00 22 53
>3a7428		74 3a a9 29 20 18 00 4c 43 74 a9 5b 20 18 00 22
>3a7438		53 74 3a a9 5d 20 18 00 4c 43 74 22 76 7a 3a 28
>3a7448		6b 08 e2 20 a7 00 20 05 03 28 6b 08 c2 30 a7 00
>3a7458		20 eb 02 22 76 7a 3a 28 6b 08 8b 0b c2 30 5a 08
>3a7468		c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48
>3a7478		ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22 76 7a
>3a7488		3a c8 c0 03 00 d0 f1 22 20 75 3a c2 30 7a 2b ab
>3a7498		28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab
>3a74a8		68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a74b8		bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>3a74c8		0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00
>3a74d8		f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>3a74e8		85 19 85 1a 80 16 a7 00 85 18 22 76 7a 3a a7 00
>3a74f8		85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>3a7508		00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 20 75
>3a7518		3a 22 76 7a 3a 2b 28 6b 08 0b c2 20 48 08 c2 20
>3a7528		48 a9 48 08 5b 68 28 e2 20 a5 4c 20 05 03 e2 20
>3a7538		a9 3a 20 18 00 c2 20 a5 4a 20 eb 02 68 2b 28 6b
>3a7548		4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>3a7558		53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>3a7568		41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>3a7578		53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>3a7588		42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>3a7598		43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>3a75a8		52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>3a75b8		50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>3a75c8		49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>3a75d8		43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>3a75e8		43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>3a75f8		54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>3a7608		42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>3a7618		42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>3a7628		54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>3a7638		50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>3a7648		50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>3a7658		50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>3a7668		54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>3a7678		54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>3a7688		43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>3a7698		42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>3a76a8		4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>3a76b8		00 00 a0 75 48 75 88 76 48 75 28 76 48 75 68 75
>3a76c8		48 75 b0 75 48 75 68 75 48 76 28 76 48 75 68 75
>3a76d8		48 75 08 76 48 75 48 75 48 75 2c 76 48 75 68 75
>3a76e8		48 75 d0 75 48 75 84 75 68 76 2c 76 48 75 68 75
>3a76f8		48 75 a4 75 4c 75 8c 76 4c 75 88 75 4c 75 6c 75
>3a7708		4c 75 b4 75 4c 75 6c 75 4c 76 88 75 4c 75 6c 75
>3a7718		4c 75 0c 76 4c 75 4c 75 4c 75 88 75 4c 75 6c 75
>3a7728		4c 75 d4 75 4c 75 80 75 6c 76 88 75 4c 75 6c 75
>3a7738		4c 75 a8 75 50 75 90 76 50 75 a4 76 50 75 70 75
>3a7748		50 75 b8 75 50 75 70 75 50 76 8c 75 50 75 70 75
>3a7758		50 75 10 76 50 75 50 75 50 75 a8 76 50 75 70 75
>3a7768		50 75 d8 75 50 75 38 76 70 76 b4 76 50 75 70 75
>3a7778		50 75 ac 75 54 75 94 76 54 75 30 76 54 75 74 75
>3a7788		54 75 bc 75 54 75 74 75 54 76 8c 75 54 75 74 75
>3a7798		54 75 14 76 54 75 54 75 54 75 30 76 54 75 74 75
>3a77a8		54 75 dc 75 54 75 3c 76 74 76 8c 75 54 75 74 75
>3a77b8		54 75 34 76 58 75 98 76 58 75 90 75 58 75 78 75
>3a77c8		58 75 c0 75 88 75 f0 75 58 76 90 75 58 75 78 75
>3a77d8		58 75 18 76 58 75 58 75 58 75 90 75 58 75 78 75
>3a77e8		58 75 e0 75 58 75 f4 75 78 76 30 76 58 75 30 76
>3a77f8		58 75 94 75 5c 75 7c 75 5c 75 94 75 5c 75 7c 75
>3a7808		5c 75 c4 75 5c 75 f8 75 5c 76 94 75 5c 75 7c 75
>3a7818		5c 75 1c 76 5c 75 5c 75 5c 75 94 75 5c 75 7c 75
>3a7828		5c 75 e4 75 5c 75 fc 75 7c 76 94 75 5c 75 7c 75
>3a7838		5c 75 98 75 60 75 9c 76 60 75 98 75 60 75 80 75
>3a7848		60 75 c8 75 60 75 00 76 60 76 98 75 60 75 80 75
>3a7858		60 75 20 76 60 75 60 75 60 75 ac 76 60 75 80 75
>3a7868		60 75 e8 75 60 75 40 76 80 76 b4 76 60 75 80 75
>3a7878		60 75 9c 75 64 75 a0 76 64 75 9c 75 64 75 84 75
>3a7888		64 75 cc 75 64 75 04 76 64 76 9c 75 64 75 84 75
>3a7898		64 75 24 76 64 75 64 75 64 75 b0 76 64 75 84 75
>3a78a8		64 75 ec 75 64 75 44 76 84 76 a4 75 64 75 84 75
>3a78b8		64 75 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>3a78c8		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>3a78d8		03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>3a78e8		03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>3a78f8		07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>3a7908		03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>3a7918		0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>3a7928		15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>3a7938		10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>3a7948		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a7958		03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>3a7968		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a7978		07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>3a7988		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>3a7998		17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>3a79a8		03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>3a79b8		10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>3a79c8		01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>3a79d8		64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>3a79e8		64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>3a79f8		59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>3a7a08		64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>3a7a18		64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>3a7a28		64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>3a7a38		64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>3a7a48		28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>3a7a58		28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>3a7a68		64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>3a7a78		20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00 e2 20
>3a7a88		af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28 6b 08
>3a7a98		c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>3a7aa8		00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>3a7ab8		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a
>3a7ac8		c9 20 d0 06 22 76 7a 3a 80 f2 6b 08 08 c2 20 48
>3a7ad8		a9 48 08 5b 68 28 22 76 7a 3a 22 b8 7a 3a c2 30
>3a7ae8		a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>3a7af8		95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 76 7a 3a
>3a7b08		80 f2 a9 00 87 32 22 76 7a 3a e6 31 28 6b 08 c2
>3a7b18		20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20 64 50
>3a7b28		64 52 e2 20 a7 32 c9 3a f0 0d 20 83 03 90 0e 22
>3a7b38		ae 6f 3a a9 01 85 4a 22 76 7a 3a 80 e5 a5 4a f0
>3a7b48		16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>3a7b58		52 95 0f e2 20 e6 31 6b e2 20 64 31 22 b8 7a 3a
>3a7b68		a7 32 f0 21 c9 22 d0 06 22 d3 7a 3a 80 0a 22 16
>3a7b78		7b 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>3a7b88		20 83 03 b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b
>3a7b98		68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>3a7ba8		85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>3a7bb8		b8 7a 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>3a7bc8		34 85 0a a2 01 00 22 76 7a 3a a7 32 d0 06 86 0b
>3a7bd8		64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>3a7be8		32 22 76 7a 3a a7 08 c9 41 f0 07 22 60 7b 3a 2b
>3a7bf8		28 6b 22 b8 7a 3a a7 32 f0 f5 22 16 7b 3a 22 b8
>3a7c08		7a 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>3a7c18		85 13 22 76 7a 3a a7 32 f0 26 c9 20 d0 f4 a9 00
>3a7c28		87 32 e6 31 22 76 7a 3a 22 b8 7a 3a a7 32 f0 bf
>3a7c38		c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>3a7c48		e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 42 7d
>3a7c58		a9 3a 48 ab 20 db 02 20 4e 02 80 61 c2 20 a5 0d
>3a7c68		8f 23 08 00 a5 0f 8f 25 08 00 20 32 5e e2 20 a5
>3a7c78		31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a7c88		03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>3a7c98		03 00 22 18 11 00 b0 25 e2 20 a2 68 7d a9 3a 48
>3a7ca8		ab 20 db 02 af 2e 03 00 20 05 03 a9 20 20 18 00
>3a7cb8		af 20 03 00 20 05 03 20 4e 02 20 4e 02 28 6b 8b
>3a7cc8		08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 42 7d a9 3a
>3a7cd8		48 ab 20 db 02 20 4e 02 80 54 c2 20 a5 0d 8f 23
>3a7ce8		08 00 a5 0f 8f 25 08 00 20 32 5e a5 11 8f 50 03
>3a7cf8		00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a7d08		5a 03 00 22 1c 11 00 b0 25 e2 20 a2 52 7d a9 3a
>3a7d18		48 ab 20 db 02 af 2e 03 00 20 05 03 a9 20 20 18
>3a7d28		00 af 20 03 00 20 05 03 20 4e 02 20 4e 02 28 ab
>3a7d38		6b 5c 3d 25 3a 6b 00 00 00 00 42 61 64 20 61 72
>3a7d48		67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>3a7d58		20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a7d68		55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a7d78		69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>3a7d88		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3a7d98		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3a7da8		58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>3a7db8		52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>3a7dc8		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a7dd8		c2 30 20 01 7e a9 ff fe 1b 08 e2 20 48 a9 3a 48
>3a7de8		ab 68 28 a2 43 d2 20 db 02 08 e2 20 48 a9 00 48
>3a7df8		ab 68 28 4c 3d 25 4c fe 7d 08 20 d0 01 20 70 4b
>3a7e08		28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1309 times (20944 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad248		46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad258		76 30 2e 32 2e 30 2d 61 6c 70 68 61 2b 31 32 38
>3ad268		0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008		74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018		65 6e 21
>3b001b		20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b0073		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080		49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088		6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098		65 20 61 63 61 64 65 6d 79 2e
>3b00a2		20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b00fa		20 20 20 20 20 20
>3b0100						                .text ""
>3b0100		20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 6 times (96 bytes)...
>3b0178		20 20 20 20 20 20 20 20
>3b0180		50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188		79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198		2e 2e 2e
>3b019b		20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b01f3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200		20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 478 times (7648 bytes)...
>3b1ff8		20 20 20 20 20 20 20 20
>3b2000						.align 256
>3b2000		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 510 times (8160 bytes)...
>3b3ff8		f3 f3 f3 f3 f3 f3 f3 f3
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_BANK1
>3f0800		00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3f0808		7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3f0818		ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3f0828		ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3f0838		ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3f0848		00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3f0858		00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3f0868		00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3f0878		00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3f0888		ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3f0898		ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3f08a8		ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3f08b8		ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3f08c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3f0908		10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3f0918		24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3f0928		62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3f0938		10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3f0948		10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3f0958		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3f0968		00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3f0978		04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3f0988		10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3f0998		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3f09a8		7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3f09b8		7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3f09c8		38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3f09d8		00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3f09e8		00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3f09f8		38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3f0a08		10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3f0a18		38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3f0a28		7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3f0a38		38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3f0a48		38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3f0a58		24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3f0a68		44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3f0a78		38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3f0a88		38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3f0a98		3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3f0aa8		44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3f0ab8		82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3f0ac8		44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3f0ad8		38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3f0ae8		38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3f0af8		00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3f0b08		00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3f0b18		00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3f0b28		00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3f0b38		00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3f0b48		10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3f0b58		20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3f0b68		00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3f0b78		00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3f0b88		00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3f0b98		00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3f0ba8		00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3f0bb8		00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3f0bc8		00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3f0bd8		0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3f0be8		30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3f0bf8		00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3f0c08		00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3f0c18		00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3f0c28		00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3f0c38		0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3f0c48		02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3f0c58		00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3f0c68		18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3f0c78		24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3f0c88		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3f0c98		ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3f0ca8		ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3f0cb8		f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3f0cc8		fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3f0cd8		3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3f0ce8		0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3f0cf8		00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3f0d08		f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3f0d18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0d28		80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3f0d38		01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3f0d48		ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3f0d58		18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3f0d68		18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3f0d78		00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3f0d88		18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3f0d98		18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3f0da8		e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3f0db8		ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3f0dc8		00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3f0dd8		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3f0de8		18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3f0df8		f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3f0e08		08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3f0e18		00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3f0e28		00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3f0e38		30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3f0e48		00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3f0e58		18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3f0e68		c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3f0e78		ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3f0e88		00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3f0e98		36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3f0ea8		00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3f0eb8		00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3f0ec8		06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3f0ed8		18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3f0ee8		18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3f0ef8		ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3f0f08		00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3f0f18		00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3f0f28		24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3f0f38		24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3f0f48		24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3f0f58		0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3f0f68		80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3f0f78		cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3f0f88		0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3f0f98		ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3f0fa8		00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3f0fb8		00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3f0fc8		aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3f0fd8		00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3f0fe8		18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3f0ff8		00 00 00 00 00 00 00 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
