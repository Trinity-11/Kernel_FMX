
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=1 --long-address --flat -b -o kernel.bin --list kernel.lst --labels=kernel.lbl src\kernel.asm
; Fri Oct 23 14:02:58 2020

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=1						TARGET_SYS=1

;******  Processing input file: src\kernel.asm

=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_FONT := 0
=$380000					START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3f0000					START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00					ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00					HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10					HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20					HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30					HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40					HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60					HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80					Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0					VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0					JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4					VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6					VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8					VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea					VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec					VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee					VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0					RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4					VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6					VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8					VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa					VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc					VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe					VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000					VECTORS_END      = $400000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.38ff00		18		clc		RHRESET         CLC
.38ff01		fb		xce		                XCE
.38ff02		5c 00 10 00	jmp $001000	                JML BOOT
.38ff10						RHCOP
.38ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12		8b		phb		                PHB
.38ff13		0b		phd		                PHD
.38ff14		48		pha		                PHA
.38ff15		da		phx		                PHX
.38ff16		5a		phy		                PHY
.38ff17		5c 08 10 00	jmp $001008	                JML BREAK
.38ff20						RHBRK
.38ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22		8b		phb		                PHB
.38ff23		0b		phd		                PHD
.38ff24		48		pha		                PHA
.38ff25		da		phx		                PHX
.38ff26		5a		phy		                PHY
.38ff27		5c 08 10 00	jmp $001008	                JML BREAK
.38ff30						RHABORT
.38ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32		8b		phb		                PHB
.38ff33		0b		phd		                PHD
.38ff34		48		pha		                PHA
.38ff35		da		phx		                PHX
.38ff36		5a		phy		                PHY
.38ff37		5c 08 10 00	jmp $001008	                JML BREAK
.38ff40						 RHNMI
.38ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42		8b		phb		                PHB
.38ff43		0b		phd		                PHD
.38ff44		48		pha		                PHA
.38ff45		da		phx		                PHX
.38ff46		5a		phy		                PHY
.38ff47		22 d5 18 38	jsl $3818d5	                JSL NMI_HANDLER
.38ff4b		7a		ply		                PLY
.38ff4c		fa		plx		                PLX
.38ff4d		68		pla		                PLA
.38ff4e		2b		pld		                PLD
.38ff4f		ab		plb		                PLB
.38ff50		40		rti		                RTI
.38ff60						RHIRQ
.38ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62		8b		phb		                PHB
.38ff63		0b		phd		                PHD
.38ff64		48		pha		                PHA
.38ff65		da		phx		                PHX
.38ff66		5a		phy		                PHY
.38ff67		22 14 17 38	jsl $381714	                JSL IRQ_HANDLER
.38ff6b		7a		ply		                PLY
.38ff6c		fa		plx		                PLX
.38ff6d		68		pla		                PLA
.38ff6e		2b		pld		                PLD
.38ff6f		ab		plb		                PLB
.38ff70		40		rti		                RTI
.38ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec		00 00				                .word $0000    ; FFEC
>38ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0		5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>38fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					VKY_RESERVED_00         = $AF0002
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800					FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000
=$afe000					BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff					BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00						VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$01						VDMA_XFER_SRAM2VRAM = $01           ; SRAM -> VRAM transfer
=$02						VDMA_XFER_VRAM2SRAM = $02           ; VRAM -> SRAM transfer
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401   ; Read only
=$01						VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00						SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10						SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20						SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30						SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40						SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80						SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430   ; Read only
=$01						SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064					STATUS_PORT 	= $AF1064
=$af1060					KBD_OUT_BUF 	= $AF1060
=$af1060					KBD_INPT_BUF	= $AF1060
=$af1064					KBD_CMD_BUF		= $AF1064
=$af1060					KBD_DATA_BUF	= $AF1060
=$af1060					PORT_A		    = $AF1060
=$af1061					PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08						GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000					BASIC = $3A0000
=3801092					MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c ac 05 39	jmp $3905ac	RESTORE         JML IRESTORE
.381008	1008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	1010	5c da 16 39	jmp $3916da	SCINIT          JML ISCINIT
.381014	1014	5c db 16 39	jmp $3916db	IOINIT          JML IIOINIT
.381018	1018	5c a7 07 39	jmp $3907a7	PUTC            JML IPUTC
.38101c	101c	5c 90 07 39	jmp $390790	PUTS            JML IPUTS
.381020	1020	5c 1f 09 39	jmp $39091f	PUTB            JML IPUTB
.381024	1024	5c bf 41 39	jmp $3941bf	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c dc 16 39	jmp $3916dc	SETLFS          JML ISETLFS
.38102c	102c	5c dd 16 39	jmp $3916dd	SETNAM          JML ISETNAM
.381030	1030	5c de 16 39	jmp $3916de	OPEN            JML IOPEN
.381034	1034	5c df 16 39	jmp $3916df	CLOSE           JML ICLOSE
.381038	1038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	1040	5c e0 16 39	jmp $3916e0	GETB            JML IGETB
.381044	1044	5c 5c 41 39	jmp $39415c	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 54 07 39	jmp $390754	GETCH           JML IGETCH
.38104c	104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	1050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	1054	5c e1 16 39	jmp $3916e1	GETS            JML IGETS
.381058	1058	5c e2 16 39	jmp $3916e2	GETLINE         JML IGETLINE
.38105c	105c	5c e3 16 39	jmp $3916e3	GETFIELD        JML IGETFIELD
.381060	1060	5c e4 16 39	jmp $3916e4	TRIM            JML ITRIM
.381064	1064	5c e5 16 39	jmp $3916e5	PRINTC          JML IPRINTC
.381068	1068	5c e6 16 39	jmp $3916e6	PRINTS          JML IPRINTS
.38106c	106c	5c 20 09 39	jmp $390920	PRINTCR         JML IPRINTCR
.381070	1070	5c e7 16 39	jmp $3916e7	PRINTF          JML IPRINTF
.381074	1074	5c e8 16 39	jmp $3916e8	PRINTI          JML IPRINTI
.381078	1078	5c e0 0a 39	jmp $390ae0	PRINTH          JML IPRINTH
.38107c	107c	5c e9 16 39	jmp $3916e9	PRINTAI         JML IPRINTAI
.381080	1080	5c fd 0a 39	jmp $390afd	PRINTAH         JML IPRINTAH
.381084	1084	5c 24 0a 39	jmp $390a24	LOCATE          JML ILOCATE
.381088	1088	5c ea 16 39	jmp $3916ea	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c eb 16 39	jmp $3916eb	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 80 09 39	jmp $390980	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c b3 09 39	jmp $3909b3	CSRLEFT         JML ICSRLEFT
.381098	1098	5c d9 09 39	jmp $3909d9	CSRUP           JML ICSRUP
.38109c	109c	5c ff 09 39	jmp $3909ff	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 6f 09 39	jmp $39096f	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 70 0a 39	jmp $390a70	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 4b 0b 39	jmp $390b4b	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 16 0c 39	jmp $390c16	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 02 10 39	jmp $391002	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 01 11 39	jmp $391101	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 6c 12 39	jmp $39126c	TESTSID         JML ITESTSID
.3810bc	10bc	5c e1 0f 39	jmp $390fe1	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c a9 0f 39	jmp $390fa9	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 45 0c 39	jmp $390c45	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 65 0c 39	jmp $390c65	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 27 0d 39	jmp $390d27	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 34 0e 39	jmp $390e34	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 6b 0e 39	jmp $390e6b	INITTILEMODE    JML IINITTILEMODE
.3810d8	10d8	5c 6c 0e 39	jmp $390e6c	INITSPRITE      JML IINITSPRITE
.3810dc	10dc	5c 3b 13 39	jmp $39133b	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c b7 13 39	jmp $3913b7	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 25 14 39	jmp $391425	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c da 13 39	jmp $3913da	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c 68 37 39	jmp $393768	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 39 54 39	jmp $395439	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c cc 54 39	jmp $3954cc	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 06 55 39	jmp $395506	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c 9f 55 39	jmp $39559f	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 3a 55 39	jmp $39553a	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 49 56 39	jmp $395649	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 0b 56 39	jmp $39560b	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 45 56 39	jmp $395645	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c e2 56 39	jmp $3956e2	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 09 57 39	jmp $395709	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 0d 57 39	jmp $39570d	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c fd 58 39	jmp $3958fd	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 32 41 39	jmp $394132	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c 96 59 39	jmp $395996	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 5d 45 39	jmp $39455d	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 81 0d 39	jmp $390d81	SETSIZES        JML ISETSIZES
.381130	1130	5c cd 5a 39	jmp $395acd	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 2f 5a 39	jmp $395a2f	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c 83 5a 39	jmp $395a83	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.381700	1700	5c 25 6a 39	jmp $396a25	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c ee 16 39	jmp $3916ee	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c ee 16 39	jmp $3916ee	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c ee 16 39	jmp $3916ee	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c ee 16 39	jmp $3916ee	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381714						IRQ_HANDLER
.381714		e2 20		sep #$20	                SEP #$20        ; set A short
.381716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38171a		c9 00		cmp #$00	                CMP #$00
.38171c		f0 7d		beq $38179b	                BEQ CHECK_PENDING_REG1
.38171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381722		29 01		and #$01	                AND #FNX0_INT00_SOF
.381724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381726		d0 09		bne $381731	                BNE SERVICE_NEXT_IRQ1
.381728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38172c		20 09 18	jsr $381809	                JSR SOF_INTERRUPT
.38172f		e2 20		sep #$20	                SEP #$20        ; set A short
.381731						SERVICE_NEXT_IRQ1
.381731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381735		29 02		and #$02	                AND #FNX0_INT01_SOL
.381737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.381739		d0 07		bne $381742	                BNE SERVICE_NEXT_IRQ2
.38173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38173f		20 1a 18	jsr $38181a	                JSR SOL_INTERRUPT
.381742						SERVICE_NEXT_IRQ2
.381742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.381748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38174a		d0 07		bne $381753	                BNE SERVICE_NEXT_IRQ3
.38174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381750		20 2b 18	jsr $38182b	                JSR TIMER0_INTERRUPT
.381753						SERVICE_NEXT_IRQ3
.381753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.381759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38175b		d0 07		bne $381764	                BNE SERVICE_NEXT_IRQ4
.38175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381761		20 3c 18	jsr $38183c	                JSR TIMER1_INTERRUPT
.381764						SERVICE_NEXT_IRQ4
.381764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.38176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38176c		d0 09		bne $381777	                BNE SERVICE_NEXT_IRQ6
.38176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381772		20 4d 18	jsr $38184d	                JSR TIMER2_INTERRUPT
.381775		e2 20		sep #$20	                SEP #$20        ; set A short
.381777						SERVICE_NEXT_IRQ6
.381777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.38177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38177f		d0 09		bne $38178a	                BNE SERVICE_NEXT_IRQ7
.381781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381785		20 9e 18	jsr $38189e	                JSR FDC_INTERRUPT
.381788		e2 20		sep #$20	                SEP #$20        ; set A short
.38178a						SERVICE_NEXT_IRQ7
.38178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381792		d0 07		bne $38179b	                BNE CHECK_PENDING_REG1
.381794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381798		20 5e 18	jsr $38185e	                JSR MOUSE_INTERRUPT
.38179b						CHECK_PENDING_REG1
.38179b		e2 20		sep #$20	                SEP #$20        ; set A short
.38179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a1		c9 00		cmp #$00	                CMP #$00
.3817a3		f0 61		beq $381806	                BEQ EXIT_IRQ_HANDLE
.3817a5						SERVICE_NEXT_IRQ8
.3817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.3817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3817ad		d0 0d		bne $3817bc	                BNE SERVICE_NEXT_IRQ11
.3817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817b3		8b		phb		                PHB
.3817b4		0b		phd		                PHD
.3817b5		20 d6 18	jsr $3818d6	                JSR KEYBOARD_INTERRUPT
.3817b8		2b		pld		                PLD
.3817b9		ab		plb		                PLB
.3817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3817bc						SERVICE_NEXT_IRQ11
.3817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.3817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3817c4		d0 09		bne $3817cf	                BNE SERVICE_NEXT_IRQ12
.3817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817ca		20 a9 18	jsr $3818a9	                JSR COM2_INTERRUPT
.3817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3817cf						SERVICE_NEXT_IRQ12
.3817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.3817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3817d7		d0 09		bne $3817e2	                BNE SERVICE_NEXT_IRQ13
.3817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817dd		20 b4 18	jsr $3818b4	                JSR COM1_INTERRUPT
.3817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3817e2						SERVICE_NEXT_IRQ13
.3817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3817ea		d0 09		bne $3817f5	                BNE SERVICE_NEXT_IRQ14
.3817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817f0		20 bf 18	jsr $3818bf	                JSR MPU401_INTERRUPT
.3817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3817f5						SERVICE_NEXT_IRQ14
.3817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.3817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3817fd		d0 07		bne $381806	                BNE EXIT_IRQ_HANDLE
.3817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381803		20 ca 18	jsr $3818ca	                JSR LPT1_INTERRUPT
.381806						EXIT_IRQ_HANDLE
.381806		c2 30		rep #$30	                REP #$30        ; set A&X long
.381808		6b		rtl		                RTL
.381809						SOF_INTERRUPT
.381809		e2 20		sep #$20	                SEP #$20        ; set A short
.38180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.381811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.381819		60		rts		                RTS
.38181a						SOL_INTERRUPT
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381820		29 02		and #$02	                AND #FNX0_INT01_SOL
.381822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.38182a		60		rts		                RTS
.38182b						TIMER0_INTERRUPT
.38182b		e2 20		sep #$20	                SEP #$20        ; set A short
.38182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.38183b		60		rts		                RTS
.38183c						TIMER1_INTERRUPT
.38183c		e2 20		sep #$20	                SEP #$20        ; set A short
.38183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.381844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.38184c		60		rts		                RTS
.38184d						TIMER2_INTERRUPT
.38184d		e2 20		sep #$20	                SEP #$20        ; set A short
.38184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.381855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.38185d		60		rts		                RTS
.38185e						MOUSE_INTERRUPT
.38185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.381860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.381864		aa		tax		                TAX
.381865		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF
.381869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38186d		e8		inx		                INX
.38186e		e0 03		cpx #$03	                CPX #$03
.381870		d0 24		bne $381896	                BNE EXIT_FOR_NEXT_VALUE
.381872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.381876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.38187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.38187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.381882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.381886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.38188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.38188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.381892		e2 20		sep #$20	                SEP #$20        ; set A short
.381894		a2 00		ldx #$00	                LDX #$00
.381896						EXIT_FOR_NEXT_VALUE
.381896		8a		txa		                TXA
.381897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.38189b		c2 10		rep #$10	                REP #$10        ; set X long
.38189d		60		rts		                RTS
.38189e						FDC_INTERRUPT
.38189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.3818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3818a8		60		rts		                RTS
.3818a9						COM2_INTERRUPT
.3818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.3818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818b3		60		rts		                RTS
.3818b4						COM1_INTERRUPT
.3818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.3818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818be		60		rts		                RTS
.3818bf						MPU401_INTERRUPT
.3818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818c9		60		rts		                RTS
.3818ca						LPT1_INTERRUPT
.3818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.3818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818d4		60		rts		                RTS
.3818d5						NMI_HANDLER
.3818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3818d6						KEYBOARD_INTERRUPT
.3818d6		48		pha		                PHA             ; begin setdp macro
.3818d7		08		php		                PHP
.3818d8		c2 20		rep #$20	                REP #$20        ; set A long
.3818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3818dd		5b		tcd		                TCD
.3818de		28		plp		                PLP
.3818df		68		pla		                PLA             ; end setdp macro
.3818e0		a2 00 00	ldx #$0000	                ldx #$0000
.3818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.3818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.3818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818f1						IRQ_HANDLER_FETCH
.3818f1		af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3818f9		29 80		and #$80	                AND #$80
.3818fb		c9 80		cmp #$80	                CMP #$80
.3818fd		d0 10		bne $38190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381901		29 7f		and #$7f	                AND #$7F
.381903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381907		aa		tax		                TAX
.381908		bf 80 75 39	lda $397580,x	                LDA @lScanCode_Prefix_Set1, x
.38190c		4c b2 19	jmp $3819b2	                JMP KB_WR_2_SCREEN      ; And save it
.38190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381913		d0 03		bne $381918	                BNE NOT_KB_SET_LSHIFT
.381915		82 ad 00	brl $3819c5	                BRL KB_SET_SHIFT
.381918						NOT_KB_SET_LSHIFT
.381918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38191a		d0 03		bne $38191f	                BNE NOT_KB_CLR_LSHIFT
.38191c		82 af 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38191f						NOT_KB_CLR_LSHIFT
.38191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381921		d0 03		bne $381926	                BNE NOT_KB_SET_RSHIFT
.381923		82 9f 00	brl $3819c5	                BRL KB_SET_SHIFT
.381926						NOT_KB_SET_RSHIFT
.381926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381928		d0 03		bne $38192d	                BNE NOT_KB_CLR_RSHIFT
.38192a		82 a1 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38192d						NOT_KB_CLR_RSHIFT
.38192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38192f		d0 03		bne $381934	                BNE NOT_KB_SET_CTRL
.381931		82 a3 00	brl $3819d7	                BRL KB_SET_CTRL
.381934						NOT_KB_SET_CTRL
.381934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381936		d0 03		bne $38193b	                BNE NOT_KB_CLR_CTRL
.381938		82 a5 00	brl $3819e0	                BRL KB_CLR_CTRL
.38193b						NOT_KB_CLR_CTRL
.38193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38193d		d0 03		bne $381942	                BNE NOT_KB_SET_ALT
.38193f		82 a7 00	brl $3819e9	                BRL KB_SET_ALT
.381942						NOT_KB_SET_ALT
.381942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381944		d0 03		bne $381949	                BNE NOT_KB_CLR_ALT
.381946		82 a9 00	brl $3819f2	                BRL KB_CLR_ALT
.381949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38194b		d0 03		bne $381950	                BNE NOT_PREFIXED
.38194d		82 ab 00	brl $3819fb	                BRL KB_SET_PREFIX
.381950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381952		d0 03		bne $381957	                BNE NOT_KB_SET_NUM
.381954		82 b6 00	brl $381a0d	                BRL KB_TOG_NUMLOCK
.381957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381959		d0 03		bne $38195e	                BNE NOT_KB_SET_SCR
.38195b		82 a6 00	brl $381a04	                BRL KB_TOG_SCRLOCK
.38195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381960		d0 03		bne $381965	                BNE NOT_KB_CAPSLOCK
.381962		82 bc 00	brl $381a21	                BRL KB_TOG_CAPLOCK
.381965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381967		d0 09		bne $381972	                BNE KB_UNPRESSED
.381969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38196f		82 b5 00	brl $381a27	                BRL KB_CHECK_B_DONE
.381972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381976		d0 03		bne $38197b	                BNE KB_NORM_SC
.381978		82 ac 00	brl $381a27	                BRL KB_CHECK_B_DONE
.38197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38197d		aa		tax		                TAX
.38197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381980		29 10		and #$10	                AND #$10
.381982		c9 10		cmp #$10	                CMP #$10
.381984		f0 17		beq $38199d	                BEQ SHIFT_KEY_ON
.381986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381988		29 20		and #$20	                AND #$20
.38198a		c9 20		cmp #$20	                CMP #$20
.38198c		f0 16		beq $3819a4	                BEQ CTRL_KEY_ON
.38198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381990		29 40		and #$40	                AND #$40
.381992		c9 40		cmp #$40	                CMP #$40
.381994		f0 15		beq $3819ab	                BEQ ALT_KEY_ON
.381996		bf 00 73 39	lda $397300,x	                LDA @lScanCode_Press_Set1, x
.38199a		82 15 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.38199d		bf 80 73 39	lda $397380,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3819a1		82 0e 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819a4		bf 00 74 39	lda $397400,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3819a8		82 07 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819ab		bf 80 74 39	lda $397480,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3819af		82 00 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3819b4		d0 03		bne $3819b9	                BNE savechar
.3819b6		4c 37 1a	jmp $381a37	                JMP programmerKey       ; Yes: trigger the programmer key
.3819b9		48		pha		savechar        PHA
.3819ba		c2 10		rep #$10	                REP #$10        ; set X long
.3819bc		20 43 1a	jsr $381a43	                JSR SAVEKEY
.3819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3819c1		68		pla		                PLA
.3819c2		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3819c7		09 10		ora #$10	                ORA #$10
.3819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819cb		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3819d0		29 ef		and #$ef	                AND #$EF
.3819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819d4		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3819d9		09 20		ora #$20	                ORA #$20
.3819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819dd		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3819e2		29 df		and #$df	                AND #$DF
.3819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819e6		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3819eb		09 40		ora #$40	                ORA #$40
.3819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819ef		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3819f4		29 bf		and #$bf	                AND #$BF
.3819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819f8		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3819fd		09 80		ora #$80	                ORA #$80
.3819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381a01		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a0a		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381a11		c9 60		cmp #$60	                CMP #$60
.381a13		d0 03		bne $381a18	                BNE KB_TOG_NUMLOC2
.381a15		82 63 ff	brl $38197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a1e		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a27						KB_CHECK_B_DONE
.381a27		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381a2f		d0 03		bne $381a34	                BNE SET_LED
.381a31		4c f1 18	jmp $3818f1	                JMP IRQ_HANDLER_FETCH
.381a34						SET_LED
.381a34						KB_DONE
.381a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a36		60		rts		                RTS
.381a37						programmerKey
.381a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381a3b		ab		plb		                PLB
.381a3c		7a		ply		                PLY
.381a3d		fa		plx		                PLX
.381a3e		68		pla		                PLA
.381a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381a43						SAVEKEY
.381a43		e2 20		sep #$20	                SEP #$20        ; set A short
.381a45		48		pha		                PHA                     ; Save the character
.381a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381a4a		f0 0d		beq $381a59	                BEQ no_caps             ; No... just use the character as-is
.381a4c		68		pla		                PLA                     ; Get the character back
.381a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381a4f		90 09		bcc $381a5a	                BLT check_break         ; Yes: just use as-is
.381a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381a53		b0 05		bcs $381a5a	                BGE check_break         ; Yes: just us as-is
.381a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381a57		80 01		bra $381a5a	                BRA check_break
.381a59		68		pla		no_caps         PLA                     ; Restore the character
.381a5a		c9 00		cmp #$00	check_break     CMP #0
.381a5c		f0 18		beq $381a76	                BEQ done
.381a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381a60		f0 15		beq $381a77	                BEQ flag_break          ; Yes: flag a break
.381a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381a67		b0 0d		bcs $381a76	                BCS done                ; Stop storing - An error should ensue here...
.381a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381a6d		e8		inx		                INX
.381a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381a70		a9 00		lda #$00	                LDA #$00
.381a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381a76		60		rts		done            RTS
.381a77						flag_break
.381a77		e2 20		sep #$20	                SEP #$20        ; set A short
.381a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381a7d		60		rts		                RTS
.381a7e						KBD_GETCW
.381a7e		da		phx		                PHX
.381a7f		0b		phd		                PHD
.381a80		08		php		                PHP
.381a81		48		pha		                PHA             ; begin setdp macro
.381a82		08		php		                PHP
.381a83		c2 20		rep #$20	                REP #$20        ; set A long
.381a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381a88		5b		tcd		                TCD
.381a89		28		plp		                PLP
.381a8a		68		pla		                PLA             ; end setdp macro
.381a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.381a8d		c2 10		rep #$10	                REP #$10        ; set X long
.381a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.381a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.381a98		d0 0a		bne $381aa4	                BNE check_buffer        ; No: check the key buffer
.381a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381aa0		22 94 16 39	jsl $391694	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381aa8		90 02		bcc $381aac	                BCC read_buff           ; Yes: a key is present, read it
.381aaa		80 e4		bra $381a90	                BRA get_wait            ; Otherwise, keep waiting
.381aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381aaf		e8		inx		                INX                     ; And move to the next key
.381ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ab2		f0 07		beq $381abb	                BEQ reset_indexes       ; Yes: return to 0 position
.381ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ab6		58		cli		                CLI
.381ab7		28		plp		done            PLP                     ; Restore status and interrupts
.381ab8		2b		pld		                PLD
.381ab9		fa		plx		                PLX
.381aba		6b		rtl		                RTL
.381abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381abf		80 f6		bra $381ab7	                BRA done
.381ac1						KBD_GETC
.381ac1		da		phx		                PHX
.381ac2		0b		phd		                PHD
.381ac3		08		php		                PHP
.381ac4		48		pha		                PHA             ; begin setdp macro
.381ac5		08		php		                PHP
.381ac6		c2 20		rep #$20	                REP #$20        ; set A long
.381ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381acb		5b		tcd		                TCD
.381acc		28		plp		                PLP
.381acd		68		pla		                PLA             ; end setdp macro
.381ace		e2 20		sep #$20	                SEP #$20        ; set A short
.381ad0		c2 10		rep #$10	                REP #$10        ; set X long
.381ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.381ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381ad7		90 05		bcc $381ade	                BCC read_buff           ; Yes: a key is present, read it
.381ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.381adb		38		sec		                SEC
.381adc		80 0b		bra $381ae9	                BRA done
.381ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381ae1		e8		inx		                INX                     ; And move to the next key
.381ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ae4		f0 07		beq $381aed	                BEQ reset_indexes       ; Yes: return to 0 position
.381ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ae8		58		cli		                CLI
.381ae9		28		plp		done            PLP                     ; Restore status and interrupts
.381aea		2b		pld		                PLD
.381aeb		fa		plx		                PLX
.381aec		6b		rtl		                RTL
.381aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381af1		80 f6		bra $381ae9	                BRA done

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 51 12 39	jsl $391251	                JSL INITRTC               ; Initialize the RTC
.390455		c2 30		rep #$30	                REP #$30        ; set A&X long
.390457		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a		85 0c		sta $0c		                STA SCREENBEGIN
.39045c		85 17		sta $17		                STA CURSORPOS
.39045e		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461		85 1f		sta $1f		                STA COLORPOS
.390463		e2 20		sep #$20	                SEP #$20        ; set A short
.390465		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467		85 0e		sta $0e		                STA SCREENBEGIN+2
.390469		85 19		sta $19		                STA CURSORPOS+2
.39046b		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d		85 21		sta $21		                STA COLORPOS+2
.39046f		e2 20		sep #$20	                SEP #$20        ; set A short
.390471		a9 00		lda #$00	                LDA #$00
.390473		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478		8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e		8f 00 f1 af	sta $aff100	                STA $AFF100
.390482		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484		8f 00 f1 af	sta $aff100	                STA $AFF100
.390488		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e		c2 30		rep #$30	                REP #$30        ; set A&X long
.390490		a2 48 00	ldx #$0048	                LDX #72
.390493		86 0f		stx $0f		                STX COLS_VISIBLE
.390495		a0 34 00	ldy #$0034	                LDY #52
.390498		84 13		sty $13		                STY LINES_VISIBLE
.39049a		a2 80 00	ldx #$0080	                LDX #128
.39049d		86 11		stx $11		                STX COLS_PER_LINE
.39049f		a0 40 00	ldy #$0040	                LDY #64
.3904a2		84 15		sty $15		                STY LINES_MAX
.3904a4		a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7		85 1e		sta $1e		                STA CURCOLOR
.3904a9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904ad		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.3904b1		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904b5		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904b9		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.3904bd		22 c2 0f 39	jsl $390fc2	                JSL INITMOUSEPOINTER
.3904c1		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904c5		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE
.3904c9		22 a9 0f 39	jsl $390fa9	                JSL IINITFONTSET
.3904cd		22 4b 0b 39	jsl $390b4b	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4		22 e4 5b 39	jsl $395be4	                JSL UART_SELECT
.3904d8		22 50 5c 39	jsl $395c50	                JSL UART_INIT
.3904dc		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df		22 e4 5b 39	jsl $395be4	                JSL UART_SELECT
.3904e3		22 50 5c 39	jsl $395c50	                JSL UART_INIT
.3904e7		a9 00 00	lda #$0000	                LDA #0
.3904ea		22 38 10 00	jsl $001038	                JSL SETIN
.3904ee		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904f2		c2 20		rep #$20	                REP #$20        ; set A long
.3904f4		a2 00 00	ldx #$0000	                LDX #0
.3904f7		a0 00 00	ldy #$0000	                LDY #0
.3904fa		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.3904fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.390500						greet
.390500		48		pha		                PHA             ; begin setdbr macro
.390501		08		php		                PHP
.390502		e2 20		sep #$20	                SEP #$20        ; set A short
.390504		a9 39		lda #$39	                LDA #`greet_msg
.390506		48		pha		                PHA
.390507		ab		plb		                PLB
.390508		28		plp		                PLP
.390509		68		pla		                PLA             ; end setdbr macro
.39050a		a2 25 6e	ldx #$6e25	                LDX #<>greet_msg
.39050d		22 87 07 39	jsl $390787	                JSL IPRINT       ; print the first line
.390511		22 96 0b 39	jsl $390b96	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515		48		pha		                PHA             ; begin setdp macro
.390516		08		php		                PHP
.390517		c2 20		rep #$20	                REP #$20        ; set A long
.390519		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c		5b		tcd		                TCD
.39051d		28		plp		                PLP
.39051e		68		pla		                PLA             ; end setdp macro
.39051f		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.390523		e2 20		sep #$20	                SEP #$20        ; set A short
.390525		c2 10		rep #$10	                REP #$10        ; set X long
.390527		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529		8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f		8f 00 f1 af	sta $aff100	                STA $AFF100
.390533		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535		8f 00 f1 af	sta $aff100	                STA $AFF100
.390539		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541		8f 00 f1 af	sta $aff100	                STA $AFF100
.390545		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547		8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d		8f 00 f1 af	sta $aff100	                STA $AFF100
.390551		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554		22 22 16 39	jsl $391622	          		 	JSL ILOOP_MS
.390558		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f		e2 20		sep #$20	                SEP #$20        ; set A short
.390561		c2 10		rep #$10	                REP #$10        ; set X long
.390563		48		pha		                PHA             ; begin setdbr macro
.390564		08		php		                PHP
.390565		e2 20		sep #$20	                SEP #$20        ; set A short
.390567		a9 39		lda #$39	                LDA #`greet_msg
.390569		48		pha		                PHA
.39056a		ab		plb		                PLB
.39056b		28		plp		                PLP
.39056c		68		pla		                PLA             ; end setdbr macro
.39056d		a2 00 00	ldx #$0000	                LDX #0
.390570		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390574		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578		e8		inx		                INX
.390579		e0 00 10	cpx #$1000	                CPX #$1000
.39057c		d0 f2		bne $390570	                BNE jmpcopy
.39057e		22 8b 44 39	jsl $39448b	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582		22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588		f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c		f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590		f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594		f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598		f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2		f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6		f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa		f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac						IRESTORE
.3905ac		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0		ea		nop		CREDIT_LOCK     NOP
.3905b1		80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3						BOOTSDC
.3905b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf		90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1		22 18 47 39	jsl $394718	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5		80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7		a2 03 72	ldx #$7203	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca		80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc						BOOTIDE
.3905cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8		90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da		22 18 47 39	jsl $394718	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de		82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1		a2 1f 72	ldx #$721f	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4		80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6		a2 68 72	ldx #$7268	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9		22 87 07 39	jsl $390787	                JSL IPRINT
.3905ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5		22 be 67 39	jsl $3967be	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9		90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb		22 18 47 39	jsl $394718	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff		82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602		a2 42 72	ldx #$7242	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605		22 87 07 39	jsl $390787	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609		a2 de 71	ldx #$71de	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c		22 87 07 39	jsl $390787	                JSL IPRINT
.390610		22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616		d0 03		bne $39061b	                BNE chk_r_lc
.390618		82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d		d0 03		bne $390622	                BNE chk_b_lc
.39061f		82 5c ff	brl $39057e	                BRL retry_boot
.390622		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624		f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626		c9 42		cmp #$42	                CMP #'B'
.390628		f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a		80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c						BOOT_MENU
.39062c		8b		phb		                PHB
.39062d		08		php		                PHP
.39062e		e2 20		sep #$20	                SEP #$20        ; set A short
.390630		c2 10		rep #$10	                REP #$10        ; set X long
.390632		a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634		48		pha		                PHA
.390635		ab		plb		                PLB
.390636		a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639		22 1c 10 00	jsl $00101c	                JSL PUTS                ; Display the boot menu
.39063d		c2 10		rep #$10	                REP #$10        ; set X long
.39063f		a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642		e2 20		sep #$20	                SEP #$20        ; set A short
.390644		a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647		22 22 16 39	jsl $391622	                JSL ILOOP_MS            ; Wait ...
.39064b		88		dey		                DEY                     ; Count down the tenths of seconds
.39064c		f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.390652		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654		f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658		f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c		f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660		f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664		f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668		d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a		a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c		28		plp		return          PLP
.39066d		ab		plb		                PLB
.39066e		6b		rtl		                RTL
>39066f		46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677		46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687		52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697		41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4						IBREAK
.3906a4		48		pha		                PHA             ; begin setdp macro
.3906a5		08		php		                PHP
.3906a6		c2 20		rep #$20	                REP #$20        ; set A long
.3906a8		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab		5b		tcd		                TCD
.3906ac		28		plp		                PLP
.3906ad		68		pla		                PLA             ; end setdp macro
.3906ae		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af		8f 48 02 00	sta $000248	                STA CPUY
.3906b3		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4		8f 46 02 00	sta $000246	                STA CPUX
.3906b8		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9		8f 44 02 00	sta $000244	                STA CPUA
.3906bd		68		pla		                PLA
.3906be		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4		68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5		8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9		68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce		c2 20		rep #$20	                REP #$20        ; set A long
.3906d0		68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1		8f 40 02 00	sta $000240	                STA CPUPC
.3906d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7		68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8		8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc		c2 20		rep #$20	                REP #$20        ; set A long
.3906de		3b		tsc		                TSA             ; Get the stack
.3906df		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6		1b		tcs		                TAS
.3906e7		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb						IREADY
.3906eb		48		pha		                PHA             ; begin setdbr macro
.3906ec		08		php		                PHP
.3906ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef		a9 39		lda #$39	                LDA #`ready_msg
.3906f1		48		pha		                PHA
.3906f2		ab		plb		                PLB
.3906f3		28		plp		                PLP
.3906f4		68		pla		                PLA             ; end setdbr macro
.3906f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7		a2 7f 72	ldx #$727f	                LDX #<>ready_msg
.3906fa		22 87 07 39	jsl $390787	                JSL IPRINT
.3906fe						IREADYWAIT
.3906fe		22 18 07 39	jsl $390718	                JSL IGETCHE
.390702		80 fa		bra $3906fe	                BRA IREADYWAIT
.390704		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705		db		stp		IRETURN         STP
.390706		08		php		ISETIN          PHP
.390707		e2 20		sep #$20	                SEP #$20        ; set A short
.390709		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d		28		plp		                PLP
.39070e		6b		rtl		                RTL
.39070f		08		php		ISETOUT         PHP
.390710		e2 20		sep #$20	                SEP #$20        ; set A short
.390712		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716		28		plp		                PLP
.390717		6b		rtl		                RTL
.390718		22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.390720		6b		rtl		                RTL
.390721						IGETCHW
.390721		da		phx		                PHX
.390722		5a		phy		                PHY
.390723		8b		phb		                PHB
.390724		0b		phd		                PHD
.390725		08		php		                PHP
.390726		e2 20		sep #$20	                SEP #$20        ; set A short
.390728		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39072c		f0 1b		beq $390749	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072e		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390730		f0 0d		beq $39073f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390734		f0 09		beq $39073f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390736		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390738		28		plp		                PLP
.390739		38		sec		                SEC                 ; And return carry set
.39073a		2b		pld		                PLD
.39073b		ab		plb		                PLB
.39073c		7a		ply		                PLY
.39073d		fa		plx		                PLX
.39073e		6b		rtl		                RTL
.39073f		22 e4 5b 39	jsl $395be4	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390743		22 98 5c 39	jsl $395c98	                JSL UART_GETC       ; Get the charater from the COM port
.390747		80 04		bra $39074d	                BRA done
.390749		22 7e 1a 38	jsl $381a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.39074d		28		plp		done            PLP
.39074e		18		clc		                CLC                 ; Return carry clear for valid data
.39074f		2b		pld		                PLD
.390750		ab		plb		                PLB
.390751		7a		ply		                PLY
.390752		fa		plx		                PLX
.390753		6b		rtl		                RTL
.390754						IGETCH
.390754		da		phx		                PHX
.390755		5a		phy		                PHY
.390756		8b		phb		                PHB
.390757		0b		phd		                PHD
.390758		08		php		                PHP
.390759		e2 20		sep #$20	                SEP #$20        ; set A short
.39075b		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39075f		f0 1b		beq $39077c	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390761		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390763		f0 0d		beq $390772	                BEQ getc_uart       ; Yes: handle reading from the UART
.390765		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390767		f0 09		beq $390772	                BEQ getc_uart       ; Yes: handle reading from the UART
.390769		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39076b		28		plp		                PLP
.39076c		38		sec		                SEC                 ; And return carry set
.39076d		2b		pld		                PLD
.39076e		ab		plb		                PLB
.39076f		7a		ply		                PLY
.390770		fa		plx		                PLX
.390771		6b		rtl		                RTL
.390772		22 e4 5b 39	jsl $395be4	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390776		22 98 5c 39	jsl $395c98	                JSL UART_GETC       ; Get the charater from the COM port
.39077a		80 04		bra $390780	                BRA done
.39077c		22 c1 1a 38	jsl $381ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390780		28		plp		done            PLP
.390781		18		clc		                CLC                 ; Return carry clear for valid data
.390782		2b		pld		                PLD
.390783		ab		plb		                PLB
.390784		7a		ply		                PLY
.390785		fa		plx		                PLX
.390786		6b		rtl		                RTL
.390787		22 90 07 39	jsl $390790	IPRINT          JSL IPUTS
.39078b		22 20 09 39	jsl $390920	                JSL IPRINTCR
.39078f		6b		rtl		                RTL
.390790		48		pha		IPUTS           PHA
.390791		08		php		                PHP
.390792		e2 20		sep #$20	                SEP #$20        ; set A short
.390794		c2 10		rep #$10	                REP #$10        ; set X long
.390796		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390799		f0 08		beq $3907a3	                BEQ iputs_done
.39079b		22 a7 07 39	jsl $3907a7	iputs2          JSL IPUTC
.39079f		e8		inx		iputs3          INX
.3907a0		4c 96 07	jmp $390796	                JMP iputs1
.3907a3		e8		inx		iputs_done      INX
.3907a4		28		plp		                PLP
.3907a5		68		pla		                PLA
.3907a6		6b		rtl		                RTL
.3907a7						IPUTC
.3907a7		da		phx		                PHX
.3907a8		5a		phy		                PHY
.3907a9		0b		phd		                PHD
.3907aa		8b		phb		                PHB
.3907ab		08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907ac		48		pha		                PHA             ; begin setdp macro
.3907ad		08		php		                PHP
.3907ae		c2 20		rep #$20	                REP #$20        ; set A long
.3907b0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907b3		5b		tcd		                TCD
.3907b4		28		plp		                PLP
.3907b5		68		pla		                PLA             ; end setdp macro
.3907b6		48		pha		                PHA             ; begin setdbr macro
.3907b7		08		php		                PHP
.3907b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3907ba		a9 00		lda #$00	                LDA #0
.3907bc		48		pha		                PHA
.3907bd		ab		plb		                PLB
.3907be		28		plp		                PLP
.3907bf		68		pla		                PLA             ; end setdbr macro
.3907c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3907c2		c2 10		rep #$10	                REP #$10        ; set X long
.3907c4		48		pha		                PHA                 ; Save the character to print
.3907c5		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c9		f0 16		beq $3907e1	                BEQ putc_screen     ; If it's 0: print to the screen
.3907cb		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907cd		f0 07		beq $3907d6	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907cf		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907d1		f0 03		beq $3907d6	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907d3		68		pla		                PLA                 ; Otherwise, just exit
.3907d4		80 57		bra $39082d	                BRA done
.3907d6		22 e4 5b 39	jsl $395be4	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907da		68		pla		                PLA                 ; Recover the character to send
.3907db		22 b9 5c 39	jsl $395cb9	                JSL UART_PUTC       ; Send the character
.3907df		80 4c		bra $39082d	                BRA done
.3907e1		68		pla		putc_screen     PLA                 ; Get the character to print
.3907e2		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907e4		f0 69		beq $39084f	                BEQ go_down
.3907e6		c9 20		cmp #$20	                CMP #$20
.3907e8		90 19		bcc $390803	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907ea		c9 7f		cmp #$7f	                CMP #$7F
.3907ec		f0 45		beq $390833	                BEQ do_del
.3907ee		b0 02		bcs $3907f2	                BCS check_A0        ; [$20..$7E]: print it
.3907f0		80 31		bra $390823	                BRA printc
.3907f2		c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907f4		90 02		bcc $3907f8	                BCC check_ctrl1
.3907f6		80 2b		bra $390823	                BRA printc          ; [$A0..$FF]: print it
.3907f8		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907fa		f0 53		beq $39084f	                BEQ go_down         ; ... move the cursor down one row
.3907fc		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907fe		f0 61		beq $390861	                BEQ go_left         ; ... move the cursor left one column
.390800		4c 2d 08	jmp $39082d	                JMP done
.390803		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.390805		f0 69		beq $390870	                BEQ do_TAB          ; ... move to the next TAB stop
.390807		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390809		f0 34		beq $39083f	                BEQ backspace       ; ... move the cursor back and replace with a space
.39080b		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.39080d		f0 3a		beq $390849	                BEQ do_cr           ; ... move cursor down and to the first column
.39080f		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390811		f0 42		beq $390855	                BEQ go_up           ; ... move the cursor up one row
.390813		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.390815		f0 44		beq $39085b	                BEQ go_right        ; ... move the cursor right one column
.390817		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390819		f0 1e		beq $390839	                BEQ do_ins          ; ... insert a space
.39081b		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.39081d		f0 48		beq $390867	                BEQ go_sol          ; ... move the cursor to the start of the line
.39081f		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390821		f0 74		beq $390897	                BEQ go_eol          ; ... move the cursor to the end of the line
.390823		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390825		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390827		87 1f		sta [$1f]	                STA [COLORPOS]
.390829		22 80 09 39	jsl $390980	                JSL ICSRRIGHT       ; And advance the cursor
.39082d		28		plp		done            PLP
.39082e		ab		plb		                PLB
.39082f		2b		pld		                PLD
.390830		7a		ply		                PLY
.390831		fa		plx		                PLX
.390832		6b		rtl		                RTL
.390833		22 c4 08 39	jsl $3908c4	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390837		80 f4		bra $39082d	                BRA done
.390839		22 e8 08 39	jsl $3908e8	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39083d		80 ee		bra $39082d	                BRA done
.39083f		22 b3 09 39	jsl $3909b3	backspace       JSL ICSRLEFT
.390843		22 c4 08 39	jsl $3908c4	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390847		80 e4		bra $39082d	                BRA done
.390849		22 20 09 39	jsl $390920	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39084d		80 de		bra $39082d	                BRA done
.39084f		22 ff 09 39	jsl $3909ff	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390853		80 d8		bra $39082d	                BRA done
.390855		22 d9 09 39	jsl $3909d9	go_up           JSL ICSRUP          ; Move the cursor up one line
.390859		80 d2		bra $39082d	                BRA done
.39085b		22 80 09 39	jsl $390980	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39085f		80 cc		bra $39082d	                BRA done
.390861		22 b3 09 39	jsl $3909b3	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390865		80 c6		bra $39082d	                BRA done
.390867						go_sol
.390867		c2 20		rep #$20	                REP #$20        ; set A long
.390869		a2 00 00	ldx #$0000	                LDX #0
.39086c		a4 1c		ldy $1c		                LDY CURSORY
.39086e		80 21		bra $390891	                BRA do_locate
.390870						do_TAB
.390870		c2 20		rep #$20	                REP #$20        ; set A long
.390872		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390874		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390877		18		clc		                CLC
.390878		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39087b		aa		tax		                TAX
.39087c		a4 1c		ldy $1c		                LDY CURSORY
.39087e		e2 20		sep #$20	                SEP #$20        ; set A short
.390880		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390882		90 04		bcc $390888	                BCC check_row       ; Yes: check the row
.390884		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390887		c8		iny		                INY                 ; ... and the next row
.390888		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39088a		90 05		bcc $390891	                BCC do_locate       ; Yes: reposition the cursor
.39088c		22 70 0a 39	jsl $390a70	                JSL ISCROLLUP       ; No: scroll the screen
.390890		88		dey		                DEY                 ; And set the row to the last one
.390891		22 24 0a 39	jsl $390a24	do_locate       JSL ILOCATE         ; Set the cursor position
.390895		80 96		bra $39082d	                BRA done
.390897		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390899		ca		dex		                DEX
.39089a		a4 1c		ldy $1c		                LDY CURSORY
.39089c		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.3908a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3908a2		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.3908a4		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.3908a6		d0 0b		bne $3908b3	                BNE eol_done        ; No: exit the loop
.3908a8		22 b3 09 39	jsl $3909b3	                JSL ICSRLEFT        ; Yes: move to the left
.3908ac		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908ae		d0 f2		bne $3908a2	                BNE eol_loop        ; No: try again
.3908b0		82 7a ff	brl $39082d	                BRL done            ; Yes: we're done
.3908b3		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908b5		e8		inx		                INX
.3908b6		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908b8		d0 03		bne $3908bd	                BNE eol_right
.3908ba		82 70 ff	brl $39082d	                BRL done            ; Yes: we're done
.3908bd		22 80 09 39	jsl $390980	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908c1		82 69 ff	brl $39082d	                BRL done
.3908c4		da		phx		SCRSHIFTLL      PHX
.3908c5		5a		phy		                PHY
.3908c6		48		pha		                PHA
.3908c7		0b		phd		                PHD
.3908c8		08		php		                PHP
.3908c9		48		pha		                PHA             ; begin setdp macro
.3908ca		08		php		                PHP
.3908cb		c2 20		rep #$20	                REP #$20        ; set A long
.3908cd		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908d0		5b		tcd		                TCD
.3908d1		28		plp		                PLP
.3908d2		68		pla		                PLA             ; end setdp macro
.3908d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d5		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908d7		a8		tay		                TAY                 ; Set it as the destination
.3908d8		aa		tax		                TAX
.3908d9		e8		inx		                INX                 ; And set the next cell as the source
.3908da		18		clc		                CLC                 ; Calculate the length of the block to move
.3908db		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908dd		e5 1a		sbc $1a		                SBC CURSORX
.3908df		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908e2		28		plp		                PLP
.3908e3		2b		pld		                PLD
.3908e4		68		pla		                PLA
.3908e5		7a		ply		                PLY
.3908e6		fa		plx		                PLX
.3908e7		6b		rtl		                RTL
.3908e8		da		phx		SCRSHIFTLR      PHX
.3908e9		48		pha		                PHA
.3908ea		0b		phd		                PHD
.3908eb		08		php		                PHP
.3908ec		48		pha		                PHA             ; begin setdp macro
.3908ed		08		php		                PHP
.3908ee		c2 20		rep #$20	                REP #$20        ; set A long
.3908f0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908f3		5b		tcd		                TCD
.3908f4		28		plp		                PLP
.3908f5		68		pla		                PLA             ; end setdp macro
.3908f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908f8		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908fa		1a		inc a		                INC A
.3908fb		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908fd		b0 1b		bcs $39091a	                BGE done            ; Yes: just skip the whole thing
.3908ff		38		sec		                SEC                 ; Calculate the length of the block to move
.390900		a5 0f		lda $0f		                LDA COLS_VISIBLE
.390902		e5 1a		sbc $1a		                SBC CURSORX
.390904		1a		inc a		                INC A
.390905		18		clc		                CLC
.390906		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.390908		3a		dec a		                DEC A
.390909		a8		tay		                TAY                 ; Make it the destination
.39090a		3a		dec a		                DEC A               ; Move to the previous column
.39090b		aa		tax		                TAX                 ; Make it the source
.39090c		38		sec		                SEC                 ; Calculate the length of the block to move
.39090d		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39090f		e5 1a		sbc $1a		                SBC CURSORX
.390911		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390914		e2 20		sep #$20	                SEP #$20        ; set A short
.390916		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390918		87 17		sta [$17]	                STA [CURSORPOS]
.39091a		28		plp		done            PLP
.39091b		2b		pld		                PLD
.39091c		68		pla		                PLA
.39091d		fa		plx		                PLX
.39091e		6b		rtl		                RTL
.39091f						IPUTB
.39091f		6b		rtl		                RTL
.390920						IPRINTCR
.390920		da		phx		                PHX
.390921		5a		phy		                PHY
.390922		8b		phb		                PHB
.390923		0b		phd		                PHD
.390924		08		php		                PHP
.390925		48		pha		                PHA             ; begin setdbr macro
.390926		08		php		                PHP
.390927		e2 20		sep #$20	                SEP #$20        ; set A short
.390929		a9 00		lda #$00	                LDA #0
.39092b		48		pha		                PHA
.39092c		ab		plb		                PLB
.39092d		28		plp		                PLP
.39092e		68		pla		                PLA             ; end setdbr macro
.39092f		48		pha		                PHA             ; begin setdp macro
.390930		08		php		                PHP
.390931		c2 20		rep #$20	                REP #$20        ; set A long
.390933		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390936		5b		tcd		                TCD
.390937		28		plp		                PLP
.390938		68		pla		                PLA             ; end setdp macro
.390939		e2 20		sep #$20	                SEP #$20        ; set A short
.39093b		c2 10		rep #$10	                REP #$10        ; set X long
.39093d		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390941		f0 1c		beq $39095f	                BEQ scr_printcr
.390943		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390945		f0 06		beq $39094d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390947		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390949		f0 02		beq $39094d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39094b		80 1c		bra $390969	                BRA done
.39094d		22 e4 5b 39	jsl $395be4	uart_printcr    JSL UART_SELECT
.390951		a9 0d		lda #$0d	                LDA #CHAR_CR
.390953		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.390957		a9 0a		lda #$0a	                LDA #CHAR_LF
.390959		22 a7 07 39	jsl $3907a7	                JSL IPUTC
.39095d		80 0a		bra $390969	                BRA done
.39095f		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390962		a4 1c		ldy $1c		                LDY CURSORY
.390964		c8		iny		                INY
.390965		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.390969		28		plp		done            PLP
.39096a		2b		pld		                PLD
.39096b		ab		plb		                PLB
.39096c		7a		ply		                PLY
.39096d		fa		plx		                PLX
.39096e		6b		rtl		                RTL
.39096f		da		phx		ICSRHOME        PHX
.390970		5a		phy		                PHY
.390971		08		php		                PHP
.390972		a2 00 00	ldx #$0000	                LDX #0
.390975		a0 00 00	ldy #$0000	                LDY #0
.390978		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.39097c		28		plp		                PLP
.39097d		7a		ply		                PLY
.39097e		fa		plx		                PLX
.39097f		6b		rtl		                RTL
.390980		da		phx		ICSRRIGHT       PHX
.390981		5a		phy		                PHY
.390982		48		pha		                PHA
.390983		0b		phd		                PHD
.390984		08		php		                PHP
.390985		c2 20		rep #$20	                REP #$20        ; set A long
.390987		c2 10		rep #$10	                REP #$10        ; set X long
.390989		48		pha		                PHA             ; begin setdp macro
.39098a		08		php		                PHP
.39098b		c2 20		rep #$20	                REP #$20        ; set A long
.39098d		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390990		5b		tcd		                TCD
.390991		28		plp		                PLP
.390992		68		pla		                PLA             ; end setdp macro
.390993		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390995		e8		inx		                INX
.390996		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390998		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39099a		90 0d		bcc $3909a9	                BCC icsrright_nowrap  ; No: just set the position
.39099c		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39099f		c8		iny		                INY                   ; And move to the next row
.3909a0		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3909a2		90 05		bcc $3909a9	                BCC icsrright_nowrap  ; No: just set the position
.3909a4		88		dey		                DEY                   ; Yes: lock to the last row
.3909a5		22 70 0a 39	jsl $390a70	                JSL ISCROLLUP         ; But scroll the screen up
.3909a9						icsrright_nowrap
.3909a9		22 24 0a 39	jsl $390a24	                JSL ILOCATE           ; Set the cursor position
.3909ad		28		plp		                PLP
.3909ae		2b		pld		                PLD
.3909af		68		pla		                PLA
.3909b0		7a		ply		                PLY
.3909b1		fa		plx		                PLX
.3909b2		6b		rtl		                RTL
.3909b3						ICSRLEFT
.3909b3		da		phx		                PHX
.3909b4		5a		phy		                PHY
.3909b5		48		pha		                PHA
.3909b6		0b		phd		                PHD
.3909b7		08		php		                PHP
.3909b8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909ba		48		pha		                PHA             ; begin setdp macro
.3909bb		08		php		                PHP
.3909bc		c2 20		rep #$20	                REP #$20        ; set A long
.3909be		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909c1		5b		tcd		                TCD
.3909c2		28		plp		                PLP
.3909c3		68		pla		                PLA             ; end setdp macro
.3909c4		a5 1a		lda $1a		                LDA CURSORX
.3909c6		f0 0b		beq $3909d3	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909c8		a6 1a		ldx $1a		                LDX CURSORX
.3909ca		ca		dex		                DEX
.3909cb		86 1a		stx $1a		                STX CURSORX
.3909cd		a4 1c		ldy $1c		                LDY CURSORY
.3909cf		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.3909d3						icsrleft_done_already_zero
.3909d3		28		plp		                PLP
.3909d4		2b		pld		                PLD
.3909d5		68		pla		                PLA
.3909d6		7a		ply		                PLY
.3909d7		fa		plx		                PLX
.3909d8		6b		rtl		                RTL
.3909d9						ICSRUP
.3909d9		da		phx		                PHX
.3909da		5a		phy		                PHY
.3909db		48		pha		                PHA
.3909dc		0b		phd		                PHD
.3909dd		08		php		                PHP
.3909de		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909e0		48		pha		                PHA             ; begin setdp macro
.3909e1		08		php		                PHP
.3909e2		c2 20		rep #$20	                REP #$20        ; set A long
.3909e4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909e7		5b		tcd		                TCD
.3909e8		28		plp		                PLP
.3909e9		68		pla		                PLA             ; end setdp macro
.3909ea		a5 1c		lda $1c		                LDA CURSORY
.3909ec		f0 0b		beq $3909f9	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909ee		a4 1c		ldy $1c		                LDY CURSORY
.3909f0		88		dey		                DEY
.3909f1		84 1c		sty $1c		                STY CURSORY
.3909f3		a6 1a		ldx $1a		                LDX CURSORX
.3909f5		22 24 0a 39	jsl $390a24	                JSL ILOCATE
.3909f9						isrup_done_already_zero
.3909f9		28		plp		                PLP
.3909fa		2b		pld		                PLD
.3909fb		68		pla		                PLA
.3909fc		7a		ply		                PLY
.3909fd		fa		plx		                PLX
.3909fe		6b		rtl		                RTL
.3909ff		da		phx		ICSRDOWN        PHX
.390a00		5a		phy		                PHY
.390a01		0b		phd		                PHD
.390a02		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a04		48		pha		                PHA             ; begin setdp macro
.390a05		08		php		                PHP
.390a06		c2 20		rep #$20	                REP #$20        ; set A long
.390a08		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a0b		5b		tcd		                TCD
.390a0c		28		plp		                PLP
.390a0d		68		pla		                PLA             ; end setdp macro
.390a0e		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a10		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a12		c8		iny		                INY
.390a13		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a15		90 05		bcc $390a1c	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a17		88		dey		                DEY                         ; Yes: go back to the last row
.390a18		22 70 0a 39	jsl $390a70	                JSL ISCROLLUP               ; But scroll the screen up
.390a1c						icsrdown_noscroll
.390a1c		22 24 0a 39	jsl $390a24	                JSL ILOCATE                 ; And set the cursor position
.390a20		2b		pld		                PLD
.390a21		7a		ply		                PLY
.390a22		fa		plx		                PLX
.390a23		6b		rtl		                RTL
.390a24		48		pha		ILOCATE         PHA
.390a25		0b		phd		                PHD
.390a26		08		php		                PHP
.390a27		48		pha		                PHA             ; begin setdp macro
.390a28		08		php		                PHP
.390a29		c2 20		rep #$20	                REP #$20        ; set A long
.390a2b		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a2e		5b		tcd		                TCD
.390a2f		28		plp		                PLP
.390a30		68		pla		                PLA             ; end setdp macro
.390a31		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a33						ilocate_scroll
.390a33		c4 13		cpy $13		                CPY LINES_VISIBLE
.390a35		90 07		bcc $390a3e	                BCC ilocate_scrolldone
.390a37		22 70 0a 39	jsl $390a70	                JSL ISCROLLUP
.390a3b		88		dey		                DEY
.390a3c		80 f5		bra $390a33	                BRA ilocate_scroll
.390a3e						ilocate_scrolldone
.390a3e		86 1a		stx $1a		                STX CURSORX
.390a40		84 1c		sty $1c		                STY CURSORY
.390a42		a5 0c		lda $0c		                LDA SCREENBEGIN
.390a44						ilocate_row
.390a44		c0 00 00	cpy #$0000	                CPY #$0
.390a47		f0 08		beq $390a51	                BEQ ilocate_right
.390a49		18		clc		ilocate_down    CLC
.390a4a		65 11		adc $11		                ADC COLS_PER_LINE
.390a4c		88		dey		                DEY
.390a4d		f0 02		beq $390a51	                BEQ ilocate_right
.390a4f		80 f8		bra $390a49	                BRA ilocate_down
.390a51		18		clc		ilocate_right   CLC
.390a52		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a54		85 17		sta $17		                STA CURSORPOS
.390a56		a4 1c		ldy $1c		                LDY CURSORY
.390a58		98		tya		                TYA
.390a59		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a5d		8a		txa		                TXA
.390a5e		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a62		c2 20		rep #$20	                REP #$20        ; set A long
.390a64		18		clc		                CLC
.390a65		a5 17		lda $17		                LDA CURSORPOS
.390a67		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a6a		85 1f		sta $1f		                STA COLORPOS
.390a6c		28		plp		ilocate_done    PLP
.390a6d		2b		pld		                PLD
.390a6e		68		pla		                PLA
.390a6f		6b		rtl		                RTL
.390a70						ISCROLLUP
.390a70		48		pha		                PHA
.390a71		da		phx		                PHX
.390a72		5a		phy		                PHY
.390a73		8b		phb		                PHB
.390a74		0b		phd		                PHD
.390a75		08		php		                PHP
.390a76		48		pha		                PHA             ; begin setdp macro
.390a77		08		php		                PHP
.390a78		c2 20		rep #$20	                REP #$20        ; set A long
.390a7a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a7d		5b		tcd		                TCD
.390a7e		28		plp		                PLP
.390a7f		68		pla		                PLA             ; end setdp macro
.390a80		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a82		a5 11		lda $11		                LDA COLS_PER_LINE
.390a84		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a88		a5 13		lda $13		                LDA LINES_VISIBLE
.390a8a		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a8e		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a92		85 00		sta $00		                STA TMPPTR1
.390a94		18		clc		                CLC
.390a95		a9 00 a0	lda #$a000	                LDA #$A000
.390a98		a8		tay		                TAY
.390a99		65 11		adc $11		                ADC COLS_PER_LINE
.390a9b		aa		tax		                TAX
.390a9c		a5 00		lda $00		                LDA TMPPTR1
.390a9e		54 af af	mvn $af,$af	                MVN $AF,$AF
.390aa1		c2 30		rep #$30	                REP #$30        ; set A&X long
.390aa3		18		clc		                CLC
.390aa4		a9 00 c0	lda #$c000	                LDA #$C000
.390aa7		a8		tay		                TAY
.390aa8		65 11		adc $11		                ADC COLS_PER_LINE
.390aaa		aa		tax		                TAX
.390aab		a5 00		lda $00		                LDA TMPPTR1
.390aad		54 af af	mvn $af,$af	                MVN $AF,$AF
.390ab0		a5 00		lda $00		                LDA TMPPTR1
.390ab2		48		pha		                PHA
.390ab3		18		clc		                CLC
.390ab4		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390ab7		85 00		sta $00		                STA TMPPTR1
.390ab9		a0 00 00	ldy #$0000	                LDY #0
.390abc		a9 20 00	lda #$0020	                LDA #' '
.390abf		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ac1		c8		iny		                INY
.390ac2		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ac4		d0 f9		bne $390abf	                BNE clr_text
.390ac6		68		pla		                PLA
.390ac7		18		clc		                CLC
.390ac8		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390acb		85 00		sta $00		                STA TMPPTR1
.390acd		a0 00 00	ldy #$0000	                LDY #0
.390ad0		a5 1e		lda $1e		                LDA CURCOLOR
.390ad2		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390ad4		c8		iny		                INY
.390ad5		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ad7		d0 f9		bne $390ad2	                BNE clr_color
.390ad9		28		plp		                PLP
.390ada		2b		pld		                PLD
.390adb		ab		plb		                PLB
.390adc		7a		ply		                PLY
.390add		fa		plx		                PLX
.390ade		68		pla		                PLA
.390adf		6b		rtl		                RTL
.390ae0		08		php		IPRINTH         PHP
.390ae1		48		pha		                PHA
.390ae2						iprinth1
.390ae2		e2 20		sep #$20	                SEP #$20        ; set A short
.390ae4		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390ae7		4a		lsr a		                LSR
.390ae8		4a		lsr a		                LSR
.390ae9		4a		lsr a		                LSR
.390aea		4a		lsr a		                LSR
.390aeb		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit
.390aef		bd 00 00	lda $0000,x	                LDA #0,b,x
.390af2		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit
.390af6		ca		dex		                DEX
.390af7		88		dey		                DEY
.390af8		d0 e8		bne $390ae2	                BNE iprinth1
.390afa		68		pla		                PLA
.390afb		28		plp		                PLP
.390afc		6b		rtl		                RTL
.390afd						IPRINTAH
.390afd		48		pha		                PHA
.390afe		08		php		                PHP
.390aff		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390b03		08		php		                PHP                   ; Get the processor status into A
.390b04		e2 20		sep #$20	                SEP #$20        ; set A short
.390b06		c2 10		rep #$10	                REP #$10        ; set X long
.390b08		68		pla		                PLA
.390b09		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b0b		c9 20		cmp #$20	                CMP #%00100000
.390b0d		f0 14		beq $390b23	                BEQ eight_bit
.390b0f		af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b13		4a		lsr a		                LSR A
.390b14		4a		lsr a		                LSR A
.390b15		4a		lsr a		                LSR A
.390b16		4a		lsr a		                LSR A
.390b17		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit      ; And print it
.390b1b		af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b1f		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit      ; And print it
.390b23		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b27		4a		lsr a		                LSR A
.390b28		4a		lsr a		                LSR A
.390b29		4a		lsr a		                LSR A
.390b2a		4a		lsr a		                LSR A
.390b2b		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit      ; And print it
.390b2f		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b33		22 3a 0b 39	jsl $390b3a	                JSL iprint_digit      ; And print it
.390b37		28		plp		                PLP
.390b38		68		pla		                PLA
.390b39		6b		rtl		                RTL
.390b3a		da		phx		iprint_digit    PHX
.390b3b		c2 20		rep #$20	                REP #$20        ; set A long
.390b3d		29 0f 00	and #$000f	                AND #$0F
.390b40		aa		tax		                TAX
.390b41		bf 93 72 39	lda $397293,x	                LDA hex_digits,X
.390b45		22 a7 07 39	jsl $3907a7	                JSL IPUTC       ; Print the digit
.390b49		fa		plx		                PLX
.390b4a		6b		rtl		                RTL
.390b4b		48		pha		ICLRSCREEN	    PHA
.390b4c		da		phx		                PHX
.390b4d		08		php		                PHP
.390b4e		e2 20		sep #$20	                SEP #$20        ; set A short
.390b50		c2 10		rep #$10	                REP #$10        ; set X long
.390b52		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b55		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b57		9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b5b		e8		inx		                inx
.390b5c		e0 00 20	cpx #$2000	                cpx #$2000
.390b5f		d0 f6		bne $390b57	                bne iclearloop0
.390b61		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b64		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b68		9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b6c		e8		inx		                inx
.390b6d		e0 00 20	cpx #$2000	                cpx #$2000
.390b70		d0 f6		bne $390b68	                bne iclearloop1
.390b72		28		plp		                PLP
.390b73		fa		plx		                PLX
.390b74		68		pla		                PLA
.390b75		6b		rtl		                RTL
.390b76						COPYBYTES42
.390b76		08		php		                PHP
.390b77		0b		phd		                PHD
.390b78		48		pha		                PHA             ; begin setdp macro
.390b79		08		php		                PHP
.390b7a		c2 20		rep #$20	                REP #$20        ; set A long
.390b7c		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b7f		5b		tcd		                TCD
.390b80		28		plp		                PLP
.390b81		68		pla		                PLA             ; end setdp macro
.390b82		e2 20		sep #$20	                SEP #$20        ; set A short
.390b84		c2 10		rep #$10	                REP #$10        ; set X long
.390b86		a0 00 00	ldy #$0000	                LDY #0
.390b89		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b8b		97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b8d		c8		iny		                INY
.390b8e		c0 2a 00	cpy #$002a	                CPY #42
.390b91		d0 f6		bne $390b89	                BNE copy_loop
.390b93		2b		pld		                PLD
.390b94		28		plp		                PLP
.390b95		60		rts		                RTS
.390b96						ICOLORFLAG
.390b96		48		pha		                PHA
.390b97		da		phx		                PHX
.390b98		5a		phy		                PHY
.390b99		08		php		                PHP
.390b9a		8b		phb		                PHB
.390b9b		0b		phd		                PHD
.390b9c		48		pha		                PHA             ; begin setdp macro
.390b9d		08		php		                PHP
.390b9e		c2 20		rep #$20	                REP #$20        ; set A long
.390ba0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390ba3		5b		tcd		                TCD
.390ba4		28		plp		                PLP
.390ba5		68		pla		                PLA             ; end setdp macro
.390ba6		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ba8		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390bab		85 04		sta $04		                STA TMPPTR2
.390bad		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390bb0		85 06		sta $06		                STA TMPPTR2+2
.390bb2		a9 6a 6f	lda #$6f6a	                LDA #<>greet_clr_line1
.390bb5		85 00		sta $00		                STA TMPPTR1
.390bb7		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390bba		85 02		sta $02		                STA TMPPTR1+2
.390bbc		20 76 0b	jsr $390b76	                JSR COPYBYTES42
.390bbf		18		clc		                CLC
.390bc0		a5 04		lda $04		                LDA TMPPTR2
.390bc2		65 11		adc $11		                ADC COLS_PER_LINE
.390bc4		85 04		sta $04		                STA TMPPTR2
.390bc6		a9 94 6f	lda #$6f94	                LDA #<>greet_clr_line2
.390bc9		85 00		sta $00		                STA TMPPTR1
.390bcb		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bce		85 02		sta $02		                STA TMPPTR1+2
.390bd0		20 76 0b	jsr $390b76	                JSR COPYBYTES42
.390bd3		18		clc		                CLC
.390bd4		a5 04		lda $04		                LDA TMPPTR2
.390bd6		65 11		adc $11		                ADC COLS_PER_LINE
.390bd8		85 04		sta $04		                STA TMPPTR2
.390bda		a9 be 6f	lda #$6fbe	                LDA #<>greet_clr_line3
.390bdd		85 00		sta $00		                STA TMPPTR1
.390bdf		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390be2		85 02		sta $02		                STA TMPPTR1+2
.390be4		20 76 0b	jsr $390b76	                JSR COPYBYTES42
.390be7		18		clc		                CLC
.390be8		a5 04		lda $04		                LDA TMPPTR2
.390bea		65 11		adc $11		                ADC COLS_PER_LINE
.390bec		85 04		sta $04		                STA TMPPTR2
.390bee		a9 e8 6f	lda #$6fe8	                LDA #<>greet_clr_line4
.390bf1		85 00		sta $00		                STA TMPPTR1
.390bf3		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390bf6		85 02		sta $02		                STA TMPPTR1+2
.390bf8		20 76 0b	jsr $390b76	                JSR COPYBYTES42
.390bfb		18		clc		                CLC
.390bfc		a5 04		lda $04		                LDA TMPPTR2
.390bfe		65 11		adc $11		                ADC COLS_PER_LINE
.390c00		85 04		sta $04		                STA TMPPTR2
.390c02		a9 12 70	lda #$7012	                LDA #<>greet_clr_line5
.390c05		85 00		sta $00		                STA TMPPTR1
.390c07		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390c0a		85 02		sta $02		                STA TMPPTR1+2
.390c0c		20 76 0b	jsr $390b76	                JSR COPYBYTES42
.390c0f		2b		pld		                PLD
.390c10		ab		plb		                PLB
.390c11		28		plp		                PLP
.390c12		7a		ply		                PLY
.390c13		fa		plx		                PLX
.390c14		68		pla		                PLA
.390c15		6b		rtl		                RTL
.390c16		0b		phd		IINITCHLUT		  PHD
.390c17		08		php		                PHP
.390c18		48		pha		                PHA
.390c19		da		phx		                PHX
.390c1a		e2 20		sep #$20	                SEP #$20        ; set A short
.390c1c		e2 10		sep #$10	                SEP #$10        ; set X short
.390c1e		a2 00		ldx #$00					        LDX	#$00
.390c20		bf 3c 70 39	lda $39703c,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c24		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c28		e8		inx		                inx
.390c29		e0 40		cpx #$40	                cpx #$40
.390c2b		d0 f3		bne $390c20	                bne lutinitloop0
.390c2d		a2 00		ldx #$00	                LDX	#$00
.390c2f		bf 7c 70 39	lda $39707c,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c33		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c37		e8		inx		                INX
.390c38		e0 40		cpx #$40	                CPX #$40
.390c3a		d0 f3		bne $390c2f	                bne lutinitloop1
.390c3c		c2 20		rep #$20	                REP #$20        ; set A long
.390c3e		c2 10		rep #$10	                REP #$10        ; set X long
.390c40		fa		plx		                PLX
.390c41		68		pla		                PLA
.390c42		28		plp		                PLP
.390c43		2b		pld		                PLD
.390c44		6b		rtl		                RTL
.390c45						IINITGAMMATABLE
.390c45		e2 20		sep #$20	                SEP #$20        ; set A short
.390c47		c2 10		rep #$10	                REP #$10        ; set X long
.390c49		a2 00 00	ldx #$0000	                ldx #$0000
.390c4c		bf 00 77 39	lda $397700,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c50		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c54		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c58		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c5c		e8		inx		                inx
.390c5d		e0 00 01	cpx #$0100	                cpx #$0100
.390c60		d0 ea		bne $390c4c	                bne initgammaloop
.390c62		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c64		6b		rtl		                RTL
.390c65		48		pha		IINITALLLUT     PHA
.390c66		da		phx		                PHX
.390c67		a2 00 00	ldx #$0000	                LDX #$0000
.390c6a		e2 20		sep #$20	                SEP #$20        ; set A short
.390c6c		a9 00		lda #$00	                LDA #$00
.390c6e		85 0a		sta $0a		                STA $0A     ; Temp Location
.390c70						iinit_lut_loop
.390c70		86 02		stx $02		                STX $02
.390c72		a6 0a		ldx $0a		                LDX $0A
.390c74		bf 00 76 39	lda $397600,x	                LDA GAMMA_2_2_Tbl, x
.390c78		49 55		eor #$55	                EOR  #$55
.390c7a		a6 02		ldx $02		                LDX $02
.390c7c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c80		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c84		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c88		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c8c		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c90		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c94		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c98		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c9c		e8		inx		                inx
.390c9d		86 02		stx $02		                STX $02
.390c9f		a6 0a		ldx $0a		                LDX $0A
.390ca1		bf 00 78 39	lda $397800,x	                LDA RANDOM_LUT_Tbl, x
.390ca5		a6 02		ldx $02		                LDX $02
.390ca7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cab		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390caf		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cb3		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cb7		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cbb		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cbf		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cc3		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cc7		e8		inx		                inx
.390cc8		86 02		stx $02		                STX $02
.390cca		a6 0a		ldx $0a		                LDX $0A
.390ccc		bf 00 77 39	lda $397700,x	                LDA GAMMA_1_8_Tbl, x
.390cd0		49 aa		eor #$aa	                EOR  #$AA
.390cd2		a6 02		ldx $02		                LDX $02
.390cd4		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cd8		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cdc		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ce0		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ce4		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ce8		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cec		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cf0		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cf4		e8		inx		                inx
.390cf5		a9 ff		lda #$ff	                LDA #$FF
.390cf7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cfb		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cff		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390d03		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390d07		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d0b		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d0f		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d13		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d17		e6 0a		inc $0a		                inc $0A
.390d19		e8		inx		                inx
.390d1a		e0 00 04	cpx #$0400	                cpx #$0400
.390d1d		f0 03		beq $390d22	                beq iinit_lut_exit
.390d1f		82 4e ff	brl $390c70	                brl iinit_lut_loop
.390d22						iinit_lut_exit
.390d22		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d24		fa		plx		                PLX
.390d25		68		pla		                PLA
.390d26		6b		rtl		                RTL
.390d27		48		pha		IINITVKYTXTMODE PHA
.390d28		08		php		                PHP
.390d29		e2 20		sep #$20	                SEP #$20        ; set A short
.390d2b		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d2f		29 01		and #$01	                AND #$01
.390d31		c9 01		cmp #$01	                CMP #$01
.390d33		d0 15		bne $390d4a	                BNE INITVICKYMODE
.390d35		a9 00		lda #$00	                LDA #$00
.390d37		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d3b		ea		nop		                NOP
.390d3c		ea		nop		                NOP
.390d3d		ea		nop		                NOP
.390d3e		ea		nop		                NOP
.390d3f		ea		nop		                NOP
.390d40		a9 01		lda #$01	                LDA #$01
.390d42		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d46		ea		nop		                NOP
.390d47		ea		nop		                NOP
.390d48		ea		nop		                NOP
.390d49		ea		nop		                NOP
.390d4a						INITVICKYMODE
.390d4a		a9 00		lda #$00	                LDA #$00
.390d4c		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d50		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d52		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d56		e2 20		sep #$20	                SEP #$20        ; set A short
.390d58		a9 20		lda #$20	                LDA #$20
.390d5a		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d5e		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d62		a9 00		lda #$00	                LDA #$00
.390d64		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d68		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d6a		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d6e		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d70		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d74		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d78		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d7a		22 81 0d 39	jsl $390d81	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d7e		28		plp		                PLP
.390d7f		68		pla		                PLA
.390d80		6b		rtl		                RTL
.390d81						ISETSIZES
.390d81		48		pha		                PHA
.390d82		da		phx		                PHX
.390d83		5a		phy		                PHY
.390d84		8b		phb		                PHB
.390d85		0b		phd		                PHD
.390d86		08		php		                PHP
.390d87		48		pha		                PHA             ; begin setdp macro
.390d88		08		php		                PHP
.390d89		c2 20		rep #$20	                REP #$20        ; set A long
.390d8b		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d8e		5b		tcd		                TCD
.390d8f		28		plp		                PLP
.390d90		68		pla		                PLA             ; end setdp macro
.390d91		48		pha		                PHA             ; begin setdbr macro
.390d92		08		php		                PHP
.390d93		e2 20		sep #$20	                SEP #$20        ; set A short
.390d95		a9 00		lda #$00	                LDA #0
.390d97		48		pha		                PHA
.390d98		ab		plb		                PLB
.390d99		28		plp		                PLP
.390d9a		68		pla		                PLA             ; end setdbr macro
.390d9b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d9d		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390da1		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390da3		0a		asl a		                ASL A
.390da4		aa		tax		                TAX                         ; Index to the col/line count in X
.390da5		c2 20		rep #$20	                REP #$20        ; set A long
.390da7		bf 24 0e 39	lda $390e24,x	                LDA cols_by_res,X           ; Get the number of columns
.390dab		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390dad		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390daf		bf 2c 0e 39	lda $390e2c,x	                LDA lines_by_res,X          ; Get the number of lines
.390db3		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390db5		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390db7		e2 20		sep #$20	                SEP #$20        ; set A short
.390db9		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390dbd		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390dbf		f0 5c		beq $390e1d	                BEQ done                    ; No border... the sizes are correct now
.390dc1		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390dc5		29 3f		and #$3f	                AND #$3F
.390dc7		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dc9		d0 04		bne $390dcf	                BNE frac_width
.390dcb		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dcc		4a		lsr a		                LSR A
.390dcd		80 03		bra $390dd2	                BRA store_width
.390dcf		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dd0		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dd1		1a		inc a		                INC A
.390dd2		85 00		sta $00		store_width     STA TMPPTR1
.390dd4		64 01		stz $01		                STZ TMPPTR1+1
.390dd6		e2 20		sep #$20	                SEP #$20        ; set A short
.390dd8		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390ddc		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dde		f0 04		beq $390de4	                BEQ adjust_width            ; No... just adjust the width of the screen
.390de0		c2 20		rep #$20	                REP #$20        ; set A long
.390de2		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390de4						adjust_width
.390de4		c2 20		rep #$20	                REP #$20        ; set A long
.390de6		38		sec		                SEC
.390de7		a5 11		lda $11		                LDA COLS_PER_LINE
.390de9		e5 00		sbc $00		                SBC TMPPTR1
.390deb		85 0f		sta $0f		                STA COLS_VISIBLE
.390ded		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390df1		29 3f 00	and #$003f	                AND #$3F
.390df4		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390df7		d0 04		bne $390dfd	                BNE frac_height
.390df9		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dfa		4a		lsr a		                LSR A
.390dfb		80 03		bra $390e00	                BRA store_height
.390dfd		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dfe		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dff		1a		inc a		                INC A
.390e00		85 00		sta $00		store_height    STA TMPPTR1
.390e02		64 01		stz $01		                STZ TMPPTR1+1
.390e04		e2 20		sep #$20	                SEP #$20        ; set A short
.390e06		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e0a		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e0c		f0 04		beq $390e12	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e0e		c2 20		rep #$20	                REP #$20        ; set A long
.390e10		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e12						adjust_height
.390e12		c2 20		rep #$20	                REP #$20        ; set A long
.390e14		38		sec		                SEC
.390e15		a5 15		lda $15		                LDA LINES_MAX
.390e17		e5 00		sbc $00		                SBC TMPPTR1
.390e19		85 13		sta $13		                STA LINES_VISIBLE
.390e1b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e1d		28		plp		done            PLP
.390e1e		2b		pld		                PLD
.390e1f		ab		plb		                PLB
.390e20		7a		ply		                PLY
.390e21		fa		plx		                PLX
.390e22		68		pla		                PLA
.390e23		6b		rtl		                RTL
>390e24		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e2c		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e34						IINITVKYGRPMODE
.390e34		48		pha		                PHA
.390e35		e2 20		sep #$20	                SEP #$20        ; set A short
.390e37		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e39		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e3d		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e3f		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e43		a9 c0		lda #$c0	                LDA #$C0
.390e45		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e49		a9 00		lda #$00	                LDA #$00
.390e4b		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e4f		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e51		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e55		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e57		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e5b		a9 c0		lda #$c0	                LDA #$C0
.390e5d		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e61		a9 00		lda #$00	                LDA #$00
.390e63		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e67		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e69		68		pla		                PLA
.390e6a		6b		rtl		                RTL
.390e6b						IINITTILEMODE
.390e6b		6b		rtl		                RTL
.390e6c		48		pha		IINITSPRITE     PHA
.390e6d		e2 20		sep #$20	                SEP #$20        ; set A short
.390e6f		a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e71		8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e75		8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e79		8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e7d		8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e81		8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e85		8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e89		8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e8d		8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e91		8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e95		8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e99		8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e9d		8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390ea1		8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390ea5		8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390ea9		8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390ead		8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390eb1		8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390eb5		a9 09		lda #$09	                LDA #$09
.390eb7		8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390ebb		8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390ebf		8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390ec3		8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390ec7		8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390ecb		8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390ecf		8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390ed3		8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390ed7		8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390edb		8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390edf		8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390ee3		8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390ee7		8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390eeb		8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390eef		8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390ef3		8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390ef7		8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390efb		a9 00		lda #$00	                LDA #$00
.390efd		8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390f01		a9 04		lda #$04	                LDA #$04
.390f03		8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390f07		a9 08		lda #$08	                LDA #$08
.390f09		8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390f0d		a9 0c		lda #$0c	                LDA #$0C
.390f0f		8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390f13		a9 10		lda #$10	                LDA #$10
.390f15		8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390f19		a9 14		lda #$14	                LDA #$14
.390f1b		8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390f1f		a9 18		lda #$18	                LDA #$18
.390f21		8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f25		a9 1c		lda #$1c	                LDA #$1C
.390f27		8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f2b		a9 20		lda #$20	                LDA #$20
.390f2d		8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f31		a9 24		lda #$24	                LDA #$24
.390f33		8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f37		a9 28		lda #$28	                LDA #$28
.390f39		8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f3d		a9 2c		lda #$2c	                LDA #$2C
.390f3f		8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f43		a9 30		lda #$30	                LDA #$30
.390f45		8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f49		a9 34		lda #$34	                LDA #$34
.390f4b		8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f4f		a9 38		lda #$38	                LDA #$38
.390f51		8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f55		a9 3c		lda #$3c	                LDA #$3C
.390f57		8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f5b		a9 40		lda #$40	                LDA #$40
.390f5d		8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f61		a9 00		lda #$00	                LDA #$00
.390f63		8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f67		8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f6b		8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f6f		8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f73		8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f77		8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f7b		8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f7f		8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f83		8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f87		8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f8b		8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f8f		8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f93		8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f97		8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f9b		8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f9f		8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390fa3		8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390fa7		68		pla		                PLA
.390fa8		6b		rtl		                RTL
.390fa9						IINITFONTSET
.390fa9		48		pha		                PHA
.390faa		da		phx		                PHX
.390fab		5a		phy		                PHY
.390fac		8b		phb		                PHB
.390fad		08		php		                PHP
.390fae		c2 30		rep #$30	                REP #$30        ; set A&X long
.390fb0		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390fb3		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390fb6		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390fb9		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390fbc		28		plp		                PLP
.390fbd		ab		plb		                PLB
.390fbe		7a		ply		                PLY
.390fbf		fa		plx		                PLX
.390fc0		68		pla		                PLA
.390fc1		6b		rtl		                RTL
.390fc2						INITMOUSEPOINTER
.390fc2		e2 20		sep #$20	                SEP #$20        ; set A short
.390fc4		c2 10		rep #$10	                REP #$10        ; set X long
.390fc6		a2 00 00	ldx #$0000	                LDX #$0000
.390fc9						FILL_MOUSE_MARKER
.390fc9		bf 00 79 39	lda $397900,x	                LDA @lMOUSE_POINTER_PTR,X
.390fcd		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390fd1		e8		inx		                INX
.390fd2		e0 00 01	cpx #$0100	                CPX #$0100
.390fd5		d0 f2		bne $390fc9	                BNE FILL_MOUSE_MARKER
.390fd7		ea		nop		                nop
.390fd8		a9 01		lda #$01	                LDA #$01
.390fda		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390fde		c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe0		6b		rtl		                RTL
.390fe1		48		pha		IINITCURSOR     PHA
.390fe2		e2 20		sep #$20	                SEP #$20        ; set A short
.390fe4		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fe6		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fea		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fec		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ff0		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ff2		a9 00 00	lda #$0000	                LDA #$0000;
.390ff5		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ff9		a9 06 00	lda #$0006	                LDA #$0006;
.390ffc		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.391000		68		pla		                PLA
.391001		6b		rtl		                RTL
.391002		0b		phd		IINITSUPERIO	  PHD
.391003		08		php		                PHP
.391004		48		pha		                PHA
.391005		e2 20		sep #$20	                SEP #$20        ; set A short
.391007		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391009		8f 23 11 af	sta $af1123	                STA GP10_REG
.39100d		af 23 11 af	lda $af1123	                LDA GP10_REG
.391011		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391013		8f 24 11 af	sta $af1124	                STA GP11_REG
.391017		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391019		8f 25 11 af	sta $af1125	                STA GP12_REG
.39101d		a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39101f		8f 26 11 af	sta $af1126	        				STA GP13_REG
.391023		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.391025		8f 27 11 af	sta $af1127	        				STA GP14_REG
.391029		a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.39102b		8f 28 11 af	sta $af1128	        				STA GP15_REG
.39102f		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.391031		8f 29 11 af	sta $af1129	        				STA GP16_REG
.391035		a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.391037		8f 2a 11 af	sta $af112a	        				STA GP17_REG
.39103b		a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.39103d		8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391041		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391043		8f 2f 11 af	sta $af112f					        STA GP24_REG
.391047		a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.391049		8f 30 11 af	sta $af1130					        STA GP25_REG
.39104d		a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.39104f		8f 31 11 af	sta $af1131					        STA GP26_REG
.391053		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.391055		8f 33 11 af	sta $af1133					        STA GP30_REG
.391059		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.39105b		8f 34 11 af	sta $af1134					        STA GP31_REG
.39105f		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391061		8f 35 11 af	sta $af1135					        STA GP32_REG
.391065		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.391067		8f 36 11 af	sta $af1136					        STA GP33_REG
.39106b		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.39106d		8f 37 11 af	sta $af1137					        STA GP34_REG
.391071		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391073		8f 38 11 af	sta $af1138					        STA GP35_REG
.391077		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.391079		8f 39 11 af	sta $af1139					        STA GP36_REG
.39107d		a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.39107f		8f 3a 11 af	sta $af113a					        STA GP37_REG
.391083		a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391085		8f 3d 11 af	sta $af113d					        STA GP42_REG
.391089		a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.39108b		8f 3e 11 af	sta $af113e					        STA GP43_REG
.39108f		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391091		8f 3f 11 af	sta $af113f					        STA GP50_REG
.391095		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.391097		8f 40 11 af	sta $af1140					        STA GP51_REG
.39109b		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.39109d		8f 41 11 af	sta $af1141					        STA GP52_REG
.3910a1		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.3910a3		8f 42 11 af	sta $af1142					        STA GP53_REG
.3910a7		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.3910a9		8f 43 11 af	sta $af1143					        STA GP54_REG
.3910ad		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.3910af		8f 44 11 af	sta $af1144					        STA GP55_REG
.3910b3		a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910b5		8f 45 11 af	sta $af1145					        STA GP56_REG
.3910b9		a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910bb		8f 46 11 af	sta $af1146					        STA GP57_REG
.3910bf		a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910c1		8f 47 11 af	sta $af1147					        STA GP60_REG
.3910c5		a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910c7		8f 48 11 af	sta $af1148					        STA GP61_REG
.3910cb		a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.3910cd		8f 4b 11 af	sta $af114b					        STA GP1_REG
.3910d1		a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.3910d3		8f 4c 11 af	sta $af114c					        STA GP2_REG
.3910d7		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.3910d9		8f 4d 11 af	sta $af114d					        STA GP3_REG
.3910dd		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.3910df		8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910e3		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910e5		8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910e9		a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910eb		8f 50 11 af	sta $af1150					        STA GP6_REG
.3910ef		a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910f1		8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910f5		a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910f7		8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910fb		c2 20		rep #$20	                REP #$20        ; set A long
.3910fd		68		pla		                PLA
.3910fe		28		plp						        PLP
.3910ff		2b		pld					        	PLD
.391100		6b		rtl		                RTL
.391101		0b		phd		IINITKEYBOARD	  PHD
.391102		08		php						        PHP
.391103		48		pha						        PHA
.391104		da		phx						        PHX
.391105		e2 20		sep #$20	                SEP #$20        ; set A short
.391107		c2 10		rep #$10	                REP #$10        ; set X long
.391109		18		clc		                CLC
.39110a		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf ;
.39110d		a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.39110f		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391113		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.391116		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.39111a		c9 55		cmp #$55					        CMP #$55
.39111c		f0 03		beq $391121					        BEQ	passAAtest
.39111e		82 89 00	brl $3911aa	                BRL initkb_loop_out
.391121						passAAtest
.391121		a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391123		8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391127		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.39112a		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.39112e		c9 00		cmp #$00					        CMP #$00			;Should be 00
.391130		f0 03		beq $391135					        BEQ	passABtest
.391132		82 75 00	brl $3911aa	                BRL initkb_loop_out
.391135						passABtest
.391135		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391137		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39113b		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf ;
.39113e		a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.391140		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391144		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf ;
.391147		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391149		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39114d		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391150		ca		dex		DLY_LOOP1       DEX
.391151		ea		nop		                NOP
.391152		ea		nop		                NOP
.391153		ea		nop		                NOP
.391154		ea		nop		                NOP
.391155		ea		nop		                NOP
.391156		ea		nop		                NOP
.391157		ea		nop		                NOP
.391158		ea		nop		                NOP
.391159		e0 00 00	cpx #$0000	                CPX #$0000
.39115c		d0 f2		bne $391150	                BNE DLY_LOOP1
.39115e		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.391161		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391165						DO_CMD_F4_AGAIN
.391165		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf ;
.391168		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.39116a		8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39116e		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.391171		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391175		c9 fa		cmp #$fa	                CMP #$FA
.391177		d0 ec		bne $391165	                BNE DO_CMD_F4_AGAIN
.391179		20 d0 11	jsr $3911d0	                JSR INIT_MOUSE
.39117c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.391180		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391182		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391186		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.39118a		29 01		and #$01	                AND #FNX1_INT00_KBD
.39118c		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391190		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391194		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391196		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39119a		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39119e		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3911a0		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.3911a4		a2 38 71	ldx #$7138	                LDX #<>Success_kb_init
.3911a7		38		sec		                SEC
.3911a8		b0 03		bcs $3911ad	                BCS InitSuccess
.3911aa		a2 4a 71	ldx #$714a	initkb_loop_out LDX #<>Failed_kb_init
.3911ad		22 87 07 39	jsl $390787	InitSuccess     JSL IPRINT       ; print Message
.3911b1		c2 20		rep #$20	                REP #$20        ; set A long
.3911b3		c2 10		rep #$10	                REP #$10        ; set X long
.3911b5		fa		plx		                PLX
.3911b6		68		pla		                PLA
.3911b7		28		plp						        PLP
.3911b8		2b		pld						        PLD
.3911b9		6b		rtl		                RTL
.3911ba						Poll_Inbuf
.3911ba		af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911be		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911c0		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911c2		f0 f6		beq $3911ba					        BEQ Poll_Inbuf
.3911c4		60		rts		                RTS
.3911c5						Poll_Outbuf
.3911c5		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911c9		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3911cb		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3911cd		d0 f6		bne $3911c5	                BNE Poll_Outbuf
.3911cf		60		rts		                RTS
.3911d0						INIT_MOUSE
.3911d0		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.3911d3		a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3911d5		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911d9						DO_CMD_A9_AGAIN
.3911d9		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.3911dc		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3911de		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911e2		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.3911e5		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911e9		c9 00		cmp #$00	                CMP #$00
.3911eb		d0 ec		bne $3911d9	                BNE DO_CMD_A9_AGAIN
.3911ed		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.3911f0		a9 20		lda #$20	                LDA #$20
.3911f2		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911f6		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.3911f9		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911fd		09 02		ora #$02	                ORA #$02
.3911ff		48		pha		                PHA
.391200		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.391203		a9 60		lda #$60	                LDA #$60
.391205		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391209		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf ;
.39120c		68		pla		                PLA
.39120d		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391211		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391213		20 36 12	jsr $391236	                JSR MOUSE_WRITE
.391216		20 49 12	jsr $391249	                JSR MOUSE_READ
.391219		a9 e8		lda #$e8	                LDA #$E8
.39121b		20 36 12	jsr $391236	                JSR MOUSE_WRITE
.39121e		20 49 12	jsr $391249	                JSR MOUSE_READ
.391221		a9 00		lda #$00	                LDA #$00
.391223		20 36 12	jsr $391236	                JSR MOUSE_WRITE
.391226		20 49 12	jsr $391249	                JSR MOUSE_READ
.391229		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.39122b		20 36 12	jsr $391236	                JSR MOUSE_WRITE
.39122e		20 49 12	jsr $391249	                JSR MOUSE_READ
.391231		a9 00		lda #$00	                LDA #$00
.391233		85 e0		sta $e0		                STA MOUSE_PTR
.391235		60		rts		                RTS
.391236						MOUSE_WRITE
.391236		48		pha		                PHA
.391237		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.39123a		a9 d4		lda #$d4	                LDA #$D4
.39123c		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391240		20 ba 11	jsr $3911ba	                JSR Poll_Inbuf
.391243		68		pla		                PLA
.391244		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391248		60		rts		                RTS
.391249						MOUSE_READ
.391249		20 c5 11	jsr $3911c5	                JSR Poll_Outbuf ;
.39124c		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391250		60		rts		                RTS
.391251		48		pha		INITRTC         PHA
.391252		08		php		                PHP
.391253		e2 20		sep #$20	                SEP #$20        ; set A short
.391255		a9 00		lda #$00	                LDA #0
.391257		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39125b		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39125f		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391263		09 04		ora #$04	                ORA #%00000100
.391265		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391269		28		plp		                PLP
.39126a		68		pla		                PLA
.39126b		6b		rtl		                RTL
.39126c						ITESTSID
.39126c		a9 0f		lda #$0f	                LDA #$0F
.39126e		8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391272		a9 be		lda #$be	                LDA #$BE
.391274		8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391278		a9 f8		lda #$f8	                LDA #$F8
.39127a		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39127e		a9 11		lda #$11	                LDA #$11
.391280		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391284		a9 25		lda #$25	                LDA #$25
.391286		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39128a		a9 11		lda #$11	                LDA #$11
.39128c		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391290		a9 08		lda #$08	                LDA #$08
.391292		8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391296		a9 00		lda #$00	                LDA #$00
.391298		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39129c		a9 c6		lda #$c6	                LDA #$C6
.39129e		8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.3912a2		a9 08		lda #$08	                LDA #$08
.3912a4		8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912a8		a9 00		lda #$00	                LDA #$00
.3912aa		8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.3912ae		a9 08		lda #$08	                LDA #$08
.3912b0		8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912b4		a9 c6		lda #$c6	                LDA #$C6
.3912b6		8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912ba		a9 08		lda #$08	                LDA #$08
.3912bc		8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912c0		a9 00		lda #$00	                LDA #$00
.3912c2		8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912c6		a9 08		lda #$08	                LDA #$08
.3912c8		8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3912cc		a9 c6		lda #$c6	                LDA #$C6
.3912ce		8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3912d2		a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3912d4		8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912d8		a9 01		lda #$01	                LDA #$01
.3912da		8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3912de		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912e0		8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912e4		a9 08		lda #$08	                LDA #$08
.3912e6		8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912ea		a9 08		lda #$08	                LDA #$08
.3912ec		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912f0		a9 0c		lda #$0c	                LDA #$0C
.3912f2		8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912f6		a9 04		lda #$04	                LDA #$04
.3912f8		8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912fc		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912fe		8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.391302		a9 08		lda #$08	                LDA #$08
.391304		8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391308		a9 08		lda #$08	                LDA #$08
.39130a		8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.39130e		a9 00		lda #$00	                LDA #$00
.391310		8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391314		a9 08		lda #$08	                LDA #$08
.391316		8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.39131a		a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.39131c		8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391320		a9 08		lda #$08	                LDA #$08
.391322		8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391326		a9 08		lda #$08	                LDA #$08
.391328		8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.39132c		a9 10		lda #$10	                LDA #$10
.39132e		8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391332		8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391336		8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39133a		6b		rtl		                RTL
.39133b		48		pha		IINITCODEC      PHA
.39133c		c2 20		rep #$20	                REP #$20        ; set A long
.39133e		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391341		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391345		a9 01 00	lda #$0001	                LDA #$0001
.391348		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39134c		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.39134f		a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391352		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391356		a9 01 00	lda #$0001	                LDA #$0001
.391359		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39135d		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.391360		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391363		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391367		a9 01 00	lda #$0001	                LDA #$0001
.39136a		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39136e		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.391371		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391374		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391378		a9 01 00	lda #$0001	                LDA #$0001
.39137b		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39137f		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.391382		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391385		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391389		a9 01 00	lda #$0001	                LDA #$0001
.39138c		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391390		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.391393		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391396		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39139a		a9 01 00	lda #$0001	                LDA #$0001
.39139d		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913a1		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.3913a4		a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.3913a7		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913ab		a9 01 00	lda #$0001	                LDA #$0001
.3913ae		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913b2		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.3913b5		68		pla		                PLA
.3913b6		6b		rtl		                RTL
.3913b7						IRESETCODEC
.3913b7		c2 20		rep #$20	                REP #$20        ; set A long
.3913b9		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3913bc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913c0		a9 01 00	lda #$0001	                LDA #$0001
.3913c3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913c7		20 cb 13	jsr $3913cb	                JSR CODEC_TRF_FINISHED
.3913ca		6b		rtl		                RTL
.3913cb						CODEC_TRF_FINISHED
.3913cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3913cd		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3913d1		29 01		and #$01	                AND #$01
.3913d3		c9 01		cmp #$01	                CMP #$01
.3913d5		f0 f6		beq $3913cd	                BEQ CODEC_LOOP
.3913d7		c2 20		rep #$20	                REP #$20        ; set A long
.3913d9		60		rts		                RTS
.3913da						IBM_FILL_SCREEN
.3913da		c2 30		rep #$30	                REP #$30        ; set A&X long
.3913dc		a9 00 00	lda #$0000	                LDA #$0000
.3913df		a2 00 00	ldx #$0000	                LDX #$0000
.3913e2						BM_FILL_SCREEN_LOOPY
.3913e2		a0 00 00	ldy #$0000	                LDY #$0000
.3913e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3913e7						BM_FILL_SCREEN_LOOPX
.3913e7		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913e9		c8		iny		                INY
.3913ea		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913ec		d0 f9		bne $3913e7	                BNE BM_FILL_SCREEN_LOOPX
.3913ee		20 f9 13	jsr $3913f9	                JSR BM_FILL_COMPUTE_Y_DST
.3913f1		e8		inx		                INX
.3913f2		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913f4		d0 ec		bne $3913e2	                BNE BM_FILL_SCREEN_LOOPY
.3913f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3913f8		6b		rtl		                RTL
.3913f9						BM_FILL_COMPUTE_Y_DST
.3913f9		c2 20		rep #$20	                REP #$20        ; set A long
.3913fb		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913fd		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391401		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391403		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391407		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39140a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39140e		a9 00 00	lda #$0000	                LDA #$0000
.391411		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391415		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391419		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39141b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39141f		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391421		a9 00 00	lda #$0000	                LDA #$0000
.391424		60		rts		                RTS
.391425						IBMP_PARSER
.391425		c2 30		rep #$30	                REP #$30        ; set A&X long
.391427		a0 00 00	ldy #$0000	                LDY #$0000
.39142a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39142c		c9 42 4d	cmp #$4d42	                CMP #$4D42
.39142f		f0 03		beq $391434	                BEQ IBMP_PARSER_CONT
.391431		82 04 01	brl $391538	                BRL BMP_PARSER_END_WITH_ERROR
.391434						IBMP_PARSER_CONT
.391434		a0 02 00	ldy #$0002	                LDY #$0002
.391437		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391439		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39143d		a0 04 00	ldy #$0004	                LDY #$0004
.391440		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391442		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391446		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391449		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39144d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391451		18		clc		                CLC
.391452		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391456		85 50		sta $50		                STA BMP_FILE_SIZE
.391458		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39145c		85 52		sta $52		                STA BMP_FILE_SIZE+2
.39145e		a0 12 00	ldy #$0012	                LDY #$0012
.391461		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391463		85 40		sta $40		                STA BMP_X_SIZE
.391465		a0 16 00	ldy #$0016	                LDY #$0016
.391468		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39146a		85 42		sta $42		                STA BMP_Y_SIZE
.39146c		a0 2e 00	ldy #$002e	                LDY #$002E
.39146f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391471		0a		asl a		                ASL A; Multiply by 2
.391472		0a		asl a		                ASL A; Multiply by 2
.391473		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391475		e0 00 00	cpx #$0000	                CPX #$0000
.391478		d0 05		bne $39147f	                BNE BMP_LUT1_PICK
.39147a		20 40 15	jsr $391540	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39147d		80 08		bra $391487	                BRA DONE_TRANSFER_LUT;
.39147f						  BMP_LUT1_PICK
.39147f		e0 01 00	cpx #$0001	                CPX #$0001
.391482		d0 03		bne $391487	                BNE BMP_LUT2_PICK
.391484		20 70 15	jsr $391570	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391487						  BMP_LUT2_PICK
.391487						  DONE_TRANSFER_LUT
.391487		a5 56		lda $56		                LDA BMP_POSITION_Y
.391489		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39148d		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39148f		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391493		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391497		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39149b		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39149f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914a3		a5 54		lda $54		                LDA BMP_POSITION_X
.3914a5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3914a9		a9 00 00	lda #$0000	                LDA #$0000
.3914ac		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914b0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914b4		85 f0		sta $f0		                STA USER_TEMP
.3914b6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3914ba		85 f2		sta $f2		                STA USER_TEMP+2
.3914bc		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914be		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914c2		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914c4		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914c8		a5 f0		lda $f0		                LDA USER_TEMP
.3914ca		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3914ce		a5 f2		lda $f2		                LDA USER_TEMP+2
.3914d0		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3914d4		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3914d8		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914da		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3914de		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914e0		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914e2		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914e6		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914e8		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914ec		a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914ee		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914f2		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914f4		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914f8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914fc		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914fe		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391502		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391504		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391506		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39150a		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39150c		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391510		18		clc		                CLC
.391511		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391513		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391516		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391519		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39151d		a9 ff ff	lda #$ffff	                LDA #$FFFF
.391520		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391524		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391528		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39152a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39152e		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391530		20 a0 15	jsr $3915a0	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391533		a2 86 71	ldx #$7186	                LDX #<>bmp_parser_msg0
.391536		80 03		bra $39153b	                BRA BMP_PARSER_END_NO_ERROR
.391538						BMP_PARSER_END_WITH_ERROR
.391538		a2 72 71	ldx #$7172	                LDX #<>bmp_parser_err0
.39153b						BMP_PARSER_END_NO_ERROR
.39153b		22 87 07 39	jsl $390787	                JSL IPRINT       ; print the first line
.39153f		6b		rtl		                RTL
.391540						BMP_PARSER_UPDATE_LUT0
.391540		38		sec		                SEC
.391541		a0 7a 00	ldy #$007a	                LDY #$007A
.391544		a2 00 00	ldx #$0000	                LDX #$0000
.391547		e2 20		sep #$20	                SEP #$20        ; set A short
.391549						BMP_PARSER_UPDATE_LOOP
.391549		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39154b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39154f		c8		iny		                INY
.391550		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391552		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391556		c8		iny		                INY
.391557		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391559		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39155d		c8		iny		                INY
.39155e		a9 80		lda #$80	                LDA #$80
.391560		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391564		c8		iny		                INY ; For the Alpha Value, nobody cares
.391565		e8		inx		                INX
.391566		e8		inx		                INX
.391567		e8		inx		                INX
.391568		e8		inx		                INX
.391569		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39156b		d0 dc		bne $391549	                BNE BMP_PARSER_UPDATE_LOOP
.39156d		c2 20		rep #$20	                REP #$20        ; set A long
.39156f		60		rts		                RTS
.391570						BMP_PARSER_UPDATE_LUT1
.391570		38		sec		                SEC
.391571		a0 36 00	ldy #$0036	                LDY #$0036
.391574		a2 00 00	ldx #$0000	                LDX #$0000
.391577		e2 20		sep #$20	                SEP #$20        ; set A short
.391579						PALETTE_LUT1_LOOP
.391579		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39157b		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39157f		c8		iny		                INY
.391580		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391582		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391586		c8		iny		                INY
.391587		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391589		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39158d		c8		iny		                INY
.39158e		a9 80		lda #$80	                LDA #$80
.391590		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391594		c8		iny		                INY ; For the Alpha Value, nobody cares
.391595		e8		inx		                INX
.391596		e8		inx		                INX
.391597		e8		inx		                INX
.391598		e8		inx		                INX
.391599		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39159b		d0 dc		bne $391579	                BNE PALETTE_LUT1_LOOP
.39159d		c2 20		rep #$20	                REP #$20        ; set A long
.39159f		60		rts		                RTS
.3915a0						BMP_PARSER_DMA_SHIT_OUT
.3915a0		a2 00 00	ldx #$0000	                LDX #$0000
.3915a3						BMP_PARSER_LOOPY
.3915a3		a0 00 00	ldy #$0000	                LDY #$0000
.3915a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3915a8						BMP_PARSER_LOOPX
.3915a8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3915aa		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3915ac		c8		iny		                INY
.3915ad		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3915af		d0 f7		bne $3915a8	                BNE BMP_PARSER_LOOPX
.3915b1		20 bd 15	jsr $3915bd	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915b4		20 d8 15	jsr $3915d8	                JSR BMP_PARSER_COMPUTE_Y_DST
.3915b7		e8		inx		                INX
.3915b8		e4 42		cpx $42		                CPX BMP_Y_SIZE
.3915ba		d0 e7		bne $3915a3	                BNE BMP_PARSER_LOOPY
.3915bc		60		rts		                RTS
.3915bd						BMP_PARSER_COMPUTE_Y_SRC
.3915bd		c2 20		rep #$20	                REP #$20        ; set A long
.3915bf		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3915c1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3915c5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3915c7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3915cb		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3915cf		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3915d1		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3915d5		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3915d7		60		rts		                RTS
.3915d8						BMP_PARSER_COMPUTE_Y_DST
.3915d8		c2 20		rep #$20	                REP #$20        ; set A long
.3915da		18		clc		                CLC
.3915db		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3915dd		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3915df		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915e1		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915e3		69 00 00	adc #$0000	                ADC #$0000
.3915e6		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915e8		60		rts		                RTS
.3915e9		ea		nop		ILOOP           NOP
.3915ea		ea		nop		                NOP
.3915eb		ea		nop		                NOP
.3915ec		ea		nop		                NOP
.3915ed		ea		nop		                NOP
.3915ee		ea		nop		                NOP
.3915ef		ea		nop		                NOP
.3915f0		ea		nop		                NOP
.3915f1		ea		nop		                NOP
.3915f2		ea		nop		                NOP
.3915f3		6b		rtl		                RTL
.3915f4		22 e9 15 39	jsl $3915e9	ILOOP_1         JSL ILOOP
.3915f8		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.3915fc		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391600		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391604		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391608		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.39160c		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391610		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391614		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.391618		22 e9 15 39	jsl $3915e9	                JSL ILOOP
.39161c		6b		rtl		                RTL
.39161d		22 f4 15 39	jsl $3915f4	ILOOP_1MS       JSL ILOOP_1
.391621		6b		rtl		                RTL
.391622		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391625		f0 07		beq $39162e	                BEQ LOOP_MS_END
.391627		22 1d 16 39	jsl $39161d	                JSL ILOOP_1MS
.39162b		ca		dex		                DEX
.39162c		80 f4		bra $391622	                BRA ILOOP_MS
.39162e		6b		rtl		LOOP_MS_END     RTL
.39162f						IDELAY
.39162f		8b		phb		                PHB
.391630		08		php		                PHP
.391631		48		pha		                PHA             ; begin setdbr macro
.391632		08		php		                PHP
.391633		e2 20		sep #$20	                SEP #$20        ; set A short
.391635		a9 00		lda #$00	                LDA #0
.391637		48		pha		                PHA
.391638		ab		plb		                PLB
.391639		28		plp		                PLP
.39163a		68		pla		                PLA             ; end setdbr macro
.39163b		e2 20		sep #$20	                SEP #$20        ; set A short
.39163d		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.39163f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391643		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391647		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391649		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39164d		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39164f		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391652		a9 00		lda #$00	                LDA #0
.391654		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391658		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39165c		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391660		c2 30		rep #$30	                REP #$30        ; set A&X long
.391662		8a		txa		                TXA
.391663		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391667		98		tya		                TYA
.391668		e2 20		sep #$20	                SEP #$20        ; set A short
.39166a		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39166e		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391670		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391674		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391676		cb		wai		loop            WAI                         ; Wait for an interrupt
.391677		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.39167a		f0 fa		beq $391676	                BEQ loop                    ; Keep checking until it's set
.39167c		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39167e		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391682		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391684		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391687		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39168b		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39168d		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391691		28		plp		                PLP
.391692		ab		plb		                PLB
.391693		6b		rtl		                RTL
.391694						SHOW_CREDITS
.391694		48		pha		                PHA
.391695		da		phx		                PHX
.391696		5a		phy		                PHY
.391697		08		php		                PHP
.391698		e2 20		sep #$20	                SEP #$20        ; set A short
.39169a		c2 10		rep #$10	                REP #$10        ; set X long
.39169c		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3916a0		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3916a2		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916a6		a2 00 00	ldx #$0000	                LDX #0
.3916a9		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3916ad		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3916b1		bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916b5		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3916b9		e8		inx		                INX
.3916ba		e0 00 20	cpx #$2000	                CPX #128 * 64
.3916bd		d0 ea		bne $3916a9	                BNE credit_loop
.3916bf		22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.3916c3		22 4b 0b 39	jsl $390b4b	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3916c7		22 6f 09 39	jsl $39096f	                JSL ICSRHOME                    ; Move cursor to the home position
.3916cb		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3916cf		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3916d1		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916d5		28		plp		                PLP
.3916d6		7a		ply		                PLY
.3916d7		fa		plx		                PLX
.3916d8		68		pla		                PLA
.3916d9		6b		rtl		                RTL
.3916da		00		brk #		ISCINIT         BRK ;
.3916db		00		brk #		IIOINIT         BRK ;
.3916dc		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3916dd		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3916de		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3916df		00		brk #		ICLOSE          BRK ; Close a channel
.3916e0		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916e1		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916e2		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916e3		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916e4		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916e5		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916e6		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916e7		00		brk #		IPRINTF         BRK ; Print a float value
.3916e8		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916e9		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916ea		00		brk #		IPUSHKEY        BRK ;
.3916eb		00		brk #		IPUSHKEYS       BRK ;
.3916ec		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916ed		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.3916ee		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>3916ef		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916f7		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391707		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>39170f		12
>391710		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391718		15
>391719		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>39171f		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391724		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39172a		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391732		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391740		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391748		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391756		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39175e		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39176c		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391774		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391782		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39178a		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391798		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3917a0		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3917ae		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917b6		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3917c4		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3917cc		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3917da		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917e2		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917f0		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917f8		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>391806		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>39180e		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>39181c		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391824		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391832		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39183a		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391848		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391850		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39185e		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391866		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391874		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39187c		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39188a		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391892		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3918a0		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3918a8		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918b6		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3918be		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3918cc		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3918d4		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918e2		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918ea		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918f8		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391900		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>39190e		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391916		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391924		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>39192c		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39193a		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391942		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391950		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391958		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391966		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39196e		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39197c		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391984		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391992		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39199a		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3919a8		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3919b0		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3919be		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3919c6		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3919d4		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3919dc		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919ea		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919f2		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391a00		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391a08		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a16		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a1e		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a2c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a34		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a42		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a4a		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a58		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a60		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a6e		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a76		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a84		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a8c		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a9a		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391aa2		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391ab0		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391ab8		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391ac6		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391ace		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391adc		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391ae4		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391af2		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391afa		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391b08		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391b10		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b1e		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b26		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b34		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b3c		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b4a		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b52		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b60		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b68		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b76		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b7e		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b8c		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b94		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391ba2		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391baa		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391bb8		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391bc0		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391bce		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391bd6		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391be4		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391bec		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bfa		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391c02		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391c10		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c18		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c26		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c2e		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c3c		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c44		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c52		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c5a		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c68		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c70		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c7e		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c86		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c94		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c9c		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391caa		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391cb2		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391cc0		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391cc8		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391cd6		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391cde		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391cec		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391cf4		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391d02		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391d0a		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d18		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d20		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d2e		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d36		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d44		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d4c		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d5a		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d62		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d70		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d78		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d86		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d8e		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d9c		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391da4		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391db2		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391dba		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391dc8		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391dd0		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391dde		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391de6		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391df4		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391dfc		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391e0a		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391e12		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e20		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e28		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e36		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e3e		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e4c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e54		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e62		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e6a		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e78		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e80		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e8e		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e96		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391ea4		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391eac		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391eba		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391ec2		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ed0		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391ed8		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391ee6		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391eee		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391efc		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391f04		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391f12		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f1a		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f28		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f30		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f3e		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f46		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f54		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f5c		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f6a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f72		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f80		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f88		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f96		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f9e		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391fac		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391fb4		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391fc2		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391fca		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391fd8		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391fe0		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fee		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391ff6		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>392004		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>39200c		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>39201a		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>392022		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>392030		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>392038		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>392046		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>39204e		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>39205c		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>392064		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>392072		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>39207a		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>392088		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>392090		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>39209e		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>3920a6		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920b4		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>3920bc		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3920ca		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3920d2		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3920e0		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920e8		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920f6		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920fe		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>39210c		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>392114		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>392122		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>39212a		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392138		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392140		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39214e		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392156		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392164		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39216c		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39217a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392182		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392190		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392198		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>3921a6		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>3921ae		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>3921bc		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3921c4		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3921d2		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3921da		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921e8		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921f0		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921fe		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>392206		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>392214		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>39221c		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>39222a		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>392232		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392240		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392248		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392256		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39225e		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39226c		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392274		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392282		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39228a		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392298		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>3922a0		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3922ae		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922b6		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3922c4		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3922cc		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3922da		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922e2		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922f0		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922f8		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>392306		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>39230e		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>39231c		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392324		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392332		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39233a		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392348		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392350		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39235e		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392366		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392374		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39237c		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39238a		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392392		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>3923a0		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3923a8		00 87 fa 00
>3923ac		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923b4		00 88 98 03
>3923b8		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923c0		00 88 98 03
>3923c4		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923cc		00 f9 69 00
>3923d0		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3923d8		80 e8 4a 00
>3923dc		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923e4		00 f6 9a 00
>3923e8		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923f0		1b f2 34 00
>3923f4		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923fc		00 f7 8a 00
>392400		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392408		00 f6 47 00
>39240c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392414		00 f9 69 00
>392418		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392420		00 f7 a9 00
>392424		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39242c		00 87 fa 00
>392430		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392438		00 f7 a9 00
>39243c		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392444		00 f5 f5 00
>392448		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392450		06 b8 d8 03
>392454		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39245c		00 f5 f5 00
>392460		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392468		06 b8 d8 03
>39246c		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392474		00 f5 f5 00
>392478		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392480		10 74 f8 03
>392484		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39248c		00 f5 f5 00
>392490		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392498		00 f5 f5 00
>39249c		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924a4		05 c5 d4 03
>3924a8		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924b0		00 f5 f5 00
>3924b4		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924bc		04 f9 44 03
>3924c0		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924c8		05 c5 d4 03
>3924cc		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924d4		04 f9 44 03
>3924d8		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3924e0		03 87 f7 03
>3924e4		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924ec		05 c5 d4 03
>3924f0		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924f8		00 f6 28 00
>3924fc		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392504		05 c5 d4 03
>392508		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392510		00 f5 f7 01
>392514		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39251c		04 f9 44 03
>392520		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392528		00 99 f9 00
>39252c		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392534		00 a8 f7 00
>392538		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392540		00 99 f9 00
>392544		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39254c		00 a6 f6 00
>392550		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392558		00 a6 f6 00
>39255c		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392564		00 f6 36 02
>392568		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392570		00 f6 36 02
>392574		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39257c		00 96 e8 01
>392580		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392588		00 96 e8 01
>39258c		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392594		02 79 77 03
>392598		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3925a0		02 79 77 03
>3925a4		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3925ac		00 a5 2b 02
>3925b0		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3925b8		00 93 3b 02
>3925bc		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3925c4		01 89 3b 03
>3925c8		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3925d0		0a 53 2b 02
>3925d4		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3925dc		00 f6 89 00
>3925e0		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925e8		00 f6 9a 00
>3925ec		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925f4		00 f6 9a 00
>3925f8		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392600		00 87 4b 01
>392604		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>39260c		00 78 67 01
>392610		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392618		02 f8 fc 00
>39261c		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392624		40 f5 f5 00
>392628		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392630		02 79 77 03
>392634		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39263c		40 f5 f5 00
>392640		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392648		40 f5 f5 00
>39264c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392654		00 f9 69 00
>392658		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392660		00 f9 69 00
>392664		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39266c		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>392670		a0 23 39 00 ac 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392678		b8 23 39 00 c4 23 39 00
>392680		d0 23 39 00 dc 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392688		e8 23 39 00 f4 23 39 00
>392690		00 24 39 00 0c 24 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392698		18 24 39 00 24 24 39 00
>3926a0		30 24 39 00 3c 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3926a8		48 24 39 00 54 24 39 00
>3926b0		60 24 39 00 6c 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3926b8		78 24 39 00 84 24 39 00
>3926c0		90 24 39 00 9c 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3926c8		a8 24 39 00 b4 24 39 00
>3926d0		c0 24 39 00 cc 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3926d8		d8 24 39 00 e4 24 39 00
>3926e0		f0 24 39 00 fc 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926e8		08 25 39 00 14 25 39 00
>3926f0		20 25 39 00 2c 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926f8		38 25 39 00 44 25 39 00
>392700		50 25 39 00 5c 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392708		68 25 39 00 74 25 39 00
>392710		80 25 39 00 8c 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392718		98 25 39 00 a4 25 39 00
>392720		b0 25 39 00 bc 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392728		c8 25 39 00 d4 25 39 00
>392730		e0 25 39 00 ec 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392738		f8 25 39 00 04 26 39 00
>392740		10 26 39 00 1c 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392748		28 26 39 00 34 26 39 00
>392750		40 26 39 00 4c 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392758		58 26 39 00 64 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392760		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392768		00 b1 f5 01
>39276c		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392774		03 f1 f5 00
>392778		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392780		03 c1 f5 00
>392784		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39278c		00 92 f5 01
>392790		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392798		00 f1 f9 00
>39279c		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3927a4		00 f1 f5 00
>3927a8		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3927b0		02 81 f6 01
>3927b4		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3927bc		00 c2 b9 01
>3927c0		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3927c8		05 b2 35 00
>3927cc		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3927d4		1b f2 34 00
>3927d8		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3927e0		01 f5 74 00
>3927e4		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927ec		00 61 e3 00
>3927f0		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927f8		00 a4 64 00
>3927fc		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392804		07 b5 f5 00
>392808		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392810		00 f3 74 00
>392814		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>39281c		00 c3 94 01
>392820		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392828		00 f4 0d 01
>39282c		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392834		00 f5 0b 01
>392838		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392840		00 bf 07 00
>392844		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39284c		00 6d 08 01
>392850		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392858		00 51 17 01
>39285c		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392864		00 51 17 01
>392868		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392870		00 53 08 01
>392874		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39287c		00 53 06 01
>392880		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392888		00 d2 f8 00
>39288c		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392894		00 e2 c7 01
>392898		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3928a0		00 f1 9c 00
>3928a4		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3928ac		02 f2 c9 01
>3928b0		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3928b8		03 95 fb 00
>3928bc		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3928c4		04 a1 59 00
>3928c8		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3928d0		03 91 fc 03
>3928d4		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3928dc		02 b4 ec 00
>3928e0		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928e8		00 93 f7 00
>3928ec		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928f4		04 c1 58 00
>3928f8		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392900		02 c3 6a 00
>392904		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>39290c		00 62 87 00
>392910		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392918		00 f3 97 00
>39291c		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392924		00 b3 97 00
>392928		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392930		04 f3 cc 00
>392934		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39293c		00 93 aa 00
>392940		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392948		00 78 08 01
>39294c		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392954		00 78 08 01
>392958		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392960		00 54 27 01
>392964		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39296c		00 61 56 00
>392970		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392978		00 75 16 01
>39297c		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392984		00 f5 f6 01
>392988		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392990		80 f3 e3 00
>392994		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39299c		00 b5 f5 00
>3929a0		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3929a8		80 71 16 00
>3929ac		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929b4		00 30 55 01
>3929b8		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3929c0		00 62 36 01
>3929c4		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3929cc		02 51 07 00
>3929d0		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3929d8		00 62 39 00
>3929dc		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929e4		00 66 27 00
>3929e8		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929f0		00 73 46 00
>3929f4		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929fc		00 74 76 01
>392a00		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392a08		81 92 38 00
>392a0c		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a14		02 71 19 00
>392a18		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a20		01 81 09 00
>392a24		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a2c		00 83 4b 02
>392a30		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a38		05 71 59 00
>392a3c		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a44		03 82 39 00
>392a48		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a50		82 84 17 00
>392a54		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a5c		02 72 16 00
>392a60		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a68		00 7b 0a 00
>392a6c		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a74		00 85 0c 01
>392a78		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a80		00 7b 0a 01
>392a84		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a8c		00 79 18 01
>392a90		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a98		01 73 08 00
>392a9c		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392aa4		04 77 0a 00
>392aa8		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392ab0		00 51 19 00
>392ab4		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392abc		01 74 09 00
>392ac0		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392ac8		01 63 28 00
>392acc		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392ad4		00 65 0a 00
>392ad8		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392ae0		00 67 29 00
>392ae4		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392aec		00 67 09 00
>392af0		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392af8		01 6a 28 00
>392afc		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392b04		00 55 27 00
>392b08		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392b10		00 6f 08 00
>392b14		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b1c		00 7a 07 00
>392b20		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b28		06 a2 0d 00
>392b2c		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b34		00 a3 5f 00
>392b38		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b40		00 42 27 00
>392b44		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b4c		05 b2 49 00
>392b50		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b58		00 b2 79 01
>392b5c		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b64		00 7a 1a 00
>392b68		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b70		00 82 28 01
>392b74		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b7c		02 c3 5f 00
>392b80		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b88		86 c4 95 01
>392b8c		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b94		00 44 15 00
>392b98		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392ba0		00 d1 06 00
>392ba4		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392bac		00 82 37 00
>392bb0		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392bb8		00 41 35 00
>392bbc		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392bc4		02 32 f5 01
>392bc8		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392bd0		00 61 26 00
>392bd4		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392bdc		84 3f 05 01
>392be0		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392be8		01 d1 f6 00
>392bec		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392bf4		00 41 05 01
>392bf8		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392c00		05 f3 e4 00
>392c04		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392c0c		00 92 f5 01
>392c10		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c18		04 f2 e4 01
>392c1c		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c24		00 45 25 00
>392c28		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c30		01 a3 36 00
>392c34		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c3c		01 98 05 01
>392c40		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c48		02 a3 f6 01
>392c4c		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c54		00 f6 f8 00
>392c58		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c60		00 f3 f5 00
>392c64		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c6c		00 94 e5 01
>392c70		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c78		00 84 44 00
>392c7c		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c84		03 83 18 01
>392c88		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c90		01 78 08 01
>392c94		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c9c		03 8e 08 01
>392ca0		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392ca8		09 f2 46 00
>392cac		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392cb4		00 96 e8 01
>392cb8		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392cc0		00 f6 f6 01
>392cc4		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392ccc		00 f6 9a 00
>392cd0		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392cd8		00 c6 45 00
>392cdc		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392ce4		00 f4 b4 00
>392ce8		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392cf0		00 d5 25 00
>392cf4		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cfc		0e 21 2d 00
>392d00		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392d08		00 55 87 02
>392d0c		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d14		08 98 87 01
>392d18		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d20		04 17 04 03
>392d24		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d2c		05 77 f9 02
>392d30		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d38		02 f4 08 00
>392d3c		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d44		00 36 05 01
>392d48		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d50		05 32 55 03
>392d54		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d5c		00 f3 df 00
>392d60		60 27 39 00 6c 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d68		78 27 39 00 84 27 39 00 90 27 39 00 9c 27 39 00
>392d78		a8 27 39 00 b4 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d80		c0 27 39 00 cc 27 39 00 d8 27 39 00 e4 27 39 00
>392d90		f0 27 39 00 fc 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d98		08 28 39 00 14 28 39 00 20 28 39 00 2c 28 39 00
>392da8		38 28 39 00 44 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392db0		50 28 39 00 5c 28 39 00 68 28 39 00 74 28 39 00
>392dc0		80 28 39 00 8c 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392dc8		98 28 39 00 a4 28 39 00 b0 28 39 00 bc 28 39 00
>392dd8		c8 28 39 00 d4 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392de0		e0 28 39 00 ec 28 39 00 f8 28 39 00 04 29 39 00
>392df0		10 29 39 00 1c 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392df8		28 29 39 00 34 29 39 00 40 29 39 00 4c 29 39 00
>392e08		58 29 39 00 64 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392e10		70 29 39 00 7c 29 39 00 88 29 39 00 94 29 39 00
>392e20		a0 29 39 00 ac 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e28		b8 29 39 00 c4 29 39 00 d0 29 39 00 dc 29 39 00
>392e38		e8 29 39 00 f4 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e40		00 2a 39 00 0c 2a 39 00 18 2a 39 00 24 2a 39 00
>392e50		30 2a 39 00 3c 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e58		48 2a 39 00 54 2a 39 00 60 2a 39 00 6c 2a 39 00
>392e68		78 2a 39 00 84 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e70		90 2a 39 00 9c 2a 39 00 a8 2a 39 00 b4 2a 39 00
>392e80		c0 2a 39 00 cc 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e88		d8 2a 39 00 e4 2a 39 00 f0 2a 39 00 fc 2a 39 00
>392e98		08 2b 39 00 14 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392ea0		20 2b 39 00 2c 2b 39 00 38 2b 39 00 44 2b 39 00
>392eb0		50 2b 39 00 5c 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392eb8		68 2b 39 00 74 2b 39 00 80 2b 39 00 8c 2b 39 00
>392ec8		98 2b 39 00 a4 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ed0		b0 2b 39 00 bc 2b 39 00 c8 2b 39 00 d4 2b 39 00
>392ee0		e0 2b 39 00 ec 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392ee8		f8 2b 39 00 04 2c 39 00 10 2c 39 00 1c 2c 39 00
>392ef8		28 2c 39 00 34 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392f00		40 2c 39 00 4c 2c 39 00 58 2c 39 00 64 2c 39 00
>392f10		70 2c 39 00 7c 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f18		88 2c 39 00 94 2c 39 00 a0 2c 39 00 ac 2c 39 00
>392f28		b8 2c 39 00 c4 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f30		d0 2c 39 00 dc 2c 39 00 e8 2c 39 00 f4 2c 39 00
>392f40		00 2d 39 00 0c 2d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f48		18 2d 39 00 24 2d 39 00 30 2d 39 00 3c 2d 39 00
>392f58		48 2d 39 00 54 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f60		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f68		0d f2 f7 00
>392f6c		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f74		07 f2 f7 00
>392f78		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f80		07 f2 f6 00
>392f84		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f8c		07 f2 f7 00
>392f90		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f98		07 f2 f7 00
>392f9c		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392fa4		07 f2 f7 00
>392fa8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb0		00 00 00 00
>392fb4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fbc		00 00 00 00
>392fc0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fc8		00 00 00 00
>392fcc		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392fd4		87 f2 f1 00
>392fd8		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392fe0		07 f4 f4 00
>392fe4		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fec		07 f2 f6 00
>392ff0		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392ff8		07 e7 f7 00
>392ffc		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>393004		07 f6 f6 00
>393008		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>393010		87 a3 f3 00
>393014		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39301c		00 00 00 00
>393020		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393028		00 00 00 00
>39302c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393034		00 00 00 00
>393038		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>393040		07 8a 08 00
>393044		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>39304c		07 55 14 00
>393050		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>393058		87 55 04 00
>39305c		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>393064		07 46 1a 00
>393068		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>393070		07 61 07 00
>393074		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>39307c		90 61 07 00
>393080		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393088		00 00 00 00
>39308c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393094		00 00 00 00
>393098		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930a0		00 00 00 00
>3930a4		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>3930ac		87 f3 f8 00
>3930b0		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>3930b8		07 f6 3a 00
>3930bc		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>3930c4		0c 84 19 00
>3930c8		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3930d0		07 94 19 00
>3930d4		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3930dc		87 d1 f8 00
>3930e0		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930e8		07 c3 a6 00
>3930ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930f4		00 00 00 00
>3930f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393100		00 00 00 00
>393104		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39310c		00 00 00 00
>393110		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>393118		47 f2 df 00
>39311c		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>393124		0f a1 df 00
>393128		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393130		07 f1 78 00
>393134		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>39313c		07 f1 18 00
>393140		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393148		07 56 26 00
>39314c		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393154		07 66 06 00
>393158		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393160		00 00 00 00
>393164		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39316c		00 00 00 00
>393170		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393178		00 00 00 00
>39317c		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393184		87 85 35 00
>393188		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393190		87 f3 f4 00
>393194		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39319c		07 f2 c3 00
>3931a0		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>3931a8		08 72 08 00
>3931ac		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931b4		07 3f 07 01
>3931b8		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3931c0		07 4f 05 00
>3931c4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931cc		00 00 00 00
>3931d0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931d8		00 00 00 00
>3931dc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931e4		00 00 00 00
>3931e8		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931f0		07 7a 05 00
>3931f4		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931fc		07 a5 45 00
>393200		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>393208		08 8f 09 00
>39320c		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>393214		0c 8f 09 00
>393218		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393220		07 82 37 00
>393224		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>39322c		07 62 2c 01
>393230		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393238		00 00 00 00
>39323c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393244		00 00 00 00
>393248		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393250		00 00 00 00
>393254		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39325c		07 a6 1c 00
>393260		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393268		07 72 0b 00
>39326c		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393274		07 72 09 00
>393278		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393280		07 82 09 00
>393284		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39328c		07 72 0f 00
>393290		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393298		07 8f 0a 00
>39329c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932a4		00 00 00 00
>3932a8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932b0		00 00 00 00
>3932b4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932bc		00 00 00 00
>3932c0		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932c8		07 65 1a 00
>3932cc		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932d4		07 65 1a 00
>3932d8		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3932e0		07 75 0a 00
>3932e4		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932ec		07 65 1a 00
>3932f0		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932f8		07 65 26 00
>3932fc		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>393304		07 55 36 00
>393308		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393310		00 00 00 00
>393314		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39331c		00 00 00 00
>393320		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393328		00 00 00 00
>39332c		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393334		07 ff 0f 01
>393338		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393340		87 64 18 00
>393344		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39334c		07 96 0a 00
>393350		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393358		07 91 2a 00
>39335c		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393364		47 6f 07 00
>393368		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393370		07 8f 06 02
>393374		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39337c		00 00 00 00
>393380		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393388		00 00 00 00
>39338c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393394		00 00 00 00
>393398		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3933a0		07 55 16 00
>3933a4		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3933ac		07 6a 03 00
>3933b0		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3933b8		07 42 35 00
>3933bc		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3933c4		07 31 47 01
>3933c8		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3933d0		0a 42 25 00
>3933d4		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3933dc		07 cf 07 00
>3933e0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933e8		00 00 00 00
>3933ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933f4		00 00 00 00
>3933f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393400		00 00 00 00
>393404		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>39340c		8a f2 26 00
>393410		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393418		07 f2 f5 00
>39341c		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393424		87 11 13 00
>393428		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393430		87 1d 03 00
>393434		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39343c		07 81 23 00
>393440		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393448		0a f2 f6 01
>39344c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393454		00 00 00 00
>393458		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393460		00 00 00 00
>393464		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39346c		00 00 00 00
>393470		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393478		07 c2 05 00
>39347c		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393484		07 6f 0c 01
>393488		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393490		07 56 16 00
>393494		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39349c		88 8f 0b 00
>3934a0		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3934a8		87 c3 e5 00
>3934ac		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934b4		07 f8 16 00
>3934b8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934c0		00 00 00 00
>3934c4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934cc		00 00 00 00
>3934d0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934d8		00 00 00 00
>3934dc		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934e4		0a f3 03 00
>3934e8		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934f0		07 f3 02 00
>3934f4		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934fc		07 1f ff 03
>393500		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393508		8f 56 84 02
>39350c		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393514		0c 34 04 03
>393518		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393520		07 1f 02 03
>393524		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39352c		00 00 00 00
>393530		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393538		00 00 00 00
>39353c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393544		00 00 00 00
>393548		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393550		07 12 16 01
>393554		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39355c		07 f6 c9 02
>393560		60 2f 39 00 6c 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393568		78 2f 39 00 84 2f 39 00 90 2f 39 00 9c 2f 39 00
>393578		a8 2f 39 00 b4 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393580		c0 2f 39 00 cc 2f 39 00 d8 2f 39 00 e4 2f 39 00
>393590		f0 2f 39 00 fc 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393598		08 30 39 00 14 30 39 00 20 30 39 00 2c 30 39 00
>3935a8		38 30 39 00 44 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3935b0		50 30 39 00 5c 30 39 00 68 30 39 00 74 30 39 00
>3935c0		80 30 39 00 8c 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3935c8		98 30 39 00 a4 30 39 00 b0 30 39 00 bc 30 39 00
>3935d8		c8 30 39 00 d4 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3935e0		e0 30 39 00 ec 30 39 00 f8 30 39 00 04 31 39 00
>3935f0		10 31 39 00 1c 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935f8		28 31 39 00 34 31 39 00 40 31 39 00 4c 31 39 00
>393608		58 31 39 00 64 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393610		70 31 39 00 7c 31 39 00 88 31 39 00 94 31 39 00
>393620		a0 31 39 00 ac 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393628		b8 31 39 00 c4 31 39 00 d0 31 39 00 dc 31 39 00
>393638		e8 31 39 00 f4 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393640		00 32 39 00 0c 32 39 00 18 32 39 00 24 32 39 00
>393650		30 32 39 00 3c 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393658		48 32 39 00 54 32 39 00 60 32 39 00 6c 32 39 00
>393668		78 32 39 00 84 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393670		90 32 39 00 9c 32 39 00 a8 32 39 00 b4 32 39 00
>393680		c0 32 39 00 cc 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393688		d8 32 39 00 e4 32 39 00 f0 32 39 00 fc 32 39 00
>393698		08 33 39 00 14 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3936a0		20 33 39 00 2c 33 39 00 38 33 39 00 44 33 39 00
>3936b0		50 33 39 00 5c 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3936b8		68 33 39 00 74 33 39 00 80 33 39 00 8c 33 39 00
>3936c8		98 33 39 00 a4 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3936d0		b0 33 39 00 bc 33 39 00 c8 33 39 00 d4 33 39 00
>3936e0		e0 33 39 00 ec 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936e8		f8 33 39 00 04 34 39 00 10 34 39 00 1c 34 39 00
>3936f8		28 34 39 00 34 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393700		40 34 39 00 4c 34 39 00 58 34 39 00 64 34 39 00
>393710		70 34 39 00 7c 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393718		88 34 39 00 94 34 39 00 a0 34 39 00 ac 34 39 00
>393728		b8 34 39 00 c4 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393730		d0 34 39 00 dc 34 39 00 e8 34 39 00 f4 34 39 00
>393740		00 35 39 00 0c 35 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393748		18 35 39 00 24 35 39 00 30 35 39 00 3c 35 39 00
>393758		48 35 39 00 54 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393760		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393768						IOPL2_TONE_TEST
.393768		e2 20		sep #$20	                SEP #$20        ; set A short
.39376a		c2 10		rep #$10	                REP #$10        ; set X long
.39376c		a2 00 00	ldx #$0000	                LDX #0
.39376f						OPL2_TONE_TESTING_L1
.39376f		bf 60 37 39	lda $393760,x	                LDA NOTE_INTRO, X
.393773		29 0f		and #$0f	                AND #$F
.393775		85 30		sta $30		                STA OPL2_NOTE ; start at C
.393777		bf 60 37 39	lda $393760,x	                LDA NOTE_INTRO, X
.39377b		29 70		and #$70	                AND #$70
.39377d		4a		lsr a		                LSR A
.39377e		4a		lsr a		                LSR A
.39377f		4a		lsr a		                LSR A
.393780		4a		lsr a		                LSR A
.393781		85 31		sta $31		                STA OPL2_OCTAVE
.393783		8a		txa		                TXA
.393784		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393786		85 27		sta $27		                STA OPL2_CHANNEL
.393788		22 58 39 39	jsl $393958	                JSL OPL2_PLAYNOTE
.39378c		a0 00 00	ldy #$0000	                LDY #$0000
.39378f						OPL2_TONE_TESTING_L2
.39378f		ea		nop		                NOP
.393790		ea		nop		                NOP
.393791		ea		nop		                NOP
.393792		ea		nop		                NOP
.393793		c8		iny		                INY
.393794		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393797		d0 f6		bne $39378f	                BNE OPL2_TONE_TESTING_L2
.393799		e8		inx		                INX
.39379a		e0 08 00	cpx #$0008	                CPX #8
.39379d		d0 d0		bne $39376f	                BNE OPL2_TONE_TESTING_L1
.39379f		6b		rtl		                RTL
.3937a0						OPL2_INIT
.3937a0		c2 20		rep #$20	                REP #$20        ; set A long
.3937a2		a9 00 00	lda #$0000	                LDA #$0000
.3937a5		85 28		sta $28		                STA OPL2_REG_REGION
.3937a7		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937a9		85 30		sta $30		                STA OPL2_NOTE
.3937ab		85 32		sta $32		                STA OPL2_PARAMETER0
.3937ad		85 34		sta $34		                STA OPL2_PARAMETER2
.3937af		a9 2a 17	lda #$172a	                LDA #<>INSTRUMENT_ACCORDN
.3937b2		85 50		sta $50		                STA RAD_ADDR
.3937b4		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3937b7		85 52		sta $52		                STA RAD_ADDR + 2
.3937b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3937bb		6b		rtl		                RTL
.3937bc						OPL2_Reset
.3937bc		6b		rtl		                RTL
.3937bd						OPL2_Get_FrequencyBlock
.3937bd		6b		rtl		                RTL
.3937be						OPL2_GET_REGISTER
.3937be		48		pha		                PHA             ; begin setdp macro
.3937bf		08		php		                PHP
.3937c0		c2 20		rep #$20	                REP #$20        ; set A long
.3937c2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c5		5b		tcd		                TCD
.3937c6		28		plp		                PLP
.3937c7		68		pla		                PLA             ; end setdp macro
.3937c8		c2 20		rep #$20	                REP #$20        ; set A long
.3937ca		18		clc		              CLC
.3937cb		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937ce		65 32		adc $32		              ADC OPL2_PARAMETER0
.3937d0		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937d2		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937d5		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3937d9		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937db		6b		rtl		              RTL
.3937dc						OPL2_GET_WAVEFORM_SELECT
.3937dc		48		pha		                PHA             ; begin setdp macro
.3937dd		08		php		                PHP
.3937de		c2 20		rep #$20	                REP #$20        ; set A long
.3937e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937e3		5b		tcd		                TCD
.3937e4		28		plp		                PLP
.3937e5		68		pla		                PLA             ; end setdp macro
.3937e6		c2 20		rep #$20	                REP #$20        ; set A long
.3937e8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937eb		69 01 00	adc #$0001	              ADC #$0001
.3937ee		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937f0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937f3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3937f7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937f9		29 20		and #$20	              AND #$20
.3937fb		6b		rtl		              RTL
.3937fc						OPL2_GET_SCALINGLEVEL
.3937fc		48		pha		                PHA             ; begin setdp macro
.3937fd		08		php		                PHP
.3937fe		c2 20		rep #$20	                REP #$20        ; set A long
.393800		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393803		5b		tcd		                TCD
.393804		28		plp		                PLP
.393805		68		pla		                PLA             ; end setdp macro
.393806		c2 20		rep #$20	                REP #$20        ; set A long
.393808		a9 40 00	lda #$0040	              LDA #$0040  ;
.39380b		85 28		sta $28		              STA OPL2_REG_REGION
.39380d		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393810		e2 20		sep #$20	                SEP #$20        ; set A short
.393812		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393814		29 c0		and #$c0	              AND #$C0
.393816		4a		lsr a		              LSR A
.393817		4a		lsr a		              LSR A
.393818		4a		lsr a		              LSR A
.393819		4a		lsr a		              LSR A
.39381a		4a		lsr a		              LSR A
.39381b		4a		lsr a		              LSR A
.39381c		6b		rtl		              RTL
.39381d						OPL2_GET_BLOCK
.39381d		48		pha		                PHA             ; begin setdp macro
.39381e		08		php		                PHP
.39381f		c2 20		rep #$20	                REP #$20        ; set A long
.393821		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393824		5b		tcd		                TCD
.393825		28		plp		                PLP
.393826		68		pla		                PLA             ; end setdp macro
.393827		e2 20		sep #$20	                SEP #$20        ; set A short
.393829		18		clc		              CLC
.39382a		a5 27		lda $27		              LDA OPL2_CHANNEL
.39382c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39382e		69 b0		adc #$b0	              ADC #$B0
.393830		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393832		a9 00		lda #$00	              LDA #$00
.393834		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393836		c2 30		rep #$30	                REP #$30        ; set A&X long
.393838		18		clc		              CLC
.393839		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39383c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39383e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393840		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393843		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393845		e2 20		sep #$20	                SEP #$20        ; set A short
.393847		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393849		29 1c		and #$1c	              AND #$1C
.39384b		4a		lsr a		              LSR A
.39384c		4a		lsr a		              LSR A
.39384d		6b		rtl		              RTL
.39384e						OPL2_GET_KEYON
.39384e		48		pha		                PHA             ; begin setdp macro
.39384f		08		php		                PHP
.393850		c2 20		rep #$20	                REP #$20        ; set A long
.393852		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393855		5b		tcd		                TCD
.393856		28		plp		                PLP
.393857		68		pla		                PLA             ; end setdp macro
.393858		e2 20		sep #$20	                SEP #$20        ; set A short
.39385a		18		clc		              CLC
.39385b		a5 27		lda $27		              LDA OPL2_CHANNEL
.39385d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39385f		69 b0		adc #$b0	              ADC #$B0
.393861		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393863		a9 00		lda #$00	              LDA #$00
.393865		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393867		c2 30		rep #$30	                REP #$30        ; set A&X long
.393869		18		clc		              CLC
.39386a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39386d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39386f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393871		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393874		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393876		e2 20		sep #$20	                SEP #$20        ; set A short
.393878		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39387a		29 20		and #$20	              AND #$20
.39387c		6b		rtl		              RTL
.39387d						OPL2_GET_FEEDBACK
.39387d		48		pha		                PHA             ; begin setdp macro
.39387e		08		php		                PHP
.39387f		c2 20		rep #$20	                REP #$20        ; set A long
.393881		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393884		5b		tcd		                TCD
.393885		28		plp		                PLP
.393886		68		pla		                PLA             ; end setdp macro
.393887		e2 20		sep #$20	                SEP #$20        ; set A short
.393889		18		clc		              CLC
.39388a		a5 27		lda $27		              LDA OPL2_CHANNEL
.39388c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39388e		69 c0		adc #$c0	              ADC #$C0
.393890		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393892		a9 00		lda #$00	              LDA #$00
.393894		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393896		c2 30		rep #$30	                REP #$30        ; set A&X long
.393898		18		clc		              CLC
.393899		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39389c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39389e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938a0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938a3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3938a7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938a9		29 e0		and #$e0	              AND #$E0
.3938ab		4a		lsr a		              LSR
.3938ac		6b		rtl		              RTL
.3938ad						OPL2_GET_SYNTHMODE
.3938ad		48		pha		                PHA             ; begin setdp macro
.3938ae		08		php		                PHP
.3938af		c2 20		rep #$20	                REP #$20        ; set A long
.3938b1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938b4		5b		tcd		                TCD
.3938b5		28		plp		                PLP
.3938b6		68		pla		                PLA             ; end setdp macro
.3938b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3938b9		18		clc		              CLC
.3938ba		a5 27		lda $27		              LDA OPL2_CHANNEL
.3938bc		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938be		69 c0		adc #$c0	              ADC #$C0
.3938c0		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938c2		a9 00		lda #$00	              LDA #$00
.3938c4		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938c6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938c8		18		clc		              CLC
.3938c9		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938cc		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938ce		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938d0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938d3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938d9		29 01		and #$01	              AND #$01
.3938db		6b		rtl		              RTL
.3938dc						OPL2_GET_DEEPTREMOLO
.3938dc		48		pha		                PHA             ; begin setdp macro
.3938dd		08		php		                PHP
.3938de		c2 20		rep #$20	                REP #$20        ; set A long
.3938e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938e3		5b		tcd		                TCD
.3938e4		28		plp		                PLP
.3938e5		68		pla		                PLA             ; end setdp macro
.3938e6		c2 20		rep #$20	                REP #$20        ; set A long
.3938e8		a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938eb		85 28		sta $28		              STA OPL2_REG_REGION
.3938ed		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.3938f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3938f2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938f4		29 80		and #$80	              AND #$80
.3938f6		6b		rtl		              RTL
.3938f7						OPL2_GET_DEEPVIBRATO
.3938f7		48		pha		                PHA             ; begin setdp macro
.3938f8		08		php		                PHP
.3938f9		c2 20		rep #$20	                REP #$20        ; set A long
.3938fb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938fe		5b		tcd		                TCD
.3938ff		28		plp		                PLP
.393900		68		pla		                PLA             ; end setdp macro
.393901		c2 20		rep #$20	                REP #$20        ; set A long
.393903		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393906		69 bd 00	adc #$00bd	              ADC #$00BD
.393909		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39390b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39390e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393910		e2 20		sep #$20	                SEP #$20        ; set A short
.393912		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393914		29 40		and #$40	              AND #$40
.393916		6b		rtl		              RTL
.393917						OPL2_GET_PERCUSSION
.393917		48		pha		                PHA             ; begin setdp macro
.393918		08		php		                PHP
.393919		c2 20		rep #$20	                REP #$20        ; set A long
.39391b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39391e		5b		tcd		                TCD
.39391f		28		plp		                PLP
.393920		68		pla		                PLA             ; end setdp macro
.393921		c2 20		rep #$20	                REP #$20        ; set A long
.393923		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393926		69 bd 00	adc #$00bd	              ADC #$00BD
.393929		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39392b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39392e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393930		e2 20		sep #$20	                SEP #$20        ; set A short
.393932		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393934		29 20		and #$20	              AND #$20
.393936		6b		rtl		              RTL
.393937						OPL2_GET_DRUMS
.393937		48		pha		                PHA             ; begin setdp macro
.393938		08		php		                PHP
.393939		c2 20		rep #$20	                REP #$20        ; set A long
.39393b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39393e		5b		tcd		                TCD
.39393f		28		plp		                PLP
.393940		68		pla		                PLA             ; end setdp macro
.393941		c2 20		rep #$20	                REP #$20        ; set A long
.393943		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393946		69 bd 00	adc #$00bd	              ADC #$00BD
.393949		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39394b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39394e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393950		e2 20		sep #$20	                SEP #$20        ; set A short
.393952		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393954		29 1f		and #$1f	              AND #$1F
.393956		6b		rtl		              RTL
.393957						OPL2_Get_WaveForm
.393957		6b		rtl		                RTL
.393958						OPL2_PLAYNOTE
.393958		48		pha		                PHA             ; begin setdp macro
.393959		08		php		                PHP
.39395a		c2 20		rep #$20	                REP #$20        ; set A long
.39395c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39395f		5b		tcd		                TCD
.393960		28		plp		                PLP
.393961		68		pla		                PLA             ; end setdp macro
.393962		e2 20		sep #$20	                SEP #$20        ; set A short
.393964		da		phx		                PHX
.393965		a9 00		lda #$00	                LDA #$00
.393967		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393969		20 40 3f	jsr $393f40	                JSR OPL2_SET_KEYON
.39396c		20 05 3f	jsr $393f05	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39396f		e2 10		sep #$10	                SEP #$10        ; set X short
.393971		a5 30		lda $30		                LDA OPL2_NOTE
.393973		3a		dec a		                DEC A
.393974		0a		asl a		                ASL A
.393975		aa		tax		                TAX
.393976		bf ef 16 39	lda $3916ef,x	                LDA @lnoteFNumbers,X
.39397a		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39397c		e8		inx		                INX
.39397d		bf ef 16 39	lda $3916ef,x	                LDA @lnoteFNumbers,X
.393981		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393983		22 83 3e 39	jsl $393e83	                JSL OPL2_SET_FNUMBER
.393987		a9 01		lda #$01	                LDA #$01
.393989		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39398b		20 40 3f	jsr $393f40	                JSR OPL2_SET_KEYON
.39398e		c2 10		rep #$10	                REP #$10        ; set X long
.393990		fa		plx		                PLX
.393991		6b		rtl		                RTL
.393992						OPL2_PLAYDRUM
.393992		6b		rtl		                RTL
.393993						OPL2_SET_INSTRUMENT
.393993		48		pha		                PHA             ; begin setdp macro
.393994		08		php		                PHP
.393995		c2 20		rep #$20	                REP #$20        ; set A long
.393997		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39399a		5b		tcd		                TCD
.39399b		28		plp		                PLP
.39399c		68		pla		                PLA             ; end setdp macro
.39399d		38		sec		              SEC ; Set the WaveFormSelect to True
.39399e		22 81 3b 39	jsl $393b81	              JSL OPL2_SET_WAVEFORMSELECT;
.3939a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3939a4		c2 10		rep #$10	                REP #$10        ; set X long
.3939a6		a0 00 00	ldy #$0000	              LDY #$0000
.3939a9		a2 00 00	ldx #$0000	              LDX #$0000
.3939ac		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3939ae		85 35		sta $35		              STA OPL2_PARAMETER3
.3939b0		c8		iny		              INY
.3939b1		c9 06		cmp #$06	              CMP #$06
.3939b3		d0 03		bne $3939b8	              BNE PERCUSSION_NEXT07
.3939b5		82 70 01	brl $393b28	              BRL Percussion_6
.3939b8						PERCUSSION_NEXT07
.3939b8		c9 07		cmp #$07	              CMP #$07
.3939ba		d0 03		bne $3939bf	              BNE PERCUSSION_NEXT08
.3939bc		82 44 01	brl $393b03	              BRL Percussion_7
.3939bf						PERCUSSION_NEXT08
.3939bf		c9 08		cmp #$08	              CMP #$08
.3939c1		d0 03		bne $3939c6	              BNE PERCUSSION_NEXT09
.3939c3		82 18 01	brl $393ade	              BRL Percussion_8
.3939c6						PERCUSSION_NEXT09
.3939c6		c9 09		cmp #$09	              CMP #$09
.3939c8		d0 03		bne $3939cd	              BNE PERCUSSION_NEXT0A
.3939ca		82 ec 00	brl $393ab9	              BRL Percussion_9
.3939cd						PERCUSSION_NEXT0A
.3939cd		c9 0a		cmp #$0a	              CMP #$0A
.3939cf		d0 03		bne $3939d4	              BNE Percussion_Default
.3939d1		82 c0 00	brl $393a94	              BRL Percussion_A
.3939d4						Percussion_Default
.3939d4		a9 00		lda #$00	              LDA #$00
.3939d6		85 26		sta $26		              STA OPL2_OPERATOR
.3939d8		c2 20		rep #$20	                REP #$20        ; set A long
.3939da		a9 20 00	lda #$0020	              LDA #$0020;
.3939dd		85 28		sta $28		              STA OPL2_REG_REGION
.3939df		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.3939e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3939e4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939e6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939e8		c8		iny		              INY
.3939e9		c2 20		rep #$20	                REP #$20        ; set A long
.3939eb		a9 40 00	lda #$0040	              LDA #$0040;
.3939ee		85 28		sta $28		              STA OPL2_REG_REGION
.3939f0		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.3939f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939f7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939f9		c8		iny		              INY
.3939fa		c2 20		rep #$20	                REP #$20        ; set A long
.3939fc		a9 60 00	lda #$0060	              LDA #$0060;
.3939ff		85 28		sta $28		              STA OPL2_REG_REGION
.393a01		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a04		e2 20		sep #$20	                SEP #$20        ; set A short
.393a06		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a08		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a0a		c8		iny		              INY
.393a0b		c2 20		rep #$20	                REP #$20        ; set A long
.393a0d		a9 80 00	lda #$0080	              LDA #$0080;
.393a10		85 28		sta $28		              STA OPL2_REG_REGION
.393a12		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a15		e2 20		sep #$20	                SEP #$20        ; set A short
.393a17		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a19		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a1b		c8		iny		              INY
.393a1c		c2 20		rep #$20	                REP #$20        ; set A long
.393a1e		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a21		85 28		sta $28		              STA OPL2_REG_REGION
.393a23		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a26		e2 20		sep #$20	                SEP #$20        ; set A short
.393a28		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a2a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a2c		c8		iny		              INY
.393a2d		e2 10		sep #$10	                SEP #$10        ; set X short
.393a2f		a5 27		lda $27		              LDA OPL2_CHANNEL
.393a31		29 0f		and #$0f	              AND #$0F
.393a33		aa		tax		              TAX
.393a34		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a36		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a3a		c8		iny		              INY
.393a3b		a9 01		lda #$01	              LDA #$01
.393a3d		85 26		sta $26		              STA OPL2_OPERATOR
.393a3f		c2 20		rep #$20	                REP #$20        ; set A long
.393a41		a9 20 00	lda #$0020	              LDA #$0020;
.393a44		85 28		sta $28		              STA OPL2_REG_REGION
.393a46		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a49		e2 20		sep #$20	                SEP #$20        ; set A short
.393a4b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a4d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a4f		c8		iny		              INY
.393a50		c2 20		rep #$20	                REP #$20        ; set A long
.393a52		a9 40 00	lda #$0040	              LDA #$0040;
.393a55		85 28		sta $28		              STA OPL2_REG_REGION
.393a57		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a5a		e2 20		sep #$20	                SEP #$20        ; set A short
.393a5c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a5e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a60		c8		iny		              INY
.393a61		c2 20		rep #$20	                REP #$20        ; set A long
.393a63		a9 60 00	lda #$0060	              LDA #$0060;
.393a66		85 28		sta $28		              STA OPL2_REG_REGION
.393a68		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a6b		e2 20		sep #$20	                SEP #$20        ; set A short
.393a6d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a6f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a71		c8		iny		              INY
.393a72		c2 20		rep #$20	                REP #$20        ; set A long
.393a74		a9 80 00	lda #$0080	              LDA #$0080;
.393a77		85 28		sta $28		              STA OPL2_REG_REGION
.393a79		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a7c		e2 20		sep #$20	                SEP #$20        ; set A short
.393a7e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a80		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a82		c8		iny		              INY
.393a83		c2 20		rep #$20	                REP #$20        ; set A long
.393a85		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a88		85 28		sta $28		              STA OPL2_REG_REGION
.393a8a		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393a8d		e2 20		sep #$20	                SEP #$20        ; set A short
.393a8f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a91		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a93		6b		rtl		                RTL
.393a94						Percussion_A
.393a94		e2 20		sep #$20	                SEP #$20        ; set A short
.393a96		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a98		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a9c		c8		iny		              INY
.393a9d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a9f		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393aa3		c8		iny		              INY
.393aa4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aa6		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393aaa		c8		iny		              INY
.393aab		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aad		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393ab1		c8		iny		              INY
.393ab2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ab4		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393ab8		6b		rtl		                RTL
.393ab9						Percussion_9
.393ab9		e2 20		sep #$20	                SEP #$20        ; set A short
.393abb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393abd		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393ac1		c8		iny		              INY
.393ac2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ac4		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393ac8		c8		iny		              INY
.393ac9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393acb		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393acf		c8		iny		              INY
.393ad0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ad2		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393ad6		c8		iny		              INY
.393ad7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ad9		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393add		6b		rtl		              RTL
.393ade						Percussion_8
.393ade		e2 20		sep #$20	                SEP #$20        ; set A short
.393ae0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ae2		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393ae6		c8		iny		              INY
.393ae7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ae9		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393aed		c8		iny		              INY
.393aee		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393af0		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393af4		c8		iny		              INY
.393af5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393af7		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393afb		c8		iny		              INY
.393afc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393afe		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393b02		6b		rtl		              RTL
.393b03						Percussion_7
.393b03		e2 20		sep #$20	                SEP #$20        ; set A short
.393b05		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b07		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393b0b		c8		iny		              INY
.393b0c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b0e		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393b12		c8		iny		              INY
.393b13		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b15		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b19		c8		iny		              INY
.393b1a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b1c		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b20		c8		iny		              INY
.393b21		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b23		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b27		6b		rtl		              RTL
.393b28						Percussion_6
.393b28		e2 20		sep #$20	                SEP #$20        ; set A short
.393b2a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b2c		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b30		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b34		c8		iny		              INY
.393b35		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b37		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b3b		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b3f		c8		iny		              INY
.393b40		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b42		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b46		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b4a		c8		iny		              INY
.393b4b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b4d		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b51		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b55		c8		iny		              INY
.393b56		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b58		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b5c		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b60		6b		rtl		              RTL
.393b61						OPL2_SET_REGISTER
.393b61		48		pha		                PHA             ; begin setdp macro
.393b62		08		php		                PHP
.393b63		c2 20		rep #$20	                REP #$20        ; set A long
.393b65		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b68		5b		tcd		                TCD
.393b69		28		plp		                PLP
.393b6a		68		pla		                PLA             ; end setdp macro
.393b6b		c2 20		rep #$20	                REP #$20        ; set A long
.393b6d		18		clc		              CLC
.393b6e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b71		65 32		adc $32		              ADC OPL2_PARAMETER0
.393b73		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b75		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b78		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b7a		e2 20		sep #$20	                SEP #$20        ; set A short
.393b7c		a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b7e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b80		6b		rtl		              RTL
.393b81						OPL2_SET_WAVEFORMSELECT
.393b81		48		pha		                PHA             ; begin setdp macro
.393b82		08		php		                PHP
.393b83		c2 20		rep #$20	                REP #$20        ; set A long
.393b85		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b88		5b		tcd		                TCD
.393b89		28		plp		                PLP
.393b8a		68		pla		                PLA             ; end setdp macro
.393b8b		c2 20		rep #$20	                REP #$20        ; set A long
.393b8d		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b90		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b92		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b95		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b97		e2 20		sep #$20	                SEP #$20        ; set A short
.393b99		b0 07		bcs $393ba2	              BCS OPL2_Set_WaveFormSelect_set
.393b9b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b9d		29 df		and #$df	              AND #$DF
.393b9f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ba1		6b		rtl		              RTL
.393ba2						OPL2_Set_WaveFormSelect_set
.393ba2		48		pha		                PHA             ; begin setdp macro
.393ba3		08		php		                PHP
.393ba4		c2 20		rep #$20	                REP #$20        ; set A long
.393ba6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba9		5b		tcd		                TCD
.393baa		28		plp		                PLP
.393bab		68		pla		                PLA             ; end setdp macro
.393bac		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393bae		09 20 00	ora #$0020	              ORA #$20
.393bb1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bb3		6b		rtl		                RTL
.393bb4						OPL2_SET_TREMOLO
.393bb4		48		pha		                PHA             ; begin setdp macro
.393bb5		08		php		                PHP
.393bb6		c2 20		rep #$20	                REP #$20        ; set A long
.393bb8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bbb		5b		tcd		                TCD
.393bbc		28		plp		                PLP
.393bbd		68		pla		                PLA             ; end setdp macro
.393bbe		08		php		                PHP ; Push the Carry
.393bbf		c2 20		rep #$20	                REP #$20        ; set A long
.393bc1		18		clc		                CLC
.393bc2		a9 20 00	lda #$0020	                LDA #$0020 ;
.393bc5		85 28		sta $28		                STA OPL2_REG_REGION
.393bc7		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393bca		28		plp		                PLP ; Pull the Carry out
.393bcb		e2 20		sep #$20	                SEP #$20        ; set A short
.393bcd		b0 08		bcs $393bd7	                BCS OPL2_Set_Tremolo_Set;
.393bcf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd1		29 7f		and #$7f	                AND #$7F
.393bd3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd5		80 06		bra $393bdd	                BRA OPL2_Set_Tremolo_Exit
.393bd7						OPL2_Set_Tremolo_Set
.393bd7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd9		09 80		ora #$80	                ORA #$80
.393bdb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bdd						OPL2_Set_Tremolo_Exit
.393bdd		6b		rtl		                RTL
.393bde						OPL2_GET_TREMOLO
.393bde		48		pha		                PHA             ; begin setdp macro
.393bdf		08		php		                PHP
.393be0		c2 20		rep #$20	                REP #$20        ; set A long
.393be2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393be5		5b		tcd		                TCD
.393be6		28		plp		                PLP
.393be7		68		pla		                PLA             ; end setdp macro
.393be8		c2 20		rep #$20	                REP #$20        ; set A long
.393bea		a9 20 00	lda #$0020	                LDA #$0020;
.393bed		85 28		sta $28		                STA OPL2_REG_REGION
.393bef		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393bf2		e2 20		sep #$20	                SEP #$20        ; set A short
.393bf4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bf6		29 80		and #$80	                AND #$80
.393bf8		6b		rtl		                RTL
.393bf9						OPL2_SET_VIBRATO
.393bf9		48		pha		                PHA             ; begin setdp macro
.393bfa		08		php		                PHP
.393bfb		c2 20		rep #$20	                REP #$20        ; set A long
.393bfd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c00		5b		tcd		                TCD
.393c01		28		plp		                PLP
.393c02		68		pla		                PLA             ; end setdp macro
.393c03		08		php		                PHP ; Push the Carry
.393c04		c2 20		rep #$20	                REP #$20        ; set A long
.393c06		18		clc		                CLC
.393c07		a9 20 00	lda #$0020	                LDA #$0020;
.393c0a		85 28		sta $28		                STA OPL2_REG_REGION
.393c0c		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393c0f		28		plp		                PLP ; Pull the Carry out
.393c10		e2 20		sep #$20	                SEP #$20        ; set A short
.393c12		b0 08		bcs $393c1c	                BCS OPL2_Set_Vibrato_Set;
.393c14		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c16		29 bf		and #$bf	                AND #$BF
.393c18		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c1a		80 06		bra $393c22	                BRA OPL2_Set_Vibrato_Exit
.393c1c						OPL2_Set_Vibrato_Set
.393c1c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c1e		09 40		ora #$40	                ORA #$40
.393c20		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c22						OPL2_Set_Vibrato_Exit
.393c22		6b		rtl		                RTL
.393c23						OPL2_GET_VIBRATO
.393c23		48		pha		                PHA             ; begin setdp macro
.393c24		08		php		                PHP
.393c25		c2 20		rep #$20	                REP #$20        ; set A long
.393c27		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c2a		5b		tcd		                TCD
.393c2b		28		plp		                PLP
.393c2c		68		pla		                PLA             ; end setdp macro
.393c2d		c2 20		rep #$20	                REP #$20        ; set A long
.393c2f		a9 20 00	lda #$0020	                LDA #$0020;
.393c32		85 28		sta $28		                STA OPL2_REG_REGION
.393c34		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393c37		e2 20		sep #$20	                SEP #$20        ; set A short
.393c39		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c3b		29 40		and #$40	                AND #$40
.393c3d		6b		rtl		                RTL
.393c3e						OPL2_SET_MAINTAINSUSTAIN
.393c3e		48		pha		                PHA             ; begin setdp macro
.393c3f		08		php		                PHP
.393c40		c2 20		rep #$20	                REP #$20        ; set A long
.393c42		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c45		5b		tcd		                TCD
.393c46		28		plp		                PLP
.393c47		68		pla		                PLA             ; end setdp macro
.393c48		08		php		              PHP ; Push the Carry
.393c49		c2 20		rep #$20	                REP #$20        ; set A long
.393c4b		18		clc		              CLC
.393c4c		a9 20 00	lda #$0020	              LDA #$0020;
.393c4f		85 28		sta $28		              STA OPL2_REG_REGION
.393c51		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393c54		28		plp		              PLP ; Pull the Carry out
.393c55		e2 20		sep #$20	                SEP #$20        ; set A short
.393c57		b0 08		bcs $393c61	              BCS OPL2_Set_MaintainSustain_Set;
.393c59		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c5b		29 df		and #$df	              AND #$DF
.393c5d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c5f		80 06		bra $393c67	              BRA OPL2_Set_MaintainSustain_Exit
.393c61						OPL2_Set_MaintainSustain_Set
.393c61		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c63		09 20		ora #$20	              ORA #$20
.393c65		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c67						OPL2_Set_MaintainSustain_Exit
.393c67		6b		rtl		                RTL
.393c68						OPL2_GET_MAINTAINSUSTAIN
.393c68		48		pha		                PHA             ; begin setdp macro
.393c69		08		php		                PHP
.393c6a		c2 20		rep #$20	                REP #$20        ; set A long
.393c6c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c6f		5b		tcd		                TCD
.393c70		28		plp		                PLP
.393c71		68		pla		                PLA             ; end setdp macro
.393c72		c2 20		rep #$20	                REP #$20        ; set A long
.393c74		a9 20 00	lda #$0020	              LDA #$0020;
.393c77		85 28		sta $28		              STA OPL2_REG_REGION
.393c79		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393c7c		e2 20		sep #$20	                SEP #$20        ; set A short
.393c7e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c80		29 20		and #$20	              AND #$20
.393c82		6b		rtl		                RTL
.393c83						OPL2_SET_ENVELOPESCALING
.393c83		48		pha		                PHA             ; begin setdp macro
.393c84		08		php		                PHP
.393c85		c2 20		rep #$20	                REP #$20        ; set A long
.393c87		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c8a		5b		tcd		                TCD
.393c8b		28		plp		                PLP
.393c8c		68		pla		                PLA             ; end setdp macro
.393c8d		08		php		              PHP ; Push the Carry
.393c8e		c2 20		rep #$20	                REP #$20        ; set A long
.393c90		18		clc		              CLC
.393c91		a9 20 00	lda #$0020	              LDA #$0020;
.393c94		85 28		sta $28		              STA OPL2_REG_REGION
.393c96		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393c99		28		plp		              PLP ; Pull the Carry out
.393c9a		e2 20		sep #$20	                SEP #$20        ; set A short
.393c9c		b0 08		bcs $393ca6	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c9e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ca0		29 ef		and #$ef	              AND #$EF
.393ca2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ca4		80 06		bra $393cac	              BRA OPL2_Set_EnvelopeScaling_Exit
.393ca6						OPL2_Set_EnvelopeScaling_Set
.393ca6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ca8		09 10		ora #$10	              ORA #$10
.393caa		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cac						OPL2_Set_EnvelopeScaling_Exit
.393cac		6b		rtl		                RTL
.393cad						OPL2_GET_ENVELOPESCALING
.393cad		48		pha		                PHA             ; begin setdp macro
.393cae		08		php		                PHP
.393caf		c2 20		rep #$20	                REP #$20        ; set A long
.393cb1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cb4		5b		tcd		                TCD
.393cb5		28		plp		                PLP
.393cb6		68		pla		                PLA             ; end setdp macro
.393cb7		c2 20		rep #$20	                REP #$20        ; set A long
.393cb9		a9 20 00	lda #$0020	              LDA #$0020;
.393cbc		85 28		sta $28		              STA OPL2_REG_REGION
.393cbe		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393cc1		e2 20		sep #$20	                SEP #$20        ; set A short
.393cc3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cc5		29 10		and #$10	              AND #$10
.393cc7		6b		rtl		                RTL
.393cc8						OPL2_GET_MODFREQMULTIPLE
.393cc8		48		pha		                PHA             ; begin setdp macro
.393cc9		08		php		                PHP
.393cca		c2 20		rep #$20	                REP #$20        ; set A long
.393ccc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ccf		5b		tcd		                TCD
.393cd0		28		plp		                PLP
.393cd1		68		pla		                PLA             ; end setdp macro
.393cd2		c2 20		rep #$20	                REP #$20        ; set A long
.393cd4		a9 20 00	lda #$0020	              LDA #$0020;
.393cd7		85 28		sta $28		              STA OPL2_REG_REGION
.393cd9		20 bf 40	jsr $3940bf	              JSR OPL2_GET_REG_OFFSET
.393cdc		e2 20		sep #$20	                SEP #$20        ; set A short
.393cde		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ce0		29 0f		and #$0f	              AND #$0F
.393ce2		6b		rtl		              RTL
.393ce3						OPL2_SET_MODFREQMULTIPLE
.393ce3		48		pha		                PHA             ; begin setdp macro
.393ce4		08		php		                PHP
.393ce5		c2 20		rep #$20	                REP #$20        ; set A long
.393ce7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cea		5b		tcd		                TCD
.393ceb		28		plp		                PLP
.393cec		68		pla		                PLA             ; end setdp macro
.393ced		c2 20		rep #$20	                REP #$20        ; set A long
.393cef		a9 20 00	lda #$0020	                LDA #$0020;
.393cf2		85 28		sta $28		                STA OPL2_REG_REGION
.393cf4		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393cf7		e2 20		sep #$20	                SEP #$20        ; set A short
.393cf9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cfb		29 0f		and #$0f	                AND #$0F
.393cfd		85 32		sta $32		                STA OPL2_PARAMETER0
.393cff		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d01		29 f0		and #$f0	                AND #$F0
.393d03		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d05		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d07		6b		rtl		                RTL
.393d08						OPL2_SET_SCALINGLEVEL
.393d08		48		pha		                PHA             ; begin setdp macro
.393d09		08		php		                PHP
.393d0a		c2 20		rep #$20	                REP #$20        ; set A long
.393d0c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d0f		5b		tcd		                TCD
.393d10		28		plp		                PLP
.393d11		68		pla		                PLA             ; end setdp macro
.393d12		c2 20		rep #$20	                REP #$20        ; set A long
.393d14		a9 40 00	lda #$0040	                LDA #$0040;
.393d17		85 28		sta $28		                STA OPL2_REG_REGION
.393d19		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393d1c		e2 20		sep #$20	                SEP #$20        ; set A short
.393d1e		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d20		29 03		and #$03	                AND #$03
.393d22		0a		asl a		                ASL
.393d23		0a		asl a		                ASL
.393d24		0a		asl a		                ASL
.393d25		0a		asl a		                ASL
.393d26		0a		asl a		                ASL
.393d27		0a		asl a		                ASL
.393d28		85 32		sta $32		                STA OPL2_PARAMETER0
.393d2a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d2c		29 3f		and #$3f	                AND #$3F
.393d2e		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d30		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d32		6b		rtl		                RTL
.393d33						OPL2_SET_VOLUME
.393d33		48		pha		                PHA             ; begin setdp macro
.393d34		08		php		                PHP
.393d35		c2 20		rep #$20	                REP #$20        ; set A long
.393d37		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d3a		5b		tcd		                TCD
.393d3b		28		plp		                PLP
.393d3c		68		pla		                PLA             ; end setdp macro
.393d3d		c2 20		rep #$20	                REP #$20        ; set A long
.393d3f		a9 40 00	lda #$0040	                LDA #$0040  ;
.393d42		85 28		sta $28		                STA OPL2_REG_REGION
.393d44		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393d47		e2 20		sep #$20	                SEP #$20        ; set A short
.393d49		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d4b		29 3f		and #$3f	                AND #$3F
.393d4d		85 32		sta $32		                STA OPL2_PARAMETER0
.393d4f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d51		29 c0		and #$c0	                AND #$C0
.393d53		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d55		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d57		6b		rtl		                RTL
.393d58						OPL2_GET_VOLUME
.393d58		48		pha		                PHA             ; begin setdp macro
.393d59		08		php		                PHP
.393d5a		c2 20		rep #$20	                REP #$20        ; set A long
.393d5c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d5f		5b		tcd		                TCD
.393d60		28		plp		                PLP
.393d61		68		pla		                PLA             ; end setdp macro
.393d62		c2 20		rep #$20	                REP #$20        ; set A long
.393d64		a9 40 00	lda #$0040	                LDA #$0040  ;
.393d67		85 28		sta $28		                STA OPL2_REG_REGION
.393d69		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393d6c		e2 20		sep #$20	                SEP #$20        ; set A short
.393d6e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d70		29 3f		and #$3f	                AND #$3F
.393d72		6b		rtl		                RTL
.393d73						OPL2_SET_ATTACK
.393d73		48		pha		                PHA             ; begin setdp macro
.393d74		08		php		                PHP
.393d75		c2 20		rep #$20	                REP #$20        ; set A long
.393d77		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d7a		5b		tcd		                TCD
.393d7b		28		plp		                PLP
.393d7c		68		pla		                PLA             ; end setdp macro
.393d7d		c2 20		rep #$20	                REP #$20        ; set A long
.393d7f		a9 60 00	lda #$0060	                LDA #$0060  ;
.393d82		85 28		sta $28		                STA OPL2_REG_REGION
.393d84		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393d87		e2 20		sep #$20	                SEP #$20        ; set A short
.393d89		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d8b		29 0f		and #$0f	                AND #$0F
.393d8d		0a		asl a		                ASL
.393d8e		0a		asl a		                ASL
.393d8f		0a		asl a		                ASL
.393d90		0a		asl a		                ASL
.393d91		85 32		sta $32		                STA OPL2_PARAMETER0
.393d93		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d95		29 0f		and #$0f	                AND #$0F
.393d97		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d99		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d9b		6b		rtl		                RTL
.393d9c						OPL2_GET_ATTACK
.393d9c		48		pha		                PHA             ; begin setdp macro
.393d9d		08		php		                PHP
.393d9e		c2 20		rep #$20	                REP #$20        ; set A long
.393da0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393da3		5b		tcd		                TCD
.393da4		28		plp		                PLP
.393da5		68		pla		                PLA             ; end setdp macro
.393da6		c2 20		rep #$20	                REP #$20        ; set A long
.393da8		a9 60 00	lda #$0060	                LDA #$0060
.393dab		85 28		sta $28		                STA OPL2_REG_REGION
.393dad		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393db0		e2 20		sep #$20	                SEP #$20        ; set A short
.393db2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393db4		29 f0		and #$f0	                AND #$F0
.393db6		4a		lsr a		                LSR
.393db7		4a		lsr a		                LSR
.393db8		4a		lsr a		                LSR
.393db9		4a		lsr a		                LSR
.393dba		6b		rtl		                RTL
.393dbb						OPL2_SET_DECAY
.393dbb		48		pha		                PHA             ; begin setdp macro
.393dbc		08		php		                PHP
.393dbd		c2 20		rep #$20	                REP #$20        ; set A long
.393dbf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dc2		5b		tcd		                TCD
.393dc3		28		plp		                PLP
.393dc4		68		pla		                PLA             ; end setdp macro
.393dc5		c2 20		rep #$20	                REP #$20        ; set A long
.393dc7		a9 60 00	lda #$0060	                LDA #$0060;
.393dca		85 28		sta $28		                STA OPL2_REG_REGION
.393dcc		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393dcf		e2 20		sep #$20	                SEP #$20        ; set A short
.393dd1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dd3		29 0f		and #$0f	                AND #$0F
.393dd5		85 32		sta $32		                STA OPL2_PARAMETER0
.393dd7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dd9		29 f0		and #$f0	                AND #$F0
.393ddb		05 32		ora $32		                ORA OPL2_PARAMETER0
.393ddd		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ddf		6b		rtl		                RTL
.393de0						OPL2_GET_DECAY
.393de0		48		pha		                PHA             ; begin setdp macro
.393de1		08		php		                PHP
.393de2		c2 20		rep #$20	                REP #$20        ; set A long
.393de4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393de7		5b		tcd		                TCD
.393de8		28		plp		                PLP
.393de9		68		pla		                PLA             ; end setdp macro
.393dea		c2 20		rep #$20	                REP #$20        ; set A long
.393dec		a9 60 00	lda #$0060	                LDA #$0060
.393def		85 28		sta $28		                STA OPL2_REG_REGION
.393df1		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393df4		e2 20		sep #$20	                SEP #$20        ; set A short
.393df6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393df8		29 0f		and #$0f	                AND #$0F
.393dfa		6b		rtl		                RTL
.393dfb						OPL2_SET_SUSTAIN
.393dfb		48		pha		                PHA             ; begin setdp macro
.393dfc		08		php		                PHP
.393dfd		c2 20		rep #$20	                REP #$20        ; set A long
.393dff		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e02		5b		tcd		                TCD
.393e03		28		plp		                PLP
.393e04		68		pla		                PLA             ; end setdp macro
.393e05		c2 20		rep #$20	                REP #$20        ; set A long
.393e07		a9 80 00	lda #$0080	                LDA #$0080;
.393e0a		85 28		sta $28		                STA OPL2_REG_REGION
.393e0c		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.393e11		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e13		29 0f		and #$0f	                AND #$0F
.393e15		0a		asl a		                ASL
.393e16		0a		asl a		                ASL
.393e17		0a		asl a		                ASL
.393e18		0a		asl a		                ASL
.393e19		85 32		sta $32		                STA OPL2_PARAMETER0
.393e1b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e1d		29 0f		and #$0f	                AND #$0F
.393e1f		05 32		ora $32		                ORA OPL2_PARAMETER0
.393e21		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e23		6b		rtl		                RTL
.393e24						OPL2_GET_SUSTAIN
.393e24		48		pha		                PHA             ; begin setdp macro
.393e25		08		php		                PHP
.393e26		c2 20		rep #$20	                REP #$20        ; set A long
.393e28		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e2b		5b		tcd		                TCD
.393e2c		28		plp		                PLP
.393e2d		68		pla		                PLA             ; end setdp macro
.393e2e		c2 20		rep #$20	                REP #$20        ; set A long
.393e30		a9 80 00	lda #$0080	                LDA #$0080
.393e33		85 28		sta $28		                STA OPL2_REG_REGION
.393e35		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393e38		e2 20		sep #$20	                SEP #$20        ; set A short
.393e3a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e3c		29 f0		and #$f0	                AND #$F0
.393e3e		4a		lsr a		                LSR
.393e3f		4a		lsr a		                LSR
.393e40		4a		lsr a		                LSR
.393e41		4a		lsr a		                LSR
.393e42		6b		rtl		                RTL
.393e43						OPL2_SET_RELEASE
.393e43		48		pha		                PHA             ; begin setdp macro
.393e44		08		php		                PHP
.393e45		c2 20		rep #$20	                REP #$20        ; set A long
.393e47		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e4a		5b		tcd		                TCD
.393e4b		28		plp		                PLP
.393e4c		68		pla		                PLA             ; end setdp macro
.393e4d		c2 20		rep #$20	                REP #$20        ; set A long
.393e4f		a9 80 00	lda #$0080	                LDA #$0080;
.393e52		85 28		sta $28		                STA OPL2_REG_REGION
.393e54		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393e57		e2 20		sep #$20	                SEP #$20        ; set A short
.393e59		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e5b		29 0f		and #$0f	                AND #$0F
.393e5d		85 32		sta $32		                STA OPL2_PARAMETER0
.393e5f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e61		29 f0		and #$f0	                AND #$F0
.393e63		05 32		ora $32		                ORA OPL2_PARAMETER0
.393e65		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e67		6b		rtl		                RTL
.393e68						OPL2_GET_RELEASE
.393e68		48		pha		                PHA             ; begin setdp macro
.393e69		08		php		                PHP
.393e6a		c2 20		rep #$20	                REP #$20        ; set A long
.393e6c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e6f		5b		tcd		                TCD
.393e70		28		plp		                PLP
.393e71		68		pla		                PLA             ; end setdp macro
.393e72		c2 20		rep #$20	                REP #$20        ; set A long
.393e74		a9 80 00	lda #$0080	                LDA #$0080
.393e77		85 28		sta $28		                STA OPL2_REG_REGION
.393e79		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.393e7c		e2 20		sep #$20	                SEP #$20        ; set A short
.393e7e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e80		29 0f		and #$0f	                AND #$0F
.393e82		6b		rtl		                RTL
.393e83						OPL2_SET_FNUMBER
.393e83		48		pha		                PHA             ; begin setdp macro
.393e84		08		php		                PHP
.393e85		c2 20		rep #$20	                REP #$20        ; set A long
.393e87		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e8a		5b		tcd		                TCD
.393e8b		28		plp		                PLP
.393e8c		68		pla		                PLA             ; end setdp macro
.393e8d		e2 20		sep #$20	                SEP #$20        ; set A short
.393e8f		18		clc		                CLC
.393e90		a5 27		lda $27		                LDA OPL2_CHANNEL
.393e92		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e94		69 a0		adc #$a0	                ADC #$A0
.393e96		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e98		a9 00		lda #$00	                LDA #$00
.393e9a		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e9c		c2 30		rep #$30	                REP #$30        ; set A&X long
.393e9e		18		clc		                CLC
.393e9f		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ea2		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ea4		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ea6		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ea9		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393eab		e2 20		sep #$20	                SEP #$20        ; set A short
.393ead		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393eaf		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393eb1		18		clc		                CLC
.393eb2		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eb4		69 10		adc #$10	                ADC #$10
.393eb6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eb8		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393eba		29 03		and #$03	                AND #$03
.393ebc		85 33		sta $33		                STA OPL2_PARAMETER1
.393ebe		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ec0		29 fc		and #$fc	                AND #$FC
.393ec2		05 33		ora $33		                ORA OPL2_PARAMETER1
.393ec4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ec6		6b		rtl		                RTL
.393ec7						OPL2_GET_FNUMBER
.393ec7		48		pha		                PHA             ; begin setdp macro
.393ec8		08		php		                PHP
.393ec9		c2 20		rep #$20	                REP #$20        ; set A long
.393ecb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ece		5b		tcd		                TCD
.393ecf		28		plp		                PLP
.393ed0		68		pla		                PLA             ; end setdp macro
.393ed1		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed3		18		clc		                CLC
.393ed4		a5 27		lda $27		                LDA OPL2_CHANNEL
.393ed6		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ed8		69 a0		adc #$a0	                ADC #$A0
.393eda		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393edc		a9 00		lda #$00	                LDA #$00
.393ede		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ee0		c2 30		rep #$30	                REP #$30        ; set A&X long
.393ee2		18		clc		                CLC
.393ee3		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ee6		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ee8		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eea		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393eed		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393eef		e2 20		sep #$20	                SEP #$20        ; set A short
.393ef1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ef3		85 32		sta $32		                STA OPL2_PARAMETER0
.393ef5		18		clc		                CLC
.393ef6		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ef8		69 10		adc #$10	                ADC #$10
.393efa		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393efc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393efe		29 03		and #$03	                AND #$03
.393f00		85 33		sta $33		                STA OPL2_PARAMETER1
.393f02		6b		rtl		                RTL
.393f03						OPL2_Set_Frequency
.393f03		6b		rtl		                RTL
.393f04						OPL2_Get_Frequency
.393f04		6b		rtl		                RTL
.393f05						OPL2_SET_BLOCK
.393f05		48		pha		                PHA             ; begin setdp macro
.393f06		08		php		                PHP
.393f07		c2 20		rep #$20	                REP #$20        ; set A long
.393f09		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f0c		5b		tcd		                TCD
.393f0d		28		plp		                PLP
.393f0e		68		pla		                PLA             ; end setdp macro
.393f0f		e2 20		sep #$20	                SEP #$20        ; set A short
.393f11		18		clc		                CLC
.393f12		a5 27		lda $27		                LDA OPL2_CHANNEL
.393f14		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f16		69 b0		adc #$b0	                ADC #$B0
.393f18		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f1a		a9 00		lda #$00	                LDA #$00
.393f1c		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f1e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f20		18		clc		                CLC
.393f21		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f24		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f26		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f28		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f2b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f2d		e2 20		sep #$20	                SEP #$20        ; set A short
.393f2f		a5 31		lda $31		                LDA OPL2_OCTAVE
.393f31		29 07		and #$07	                AND #$07
.393f33		0a		asl a		                ASL
.393f34		0a		asl a		                ASL
.393f35		85 31		sta $31		                STA OPL2_OCTAVE
.393f37		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f39		29 e3		and #$e3	                AND #$E3
.393f3b		05 31		ora $31		                ORA OPL2_OCTAVE
.393f3d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f3f		60		rts		                RTS
.393f40						OPL2_SET_KEYON
.393f40		48		pha		                PHA             ; begin setdp macro
.393f41		08		php		                PHP
.393f42		c2 20		rep #$20	                REP #$20        ; set A long
.393f44		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f47		5b		tcd		                TCD
.393f48		28		plp		                PLP
.393f49		68		pla		                PLA             ; end setdp macro
.393f4a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f4c		18		clc		                CLC
.393f4d		a5 27		lda $27		                LDA OPL2_CHANNEL
.393f4f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f51		69 b0		adc #$b0	                ADC #$B0
.393f53		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f55		a9 00		lda #$00	                LDA #$00
.393f57		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f59		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f5b		18		clc		                CLC
.393f5c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f5f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f61		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f63		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f66		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f68		e2 20		sep #$20	                SEP #$20        ; set A short
.393f6a		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f6c		29 01		and #$01	                AND #$01
.393f6e		f0 02		beq $393f72	                BEQ SET_KEYON_OFF
.393f70		a9 20		lda #$20	                LDA #$20
.393f72						    SET_KEYON_OFF
.393f72		85 32		sta $32		                STA OPL2_PARAMETER0
.393f74		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f76		29 df		and #$df	                AND #$DF
.393f78		05 32		ora $32		                ORA OPL2_PARAMETER0
.393f7a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f7c		60		rts		                RTS
.393f7d						OPL2_SET_FEEDBACK
.393f7d		48		pha		                PHA             ; begin setdp macro
.393f7e		08		php		                PHP
.393f7f		c2 20		rep #$20	                REP #$20        ; set A long
.393f81		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f84		5b		tcd		                TCD
.393f85		28		plp		                PLP
.393f86		68		pla		                PLA             ; end setdp macro
.393f87		e2 20		sep #$20	                SEP #$20        ; set A short
.393f89		18		clc		              CLC
.393f8a		a5 27		lda $27		              LDA OPL2_CHANNEL
.393f8c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f8e		69 c0		adc #$c0	              ADC #$C0
.393f90		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f92		a9 00		lda #$00	              LDA #$00
.393f94		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f96		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f98		18		clc		              CLC
.393f99		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f9c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f9e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fa0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fa3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fa5		e2 20		sep #$20	                SEP #$20        ; set A short
.393fa7		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393fa9		29 07		and #$07	              AND #$07
.393fab		0a		asl a		              ASL
.393fac		85 32		sta $32		              STA OPL2_PARAMETER0
.393fae		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fb0		29 01		and #$01	              AND #$01
.393fb2		05 32		ora $32		              ORA OPL2_PARAMETER0
.393fb4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fb6		6b		rtl		                RTL
.393fb7						OPL2_SET_SYNTHMODE
.393fb7		48		pha		                PHA             ; begin setdp macro
.393fb8		08		php		                PHP
.393fb9		c2 20		rep #$20	                REP #$20        ; set A long
.393fbb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fbe		5b		tcd		                TCD
.393fbf		28		plp		                PLP
.393fc0		68		pla		                PLA             ; end setdp macro
.393fc1		08		php		              PHP ; Push the Carry
.393fc2		e2 20		sep #$20	                SEP #$20        ; set A short
.393fc4		18		clc		              CLC
.393fc5		a5 27		lda $27		              LDA OPL2_CHANNEL
.393fc7		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fc9		69 c0		adc #$c0	              ADC #$C0
.393fcb		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fcd		a9 00		lda #$00	              LDA #$00
.393fcf		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fd1		c2 30		rep #$30	                REP #$30        ; set A&X long
.393fd3		18		clc		              CLC
.393fd4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fd7		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fd9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fdb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fde		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fe0		28		plp		              PLP ; Pull the Carry out
.393fe1		e2 20		sep #$20	                SEP #$20        ; set A short
.393fe3		b0 08		bcs $393fed	              BCS OPL2_Set_Synthmode_Set;
.393fe5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fe7		29 fe		and #$fe	              AND #$FE
.393fe9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393feb		80 06		bra $393ff3	              BRA OPL2_Set_Synthmode_Exit
.393fed						OPL2_Set_Synthmode_Set
.393fed		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fef		09 01		ora #$01	              ORA #$01
.393ff1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ff3						OPL2_Set_Synthmode_Exit
.393ff3		6b		rtl		                RTL
.393ff4						OPL2_SET_DEEPTREMOLO
.393ff4		48		pha		                PHA             ; begin setdp macro
.393ff5		08		php		                PHP
.393ff6		c2 20		rep #$20	                REP #$20        ; set A long
.393ff8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ffb		5b		tcd		                TCD
.393ffc		28		plp		                PLP
.393ffd		68		pla		                PLA             ; end setdp macro
.393ffe		c2 20		rep #$20	                REP #$20        ; set A long
.394000		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394003		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394005		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394008		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39400a		e2 20		sep #$20	                SEP #$20        ; set A short
.39400c		b0 08		bcs $394016	              BCS OPL2_Set_DeepTremolo_Set;
.39400e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394010		29 7f		and #$7f	              AND #$7F
.394012		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394014		80 06		bra $39401c	              BRA OPL2_Set_DeepTremolo_Exit
.394016						OPL2_Set_DeepTremolo_Set
.394016		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394018		09 80		ora #$80	              ORA #$80
.39401a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39401c						OPL2_Set_DeepTremolo_Exit
.39401c		6b		rtl		                RTL
.39401d						OPL2_SET_DEEPVIBRATO
.39401d		48		pha		                PHA             ; begin setdp macro
.39401e		08		php		                PHP
.39401f		c2 20		rep #$20	                REP #$20        ; set A long
.394021		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394024		5b		tcd		                TCD
.394025		28		plp		                PLP
.394026		68		pla		                PLA             ; end setdp macro
.394027		c2 20		rep #$20	                REP #$20        ; set A long
.394029		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.39402c		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39402e		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394031		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394033		e2 20		sep #$20	                SEP #$20        ; set A short
.394035		b0 08		bcs $39403f	              BCS OPL2_Set_DeepVibrato_Set;
.394037		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394039		29 bf		and #$bf	              AND #$BF
.39403b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39403d		80 06		bra $394045	              BRA OPL2_Set_DeepVibrato_Exit
.39403f						OPL2_Set_DeepVibrato_Set
.39403f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394041		09 40		ora #$40	              ORA #$40
.394043		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394045						OPL2_Set_DeepVibrato_Exit
.394045		6b		rtl		                RTL
.394046						OPL2_SET_PERCUSSION
.394046		48		pha		                PHA             ; begin setdp macro
.394047		08		php		                PHP
.394048		c2 20		rep #$20	                REP #$20        ; set A long
.39404a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39404d		5b		tcd		                TCD
.39404e		28		plp		                PLP
.39404f		68		pla		                PLA             ; end setdp macro
.394050		c2 20		rep #$20	                REP #$20        ; set A long
.394052		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394055		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394057		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39405a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39405c		e2 20		sep #$20	                SEP #$20        ; set A short
.39405e		b0 08		bcs $394068	                BCS OPL2_Set_Percussion_Set;
.394060		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394062		29 df		and #$df	                AND #$DF
.394064		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394066		80 06		bra $39406e	                BRA OPL2_Set_Percussion_Exit
.394068						OPL2_Set_Percussion_Set
.394068		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39406a		09 20		ora #$20	                ORA #$20
.39406c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39406e						OPL2_Set_Percussion_Exit
.39406e		6b		rtl		                RTL
.39406f						OPL2_SET_DRUMS
.39406f		48		pha		                PHA             ; begin setdp macro
.394070		08		php		                PHP
.394071		c2 20		rep #$20	                REP #$20        ; set A long
.394073		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394076		5b		tcd		                TCD
.394077		28		plp		                PLP
.394078		68		pla		                PLA             ; end setdp macro
.394079		c2 20		rep #$20	                REP #$20        ; set A long
.39407b		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39407e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394080		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394083		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394085		e2 20		sep #$20	                SEP #$20        ; set A short
.394087		a5 32		lda $32		                LDA OPL2_PARAMETER0
.394089		29 1f		and #$1f	                AND #$1F
.39408b		85 32		sta $32		                STA OPL2_PARAMETER0
.39408d		49 ff		eor #$ff	                EOR #$FF
.39408f		85 33		sta $33		                STA OPL2_PARAMETER1
.394091		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394093		25 33		and $33		                AND OPL2_PARAMETER1
.394095		05 32		ora $32		                ORA OPL2_PARAMETER0
.394097		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394099		6b		rtl		                RTL
.39409a						OPL2_SET_WAVEFORM
.39409a		48		pha		                PHA             ; begin setdp macro
.39409b		08		php		                PHP
.39409c		c2 20		rep #$20	                REP #$20        ; set A long
.39409e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3940a1		5b		tcd		                TCD
.3940a2		28		plp		                PLP
.3940a3		68		pla		                PLA             ; end setdp macro
.3940a4		c2 20		rep #$20	                REP #$20        ; set A long
.3940a6		a9 e0 00	lda #$00e0	                LDA #$00E0;
.3940a9		85 28		sta $28		                STA OPL2_REG_REGION
.3940ab		20 bf 40	jsr $3940bf	                JSR OPL2_GET_REG_OFFSET
.3940ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3940b0		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940b2		29 03		and #$03	                AND #$03
.3940b4		85 32		sta $32		                STA OPL2_PARAMETER0
.3940b6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940b8		29 fc		and #$fc	                AND #$FC
.3940ba		05 32		ora $32		                ORA OPL2_PARAMETER0
.3940bc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940be		6b		rtl		                RTL
.3940bf						OPL2_GET_REG_OFFSET
.3940bf		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3940c1		a5 27		lda $27		                LDA OPL2_CHANNEL
.3940c3		29 0f		and #$0f	                AND #$0F
.3940c5		aa		tax		                TAX
.3940c6		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.3940c8		d0 06		bne $3940d0	                BNE OPL2_Get_Register_Offset_l0
.3940ca		bf 07 17 39	lda $391707,x	                LDA @lregisterOffsets_operator0, X
.3940ce		80 04		bra $3940d4	                BRA OPL2_Get_Register_Offset_exit
.3940d0						OPL2_Get_Register_Offset_l0
.3940d0		bf 10 17 39	lda $391710,x	                LDA @lregisterOffsets_operator1, X
.3940d4						OPL2_Get_Register_Offset_exit
.3940d4		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3940d6		a9 00		lda #$00	                LDA #$00
.3940d8		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3940da		c2 30		rep #$30	                REP #$30        ; set A&X long
.3940dc		18		clc		                CLC
.3940dd		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3940e0		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940e2		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940e4		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940e6		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940e9		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940eb		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940ec						ITRACE
.3940ec		08		php		                PHP
.3940ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.3940ef		8b		phb		                PHB                 ; Print the text
.3940f0		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940f2		aa		tax		                TAX                 ; ... into X
.3940f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3940f5		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940f7		48		pha		                PHA
.3940f8		ab		plb		                PLB                 ; ... into B
.3940f9		22 90 07 39	jsl $390790	                JSL IPUTS           ; Print the string
.3940fd		c2 20		rep #$20	                REP #$20        ; set A long
.3940ff		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.394101		83 08		sta $08,s	                STA #8,S
.394103		a3 02		lda $02,s	                LDA #2,S
.394105		83 06		sta $06,s	                STA #6,S
.394107		ab		plb		                PLB
.394108		68		pla		                PLA                 ; Clean up the stack
.394109		68		pla		                PLA
.39410a		28		plp		                PLP
.39410b		6b		rtl		                RTL
.39410c						ISETTIMEOUT
.39410c		8b		phb		                PHB
.39410d		0b		phd		                PHD
.39410e		08		php		                PHP
.39410f		48		pha		                PHA             ; begin setdbr macro
.394110		08		php		                PHP
.394111		e2 20		sep #$20	                SEP #$20        ; set A short
.394113		a9 00		lda #$00	                LDA #0
.394115		48		pha		                PHA
.394116		ab		plb		                PLB
.394117		28		plp		                PLP
.394118		68		pla		                PLA             ; end setdbr macro
.394119		48		pha		                PHA             ; begin setdp macro
.39411a		08		php		                PHP
.39411b		c2 20		rep #$20	                REP #$20        ; set A long
.39411d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394120		5b		tcd		                TCD
.394121		28		plp		                PLP
.394122		68		pla		                PLA             ; end setdp macro
.394123		78		sei		                SEI                             ; We don't want to be interrupted
.394124		e2 20		sep #$20	                SEP #$20        ; set A short
.394126		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394128		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.39412a		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.39412c		85 0c		sta $032c	                STA @b BIOS_FLAGS
.39412e		28		plp		done            PLP
.39412f		2b		pld		                PLD
.394130		ab		plb		                PLB
.394131		6b		rtl		                RTL
.394132						ICMDBLOCK
.394132		0b		phd		                PHD
.394133		08		php		                PHP
.394134		48		pha		                PHA             ; begin setdp macro
.394135		08		php		                PHP
.394136		c2 20		rep #$20	                REP #$20        ; set A long
.394138		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39413b		5b		tcd		                TCD
.39413c		28		plp		                PLP
.39413d		68		pla		                PLA             ; end setdp macro
.39413e		e2 20		sep #$20	                SEP #$20        ; set A short
.394140		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394142		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394144		d0 06		bne $39414c	                BNE ret_success             ; No: just return
.394146		22 e8 68 39	jsl $3968e8	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.39414a		90 0c		bcc $394158	                BCC pass_failure
.39414c						ret_success
.39414c		e2 20		sep #$20	                SEP #$20        ; set A short
.39414e		64 00		stz $0320	                STZ BIOS_STATUS
.394150		28		plp		                PLP
.394151		2b		pld		                PLD
.394152		38		sec		                SEC
.394153		6b		rtl		                RTL
.394154						ret_failure
.394154		e2 20		sep #$20	                SEP #$20        ; set A short
.394156		85 00		sta $0320	                STA BIOS_STATUS
.394158		28		plp		pass_failure    PLP
.394159		2b		pld		                PLD
.39415a		18		clc		                CLC
.39415b		6b		rtl		                RTL
.39415c						IGETBLOCK
.39415c		5a		phy		                PHY
.39415d		0b		phd		                PHD
.39415e		8b		phb		                PHB
.39415f		08		php		                PHP
.394160		48		pha		                PHA             ; begin setdbr macro
.394161		08		php		                PHP
.394162		e2 20		sep #$20	                SEP #$20        ; set A short
.394164		a9 00		lda #$00	                LDA #0
.394166		48		pha		                PHA
.394167		ab		plb		                PLB
.394168		28		plp		                PLP
.394169		68		pla		                PLA             ; end setdbr macro
.39416a		48		pha		                PHA             ; begin setdp macro
.39416b		08		php		                PHP
.39416c		c2 20		rep #$20	                REP #$20        ; set A long
.39416e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394171		5b		tcd		                TCD
.394172		28		plp		                PLP
.394173		68		pla		                PLA             ; end setdp macro
.394174		e2 20		sep #$20	                SEP #$20        ; set A short
.394176		a0 00 00	ldy #$0000	                LDY #0
.394179		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.39417b		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.39417d		c8		iny		                INY
.39417e		c0 00 02	cpy #$0200	                CPY #512
.394181		d0 f8		bne $39417b	                BNE clr_loop
.394183		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394185		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394187		f0 14		beq $39419d	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.394189		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39418b		f0 18		beq $3941a5	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.39418d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39418f		f0 1c		beq $3941ad	                BEQ hd_getblock
.394191		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394193						ret_failure
.394193		e2 20		sep #$20	                SEP #$20        ; set A short
.394195		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394197		28		plp		                PLP
.394198		ab		plb		                PLB
.394199		2b		pld		                PLD
.39419a		7a		ply		                PLY
.39419b		38		sec		                SEC                                 ; Return failure
.39419c		6b		rtl		                RTL
.39419d		22 0a 5e 39	jsl $395e0a	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.3941a1		b0 12		bcs $3941b5	                BCS ret_success
.3941a3		80 ee		bra $394193	                BRA ret_failure
.3941a5		22 ed 66 39	jsl $3966ed	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.3941a9		b0 0a		bcs $3941b5	                BCS ret_success
.3941ab		80 e6		bra $394193	                BRA ret_failure
.3941ad		22 fb 6c 39	jsl $396cfb	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.3941b1		b0 02		bcs $3941b5	                BCS ret_success
.3941b3		80 de		bra $394193	                BRA ret_failure
.3941b5						ret_success
.3941b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3941b7		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941b9		28		plp		                PLP
.3941ba		ab		plb		                PLB
.3941bb		2b		pld		                PLD
.3941bc		7a		ply		                PLY
.3941bd		38		sec		                SEC                                 ; Return success
.3941be		6b		rtl		                RTL
.3941bf						IPUTBLOCK
.3941bf		0b		phd		                PHD
.3941c0		8b		phb		                PHB
.3941c1		08		php		                PHP
.3941c2		48		pha		                PHA             ; begin setdbr macro
.3941c3		08		php		                PHP
.3941c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3941c6		a9 00		lda #$00	                LDA #0
.3941c8		48		pha		                PHA
.3941c9		ab		plb		                PLB
.3941ca		28		plp		                PLP
.3941cb		68		pla		                PLA             ; end setdbr macro
.3941cc		48		pha		                PHA             ; begin setdp macro
.3941cd		08		php		                PHP
.3941ce		c2 20		rep #$20	                REP #$20        ; set A long
.3941d0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941d3		5b		tcd		                TCD
.3941d4		28		plp		                PLP
.3941d5		68		pla		                PLA             ; end setdp macro
.3941d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3941d8		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941da		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941dc		f0 13		beq $3941f1	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3941de		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3941e0		f0 17		beq $3941f9	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3941e2		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941e4		f0 1b		beq $394201	                BEQ hd_putblock
.3941e6		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941e8						ret_failure
.3941e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ea		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941ec		28		plp		                PLP
.3941ed		ab		plb		                PLB
.3941ee		2b		pld		                PLD
.3941ef		18		clc		                CLC                                 ; Return failure
.3941f0		6b		rtl		                RTL
.3941f1		22 aa 5e 39	jsl $395eaa	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941f5		90 f1		bcc $3941e8	                BCC ret_failure
.3941f7		80 10		bra $394209	                BRA ret_success
.3941f9		22 52 67 39	jsl $396752	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941fd		90 e9		bcc $3941e8	                BCC ret_failure
.3941ff		80 08		bra $394209	                BRA ret_success
.394201		22 8c 6d 39	jsl $396d8c	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.394205		90 e1		bcc $3941e8	                BCC ret_failure
.394207		80 00		bra $394209	                BRA ret_success
.394209						ret_success
.394209		e2 20		sep #$20	                SEP #$20        ; set A short
.39420b		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.39420d		28		plp		                PLP
.39420e		ab		plb		                PLB
.39420f		2b		pld		                PLD
.394210		38		sec		                SEC                                 ; Return success
.394211		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.394212						DOS_DIROPEN
.394212		da		phx		                PHX
.394213		5a		phy		                PHY
.394214		0b		phd		                PHD
.394215		8b		phb		                PHB
.394216		08		php		                PHP
.394217		48		pha		                PHA             ; begin setdbr macro
.394218		08		php		                PHP
.394219		e2 20		sep #$20	                SEP #$20        ; set A short
.39421b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39421d		48		pha		                PHA
.39421e		ab		plb		                PLB
.39421f		28		plp		                PLP
.394220		68		pla		                PLA             ; end setdbr macro
.394221		48		pha		                PHA             ; begin setdp macro
.394222		08		php		                PHP
.394223		c2 20		rep #$20	                REP #$20        ; set A long
.394225		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394228		5b		tcd		                TCD
.394229		28		plp		                PLP
.39422a		68		pla		                PLA             ; end setdp macro
.39422b		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.39422e		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394231		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394234		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394237		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.39423a		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39423c		85 18		sta $0338	                STA DOS_DIR_PTR
.39423e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394241		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394243		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394245		e2 20		sep #$20	                SEP #$20        ; set A short
.394247		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.39424a		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.39424c		d0 24		bne $394272	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.39424e						fetch_fat12
.39424e		e2 20		sep #$20	                SEP #$20        ; set A short
.394250		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394252		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394255		c2 20		rep #$20	                REP #$20        ; set A long
.394257		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394259		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39425b		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39425d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39425f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394262		85 02		sta $0322	                STA BIOS_LBA
.394264		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394267		85 04		sta $0324	                STA BIOS_LBA+2
.394269		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39426d		b0 1f		bcs $39428e	                BCS do_success              ; If sucessful, set the directory cursor
.39426f		82 10 17	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394272						fetch_fat32
.394272		e2 20		sep #$20	                SEP #$20        ; set A short
.394274		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394276		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394279		c2 20		rep #$20	                REP #$20        ; set A long
.39427b		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39427e		85 10		sta $0330	                STA DOS_CLUS_ID
.394280		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394283		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394285		22 f5 47 39	jsl $3947f5	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394289		b0 03		bcs $39428e	                BCS do_success              ; If successful: set the directory cursor
.39428b		82 f4 16	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39428e		82 f8 16	brl $395989	do_success      BRL IF_SUCCESS
.394291						DOS_DIRFIRST
.394291		0b		phd		                PHD
.394292		08		php		                PHP
.394293		48		pha		                PHA             ; begin setdp macro
.394294		08		php		                PHP
.394295		c2 20		rep #$20	                REP #$20        ; set A long
.394297		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39429a		5b		tcd		                TCD
.39429b		28		plp		                PLP
.39429c		68		pla		                PLA             ; end setdp macro
.39429d		c2 20		rep #$20	                REP #$20        ; set A long
.39429f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3942a2		85 18		sta $0338	                STA DOS_DIR_PTR
.3942a4		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942a7		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942a9		28		plp		                PLP
.3942aa		2b		pld		                PLD
.3942ab		6b		rtl		                RTL
.3942ac						DOS_DIRNEXT
.3942ac		da		phx		                PHX
.3942ad		5a		phy		                PHY
.3942ae		0b		phd		                PHD
.3942af		8b		phb		                PHB
.3942b0		08		php		                PHP
.3942b1		48		pha		                PHA             ; begin setdbr macro
.3942b2		08		php		                PHP
.3942b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3942b5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942b7		48		pha		                PHA
.3942b8		ab		plb		                PLB
.3942b9		28		plp		                PLP
.3942ba		68		pla		                PLA             ; end setdbr macro
.3942bb		48		pha		                PHA             ; begin setdp macro
.3942bc		08		php		                PHP
.3942bd		c2 20		rep #$20	                REP #$20        ; set A long
.3942bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942c2		5b		tcd		                TCD
.3942c3		28		plp		                PLP
.3942c4		68		pla		                PLA             ; end setdp macro
.3942c5		c2 20		rep #$20	                REP #$20        ; set A long
.3942c7		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3942c8		a5 18		lda $0338	                LDA DOS_DIR_PTR
.3942ca		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3942cd		85 18		sta $0338	                STA DOS_DIR_PTR
.3942cf		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942d1		69 00 00	adc #$0000	                ADC #0
.3942d4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942d6		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3942d7		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3942da		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3942dc		85 28		sta $0348	                STA DOS_TEMP
.3942de		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3942e1		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3942e3		85 2a		sta $034a	                STA DOS_TEMP+2
.3942e5		30 0c		bmi $3942f3	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3942e7		f0 03		beq $3942ec	                BEQ check_lower
.3942e9		82 9d 16	brl $395989	                BRL IF_SUCCESS
.3942ec		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3942ee		f0 03		beq $3942f3	                BEQ get_next_block
.3942f0		82 96 16	brl $395989	                BRL IF_SUCCESS
.3942f3						get_next_block
.3942f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3942f5		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942f8		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942fa		f0 38		beq $394334	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942fc						next_sector
.3942fc		c2 20		rep #$20	                REP #$20        ; set A long
.3942fe		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394301		1a		inc a		                INC A
.394302		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.394305		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394308		d0 07		bne $394311	                BNE read_sector
.39430a		e2 20		sep #$20	                SEP #$20        ; set A short
.39430c		a9 00		lda #$00	                LDA #0
.39430e		82 6d 16	brl $39597e	                BRL IF_FAILURE
.394311						read_sector
.394311		c2 20		rep #$20	                REP #$20        ; set A long
.394313		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.394316		85 02		sta $0322	                STA BIOS_LBA
.394318		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39431b		85 04		sta $0324	                STA BIOS_LBA+2
.39431d		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394320		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394322		85 18		sta $0338	                STA DOS_DIR_PTR
.394324		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394327		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394329		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39432b		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.39432f		b0 39		bcs $39436a	                BCS do_success              ; If successful: set the directory cursor
.394331		82 4e 16	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394334						next_cluster
.394334		c2 20		rep #$20	                REP #$20        ; set A long
.394336		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394339		85 10		sta $0330	                STA DOS_CLUS_ID
.39433b		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39433e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394340		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394343		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394345		85 18		sta $0338	                STA DOS_DIR_PTR
.394347		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39434a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39434c		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39434e		22 00 4c 39	jsl $394c00	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394352		b0 03		bcs $394357	                BCS set_next
.394354		82 2b 16	brl $395982	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394357		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394359		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.39435c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39435e		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394361		22 f5 47 39	jsl $3947f5	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394365		b0 03		bcs $39436a	                BCS do_success              ; If successful: set the directory cursor
.394367		82 18 16	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39436a		82 1c 16	brl $395989	do_success      BRL IF_SUCCESS
.39436d						DOS_DIRFINDFREE
.39436d		da		phx		                PHX
.39436e		5a		phy		                PHY
.39436f		0b		phd		                PHD
.394370		8b		phb		                PHB
.394371		08		php		                PHP
.394372		48		pha		                PHA             ; begin setdbr macro
.394373		08		php		                PHP
.394374		e2 20		sep #$20	                SEP #$20        ; set A short
.394376		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394378		48		pha		                PHA
.394379		ab		plb		                PLB
.39437a		28		plp		                PLP
.39437b		68		pla		                PLA             ; end setdbr macro
.39437c		48		pha		                PHA             ; begin setdp macro
.39437d		08		php		                PHP
.39437e		c2 20		rep #$20	                REP #$20        ; set A long
.394380		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394383		5b		tcd		                TCD
.394384		28		plp		                PLP
.394385		68		pla		                PLA             ; end setdp macro
.394386		22 0b 56 39	jsl $39560b	                JSL IF_DIROPEN
.39438a		b0 06		bcs $394392	                BCS start_walk
.39438c		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.39438f		82 28 00	brl $3943ba	                BRL ret_failure
.394392		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394395						chk_entry
.394395		e2 20		sep #$20	                SEP #$20        ; set A short
.394397		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394399		f0 1c		beq $3943b7	                BEQ ret_success             ; If 0: we have a blank... return it
.39439b		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39439d		f0 18		beq $3943b7	                BEQ ret_success             ; Yes: return it
.39439f		22 45 56 39	jsl $395645	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3943a3		b0 ed		bcs $394392	                BCS start_walk              ; If we got one, start walking it
.3943a5		22 bd 43 39	jsl $3943bd	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3943a9		90 0f		bcc $3943ba	                BCC ret_failure             ; If that didn't work, return the failure
.3943ab		c2 20		rep #$20	                REP #$20        ; set A long
.3943ad		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3943b0		85 18		sta $0338	                STA DOS_DIR_PTR
.3943b2		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943b5		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3943b7		82 cf 15	brl $395989	ret_success     BRL IF_SUCCESS
.3943ba		82 c1 15	brl $39597e	ret_failure     BRL IF_FAILURE
.3943bd						DOS_DIRAPPEND
.3943bd		da		phx		                PHX
.3943be		8b		phb		                PHB
.3943bf		0b		phd		                PHD
.3943c0		08		php		                PHP
.3943c1		48		pha		                PHA             ; begin setdbr macro
.3943c2		08		php		                PHP
.3943c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3943c5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943c7		48		pha		                PHA
.3943c8		ab		plb		                PLB
.3943c9		28		plp		                PLP
.3943ca		68		pla		                PLA             ; end setdbr macro
.3943cb		48		pha		                PHA             ; begin setdp macro
.3943cc		08		php		                PHP
.3943cd		c2 20		rep #$20	                REP #$20        ; set A long
.3943cf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943d2		5b		tcd		                TCD
.3943d3		28		plp		                PLP
.3943d4		68		pla		                PLA             ; end setdp macro
.3943d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3943d7		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3943da		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3943dc		f0 09		beq $3943e7	                BEQ clr_sector                  ; Yes: clear out the directory data
.3943de						ret_failure
.3943de		e2 20		sep #$20	                SEP #$20        ; set A short
.3943e0		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3943e2		85 0e		sta $032e	                STA DOS_STATUS
.3943e4		82 3e 00	brl $394425	                BRL pass_failure
.3943e7						clr_sector
.3943e7		c2 20		rep #$20	                REP #$20        ; set A long
.3943e9		a9 00 00	lda #$0000	                LDA #0
.3943ec		a2 00 00	ldx #$0000	                LDX #0
.3943ef		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943f2		e8		inx		                INX
.3943f3		e8		inx		                INX
.3943f4		e0 00 02	cpx #$0200	                CPX #512
.3943f7		d0 f6		bne $3943ef	                BNE clr_loop
.3943f9		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943fc		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943fe		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394401		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394403		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.394406		85 10		sta $0330	                STA DOS_CLUS_ID
.394408		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39440b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39440d		22 21 50 39	jsl $395021	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394411		90 12		bcc $394425	                BCC pass_failure                ; If there was an error, pass it up the chain
.394413		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.394416		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394419		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.39441c		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39441f		28		plp		ret_success     PLP
.394420		2b		pld		                PLD
.394421		ab		plb		                PLB
.394422		fa		plx		                PLX
.394423		38		sec		                SEC
.394424		6b		rtl		                RTL
.394425		28		plp		pass_failure    PLP
.394426		2b		pld		                PLD
.394427		ab		plb		                PLB
.394428		fa		plx		                PLX
.394429		18		clc		                CLC
.39442a		6b		rtl		                RTL
.39442b						DOS_DIRWRITE
.39442b		da		phx		                PHX
.39442c		5a		phy		                PHY
.39442d		0b		phd		                PHD
.39442e		8b		phb		                PHB
.39442f		08		php		                PHP
.394430		48		pha		                PHA             ; begin setdbr macro
.394431		08		php		                PHP
.394432		e2 20		sep #$20	                SEP #$20        ; set A short
.394434		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394436		48		pha		                PHA
.394437		ab		plb		                PLB
.394438		28		plp		                PLP
.394439		68		pla		                PLA             ; end setdbr macro
.39443a		48		pha		                PHA             ; begin setdp macro
.39443b		08		php		                PHP
.39443c		c2 20		rep #$20	                REP #$20        ; set A long
.39443e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394441		5b		tcd		                TCD
.394442		28		plp		                PLP
.394443		68		pla		                PLA             ; end setdp macro
.394444		e2 20		sep #$20	                SEP #$20        ; set A short
.394446		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394449		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39444b		f0 1f		beq $39446c	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39444d						write_sector
.39444d		c2 20		rep #$20	                REP #$20        ; set A long
.39444f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394452		85 02		sta $0322	                STA BIOS_LBA
.394454		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394457		85 04		sta $0324	                STA BIOS_LBA+2
.394459		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39445c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39445e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394461		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394463		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394467		b0 1f		bcs $394488	                BCS ret_success
.394469		82 12 15	brl $39597e	ret_failure     BRL IF_FAILURE
.39446c						write_cluster
.39446c		c2 20		rep #$20	                REP #$20        ; set A long
.39446e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394471		85 10		sta $0330	                STA DOS_CLUS_ID
.394473		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394476		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394478		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39447b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39447d		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394480		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394482		22 32 48 39	jsl $394832	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394486		90 e1		bcc $394469	                BCC ret_failure
.394488		82 fe 14	brl $395989	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38						FD_STAT_OPEN = $38                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					DOS_FILE_BUFFS          = $38B000
=3719168					DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.39448b						DOS_INIT
.39448b		8b		phb		                PHB
.39448c		0b		phd		                PHD
.39448d		08		php		                PHP
.39448e		48		pha		                PHA             ; begin setdbr macro
.39448f		08		php		                PHP
.394490		e2 20		sep #$20	                SEP #$20        ; set A short
.394492		a9 00		lda #$00	                LDA #0
.394494		48		pha		                PHA
.394495		ab		plb		                PLB
.394496		28		plp		                PLP
.394497		68		pla		                PLA             ; end setdbr macro
.394498		48		pha		                PHA             ; begin setdp macro
.394499		08		php		                PHP
.39449a		c2 20		rep #$20	                REP #$20        ; set A long
.39449c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39449f		5b		tcd		                TCD
.3944a0		28		plp		                PLP
.3944a1		68		pla		                PLA             ; end setdp macro
.3944a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3944a4		c2 10		rep #$10	                REP #$10        ; set X long
.3944a6		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.3944a9		a9 00		lda #$00	                LDA #0
.3944ab		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.3944ae		e8		inx		                INX
.3944af		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.3944b2		d0 f7		bne $3944ab	                BNE b0_clr_loop
.3944b4		48		pha		                PHA             ; begin setdbr macro
.3944b5		08		php		                PHP
.3944b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3944b8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944ba		48		pha		                PHA
.3944bb		ab		plb		                PLB
.3944bc		28		plp		                PLP
.3944bd		68		pla		                PLA             ; end setdbr macro
.3944be		48		pha		                PHA             ; begin setdp macro
.3944bf		08		php		                PHP
.3944c0		c2 20		rep #$20	                REP #$20        ; set A long
.3944c2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944c5		5b		tcd		                TCD
.3944c6		28		plp		                PLP
.3944c7		68		pla		                PLA             ; end setdp macro
.3944c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3944ca		c2 10		rep #$10	                REP #$10        ; set X long
.3944cc		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3944cf		a9 00		lda #$00	                LDA #0
.3944d1		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3944d4		e8		inx		                INX
.3944d5		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3944d8		d0 f7		bne $3944d1	                BNE b38_clr_loop
.3944da		c2 20		rep #$20	                REP #$20        ; set A long
.3944dc		a9 8a 48	lda #$488a	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3944df		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3944e3		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3944e6		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.3944ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3944ec		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3944ee		85 01		sta $0321	                STA BIOS_DEV
.3944f0		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.3944f2		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.3944f6		a9 00		lda #$00	                LDA #0
.3944f8		a2 00 00	ldx #$0000	                LDX #0
.3944fb		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.3944fe		e8		inx		                INX
.3944ff		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.394502		d0 f7		bne $3944fb	                BNE fd_zero_loop
.394504		a9 00		lda #$00	                LDA #0
.394506		a2 00 00	ldx #$0000	                LDX #0
.394509		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.39450c		e8		inx		                INX
.39450d		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394510		d0 f7		bne $394509	                BNE sect_zero_loop
.394512		c2 20		rep #$20	                REP #$20        ; set A long
.394514		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.394517		85 20		sta $0340	                STA @b DOS_FD_PTR
.394519		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.39451c		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39451e		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394521		85 28		sta $0348	                STA @b DOS_TEMP
.394523		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.394526		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394528		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.39452b		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.39452e		a5 28		lda $0348	                LDA @b DOS_TEMP
.394530		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394532		c8		iny		                INY
.394533		c8		iny		                INY
.394534		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394536		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394538		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394539		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.39453b		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39453e		85 20		sta $0340	                STA @b DOS_FD_PTR
.394540		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.394542		69 00 00	adc #$0000	                ADC #0
.394545		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394547		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394548		a5 28		lda $0348	                LDA @b DOS_TEMP
.39454a		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.39454d		85 28		sta $0348	                STA @b DOS_TEMP
.39454f		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394551		69 00 00	adc #$0000	                ADC #0
.394554		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394556		ca		dex		                DEX                     ; Count down the descriptors...
.394557		d0 d2		bne $39452b	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394559		28		plp		                PLP
.39455a		2b		pld		                PLD
.39455b		ab		plb		                PLB
.39455c		6b		rtl		                RTL
.39455d						DOS_MOUNT
.39455d		8b		phb		                PHB
.39455e		0b		phd		                PHD
.39455f		08		php		                PHP
.394560		48		pha		                PHA             ; begin setdbr macro
.394561		08		php		                PHP
.394562		e2 20		sep #$20	                SEP #$20        ; set A short
.394564		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394566		48		pha		                PHA
.394567		ab		plb		                PLB
.394568		28		plp		                PLP
.394569		68		pla		                PLA             ; end setdbr macro
.39456a		48		pha		                PHA             ; begin setdp macro
.39456b		08		php		                PHP
.39456c		c2 20		rep #$20	                REP #$20        ; set A long
.39456e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394571		5b		tcd		                TCD
.394572		28		plp		                PLP
.394573		68		pla		                PLA             ; end setdp macro
.394574		e2 20		sep #$20	                SEP #$20        ; set A short
.394576		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394578		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.39457c		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.39457e		f0 1f		beq $39459f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394580		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394582		f0 26		beq $3945aa	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394584		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394586		f0 0b		beq $394593	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394588		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39458a		85 0e		sta $032e	                STA DOS_STATUS
.39458c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39458e		85 00		sta $0320	                STA BIOS_STATUS
.394590		82 7c 01	brl $39470f	                BRL ret_failure
.394593		22 be 67 39	jsl $3967be	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394597		b0 03		bcs $39459c	                BCS fdc_success
.394599		82 73 01	brl $39470f	                BRL ret_failure
.39459c		82 67 01	brl $394706	fdc_success     BRL ret_success
.39459f		22 c8 5d 39	jsl $395dc8	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3945a3		b0 10		bcs $3945b5	                BCS get_mbr             ; Continue if success
.3945a5		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3945a7		82 65 01	brl $39470f	                BRL ret_failure
.3945aa		22 06 6c 39	jsl $396c06	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.3945ae		b0 05		bcs $3945b5	                BCS get_mbr             ; Continue if success
.3945b0		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3945b2		82 5a 01	brl $39470f	                BRL ret_failure
.3945b5						get_mbr
.3945b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945b7		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3945b9		64 04		stz $0324	                STZ BIOS_LBA+2
.3945bb		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3945be		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945c0		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945c3		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945c5		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.3945c9		b0 07		bcs $3945d2	                BCS chk_signature       ; If success, check the signature bytes
.3945cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3945cd		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3945cf		82 3d 01	brl $39470f	                BRL ret_failure
.3945d2						chk_signature
.3945d2		e2 20		sep #$20	                SEP #$20        ; set A short
.3945d4		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3945d7		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945d9		d0 07		bne $3945e2	                BNE not_mbr             ; No: signal we could find the MBR
.3945db		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3945de		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945e0		f0 05		beq $3945e7	                BEQ chk_part_type       ; Yes: we have an MBR
.3945e2		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3945e4		82 28 01	brl $39470f	                BRL ret_failure
.3945e7		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3945ea		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3945ec		f0 05		beq $3945f3	                BEQ get_LBA             ; Is FAT32 with LBA?
.3945ee		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3945f0		82 1c 01	brl $39470f	                BRL ret_failure
.3945f3		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3945f6		c2 20		rep #$20	                REP #$20        ; set A long
.3945f8		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3945fb		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3945fe		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394601		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.394604		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394607		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.39460a		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39460d		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394610		e2 20		sep #$20	                SEP #$20        ; set A short
.394612		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394614		8d 00 a0	sta $38a000	                STA DEVICE
.394617		a9 00		lda #$00	                LDA #0
.394619		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39461c		c2 20		rep #$20	                REP #$20        ; set A long
.39461e		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394621		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394623		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394626		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394628		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39462b		85 02		sta $0322	                STA BIOS_LBA
.39462d		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394630		85 04		sta $0324	                STA BIOS_LBA+2
.394632		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394636		b0 1c		bcs $394654	                BCS get_first_sec       ; Got it? Start parsing it
.394638		e2 20		sep #$20	                SEP #$20        ; set A short
.39463a		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39463c		82 d0 00	brl $39470f	                BRL ret_failure
.39463f						chk_bpb_sig
.39463f		e2 20		sep #$20	                SEP #$20        ; set A short
.394641		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394644		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394646		d0 07		bne $39464f	                BNE not_bpb             ; No: signal we could find the volume ID
.394648		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.39464b		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39464d		f0 05		beq $394654	                BEQ get_first_sec       ; Yes: we have an volume ID
.39464f		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394651		82 bb 00	brl $39470f	                BRL ret_failure
.394654						get_first_sec
.394654		c2 20		rep #$20	                REP #$20        ; set A long
.394656		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394659		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.39465c		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.39465f		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394662		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394665		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394668		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394669		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39466c		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.39466f		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394672		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394675		69 00 00	adc #$0000	                ADC #0
.394678		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39467b		e2 20		sep #$20	                SEP #$20        ; set A short
.39467d		a2 00 00	ldx #$0000	                LDX #0
.394680		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394684		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394688		e8		inx		                INX
.394689		e0 04 00	cpx #$0004	                CPX #4
.39468c		d0 f2		bne $394680	                BNE cpy_secperfat
.39468e		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394691		0a		asl a		                ASL A
.394692		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394695		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394698		2a		rol a		                ROL A
.394699		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39469c		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.39469f		2a		rol a		                ROL A
.3946a0		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946a3		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3946a6		2a		rol a		                ROL A
.3946a7		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946aa		18		clc		                CLC
.3946ab		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3946ae		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3946b1		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3946b4		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3946b7		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3946ba		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946bd		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3946c0		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3946c3		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946c6		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3946c9		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3946cc		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3946d1		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3946d4		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3946d7		18		clc		                CLC
.3946d8		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.3946db		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.3946de		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.3946e1		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.3946e4		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.3946e7		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.3946ea		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3946ed		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.3946f0		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.3946f3		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.3946f6		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.3946f9		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.3946fc		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3946fe		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.394701		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.394703		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394706						ret_success
.394706		e2 20		sep #$20	                SEP #$20        ; set A short
.394708		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.39470a		28		plp		                PLP
.39470b		2b		pld		                PLD
.39470c		ab		plb		                PLB
.39470d		38		sec		                SEC
.39470e		6b		rtl		                RTL
.39470f						ret_failure
.39470f		e2 20		sep #$20	                SEP #$20        ; set A short
.394711		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394713		28		plp		                PLP
.394714		2b		pld		                PLD
.394715		ab		plb		                PLB
.394716		18		clc		                CLC
.394717		6b		rtl		                RTL
.394718						DOS_TESTBOOT
.394718		8b		phb		                PHB
.394719		0b		phd		                PHD
.39471a		da		phx		                PHX
.39471b		08		php		                PHP
.39471c		48		pha		                PHA             ; begin setdbr macro
.39471d		08		php		                PHP
.39471e		e2 20		sep #$20	                SEP #$20        ; set A short
.394720		a9 00		lda #$00	                LDA #0
.394722		48		pha		                PHA
.394723		ab		plb		                PLB
.394724		28		plp		                PLP
.394725		68		pla		                PLA             ; end setdbr macro
.394726		48		pha		                PHA             ; begin setdp macro
.394727		08		php		                PHP
.394728		c2 20		rep #$20	                REP #$20        ; set A long
.39472a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39472d		5b		tcd		                TCD
.39472e		28		plp		                PLP
.39472f		68		pla		                PLA             ; end setdp macro
.394730		c2 10		rep #$10	                REP #$10        ; set X long
.394732						chk_dev
.394732		e2 20		sep #$20	                SEP #$20        ; set A short
.394734		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394736		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394738		f0 24		beq $39475e	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.39473a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39473c		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.39473f		85 02		sta $0322	                STA @b BIOS_LBA
.394741		85 04		sta $0324	                STA @b BIOS_LBA+2
.394743		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394746		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394748		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39474b		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.39474d		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394751		b0 03		bcs $394756	                BCS chk_mbr_brl
.394753		82 47 00	brl $39479d	                BRL done                    ; If failed... just return
.394756						chk_mbr_brl
.394756		e2 20		sep #$20	                SEP #$20        ; set A short
.394758		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.39475c		80 04		bra $394762	                BRA chk_brl
.39475e		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394762		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394764		f0 06		beq $39476c	                BEQ chk_magic               ; Yes: check for the magic text
.394766		c9 82		cmp #$82	                CMP #$82
.394768		f0 02		beq $39476c	                BEQ chk_magic
.39476a		80 31		bra $39479d	                BRA done                    ; No: just return
.39476c		a2 00 00	ldx #$0000	chk_magic       LDX #0
.39476f		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394773		df a2 47 39	cmp $3947a2,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394777		d0 24		bne $39479d	                BNE done                    ; If it's not equal, just return
.394779		e8		inx		                INX                         ; Otherwise, check the next one
.39477a		e0 08 00	cpx #$0008	                CPX #8
.39477d		d0 f0		bne $39476f	                BNE magic_loop              ; Until we've checked all 8 bytes
.39477f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394781		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394784		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394787		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.39478a		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.39478d		e2 20		sep #$20	                SEP #$20        ; set A short
.39478f		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.394791		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394793		f0 04		beq $394799	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394795		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394799		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.39479d		28		plp		done            PLP
.39479e		2b		pld		                PLD
.39479f		ab		plb		                PLB
.3947a0		fa		plx		                PLX
.3947a1		6b		rtl		                RTL
>3947a2		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3947aa						DOS_CALC_LBA
.3947aa		8b		phb		                PHB
.3947ab		0b		phd		                PHD
.3947ac		08		php		                PHP
.3947ad		48		pha		                PHA             ; begin setdbr macro
.3947ae		08		php		                PHP
.3947af		e2 20		sep #$20	                SEP #$20        ; set A short
.3947b1		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947b3		48		pha		                PHA
.3947b4		ab		plb		                PLB
.3947b5		28		plp		                PLP
.3947b6		68		pla		                PLA             ; end setdbr macro
.3947b7		48		pha		                PHA             ; begin setdp macro
.3947b8		08		php		                PHP
.3947b9		c2 20		rep #$20	                REP #$20        ; set A long
.3947bb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947be		5b		tcd		                TCD
.3947bf		28		plp		                PLP
.3947c0		68		pla		                PLA             ; end setdp macro
.3947c1		c2 20		rep #$20	                REP #$20        ; set A long
.3947c3		38		sec		                SEC
.3947c4		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3947c6		e9 02 00	sbc #$0002	                SBC #2
.3947c9		85 28		sta $0348	                STA DOS_TEMP
.3947cb		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3947cd		e9 00 00	sbc #$0000	                SBC #0
.3947d0		85 2a		sta $034a	                STA DOS_TEMP+2
.3947d2		e2 10		sep #$10	                SEP #$10        ; set X short
.3947d4		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3947d7		e0 01		cpx #$01	mult_loop       CPX #1
.3947d9		f0 07		beq $3947e2	                BEQ add_offset
.3947db		06 28		asl $0348	                ASL DOS_TEMP
.3947dd		26 28		rol $0348	                ROL DOS_TEMP
.3947df		ca		dex		                DEX
.3947e0		80 f5		bra $3947d7	                BRA mult_loop
.3947e2		18		clc		add_offset      CLC
.3947e3		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3947e5		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3947e8		85 02		sta $0322	                STA BIOS_LBA
.3947ea		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3947ec		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3947ef		85 04		sta $0324	                STA BIOS_LBA+2
.3947f1		28		plp		                PLP
.3947f2		2b		pld		                PLD
.3947f3		ab		plb		                PLB
.3947f4		6b		rtl		                RTL
.3947f5						DOS_GETCLUSTER
.3947f5		8b		phb		                PHB
.3947f6		0b		phd		                PHD
.3947f7		08		php		                PHP
.3947f8		48		pha		                PHA             ; begin setdbr macro
.3947f9		08		php		                PHP
.3947fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3947fc		a9 00		lda #$00	                LDA #0
.3947fe		48		pha		                PHA
.3947ff		ab		plb		                PLB
.394800		28		plp		                PLP
.394801		68		pla		                PLA             ; end setdbr macro
.394802		48		pha		                PHA             ; begin setdp macro
.394803		08		php		                PHP
.394804		c2 20		rep #$20	                REP #$20        ; set A long
.394806		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394809		5b		tcd		                TCD
.39480a		28		plp		                PLP
.39480b		68		pla		                PLA             ; end setdp macro
.39480c		c2 20		rep #$20	                REP #$20        ; set A long
.39480e		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394810		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394812		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394814		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394816		22 aa 47 39	jsl $3947aa	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39481a		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39481e		90 09		bcc $394829	                BCC ret_failure
.394820						ret_success
.394820		e2 20		sep #$20	                SEP #$20        ; set A short
.394822		64 0e		stz $032e	                STZ DOS_STATUS
.394824		28		plp		                PLP
.394825		2b		pld		                PLD
.394826		ab		plb		                PLB
.394827		38		sec		                SEC
.394828		6b		rtl		                RTL
.394829						ret_failure
.394829		e2 20		sep #$20	                SEP #$20        ; set A short
.39482b		85 0e		sta $032e	                STA DOS_STATUS
.39482d		28		plp		                PLP
.39482e		2b		pld		                PLD
.39482f		ab		plb		                PLB
.394830		18		clc		                CLC
.394831		6b		rtl		                RTL
.394832						DOS_PUTCLUSTER
.394832		8b		phb		                PHB
.394833		0b		phd		                PHD
.394834		08		php		                PHP
.394835		48		pha		                PHA             ; begin setdbr macro
.394836		08		php		                PHP
.394837		e2 20		sep #$20	                SEP #$20        ; set A short
.394839		a9 00		lda #$00	                LDA #0
.39483b		48		pha		                PHA
.39483c		ab		plb		                PLB
.39483d		28		plp		                PLP
.39483e		68		pla		                PLA             ; end setdbr macro
.39483f		48		pha		                PHA             ; begin setdp macro
.394840		08		php		                PHP
.394841		c2 20		rep #$20	                REP #$20        ; set A long
.394843		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394846		5b		tcd		                TCD
.394847		28		plp		                PLP
.394848		68		pla		                PLA             ; end setdp macro
.394849		c2 20		rep #$20	                REP #$20        ; set A long
.39484b		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39484d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39484f		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394851		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394853		22 aa 47 39	jsl $3947aa	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394857		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.39485b		90 09		bcc $394866	                BCC ret_failure
.39485d						ret_success
.39485d		e2 20		sep #$20	                SEP #$20        ; set A short
.39485f		64 0e		stz $032e	                STZ DOS_STATUS
.394861		28		plp		                PLP
.394862		2b		pld		                PLD
.394863		ab		plb		                PLB
.394864		38		sec		                SEC
.394865		6b		rtl		                RTL
.394866						ret_failure
.394866		e2 20		sep #$20	                SEP #$20        ; set A short
.394868		85 0e		sta $032e	                STA DOS_STATUS
.39486a		28		plp		                PLP
.39486b		2b		pld		                PLD
.39486c		ab		plb		                PLB
.39486d		18		clc		                CLC
.39486e		6b		rtl		                RTL
>39486f		40 46 00			DOS_FDC_NAME    .null "@F"
.394872						DOS_FDC_DESC
>394872		6f 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394876		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394877		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>39487b		40 53 00			DOS_SDC_NAME    .null "@S"
.39487e						DOS_SDC_DESC
>39487e		7b 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394882		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394883		72 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394887		40 48 00			DOS_HDC_NAME    .null "@H"
.39488a						DOS_HD_DESC
>39488a		87 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39488e		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>39488f		7e 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394893						DOS_PARSE_DEV
.394893		8b		phb		                PHB
.394894		0b		phd		                PHD
.394895		08		php		                PHP
.394896		48		pha		                PHA             ; begin setdbr macro
.394897		08		php		                PHP
.394898		e2 20		sep #$20	                SEP #$20        ; set A short
.39489a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39489c		48		pha		                PHA
.39489d		ab		plb		                PLB
.39489e		28		plp		                PLP
.39489f		68		pla		                PLA             ; end setdbr macro
.3948a0		48		pha		                PHA             ; begin setdp macro
.3948a1		08		php		                PHP
.3948a2		c2 20		rep #$20	                REP #$20        ; set A long
.3948a4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948a7		5b		tcd		                TCD
.3948a8		28		plp		                PLP
.3948a9		68		pla		                PLA             ; end setdp macro
.3948aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948ac		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3948b0		85 28		sta $0348	                STA DOS_TEMP
.3948b2		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3948b6		85 2a		sta $034a	                STA DOS_TEMP+2
.3948b8		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3948bb		85 48		sta $0368	                STA DOS_STR2_PTR
.3948bd		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3948c0		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3948c2		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3948c5		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948c7		85 44		sta $0364	                STA DOS_STR1_PTR
.3948c9		c8		iny		                INY
.3948ca		c8		iny		                INY
.3948cb		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948cd		85 46		sta $0366	                STA DOS_STR1_PTR+2
.3948cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3948d1		a0 00 00	ldy #$0000	                LDY #0
.3948d4		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3948d6		f0 24		beq $3948fc	                BEQ found                   ; If it's NULL, we found a match
.3948d8		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3948da		d0 03		bne $3948df	                BNE next_device             ; If no match, try to load the next device
.3948dc		c8		iny		                INY                         ; Go to the next character
.3948dd		80 f5		bra $3948d4	                BRA cmp_loop
.3948df						next_device
.3948df		c2 20		rep #$20	                REP #$20        ; set A long
.3948e1		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3948e4		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948e6		48		pha		                PHA
.3948e7		c8		iny		                INY
.3948e8		c8		iny		                INY
.3948e9		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948eb		85 2a		sta $034a	                STA DOS_TEMP+2
.3948ed		68		pla		                PLA
.3948ee		85 28		sta $0348	                STA DOS_TEMP
.3948f0		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3948f2		d0 ce		bne $3948c2	                BNE dev_loop                ; No: check this device
.3948f4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948f6		d0 ca		bne $3948c2	                BNE dev_loop
.3948f8		28		plp		done            PLP                         ; Otherwise, return having not found a match
.3948f9		2b		pld		                PLD
.3948fa		ab		plb		                PLB
.3948fb		6b		rtl		                RTL
.3948fc		22 0d 49 39	jsl $39490d	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394900		e2 20		sep #$20	                SEP #$20        ; set A short
.394902		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394905		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394907		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39490b		80 eb		bra $3948f8	                BRA done
.39490d						DOS_ADJUSTPATH
.39490d		da		phx		                PHX
.39490e		5a		phy		                PHY
.39490f		8b		phb		                PHB
.394910		0b		phd		                PHD
.394911		08		php		                PHP
.394912		48		pha		                PHA             ; begin setdbr macro
.394913		08		php		                PHP
.394914		e2 20		sep #$20	                SEP #$20        ; set A short
.394916		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394918		48		pha		                PHA
.394919		ab		plb		                PLB
.39491a		28		plp		                PLP
.39491b		68		pla		                PLA             ; end setdbr macro
.39491c		48		pha		                PHA             ; begin setdp macro
.39491d		08		php		                PHP
.39491e		c2 20		rep #$20	                REP #$20        ; set A long
.394920		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394923		5b		tcd		                TCD
.394924		28		plp		                PLP
.394925		68		pla		                PLA             ; end setdp macro
.394926		c2 30		rep #$30	                REP #$30        ; set A&X long
.394928		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.39492a		98		tya		                TYA                             ; Compute the address of the first source byte
.39492b		18		clc		                CLC
.39492c		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39492f		aa		tax		                TAX
.394930		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394933		a8		tay		                TAY
.394934		38		sec		                SEC                             ; Compute the number of bytes to copy
.394935		a9 00 01	lda #$0100	                LDA #256
.394938		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.39493a		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39493d		28		plp		                PLP
.39493e		2b		pld		                PLD
.39493f		ab		plb		                PLB
.394940		7a		ply		                PLY
.394941		fa		plx		                PLX
.394942		6b		rtl		                RTL
.394943						DOS_PARSE_PATH
.394943		8b		phb		                PHB
.394944		0b		phd		                PHD
.394945		08		php		                PHP
.394946		48		pha		                PHA             ; begin setdbr macro
.394947		08		php		                PHP
.394948		e2 20		sep #$20	                SEP #$20        ; set A short
.39494a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39494c		48		pha		                PHA
.39494d		ab		plb		                PLB
.39494e		28		plp		                PLP
.39494f		68		pla		                PLA             ; end setdbr macro
.394950		48		pha		                PHA             ; begin setdp macro
.394951		08		php		                PHP
.394952		c2 20		rep #$20	                REP #$20        ; set A long
.394954		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394957		5b		tcd		                TCD
.394958		28		plp		                PLP
.394959		68		pla		                PLA             ; end setdp macro
.39495a		c2 10		rep #$10	                REP #$10        ; set X long
.39495c		e2 20		sep #$20	                SEP #$20        ; set A short
.39495e		a2 00 00	ldx #$0000	                LDX #0
.394961		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394963		f0 1b		beq $394980	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394965		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394967		b0 05		bcs $39496e	                BGE check_case          ; No: check the case
.394969		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.39496b		82 64 00	brl $3949d2	                BRL ret_failure
.39496e		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394970		90 08		bcc $39497a	                BLT next_char
.394972		c9 7b		cmp #$7b	                CMP #'z'+1
.394974		b0 04		bcs $39497a	                BGE next_char
.394976		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394978		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39497a		e8		inx		next_char       INX                     ; Move to the next character
.39497b		e0 00 01	cpx #$0100	                CPX #$100
.39497e		d0 e1		bne $394961	                BNE upcase_loop
.394980		22 93 48 39	jsl $394893	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394984		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394986		c9 3a		cmp #$3a	                CMP #':'
.394988		d0 07		bne $394991	                BNE clr_name            ; If not colon, treat it as a file name
.39498a		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.39498d		22 0d 49 39	jsl $39490d	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394991		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394994		a9 20		lda #$20	                LDA #' '
.394996		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394999		c8		iny		                INY
.39499a		c0 0b 00	cpy #$000b	                CPY #11
.39499d		d0 f7		bne $394996	                BNE clr_loop
.39499f		a2 00 00	ldx #$0000	                LDX #0
.3949a2		a0 00 00	ldy #$0000	                LDY #0
.3949a5		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3949a7		f0 20		beq $3949c9	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3949a9		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3949ab		f0 0a		beq $3949b7	                BEQ cpy_ext             ; And move to the extension
.3949ad		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3949b0		e8		inx		                INX
.3949b1		c8		iny		                INY                     ; Move to the next character
.3949b2		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3949b5		d0 ee		bne $3949a5	                BNE cpy_name_loop       ; No: process this one
.3949b7		e8		inx		cpy_ext         INX                     ; Skip the dot
.3949b8		a0 08 00	ldy #$0008	                LDY #8
.3949bb		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3949bd		f0 0a		beq $3949c9	                BEQ ret_success         ; If it's NULL, we've finished
.3949bf		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3949c2		e8		inx		                INX
.3949c3		c8		iny		                INY                     ; Move to the next character
.3949c4		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3949c7		d0 f2		bne $3949bb	                BNE cpy_ext_loop        ; No: process this one
.3949c9						ret_success
.3949c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3949cb		64 0e		stz $032e	                STZ DOS_STATUS
.3949cd		28		plp		                PLP
.3949ce		2b		pld		                PLD
.3949cf		ab		plb		                PLB
.3949d0		38		sec		                SEC
.3949d1		6b		rtl		                RTL
.3949d2						ret_failure
.3949d2		e2 20		sep #$20	                SEP #$20        ; set A short
.3949d4		85 0e		sta $032e	                STA DOS_STATUS
.3949d6		28		plp		                PLP
.3949d7		2b		pld		                PLD
.3949d8		ab		plb		                PLB
.3949d9		18		clc		                CLC
.3949da		6b		rtl		                RTL
.3949db						DOS_FINDFILE
.3949db		8b		phb		                PHB
.3949dc		0b		phd		                PHD
.3949dd		08		php		                PHP
.3949de		48		pha		                PHA             ; begin setdbr macro
.3949df		08		php		                PHP
.3949e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3949e2		a9 00		lda #$00	                LDA #0
.3949e4		48		pha		                PHA
.3949e5		ab		plb		                PLB
.3949e6		28		plp		                PLP
.3949e7		68		pla		                PLA             ; end setdbr macro
.3949e8		48		pha		                PHA             ; begin setdp macro
.3949e9		08		php		                PHP
.3949ea		c2 20		rep #$20	                REP #$20        ; set A long
.3949ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949ef		5b		tcd		                TCD
.3949f0		28		plp		                PLP
.3949f1		68		pla		                PLA             ; end setdp macro
.3949f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949f4		22 43 49 39	jsl $394943	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3949f8		b0 05		bcs $3949ff	                BCS mount                       ; If success: try to open the directory
.3949fa		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3949fb		2b		pld		                PLD
.3949fc		ab		plb		                PLB
.3949fd		18		clc		                CLC
.3949fe		6b		rtl		                RTL
.3949ff		22 5d 45 39	jsl $39455d	mount           JSL DOS_MOUNT
.394a03						get_directory
.394a03		c2 20		rep #$20	                REP #$20        ; set A long
.394a05		22 12 42 39	jsl $394212	                JSL DOS_DIROPEN                 ; Get the directory
.394a09		b0 07		bcs $394a12	                BCS scan_entries                ; If success: start scanning the directory entries
.394a0b		e2 20		sep #$20	                SEP #$20        ; set A short
.394a0d		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394a0f		82 47 00	brl $394a59	                BRL ret_failure
.394a12		22 91 42 39	jsl $394291	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394a16						scan_loop
.394a16		e2 20		sep #$20	                SEP #$20        ; set A short
.394a18		a0 00 00	ldy #$0000	                LDY #0
.394a1b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394a1d		d0 05		bne $394a24	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394a1f		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394a21		82 35 00	brl $394a59	                BRL ret_failure
.394a24		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394a26		f0 26		beq $394a4e	                BEQ next_entry                  ; Go to the next entry
.394a28		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394a2b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a2d		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394a2f		d0 1d		bne $394a4e	                BNE next_entry                  ; Yes: skip it!
.394a31		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394a33		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394a35		f0 17		beq $394a4e	                BEQ next_entry                  ; Yes: skip it!
.394a37		a2 00 00	ldx #$0000	                LDX #0
.394a3a		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a3d		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a3f		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a43		d0 09		bne $394a4e	                BNE next_entry                  ; If not equal: try the next entry
.394a45		c8		iny		                INY                             ; Advance to the next character
.394a46		e8		inx		                INX
.394a47		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a4a		f0 16		beq $394a62	                BEQ match                       ; Yes: we have a match!
.394a4c		80 ef		bra $394a3d	                BRA scan_cmp_loop               ; No: keep checking
.394a4e		22 ac 42 39	jsl $3942ac	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394a52		90 05		bcc $394a59	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394a54		82 bf ff	brl $394a16	                BRL scan_loop                   ; If found: keep scanning
.394a57		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394a59						ret_failure
.394a59		e2 20		sep #$20	                SEP #$20        ; set A short
.394a5b		85 0e		sta $032e	                STA DOS_STATUS
.394a5d		28		plp		                PLP
.394a5e		2b		pld		                PLD
.394a5f		ab		plb		                PLB
.394a60		18		clc		                CLC
.394a61		6b		rtl		                RTL
.394a62						match
.394a62		c2 20		rep #$20	                REP #$20        ; set A long
.394a64		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394a67		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a69		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394a6b		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394a6e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a70		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a72						ret_success
.394a72		e2 20		sep #$20	                SEP #$20        ; set A short
.394a74		64 0e		stz $032e	                STZ DOS_STATUS
.394a76		28		plp		                PLP
.394a77		2b		pld		                PLD
.394a78		ab		plb		                PLB
.394a79		38		sec		                SEC
.394a7a		6b		rtl		                RTL
.394a7b						DOS_READFILE
.394a7b		8b		phb		                PHB
.394a7c		0b		phd		                PHD
.394a7d		08		php		                PHP
.394a7e		48		pha		                PHA             ; begin setdbr macro
.394a7f		08		php		                PHP
.394a80		e2 20		sep #$20	                SEP #$20        ; set A short
.394a82		a9 00		lda #$00	                LDA #0
.394a84		48		pha		                PHA
.394a85		ab		plb		                PLB
.394a86		28		plp		                PLP
.394a87		68		pla		                PLA             ; end setdbr macro
.394a88		48		pha		                PHA             ; begin setdp macro
.394a89		08		php		                PHP
.394a8a		c2 20		rep #$20	                REP #$20        ; set A long
.394a8c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a8f		5b		tcd		                TCD
.394a90		28		plp		                PLP
.394a91		68		pla		                PLA             ; end setdp macro
.394a92		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a94		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394a96		48		pha		                PHA
.394a97		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394a99		48		pha		                PHA
.394a9a		22 db 49 39	jsl $3949db	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394a9e		68		pla		                PLA
.394a9f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394aa1		68		pla		                PLA
.394aa2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394aa4		90 0f		bcc $394ab5	                BCC pass_failure                    ; If found: try to load the cluster
.394aa6		22 f5 47 39	jsl $3947f5	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394aaa		90 09		bcc $394ab5	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394aac						ret_success
.394aac		e2 20		sep #$20	                SEP #$20        ; set A short
.394aae		64 0e		stz $032e	                STZ DOS_STATUS
.394ab0		28		plp		                PLP
.394ab1		2b		pld		                PLD
.394ab2		ab		plb		                PLB
.394ab3		38		sec		                SEC
.394ab4		6b		rtl		                RTL
.394ab5		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394ab6		2b		pld		                PLD
.394ab7		ab		plb		                PLB
.394ab8		18		clc		                CLC
.394ab9		6b		rtl		                RTL
.394aba						ENTRYFORCLUS12
.394aba		8b		phb		                PHB
.394abb		0b		phd		                PHD
.394abc		08		php		                PHP
.394abd		48		pha		                PHA             ; begin setdbr macro
.394abe		08		php		                PHP
.394abf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac1		a9 00		lda #$00	                LDA #0
.394ac3		48		pha		                PHA
.394ac4		ab		plb		                PLB
.394ac5		28		plp		                PLP
.394ac6		68		pla		                PLA             ; end setdbr macro
.394ac7		48		pha		                PHA             ; begin setdp macro
.394ac8		08		php		                PHP
.394ac9		c2 20		rep #$20	                REP #$20        ; set A long
.394acb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ace		5b		tcd		                TCD
.394acf		28		plp		                PLP
.394ad0		68		pla		                PLA             ; end setdp macro
.394ad1		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ad3		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394ad5		0a		asl a		                ASL A
.394ad6		85 28		sta $0348	                STA DOS_TEMP
.394ad8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ada		2a		rol a		                ROL A
.394adb		85 2a		sta $034a	                STA DOS_TEMP+2
.394add		18		clc		                CLC
.394ade		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ae0		65 28		adc $0348	                ADC DOS_TEMP
.394ae2		85 28		sta $0348	                STA DOS_TEMP
.394ae4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ae6		65 2a		adc $034a	                ADC DOS_TEMP+2
.394ae8		85 2a		sta $034a	                STA DOS_TEMP+2
.394aea		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394aec		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394aee		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394af0		29 ff 03	and #$03ff	                AND #$003FF
.394af3		aa		tax		                TAX
.394af4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af6		66 28		ror $0348	                ROR DOS_TEMP
.394af8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394afa		66 28		ror $0348	                ROR DOS_TEMP
.394afc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394afe		66 28		ror $0348	                ROR DOS_TEMP
.394b00		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b02		66 28		ror $0348	                ROR DOS_TEMP
.394b04		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b06		66 28		ror $0348	                ROR DOS_TEMP
.394b08		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b0a		66 28		ror $0348	                ROR DOS_TEMP
.394b0c		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b0e		66 28		ror $0348	                ROR DOS_TEMP
.394b10		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b12		66 28		ror $0348	                ROR DOS_TEMP
.394b14		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b16		66 28		ror $0348	                ROR DOS_TEMP
.394b18		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394b19		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394b1d		65 28		adc $0348	                ADC DOS_TEMP
.394b1f		85 24		sta $0344	                STA DOS_FAT_LBA
.394b21		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394b25		65 2a		adc $034a	                ADC DOS_TEMP+2
.394b27		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b29		28		plp		                PLP
.394b2a		2b		pld		                PLD
.394b2b		ab		plb		                PLB
.394b2c		6b		rtl		                RTL
.394b2d						FATFORCLUSTER12
.394b2d		8b		phb		                PHB
.394b2e		0b		phd		                PHD
.394b2f		08		php		                PHP
.394b30		48		pha		                PHA             ; begin setdbr macro
.394b31		08		php		                PHP
.394b32		e2 20		sep #$20	                SEP #$20        ; set A short
.394b34		a9 00		lda #$00	                LDA #0
.394b36		48		pha		                PHA
.394b37		ab		plb		                PLB
.394b38		28		plp		                PLP
.394b39		68		pla		                PLA             ; end setdbr macro
.394b3a		48		pha		                PHA             ; begin setdp macro
.394b3b		08		php		                PHP
.394b3c		c2 20		rep #$20	                REP #$20        ; set A long
.394b3e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b41		5b		tcd		                TCD
.394b42		28		plp		                PLP
.394b43		68		pla		                PLA             ; end setdp macro
.394b44		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b46		a2 00 00	ldx #$0000	                LDX #0
.394b49		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b4c		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b50		e8		inx		                INX
.394b51		e8		inx		                INX
.394b52		e0 00 04	cpx #$0400	                CPX #1024
.394b55		d0 f5		bne $394b4c	                BNE clr_loop
.394b57		22 ba 4a 39	jsl $394aba	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394b5b		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394b5d		85 02		sta $0322	                STA BIOS_LBA
.394b5f		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b61		85 04		sta $0324	                STA BIOS_LBA+2
.394b63		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394b66		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b68		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b6b		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b6d		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b71		90 17		bcc $394b8a	                BCC error
.394b73		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394b75		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394b78		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b7a		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b7d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b7f		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b83		90 05		bcc $394b8a	                BCC error
.394b85		28		plp		                PLP
.394b86		2b		pld		                PLD
.394b87		ab		plb		                PLB
.394b88		38		sec		                SEC
.394b89		6b		rtl		                RTL
.394b8a						error
.394b8a		e2 20		sep #$20	                SEP #$20        ; set A short
.394b8c		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b8e		85 0e		sta $032e	                STA DOS_STATUS
.394b90		28		plp		                PLP
.394b91		2b		pld		                PLD
.394b92		ab		plb		                PLB
.394b93		18		clc		                CLC
.394b94		6b		rtl		                RTL
.394b95						FATFORCLUSTER32
.394b95		8b		phb		                PHB
.394b96		0b		phd		                PHD
.394b97		48		pha		                PHA             ; begin setdbr macro
.394b98		08		php		                PHP
.394b99		e2 20		sep #$20	                SEP #$20        ; set A short
.394b9b		a9 00		lda #$00	                LDA #0
.394b9d		48		pha		                PHA
.394b9e		ab		plb		                PLB
.394b9f		28		plp		                PLP
.394ba0		68		pla		                PLA             ; end setdbr macro
.394ba1		48		pha		                PHA             ; begin setdp macro
.394ba2		08		php		                PHP
.394ba3		c2 20		rep #$20	                REP #$20        ; set A long
.394ba5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ba8		5b		tcd		                TCD
.394ba9		28		plp		                PLP
.394baa		68		pla		                PLA             ; end setdp macro
.394bab		c2 30		rep #$30	                REP #$30        ; set A&X long
.394bad		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394baf		85 24		sta $0344	                STA DOS_FAT_LBA
.394bb1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394bb3		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394bb5		a2 07 00	ldx #$0007	                LDX #7
.394bb8		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394bba		66 24		ror $0344	                ROR DOS_FAT_LBA
.394bbc		ca		dex		                DEX
.394bbd		d0 f9		bne $394bb8	                BNE div_loop
.394bbf		18		clc		                CLC
.394bc0		a5 24		lda $0344	                LDA DOS_FAT_LBA
.394bc2		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394bc6		85 24		sta $0344	                STA DOS_FAT_LBA
.394bc8		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bca		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394bce		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394bd0		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394bd2		85 02		sta $0322	                STA BIOS_LBA
.394bd4		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bd6		85 04		sta $0324	                STA BIOS_LBA+2
.394bd8		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394bdb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bdd		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394be0		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394be2		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394be6		b0 06		bcs $394bee	                BCS find_entry
.394be8		e2 20		sep #$20	                SEP #$20        ; set A short
.394bea		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bec		80 0e		bra $394bfc	                BRA ret_failure
.394bee						find_entry
.394bee		c2 20		rep #$20	                REP #$20        ; set A long
.394bf0		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bf2		0a		asl a		                ASL A
.394bf3		0a		asl a		                ASL A                           ; * 4
.394bf4		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394bf7		aa		tax		                TAX                             ; X should be the offset within the sector
.394bf8		2b		pld		ret_success     PLD
.394bf9		ab		plb		                PLB
.394bfa		38		sec		                SEC                             ; return success
.394bfb		6b		rtl		                RTL
.394bfc		2b		pld		ret_failure     PLD
.394bfd		ab		plb		                PLB
.394bfe		18		clc		                CLC                             ; Return failure
.394bff		6b		rtl		                RTL
.394c00						NEXTCLUSTER
.394c00		08		php		                PHP
.394c01		e2 20		sep #$20	                SEP #$20        ; set A short
.394c03		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c07		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c09		d0 08		bne $394c13	                BNE fat32                       ; No: assume it's FAT32
.394c0b		22 21 4c 39	jsl $394c21	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394c0f		90 0d		bcc $394c1e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c11		80 06		bra $394c19	                BRA ret_success
.394c13		22 89 4c 39	jsl $394c89	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394c17		90 05		bcc $394c1e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c19		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c1b		28		plp		                PLP
.394c1c		38		sec		                SEC
.394c1d		6b		rtl		                RTL
.394c1e		28		plp		pass_failure    PLP
.394c1f		18		clc		                CLC
.394c20		6b		rtl		                RTL
.394c21						NEXTCLUSTER12
.394c21		8b		phb		                    PHB
.394c22		0b		phd		                    PHD
.394c23		08		php		                    PHP
.394c24		48		pha		                PHA             ; begin setdbr macro
.394c25		08		php		                PHP
.394c26		e2 20		sep #$20	                SEP #$20        ; set A short
.394c28		a9 00		lda #$00	                LDA #0
.394c2a		48		pha		                PHA
.394c2b		ab		plb		                PLB
.394c2c		28		plp		                PLP
.394c2d		68		pla		                PLA             ; end setdbr macro
.394c2e		48		pha		                PHA             ; begin setdp macro
.394c2f		08		php		                PHP
.394c30		c2 20		rep #$20	                REP #$20        ; set A long
.394c32		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c35		5b		tcd		                TCD
.394c36		28		plp		                PLP
.394c37		68		pla		                PLA             ; end setdp macro
.394c38		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c3a		22 2d 4b 39	jsl $394b2d	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c3e		b0 03		bcs $394c43	                    BCS chk_clus_id
.394c40		82 41 00	brl $394c84	                    BRL pass_failure
.394c43		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c45		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c48		d0 0d		bne $394c57	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c4a						is_even
.394c4a		c2 20		rep #$20	                REP #$20        ; set A long
.394c4c		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c50		29 ff 0f	and #$0fff	                    AND #$0FFF
.394c53		85 28		sta $0348	                    STA DOS_TEMP
.394c55		80 0c		bra $394c63	                    BRA check_id
.394c57						is_odd
.394c57		c2 20		rep #$20	                REP #$20        ; set A long
.394c59		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394c5d		4a		lsr a		                    LSR A
.394c5e		4a		lsr a		                    LSR A
.394c5f		4a		lsr a		                    LSR A
.394c60		4a		lsr a		                    LSR A
.394c61		85 28		sta $0348	                    STA DOS_TEMP
.394c63						check_id
.394c63		c2 20		rep #$20	                REP #$20        ; set A long
.394c65		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394c67		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394c6a		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394c6d		f0 0f		beq $394c7e	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394c6f		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394c71		85 10		sta $0330	                    STA DOS_CLUS_ID
.394c73		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394c75						ret_success
.394c75		e2 20		sep #$20	                SEP #$20        ; set A short
.394c77		64 0e		stz $032e	                    STZ DOS_STATUS
.394c79		28		plp		                    PLP
.394c7a		2b		pld		                    PLD
.394c7b		ab		plb		                    PLB
.394c7c		38		sec		                    SEC
.394c7d		6b		rtl		                    RTL
.394c7e						no_more
.394c7e		e2 20		sep #$20	                SEP #$20        ; set A short
.394c80		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394c82		85 0e		sta $032e	                    STA DOS_STATUS
.394c84		28		plp		pass_failure        PLP
.394c85		2b		pld		                    PLD
.394c86		ab		plb		                    PLB
.394c87		18		clc		                    CLC
.394c88		6b		rtl		                    RTL
.394c89						NEXTCLUSTER32
.394c89		8b		phb		                PHB
.394c8a		0b		phd		                PHD
.394c8b		08		php		                PHP
.394c8c		48		pha		                PHA             ; begin setdbr macro
.394c8d		08		php		                PHP
.394c8e		e2 20		sep #$20	                SEP #$20        ; set A short
.394c90		a9 00		lda #$00	                LDA #0
.394c92		48		pha		                PHA
.394c93		ab		plb		                PLB
.394c94		28		plp		                PLP
.394c95		68		pla		                PLA             ; end setdbr macro
.394c96		48		pha		                PHA             ; begin setdp macro
.394c97		08		php		                PHP
.394c98		c2 20		rep #$20	                REP #$20        ; set A long
.394c9a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c9d		5b		tcd		                TCD
.394c9e		28		plp		                PLP
.394c9f		68		pla		                PLA             ; end setdp macro
.394ca0		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ca2		22 95 4b 39	jsl $394b95	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394ca6		90 53		bcc $394cfb	                BCC ret_failure                 ; If it did not work, return the error
.394ca8		e2 20		sep #$20	                SEP #$20        ; set A short
.394caa		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394cae		85 28		sta $0348	                STA DOS_TEMP
.394cb0		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394cb4		85 29		sta $0349	                STA DOS_TEMP+1
.394cb6		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394cba		85 2a		sta $034a	                STA DOS_TEMP+2
.394cbc		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394cc0		85 2b		sta $034b	                STA DOS_TEMP+3
.394cc2		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394cc4		c9 ff		cmp #$ff	                CMP #$FF
.394cc6		d0 18		bne $394ce0	                BNE found_next
.394cc8		a5 29		lda $0349	                LDA DOS_TEMP+1
.394cca		c9 ff		cmp #$ff	                CMP #$FF
.394ccc		d0 12		bne $394ce0	                BNE found_next
.394cce		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cd0		c9 ff		cmp #$ff	                CMP #$FF
.394cd2		d0 0c		bne $394ce0	                BNE found_next
.394cd4		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cd6		c9 0f		cmp #$0f	                CMP #$0F
.394cd8		d0 06		bne $394ce0	                BNE found_next                  ; No: return this cluster as the next
.394cda		e2 20		sep #$20	                SEP #$20        ; set A short
.394cdc		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394cde		80 1b		bra $394cfb	                BRA ret_failure
.394ce0						found_next
.394ce0		e2 20		sep #$20	                SEP #$20        ; set A short
.394ce2		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394ce4		85 10		sta $0330	                STA DOS_CLUS_ID
.394ce6		a5 29		lda $0349	                LDA DOS_TEMP+1
.394ce8		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394cea		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cec		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cee		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cf0		85 13		sta $0333	                STA DOS_CLUS_ID+3
.394cf2						ret_success
.394cf2		e2 20		sep #$20	                SEP #$20        ; set A short
.394cf4		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394cf6		28		plp		                PLP
.394cf7		2b		pld		                PLD
.394cf8		ab		plb		                PLB
.394cf9		38		sec		                SEC
.394cfa		6b		rtl		                RTL
.394cfb						ret_failure
.394cfb		e2 20		sep #$20	                SEP #$20        ; set A short
.394cfd		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394cff		28		plp		                PLP
.394d00		2b		pld		                PLD
.394d01		ab		plb		                PLB
.394d02		18		clc		                CLC
.394d03		6b		rtl		                RTL
.394d04						DOS_READNEXT
.394d04		08		php		                PHP
.394d05		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d07		22 00 4c 39	jsl $394c00	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394d0b		90 09		bcc $394d16	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394d0d		22 f5 47 39	jsl $3947f5	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394d11		90 03		bcc $394d16	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394d13		28		plp		ret_success     PLP
.394d14		38		sec		                SEC
.394d15		6b		rtl		                RTL
.394d16		28		plp		pass_failure    PLP
.394d17		18		clc		                CLC
.394d18		6b		rtl		                RTL
.394d19						DOS_FREECLUS
.394d19		08		php		                PHP
.394d1a		48		pha		                PHA             ; begin setdp macro
.394d1b		08		php		                PHP
.394d1c		c2 20		rep #$20	                REP #$20        ; set A long
.394d1e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d21		5b		tcd		                TCD
.394d22		28		plp		                PLP
.394d23		68		pla		                PLA             ; end setdp macro
.394d24		e2 20		sep #$20	                SEP #$20        ; set A short
.394d26		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d2a		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d2c		d0 08		bne $394d36	                BNE fat32                       ; No: assume it's FAT32
.394d2e		22 aa 4d 39	jsl $394daa	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394d32		90 0d		bcc $394d41	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d34		80 06		bra $394d3c	                BRA ret_success
.394d36		22 82 4e 39	jsl $394e82	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394d3a		90 05		bcc $394d41	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d3c		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394d3e		28		plp		                PLP
.394d3f		38		sec		                SEC
.394d40		6b		rtl		                RTL
.394d41		28		plp		pass_failure    PLP
.394d42		18		clc		                CLC
.394d43		6b		rtl		                RTL
.394d44						FDC_READ2FAT12
.394d44		8b		phb		                    PHB
.394d45		0b		phd		                    PHD
.394d46		08		php		                    PHP
.394d47		48		pha		                PHA             ; begin setdbr macro
.394d48		08		php		                PHP
.394d49		e2 20		sep #$20	                SEP #$20        ; set A short
.394d4b		a9 00		lda #$00	                LDA #0
.394d4d		48		pha		                PHA
.394d4e		ab		plb		                PLB
.394d4f		28		plp		                PLP
.394d50		68		pla		                PLA             ; end setdbr macro
.394d51		48		pha		                PHA             ; begin setdp macro
.394d52		08		php		                PHP
.394d53		c2 20		rep #$20	                REP #$20        ; set A long
.394d55		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d58		5b		tcd		                TCD
.394d59		28		plp		                PLP
.394d5a		68		pla		                PLA             ; end setdp macro
.394d5b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d5d		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394d60		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d62		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394d65		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d67		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394d69		85 02		sta $0322	                    STA BIOS_LBA
.394d6b		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394d6d		85 04		sta $0324	                    STA BIOS_LBA+2
.394d6f		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.394d73		b0 07		bcs $394d7c	                    BCS inc_sect2                   ; If success: start getting the second sector
.394d75		e2 20		sep #$20	                SEP #$20        ; set A short
.394d77		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d79		82 1c 00	brl $394d98	                    BRL ret_failure
.394d7c						inc_sect2
.394d7c		c2 20		rep #$20	                REP #$20        ; set A long
.394d7e		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394d80		d0 02		bne $394d84	                    BNE inc_buff_ptr
.394d82		e6 04		inc $0324	                    INC BIOS_LBA+2
.394d84		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d87		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d89		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d8c		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d8e		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.394d92		b0 0d		bcs $394da1	                    BCS ret_success                 ; If success, return success
.394d94		e2 20		sep #$20	                SEP #$20        ; set A short
.394d96		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d98						ret_failure
.394d98		e2 20		sep #$20	                SEP #$20        ; set A short
.394d9a		85 00		sta $0320	                    STA BIOS_STATUS
.394d9c		28		plp		                    PLP
.394d9d		2b		pld		                    PLD
.394d9e		ab		plb		                    PLB
.394d9f		18		clc		                    CLC
.394da0		6b		rtl		                    RTL
.394da1						ret_success
.394da1		e2 20		sep #$20	                SEP #$20        ; set A short
.394da3		64 00		stz $0320	                    STZ BIOS_STATUS
.394da5		28		plp		                    PLP
.394da6		2b		pld		                    PLD
.394da7		ab		plb		                    PLB
.394da8		38		sec		                    SEC
.394da9		6b		rtl		                    RTL
.394daa						DOS_FREECLUS12
.394daa		da		phx		                PHX
.394dab		8b		phb		                PHB
.394dac		0b		phd		                PHD
.394dad		08		php		                PHP
.394dae		48		pha		                PHA             ; begin setdbr macro
.394daf		08		php		                PHP
.394db0		e2 20		sep #$20	                SEP #$20        ; set A short
.394db2		a9 00		lda #$00	                LDA #0
.394db4		48		pha		                PHA
.394db5		ab		plb		                PLB
.394db6		28		plp		                PLP
.394db7		68		pla		                PLA             ; end setdbr macro
.394db8		48		pha		                PHA             ; begin setdp macro
.394db9		08		php		                PHP
.394dba		c2 20		rep #$20	                REP #$20        ; set A long
.394dbc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dbf		5b		tcd		                TCD
.394dc0		28		plp		                PLP
.394dc1		68		pla		                PLA             ; end setdp macro
.394dc2		c2 30		rep #$30	                REP #$30        ; set A&X long
.394dc4		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394dc7		85 10		sta $0330	                STA DOS_CLUS_ID
.394dc9		a9 00 00	lda #$0000	                LDA #0
.394dcc		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394dce		22 ba 4a 39	jsl $394aba	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394dd2		22 44 4d 39	jsl $394d44	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394dd6		b0 07		bcs $394ddf	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394dd8		e2 20		sep #$20	                SEP #$20        ; set A short
.394dda		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ddc		82 99 00	brl $394e78	                BRL ret_failure
.394ddf						start_of_fat
.394ddf		c2 30		rep #$30	                REP #$30        ; set A&X long
.394de1		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394de3		89 01 00	bit #$0001	                BIT #1
.394de6		d0 09		bne $394df1	                BNE is_odd
.394de8		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394dec		29 ff 0f	and #$0fff	                AND #$0FFF
.394def		80 08		bra $394df9	                BRA chk_available
.394df1		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394df5		4a		lsr a		                LSR A
.394df6		4a		lsr a		                LSR A
.394df7		4a		lsr a		                LSR A
.394df8		4a		lsr a		                LSR A
.394df9						chk_available
.394df9		85 28		sta $0348	                STA DOS_TEMP
.394dfb		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394dfe		f0 03		beq $394e03	                BEQ chk_found
.394e00		82 39 00	brl $394e3c	                BRL next_cluster                ; No: advance to the next cluster
.394e03		8a		txa		chk_found       TXA
.394e04		85 2a		sta $034a	                STA DOS_TEMP+2
.394e06		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394e08		89 01 00	bit #$0001	                BIT #1
.394e0b		d0 0d		bne $394e1a	                BNE is_odd2
.394e0d						is_even2
.394e0d		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394e11		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394e14		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e18		80 0b		bra $394e25	                BRA write_fat
.394e1a						is_odd2
.394e1a		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394e1e		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394e21		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e25		22 4c 4f 39	jsl $394f4c	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394e29		b0 07		bcs $394e32	                BCS ret_success                 ; If success: return success
.394e2b		e2 20		sep #$20	                SEP #$20        ; set A short
.394e2d		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394e2f		82 46 00	brl $394e78	                BRL ret_failure
.394e32						ret_success
.394e32		e2 20		sep #$20	                SEP #$20        ; set A short
.394e34		64 0e		stz $032e	                STZ DOS_STATUS
.394e36		28		plp		                PLP
.394e37		2b		pld		                PLD
.394e38		ab		plb		                PLB
.394e39		fa		plx		                PLX
.394e3a		38		sec		                SEC
.394e3b		6b		rtl		                RTL
.394e3c						next_cluster
.394e3c		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394e3e		d0 02		bne $394e42	                BNE calc_entry
.394e40		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e42		22 ba 4a 39	jsl $394aba	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394e46		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394e49		f0 03		beq $394e4e	                BEQ chk_end_of_fat
.394e4b		82 93 ff	brl $394de1	                BRL chk_cluster                 ; No: go back and check it too
.394e4e						chk_end_of_fat
.394e4e		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394e50		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394e54		d0 0f		bne $394e65	                BNE next_2
.394e56		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394e58		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394e5c		d0 07		bne $394e65	                BNE next_2                      ; No: get the next to sectors
.394e5e		e2 20		sep #$20	                SEP #$20        ; set A short
.394e60		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394e62		82 13 00	brl $394e78	                BRL ret_failure
.394e65						next_2
.394e65		22 44 4d 39	jsl $394d44	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394e69		90 06		bcc $394e71	                BCC fat_fail                    ; If failed: return error
.394e6b		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394e6e		82 70 ff	brl $394de1	                BRL chk_cluster                 ; And start checking from there
.394e71						fat_fail
.394e71		e2 20		sep #$20	                SEP #$20        ; set A short
.394e73		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e75		82 00 00	brl $394e78	                BRL ret_failure
.394e78						ret_failure
.394e78		e2 20		sep #$20	                SEP #$20        ; set A short
.394e7a		85 0e		sta $032e	                STA DOS_STATUS
.394e7c		28		plp		                PLP
.394e7d		2b		pld		                PLD
.394e7e		ab		plb		                PLB
.394e7f		fa		plx		                PLX
.394e80		18		clc		                CLC
.394e81		6b		rtl		                RTL
.394e82						DOS_FREECLUS32
.394e82		8b		phb		                PHB
.394e83		0b		phd		                PHD
.394e84		08		php		                PHP
.394e85		48		pha		                PHA             ; begin setdbr macro
.394e86		08		php		                PHP
.394e87		e2 20		sep #$20	                SEP #$20        ; set A short
.394e89		a9 00		lda #$00	                LDA #0
.394e8b		48		pha		                PHA
.394e8c		ab		plb		                PLB
.394e8d		28		plp		                PLP
.394e8e		68		pla		                PLA             ; end setdbr macro
.394e8f		48		pha		                PHA             ; begin setdp macro
.394e90		08		php		                PHP
.394e91		c2 20		rep #$20	                REP #$20        ; set A long
.394e93		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e96		5b		tcd		                TCD
.394e97		28		plp		                PLP
.394e98		68		pla		                PLA             ; end setdp macro
.394e99		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e9b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394e9e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ea0		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394ea3		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ea5		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394ea9		85 02		sta $0322	                STA BIOS_LBA
.394eab		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394eaf		85 04		sta $0324	                STA BIOS_LBA+2
.394eb1		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.394eb5		b0 07		bcs $394ebe	                BCS initial_entry               ; If OK: set the initial entry to check
.394eb7		e2 20		sep #$20	                SEP #$20        ; set A short
.394eb9		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394ebb		82 6b 00	brl $394f29	                BRL ret_failure
.394ebe						initial_entry
.394ebe		c2 20		rep #$20	                REP #$20        ; set A long
.394ec0		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394ec3		85 10		sta $0330	                STA DOS_CLUS_ID
.394ec5		a9 00 00	lda #$0000	                LDA #0
.394ec8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394eca		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394ecd		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394ed1		d0 06		bne $394ed9	                BNE next_entry                  ; No: move to the next entry
.394ed3		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394ed7		f0 36		beq $394f0f	                BEQ found_free                  ; Yes: go to allocate and return it
.394ed9		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394edb		d0 02		bne $394edf	                BNE inc_ptr
.394edd		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394edf		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394ee0		e8		inx		                INX
.394ee1		e8		inx		                INX
.394ee2		e8		inx		                INX
.394ee3		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394ee6		90 e5		bcc $394ecd	                BLT chk_entry                   ; No: check this entry
.394ee8		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394eea		d0 18		bne $394f04	                BNE get_block
.394eec		e6 04		inc $0324	                INC BIOS_LBA+2
.394eee		a5 04		lda $0324	                LDA BIOS_LBA+2
.394ef0		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394ef4		90 0e		bcc $394f04	                BLT get_block
.394ef6		a5 02		lda $0322	                LDA BIOS_LBA
.394ef8		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394efc		90 06		bcc $394f04	                BLT get_block
.394efe		e2 20		sep #$20	                SEP #$20        ; set A short
.394f00		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394f02		80 25		bra $394f29	                BRA ret_failure
.394f04		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394f08		90 1b		bcc $394f25	                BCC ret_fat_error               ; If error: throw a FAT error
.394f0a		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394f0d		80 be		bra $394ecd	                BRA chk_entry                   ; Check this entry
.394f0f						found_free
.394f0f		c2 20		rep #$20	                REP #$20        ; set A long
.394f11		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394f14		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394f18		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394f1b		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394f1f		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f23		b0 0d		bcs $394f32	                BCS ret_success                 ; If OK: return success
.394f25						ret_fat_error
.394f25		e2 20		sep #$20	                SEP #$20        ; set A short
.394f27		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394f29						ret_failure
.394f29		e2 20		sep #$20	                SEP #$20        ; set A short
.394f2b		85 0e		sta $032e	                STA DOS_STATUS
.394f2d		28		plp		                PLP
.394f2e		2b		pld		                PLD
.394f2f		ab		plb		                PLB
.394f30		18		clc		                CLC
.394f31		6b		rtl		                RTL
.394f32						ret_success
.394f32		e2 20		sep #$20	                SEP #$20        ; set A short
.394f34		64 0e		stz $032e	                STZ DOS_STATUS
.394f36		28		plp		                PLP
.394f37		2b		pld		                PLD
.394f38		ab		plb		                PLB
.394f39		38		sec		                SEC
.394f3a		6b		rtl		                RTL
.394f3b						DELCLUSTER
.394f3b		e2 20		sep #$20	                SEP #$20        ; set A short
.394f3d		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f41		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394f43		d0 04		bne $394f49	                BNE fat32                       ; No: assume it's FAT32
.394f45		5c 93 4f 39	jmp $394f93	fat12           JML DELCLUSTER12
.394f49		4c e1 4f	jmp $394fe1	fat32           JMP DELCLUSTER32
.394f4c						WRITEFAT12
.394f4c		8b		phb		                PHB
.394f4d		0b		phd		                PHD
.394f4e		48		pha		                PHA             ; begin setdbr macro
.394f4f		08		php		                PHP
.394f50		e2 20		sep #$20	                SEP #$20        ; set A short
.394f52		a9 00		lda #$00	                LDA #0
.394f54		48		pha		                PHA
.394f55		ab		plb		                PLB
.394f56		28		plp		                PLP
.394f57		68		pla		                PLA             ; end setdbr macro
.394f58		48		pha		                PHA             ; begin setdp macro
.394f59		08		php		                PHP
.394f5a		c2 20		rep #$20	                REP #$20        ; set A long
.394f5c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f5f		5b		tcd		                TCD
.394f60		28		plp		                PLP
.394f61		68		pla		                PLA             ; end setdp macro
.394f62		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f64		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394f67		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f69		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394f6c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f6e		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394f70		85 02		sta $0322	                STA BIOS_LBA
.394f72		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394f74		85 04		sta $0324	                STA BIOS_LBA+2
.394f76		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394f7a		90 14		bcc $394f90	                BCC done
.394f7c		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f7f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f81		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f84		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f86		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f88		d0 02		bne $394f8c	                BNE put_second
.394f8a		e6 04		inc $0324	                INC BIOS_LBA+2
.394f8c		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394f90		2b		pld		done            PLD
.394f91		ab		plb		                PLB
.394f92		6b		rtl		                RTL
.394f93						DELCLUSTER12
.394f93		8b		phb		                PHB
.394f94		0b		phd		                PHD
.394f95		08		php		                PHP
.394f96		48		pha		                PHA             ; begin setdbr macro
.394f97		08		php		                PHP
.394f98		e2 20		sep #$20	                SEP #$20        ; set A short
.394f9a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f9c		48		pha		                PHA
.394f9d		ab		plb		                PLB
.394f9e		28		plp		                PLP
.394f9f		68		pla		                PLA             ; end setdbr macro
.394fa0		48		pha		                PHA             ; begin setdp macro
.394fa1		08		php		                PHP
.394fa2		c2 20		rep #$20	                REP #$20        ; set A long
.394fa4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fa7		5b		tcd		                TCD
.394fa8		28		plp		                PLP
.394fa9		68		pla		                PLA             ; end setdp macro
.394faa		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fac		22 2d 4b 39	jsl $394b2d	                JSL FATFORCLUSTER12
.394fb0		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394fb1		89 01 00	bit #$0001	                BIT #1
.394fb4		d0 08		bne $394fbe	                BNE is_odd
.394fb6		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394fb9		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394fbc		80 06		bra $394fc4	                BRA save_update
.394fbe		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394fc1		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394fc4		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394fc7		22 4c 4f 39	jsl $394f4c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394fcb		b0 0b		bcs $394fd8	                BCS ret_success
.394fcd						ret_failure
.394fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.394fcf		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394fd1		85 0e		sta $032e	                STA DOS_STATUS
.394fd3		28		plp		                PLP
.394fd4		2b		pld		                PLD
.394fd5		ab		plb		                PLB
.394fd6		18		clc		                CLC
.394fd7		6b		rtl		                RTL
.394fd8						ret_success
.394fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.394fda		64 0e		stz $032e	                STZ DOS_STATUS
.394fdc		28		plp		                PLP
.394fdd		2b		pld		                PLD
.394fde		ab		plb		                PLB
.394fdf		38		sec		                SEC
.394fe0		6b		rtl		                RTL
.394fe1						DELCLUSTER32
.394fe1		8b		phb		                PHB
.394fe2		0b		phd		                PHD
.394fe3		08		php		                PHP
.394fe4		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fe6		48		pha		                PHA             ; begin setdbr macro
.394fe7		08		php		                PHP
.394fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.394fea		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fec		48		pha		                PHA
.394fed		ab		plb		                PLB
.394fee		28		plp		                PLP
.394fef		68		pla		                PLA             ; end setdbr macro
.394ff0		48		pha		                PHA             ; begin setdp macro
.394ff1		08		php		                PHP
.394ff2		c2 20		rep #$20	                REP #$20        ; set A long
.394ff4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ff7		5b		tcd		                TCD
.394ff8		28		plp		                PLP
.394ff9		68		pla		                PLA             ; end setdp macro
.394ffa		22 95 4b 39	jsl $394b95	                JSL FATFORCLUSTER32
.394ffe		a9 00 00	lda #$0000	                LDA #0
.395001		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.395004		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.395007		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.39500b		b0 0b		bcs $395018	                BCS ret_success
.39500d						ret_failure
.39500d		e2 20		sep #$20	                SEP #$20        ; set A short
.39500f		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.395011		85 0e		sta $032e	                STA DOS_STATUS
.395013		28		plp		                PLP
.395014		2b		pld		                PLD
.395015		ab		plb		                PLB
.395016		18		clc		                CLC
.395017		6b		rtl		                RTL
.395018						ret_success
.395018		e2 20		sep #$20	                SEP #$20        ; set A short
.39501a		64 0e		stz $032e	                STZ DOS_STATUS
.39501c		28		plp		                PLP
.39501d		2b		pld		                PLD
.39501e		ab		plb		                PLB
.39501f		38		sec		                SEC
.395020		6b		rtl		                RTL
.395021						DOS_APPENDCLUS
.395021		8b		phb		                PHB
.395022		0b		phd		                PHD
.395023		08		php		                PHP
.395024		48		pha		                PHA             ; begin setdbr macro
.395025		08		php		                PHP
.395026		e2 20		sep #$20	                SEP #$20        ; set A short
.395028		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39502a		48		pha		                PHA
.39502b		ab		plb		                PLB
.39502c		28		plp		                PLP
.39502d		68		pla		                PLA             ; end setdbr macro
.39502e		48		pha		                PHA             ; begin setdp macro
.39502f		08		php		                PHP
.395030		c2 20		rep #$20	                REP #$20        ; set A long
.395032		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395035		5b		tcd		                TCD
.395036		28		plp		                PLP
.395037		68		pla		                PLA             ; end setdp macro
.395038		c2 30		rep #$30	                REP #$30        ; set A&X long
.39503a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.39503c		48		pha		                PHA
.39503d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39503f		48		pha		                PHA
.395040		22 19 4d 39	jsl $394d19	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.395044		b0 09		bcs $39504f	                BCS save_cluster                ; If we got a cluster, write the data to it
.395046		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.395047		85 10		sta $0330	                STA DOS_CLUS_ID
.395049		68		pla		                PLA
.39504a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39504c		82 7d 00	brl $3950cc	                BRL pass_failure                ; Pass the failure back up the chain
.39504f		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.395051		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395054		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395056		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.395059		22 32 48 39	jsl $394832	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.39505d		90 e7		bcc $395046	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.39505f		68		pla		                PLA                             ; Restore the cluster of the file
.395060		85 10		sta $0330	                STA DOS_CLUS_ID
.395062		68		pla		                PLA
.395063		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395065		22 00 4c 39	jsl $394c00	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.395069		b0 fa		bcs $395065	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.39506b		e2 20		sep #$20	                SEP #$20        ; set A short
.39506d		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.395071		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.395073		d0 3d		bne $3950b2	                BNE fat32                       ; No: assume it's FAT32
.395075						fat12
.395075		c2 20		rep #$20	                REP #$20        ; set A long
.395077		22 ba 4a 39	jsl $394aba	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.39507b		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.39507d		89 01 00	bit #$0001	                BIT #1
.395080		d0 11		bne $395093	                BNE is_odd
.395082		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.395085		29 ff 0f	and #$0fff	                AND #$0FFF
.395088		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39508b		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39508e		29 00 f0	and #$f000	                AND #$F000
.395091		80 10		bra $3950a3	                BRA update_fat12
.395093		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.395096		0a		asl a		                ASL A
.395097		0a		asl a		                ASL A
.395098		0a		asl a		                ASL A
.395099		0a		asl a		                ASL A
.39509a		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39509d		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.3950a0		29 0f 00	and #$000f	                AND #$000F
.3950a3		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.3950a6		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3950a9		22 4c 4f 39	jsl $394f4c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3950ad		b0 22		bcs $3950d1	                BCS ret_success
.3950af		82 1a 00	brl $3950cc	                BRL pass_failure
.3950b2						fat32
.3950b2		c2 20		rep #$20	                REP #$20        ; set A long
.3950b4		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3950b7		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3950ba		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3950bd		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3950c0		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3950c4		b0 0b		bcs $3950d1	                BCS ret_success
.3950c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3950c8		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3950ca		85 0e		sta $032e	                STA DOS_STATUS
.3950cc		28		plp		pass_failure    PLP
.3950cd		2b		pld		                PLD
.3950ce		ab		plb		                PLB
.3950cf		18		clc		                CLC
.3950d0		6b		rtl		                RTL
.3950d1						ret_success
.3950d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3950d3		64 0e		stz $032e	                STZ DOS_STATUS
.3950d5		28		plp		                PLP
.3950d6		2b		pld		                PLD
.3950d7		ab		plb		                PLB
.3950d8		38		sec		                SEC
.3950d9		6b		rtl		                RTL
.3950da						BCD2BIN
.3950da		8b		phb		                PHB
.3950db		0b		phd		                PHD
.3950dc		08		php		                PHP
.3950dd		48		pha		                PHA             ; begin setdbr macro
.3950de		08		php		                PHP
.3950df		e2 20		sep #$20	                SEP #$20        ; set A short
.3950e1		a9 00		lda #$00	                LDA #0
.3950e3		48		pha		                PHA
.3950e4		ab		plb		                PLB
.3950e5		28		plp		                PLP
.3950e6		68		pla		                PLA             ; end setdbr macro
.3950e7		48		pha		                PHA             ; begin setdp macro
.3950e8		08		php		                PHP
.3950e9		c2 20		rep #$20	                REP #$20        ; set A long
.3950eb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950ee		5b		tcd		                TCD
.3950ef		28		plp		                PLP
.3950f0		68		pla		                PLA             ; end setdp macro
.3950f1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950f3		85 28		sta $0348	                STA DOS_TEMP
.3950f5		29 0f 00	and #$000f	                AND #$000F
.3950f8		85 2a		sta $034a	                STA DOS_TEMP+2
.3950fa		a5 28		lda $0348	                LDA DOS_TEMP
.3950fc		4a		lsr a		                LSR A
.3950fd		4a		lsr a		                LSR A
.3950fe		4a		lsr a		                LSR A
.3950ff		4a		lsr a		                LSR A
.395100		85 28		sta $0348	                STA DOS_TEMP
.395102		29 0f 00	and #$000f	                AND #$000F
.395105		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395109		a9 0a 00	lda #$000a	                LDA #10
.39510c		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395110		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395114		18		clc		                CLC
.395115		65 2a		adc $034a	                ADC DOS_TEMP+2
.395117		85 2a		sta $034a	                STA DOS_TEMP+2
.395119		a5 28		lda $0348	                LDA DOS_TEMP
.39511b		4a		lsr a		                LSR A
.39511c		4a		lsr a		                LSR A
.39511d		4a		lsr a		                LSR A
.39511e		4a		lsr a		                LSR A
.39511f		85 28		sta $0348	                STA DOS_TEMP
.395121		29 0f 00	and #$000f	                AND #$000F
.395124		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395128		a9 64 00	lda #$0064	                LDA #100
.39512b		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39512f		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395133		18		clc		                CLC
.395134		65 2a		adc $034a	                ADC DOS_TEMP+2
.395136		85 2a		sta $034a	                STA DOS_TEMP+2
.395138		a5 28		lda $0348	                LDA DOS_TEMP
.39513a		4a		lsr a		                LSR A
.39513b		4a		lsr a		                LSR A
.39513c		4a		lsr a		                LSR A
.39513d		4a		lsr a		                LSR A
.39513e		29 0f 00	and #$000f	                AND #$000F
.395141		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395145		a9 e8 03	lda #$03e8	                LDA #1000
.395148		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39514c		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395150		18		clc		                CLC
.395151		65 2a		adc $034a	                ADC DOS_TEMP+2
.395153		28		plp		                PLP
.395154		2b		pld		                PLD
.395155		ab		plb		                PLB
.395156		6b		rtl		                RTL
.395157						DOS_RTCCREATE
.395157		8b		phb		                PHB
.395158		0b		phd		                PHD
.395159		08		php		                PHP
.39515a		48		pha		                PHA             ; begin setdbr macro
.39515b		08		php		                PHP
.39515c		e2 20		sep #$20	                SEP #$20        ; set A short
.39515e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395160		48		pha		                PHA
.395161		ab		plb		                PLB
.395162		28		plp		                PLP
.395163		68		pla		                PLA             ; end setdbr macro
.395164		48		pha		                PHA             ; begin setdp macro
.395165		08		php		                PHP
.395166		c2 20		rep #$20	                REP #$20        ; set A long
.395168		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39516b		5b		tcd		                TCD
.39516c		28		plp		                PLP
.39516d		68		pla		                PLA             ; end setdp macro
.39516e		c2 10		rep #$10	                REP #$10        ; set X long
.395170		e2 20		sep #$20	                SEP #$20        ; set A short
.395172		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.395176		09 08		ora #$08	                ORA #%00001000
.395178		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39517c		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.395180		85 29		sta $0349	                STA DOS_TEMP+1
.395182		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.395186		85 28		sta $0348	                STA DOS_TEMP
.395188		c2 20		rep #$20	                REP #$20        ; set A long
.39518a		a5 28		lda $0348	                LDA DOS_TEMP
.39518c		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.395190		85 28		sta $0348	                STA DOS_TEMP
.395192		38		sec		                SEC                         ; Year is relative to 1980
.395193		e9 bc 07	sbc #$07bc	                SBC #1980
.395196		c2 20		rep #$20	                REP #$20        ; set A long
.395198		0a		asl a		                ASL A
.395199		0a		asl a		                ASL A
.39519a		0a		asl a		                ASL A
.39519b		0a		asl a		                ASL A
.39519c		0a		asl a		                ASL A
.39519d		0a		asl a		                ASL A
.39519e		0a		asl a		                ASL A
.39519f		0a		asl a		                ASL A
.3951a0		0a		asl a		                ASL A
.3951a1		29 00 fe	and #$fe00	                AND #$FE00
.3951a4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951a7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3951ab		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3951af		c2 20		rep #$20	                REP #$20        ; set A long
.3951b1		29 ff 00	and #$00ff	                AND #$00FF
.3951b4		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.3951b8		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3951bb		0a		asl a		                ASL A
.3951bc		0a		asl a		                ASL A
.3951bd		0a		asl a		                ASL A
.3951be		0a		asl a		                ASL A
.3951bf		0a		asl a		                ASL A
.3951c0		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3951c3		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951c6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951c8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3951cc		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3951d0		c2 20		rep #$20	                REP #$20        ; set A long
.3951d2		29 ff 00	and #$00ff	                AND #$00FF
.3951d5		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.3951d9		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3951dc		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951df		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951e1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3951e5		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.3951e9		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.3951eb		c2 20		rep #$20	                REP #$20        ; set A long
.3951ed		29 ff 00	and #$00ff	                AND #$00FF
.3951f0		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.3951f4		c2 20		rep #$20	                REP #$20        ; set A long
.3951f6		0a		asl a		                ASL A
.3951f7		0a		asl a		                ASL A
.3951f8		0a		asl a		                ASL A
.3951f9		0a		asl a		                ASL A
.3951fa		0a		asl a		                ASL A
.3951fb		0a		asl a		                ASL A
.3951fc		0a		asl a		                ASL A
.3951fd		0a		asl a		                ASL A
.3951fe		0a		asl a		                ASL A
.3951ff		0a		asl a		                ASL A
.395200		0a		asl a		                ASL A
.395201		29 00 f8	and #$f800	                AND #$F800
.395204		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395207		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395209		e2 20		sep #$20	                SEP #$20        ; set A short
.39520b		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.39520f		c2 20		rep #$20	                REP #$20        ; set A long
.395211		29 ff 00	and #$00ff	                AND #$00FF
.395214		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.395218		c2 20		rep #$20	                REP #$20        ; set A long
.39521a		0a		asl a		                ASL A
.39521b		0a		asl a		                ASL A
.39521c		0a		asl a		                ASL A
.39521d		0a		asl a		                ASL A
.39521e		0a		asl a		                ASL A
.39521f		29 e0 07	and #$07e0	                AND #$07E0
.395222		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395225		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395227		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395229		e2 20		sep #$20	                SEP #$20        ; set A short
.39522b		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39522f		c2 20		rep #$20	                REP #$20        ; set A long
.395231		29 ff 00	and #$00ff	                AND #$00FF
.395234		22 da 50 39	jsl $3950da	                JSL BCD2BIN                 ; Convert it to binary
.395238		c2 20		rep #$20	                REP #$20        ; set A long
.39523a		29 1f 00	and #$001f	                AND #$001F
.39523d		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395240		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395242		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395244		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395248		29 f7 00	and #$00f7	                AND #%11110111
.39524b		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39524f		28		plp		                PLP
.395250		2b		pld		                PLD
.395251		ab		plb		                PLB
.395252		6b		rtl		                RTL
.395253						DOS_CREATE
.395253		8b		phb		                PHB
.395254		0b		phd		                PHD
.395255		08		php		                PHP
.395256		48		pha		                PHA             ; begin setdbr macro
.395257		08		php		                PHP
.395258		e2 20		sep #$20	                SEP #$20        ; set A short
.39525a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39525c		48		pha		                PHA
.39525d		ab		plb		                PLB
.39525e		28		plp		                PLP
.39525f		68		pla		                PLA             ; end setdbr macro
.395260		48		pha		                PHA             ; begin setdp macro
.395261		08		php		                PHP
.395262		c2 20		rep #$20	                REP #$20        ; set A long
.395264		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395267		5b		tcd		                TCD
.395268		28		plp		                PLP
.395269		68		pla		                PLA             ; end setdp macro
.39526a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39526c		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.39526f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395271		85 28		sta $0348	                STA DOS_TEMP
.395273		c8		iny		                INY
.395274		c8		iny		                INY
.395275		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395277		85 2a		sta $034a	                STA DOS_TEMP+2
.395279		e2 20		sep #$20	                SEP #$20        ; set A short
.39527b		a0 00 00	ldy #$0000	                LDY #0
.39527e		a2 00 00	ldx #$0000	                LDX #0
.395281		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.395283		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.395285		f0 04		beq $39528b	                BEQ find_file                   ; If it's NULL, we're done
.395287		e8		inx		                INX
.395288		c8		iny		                INY
.395289		80 f6		bra $395281	                BRA path_loop
.39528b		22 43 49 39	jsl $394943	find_file       JSL DOS_PARSE_PATH
.39528f		22 db 49 39	jsl $3949db	                JSL DOS_FINDFILE
.395293		90 07		bcc $39529c	                BCC set_device
.395295		e2 20		sep #$20	                SEP #$20        ; set A short
.395297		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.395299		82 d2 00	brl $39536e	                BRL ret_failure
.39529c						set_device
.39529c		e2 20		sep #$20	                SEP #$20        ; set A short
.39529e		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3952a1		a5 01		lda $0321	                LDA BIOS_DEV
.3952a3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952a5						validate_name
.3952a5		22 19 4d 39	jsl $394d19	                JSL DOS_FREECLUS
.3952a9		b0 03		bcs $3952ae	                BCS save_data
.3952ab		82 c4 00	brl $395372	                BRL pass_failure
.3952ae						save_data
.3952ae		c2 20		rep #$20	                REP #$20        ; set A long
.3952b0		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3952b3		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3952b5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952b7		c8		iny		                INY
.3952b8		c8		iny		                INY
.3952b9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952bb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952bd		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3952c0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952c2		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952c4		c8		iny		                INY
.3952c5		c8		iny		                INY
.3952c6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952c8		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952ca		22 32 48 39	jsl $394832	                JSL DOS_PUTCLUSTER
.3952ce		b0 00		bcs $3952d0	                BCS find_dir
.3952d0						find_dir
.3952d0		c2 20		rep #$20	                REP #$20        ; set A long
.3952d2		22 6d 43 39	jsl $39436d	                JSL DOS_DIRFINDFREE
.3952d6		b0 1a		bcs $3952f2	                BCS set_entry
.3952d8		c2 20		rep #$20	                REP #$20        ; set A long
.3952da		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3952dd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3952df		85 10		sta $0330	                STA DOS_CLUS_ID
.3952e1		c8		iny		                INY
.3952e2		c8		iny		                INY
.3952e3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952e5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952e7		22 e1 4f 39	jsl $394fe1	                JSL DELCLUSTER32                ; Delete the cluster
.3952eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3952ed		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3952ef		82 7c 00	brl $39536e	                BRL ret_failure
.3952f2						set_entry
.3952f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3952f4		a0 00 00	ldy #$0000	                LDY #0
.3952f7		a9 00		lda #$00	                LDA #0                          ; NULL
.3952f9		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3952fb		c8		iny		                INY
.3952fc		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.3952ff		d0 f8		bne $3952f9	                BNE copy_dir_loop
.395301		a0 00 00	ldy #$0000	                LDY #0
.395304		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395307		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395309		c8		iny		                INY
.39530a		c0 0b 00	cpy #$000b	                CPY #11
.39530d		d0 f5		bne $395304	                BNE name_loop
.39530f		c2 20		rep #$20	                REP #$20        ; set A long
.395311		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395314		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395316		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395319		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39531b		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39531e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395320		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395323		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395325		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395328		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39532a		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39532d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39532f		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395332		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395334		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395337		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395339		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39533c		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.39533f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395341		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395344		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395346		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395349		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39534b		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39534e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395350		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395353		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395355		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395358		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39535a		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.39535d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39535f		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395362		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395364		c2 20		rep #$20	                REP #$20        ; set A long
.395366		22 2b 44 39	jsl $39442b	                JSL DOS_DIRWRITE
.39536a		b0 0b		bcs $395377	                BCS ret_success
.39536c		80 04		bra $395372	                BRA pass_failure
.39536e						ret_failure
.39536e		e2 20		sep #$20	                SEP #$20        ; set A short
.395370		85 0e		sta $032e	                STA DOS_STATUS
.395372		28		plp		pass_failure    PLP
.395373		2b		pld		                PLD
.395374		ab		plb		                PLB
.395375		18		clc		                CLC
.395376		6b		rtl		                RTL
.395377						ret_success
.395377		e2 20		sep #$20	                SEP #$20        ; set A short
.395379		64 0e		stz $032e	                STZ DOS_STATUS
.39537b		28		plp		                PLP
.39537c		2b		pld		                PLD
.39537d		ab		plb		                PLB
.39537e		38		sec		                SEC
.39537f		6b		rtl		                RTL
.395380						DOS_COPYPATH
.395380		da		phx		                PHX
.395381		5a		phy		                PHY
.395382		8b		phb		                PHB
.395383		0b		phd		                PHD
.395384		08		php		                PHP
.395385		48		pha		                PHA             ; begin setdbr macro
.395386		08		php		                PHP
.395387		e2 20		sep #$20	                SEP #$20        ; set A short
.395389		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39538b		48		pha		                PHA
.39538c		ab		plb		                PLB
.39538d		28		plp		                PLP
.39538e		68		pla		                PLA             ; end setdbr macro
.39538f		48		pha		                PHA             ; begin setdp macro
.395390		08		php		                PHP
.395391		c2 20		rep #$20	                REP #$20        ; set A long
.395393		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395396		5b		tcd		                TCD
.395397		28		plp		                PLP
.395398		68		pla		                PLA             ; end setdp macro
.395399		c2 30		rep #$30	                REP #$30        ; set A&X long
.39539b		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.39539e		a2 00 00	ldx #$0000	                LDX #0
.3953a1		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3953a3		e8		inx		                INX
.3953a4		e8		inx		                INX
.3953a5		e0 00 01	cpx #$0100	                CPX #256
.3953a8		d0 f7		bne $3953a1	                BNE clr_loop
.3953aa		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3953ac		d0 04		bne $3953b2	                BNE get_path            ; No: attempt to fetch the path
.3953ae		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3953b0		f0 27		beq $3953d9	                BEQ done                ; Yes: return an empty buffer
.3953b2		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3953b5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953b7		85 28		sta $0348	                STA DOS_TEMP
.3953b9		c8		iny		                INY
.3953ba		c8		iny		                INY
.3953bb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953bd		85 2a		sta $034a	                STA DOS_TEMP+2
.3953bf		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3953c1		d0 04		bne $3953c7	                BNE start_copy          ; No: start copying it
.3953c3		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3953c5		f0 12		beq $3953d9	                BEQ done                ; Yes: return an empty buffer
.3953c7						start_copy
.3953c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3953c9		a2 00 00	ldx #$0000	                LDX #0
.3953cc		a0 00 00	ldy #$0000	                LDY #0
.3953cf		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3953d1		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3953d3		f0 04		beq $3953d9	                BEQ done
.3953d5		e8		inx		                INX
.3953d6		c8		iny		                INY
.3953d7		d0 f6		bne $3953cf	                BNE loop
.3953d9		28		plp		done            PLP
.3953da		2b		pld		                PLD
.3953db		ab		plb		                PLB
.3953dc		7a		ply		                PLY
.3953dd		fa		plx		                PLX
.3953de		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.3953df						DOS_TEST
.3953df		8b		phb		                PHB
.3953e0		0b		phd		                PHD
.3953e1		08		php		                PHP
.3953e2		48		pha		                PHA             ; begin setdbr macro
.3953e3		08		php		                PHP
.3953e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3953e6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953e8		48		pha		                PHA
.3953e9		ab		plb		                PLB
.3953ea		28		plp		                PLP
.3953eb		68		pla		                PLA             ; end setdbr macro
.3953ec		48		pha		                PHA             ; begin setdp macro
.3953ed		08		php		                PHP
.3953ee		c2 20		rep #$20	                REP #$20        ; set A long
.3953f0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953f3		5b		tcd		                TCD
.3953f4		28		plp		                PLP
.3953f5		68		pla		                PLA             ; end setdp macro
.3953f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953f8		a9 1e 54	lda #$541e	                LDA #<>src_file
.3953fb		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3953ff		a9 39 00	lda #$0039	                LDA #`src_file
.395402		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395406		a9 2b 54	lda #$542b	                LDA #<>dst_file
.395409		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39540d		a9 39 00	lda #$0039	                LDA #`dst_file
.395410		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395414		22 cd 5a 39	jsl $395acd	                JSL IF_COPY
.395418		b0 00		bcs $39541a	                BCS done
.39541a		28		plp		done            PLP
.39541b		2b		pld		                PLD
.39541c		ab		plb		                PLB
.39541d		6b		rtl		                RTL
>39541e		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395426		2e 62 61 73 00
>39542b		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395433		32 2e 62 61 73 00
.395439						IF_OPEN
.395439		da		phx		                PHX
.39543a		5a		phy		                PHY
.39543b		0b		phd		                PHD
.39543c		8b		phb		                PHB
.39543d		08		php		                PHP
.39543e		48		pha		                PHA             ; begin setdbr macro
.39543f		08		php		                PHP
.395440		e2 20		sep #$20	                SEP #$20        ; set A short
.395442		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395444		48		pha		                PHA
.395445		ab		plb		                PLB
.395446		28		plp		                PLP
.395447		68		pla		                PLA             ; end setdbr macro
.395448		48		pha		                PHA             ; begin setdp macro
.395449		08		php		                PHP
.39544a		c2 20		rep #$20	                REP #$20        ; set A long
.39544c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39544f		5b		tcd		                TCD
.395450		28		plp		                PLP
.395451		68		pla		                PLA             ; end setdp macro
.395452		e2 20		sep #$20	                SEP #$20        ; set A short
.395454		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395457		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395459		89 38		bit #$38	                BIT #FD_STAT_OPEN
.39545b		f0 05		beq $395462	                BEQ ok_to_open
.39545d		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.39545f		82 1c 05	brl $39597e	                BRL IF_FAILURE
.395462		22 80 53 39	jsl $395380	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395466		22 db 49 39	jsl $3949db	                JSL DOS_FINDFILE                ; Attempt to find the file
.39546a		b0 03		bcs $39546f	                BCS is_found                    ; If OK: we found the file
.39546c		82 13 05	brl $395982	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.39546f						is_found
.39546f		e2 20		sep #$20	                SEP #$20        ; set A short
.395471		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395474		a5 01		lda $0321	                LDA BIOS_DEV
.395476		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395478		c2 20		rep #$20	                REP #$20        ; set A long
.39547a		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.39547d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39547f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.395481		c8		iny		                INY
.395482		c8		iny		                INY
.395483		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395485		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395487		22 f5 47 39	jsl $3947f5	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.39548b		b0 03		bcs $395490	                BCS read_cluster
.39548d		82 f2 04	brl $395982	                BRL IF_PASSFAILURE
.395490		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.395493		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395495		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395497		c8		iny		                INY
.395498		c8		iny		                INY
.395499		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39549b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39549d		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3954a0		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954a2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954a4		c8		iny		                INY
.3954a5		c8		iny		                INY
.3954a6		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954a8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954aa		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3954ad		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954af		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3954b2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954b4		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3954b7		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954b9		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3954bc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954be		e2 20		sep #$20	                SEP #$20        ; set A short
.3954c0		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3954c3		a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3954c5		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3954c7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954c9		82 bd 04	brl $395989	                BRL IF_SUCCESS
.3954cc						IF_CREATE
.3954cc		da		phx		                PHX
.3954cd		5a		phy		                PHY
.3954ce		0b		phd		                PHD
.3954cf		8b		phb		                PHB
.3954d0		08		php		                PHP
.3954d1		48		pha		                PHA             ; begin setdbr macro
.3954d2		08		php		                PHP
.3954d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3954d5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954d7		48		pha		                PHA
.3954d8		ab		plb		                PLB
.3954d9		28		plp		                PLP
.3954da		68		pla		                PLA             ; end setdbr macro
.3954db		48		pha		                PHA             ; begin setdp macro
.3954dc		08		php		                PHP
.3954dd		c2 20		rep #$20	                REP #$20        ; set A long
.3954df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954e2		5b		tcd		                TCD
.3954e3		28		plp		                PLP
.3954e4		68		pla		                PLA             ; end setdp macro
.3954e5		22 53 52 39	jsl $395253	                JSL DOS_CREATE                  ; Attempt to create the file
.3954e9		90 18		bcc $395503	                BCC pass_failure                ; If it fails: pass the failure up the chain
.3954eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3954ed		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.3954f0		a9 00 00	lda #$0000	                LDA #0
.3954f3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f5		c8		iny		                INY
.3954f6		c8		iny		                INY
.3954f7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3954fb		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.3954fe		a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395500		82 86 04	brl $395989	                BRL IF_SUCCESS
.395503		82 78 04	brl $39597e	pass_failure    BRL IF_FAILURE
.395506						IF_CLOSE
.395506		da		phx		                PHX
.395507		5a		phy		                PHY
.395508		0b		phd		                PHD
.395509		8b		phb		                PHB
.39550a		08		php		                PHP
.39550b		48		pha		                PHA             ; begin setdbr macro
.39550c		08		php		                PHP
.39550d		e2 20		sep #$20	                SEP #$20        ; set A short
.39550f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395511		48		pha		                PHA
.395512		ab		plb		                PLB
.395513		28		plp		                PLP
.395514		68		pla		                PLA             ; end setdbr macro
.395515		48		pha		                PHA             ; begin setdp macro
.395516		08		php		                PHP
.395517		c2 20		rep #$20	                REP #$20        ; set A long
.395519		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39551c		5b		tcd		                TCD
.39551d		28		plp		                PLP
.39551e		68		pla		                PLA             ; end setdp macro
.39551f		e2 20		sep #$20	                SEP #$20        ; set A short
.395521		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395524		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395526		89 02		bit #$02	                BIT #FD_STAT_WRITE
.395528		f0 09		beq $395533	                BEQ set_flag                    ; No, just mark it closed
.39552a		22 9f 55 39	jsl $39559f	                JSL IF_WRITE                    ; Attempt to write the cluster
.39552e		b0 03		bcs $395533	                BCS set_flag
.395530		82 4f 04	brl $395982	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395533		22 83 5a 39	jsl $395a83	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395537		82 4f 04	brl $395989	                BRL IF_SUCCESS
.39553a						IF_READ
.39553a		da		phx		                PHX
.39553b		5a		phy		                PHY
.39553c		0b		phd		                PHD
.39553d		8b		phb		                PHB
.39553e		08		php		                PHP
.39553f		48		pha		                PHA             ; begin setdbr macro
.395540		08		php		                PHP
.395541		e2 20		sep #$20	                SEP #$20        ; set A short
.395543		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395545		48		pha		                PHA
.395546		ab		plb		                PLB
.395547		28		plp		                PLP
.395548		68		pla		                PLA             ; end setdbr macro
.395549		48		pha		                PHA             ; begin setdp macro
.39554a		08		php		                PHP
.39554b		c2 20		rep #$20	                REP #$20        ; set A long
.39554d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395550		5b		tcd		                TCD
.395551		28		plp		                PLP
.395552		68		pla		                PLA             ; end setdp macro
.395553		c2 10		rep #$10	                REP #$10        ; set X long
.395555		e2 20		sep #$20	                SEP #$20        ; set A short
.395557						get_dev
.395557		e2 20		sep #$20	                SEP #$20        ; set A short
.395559		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39555c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39555e		85 01		sta $0321	                STA BIOS_DEV
.395560		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395564		c2 20		rep #$20	                REP #$20        ; set A long
.395566		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395569		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556b		85 10		sta $0330	                STA DOS_CLUS_ID
.39556d		c8		iny		                INY
.39556e		c8		iny		                INY
.39556f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395571		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395573		22 00 4c 39	jsl $394c00	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395577		90 13		bcc $39558c	                BCC pass_failure                ; If not OK: pass the failure up the chain
.395579		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39557c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39557e		85 1c		sta $033c	                STA DOS_BUFF_PTR
.395580		c8		iny		                INY
.395581		c8		iny		                INY
.395582		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395584		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395586		22 f5 47 39	jsl $3947f5	                JSL DOS_GETCLUSTER              ; Get the cluster
.39558a		b0 03		bcs $39558f	                BCS ret_success                 ; If ok: return success
.39558c						pass_failure
.39558c		82 f3 03	brl $395982	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39558f		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.395592		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395594		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395596		c8		iny		                INY
.395597		c8		iny		                INY
.395598		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39559a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39559c		82 ea 03	brl $395989	                BRL IF_SUCCESS
.39559f						IF_WRITE
.39559f		da		phx		                PHX
.3955a0		5a		phy		                PHY
.3955a1		0b		phd		                PHD
.3955a2		8b		phb		                PHB
.3955a3		08		php		                PHP
.3955a4		48		pha		                PHA             ; begin setdbr macro
.3955a5		08		php		                PHP
.3955a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3955a8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955aa		48		pha		                PHA
.3955ab		ab		plb		                PLB
.3955ac		28		plp		                PLP
.3955ad		68		pla		                PLA             ; end setdbr macro
.3955ae		48		pha		                PHA             ; begin setdp macro
.3955af		08		php		                PHP
.3955b0		c2 20		rep #$20	                REP #$20        ; set A long
.3955b2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955b5		5b		tcd		                TCD
.3955b6		28		plp		                PLP
.3955b7		68		pla		                PLA             ; end setdp macro
.3955b8		c2 10		rep #$10	                REP #$10        ; set X long
.3955ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3955bc		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3955bf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955c1		85 01		sta $0321	                STA BIOS_DEV
.3955c3		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3955c7		c2 20		rep #$20	                REP #$20        ; set A long
.3955c9		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3955cc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955ce		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3955d0		c8		iny		                INY
.3955d1		c8		iny		                INY
.3955d2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955d4		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3955d6		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3955d9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955db		85 10		sta $0330	                STA DOS_CLUS_ID
.3955dd		c8		iny		                INY
.3955de		c8		iny		                INY
.3955df		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955e1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955e3		d0 1a		bne $3955ff	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3955e5		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955e7		d0 16		bne $3955ff	                BNE rewrite_cluster
.3955e9		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3955ec		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955ee		85 10		sta $0330	                STA DOS_CLUS_ID
.3955f0		c8		iny		                INY
.3955f1		c8		iny		                INY
.3955f2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955f4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955f6		22 21 50 39	jsl $395021	                JSL DOS_APPENDCLUS              ; Append the cluster
.3955fa		b0 0c		bcs $395608	                BCS ret_success                 ; If OK: return success
.3955fc		82 83 03	brl $395982	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955ff		22 32 48 39	jsl $394832	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395603		b0 03		bcs $395608	                BCS ret_success                 ; If ok: return success
.395605		82 7a 03	brl $395982	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395608		82 7e 03	brl $395989	ret_success     BRL IF_SUCCESS
.39560b						IF_DIROPEN
.39560b		da		phx		                PHX
.39560c		5a		phy		                PHY
.39560d		0b		phd		                PHD
.39560e		8b		phb		                PHB
.39560f		08		php		                PHP
.395610		48		pha		                PHA             ; begin setdbr macro
.395611		08		php		                PHP
.395612		e2 20		sep #$20	                SEP #$20        ; set A short
.395614		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395616		48		pha		                PHA
.395617		ab		plb		                PLB
.395618		28		plp		                PLP
.395619		68		pla		                PLA             ; end setdbr macro
.39561a		48		pha		                PHA             ; begin setdp macro
.39561b		08		php		                PHP
.39561c		c2 20		rep #$20	                REP #$20        ; set A long
.39561e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395621		5b		tcd		                TCD
.395622		28		plp		                PLP
.395623		68		pla		                PLA             ; end setdp macro
.395624		c2 30		rep #$30	                REP #$30        ; set A&X long
.395626		22 80 53 39	jsl $395380	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.39562a		22 43 49 39	jsl $394943	                JSL DOS_PARSE_PATH          ; Parse the path
.39562e		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395632		b0 03		bcs $395637	                BCS get_root_dir            ; If successful: get the root directory
.395634		82 4b 03	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395637						get_root_dir
.395637		c2 30		rep #$30	                REP #$30        ; set A&X long
.395639		22 12 42 39	jsl $394212	                JSL DOS_DIROPEN
.39563d		b0 03		bcs $395642	                BCS success
.39563f		82 40 03	brl $395982	                BRL IF_PASSFAILURE
.395642		82 44 03	brl $395989	success         BRL IF_SUCCESS
.395645						IF_DIRNEXT
.395645		5c ac 42 39	jmp $3942ac	                JML DOS_DIRNEXT
.395649						IF_DELETE
.395649		da		phx		                PHX
.39564a		5a		phy		                PHY
.39564b		0b		phd		                PHD
.39564c		8b		phb		                PHB
.39564d		08		php		                PHP
.39564e		48		pha		                PHA             ; begin setdbr macro
.39564f		08		php		                PHP
.395650		e2 20		sep #$20	                SEP #$20        ; set A short
.395652		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395654		48		pha		                PHA
.395655		ab		plb		                PLB
.395656		28		plp		                PLP
.395657		68		pla		                PLA             ; end setdbr macro
.395658		48		pha		                PHA             ; begin setdp macro
.395659		08		php		                PHP
.39565a		c2 20		rep #$20	                REP #$20        ; set A long
.39565c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39565f		5b		tcd		                TCD
.395660		28		plp		                PLP
.395661		68		pla		                PLA             ; end setdp macro
.395662		c2 30		rep #$30	                REP #$30        ; set A&X long
.395664		22 db 49 39	jsl $3949db	                JSL DOS_FINDFILE
.395668		b0 03		bcs $39566d	                BCS get_first_clus
.39566a		82 15 03	brl $395982	                BRL IF_PASSFAILURE
.39566d						get_first_clus
.39566d		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395670		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395672		85 10		sta $0330	                STA DOS_CLUS_ID
.395674		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395677		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395679		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39567b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39567d		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395680		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395682		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395685		22 00 4c 39	jsl $394c00	del_loop        JSL NEXTCLUSTER
.395689		90 2f		bcc $3956ba	                BCC del_one
.39568b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39568d		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.395690		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395692		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.395695		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395698		85 10		sta $0330	                STA DOS_CLUS_ID
.39569a		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39569d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39569f		22 e1 4f 39	jsl $394fe1	                JSL DELCLUSTER32
.3956a3		b0 03		bcs $3956a8	                BCS go_next
.3956a5		82 da 02	brl $395982	                BRL IF_PASSFAILURE
.3956a8						go_next
.3956a8		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3956ab		85 10		sta $0330	                STA DOS_CLUS_ID
.3956ad		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3956b0		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3956b3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956b5		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3956b8		80 cb		bra $395685	                BRA del_loop
.3956ba						del_one
.3956ba		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3956bd		85 10		sta $0330	                STA DOS_CLUS_ID
.3956bf		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3956c2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956c4		22 3b 4f 39	jsl $394f3b	                JSL DELCLUSTER
.3956c8		b0 03		bcs $3956cd	                BCS free_dir_entry
.3956ca		82 b5 02	brl $395982	                BRL IF_PASSFAILURE
.3956cd						free_dir_entry
.3956cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3956cf		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3956d2		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3956d4		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3956d6		22 2b 44 39	jsl $39442b	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3956da		b0 03		bcs $3956df	                BCS ret_success
.3956dc		82 a3 02	brl $395982	                BRL IF_PASSFAILURE
.3956df		82 a7 02	brl $395989	ret_success     BRL IF_SUCCESS
.3956e2						IF_DIRREAD
.3956e2		da		phx		                PHX
.3956e3		5a		phy		                PHY
.3956e4		0b		phd		                PHD
.3956e5		8b		phb		                PHB
.3956e6		08		php		                PHP
.3956e7		48		pha		                PHA             ; begin setdbr macro
.3956e8		08		php		                PHP
.3956e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3956eb		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956ed		48		pha		                PHA
.3956ee		ab		plb		                PLB
.3956ef		28		plp		                PLP
.3956f0		68		pla		                PLA             ; end setdbr macro
.3956f1		48		pha		                PHA             ; begin setdp macro
.3956f2		08		php		                PHP
.3956f3		c2 20		rep #$20	                REP #$20        ; set A long
.3956f5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956f8		5b		tcd		                TCD
.3956f9		28		plp		                PLP
.3956fa		68		pla		                PLA             ; end setdp macro
.3956fb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956fd		22 db 49 39	jsl $3949db	                JSL DOS_FINDFILE
.395701		b0 03		bcs $395706	                BCS success
.395703		82 78 02	brl $39597e	                BRL IF_FAILURE
.395706		82 80 02	brl $395989	success         BRL IF_SUCCESS
.395709						IF_DIRWRITE
.395709		5c 2b 44 39	jmp $39442b	                JML DOS_DIRWRITE
.39570d						IF_LOAD
.39570d		da		phx		                PHX
.39570e		5a		phy		                PHY
.39570f		0b		phd		                PHD
.395710		8b		phb		                PHB
.395711		08		php		                PHP
.395712		48		pha		                PHA             ; begin setdbr macro
.395713		08		php		                PHP
.395714		e2 20		sep #$20	                SEP #$20        ; set A short
.395716		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395718		48		pha		                PHA
.395719		ab		plb		                PLB
.39571a		28		plp		                PLP
.39571b		68		pla		                PLA             ; end setdbr macro
.39571c		48		pha		                PHA             ; begin setdp macro
.39571d		08		php		                PHP
.39571e		c2 20		rep #$20	                REP #$20        ; set A long
.395720		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395723		5b		tcd		                TCD
.395724		28		plp		                PLP
.395725		68		pla		                PLA             ; end setdp macro
.395726		c2 30		rep #$30	                REP #$30        ; set A&X long
.395728		22 39 54 39	jsl $395439	                JSL IF_OPEN
.39572c		b0 03		bcs $395731	                BCS setup                   ; If success: start setting things up
.39572e		82 51 02	brl $395982	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395731						setup
.395731		c2 20		rep #$20	                REP #$20        ; set A long
.395733		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395736		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395738		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39573a		c8		iny		                INY
.39573b		c8		iny		                INY
.39573c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39573e		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395740		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395743		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395745		85 30		sta $0350	                STA DOS_SRC_PTR
.395747		c8		iny		                INY
.395748		c8		iny		                INY
.395749		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39574b		85 32		sta $0352	                STA DOS_SRC_PTR+2
.39574d		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.39574f		c9 40 00	cmp #$0040	                CMP #$0040
.395752		b0 04		bcs $395758	                BGE load_by_type            ; No: try to load it by type
.395754		5c 33 58 39	jmp $395833	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395758		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.39575b		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.39575e						type_loop
.39575e		e2 20		sep #$20	                SEP #$20        ; set A short
.395760		bf a4 57 39	lda $3957a4,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395764		f0 37		beq $39579d	                BEQ no_match                ; If NULL... we didn't get a match
.395766		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395769		d0 28		bne $395793	                BNE next_entry              ; If they don't match, try the next entry
.39576b		bf a5 57 39	lda $3957a5,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.39576f		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395772		d0 1f		bne $395793	                BNE next_entry              ; If they don't match, try the next entry
.395774		bf a6 57 39	lda $3957a6,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395778		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.39577b		d0 16		bne $395793	                BNE next_entry              ; If they don't match, try the next entry
.39577d		c2 20		rep #$20	                REP #$20        ; set A long
.39577f		bf a7 57 39	lda $3957a7,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.395783		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.395785		e2 20		sep #$20	                SEP #$20        ; set A short
.395787		bf a9 57 39	lda $3957a9,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.39578b		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.39578d		a2 00 00	ldx #$0000	                LDX #0
.395790		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.395793						next_entry
.395793		c2 30		rep #$30	                REP #$30        ; set A&X long
.395795		8a		txa		                TXA
.395796		18		clc		                CLC
.395797		69 06 00	adc #$0006	                ADC #6
.39579a		aa		tax		                TAX
.39579b		80 c1		bra $39575e	                BRA type_loop               ; And check it against the file
.39579d						no_match
.39579d		e2 20		sep #$20	                SEP #$20        ; set A short
.39579f		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3957a1		82 da 01	brl $39597e	                BRL IF_FAILURE
>3957a4		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3957a7		ab 57				                .word <>IF_LOADPGX
>3957a9		39				                .byte `IF_LOADPGX
>3957aa		00				                .byte 0
.3957ab						IF_LOADPGX
.3957ab		c2 10		rep #$10	                REP #$10        ; set X long
.3957ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3957af		a0 00 00	ldy #$0000	                LDY #0
.3957b2		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3957b4		c9 50		cmp #$50	                CMP #'P'
.3957b6		d0 15		bne $3957cd	                BNE fail_sig                        ; If not found, fail
.3957b8		c8		iny		                INY
.3957b9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957bb		c9 47		cmp #$47	                CMP #'G'
.3957bd		d0 0e		bne $3957cd	                BNE fail_sig
.3957bf		c8		iny		                INY
.3957c0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957c2		c9 58		cmp #$58	                CMP #'X'
.3957c4		d0 07		bne $3957cd	                BNE fail_sig
.3957c6		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3957c7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957c9		c9 01		cmp #$01	                CMP #$01
.3957cb		f0 17		beq $3957e4	                BEQ get_dest                        ; All passes: go to get the destination address
.3957cd		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3957cf		22 7e 59 39	jsl $39597e	                JSL IF_FAILURE
.3957d3						adjust_size
.3957d3		c2 20		rep #$20	                REP #$20        ; set A long
.3957d5		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.3957d6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957d8		e9 08 00	sbc #$0008	                SBC #8
.3957db		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957dd		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957df		e9 00 00	sbc #$0000	                SBC #0
.3957e2		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957e4						get_dest
.3957e4		c2 20		rep #$20	                REP #$20        ; set A long
.3957e6		c8		iny		                INY
.3957e7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3957e9		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3957eb		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3957ed		c8		iny		                INY
.3957ee		c8		iny		                INY
.3957ef		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3957f1		85 36		sta $0356	                STA DOS_DST_PTR+2
.3957f3		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3957f5		c8		iny		                INY                                 ; Point to the first data byte
.3957f6		c8		iny		                INY
.3957f7						copy_loop
.3957f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3957f9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3957fb		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3957fd		c2 20		rep #$20	                REP #$20        ; set A long
.3957ff		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395801		d0 02		bne $395805	                BNE dec_file_size
.395803		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395805		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395806		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395808		e9 01 00	sbc #$0001	                SBC #1
.39580b		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39580d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39580f		e9 00 00	sbc #$0000	                SBC #0
.395812		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395814		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395816		d0 04		bne $39581c	                BNE next_byte
.395818		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39581a		f0 14		beq $395830	                BEQ done                            ; Yes: we're done
.39581c		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39581d		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395820		d0 d5		bne $3957f7	                BNE copy_loop                       ; No: keep copying
.395822		22 04 4d 39	jsl $394d04	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395826		b0 03		bcs $39582b	                BCS next_cluster
.395828		82 57 01	brl $395982	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.39582b		a0 00 00	ldy #$0000	next_cluster    LDY #0
.39582e		80 c7		bra $3957f7	                BRA copy_loop                       ; Go back to copying
.395830		82 56 01	brl $395989	done            BRL IF_SUCCESS
.395833						IF_LOADRAW
.395833		c2 30		rep #$30	                REP #$30        ; set A&X long
.395835		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395838						copy_loop
.395838		e2 20		sep #$20	                SEP #$20        ; set A short
.39583a		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39583c		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39583e		c2 20		rep #$20	                REP #$20        ; set A long
.395840		38		sec		                SEC                         ; Count down the number of bytes left
.395841		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395843		e9 01 00	sbc #$0001	                SBC #1
.395846		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395848		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39584a		e9 00 00	sbc #$0000	                SBC #0
.39584d		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39584f		d0 04		bne $395855	                BNE continue
.395851		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395853		f0 1b		beq $395870	                BEQ close_file              ; If not: we're done
.395855		c8		iny		continue        INY
.395856		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395859		d0 dd		bne $395838	                BNE copy_loop               ; No: keep processing the bytes
.39585b		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.39585c		a5 34		lda $0354	                LDA DOS_DST_PTR
.39585e		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395861		85 34		sta $0354	                STA DOS_DST_PTR
.395863		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395865		69 00 00	adc #$0000	                ADC #0
.395868		85 36		sta $0356	                STA DOS_DST_PTR+2
.39586a		22 3a 55 39	jsl $39553a	                JSL IF_READ                 ; Yes: load the next cluster
.39586e		b0 c5		bcs $395835	                BCS copy_cluster            ; And start copying it
.395870						close_file
.395870		82 16 01	brl $395989	ret_success     BRL IF_SUCCESS
.395873						IF_NULLBUFFER
.395873		5a		phy		                PHY
.395874		8b		phb		                PHB
.395875		0b		phd		                PHD
.395876		08		php		                PHP
.395877		48		pha		                PHA             ; begin setdbr macro
.395878		08		php		                PHP
.395879		e2 20		sep #$20	                SEP #$20        ; set A short
.39587b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39587d		48		pha		                PHA
.39587e		ab		plb		                PLB
.39587f		28		plp		                PLP
.395880		68		pla		                PLA             ; end setdbr macro
.395881		48		pha		                PHA             ; begin setdp macro
.395882		08		php		                PHP
.395883		c2 20		rep #$20	                REP #$20        ; set A long
.395885		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395888		5b		tcd		                TCD
.395889		28		plp		                PLP
.39588a		68		pla		                PLA             ; end setdp macro
.39588b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39588d		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395890		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395892		85 28		sta $0348	                STA DOS_TEMP
.395894		c8		iny		                INY
.395895		c8		iny		                INY
.395896		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395898		85 2a		sta $034a	                STA DOS_TEMP+2
.39589a		a0 00 00	ldy #$0000	                LDY #0
.39589d		a9 00 00	lda #$0000	                LDA #0
.3958a0		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3958a2		c8		iny		                INY
.3958a3		c8		iny		                INY
.3958a4		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3958a7		d0 f7		bne $3958a0	                BNE loop
.3958a9		28		plp		                PLP
.3958aa		2b		pld		                PLD
.3958ab		ab		plb		                PLB
.3958ac		7a		ply		                PLY
.3958ad		6b		rtl		                RTL
.3958ae						IF_COPY2BUFF
.3958ae		5a		phy		                PHY
.3958af		8b		phb		                PHB
.3958b0		0b		phd		                PHD
.3958b1		08		php		                PHP
.3958b2		48		pha		                PHA             ; begin setdbr macro
.3958b3		08		php		                PHP
.3958b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3958b6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958b8		48		pha		                PHA
.3958b9		ab		plb		                PLB
.3958ba		28		plp		                PLP
.3958bb		68		pla		                PLA             ; end setdbr macro
.3958bc		48		pha		                PHA             ; begin setdp macro
.3958bd		08		php		                PHP
.3958be		c2 20		rep #$20	                REP #$20        ; set A long
.3958c0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958c3		5b		tcd		                TCD
.3958c4		28		plp		                PLP
.3958c5		68		pla		                PLA             ; end setdp macro
.3958c6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958c8		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958cb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958cd		85 28		sta $0348	                STA DOS_TEMP
.3958cf		c8		iny		                INY
.3958d0		c8		iny		                INY
.3958d1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958d3		85 2a		sta $034a	                STA DOS_TEMP+2
.3958d5		a0 00 00	ldy #$0000	                LDY #0
.3958d8						copy_loop
.3958d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3958da		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3958dc		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3958de		c2 20		rep #$20	                REP #$20        ; set A long
.3958e0		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.3958e2		d0 02		bne $3958e6	                BNE adv_dest
.3958e4		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3958e6		c8		iny		adv_dest        INY                         ; Count it
.3958e7		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.3958ea		f0 0c		beq $3958f8	                BEQ done                    ; Yes: we're done
.3958ec		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3958ee		c5 38		cmp $0358	                CMP DOS_END_PTR
.3958f0		d0 e6		bne $3958d8	                BNE copy_loop               ; No: keep copying
.3958f2		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958f4		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958f6		d0 e0		bne $3958d8	                BNE copy_loop
.3958f8		28		plp		done            PLP
.3958f9		2b		pld		                PLD
.3958fa		ab		plb		                PLB
.3958fb		7a		ply		                PLY
.3958fc		6b		rtl		                RTL
.3958fd						IF_SAVE
.3958fd		da		phx		                PHX
.3958fe		5a		phy		                PHY
.3958ff		0b		phd		                PHD
.395900		8b		phb		                PHB
.395901		08		php		                PHP
.395902		48		pha		                PHA             ; begin setdbr macro
.395903		08		php		                PHP
.395904		e2 20		sep #$20	                SEP #$20        ; set A short
.395906		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395908		48		pha		                PHA
.395909		ab		plb		                PLB
.39590a		28		plp		                PLP
.39590b		68		pla		                PLA             ; end setdbr macro
.39590c		48		pha		                PHA             ; begin setdp macro
.39590d		08		php		                PHP
.39590e		c2 20		rep #$20	                REP #$20        ; set A long
.395910		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395913		5b		tcd		                TCD
.395914		28		plp		                PLP
.395915		68		pla		                PLA             ; end setdp macro
.395916		c2 30		rep #$30	                REP #$30        ; set A&X long
.395918		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39591b		38		sec		                SEC
.39591c		a5 38		lda $0358	                LDA DOS_END_PTR
.39591e		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395920		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395922		c8		iny		                INY
.395923		c8		iny		                INY
.395924		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395926		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395928		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39592a		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39592d		18		clc		                CLC
.39592e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395930		69 01 00	adc #$0001	                ADC #1
.395933		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395935		90 09		bcc $395940	                BCC first_block
.395937		c8		iny		                INY
.395938		c8		iny		                INY
.395939		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39593b		69 00 00	adc #$0000	                ADC #0
.39593e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395940		22 73 58 39	jsl $395873	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395944		22 ae 58 39	jsl $3958ae	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395948		22 cc 54 39	jsl $3954cc	                JSL IF_CREATE           ; Create file.
.39594c		b0 03		bcs $395951	                BCS check_for_end
.39594e		82 31 00	brl $395982	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395951		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395953		c5 38		cmp $0358	                CMP DOS_END_PTR
.395955		d0 06		bne $39595d	                BNE next_block
.395957		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395959		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39595b		f0 1d		beq $39597a	                BEQ done                ; Yes: we're done
.39595d		22 73 58 39	jsl $395873	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395961		22 ae 58 39	jsl $3958ae	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395965		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395968		a9 00 00	lda #$0000	                LDA #0
.39596b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39596d		c8		iny		                INY
.39596e		c8		iny		                INY
.39596f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395971		22 9f 55 39	jsl $39559f	                JSL IF_WRITE            ; Append to the file
.395975		b0 da		bcs $395951	                BCS check_for_end       ; And try again
.395977		82 08 00	brl $395982	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.39597a		5c 89 59 39	jmp $395989	done            JML IF_SUCCESS
.39597e						IF_FAILURE
.39597e		e2 20		sep #$20	                SEP #$20        ; set A short
.395980		85 0e		sta $032e	                STA DOS_STATUS
.395982		28		plp		IF_PASSFAILURE  PLP
.395983		18		clc		                CLC
.395984		ab		plb		                PLB
.395985		2b		pld		                PLD
.395986		7a		ply		                PLY
.395987		fa		plx		                PLX
.395988		6b		rtl		                RTL
.395989						IF_SUCCESS
.395989		e2 20		sep #$20	                SEP #$20        ; set A short
.39598b		64 00		stz $0320	                STZ BIOS_STATUS
.39598d		64 0e		stz $032e	                STZ DOS_STATUS
.39598f		28		plp		                PLP
.395990		38		sec		                SEC
.395991		ab		plb		                PLB
.395992		2b		pld		                PLD
.395993		7a		ply		                PLY
.395994		fa		plx		                PLX
.395995		6b		rtl		                RTL
.395996						IF_RUN
.395996		da		phx		                PHX
.395997		5a		phy		                PHY
.395998		0b		phd		                PHD
.395999		8b		phb		                PHB
.39599a		08		php		                PHP
.39599b		48		pha		                PHA             ; begin setdbr macro
.39599c		08		php		                PHP
.39599d		e2 20		sep #$20	                SEP #$20        ; set A short
.39599f		a9 00		lda #$00	                LDA #0
.3959a1		48		pha		                PHA
.3959a2		ab		plb		                PLB
.3959a3		28		plp		                PLP
.3959a4		68		pla		                PLA             ; end setdbr macro
.3959a5		48		pha		                PHA             ; begin setdp macro
.3959a6		08		php		                PHP
.3959a7		c2 20		rep #$20	                REP #$20        ; set A long
.3959a9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959ac		5b		tcd		                TCD
.3959ad		28		plp		                PLP
.3959ae		68		pla		                PLA             ; end setdp macro
.3959af		e2 20		sep #$20	                SEP #$20        ; set A short
.3959b1		c2 10		rep #$10	                REP #$10        ; set X long
.3959b3		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3959b5		a2 00 00	ldx #$0000	                LDX #0
.3959b8		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3959bc		e8		inx		                INX
.3959bd		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3959c0		d0 f6		bne $3959b8	                BNE clr_fd_loop
.3959c2		c2 20		rep #$20	                REP #$20        ; set A long
.3959c4		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3959c7		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3959cb		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3959ce		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3959d2		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3959d4		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3959d8		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3959da		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3959de		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3959e1		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3959e3		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3959e5		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.3959e8		85 20		sta $0340	                STA DOS_FD_PTR
.3959ea		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3959ed		85 22		sta $0342	                STA DOS_FD_PTR+2
.3959ef		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3959f2		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3959f6		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3959fa		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.3959fe		b0 14		bcs $395a14	                BCS try_execute
.395a00		82 7f ff	brl $395982	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395a03						chk_execute
.395a03		c2 20		rep #$20	                REP #$20        ; set A long
.395a05		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395a07		d0 0b		bne $395a14	                BNE try_execute                         ; If so: call it
.395a09		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395a0b		d0 07		bne $395a14	                BNE try_execute
.395a0d		e2 20		sep #$20	                SEP #$20        ; set A short
.395a0f		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395a11		82 6a ff	brl $39597e	                BRL IF_FAILURE
.395a14						try_execute
.395a14		e2 20		sep #$20	                SEP #$20        ; set A short
.395a16		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395a18		48		pha		                PHA
.395a19		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.395a1b		48		pha		                PHA
.395a1c		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395a1e		48		pha		                PHA
.395a1f		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395a21		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395a23		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395a27		e2 20		sep #$20	                SEP #$20        ; set A short
.395a29		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.395a2a		68		pla		                PLA
.395a2b		68		pla		                PLA
.395a2c		82 5a ff	brl $395989	                BRL IF_SUCCESS                          ; Return success
.395a2f						IF_ALLOCFD
.395a2f		da		phx		                PHX
.395a30		5a		phy		                PHY
.395a31		0b		phd		                PHD
.395a32		8b		phb		                PHB
.395a33		08		php		                PHP
.395a34		48		pha		                PHA             ; begin setdbr macro
.395a35		08		php		                PHP
.395a36		e2 20		sep #$20	                SEP #$20        ; set A short
.395a38		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a3a		48		pha		                PHA
.395a3b		ab		plb		                PLB
.395a3c		28		plp		                PLP
.395a3d		68		pla		                PLA             ; end setdbr macro
.395a3e		48		pha		                PHA             ; begin setdp macro
.395a3f		08		php		                PHP
.395a40		c2 20		rep #$20	                REP #$20        ; set A long
.395a42		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a45		5b		tcd		                TCD
.395a46		28		plp		                PLP
.395a47		68		pla		                PLA             ; end setdp macro
.395a48		c2 10		rep #$10	                REP #$10        ; set X long
.395a4a		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395a4d						chk_fd
.395a4d		e2 20		sep #$20	                SEP #$20        ; set A short
.395a4f		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395a52		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395a54		f0 14		beq $395a6a	                BEQ found                           ; No: flag and return the found descriptor
.395a56						next_fd
.395a56		c2 20		rep #$20	                REP #$20        ; set A long
.395a58		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395a59		18		clc		                CLC
.395a5a		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395a5d		aa		tax		                TAX
.395a5e		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395a61		90 ea		bcc $395a4d	                BLT chk_fd                          ; No: check this new file descriptor
.395a63		e2 20		sep #$20	                SEP #$20        ; set A short
.395a65		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395a67		82 14 ff	brl $39597e	                BRL IF_FAILURE
.395a6a		09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395a6c		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395a6f		c2 20		rep #$20	                REP #$20        ; set A long
.395a71		8a		txa		                TXA
.395a72		18		clc		                CLC
.395a73		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395a76		85 20		sta $0340	                STA @b DOS_FD_PTR
.395a78		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395a7b		69 00 00	adc #$0000	                ADC #0
.395a7e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a80		82 06 ff	brl $395989	                BRL IF_SUCCESS                      ; Return this file descriptor
.395a83						IF_FREEFD
.395a83		da		phx		                PHX
.395a84		5a		phy		                PHY
.395a85		0b		phd		                PHD
.395a86		8b		phb		                PHB
.395a87		08		php		                PHP
.395a88		48		pha		                PHA             ; begin setdbr macro
.395a89		08		php		                PHP
.395a8a		e2 20		sep #$20	                SEP #$20        ; set A short
.395a8c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a8e		48		pha		                PHA
.395a8f		ab		plb		                PLB
.395a90		28		plp		                PLP
.395a91		68		pla		                PLA             ; end setdbr macro
.395a92		48		pha		                PHA             ; begin setdp macro
.395a93		08		php		                PHP
.395a94		c2 20		rep #$20	                REP #$20        ; set A long
.395a96		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a99		5b		tcd		                TCD
.395a9a		28		plp		                PLP
.395a9b		68		pla		                PLA             ; end setdp macro
.395a9c		e2 20		sep #$20	                SEP #$20        ; set A short
.395a9e		c2 10		rep #$10	                REP #$10        ; set X long
.395aa0		a9 00		lda #$00	                LDA #0
.395aa2		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395aa4		82 e2 fe	brl $395989	                BRL IF_SUCCESS
.395aa7						DOS_SRC2DST
.395aa7		da		phx		                PHX
.395aa8		5a		phy		                PHY
.395aa9		0b		phd		                PHD
.395aaa		8b		phb		                PHB
.395aab		08		php		                PHP
.395aac		48		pha		                PHA             ; begin setdp macro
.395aad		08		php		                PHP
.395aae		c2 20		rep #$20	                REP #$20        ; set A long
.395ab0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ab3		5b		tcd		                TCD
.395ab4		28		plp		                PLP
.395ab5		68		pla		                PLA             ; end setdp macro
.395ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ab8		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395abb		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395abd		aa		tax		                TAX                                     ; X := source buffer address
.395abe		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395ac0		a8		tay		                TAY                                     ; Y := destination buffer address
.395ac1		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395ac4		54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395ac7		28		plp		                PLP
.395ac8		ab		plb		                PLB
.395ac9		2b		pld		                PLD
.395aca		7a		ply		                PLY
.395acb		fa		plx		                PLX
.395acc		6b		rtl		                RTL
.395acd						IF_COPY
.395acd		da		phx		                PHX
.395ace		5a		phy		                PHY
.395acf		0b		phd		                PHD
.395ad0		8b		phb		                PHB
.395ad1		08		php		                PHP
.395ad2		48		pha		                PHA             ; begin setdbr macro
.395ad3		08		php		                PHP
.395ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.395ad6		a9 00		lda #$00	                LDA #0
.395ad8		48		pha		                PHA
.395ad9		ab		plb		                PLB
.395ada		28		plp		                PLP
.395adb		68		pla		                PLA             ; end setdbr macro
.395adc		48		pha		                PHA             ; begin setdp macro
.395add		08		php		                PHP
.395ade		c2 20		rep #$20	                REP #$20        ; set A long
.395ae0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ae3		5b		tcd		                TCD
.395ae4		28		plp		                PLP
.395ae5		68		pla		                PLA             ; end setdp macro
.395ae6		22 2f 5a 39	jsl $395a2f	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395aea		b0 03		bcs $395aef	                BCS set_src_path
.395aec		82 93 fe	brl $395982	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395aef						set_src_path
.395aef		c2 30		rep #$30	                REP #$30        ; set A&X long
.395af1		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395af4		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395af6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395af8		c8		iny		                INY
.395af9		c8		iny		                INY
.395afa		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395afc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395afe						alloc_dest
.395afe		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b00		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395b02		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395b04		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395b06		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395b08		22 2f 5a 39	jsl $395a2f	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395b0c		b0 0f		bcs $395b1d	                BCS set_paths                   ; If everything is ok... start setting the paths
.395b0e		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b10		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b12		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b14		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b16		22 83 5a 39	jsl $395a83	                JSL IF_FREEFD                   ; And free it
.395b1a		82 65 fe	brl $395982	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395b1d						set_paths
.395b1d		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b1f		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395b21		85 34		sta $0354	                STA @b DOS_DST_PTR
.395b23		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395b25		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395b27		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395b2a		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395b2c		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b2e		c8		iny		                INY
.395b2f		c8		iny		                INY
.395b30		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395b32		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b34		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b36		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b38		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b3a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b3c		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395b40		b0 0f		bcs $395b51	                BCS src_open                    ; If success, work with the openned file
.395b42		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b44		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b46		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b48		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b4a		22 83 5a 39	jsl $395a83	                JSL IF_FREEFD                   ; And free it
.395b4e		82 bd ff	brl $395b0e	                BRL err_free_src_fd             ; Free the source file descriptor
.395b51		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395b54		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b56		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b58		c8		iny		                INY
.395b59		c8		iny		                INY
.395b5a		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b5c		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b5e		22 a7 5a 39	jsl $395aa7	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395b62		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b64		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b66		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b68		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b6a		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.395b6e		b0 0f		bcs $395b7f	                BCS read_next                   ; If sucessful, try to get the next cluster
.395b70		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b72		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b74		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b76		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b78		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395b7c		82 c3 ff	brl $395b42	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395b7f						read_next
.395b7f		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b81		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b83		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b85		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b87		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b8b		b0 19		bcs $395ba6	                BCS copy2dest                   ; If successful, copy the sector
.395b8d		e2 20		sep #$20	                SEP #$20        ; set A short
.395b8f		a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b91		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b93		f0 32		beq $395bc7	                BEQ file_copied                 ; Yes: we're done copying
.395b95						err_dest_close
.395b95		c2 20		rep #$20	                REP #$20        ; set A long
.395b97		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b99		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b9b		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b9d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b9f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395ba3		82 ca ff	brl $395b70	                BRL err_src_close               ; Close the source and throw an error
.395ba6						copy2dest
.395ba6		22 a7 5a 39	jsl $395aa7	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395baa		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395bad		a9 00 00	lda #$0000	                LDA #0
.395bb0		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395bb2		c8		iny		                INY
.395bb3		c8		iny		                INY
.395bb4		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395bb6		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395bb8		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bba		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395bbc		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bbe		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395bc2		90 d1		bcc $395b95	                BCC err_dest_close              ; If error: close all files and throw the error
.395bc4		82 b8 ff	brl $395b7f	                BRL read_next                   ; Otherwise: repeat the loop
.395bc7						file_copied
.395bc7		c2 20		rep #$20	                REP #$20        ; set A long
.395bc9		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395bcb		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bcd		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395bcf		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bd1		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395bd5		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395bd7		85 20		sta $0340	                STA @b DOS_FD_PTR
.395bd9		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395bdb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bdd		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395be1		82 a5 fd	brl $395989	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8					UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395be4						UART_SELECT
.395be4		08		php		            PHP
.395be5		c2 20		rep #$20	                REP #$20        ; set A long
.395be7		c9 02 00	cmp #$0002	            CMP #2
.395bea		f0 07		beq $395bf3	            BEQ is_COM2
.395bec		c2 20		rep #$20	                REP #$20        ; set A long
.395bee		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395bf1		80 05		bra $395bf8	            BRA setaddr
.395bf3						is_COM2
.395bf3		c2 20		rep #$20	                REP #$20        ; set A long
.395bf5		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395bf8		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395bfc		e2 20		sep #$20	                SEP #$20        ; set A short
.395bfe		a9 af		lda #$af	            LDA #`UART1_BASE
.395c00		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395c04		28		plp		            PLP
.395c05		6b		rtl		            RTL
.395c06						UART_SETBPS
.395c06		08		php		            PHP
.395c07		0b		phd		            PHD
.395c08		48		pha		                PHA             ; begin setdp macro
.395c09		08		php		                PHP
.395c0a		c2 20		rep #$20	                REP #$20        ; set A long
.395c0c		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c0f		5b		tcd		                TCD
.395c10		28		plp		                PLP
.395c11		68		pla		                PLA             ; end setdp macro
.395c12		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c14		48		pha		            PHA
.395c15		e2 20		sep #$20	                SEP #$20        ; set A short
.395c17		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395c1a		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c1c		09 80		ora #$80	            ORA #LCR_DLB
.395c1e		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c20		c2 20		rep #$20	                REP #$20        ; set A long
.395c22		68		pla		            PLA
.395c23		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395c26		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395c28		e2 20		sep #$20	                SEP #$20        ; set A short
.395c2a		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395c2d		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c2f		49 80		eor #$80	            EOR #LCR_DLB
.395c31		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c33		2b		pld		            PLD
.395c34		28		plp		            PLP
.395c35		6b		rtl		            RTL
.395c36						UART_SETLCR
.395c36		08		php		            PHP
.395c37		0b		phd		            PHD
.395c38		48		pha		                PHA             ; begin setdp macro
.395c39		08		php		                PHP
.395c3a		c2 20		rep #$20	                REP #$20        ; set A long
.395c3c		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c3f		5b		tcd		                TCD
.395c40		28		plp		                PLP
.395c41		68		pla		                PLA             ; end setdp macro
.395c42		e2 20		sep #$20	                SEP #$20        ; set A short
.395c44		c2 10		rep #$10	                REP #$10        ; set X long
.395c46		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395c48		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395c4b		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c4d		2b		pld		            PLD
.395c4e		28		plp		            PLP
.395c4f		6b		rtl		            RTL
.395c50						UART_INIT
.395c50		08		php		            PHP
.395c51		0b		phd		            PHD
.395c52		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c54		48		pha		                PHA             ; begin setdp macro
.395c55		08		php		                PHP
.395c56		c2 20		rep #$20	                REP #$20        ; set A long
.395c58		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c5b		5b		tcd		                TCD
.395c5c		28		plp		                PLP
.395c5d		68		pla		                PLA             ; end setdp macro
.395c5e		a9 01 00	lda #$0001	            LDA #UART_115200
.395c61		22 06 5c 39	jsl $395c06	            JSL UART_SETBPS
.395c65		e2 20		sep #$20	                SEP #$20        ; set A short
.395c67		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395c69		22 36 5c 39	jsl $395c36	            JSL UART_SETLCR
.395c6d		a9 e1		lda #$e1	            LDA #%11100001
.395c6f		a0 02 00	ldy #$0002	            LDY #UART_FCR
.395c72		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c74		2b		pld		            PLD
.395c75		28		plp		            PLP
.395c76		6b		rtl		            RTL
.395c77						UART_HASBYT
.395c77		08		php		            PHP
.395c78		0b		phd		            PHD
.395c79		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c7b		48		pha		                PHA             ; begin setdp macro
.395c7c		08		php		                PHP
.395c7d		c2 20		rep #$20	                REP #$20        ; set A long
.395c7f		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c82		5b		tcd		                TCD
.395c83		28		plp		                PLP
.395c84		68		pla		                PLA             ; end setdp macro
.395c85		e2 20		sep #$20	                SEP #$20        ; set A short
.395c87		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c8a		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c8c		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c8e		d0 04		bne $395c94	            BNE ret_true            ; If flag is set, return true
.395c90		2b		pld		ret_false   PLD                     ; Return false
.395c91		28		plp		            PLP
.395c92		18		clc		            CLC
.395c93		6b		rtl		            RTL
.395c94		2b		pld		ret_true    PLD                     ; Return true
.395c95		28		plp		            PLP
.395c96		38		sec		            SEC
.395c97		6b		rtl		            RTL
.395c98						UART_GETC
.395c98		08		php		            PHP
.395c99		0b		phd		            PHD
.395c9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c9c		48		pha		                PHA             ; begin setdp macro
.395c9d		08		php		                PHP
.395c9e		c2 20		rep #$20	                REP #$20        ; set A long
.395ca0		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ca3		5b		tcd		                TCD
.395ca4		28		plp		                PLP
.395ca5		68		pla		                PLA             ; end setdp macro
.395ca6		e2 20		sep #$20	                SEP #$20        ; set A short
.395ca8		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395cab		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395cad		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395caf		f0 fa		beq $395cab	            BEQ wait_getc           ; If the flag is clear, wait
.395cb1		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395cb4		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395cb6		2b		pld		            PLD
.395cb7		28		plp		            PLP
.395cb8		6b		rtl		            RTL
.395cb9						UART_PUTC
.395cb9		08		php		            PHP
.395cba		0b		phd		            PHD
.395cbb		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cbd		48		pha		                PHA             ; begin setdp macro
.395cbe		08		php		                PHP
.395cbf		c2 20		rep #$20	                REP #$20        ; set A long
.395cc1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395cc4		5b		tcd		                TCD
.395cc5		28		plp		                PLP
.395cc6		68		pla		                PLA             ; end setdp macro
.395cc7		e2 20		sep #$20	                SEP #$20        ; set A short
.395cc9		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395cca		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395ccd		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395ccf		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395cd1		f0 fa		beq $395ccd	            BEQ wait_putc
.395cd3		68		pla		            PLA
.395cd4		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395cd7		97 00		sta [$0700],y	            STA [CURRUART],Y
.395cd9		2b		pld		            PLD
.395cda		28		plp		            PLP
.395cdb		6b		rtl		            RTL
.395cdc						UART_PUTS
.395cdc		08		php		            PHP
.395cdd		e2 20		sep #$20	                SEP #$20        ; set A short
.395cdf		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395ce2		f0 07		beq $395ceb	            BEQ done
.395ce4		22 b9 5c 39	jsl $395cb9	            JSL UART_PUTC
.395ce8		e8		inx		            INX
.395ce9		80 f4		bra $395cdf	            BRA put_loop
.395ceb		28		plp		done        PLP
.395cec		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395ced						JOYSTICK_SET_NES_MODE
.395ced		e2 20		sep #$20	                SEP #$20        ; set A short
.395cef		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cf3		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395cf5		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cf9		6b		rtl		          RTL
.395cfa						JOYSTICK_SET_SNES_MODE
.395cfa		e2 20		sep #$20	                SEP #$20        ; set A short
.395cfc		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d00		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395d02		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395d04		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d08		6b		rtl		          RTL
.395d09						JOYSTICK_ENABLE_NES_SNES_PORT0
.395d09		e2 20		sep #$20	                SEP #$20        ; set A short
.395d0b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d0f		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d11		09 01		ora #$01	          ORA #NES_SNES_EN0
.395d13		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d17		6b		rtl		          RTL
.395d18						JOYSTICK_ENABLE_NES_SNES_PORT1
.395d18		e2 20		sep #$20	                SEP #$20        ; set A short
.395d1a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d1e		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d20		09 02		ora #$02	          ORA #NES_SNES_EN1
.395d22		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d26		6b		rtl		          RTL
.395d27						JOYSTICK_DISABLE_NES_SNES_PORT0
.395d27		e2 20		sep #$20	                SEP #$20        ; set A short
.395d29		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d2d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d2f		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d33		6b		rtl		          RTL
.395d34						JOYSTICK_DISABLE_NES_SNES_PORT1
.395d34		e2 20		sep #$20	                SEP #$20        ; set A short
.395d36		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d3a		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d3c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d40		6b		rtl		          RTL
.395d41						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395d41		e2 20		sep #$20	                SEP #$20        ; set A short
.395d43		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d47		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395d49		c9 00		cmp #$00	          CMP #$00
.395d4b		f0 14		beq $395d61	          BEQ END_OF_JOYSTICK_POLL
.395d4d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d51		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395d53		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d57						JOYSTICK_POLLING_ISNOTOVER
.395d57		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395d5b		29 40		and #$40	          AND #NES_SNES_DONE
.395d5d		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395d5f		d0 f6		bne $395d57	          BNE JOYSTICK_POLLING_ISNOTOVER
.395d61						END_OF_JOYSTICK_POLL
.395d61		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395d62						SDC_TEST
.395d62		8b		phb		                PHB
.395d63		0b		phd		                PHD
.395d64		08		php		                PHP
.395d65		48		pha		                PHA             ; begin setdbr macro
.395d66		08		php		                PHP
.395d67		e2 20		sep #$20	                SEP #$20        ; set A short
.395d69		a9 00		lda #$00	                LDA #0
.395d6b		48		pha		                PHA
.395d6c		ab		plb		                PLB
.395d6d		28		plp		                PLP
.395d6e		68		pla		                PLA             ; end setdbr macro
.395d6f		48		pha		                PHA             ; begin setdp macro
.395d70		08		php		                PHP
.395d71		c2 20		rep #$20	                REP #$20        ; set A long
.395d73		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d76		5b		tcd		                TCD
.395d77		28		plp		                PLP
.395d78		68		pla		                PLA             ; end setdp macro
.395d79		e2 20		sep #$20	                SEP #$20        ; set A short
.395d7b		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395d7d		8d 1e 00	sta $001e	                STA @w CURCOLOR
.395d80		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.395d84		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.395d88		22 c8 5d 39	jsl $395dc8	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d8c		b0 03		bcs $395d91	                BCS init_ok
.395d8e		82 15 00	brl $395da6	                BRL done
.395d91		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d93		85 01		sta $0321	                STA BIOS_DEV
.395d95		22 5d 45 39	jsl $39455d	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d99		b0 03		bcs $395d9e	                BCS mount_ok
.395d9b		82 08 00	brl $395da6	                BRL done
.395d9e		22 0b 56 39	jsl $39560b	mount_ok        JSL IF_DIROPEN
.395da2		b0 02		bcs $395da6	                BCS all_ok
.395da4		80 00		bra $395da6	                BRA done
.395da6						all_ok
.395da6		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.395daa		28		plp		                PLP
.395dab		2b		pld		                PLD
.395dac		ab		plb		                PLB
.395dad		6b		rtl		                RTL
.395dae						SDC_WAITBUSY
.395dae		08		php		                PHP
.395daf		e2 20		sep #$20	                SEP #$20        ; set A short
.395db1		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395db5		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395db7		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395db9		f0 f6		beq $395db1	                BEQ wait_xact
.395dbb		28		plp		                PLP
.395dbc		6b		rtl		                RTL
.395dbd						SDC_RESET
.395dbd		08		php		                PHP
.395dbe		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc0		a9 01		lda #$01	                LDA #1
.395dc2		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395dc6		28		plp		                PLP
.395dc7		6b		rtl		                RTL
.395dc8						SDC_INIT
.395dc8		0b		phd		                PHD
.395dc9		8b		phb		                PHB
.395dca		08		php		                PHP
.395dcb		48		pha		                PHA             ; begin setdbr macro
.395dcc		08		php		                PHP
.395dcd		e2 20		sep #$20	                SEP #$20        ; set A short
.395dcf		a9 00		lda #$00	                LDA #0
.395dd1		48		pha		                PHA
.395dd2		ab		plb		                PLB
.395dd3		28		plp		                PLP
.395dd4		68		pla		                PLA             ; end setdbr macro
.395dd5		48		pha		                PHA             ; begin setdp macro
.395dd6		08		php		                PHP
.395dd7		c2 20		rep #$20	                REP #$20        ; set A long
.395dd9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ddc		5b		tcd		                TCD
.395ddd		28		plp		                PLP
.395dde		68		pla		                PLA             ; end setdp macro
.395ddf		e2 20		sep #$20	                SEP #$20        ; set A short
.395de1		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395de3		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395de7		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395de9		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395ded		22 ae 5d 39	jsl $395dae	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395df1		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395df5		d0 07		bne $395dfe	                BNE ret_error                       ; Is there one? Process the error
.395df7		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395df9		28		plp		                PLP
.395dfa		ab		plb		                PLB
.395dfb		2b		pld		                PLD
.395dfc		38		sec		                SEC
.395dfd		6b		rtl		                RTL
.395dfe		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e01		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395e03		85 00		sta $0320	set_error       STA BIOS_STATUS
.395e05		28		plp		                PLP
.395e06		ab		plb		                PLB
.395e07		2b		pld		                PLD
.395e08		18		clc		                CLC
.395e09		6b		rtl		                RTL
.395e0a						SDC_GETBLOCK
.395e0a		0b		phd		                PHD
.395e0b		8b		phb		                PHB
.395e0c		08		php		                PHP
.395e0d		48		pha		                PHA             ; begin setdbr macro
.395e0e		08		php		                PHP
.395e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.395e11		a9 00		lda #$00	                LDA #0
.395e13		48		pha		                PHA
.395e14		ab		plb		                PLB
.395e15		28		plp		                PLP
.395e16		68		pla		                PLA             ; end setdbr macro
.395e17		48		pha		                PHA             ; begin setdp macro
.395e18		08		php		                PHP
.395e19		c2 20		rep #$20	                REP #$20        ; set A long
.395e1b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e1e		5b		tcd		                TCD
.395e1f		28		plp		                PLP
.395e20		68		pla		                PLA             ; end setdp macro
.395e21		e2 20		sep #$20	                SEP #$20        ; set A short
.395e23		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e27		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e29		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e2d		a9 00		lda #$00	                LDA #0
.395e2f		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e33		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395e35		0a		asl a		                ASL A
.395e36		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e3a		a5 03		lda $0323	                LDA BIOS_LBA+1
.395e3c		2a		rol a		                ROL A
.395e3d		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e41		a5 04		lda $0324	                LDA BIOS_LBA+2
.395e43		2a		rol a		                ROL A
.395e44		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e48		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395e4a		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e4e		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e50		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e54		22 ae 5d 39	jsl $395dae	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e58		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e5c		d0 36		bne $395e94	                BNE ret_error                       ; Is there one? Process the error
.395e5e		e2 20		sep #$20	                SEP #$20        ; set A short
.395e60		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395e64		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395e66		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395e6a		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395e6c		c2 10		rep #$10	                REP #$10        ; set X long
.395e6e		a0 00 00	ldy #$0000	                LDY #0
.395e71		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395e75		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395e77		c8		iny		                INY                                 ; Advance to the next byte
.395e78		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e7b		d0 f4		bne $395e71	                BNE loop_rd                         ; No: keep reading
.395e7d		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e81		d0 11		bne $395e94	                BNE ret_error                       ; Is there one? Process the error
.395e83		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e85		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e89		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e8b		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e8f		28		plp		                PLP
.395e90		ab		plb		                PLB
.395e91		2b		pld		                PLD
.395e92		38		sec		                SEC
.395e93		6b		rtl		                RTL
.395e94		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e97		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e99		85 00		sta $0320	                STA BIOS_STATUS
.395e9b		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e9f		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ea1		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ea5		28		plp		                PLP
.395ea6		ab		plb		                PLB
.395ea7		2b		pld		                PLD
.395ea8		18		clc		                CLC
.395ea9		6b		rtl		                RTL
.395eaa						SDC_PUTBLOCK
.395eaa		0b		phd		                PHD
.395eab		8b		phb		                PHB
.395eac		08		php		                PHP
.395ead		48		pha		                PHA             ; begin setdbr macro
.395eae		08		php		                PHP
.395eaf		e2 20		sep #$20	                SEP #$20        ; set A short
.395eb1		a9 00		lda #$00	                LDA #0
.395eb3		48		pha		                PHA
.395eb4		ab		plb		                PLB
.395eb5		28		plp		                PLP
.395eb6		68		pla		                PLA             ; end setdbr macro
.395eb7		48		pha		                PHA             ; begin setdp macro
.395eb8		08		php		                PHP
.395eb9		c2 20		rep #$20	                REP #$20        ; set A long
.395ebb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ebe		5b		tcd		                TCD
.395ebf		28		plp		                PLP
.395ec0		68		pla		                PLA             ; end setdp macro
.395ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.395ec3		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395ec7		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395ec9		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ecd		c2 10		rep #$10	                REP #$10        ; set X long
.395ecf		a0 00 00	ldy #$0000	                LDY #0
.395ed2		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395ed4		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395ed8		c8		iny		                INY                                 ; Advance to the next byte
.395ed9		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395edc		d0 f4		bne $395ed2	                BNE loop_wr                         ; No: keep writing
.395ede		a9 00		lda #$00	                LDA #0
.395ee0		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395ee4		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395ee6		0a		asl a		                ASL A
.395ee7		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395eeb		a5 03		lda $0323	                LDA BIOS_LBA+1
.395eed		2a		rol a		                ROL A
.395eee		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ef2		a5 04		lda $0324	                LDA BIOS_LBA+2
.395ef4		2a		rol a		                ROL A
.395ef5		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395ef9		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395efb		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395eff		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395f01		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395f05		22 ae 5d 39	jsl $395dae	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395f09		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395f0d		d0 11		bne $395f20	                BNE ret_error                       ; Is there one? Process the error
.395f0f		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395f11		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f15		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f17		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f1b		28		plp		                PLP
.395f1c		ab		plb		                PLB
.395f1d		2b		pld		                PLD
.395f1e		38		sec		                SEC
.395f1f		6b		rtl		                RTL
.395f20		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395f23		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395f25		85 00		sta $0320	                STA BIOS_STATUS
.395f27		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f2b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f2d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f31		28		plp		                PLP
.395f32		ab		plb		                PLB
.395f33		2b		pld		                PLD
.395f34		18		clc		                CLC
.395f35		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395f36						FDC_TEST
.395f36		8b		phb		                    PHB
.395f37		0b		phd		                    PHD
.395f38		08		php		                    PHP
.395f39		48		pha		                PHA             ; begin setdbr macro
.395f3a		08		php		                PHP
.395f3b		e2 20		sep #$20	                SEP #$20        ; set A short
.395f3d		a9 00		lda #$00	                LDA #0
.395f3f		48		pha		                PHA
.395f40		ab		plb		                PLB
.395f41		28		plp		                PLP
.395f42		68		pla		                PLA             ; end setdbr macro
.395f43		48		pha		                PHA             ; begin setdp macro
.395f44		08		php		                PHP
.395f45		c2 20		rep #$20	                REP #$20        ; set A long
.395f47		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f4a		5b		tcd		                TCD
.395f4b		28		plp		                PLP
.395f4c		68		pla		                PLA             ; end setdp macro
.395f4d		e2 20		sep #$20	                SEP #$20        ; set A short
.395f4f		a9 f0		lda #$f0	                    LDA #$F0
.395f51		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395f54		22 4b 0b 39	jsl $390b4b	                    JSL ICLRSCREEN
.395f58		22 6f 09 39	jsl $39096f	                    JSL ICSRHOME
.395f5c		c2 30		rep #$30	                REP #$30        ; set A&X long
.395f5e		22 2c 62 39	jsl $39622c	                    JSL FDC_Init
.395f62		b0 03		bcs $395f67	                    BCS init_ok
.395f64		82 20 00	brl $395f87	                    BRL motor_off
.395f67		22 2b 69 39	jsl $39692b	init_ok             JSL FDC_CHK_MEDIA
.395f6b		90 03		bcc $395f70	                    BCC no_media
.395f6d		82 03 00	brl $395f73	                    BRL is_ok1
.395f70						no_media
.395f70		82 14 00	brl $395f87	                    BRL motor_off
.395f73		22 be 67 39	jsl $3967be	is_ok1              JSL FDC_MOUNT
.395f77		90 03		bcc $395f7c	                    BCC mount_err
.395f79		82 03 00	brl $395f7f	                    BRL is_ok2
.395f7c						mount_err
.395f7c		82 08 00	brl $395f87	                    BRL motor_off
.395f7f		22 93 5f 39	jsl $395f93	is_ok2              JSL FDC_TEST_PUTBLOCK
.395f83		b0 02		bcs $395f87	                    BCS all_ok
.395f85		80 00		bra $395f87	                    BRA motor_off
.395f87						all_ok
.395f87		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395f8b		22 dc 62 39	jsl $3962dc	                    JSL FDC_Motor_Off
.395f8f		28		plp		                    PLP
.395f90		2b		pld		                    PLD
.395f91		ab		plb		                    PLB
.395f92		6b		rtl		                    RTL
.395f93						FDC_TEST_PUTBLOCK
.395f93		e2 20		sep #$20	                SEP #$20        ; set A short
.395f95		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f97		a2 00 00	ldx #$0000	                    LDX #0
.395f9a		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f9e		1a		inc a		                    INC A
.395f9f		e8		inx		                    INX
.395fa0		e0 00 02	cpx #$0200	                    CPX #512
.395fa3		d0 f5		bne $395f9a	                    BNE init_loop
.395fa5		c2 20		rep #$20	                REP #$20        ; set A long
.395fa7		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395faa		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395fae		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395fb1		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395fb5		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395fb8		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395fbc		a9 00 00	lda #$0000	                    LDA #0
.395fbf		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395fc3		22 52 67 39	jsl $396752	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395fc7		6b		rtl		                    RTL
>395fc8		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395fd0		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395fe0		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395fe4						FDC_Check_RQM
.395fe4		0b		phd		                    PHD
.395fe5		08		php		                    PHP
.395fe6		48		pha		                PHA             ; begin setdp macro
.395fe7		08		php		                PHP
.395fe8		c2 20		rep #$20	                REP #$20        ; set A long
.395fea		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fed		5b		tcd		                TCD
.395fee		28		plp		                PLP
.395fef		68		pla		                PLA             ; end setdp macro
.395ff0		e2 20		sep #$20	                SEP #$20        ; set A short
.395ff2		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ff4		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.395ff8		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ffa		30 12		bmi $39600e	                    BMI time_out            ; If so: signal a time out
.395ffc		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396000		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396002		f0 f4		beq $395ff8	                    BEQ loop
.396004		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396006		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.39600a		28		plp		                    PLP
.39600b		2b		pld		                    PLD
.39600c		38		sec		                    SEC
.39600d		60		rts		                    RTS
.39600e		28		plp		time_out            PLP
.39600f		2b		pld		                    PLD
.396010		18		clc		                    CLC
.396011		60		rts		                    RTS
.396012						FDC_Check_DRV0_BSY
.396012		0b		phd		                    PHD
.396013		08		php		                    PHP
.396014		48		pha		                PHA             ; begin setdp macro
.396015		08		php		                PHP
.396016		c2 20		rep #$20	                REP #$20        ; set A long
.396018		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39601b		5b		tcd		                TCD
.39601c		28		plp		                PLP
.39601d		68		pla		                PLA             ; end setdp macro
.39601e		e2 20		sep #$20	                SEP #$20        ; set A short
.396020		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396022		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396026		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396028		30 12		bmi $39603c	                    BMI time_out            ; If so: signal a time out
.39602a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39602e		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.396030		d0 f4		bne $396026	                    BNE loop
.396032		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396034		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396038		28		plp		                    PLP
.396039		2b		pld		                    PLD
.39603a		38		sec		                    SEC
.39603b		60		rts		                    RTS
.39603c		28		plp		time_out            PLP
.39603d		2b		pld		                    PLD
.39603e		18		clc		                    CLC
.39603f		60		rts		                    RTS
.396040						FDC_Check_CMD_BSY
.396040		0b		phd		                    PHD
.396041		08		php		                    PHP
.396042		48		pha		                PHA             ; begin setdp macro
.396043		08		php		                PHP
.396044		c2 20		rep #$20	                REP #$20        ; set A long
.396046		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396049		5b		tcd		                TCD
.39604a		28		plp		                PLP
.39604b		68		pla		                PLA             ; end setdp macro
.39604c		e2 20		sep #$20	                SEP #$20        ; set A short
.39604e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396050		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396054		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396056		30 12		bmi $39606a	                    BMI time_out            ; If so: signal a time out
.396058		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39605c		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39605e		d0 f4		bne $396054	                    BNE loop
.396060		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396062		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396066		28		plp		                    PLP
.396067		2b		pld		                    PLD
.396068		38		sec		                    SEC
.396069		60		rts		                    RTS
.39606a		28		plp		time_out            PLP
.39606b		2b		pld		                    PLD
.39606c		18		clc		                    CLC
.39606d		60		rts		                    RTS
.39606e						FDC_Can_Read_Data
.39606e		0b		phd		                    PHD
.39606f		08		php		                    PHP
.396070		48		pha		                PHA             ; begin setdp macro
.396071		08		php		                PHP
.396072		c2 20		rep #$20	                REP #$20        ; set A long
.396074		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396077		5b		tcd		                TCD
.396078		28		plp		                PLP
.396079		68		pla		                PLA             ; end setdp macro
.39607a		e2 20		sep #$20	                SEP #$20        ; set A short
.39607c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39607e		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396082		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396084		30 14		bmi $39609a	                    BMI time_out            ; If so: signal a time out
.396086		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39608a		29 40		and #$40	                    AND #FDC_MSR_DIO
.39608c		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.39608e		d0 f2		bne $396082	                    BNE loop
.396090		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396092		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.396096		28		plp		                    PLP
.396097		2b		pld		                    PLD
.396098		38		sec		                    SEC
.396099		60		rts		                    RTS
.39609a		28		plp		time_out            PLP
.39609b		2b		pld		                    PLD
.39609c		18		clc		                    CLC
.39609d		60		rts		                    RTS
.39609e						FDC_CAN_WRITE
.39609e		0b		phd		                    PHD
.39609f		08		php		                    PHP
.3960a0		48		pha		                PHA             ; begin setdp macro
.3960a1		08		php		                PHP
.3960a2		c2 20		rep #$20	                REP #$20        ; set A long
.3960a4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960a7		5b		tcd		                TCD
.3960a8		28		plp		                PLP
.3960a9		68		pla		                PLA             ; end setdp macro
.3960aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ac		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3960ae		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.3960b2		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3960b4		30 14		bmi $3960ca	                    BMI time_out            ; If so: signal a time out
.3960b6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3960ba		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960bc		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3960be		d0 f2		bne $3960b2	                    BNE loop
.3960c0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3960c2		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.3960c6		28		plp		                    PLP
.3960c7		2b		pld		                    PLD
.3960c8		38		sec		                    SEC
.3960c9		60		rts		                    RTS
.3960ca		28		plp		time_out            PLP
.3960cb		2b		pld		                    PLD
.3960cc		18		clc		                    CLC
.3960cd		60		rts		                    RTS
.3960ce						FDC_DELAY_10MS
.3960ce		da		phx		                    PHX
.3960cf		08		php		                    PHP
.3960d0		c2 10		rep #$10	                REP #$10        ; set X long
.3960d2		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.3960d5		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.3960d6		ca		dex		                    DEX
.3960d7		e0 00 00	cpx #$0000	                    CPX #0
.3960da		d0 f9		bne $3960d5	                    BNE loop
.3960dc		28		plp		                    PLP
.3960dd		fa		plx		                    PLX
.3960de		6b		rtl		                    RTL
.3960df						FDC_COMMAND
.3960df		da		phx		                    PHX
.3960e0		8b		phb		                    PHB
.3960e1		0b		phd		                    PHD
.3960e2		08		php		                    PHP
.3960e3		48		pha		                PHA             ; begin setdbr macro
.3960e4		08		php		                PHP
.3960e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3960e7		a9 00		lda #$00	                LDA #0
.3960e9		48		pha		                PHA
.3960ea		ab		plb		                PLB
.3960eb		28		plp		                PLP
.3960ec		68		pla		                PLA             ; end setdbr macro
.3960ed		48		pha		                PHA             ; begin setdp macro
.3960ee		08		php		                PHP
.3960ef		c2 20		rep #$20	                REP #$20        ; set A long
.3960f1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960f4		5b		tcd		                TCD
.3960f5		28		plp		                PLP
.3960f6		68		pla		                PLA             ; end setdp macro
.3960f7		22 ce 60 39	jsl $3960ce	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3960fb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3960fd		a2 00		ldx #$00	                    LDX #0
.3960ff		a9 00		lda #$00	                    LDA #0
.396101		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.396104		e8		inx		                    INX
.396105		e0 10		cpx #$10	                    CPX #16
.396107		d0 f8		bne $396101	                    BNE clr_results
.396109		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.39610d		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39610f		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396111		f0 04		beq $396117	                    BEQ start_send                          ; If so, start sending
.396113		22 2c 62 39	jsl $39622c	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.396117						start_send
.396117		e2 10		sep #$10	                SEP #$10        ; set X short
.396119		a2 00		ldx #$00	                    LDX #0
.39611b		20 e4 5f	jsr $395fe4	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.39611e		b0 03		bcs $396123	                    BCS send_param
.396120		82 5e 00	brl $396181	                    BRL time_out                            ; If there was a timeout, flag the time out
.396123		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.396126		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.39612a		22 ce 60 39	jsl $3960ce	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.39612e		e8		inx		                    INX                                     ; Advance to the next byte
.39612f		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.396132		d0 e7		bne $39611b	                    BNE send_loop                           ; Keep sending until we've sent them all
.396134		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.396137		d0 03		bne $39613c	                    BNE chk_data_dir
.396139		82 80 00	brl $3961bc	                    BRL result_phase                        ; If 0: we just want a result
.39613c		10 3c		bpl $39617a	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.39613e						wr_data
.39613e		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396140		30 03		bmi $396145	                    BMI wr_chk_rqm
.396142		82 3c 00	brl $396181	                    BRL time_out                            ; If not, raise an error
.396145		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.396149		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.39614b		f0 f1		beq $39613e	                    BEQ wr_data_rdy
.39614d		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.39614f		d0 03		bne $396154	                    BNE wr_data_phase                       ; If so: transfer the data
.396151		82 68 00	brl $3961bc	                    BRL result_phase                          ; If not: it's an error
.396154						wr_data_phase
.396154		c2 10		rep #$10	                REP #$10        ; set X long
.396156		a0 00 00	ldy #$0000	                    LDY #0
.396159		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39615b		30 03		bmi $396160	                    BMI wr_chk_nondma
.39615d		82 21 00	brl $396181	                    BRL time_out                            ; If not, raise an error
.396160		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396164		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396166		f0 54		beq $3961bc	                    BEQ result_phase                        ; If not: break out to result phase
.396168		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.39616a		f0 ed		beq $396159	                    BEQ wr_data_loop                        ; No: keep waiting
.39616c		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.39616e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.396172		c8		iny		                    INY                                     ; Move to the next position
.396173		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396176		d0 e1		bne $396159	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.396178		80 42		bra $3961bc	                    BRA result_phase                        ; ready for the result phase
.39617a		20 6e 60	jsr $39606e	rd_data             JSR FDC_Can_Read_Data
.39617d		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39617f		30 07		bmi $396188	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.396181						time_out
.396181		e2 20		sep #$20	                SEP #$20        ; set A short
.396183		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396185		82 9c 00	brl $396224	                    BRL pass_error
.396188		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.39618c		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39618e		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396190		d0 eb		bne $39617d	                    BNE rd_data_rdy
.396192		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396196		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396198		d0 03		bne $39619d	                    BNE rd_data_phase                       ; If so: transfer the data
.39619a		82 83 00	brl $396220	                    BRL error                               ; If not: it's an error
.39619d						rd_data_phase
.39619d		c2 10		rep #$10	                REP #$10        ; set X long
.39619f		a0 00 00	ldy #$0000	                    LDY #0
.3961a2		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3961a4		10 db		bpl $396181	                    BPL time_out                            ; If not: throw a timeout error
.3961a6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.3961aa		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3961ac		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.3961ae		d0 f2		bne $3961a2	                    BNE rd_data_loop
.3961b0		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.3961b4		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.3961b6		c8		iny		                    INY                                     ; Move to the next position
.3961b7		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3961ba		d0 e6		bne $3961a2	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.3961bc		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.3961bf		f0 34		beq $3961f5	                    BEQ chk_busy                            ; Then we're done
.3961c1		e2 10		sep #$10	                SEP #$10        ; set X short
.3961c3		a2 00		ldx #$00	                    LDX #0
.3961c5		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3961c7		22 0c 41 39	jsl $39410c	                    JSL ISETTIMEOUT
.3961cb		20 6e 60	jsr $39606e	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961ce		90 b1		bcc $396181	                    BCC time_out                            ; If there was a time out, raise an error
.3961d0		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961d4		20 6e 60	jsr $39606e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961d7		90 a8		bcc $396181	                    BCC time_out                            ; If there was a time out, raise an error
.3961d9		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961dd		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3961e0		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM
.3961e3		90 9c		bcc $396181	                    BCC time_out                            ; If there was a time out, flag the error
.3961e5		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3961e9		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961eb		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961ed		d0 06		bne $3961f5	                    BNE chk_busy
.3961ef		e8		inx		                    INX                                     ; Move to the next result positions
.3961f0		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3961f3		d0 e4		bne $3961d9	                    BNE read_result                         ; And keep looping until we've read all
.3961f5						chk_busy
.3961f5		c2 10		rep #$10	                REP #$10        ; set X long
.3961f7		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3961fa		22 22 16 39	jsl $391622	                    JSL ILOOP_MS
.3961fe		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396202		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396204		f0 12		beq $396218	                    BEQ done                                ; If not set: we're done
.396206		20 6e 60	jsr $39606e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396209		b0 03		bcs $39620e	                    BCS get_result_byte
.39620b		82 73 ff	brl $396181	                    BRL time_out                            ; If there was a time out, flag the error
.39620e		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396212		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396215		e8		inx		                    INX
.396216		80 dd		bra $3961f5	                    BRA chk_busy                            ; And keep checking
.396218						done
.396218		64 20		stz $0320	                    STZ BIOS_STATUS
.39621a		28		plp		                    PLP
.39621b		2b		pld		                    PLD
.39621c		ab		plb		                    PLB
.39621d		fa		plx		                    PLX
.39621e		38		sec		                    SEC
.39621f		6b		rtl		                    RTL
.396220						error
.396220		e2 20		sep #$20	                SEP #$20        ; set A short
.396222		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396224		85 20		sta $0320	pass_error          STA BIOS_STATUS
.396226		28		plp		                    PLP
.396227		2b		pld		                    PLD
.396228		ab		plb		                    PLB
.396229		fa		plx		                    PLX
.39622a		18		clc		                    CLC
.39622b		6b		rtl		                    RTL
.39622c						FDC_Init
.39622c		08		php		                    PHP
.39622d		c2 10		rep #$10	                REP #$10        ; set X long
.39622f		e2 20		sep #$20	                SEP #$20        ; set A short
.396231		a9 00		lda #$00	                    LDA #0
.396233		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396237		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.39623a		a0 00 00	ldy #$0000	                    LDY #0
.39623d		22 2f 16 39	jsl $39162f	                    JSL IDELAY
.396241		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396243		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396247		ea		nop		                    NOP
.396248		ea		nop		                    NOP
.396249		ea		nop		                    NOP
.39624a		ea		nop		                    NOP
.39624b		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.39624d		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396251		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.396253		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396257		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39625a		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.39625d		22 2f 16 39	jsl $39162f	                    JSL IDELAY
.396261		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.396265		90 25		bcc $39628c	                    BCC pass_failure
.396267		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.39626b		90 1f		bcc $39628c	                    BCC pass_failure
.39626d		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.396271		90 19		bcc $39628c	                    BCC pass_failure
.396273		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.396277		90 13		bcc $39628c	                    BCC pass_failure
.396279		22 fe 63 39	jsl $3963fe	                    JSL FDC_Configure_Command
.39627d		90 0d		bcc $39628c	                    BCC pass_failure
.39627f		22 a5 63 39	jsl $3963a5	                    JSL FDC_Specify_Command
.396283		90 07		bcc $39628c	                    BCC pass_failure
.396285		22 a8 62 39	jsl $3962a8	                    JSL FDC_Motor_On
.396289		28		plp		                    PLP
.39628a		38		sec		                    SEC
.39628b		6b		rtl		                    RTL
.39628c		28		plp		pass_failure        PLP
.39628d		18		clc		                    CLC
.39628e		6b		rtl		                    RTL
.39628f						FDC_MOTOR_NEEDED
.39628f		08		php		                    PHP
.396290		c2 20		rep #$20	                REP #$20        ; set A long
.396292		78		sei		                    SEI                         ; Turn off interrupts
.396293		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396296		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39629a		e2 20		sep #$20	                SEP #$20        ; set A short
.39629c		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962a0		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3962a2		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962a6		28		plp		                    PLP
.3962a7		6b		rtl		                    RTL
.3962a8						FDC_Motor_On
.3962a8		08		php		                    PHP
.3962a9		22 8f 62 39	jsl $39628f	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3962ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3962af		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3962b3		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3962b5		d0 1f		bne $3962d6	                    BNE done                    ; If so: skip
.3962b7		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3962b9		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3962bd		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3962c0		90 17		bcc $3962d9	                    BCC time_out
.3962c2		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3962c5		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3962c8		22 2f 16 39	jsl $39162f	                    JSL IDELAY
.3962cc		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962d0		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3962d2		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962d6		28		plp		done                PLP
.3962d7		38		sec		                    SEC
.3962d8		6b		rtl		                    RTL
.3962d9		28		plp		time_out            PLP                         ; Return a timeout error
.3962da		18		clc		                    CLC
.3962db		6b		rtl		                    RTL
.3962dc						FDC_Motor_Off
.3962dc		08		php		                    PHP
.3962dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3962df		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3962e1		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3962e5		c2 20		rep #$20	                REP #$20        ; set A long
.3962e7		78		sei		                    SEI                         ; Turn off interrupts
.3962e8		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3962eb		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3962ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3962f1		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962f5		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3962f7		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962fb		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962ff		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.396301		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396305		28		plp		                    PLP
.396306		6b		rtl		                    RTL
.396307						FDC_Recalibrate_Command
.396307		0b		phd		                    PHD
.396308		08		php		                    PHP
.396309		48		pha		                PHA             ; begin setdp macro
.39630a		08		php		                PHP
.39630b		c2 20		rep #$20	                REP #$20        ; set A long
.39630d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396310		5b		tcd		                TCD
.396311		28		plp		                PLP
.396312		68		pla		                PLA             ; end setdp macro
.396313		22 8f 62 39	jsl $39628f	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396317		e2 20		sep #$20	                SEP #$20        ; set A short
.396319		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.39631b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39631e		a5 00		lda $0300	                    LDA FDC_DRIVE
.396320		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396323		a9 02		lda #$02	                    LDA #2
.396325		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396328		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.39632b		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39632e		22 df 60 39	jsl $3960df	                    JSL FDC_COMMAND             ; Issue the command
.396332		90 04		bcc $396338	                    BCC pass_failure            ; If failure, pass the failure up
.396334		28		plp		                    PLP
.396335		2b		pld		                    PLD
.396336		38		sec		                    SEC
.396337		6b		rtl		                    RTL
.396338		28		plp		pass_failure        PLP
.396339		2b		pld		                    PLD
.39633a		18		clc		                    CLC
.39633b		6b		rtl		                    RTL
.39633c						FDC_Sense_Int_Status
.39633c		8b		phb		                    PHB
.39633d		0b		phd		                    PHD
.39633e		08		php		                    PHP
.39633f		48		pha		                PHA             ; begin setdbr macro
.396340		08		php		                PHP
.396341		e2 20		sep #$20	                SEP #$20        ; set A short
.396343		a9 00		lda #$00	                LDA #0
.396345		48		pha		                PHA
.396346		ab		plb		                PLB
.396347		28		plp		                PLP
.396348		68		pla		                PLA             ; end setdbr macro
.396349		48		pha		                PHA             ; begin setdp macro
.39634a		08		php		                PHP
.39634b		c2 20		rep #$20	                REP #$20        ; set A long
.39634d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396350		5b		tcd		                TCD
.396351		28		plp		                PLP
.396352		68		pla		                PLA             ; end setdp macro
.396353		c2 30		rep #$30	                REP #$30        ; set A&X long
.396355		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396358		22 22 16 39	jsl $391622	                    JSL ILOOP_MS
.39635c		e2 20		sep #$20	                SEP #$20        ; set A short
.39635e		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.396360		a9 ff		lda #$ff	                    LDA #$FF
.396362		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396364		20 40 60	jsr $396040	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396367		90 30		bcc $396399	                    BCC time_out                        ; If there was a time out, raise an error
.396369		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39636c		90 2b		bcc $396399	                    BCC time_out                        ; If there was a time out, raise an error
.39636e		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.396370		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396374		20 6e 60	jsr $39606e	                    JSR FDC_Can_Read_Data
.396377		90 20		bcc $396399	                    BCC time_out                        ; If there was a time out, raise an error
.396379		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39637c		90 1b		bcc $396399	                    BCC time_out                        ; If there was a time out, raise an error
.39637e		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396382		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396384		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396387		90 10		bcc $396399	                    BCC time_out                        ; If there was a time out, raise an error
.396389		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39638d		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39638f		e2 20		sep #$20	                SEP #$20        ; set A short
.396391		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396394		28		plp		                    PLP
.396395		2b		pld		                    PLD
.396396		ab		plb		                    PLB
.396397		38		sec		                    SEC
.396398		6b		rtl		                    RTL
.396399						time_out
.396399		e2 20		sep #$20	                SEP #$20        ; set A short
.39639b		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.39639d		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963a0		28		plp		                    PLP
.3963a1		2b		pld		                    PLD
.3963a2		ab		plb		                    PLB
.3963a3		18		clc		                    CLC
.3963a4		6b		rtl		                    RTL
.3963a5						FDC_Specify_Command
.3963a5		8b		phb		                    PHB
.3963a6		0b		phd		                    PHD
.3963a7		08		php		                    PHP
.3963a8		48		pha		                PHA             ; begin setdbr macro
.3963a9		08		php		                PHP
.3963aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3963ac		a9 00		lda #$00	                LDA #0
.3963ae		48		pha		                PHA
.3963af		ab		plb		                PLB
.3963b0		28		plp		                PLP
.3963b1		68		pla		                PLA             ; end setdbr macro
.3963b2		48		pha		                PHA             ; begin setdp macro
.3963b3		08		php		                PHP
.3963b4		c2 20		rep #$20	                REP #$20        ; set A long
.3963b6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963b9		5b		tcd		                TCD
.3963ba		28		plp		                PLP
.3963bb		68		pla		                PLA             ; end setdp macro
.3963bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963be		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3963c1		22 22 16 39	jsl $391622	                    JSL ILOOP_MS
.3963c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3963c7		20 40 60	jsr $396040	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963ca		90 26		bcc $3963f2	                    BCC time_out            ; If there was a time out, raise an error
.3963cc		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963cf		90 21		bcc $3963f2	                    BCC time_out            ; If there was a time out, raise an error
.3963d1		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3963d3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963d7		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963da		90 16		bcc $3963f2	                    BCC time_out            ; If there was a time out, raise an error
.3963dc		a9 cf		lda #$cf	                    LDA #$CF
.3963de		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963e2		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963e5		90 0b		bcc $3963f2	                    BCC time_out            ; If there was a time out, raise an error
.3963e7		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3963e9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963ed		28		plp		                    PLP
.3963ee		2b		pld		                    PLD
.3963ef		ab		plb		                    PLB
.3963f0		38		sec		                    SEC
.3963f1		6b		rtl		                    RTL
.3963f2						time_out
.3963f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3963f4		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963f6		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963f9		28		plp		                    PLP
.3963fa		2b		pld		                    PLD
.3963fb		ab		plb		                    PLB
.3963fc		18		clc		                    CLC
.3963fd		6b		rtl		                    RTL
.3963fe						FDC_Configure_Command
.3963fe		8b		phb		                    PHB
.3963ff		0b		phd		                    PHD
.396400		08		php		                    PHP
.396401		48		pha		                PHA             ; begin setdbr macro
.396402		08		php		                PHP
.396403		e2 20		sep #$20	                SEP #$20        ; set A short
.396405		a9 00		lda #$00	                LDA #0
.396407		48		pha		                PHA
.396408		ab		plb		                PLB
.396409		28		plp		                PLP
.39640a		68		pla		                PLA             ; end setdbr macro
.39640b		48		pha		                PHA             ; begin setdp macro
.39640c		08		php		                PHP
.39640d		c2 20		rep #$20	                REP #$20        ; set A long
.39640f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396412		5b		tcd		                TCD
.396413		28		plp		                PLP
.396414		68		pla		                PLA             ; end setdp macro
.396415		c2 30		rep #$30	                REP #$30        ; set A&X long
.396417		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39641a		22 22 16 39	jsl $391622	                    JSL ILOOP_MS
.39641e		e2 20		sep #$20	                SEP #$20        ; set A short
.396420		20 40 60	jsr $396040	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396423		90 36		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.396425		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396428		90 31		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.39642a		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39642c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396430		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396433		90 26		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.396435		a9 00		lda #$00	                    LDA #$00
.396437		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39643b		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39643e		90 1b		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.396440		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396442		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396446		20 e4 5f	jsr $395fe4	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396449		90 10		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.39644b		a9 00		lda #$00	                    LDA #$00
.39644d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396451		20 40 60	jsr $396040	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396454		90 05		bcc $39645b	                    BCC time_out            ; If there was a time out, raise an error
.396456		28		plp		                    PLP
.396457		2b		pld		                    PLD
.396458		ab		plb		                    PLB
.396459		38		sec		                    SEC
.39645a		6b		rtl		                    RTL
.39645b						time_out
.39645b		e2 20		sep #$20	                SEP #$20        ; set A short
.39645d		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39645f		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396462		28		plp		                    PLP
.396463		2b		pld		                    PLD
.396464		ab		plb		                    PLB
.396465		18		clc		                    CLC
.396466		6b		rtl		                    RTL
.396467						FDC_Read_ID_Command
.396467		8b		phb		                    PHB
.396468		0b		phd		                    PHD
.396469		08		php		                    PHP
.39646a		48		pha		                PHA             ; begin setdbr macro
.39646b		08		php		                PHP
.39646c		e2 20		sep #$20	                SEP #$20        ; set A short
.39646e		a9 00		lda #$00	                LDA #0
.396470		48		pha		                PHA
.396471		ab		plb		                PLB
.396472		28		plp		                PLP
.396473		68		pla		                PLA             ; end setdbr macro
.396474		48		pha		                PHA             ; begin setdp macro
.396475		08		php		                PHP
.396476		c2 20		rep #$20	                REP #$20        ; set A long
.396478		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39647b		5b		tcd		                TCD
.39647c		28		plp		                PLP
.39647d		68		pla		                PLA             ; end setdp macro
.39647e		e2 20		sep #$20	                SEP #$20        ; set A short
.396480		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396482		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396485		a9 01		lda #$01	                    LDA #1
.396487		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39648a		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39648d		a9 07		lda #$07	                    LDA #7
.39648f		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396492		22 df 60 39	jsl $3960df	                    JSL FDC_COMMAND                     ; Issue the command
.396496		90 27		bcc $3964bf	                    BCC pass_failure
.396498		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.39649b		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39649d		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3964a0		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3964a2		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3964a5		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3964a7		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3964aa		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3964ac		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3964af		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3964b1		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3964b4		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3964b6		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3964b9		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3964bb		28		plp		                    PLP
.3964bc		2b		pld		                    PLD
.3964bd		ab		plb		                    PLB
.3964be		6b		rtl		                    RTL
.3964bf		28		plp		pass_failure        PLP
.3964c0		2b		pld		                    PLD
.3964c1		ab		plb		                    PLB
.3964c2		18		clc		                    CLC
.3964c3		6b		rtl		                    RTL
.3964c4						FDC_DumpReg_Command
.3964c4		0b		phd		                    PHD
.3964c5		08		php		                    PHP
.3964c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3964c8		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3964ca		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964cd		a9 01		lda #$01	                    LDA #1
.3964cf		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3964d2		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964d5		a9 0a		lda #$0a	                    LDA #10
.3964d7		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3964da		22 df 60 39	jsl $3960df	                    JSL FDC_COMMAND                     ; Issue the command
.3964de		90 03		bcc $3964e3	                    BCC pass_failure
.3964e0		28		plp		                    PLP
.3964e1		2b		pld		                    PLD
.3964e2		6b		rtl		                    RTL
.3964e3		28		plp		pass_failure        PLP
.3964e4		2b		pld		                    PLD
.3964e5		18		clc		                    CLC
.3964e6		6b		rtl		                    RTL
.3964e7						FDC_Seek_Track
.3964e7		8b		phb		                    PHB
.3964e8		0b		phd		                    PHD
.3964e9		08		php		                    PHP
.3964ea		48		pha		                PHA             ; begin setdbr macro
.3964eb		08		php		                PHP
.3964ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3964ee		a9 00		lda #$00	                LDA #0
.3964f0		48		pha		                PHA
.3964f1		ab		plb		                PLB
.3964f2		28		plp		                PLP
.3964f3		68		pla		                PLA             ; end setdbr macro
.3964f4		48		pha		                PHA             ; begin setdp macro
.3964f5		08		php		                PHP
.3964f6		c2 20		rep #$20	                REP #$20        ; set A long
.3964f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964fb		5b		tcd		                TCD
.3964fc		28		plp		                PLP
.3964fd		68		pla		                PLA             ; end setdp macro
.3964fe		22 8f 62 39	jsl $39628f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396502		e2 20		sep #$20	                SEP #$20        ; set A short
.396504		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396506		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396509		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39650b		29 01		and #$01	                    AND #$01
.39650d		0a		asl a		                    ASL A
.39650e		0a		asl a		                    ASL A
.39650f		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396511		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396514		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396516		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396519		a9 03		lda #$03	                    LDA #3
.39651b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39651e		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396521		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396524		22 df 60 39	jsl $3960df	                    JSL FDC_COMMAND                     ; Issue the command
.396528		90 05		bcc $39652f	                    BCC pass_failure
.39652a		28		plp		                    PLP
.39652b		2b		pld		                    PLD
.39652c		ab		plb		                    PLB
.39652d		38		sec		                    SEC
.39652e		6b		rtl		                    RTL
.39652f		28		plp		pass_failure        PLP
.396530		2b		pld		                    PLD
.396531		ab		plb		                    PLB
.396532		18		clc		                    CLC
.396533		6b		rtl		                    RTL
.396534						FDC_Read_Sector
.396534		8b		phb		                    PHB
.396535		0b		phd		                    PHD
.396536		08		php		                    PHP
.396537		48		pha		                PHA             ; begin setdbr macro
.396538		08		php		                PHP
.396539		e2 20		sep #$20	                SEP #$20        ; set A short
.39653b		a9 00		lda #$00	                LDA #0
.39653d		48		pha		                PHA
.39653e		ab		plb		                PLB
.39653f		28		plp		                PLP
.396540		68		pla		                PLA             ; end setdbr macro
.396541		48		pha		                PHA             ; begin setdp macro
.396542		08		php		                PHP
.396543		c2 20		rep #$20	                REP #$20        ; set A long
.396545		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396548		5b		tcd		                TCD
.396549		28		plp		                PLP
.39654a		68		pla		                PLA             ; end setdp macro
.39654b		22 8f 62 39	jsl $39628f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39654f		e2 20		sep #$20	                SEP #$20        ; set A short
.396551		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396553		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396555		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396558		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39655a		29 01		and #$01	                    AND #$01
.39655c		0a		asl a		                    ASL A
.39655d		0a		asl a		                    ASL A
.39655e		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396560		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396563		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396565		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396568		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39656a		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39656d		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39656f		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396572		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396574		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396577		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396579		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39657c		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39657e		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396581		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396583		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396586		a9 09		lda #$09	                    LDA #9
.396588		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39658b		a9 01		lda #$01	                    LDA #1
.39658d		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.396590		a9 07		lda #$07	                    LDA #7
.396592		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396595		22 df 60 39	jsl $3960df	command             JSL FDC_COMMAND                     ; Issue the command
.396599		08		php		                    PHP
.39659a		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39659d		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39659f		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3965a2		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3965a4		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3965a7		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3965a9		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3965ac		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3965ae		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3965b1		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3965b3		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3965b6		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3965b8		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3965bb		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3965bd		28		plp		                    PLP
.3965be		90 04		bcc $3965c4	                    BCC pass_failure
.3965c0		28		plp		done                PLP
.3965c1		2b		pld		                    PLD
.3965c2		ab		plb		                    PLB
.3965c3		6b		rtl		                    RTL
.3965c4		28		plp		pass_failure        PLP
.3965c5		2b		pld		                    PLD
.3965c6		ab		plb		                    PLB
.3965c7		18		clc		                    CLC
.3965c8		6b		rtl		                    RTL
.3965c9						FDC_Write_Sector
.3965c9		8b		phb		                    PHB
.3965ca		0b		phd		                    PHD
.3965cb		08		php		                    PHP
.3965cc		48		pha		                PHA             ; begin setdbr macro
.3965cd		08		php		                PHP
.3965ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3965d0		a9 00		lda #$00	                LDA #0
.3965d2		48		pha		                PHA
.3965d3		ab		plb		                PLB
.3965d4		28		plp		                PLP
.3965d5		68		pla		                PLA             ; end setdbr macro
.3965d6		48		pha		                PHA             ; begin setdp macro
.3965d7		08		php		                PHP
.3965d8		c2 20		rep #$20	                REP #$20        ; set A long
.3965da		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965dd		5b		tcd		                TCD
.3965de		28		plp		                PLP
.3965df		68		pla		                PLA             ; end setdp macro
.3965e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3965e2		22 8f 62 39	jsl $39628f	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3965e6		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3965e8		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3965ea		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3965ed		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3965ef		29 01		and #$01	                    AND #$01
.3965f1		0a		asl a		                    ASL A
.3965f2		0a		asl a		                    ASL A
.3965f3		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3965f5		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3965f8		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3965fa		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3965fd		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3965ff		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396602		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396604		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396607		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396609		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39660c		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39660e		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396611		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396613		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396616		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396618		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39661b		a9 09		lda #$09	                    LDA #9
.39661d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396620		a9 ff		lda #$ff	                    LDA #$FF
.396622		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396625		a9 07		lda #$07	                    LDA #7
.396627		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39662a		22 df 60 39	jsl $3960df	command             JSL FDC_COMMAND                     ; Issue the command
.39662e		08		php		                    PHP
.39662f		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396632		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396634		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396637		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396639		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39663c		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39663e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396641		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396643		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396646		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396648		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39664b		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39664d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396650		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396652		28		plp		check_status        PLP
.396653		90 04		bcc $396659	                    BCC pass_failure
.396655		28		plp		done                PLP
.396656		2b		pld		                    PLD
.396657		ab		plb		                    PLB
.396658		6b		rtl		                    RTL
.396659		28		plp		pass_failure        PLP
.39665a		2b		pld		                    PLD
.39665b		ab		plb		                    PLB
.39665c		18		clc		                    CLC
.39665d		6b		rtl		                    RTL
.39665e						DIVIDE32
.39665e		da		phx		                    PHX
.39665f		5a		phy		                    PHY
.396660		0b		phd		                    PHD
.396661		08		php		                    PHP
.396662		48		pha		                PHA             ; begin setdp macro
.396663		08		php		                PHP
.396664		c2 20		rep #$20	                REP #$20        ; set A long
.396666		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396669		5b		tcd		                TCD
.39666a		28		plp		                PLP
.39666b		68		pla		                PLA             ; end setdp macro
.39666c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39666e		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.396670		64 0a		stz $0316	                    STZ REMAINDER+2
.396672		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396675		06 00		asl $030c	loop                ASL DIVIDEND
.396677		26 02		rol $030e	                    ROL DIVIDEND+2
.396679		26 08		rol $0314	                    ROL REMAINDER
.39667b		26 0a		rol $0316	                    ROL REMAINDER+2
.39667d		a5 08		lda $0314	                    LDA REMAINDER
.39667f		38		sec		                    SEC
.396680		e5 04		sbc $0310	                    SBC DIVISOR
.396682		a8		tay		                    TAY
.396683		a5 0a		lda $0316	                    LDA REMAINDER+2
.396685		e5 06		sbc $0312	                    SBC DIVISOR+2
.396687		90 06		bcc $39668f	                    BCC skip
.396689		85 0a		sta $0316	                    STA REMAINDER+2
.39668b		84 08		sty $0314	                    STY REMAINDER
.39668d		e6 00		inc $030c	                    INC DIVIDEND
.39668f		ca		dex		skip                DEX
.396690		d0 e3		bne $396675	                    BNE loop
.396692		28		plp		                    PLP
.396693		2b		pld		                    PLD
.396694		7a		ply		                    PLY
.396695		fa		plx		                    PLX
.396696		60		rts		                    RTS
.396697						LBA2CHS
.396697		8b		phb		                    PHB
.396698		0b		phd		                    PHD
.396699		08		php		                    PHP
.39669a		48		pha		                PHA             ; begin setdbr macro
.39669b		08		php		                PHP
.39669c		e2 20		sep #$20	                SEP #$20        ; set A short
.39669e		a9 00		lda #$00	                LDA #0
.3966a0		48		pha		                PHA
.3966a1		ab		plb		                PLB
.3966a2		28		plp		                PLP
.3966a3		68		pla		                PLA             ; end setdbr macro
.3966a4		48		pha		                PHA             ; begin setdp macro
.3966a5		08		php		                PHP
.3966a6		c2 20		rep #$20	                REP #$20        ; set A long
.3966a8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966ab		5b		tcd		                TCD
.3966ac		28		plp		                PLP
.3966ad		68		pla		                PLA             ; end setdp macro
.3966ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.3966b0		a5 22		lda $0322	                    LDA BIOS_LBA
.3966b2		85 0c		sta $030c	                    STA DIVIDEND
.3966b4		a5 24		lda $0324	                    LDA BIOS_LBA+2
.3966b6		85 0e		sta $030e	                    STA DIVIDEND+2
.3966b8		a9 24 00	lda #$0024	                    LDA #36
.3966bb		85 10		sta $0310	                    STA DIVISOR
.3966bd		64 12		stz $0312	                    STZ DIVISOR+2
.3966bf		20 5e 66	jsr $39665e	                    JSR DIVIDE32
.3966c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3966c4		a5 0c		lda $030c	                    LDA DIVIDEND
.3966c6		85 02		sta $0302	                    STA FDC_CYLINDER
.3966c8		c2 20		rep #$20	                REP #$20        ; set A long
.3966ca		a5 14		lda $0314	                    LDA REMAINDER
.3966cc		85 0c		sta $030c	                    STA DIVIDEND
.3966ce		a5 16		lda $0316	                    LDA REMAINDER+2
.3966d0		85 0e		sta $030e	                    STA DIVIDEND+2
.3966d2		a9 12 00	lda #$0012	                    LDA #18
.3966d5		85 10		sta $0310	                    STA DIVISOR
.3966d7		64 12		stz $0312	                    STZ DIVISOR+2
.3966d9		20 5e 66	jsr $39665e	                    JSR DIVIDE32
.3966dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3966de		a5 0c		lda $030c	                    LDA DIVIDEND
.3966e0		29 01		and #$01	                    AND #$01
.3966e2		85 01		sta $0301	                    STA FDC_HEAD
.3966e4		a5 14		lda $0314	                    LDA REMAINDER
.3966e6		1a		inc a		                    INC A
.3966e7		85 03		sta $0303	                    STA FDC_SECTOR
.3966e9		28		plp		                    PLP
.3966ea		2b		pld		                    PLD
.3966eb		ab		plb		                    PLB
.3966ec		6b		rtl		                    RTL
.3966ed						FDC_GETBLOCK
.3966ed		8b		phb		                    PHB
.3966ee		0b		phd		                    PHD
.3966ef		08		php		                    PHP
.3966f0		48		pha		                PHA             ; begin setdbr macro
.3966f1		08		php		                PHP
.3966f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3966f4		a9 00		lda #$00	                LDA #0
.3966f6		48		pha		                PHA
.3966f7		ab		plb		                PLB
.3966f8		28		plp		                PLP
.3966f9		68		pla		                PLA             ; end setdbr macro
.3966fa		48		pha		                PHA             ; begin setdp macro
.3966fb		08		php		                PHP
.3966fc		c2 20		rep #$20	                REP #$20        ; set A long
.3966fe		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396701		5b		tcd		                TCD
.396702		28		plp		                PLP
.396703		68		pla		                PLA             ; end setdp macro
.396704		e2 20		sep #$20	                SEP #$20        ; set A short
.396706		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396708		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.39670b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39670d		22 97 66 39	jsl $396697	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396711		e2 20		sep #$20	                SEP #$20        ; set A short
.396713		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396715		f0 29		beq $396740	                    BEQ read_failure
.396717						try_read
.396717		c2 20		rep #$20	                REP #$20        ; set A long
.396719		22 34 65 39	jsl $396534	                    JSL FDC_Read_Sector         ; Read the sector
.39671d		90 14		bcc $396733	                    BCC retry
.39671f		e2 20		sep #$20	                SEP #$20        ; set A short
.396721		a5 06		lda $0306	                    LDA FDC_ST0
.396723		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396725		d0 19		bne $396740	                    BNE read_failure
.396727						ret_success
.396727		e2 20		sep #$20	                SEP #$20        ; set A short
.396729		a9 00		lda #$00	                    LDA #0
.39672b		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39672e		28		plp		                    PLP
.39672f		2b		pld		                    PLD
.396730		ab		plb		                    PLB
.396731		38		sec		                    SEC
.396732		6b		rtl		                    RTL
.396733						retry
.396733		e2 20		sep #$20	                SEP #$20        ; set A short
.396735		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396738		30 13		bmi $39674d	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.39673a		22 2c 62 39	jsl $39622c	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39673e		80 d7		bra $396717	                    BRA try_read                ; And try the read again
.396740						read_failure
.396740		e2 20		sep #$20	                SEP #$20        ; set A short
.396742		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396744		80 04		bra $39674a	                    BRA ret_failure
.396746						seek_failure
.396746		e2 20		sep #$20	                SEP #$20        ; set A short
.396748		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39674a		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39674d		28		plp		pass_failure        PLP
.39674e		2b		pld		                    PLD
.39674f		ab		plb		                    PLB
.396750		18		clc		                    CLC
.396751		6b		rtl		                    RTL
.396752						FDC_PUTBLOCK
.396752		8b		phb		                    PHB
.396753		0b		phd		                    PHD
.396754		08		php		                    PHP
.396755		48		pha		                PHA             ; begin setdbr macro
.396756		08		php		                PHP
.396757		e2 20		sep #$20	                SEP #$20        ; set A short
.396759		a9 00		lda #$00	                LDA #0
.39675b		48		pha		                PHA
.39675c		ab		plb		                PLB
.39675d		28		plp		                PLP
.39675e		68		pla		                PLA             ; end setdbr macro
.39675f		48		pha		                PHA             ; begin setdp macro
.396760		08		php		                PHP
.396761		c2 20		rep #$20	                REP #$20        ; set A long
.396763		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396766		5b		tcd		                TCD
.396767		28		plp		                PLP
.396768		68		pla		                PLA             ; end setdp macro
.396769		e2 20		sep #$20	                SEP #$20        ; set A short
.39676b		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39676d		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.396770		c2 30		rep #$30	                REP #$30        ; set A&X long
.396772		22 97 66 39	jsl $396697	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396776		22 c9 65 39	jsl $3965c9	retry               JSL FDC_Write_Sector        ; Write the sector
.39677a		b0 03		bcs $39677f	                    BCS chk_st0
.39677c		82 28 00	brl $3967a7	                    BRL attempt_retry
.39677f						chk_st0
.39677f		e2 20		sep #$20	                SEP #$20        ; set A short
.396781		a5 06		lda $0306	                    LDA FDC_ST0
.396783		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396785		d0 0c		bne $396793	                    BNE write_failure
.396787						ret_success
.396787		e2 20		sep #$20	                SEP #$20        ; set A short
.396789		a9 00		lda #$00	                    LDA #0
.39678b		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39678e		28		plp		                    PLP
.39678f		2b		pld		                    PLD
.396790		ab		plb		                    PLB
.396791		38		sec		                    SEC
.396792		6b		rtl		                    RTL
.396793						write_failure
.396793		e2 20		sep #$20	                SEP #$20        ; set A short
.396795		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396797		89 02		bit #$02	                    BIT #FDC_ST1_NW
.396799		f0 04		beq $39679f	                    BEQ generic_err
.39679b		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39679d		80 17		bra $3967b6	                    BRA ret_failure
.39679f		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3967a1		d0 e4		bne $396787	                    BNE ret_success
.3967a3		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3967a5		d0 e0		bne $396787	                    BNE ret_success
.3967a7						attempt_retry
.3967a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a9		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3967ac		d0 c8		bne $396776	                    BNE retry                           ; And retry unless we have none left
.3967ae		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3967b0		80 04		bra $3967b6	                    BRA ret_failure
.3967b2						seek_failure
.3967b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3967b4		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3967b6						ret_failure
.3967b6		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3967b9		28		plp		pass_failure        PLP
.3967ba		2b		pld		                    PLD
.3967bb		ab		plb		                    PLB
.3967bc		18		clc		                    CLC
.3967bd		6b		rtl		                    RTL
.3967be						FDC_MOUNT
.3967be		8b		phb		                    PHB
.3967bf		0b		phd		                    PHD
.3967c0		08		php		                    PHP
.3967c1		48		pha		                PHA             ; begin setdbr macro
.3967c2		08		php		                PHP
.3967c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3967c5		a9 00		lda #$00	                LDA #0
.3967c7		48		pha		                PHA
.3967c8		ab		plb		                PLB
.3967c9		28		plp		                PLP
.3967ca		68		pla		                PLA             ; end setdbr macro
.3967cb		48		pha		                PHA             ; begin setdp macro
.3967cc		08		php		                PHP
.3967cd		c2 20		rep #$20	                REP #$20        ; set A long
.3967cf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967d2		5b		tcd		                TCD
.3967d3		28		plp		                PLP
.3967d4		68		pla		                PLA             ; end setdp macro
.3967d5		22 2c 62 39	jsl $39622c	                    JSL FDC_INIT
.3967d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3967db		c2 10		rep #$10	                REP #$10        ; set X long
.3967dd		a9 00		lda #$00	                    LDA #0
.3967df		a2 00 00	ldx #$0000	                    LDX #0
.3967e2		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3967e6		e8		inx		                    INX
.3967e7		e0 00 02	cpx #$0200	                    CPX #512
.3967ea		d0 f6		bne $3967e2	                    BNE zero_loop
.3967ec		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3967ee		85 00		sta $0300	                    STA FDC_DRIVE
.3967f0		22 a8 62 39	jsl $3962a8	                    JSL FDC_Motor_On                        ; Turn the motor on
.3967f4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3967f6		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3967f9		85 22		sta $0322	                    STA BIOS_LBA
.3967fb		85 24		sta $0324	                    STA BIOS_LBA+2
.3967fd		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396800		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396802		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396805		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396807		22 ed 66 39	jsl $3966ed	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.39680b		b0 03		bcs $396810	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39680d		82 d3 00	brl $3968e3	                    BRL pass_failure                        ; Pass the error up the chain
.396810						parse_boot
.396810		e2 20		sep #$20	                SEP #$20        ; set A short
.396812		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396814		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396818		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.39681a		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39681e		e2 20		sep #$20	                SEP #$20        ; set A short
.396820		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396824		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396828		c2 20		rep #$20	                REP #$20        ; set A long
.39682a		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39682d		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.396831		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396835		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396839		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.39683d		a9 00 00	lda #$0000	                    LDA #0
.396840		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396844		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396847		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.39684b		18		clc		                    CLC
.39684c		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396850		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.396854		a9 00 00	lda #$0000	                    LDA #0
.396857		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.39685b		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.39685f		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.396860		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.396864		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396868		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.39686c		a9 00 00	lda #$0000	                    LDA #0
.39686f		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.396873		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396877		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.39687b		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.39687c		4a		lsr a		                    LSR A
.39687d		4a		lsr a		                    LSR A
.39687e		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.39687f		18		clc		                    CLC
.396880		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396884		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396888		a9 00 00	lda #$0000	                    LDA #0
.39688b		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39688f		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.396893		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396897		a9 00 00	lda #$0000	                    LDA #0
.39689a		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39689e		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3968a2		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3968a6		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3968a9		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3968ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3968af		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3968b3		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3968b5		80 14		bra $3968cb	                    BRA no_volume_id                        ; No: there is no volume ID
.3968b7						is_extended
.3968b7		c2 20		rep #$20	                REP #$20        ; set A long
.3968b9		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3968bd		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3968c1		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3968c5		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3968c9		80 0d		bra $3968d8	                    BRA ret_success
.3968cb						no_volume_id
.3968cb		c2 20		rep #$20	                REP #$20        ; set A long
.3968cd		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3968d0		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3968d4		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3968d8						ret_success
.3968d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3968da		a9 00		lda #$00	                    LDA #0
.3968dc		85 20		sta $0320	                    STA BIOS_STATUS
.3968de		28		plp		                    PLP
.3968df		2b		pld		                    PLD
.3968e0		ab		plb		                    PLB
.3968e1		38		sec		                    SEC
.3968e2		6b		rtl		                    RTL
.3968e3		28		plp		pass_failure        PLP
.3968e4		2b		pld		                    PLD
.3968e5		ab		plb		                    PLB
.3968e6		18		clc		                    CLC
.3968e7		6b		rtl		                    RTL
.3968e8						FDC_CMDBLOCK
.3968e8		8b		phb		                    PHB
.3968e9		0b		phd		                    PHD
.3968ea		08		php		                    PHP
.3968eb		48		pha		                PHA             ; begin setdbr macro
.3968ec		08		php		                PHP
.3968ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3968ef		a9 00		lda #$00	                LDA #0
.3968f1		48		pha		                PHA
.3968f2		ab		plb		                PLB
.3968f3		28		plp		                PLP
.3968f4		68		pla		                PLA             ; end setdbr macro
.3968f5		48		pha		                PHA             ; begin setdp macro
.3968f6		08		php		                PHP
.3968f7		c2 20		rep #$20	                REP #$20        ; set A long
.3968f9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968fc		5b		tcd		                TCD
.3968fd		28		plp		                PLP
.3968fe		68		pla		                PLA             ; end setdp macro
.3968ff		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396901		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396903		f0 0f		beq $396914	                    BEQ motor_on
.396905		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396907		f0 11		beq $39691a	                    BEQ motor_off
.396909		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.39690b		f0 13		beq $396920	                    BEQ recalibrate
.39690d		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39690f		28		plp		                    PLP
.396910		2b		pld		                    PLD
.396911		ab		plb		                    PLB
.396912		38		sec		                    SEC
.396913		6b		rtl		                    RTL
.396914		22 a8 62 39	jsl $3962a8	motor_on            JSL FDC_Motor_On
.396918		80 f3		bra $39690d	                    BRA ret_success
.39691a		22 dc 62 39	jsl $3962dc	motor_off           JSL FDC_Motor_Off
.39691e		80 ed		bra $39690d	                    BRA ret_success
.396920		22 07 63 39	jsl $396307	recalibrate         JSL FDC_Recalibrate_Command
.396924		b0 e7		bcs $39690d	                    BCS ret_success
.396926		28		plp		pass_failure        PLP
.396927		2b		pld		                    PLD
.396928		ab		plb		                    PLB
.396929		18		clc		                    CLC
.39692a		6b		rtl		                    RTL
.39692b						FDC_CHK_MEDIA
.39692b		0b		phd		                    PHD
.39692c		08		php		                    PHP
.39692d		48		pha		                PHA             ; begin setdp macro
.39692e		08		php		                PHP
.39692f		c2 20		rep #$20	                REP #$20        ; set A long
.396931		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396934		5b		tcd		                TCD
.396935		28		plp		                PLP
.396936		68		pla		                PLA             ; end setdp macro
.396937		22 a8 62 39	jsl $3962a8	                    JSL FDC_Motor_On                ; Turn on the motor
.39693b		e2 20		sep #$20	                SEP #$20        ; set A short
.39693d		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.396941		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.396943		f0 42		beq $396987	                    BEQ ret_true                    ; If not: assume the disk is present
.396945		a9 00		lda #$00	                    LDA #0
.396947		85 00		sta $0300	                    STA FDC_DRIVE
.396949		a9 00		lda #$00	                    LDA #0
.39694b		85 01		sta $0301	                    STA FDC_HEAD
.39694d		a9 50		lda #$50	                    LDA #80
.39694f		85 02		sta $0302	                    STA FDC_CYLINDER
.396951		22 e7 64 39	jsl $3964e7	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396955		90 34		bcc $39698b	                    BCC ret_false                   ; If fail: return false
.396957		c2 10		rep #$10	                REP #$10        ; set X long
.396959		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39695c		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39695f		22 2f 16 39	jsl $39162f	                    JSL IDELAY
.396963		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.396967		a5 06		lda $0306	                    LDA FDC_ST0
.396969		29 d0		and #$d0	                    AND #%11010000
.39696b		d0 1e		bne $39698b	                    BNE ret_false
.39696d		22 07 63 39	jsl $396307	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.396971		90 18		bcc $39698b	                    BCC ret_false                   ; If fail: return false
.396973		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396976		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396979		22 2f 16 39	jsl $39162f	                    JSL IDELAY
.39697d		22 3c 63 39	jsl $39633c	                    JSL FDC_Sense_Int_Status
.396981		a5 06		lda $0306	                    LDA FDC_ST0
.396983		29 d0		and #$d0	                    AND #%11010000
.396985		d0 04		bne $39698b	                    BNE ret_false
.396987						ret_true
.396987		28		plp		                    PLP
.396988		2b		pld		                    PLD
.396989		38		sec		                    SEC
.39698a		6b		rtl		                    RTL
.39698b						ret_false
.39698b		28		plp		                    PLP
.39698c		2b		pld		                    PLD
.39698d		18		clc		                    CLC
.39698e		6b		rtl		                    RTL
.39698f						FDC_WRITEVBR
.39698f		8b		phb		                    PHB
.396990		0b		phd		                    PHD
.396991		08		php		                    PHP
.396992		48		pha		                PHA             ; begin setdbr macro
.396993		08		php		                PHP
.396994		e2 20		sep #$20	                SEP #$20        ; set A short
.396996		a9 00		lda #$00	                LDA #0
.396998		48		pha		                PHA
.396999		ab		plb		                PLB
.39699a		28		plp		                PLP
.39699b		68		pla		                PLA             ; end setdbr macro
.39699c		48		pha		                PHA             ; begin setdp macro
.39699d		08		php		                PHP
.39699e		c2 20		rep #$20	                REP #$20        ; set A long
.3969a0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3969a3		5b		tcd		                TCD
.3969a4		28		plp		                PLP
.3969a5		68		pla		                PLA             ; end setdp macro
.3969a6		22 be 67 39	jsl $3967be	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3969aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3969ac		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3969af		a2 00 00	ldx #$0000	                    LDX #0
.3969b2		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3969b6		e8		inx		                    INX
.3969b7		e8		inx		                    INX
.3969b8		e0 00 02	cpx #$0200	                    CPX #512
.3969bb		d0 f5		bne $3969b2	                    BNE clr_loop
.3969bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3969bf		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3969c2		bf 77 6a 39	lda $396a77,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3969c6		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969ca		e8		inx		                    INX
.3969cb		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3969ce		d0 f2		bne $3969c2	                    BNE copy_loop
.3969d0		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3969d3		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3969d6		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3969d8		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969dc		f0 07		beq $3969e5	                    BEQ path_copy_done
.3969de		e8		inx		                    INX
.3969df		c8		iny		                    INY
.3969e0		c0 80 00	cpy #$0080	                    CPY #128
.3969e3		d0 f1		bne $3969d6	                    BNE path_copy_loop
.3969e5						path_copy_done
.3969e5		c2 20		rep #$20	                REP #$20        ; set A long
.3969e7		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3969ea		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3969ee		c2 20		rep #$20	                REP #$20        ; set A long
.3969f0		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3969f3		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3969f5		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3969f8		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3969fa		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3969fd		85 02		sta $0322	                    STA BIOS_LBA
.3969ff		85 04		sta $0324	                    STA BIOS_LBA+2
.396a01		e2 20		sep #$20	                SEP #$20        ; set A short
.396a03		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396a05		85 01		sta $0321	                    STA BIOS_DEV
.396a07		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396a0b		b0 09		bcs $396a16	                    BCS ret_success
.396a0d		22 dc 62 39	jsl $3962dc	                    JSL FDC_Motor_Off
.396a11		28		plp		                    PLP                         ; Return the failure
.396a12		2b		pld		                    PLD
.396a13		ab		plb		                    PLB
.396a14		18		clc		                    CLC
.396a15		6b		rtl		                    RTL
.396a16		22 dc 62 39	jsl $3962dc	ret_success         JSL FDC_Motor_Off
.396a1a		e2 20		sep #$20	                SEP #$20        ; set A short
.396a1c		a9 00		lda #$00	                    LDA #0
.396a1e		85 00		sta $0320	                    STA BIOS_STATUS
.396a20		28		plp		                    PLP
.396a21		2b		pld		                    PLD
.396a22		ab		plb		                    PLB
.396a23		38		sec		                    SEC
.396a24		6b		rtl		                    RTL
.396a25						FDC_TIME_HANDLE
.396a25		08		php		                    PHP
.396a26		e2 20		sep #$20	                SEP #$20        ; set A short
.396a28		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.396a2c		d0 06		bne $396a34	                    BNE dec_motor                   ; If not zero: decrement the timer
.396a2e		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.396a32		f0 28		beq $396a5c	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.396a34		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.396a38		3a		dec a		                    DEC A
.396a39		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396a3d		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.396a3f		d0 0b		bne $396a4c	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396a41		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396a45		3a		dec a		                    DEC A
.396a46		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.396a4a		80 10		bra $396a5c	                    BRA sof_timeout                 ; And move on to the next timer
.396a4c		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.396a50		d0 0a		bne $396a5c	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.396a52		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.396a56		d0 04		bne $396a5c	                    BNE sof_timeout
.396a58		22 dc 62 39	jsl $3962dc	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.396a5c						sof_timeout
.396a5c		e2 20		sep #$20	                SEP #$20        ; set A short
.396a5e		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.396a62		f0 11		beq $396a75	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.396a64		3a		dec a		                    DEC A                           ; Count down one tick
.396a65		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.396a69		d0 0a		bne $396a75	                    BNE sof_int_done                ; If not 0, we're done
.396a6b		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.396a6f		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396a71		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.396a75		28		plp		sof_int_done        PLP
.396a76		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396a77						FDC_VBR_BEGIN
>396a77		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396a7a		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396a82		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396a84		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396a85		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396a87		02				num_fat             .byte 2                 ; Number of FATs
>396a88		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396a8a		40 0b				total_sectors       .word 2880              ; Total sectors
>396a8c		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396a8d		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396a8f		12 00				sec_per_track       .word 18                ; Sectors per track
>396a91		02 00				num_head            .word 2                 ; Number of heads
>396a93		00 00 00 00			ignore2             .dword 0
>396a97		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396a9b		00 00				ignore3             .word 0
>396a9d		29				boot_signature      .byte $29
>396a9e		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396aa2		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396aaa		20 20 20
>396aad		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396ab5		80 40		bra $396af7	                    BRA vbr_start
>396ab7						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396af7						vbr_start
.396af7		c2 20		rep #$20	                REP #$20        ; set A long
.396af9		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396afc		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396b00		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396b03		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396b07		22 96 59 39	jsl $395996	                    JSL IF_RUN              ; And try to execute the binary file
.396b0b		b0 0c		bcs $396b19	                    BCS lock                ; If it returned success... lock up... I guess?
.396b0d						error
.396b0d		e2 20		sep #$20	                SEP #$20        ; set A short
.396b0f		4b		phk		                    PHK                     ; Otherwise, print an error message
.396b10		ab		plb		                    PLB
.396b11		62 08 00	per $396b1c	                    PER message
.396b14		fa		plx		                    PLX
.396b15		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396b19		ea		nop		lock                NOP                     ; And lock up
.396b1a		80 fd		bra $396b19	                    BRA lock
>396b1c		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396b24		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396b34		65 20 62 69 6e 61 72 79 2e 0d 00
.396b3f						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396b3f						IDE_TEST
.396b3f		08		php		                PHP
.396b40		c2 20		rep #$20	                REP #$20        ; set A long
.396b42		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b45		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b49		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b4c		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b50		22 6d 6c 39	jsl $396c6d	                JSL IDE_IDENTIFY
.396b54		b0 03		bcs $396b59	                BCS id_ok
.396b56		82 ab 00	brl $396c04	                BRL done
.396b59						id_ok
.396b59		c2 10		rep #$10	                REP #$10        ; set X long
.396b5b		e2 20		sep #$20	                SEP #$20        ; set A short
.396b5d		a0 28 00	ldy #$0028	                LDY #40
.396b60		a2 36 00	ldx #$0036	                LDX #27*2
.396b63		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396b67		22 18 10 00	jsl $001018	                JSL PUTC
.396b6b		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b6f		22 18 10 00	jsl $001018	                JSL PUTC
.396b73		e8		inx		                INX
.396b74		e8		inx		                INX
.396b75		88		dey		                DEY
.396b76		88		dey		                DEY
.396b77		d0 ea		bne $396b63	                BNE pr_model
.396b79		c2 10		rep #$10	                REP #$10        ; set X long
.396b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.396b7d		a0 14 00	ldy #$0014	                LDY #20
.396b80		a2 14 00	ldx #$0014	                LDX #10*2
.396b83		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396b87		22 18 10 00	jsl $001018	                JSL PUTC
.396b8b		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b8f		22 18 10 00	jsl $001018	                JSL PUTC
.396b93		e8		inx		                INX
.396b94		e8		inx		                INX
.396b95		88		dey		                DEY
.396b96		88		dey		                DEY
.396b97		d0 ea		bne $396b83	                BNE pr_serial
.396b99		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396b9d		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b9f		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396ba2		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396ba6		a9 00 00	lda #$0000	                LDA #0
.396ba9		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396bad		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396bb0		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396bb4		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396bb7		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396bbb		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396bbe		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396bc1		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396bc5		e8		inx		                INX
.396bc6		e8		inx		                INX
.396bc7		e0 00 02	cpx #$0200	                CPX #512
.396bca		d0 f5		bne $396bc1	                BNE init_loop
.396bcc		22 8c 6d 39	jsl $396d8c	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396bd0		b0 06		bcs $396bd8	                BCS read_sect1
.396bd2		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396bd6		80 2c		bra $396c04	                BRA done
.396bd8		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396bdb		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396bdf		a9 00 00	lda #$0000	                LDA #0
.396be2		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396be6		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396be9		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396bed		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396bf0		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396bf4		22 fb 6c 39	jsl $396cfb	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396bf8		b0 06		bcs $396c00	                BCS all_ok
.396bfa		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396bfe		80 04		bra $396c04	                BRA done
.396c00						all_ok
.396c00		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396c04		28		plp		done            PLP
.396c05		6b		rtl		                RTL
.396c06						IDE_INIT
.396c06		e2 20		sep #$20	                SEP #$20        ; set A short
.396c08		20 29 6c	jsr $396c29	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396c0b		a9 00		lda #$00	              LDA #$00
.396c0d		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396c11		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396c15		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396c19		a9 01		lda #$01	              LDA #$01
.396c1b		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396c1f		a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396c21		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396c25		20 47 6c	jsr $396c47	              JSR IDE_DRV_READY_NOTBUSY
.396c28		6b		rtl		              RTL
.396c29						IDE_DRIVE_BSY
.396c29		08		php		                PHP
.396c2a		e2 20		sep #$20	                SEP #$20        ; set A short
.396c2c		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396c30		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396c32		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396c34		f0 f6		beq $396c2c	                BEQ loop
.396c36		28		plp		                PLP
.396c37		60		rts		                RTS
.396c38						IDE_DRIVE_READY
.396c38		08		php		                PHP
.396c39		e2 20		sep #$20	                SEP #$20        ; set A short
.396c3b		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396c3f		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396c41		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396c43		d0 f6		bne $396c3b	                BNE loop
.396c45		28		plp		                PLP
.396c46		60		rts		                RTS
.396c47						IDE_DRV_READY_NOTBUSY
.396c47		08		php		                PHP
.396c48		e2 20		sep #$20	                SEP #$20        ; set A short
.396c4a		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396c4e		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396c50		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396c52		d0 f6		bne $396c4a	                BNE loop                            ; No: keep waiting
.396c54		28		plp		ret_success     PLP                                 ; Return success
.396c55		38		sec		                SEC
.396c56		60		rts		                RTS
.396c57		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396c5b		28		plp		                PLP                                 ; Return failure
.396c5c		18		clc		                CLC
.396c5d		60		rts		                RTS
.396c5e						IDE_NOT_DRQ
.396c5e		08		php		                PHP
.396c5f		e2 20		sep #$20	                SEP #$20        ; set A short
.396c61		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396c65		29 08		and #$08	                AND #IDE_STAT_DRQ
.396c67		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396c69		d0 f6		bne $396c61	                BNE loop                ; No: keep waiting
.396c6b		28		plp		                PLP
.396c6c		60		rts		                RTS
.396c6d						IDE_IDENTIFY
.396c6d		5a		phy		                PHY
.396c6e		8b		phb		                PHB
.396c6f		0b		phd		                PHD
.396c70		08		php		                PHP
.396c71		48		pha		                PHA             ; begin setdbr macro
.396c72		08		php		                PHP
.396c73		e2 20		sep #$20	                SEP #$20        ; set A short
.396c75		a9 00		lda #$00	                LDA #0
.396c77		48		pha		                PHA
.396c78		ab		plb		                PLB
.396c79		28		plp		                PLP
.396c7a		68		pla		                PLA             ; end setdbr macro
.396c7b		48		pha		                PHA             ; begin setdp macro
.396c7c		08		php		                PHP
.396c7d		c2 20		rep #$20	                REP #$20        ; set A long
.396c7f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c82		5b		tcd		                TCD
.396c83		28		plp		                PLP
.396c84		68		pla		                PLA             ; end setdp macro
.396c85		e2 20		sep #$20	                SEP #$20        ; set A short
.396c87		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c8a		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c8c		29 07		and #$07	                AND #$07
.396c8e		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396c90		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c94		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c97		e2 20		sep #$20	                SEP #$20        ; set A short
.396c99		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396c9b		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c9f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396ca3		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396ca7		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396cab		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396cad		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396cb1		f0 29		beq $396cdc	                BEQ no_media                    ; If 0: there is no drive
.396cb3		20 29 6c	jsr $396c29	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396cb6		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396cb9		90 2d		bcc $396ce8	                BCC ret_failure                 ; If an error occurred, return it
.396cbb		c2 30		rep #$30	                REP #$30        ; set A&X long
.396cbd		a0 00 00	ldy #$0000	                LDY #0
.396cc0		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396cc4		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396cc6		c8		iny		                INY                             ; Move to the next position
.396cc7		c8		iny		                INY
.396cc8		c0 00 02	cpy #$0200	                CPY #512
.396ccb		d0 f3		bne $396cc0	                BNE read_loop
.396ccd						ret_success
.396ccd		e2 20		sep #$20	                SEP #$20        ; set A short
.396ccf		a9 00		lda #$00	                LDA #0
.396cd1		85 00		sta $0320	                STA BIOS_STATUS
.396cd3		8d 06 03	sta $0306	                STA @w FDC_ST0
.396cd6		28		plp		                PLP                             ; Return success
.396cd7		2b		pld		                PLD
.396cd8		ab		plb		                PLB
.396cd9		7a		ply		                PLY
.396cda		38		sec		                SEC
.396cdb		6b		rtl		                RTL
.396cdc						no_media
.396cdc		e2 20		sep #$20	                SEP #$20        ; set A short
.396cde		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396ce0		80 0a		bra $396cec	                BRA pass_failure
.396ce2						not_ata
.396ce2		e2 20		sep #$20	                SEP #$20        ; set A short
.396ce4		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396ce6		80 04		bra $396cec	                BRA pass_failure
.396ce8						ret_failure
.396ce8		e2 20		sep #$20	                SEP #$20        ; set A short
.396cea		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cec		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396cee		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396cf2		8d 06 03	sta $0306	                STA @w FDC_ST0
.396cf5		28		plp		                PLP
.396cf6		2b		pld		                PLD
.396cf7		ab		plb		                PLB
.396cf8		7a		ply		                PLY
.396cf9		18		clc		                CLC
.396cfa		6b		rtl		                RTL
.396cfb						IDE_GETBLOCK
.396cfb		5a		phy		                PHY
.396cfc		8b		phb		                PHB
.396cfd		0b		phd		                PHD
.396cfe		08		php		                PHP
.396cff		48		pha		                PHA             ; begin setdbr macro
.396d00		08		php		                PHP
.396d01		e2 20		sep #$20	                SEP #$20        ; set A short
.396d03		a9 00		lda #$00	                LDA #0
.396d05		48		pha		                PHA
.396d06		ab		plb		                PLB
.396d07		28		plp		                PLP
.396d08		68		pla		                PLA             ; end setdbr macro
.396d09		48		pha		                PHA             ; begin setdp macro
.396d0a		08		php		                PHP
.396d0b		c2 20		rep #$20	                REP #$20        ; set A long
.396d0d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396d10		5b		tcd		                TCD
.396d11		28		plp		                PLP
.396d12		68		pla		                PLA             ; end setdp macro
.396d13		e2 20		sep #$20	                SEP #$20        ; set A short
.396d15		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396d18		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396d1a		29 07		and #$07	                AND #$07
.396d1c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396d1e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396d22		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396d25		e2 20		sep #$20	                SEP #$20        ; set A short
.396d27		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396d29		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396d2d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396d2f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d33		a5 03		lda $0323	                LDA BIOS_LBA+1
.396d35		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d39		a5 04		lda $0324	                LDA BIOS_LBA+2
.396d3b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d3f		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396d41		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d45		ea		nop		                NOP                             ; Wait about 500ns
.396d46		ea		nop		                NOP
.396d47		ea		nop		                NOP
.396d48		ea		nop		                NOP
.396d49		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d4c		90 2b		bcc $396d79	                BCC ret_failure                 ; If an error occurred, return it
.396d4e		e2 20		sep #$20	                SEP #$20        ; set A short
.396d50		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396d54		a0 00 00	ldy #$0000	                LDY #0
.396d57		c2 20		rep #$20	                REP #$20        ; set A long
.396d59		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396d5d		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396d5f		c8		iny		                INY                             ; Move to the next position
.396d60		c8		iny		                INY
.396d61		c0 00 02	cpy #$0200	                CPY #512
.396d64		d0 f3		bne $396d59	                BNE read_loop
.396d66		ea		nop		                NOP                             ; Wait about 500ns
.396d67		ea		nop		                NOP
.396d68		ea		nop		                NOP
.396d69		ea		nop		                NOP
.396d6a						ret_success
.396d6a		e2 20		sep #$20	                SEP #$20        ; set A short
.396d6c		a9 00		lda #$00	                LDA #0
.396d6e		85 00		sta $0320	                STA BIOS_STATUS
.396d70		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d73		28		plp		                PLP                             ; Return success
.396d74		2b		pld		                PLD
.396d75		ab		plb		                PLB
.396d76		7a		ply		                PLY
.396d77		38		sec		                SEC
.396d78		6b		rtl		                RTL
.396d79						ret_failure
.396d79		e2 20		sep #$20	                SEP #$20        ; set A short
.396d7b		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d7f		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d82		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d84		85 00		sta $0320	                STA BIOS_STATUS
.396d86		28		plp		                PLP
.396d87		2b		pld		                PLD
.396d88		ab		plb		                PLB
.396d89		7a		ply		                PLY
.396d8a		18		clc		                CLC
.396d8b		6b		rtl		                RTL
.396d8c						IDE_PUTBLOCK
.396d8c		5a		phy		                PHY
.396d8d		8b		phb		                PHB
.396d8e		0b		phd		                PHD
.396d8f		08		php		                PHP
.396d90		48		pha		                PHA             ; begin setdbr macro
.396d91		08		php		                PHP
.396d92		e2 20		sep #$20	                SEP #$20        ; set A short
.396d94		a9 00		lda #$00	                LDA #0
.396d96		48		pha		                PHA
.396d97		ab		plb		                PLB
.396d98		28		plp		                PLP
.396d99		68		pla		                PLA             ; end setdbr macro
.396d9a		48		pha		                PHA             ; begin setdp macro
.396d9b		08		php		                PHP
.396d9c		c2 20		rep #$20	                REP #$20        ; set A long
.396d9e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396da1		5b		tcd		                TCD
.396da2		28		plp		                PLP
.396da3		68		pla		                PLA             ; end setdp macro
.396da4		e2 20		sep #$20	                SEP #$20        ; set A short
.396da6		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396da9		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396dab		29 07		and #$07	                AND #$07
.396dad		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396daf		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396db3		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396db6		e2 20		sep #$20	                SEP #$20        ; set A short
.396db8		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396dba		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396dbe		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396dc0		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396dc4		a5 03		lda $0323	                LDA BIOS_LBA+1
.396dc6		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396dca		a5 04		lda $0324	                LDA BIOS_LBA+2
.396dcc		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396dd0		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396dd2		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396dd6		ea		nop		                NOP                             ; Wait about 500ns
.396dd7		ea		nop		                NOP
.396dd8		ea		nop		                NOP
.396dd9		ea		nop		                NOP
.396dda		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396ddd		90 33		bcc $396e12	                BCC ret_failure                 ; If an error occurred, return it
.396ddf		c2 30		rep #$30	                REP #$30        ; set A&X long
.396de1		a0 00 00	ldy #$0000	                LDY #0
.396de4		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396de6		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396dea		c8		iny		                INY                             ; Move to the next position
.396deb		c8		iny		                INY
.396dec		c0 00 02	cpy #$0200	                CPY #512
.396def		d0 f3		bne $396de4	                BNE read_loop
.396df1		ea		nop		                NOP                             ; Wait about 500ns
.396df2		ea		nop		                NOP
.396df3		ea		nop		                NOP
.396df4		ea		nop		                NOP
.396df5		20 47 6c	jsr $396c47	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396df8		90 18		bcc $396e12	                BCC ret_failure                 ; If an error occurred, return it
.396dfa		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396dfe		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396e01		d0 0f		bne $396e12	                BNE ret_failure                 ; If error: return failure
.396e03						ret_success
.396e03		e2 20		sep #$20	                SEP #$20        ; set A short
.396e05		a9 00		lda #$00	                LDA #0
.396e07		85 00		sta $0320	                STA BIOS_STATUS
.396e09		8d 06 03	sta $0306	                STA @w FDC_ST0
.396e0c		28		plp		                PLP                             ; Return success
.396e0d		2b		pld		                PLD
.396e0e		ab		plb		                PLB
.396e0f		7a		ply		                PLY
.396e10		38		sec		                SEC
.396e11		6b		rtl		                RTL
.396e12						ret_failure
.396e12		e2 20		sep #$20	                SEP #$20        ; set A short
.396e14		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396e18		8d 06 03	sta $0306	                STA @w FDC_ST0
.396e1b		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396e1d		85 00		sta $0320	                STA BIOS_STATUS
.396e1f		28		plp		                PLP
.396e20		2b		pld		                PLD
.396e21		ab		plb		                PLB
.396e22		7a		ply		                PLY
.396e23		18		clc		                CLC
.396e24		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396e25						KERNEL_DATA
>396e25		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396e2d		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396e3d		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396e4d		58 20 0d
>396e50		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396e58		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396e68		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396e78		20 20 0d
>396e7b		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396e83		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396e93		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396ea3		20 20 0d
>396ea6		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396eae		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396ebe		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396ece		20 20 0d
>396ed1		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396ed9		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396ee9		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396ef9		20 20 0d
>396efc		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396f04		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396f14		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396f24		0d
>396f25		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396f2d		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396f3d		6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396f4a		76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+1023 (2020-10-23)"
>396f52		6c 70 68 61 2b 31 30 32 33 20 28 32 30 32 30 2d
>396f62		31 30 2d 32 33 29

;******  Return to file: src\kernel.asm

>396f68		0d 00				                .text $0D,$00
.396f6a						old_pc_style_stat
>396f6a		1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f72		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396f82		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f92		fd fd
>396f94		1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f9c		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396fac		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fbc		fd fd
>396fbe		1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396fc6		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396fd6		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fe6		fd fd
>396fe8		1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ff0		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>397000		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397010		fd fd
>397012		1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39701a		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39702a		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39703a		fd fd
>39703c		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>397040		00 00 80 ff			                .text $00, $00, $80, $FF
>397044		00 80 00 ff			                .text $00, $80, $00, $FF
>397048		80 00 00 ff			                .text $80, $00, $00, $FF
>39704c		00 80 80 ff			                .text $00, $80, $80, $FF
>397050		80 80 00 ff			                .text $80, $80, $00, $FF
>397054		80 00 80 ff			                .text $80, $00, $80, $FF
>397058		80 80 80 ff			                .text $80, $80, $80, $FF
>39705c		00 45 ff ff			                .text $00, $45, $FF, $FF
>397060		13 45 8b ff			                .text $13, $45, $8B, $FF
>397064		00 00 20 ff			                .text $00, $00, $20, $FF
>397068		00 20 00 ff			                .text $00, $20, $00, $FF
>39706c		20 00 00 ff			                .text $20, $00, $00, $FF
>397070		20 20 20 ff			                .text $20, $20, $20, $FF
>397074		40 40 40 ff			                .text $40, $40, $40, $FF
>397078		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39707c		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397080		00 00 80 ff			                .text $00, $00, $80, $FF
>397084		00 80 00 ff			                .text $00, $80, $00, $FF
>397088		80 00 00 ff			                .text $80, $00, $00, $FF
>39708c		00 20 20 ff			                .text $00, $20, $20, $FF
>397090		20 20 00 ff			                .text $20, $20, $00, $FF
>397094		20 00 20 ff			                .text $20, $00, $20, $FF
>397098		20 20 20 ff			                .text $20, $20, $20, $FF
>39709c		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3970a0		13 45 8b ff			                .text $13, $45, $8B, $FF
>3970a4		00 00 20 ff			                .text $00, $00, $20, $FF
>3970a8		00 20 00 ff			                .text $00, $20, $00, $FF
>3970ac		40 00 00 ff			                .text $40, $00, $00, $FF
>3970b0		10 10 10 ff			                .text $10, $10, $10, $FF
>3970b4		40 40 40 ff			                .text $40, $40, $40, $FF
>3970b8		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3970bc		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3970c4		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3970d4		00
>3970d5		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3970dd		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3970ed		00
>3970ee		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>3970f6		20 45 78 65 63 75 74 65 64 2e 0d 00
>397102		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>39710a		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>39711a		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397122		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397132		64 2e 2e 2e 0d 00
>397138		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>397140		20 50 72 65 73 65 6e 74 0d 00
>39714a		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397152		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>397162		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397172		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>39717a		54 55 52 45 20 46 4f 55 4e 44 2e 00
>397186		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>39718e		45 44 2e 00
>397192		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>39719a		47 20 42 4d 50 20 50 41 52 53 45 52 00
>3971a7		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3971af		50 72 65 73 65 6e 74 3a 00
>3971b8		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3971c0		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3971d0		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>3971de		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>3971e6		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>3971f6		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397203		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>39720b		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>39721b		72 64 2e 00
>39721f		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>397227		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397237		49 44 45 20 64 72 69 76 65 2e 00
>397242		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>39724a		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39725a		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397268		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397270		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>39727f		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397287		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>39728f		52 4f 52 00
>397293		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>39729b		38 39 41 42 43 44 45 46 00
>3972a4						.align 256
>397300		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308		37 38 39 30 2d 3d 08 09
>397310		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318		6f 70 5b 5d 0d 00 61 73
>397320		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328		27 60 00 5c 7a 78 63 76
>397330		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397338		00 20 00 81 82 83 84 85
>397340		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397348		11 00 00 9d 00 1d 00 00
>397350		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358		8c 00 00 00 00 00 00 00
>397360		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368		00 00 00 00 00 00 00 00
>397370		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378		00 00 00 00 00 00 00 00
>397380		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397388		26 2a 28 29 5f 2b 08 09
>397390		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397398		4f 50 7b 7d 0d 00 41 53
>3973a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3973a8		22 7e 00 7c 5a 58 43 56
>3973b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8		00 20 00 00 00 00 00 00
>3973c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8		00 00 00 00 00 00 00 00
>3973d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8		00 00 00 00 00 00 00 00
>3973e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8		00 00 00 00 00 00 00 00
>3973f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8		00 00 00 00 00 00 00 00
>397400		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408		37 38 39 30 2d 3d 08 09
>397410		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397418		0f 10 5b 5d 0d 00 01 13
>397420		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397428		27 00 00 5c 1a 18 03 16
>397430		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438		00 20 00 00 00 00 00 00
>397440		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448		00 00 00 00 00 00 00 00
>397450		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458		00 00 00 00 00 00 00 00
>397460		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468		00 00 00 00 00 00 00 00
>397470		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478		00 00 00 00 00 00 00 00
>397480		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397488		37 38 39 30 2d 3d 08 09
>397490		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397498		6f 70 5b 5d 0d 00 61 73
>3974a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3974a8		27 60 00 5c 7a 78 63 76
>3974b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3974b8		00 20 00 00 00 00 00 00
>3974c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3974c8		00 00 00 00 00 00 00 00
>3974d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8		00 00 00 00 00 00 00 00
>3974e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8		00 00 00 00 00 00 00 00
>3974f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8		00 00 00 00 00 00 00 00
>397500		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397508		37 38 39 30 2d 3d 08 09
>397510		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397518		6f 70 5b 5d 0d 00 61 73
>397520		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397528		27 60 00 5c 7a 78 63 76
>397530		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397538		00 20 00 00 00 00 00 00
>397540		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397548		00 00 00 00 00 00 00 00
>397550		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397558		00 00 00 00 00 00 00 00
>397560		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397568		00 00 00 00 00 00 00 00
>397570		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397578		00 00 00 00 00 00 00 00
>397580		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397588		00 00 00 00 00 00 00 00
>397590		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397598		00 00 00 00 00 00 00 00
>3975a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3975a8		00 00 00 00 00 00 00 00
>3975b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3975b8		00 00 00 00 00 00 00 00
>3975c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3975c8		11 00 00 9d 00 1d 00 05
>3975d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3975d8		00 00 00 00 00 00 00 00
>3975e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3975e8		00 00 00 00 00 00 00 00
>3975f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3975f8		00 00 00 00 00 00 00 00
>397600						.align 256
>397600		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397608		34 37 3a 3d 3f 41 44 46
>397610		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397618		57 58 5a 5b 5d 5e 60 61
>397620		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397628		6d 6f 70 71 72 73 75 76
>397630		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397638		80 81 82 83 84 85 86 87
>397640		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397648		8f 90 91 92 93 93 94 95
>397650		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397658		9d 9e 9e 9f a0 a1 a2 a2
>397660		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397668		a9 aa ab ab ac ad ae ae
>397670		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397678		b5 b5 b6 b7 b7 b8 b9 b9
>397680		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397688		bf c0 c0 c1 c2 c2 c3 c4
>397690		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397698		c9 ca ca cb cb cc cd cd
>3976a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3976a8		d2 d3 d4 d4 d5 d5 d6 d6
>3976b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3976b8		db dc dc dd de de df df
>3976c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3976c8		e4 e4 e5 e5 e6 e6 e7 e7
>3976d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3976d8		ec ec ed ed ee ee ef ef
>3976e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3976e8		f4 f4 f5 f5 f6 f6 f7 f7
>3976f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3976f8		fb fc fc fd fd fe fe ff
>397700						.align 256
>397700		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397708		25 27 2a 2c 2e 30 32 34
>397710		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397718		44 46 47 49 4a 4c 4d 4f
>397720		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397728		5b 5c 5d 5e 60 61 62 63
>397730		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397738		6d 6e 70 71 72 73 74 75
>397740		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397748		7e 7f 80 81 82 83 84 84
>397750		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397758		8d 8e 8e 8f 90 91 92 93
>397760		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397768		9a 9b 9c 9d 9e 9f 9f a0
>397770		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397778		a7 a8 a9 aa aa ab ac ad
>397780		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397788		b3 b4 b5 b6 b6 b7 b8 b8
>397790		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397798		bf bf c0 c1 c2 c2 c3 c4
>3977a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3977a8		ca ca cb cc cc cd ce ce
>3977b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3977b8		d4 d5 d6 d6 d7 d7 d8 d9
>3977c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3977c8		de df e0 e0 e1 e1 e2 e3
>3977d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3977d8		e8 e9 e9 ea ea eb ec ec
>3977e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3977e8		f1 f2 f3 f3 f4 f4 f5 f5
>3977f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3977f8		fb fb fc fc fd fd fe ff
>397800						.align 256
>397800		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397808		83 dd ce 39 cd c5 3b 15
>397810		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397818		87 12 31 65 89 27 88 42
>397820		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397828		94 ce 56 ec fe da 58 c9
>397830		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397838		d0 10 2c b2 4b ea 32 61
>397840		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397848		a1 e6 ca 2d b3 ce b0 79
>397850		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397858		5f e3 fb bd 15 2e be f5
>397860		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397868		8d 8f 2c 80 0a 5e 99 36
>397870		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397878		13 52 44 2f e3 ef 44 a2
>397880		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397888		be 23 02 58 0a 52 5e b4
>397890		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397898		d5 cf 3e df c4 9e da bb
>3978a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3978a8		77 7d b1 3b 4a 68 35 6e
>3978b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3978b8		b5 8f 44 63 55 6f e1 50
>3978c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3978c8		57 74 b9 bd 05 14 50 eb
>3978d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3978d8		44 bc ec db 22 58 fc be
>3978e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3978e8		24 aa 82 11 5c 9f 43 4d
>3978f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3978f8		3e 3d 66 7e 0a 1c 6b 74
>397900						.align 16
>397900		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397908		01 01 01 00 00 00 00 00
>397910		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397918		ff ff ff 01 00 00 00 00
>397920		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397928		01 55 ff ff 01 00 00 00
>397930		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397938		ff ff ff ff 01 00 00 00
>397940		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397948		ff ff 01 ff ff 01 00 00
>397950		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397958		01 ff ff 01 ff 01 00 00
>397960		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397968		ff 01 ff ff ff 01 00 00
>397970		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397978		ff ff ff ff ff 01 01 00
>397980		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397988		ff ff ff ff 01 ff ff 01
>397990		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397998		ff ff ff ff ff ff ff 01
>3979a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3979a8		55 55 01 ff ff 55 01 00
>3979b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3979b8		01 01 55 ff 55 01 00 00
>3979c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3979c8		01 55 55 55 01 00 00 00
>3979d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3979d8		01 55 55 01 00 00 00 00
>3979e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3979e8		00 01 01 00 00 00 00 00
>3979f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3979f8		00 00 00 00 00 00 00 00
>3a0000		5c f9 7a 1a 5c d2 60 1a		.binary "binaries/basic816.bin"
>3a0008		5c cb 24 1a 5c c0 01 1a 5c d8 00 1a 5c 56 01 1a
>3a0018		5c 57 03 1a 5c 64 01 1a 5c 7f 01 1a 5c 86 01 1a
>3a0028		da 08 c2 10 a2 00 00 e2 20 20 59 00 90 11 f0 0f
>3a0038		c9 0d f0 0b c9 0a f0 07 9f 00 4f 00 e8 80 ea a9
>3a0048		00 9f 00 4f 00 28 fa 60 c2 10 ae b0 08 ec ae 08
>3a0058		60 5a 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a0068		10 a4 b0 c4 ae 10 0d b7 ab c2 20 29 ff 00 e6 b0
>3a0078		28 7a 38 60 28 7a 18 60 0b 08 08 c2 20 48 a9 00
>3a0088		08 5b 68 28 e2 20 85 b3 c2 20 a5 a4 d0 06 e2 20
>3a0098		a5 a6 f0 11 c2 10 a4 a9 c4 a7 f0 09 e2 20 a5 b3
>3a00a8		97 a4 c8 84 a9 28 2b 60 08 e2 20 a9 00 20 80 00
>3a00b8		a5 b2 29 df 85 b2 28 60 08 c2 30 48 da e2 20 bd
>3a00c8		00 00 f0 06 20 80 00 e8 80 f5 c2 30 fa 68 28 60
>3a00d8		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a00e8		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a00f8		0d d0 03 4c 4f 01 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0108		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0118		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a0128		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a0138		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a0148		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a0158		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a0168		00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a0178		fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0188		5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0198		af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a01a8		20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a01b8		10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a01c8		a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a01d8		af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a01e8		08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a01f8		0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0208		00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0218		e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a0228		00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a0238		48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a0248		af 8f 09 00 af a2 00 00 a9 00 9f 18 f0 1a e8 e0
>3a0258		40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a0268		0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a0278		8f 24 02 af 60 08 e2 20 af 0e 08 af 09 08 8f 0e
>3a0288		08 af af 00 08 af 8d 21 08 af 02 08 af 8d 22 08
>3a0298		af 04 08 af 8d 23 08 9c 24 08 af 0e 08 af 29 f7
>3a02a8		8f 0e 08 af a9 00 8d 25 08 28 60 08 e2 20 af 0e
>3a02b8		08 af 09 08 8f 0e 08 af af 0a 08 af 8d 21 08 af
>3a02c8		09 08 af 8d 22 08 af 06 08 af 8d 23 08 9c 24 08
>3a02d8		af 0e 08 af 29 f7 8f 0e 08 af a9 00 8d 25 08 28
>3a02e8		60 08 e2 20 48 48 a9 00 22 3c 10 00 68 22 18 10
>3a02f8		00 af 89 0f 00 29 01 d0 f8 68 28 60 08 e2 20 48
>3a0308		48 a9 01 22 3c 10 00 68 22 18 10 00 af 89 0f 00
>3a0318		29 01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20
>3a0328		18 00 c2 20 68 28 60 08 22 78 10 00 28 60 08 0b
>3a0338		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b4 1a 85
>3a0348		b4 cf 13 00 00 90 05 20 14 00 64 b4 2b 28 60 da
>3a0358		5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a0368		10 8f b3 08 00 af b2 08 00 29 20 f0 07 af b3 08
>3a0378		00 20 80 00 af b2 08 00 29 80 f0 07 af b3 08 00
>3a0388		20 e9 02 af b2 08 00 29 40 f0 14 af b3 08 00 20
>3a0398		04 03 af b3 08 00 c9 0d d0 05 a9 0a 20 04 03 28
>3a03a8		2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8
>3a03b8		80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a
>3a03c8		4a 20 d6 03 68 29 ff 00 20 d6 03 68 28 60 08 c2
>3a03d8		20 48 e2 20 48 4a 4a 4a 4a 20 ed 03 68 20 ed 03
>3a03e8		c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0
>3a03f8		1a 20 18 00 fa 28 60 08 c2 30 48 da 5a 8b 0b c2
>3a0408		30 a3 0b 18 69 03 00 aa e2 20 a9 1a 48 ab bd 00
>3a0418		00 f0 06 20 e9 02 e8 80 f5 c2 30 2b ab 7a fa 68
>3a0428		28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b b0
>3a0438		04 c9 61 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a
>3a0448		b0 04 c9 30 b0 03 28 18 60 28 38 60 08 e2 20 c9
>3a0458		3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b c9
>3a0468		47 b0 04 c9 41 b0 03 28 18 60 28 38 60 08 e2 20
>3a0478		c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f
>3a0488		c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30 80 f9 29
>3a0498		df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9 61 90
>3a04a8		02 29 df 28 60 08 e2 20 c2 10 bd 00 00 f0 09 20
>3a04b8		9e 04 9d 00 00 e8 80 f2 28 60 08 0b 08 c2 20 48
>3a04c8		a9 00 08 5b 68 28 c2 20 48 06 21 26 23 a5 21 85
>3a04d8		0c a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18 a5 21
>3a04e8		65 0c 85 21 a5 23 65 0e 85 23 68 2b 28 60 08 0b
>3a04f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 8f 1a
>3a0508		01 00 a9 0a 00 8f 18 01 00 af 1c 01 00 85 21 64
>3a0518		23 af 1e 01 00 85 27 64 29 e2 20 a9 00 85 25 85
>3a0528		2b 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0538		c2 20 a5 21 8f 1a 01 00 a9 64 00 8f 18 01 00 af
>3a0548		1c 01 00 85 21 64 23 af 1e 01 00 85 27 64 29 e2
>3a0558		20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5 21 d0
>3a0568		08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08 e2 20
>3a0578		a5 25 c9 00 f0 07 c9 01 d0 05 20 22 54 28 60 08
>3a0588		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a0598		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 e2
>3a05a8		20 a5 2b c9 00 f0 37 c9 01 d0 35 c2 20 a5 23 48
>3a05b8		a5 21 48 c2 20 a5 27 85 21 a5 29 85 23 e2 20 a9
>3a05c8		01 85 25 20 22 54 c2 20 a5 21 85 27 a5 23 85 29
>3a05d8		e2 20 a9 00 85 2b c2 20 68 85 21 68 85 23 28 60
>3a05e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a05f8		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08
>3a0608		e2 20 a5 25 c9 02 d0 02 28 60 08 c2 20 48 a9 00
>3a0618		08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a0628		00 20 a3 1b e2 20 dc d2 08 08 e2 20 a5 25 c9 00
>3a0638		f0 07 c9 01 d0 0b 20 22 54 c2 20 a5 23 d0 21 28
>3a0648		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0658		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a0668		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a0678		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08
>3a0688		e2 20 a5 25 c9 00 f0 07 c9 01 d0 11 20 22 54 a5
>3a0698		24 d0 29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20
>3a06a8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a06b8		20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48
>3a06c8		a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a06d8		29 ff 00 20 a3 1b e2 20 dc d2 08 08 e2 20 a5 25
>3a06e8		c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b
>3a06f8		68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a0708		a3 1b e2 20 dc d2 08 20 96 53 28 60 08 e2 20 a5
>3a0718		2b c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08
>3a0728		5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0738		20 a3 1b e2 20 dc d2 08 20 45 07 28 60 c2 20 a5
>3a0748		23 48 a5 21 48 c2 20 a5 27 85 21 a5 29 85 23 e2
>3a0758		20 a9 00 85 25 20 96 53 c2 20 a5 21 85 27 a5 23
>3a0768		85 29 e2 20 a9 01 85 2b c2 20 68 85 21 68 85 23
>3a0778		60 08 e2 20 a5 25 c9 00 f0 23 c9 01 f0 2e 08 c2
>3a0788		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a0798		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 a5 2b c9
>3a07a8		00 f0 16 c9 01 d0 d7 20 96 53 80 0d a5 2b c9 01
>3a07b8		f0 07 c9 00 d0 c8 20 45 07 28 60 08 0b 08 c2 20
>3a07c8		48 a9 00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64
>3a07d8		25 a7 00 c9 26 f0 44 e2 20 a7 00 20 43 04 90 76
>3a07e8		20 c2 04 38 e9 30 c2 20 29 ff 00 18 65 21 85 21
>3a07f8		a5 23 69 00 00 85 23 20 76 1e 80 db 08 c2 20 48
>3a0808		a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a0818		29 ff 00 20 a3 1b e2 20 dc d2 08 20 76 1e a7 00
>3a0828		c9 48 f0 04 c9 68 d0 d4 20 76 1e e2 20 a7 00 20
>3a0838		54 04 90 22 20 75 04 c2 20 06 21 26 23 06 21 26
>3a0848		23 06 21 26 23 06 21 26 23 29 ff 00 18 65 21 85
>3a0858		21 20 76 1e 80 d5 2b 28 60 08 c2 30 38 a5 04 e5
>3a0868		18 a8 e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02
>3a0878		28 60 88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20
>3a0888		48 a9 00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5
>3a0898		1a 85 02 20 97 1e a7 00 20 43 04 90 0c 20 c3 07
>3a08a8		c2 20 a5 21 85 d5 20 97 1e c2 20 a5 00 85 18 e2
>3a08b8		20 a5 02 85 1a 20 d1 08 e2 20 20 42 09 c9 00 f0
>3a08c8		05 20 cb 0a 80 f4 2b 28 60 08 c2 20 a5 18 85 00
>3a08d8		a5 1a 85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0
>3a08e8		0d b7 00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00
>3a08f8		f0 46 c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52
>3a0908		f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9
>3a0918		65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06
>3a0928		e8 20 76 1e 80 b3 a7 00 c9 3a d0 03 20 76 1e a9
>3a0938		03 85 1c a9 8e 20 cb 0a 28 60 08 0b 08 c2 20 48
>3a0948		a9 00 08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 80
>3a0958		0a a5 1c d0 03 4c e5 09 c2 20 a5 18 85 00 e2 20
>3a0968		a5 1a 85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00
>3a0978		f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9
>3a0988		22 d0 05 20 07 0a 80 28 a5 1c c9 01 f0 19 c2 20
>3a0998		a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20
>3a09a8		a7 04 20 73 4a b0 09 e2 20 20 17 0a c9 00 d0 11
>3a09b8		c2 20 a5 00 85 04 e2 20 a5 02 85 06 20 76 1e 80
>3a09c8		a9 c9 81 d0 18 20 61 08 c9 00 f0 14 89 80 10 0b
>3a09d8		20 6c 0b c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60
>3a09e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a09f8		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08
>3a0a08		e2 20 20 76 1e a7 00 f0 04 c9 22 d0 f5 28 60 08
>3a0a18		0b c2 30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9
>3a0a28		96 0b 85 08 e2 20 a9 1a 85 0a a2 80 00 e2 20 a0
>3a0a38		01 00 b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7
>3a0a48		08 85 0c e2 20 a9 1a 85 0e e2 10 a0 00 b7 00 20
>3a0a58		9e 04 d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa
>3a0a68		2b 28 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>3a0a78		0a 69 00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9
>3a0a88		00 08 5b 68 28 c2 30 a9 96 0b 85 08 a9 1a 00 85
>3a0a98		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06
>3a0aa8		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>3a0ab8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab
>3a0ac8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0ad8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>3a0ae8		00 00 85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0
>3a0af8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>3a0b08		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>3a0b18		18 69 96 0b aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0b28		08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20
>3a0b38		c2 10 20 0f 0b bd 00 00 c2 20 29 0f 00 2b ab 28
>3a0b48		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0b58		20 48 a9 1a 48 ab 68 28 c2 30 20 0f 0b bd 04 00
>3a0b68		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0b78		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20
>3a0b88		0f 0b bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01
>3a0b98		10 d0 61 25 00 00 03 01 12 d0 ab 25 00 00 02 01
>3a0ba8		14 d0 e4 25 00 00 02 01 16 d0 1d 26 00 00 02 03
>3a0bb8		18 d0 27 26 00 00 00 01 1c d0 00 00 00 00 04 01
>3a0bc8		1e d0 78 26 00 00 04 01 20 d0 ae 26 00 00 04 01
>3a0bd8		22 d0 93 26 00 00 05 03 24 d0 64 26 00 00 06 03
>3a0be8		28 d0 3a 26 00 00 07 02 2c d0 4f 26 00 00 ff 01
>3a0bf8		2f d0 00 00 00 00 40 01 31 d0 00 00 00 00 20 03
>3a0c08		33 d0 5e 3c 00 00 20 05 37 d0 63 40 00 00 20 03
>3a0c18		3d d0 ae 3f 00 00 20 04 41 d0 4e 3f 00 00 20 03
>3a0c28		46 d0 45 3f 00 00 20 02 4a d0 dd 3e 00 00 50 04
>3a0c38		4d d0 00 00 00 00 50 04 52 d0 00 00 00 00 20 05
>3a0c48		57 d0 20 3e 00 00 20 06 5d d0 99 3e 00 00 20 03
>3a0c58		64 d0 75 3c 00 00 50 02 68 d0 00 00 00 00 50 04
>3a0c68		6b d0 00 00 00 00 20 04 70 d0 69 3d 00 00 20 02
>3a0c78		75 d0 6f 3c 00 00 20 04 78 d0 72 3c 00 00 50 05
>3a0c88		7d d0 00 00 00 00 50 05 83 d0 00 00 00 00 20 04
>3a0c98		89 d0 6c 3c 00 00 20 03 8e d0 a4 3f 00 00 20 04
>3a0ca8		92 d0 3f 3c 00 00 20 04 97 d0 cf 3b 00 00 20 05
>3a0cb8		9c d0 65 3b 00 00 20 05 a2 d0 f2 3a 00 00 20 03
>3a0cc8		a8 d0 ee 3a 00 00 20 04 ac d0 cf 39 00 00 20 04
>3a0cd8		b1 d0 e1 3a 00 00 20 07 b6 d0 e5 3a 00 00 20 03
>3a0ce8		be d0 22 39 00 00 20 04 c2 d0 8b 38 00 00 04 02
>3a0cf8		c7 d0 01 27 00 00 04 02 ca d0 e4 26 00 00 04 02
>3a0d08		cd d0 c9 26 00 00 30 01 d0 d0 11 42 00 00 30 03
>3a0d18		d2 d0 25 46 00 00 30 04 d6 d0 75 46 00 00 30 05
>3a0d28		db d0 06 47 00 00 30 05 e1 d0 b8 46 00 00 30 04
>3a0d38		e7 d0 45 47 00 00 30 03 ec d0 9a 47 00 00 30 03
>3a0d48		f0 d0 df 47 00 00 30 03 f4 d0 68 48 00 00 30 03
>3a0d58		f8 d0 f1 48 00 00 30 03 fc d0 21 49 00 00 30 04
>3a0d68		00 d1 97 45 00 00 30 03 05 d1 36 45 00 00 30 04
>3a0d78		09 d1 e8 44 00 00 30 03 0e d1 92 44 00 00 30 05
>3a0d88		12 d1 c9 43 00 00 30 06 18 d1 e8 42 00 00 30 04
>3a0d98		1f d1 33 42 00 00 10 03 24 d1 af 49 00 00 10 03
>3a0da8		28 d1 7a 49 00 00 10 04 2c d1 ab 5c 00 00 10 04
>3a0db8		31 d1 c6 49 00 00 10 03 36 d1 d2 59 00 00 20 05
>3a0dc8		3a d1 7d 5b 00 00 10 04 40 d1 58 5c 00 00 20 05
>3a0dd8		45 d1 64 5d 00 00 20 03 4b d1 83 5e 00 00 10 04
>3a0de8		4f d1 f0 5d 00 00 20 06 54 d1 f9 5e 00 00 20 04
>3a0df8		5b d1 1d 60 00 00 10 07 60 d1 77 49 00 00 20 03
>3a0e08		68 d1 1a 38 00 00 20 05 6c d1 4f 37 00 00 20 09
>3a0e18		72 d1 83 28 00 00 20 09 7c d1 1e 28 00 00 20 0a
>3a0e28		86 d1 4c 28 00 00 20 07 91 d1 8b 27 00 00 30 08
>3a0e38		99 d1 42 41 00 00 20 07 a2 d1 20 27 00 00 30 08
>3a0e48		aa d1 ac 41 00 00 20 08 b3 d1 94 29 00 00 20 08
>3a0e58		bc d1 f0 28 00 00 20 06 c5 d1 d2 2a 00 00 20 09
>3a0e68		cc d1 d0 2b 00 00 20 04 d6 d1 62 2d 00 00 20 04
>3a0e78		db d1 b7 2d 00 00 20 04 e0 d1 2c 2e 00 00 20 06
>3a0e88		e5 d1 e1 2e 00 00 20 08 ec d1 6e 2f 00 00 20 0a
>3a0e98		f5 d1 a2 2f 00 00 20 07 00 d2 c5 30 00 00 20 07
>3a0ea8		08 d2 53 31 00 00 20 08 10 d2 cf 31 00 00 20 06
>3a0eb8		19 d2 0e 32 00 00 20 07 20 d2 3a 35 00 00 50 06
>3a0ec8		28 d2 00 00 00 00 50 04 2f d2 00 00 00 00 00 00
>3a0ed8		00 00 00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b
>3a0ee8		68 28 c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba c2
>3a0ef8		20 64 b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08
>3a0f08		e2 20 85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48
>3a0f18		a5 12 48 a5 10 48 20 b6 0f b0 03 20 3a 0f 20 54
>3a0f28		11 c2 20 68 85 10 68 85 12 68 85 0c 68 85 0e 28
>3a0f38		7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0f48		a6 8d ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2
>3a0f58		20 a5 ba e9 00 85 c0 20 54 11 e2 20 a5 e8 a0 00
>3a0f68		00 97 c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2
>3a0f78		20 a9 00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05
>3a0f88		00 97 c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5
>3a0f98		be 85 b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01
>3a0fa8		00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b
>3a0fb8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb
>3a0fc8		85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9
>3a0fd8		d0 11 c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b
>3a0fe8		28 18 60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8
>3a0ff8		b7 c7 85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5
>3a1008		c9 69 00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2
>3a1018		20 a5 0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2
>3a1028		20 a5 0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5
>3a1038		cf d0 57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8
>3a1048		b7 c7 85 bd 4c f3 10 c2 20 a5 0c 69 08 00 85 10
>3a1058		e2 20 a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e
>3a1068		90 08 c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd
>3a1078		e2 20 a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2
>3a1088		20 c8 c8 b7 cd 85 c9 4c d0 0f c2 20 a0 02 00 b7
>3a1098		c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c f3 10 c2 20
>3a10a8		a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2
>3a10b8		20 a0 02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c
>3a10c8		c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c
>3a10d8		85 bb e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5
>3a10e8		0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85
>3a10f8		c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5
>3a1108		c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8
>3a1118		a5 0e 97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20
>3a1128		c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0
>3a1138		01 00 a9 00 97 c1 2b 28 38 60 08 c2 30 a5 b5 85
>3a1148		be e2 20 a5 b7 85 c0 20 54 11 28 60 08 c2 20 38
>3a1158		a5 be e9 08 00 85 c1 e2 20 a5 c0 e9 00 85 c3 28
>3a1168		60 08 e2 20 a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1
>3a1178		f0 0c e2 20 a0 01 00 b7 c1 1a 97 c1 28 60 00 ea
>3a1188		08 e2 20 a5 c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0
>3a1198		11 e2 20 a0 01 00 b7 c1 3a 97 c1 d0 03 20 ac 11
>3a11a8		28 60 00 ea 08 c2 20 a5 bb d0 21 e2 20 a5 bd d0
>3a11b8		1b a5 c3 85 bd c2 20 a5 c1 85 bb a9 00 00 a0 02
>3a11c8		00 97 c1 c8 c8 e2 20 97 c1 4c 93 12 e2 20 a5 bd
>3a11d8		c5 c3 90 28 c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb
>3a11e8		a0 02 00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5
>3a11f8		c1 85 bb e2 20 a5 c3 85 bd 4c 93 12 c2 20 a5 bb
>3a1208		85 08 e2 20 a5 bd 85 0a e2 20 a0 04 00 b7 08 c5
>3a1218		c6 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c4 90 25
>3a1228		c2 20 a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7 08 97
>3a1238		c1 c2 20 a5 c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8
>3a1248		97 08 4c 93 12 c2 20 a0 02 00 b7 08 d0 08 e2 20
>3a1258		c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2
>3a1268		20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2
>3a1278		20 a5 c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3 97 08
>3a1288		a9 00 97 c1 c2 20 a0 02 00 97 c1 20 98 12 28 60
>3a1298		08 c2 20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5
>3a12a8		c1 d0 09 e2 20 a5 c3 d0 03 4c 3b 13 c2 20 a0 02
>3a12b8		00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0
>3a12c8		05 00 b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12 c2 20
>3a12d8		a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20
>3a12e8		a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2
>3a12f8		20 a5 0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0
>3a1308		02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20
>3a1318		a0 02 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2
>3a1328		20 a0 05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1
>3a1338		4c b4 12 28 60 08 c2 20 64 14 64 16 28 60 08 c2
>3a1348		30 a5 14 d0 16 a5 16 d0 12 e2 20 64 14 a5 e0 1a
>3a1358		1a 85 15 a5 e1 85 16 64 17 80 07 c2 20 a5 15 1a
>3a1368		85 15 c2 20 a5 b9 3a c5 15 f0 02 b0 1f 08 c2 20
>3a1378		48 a9 00 08 5b 68 28 e2 20 a9 03 8f d1 08 00 c2
>3a1388		20 29 ff 00 20 a3 1b e2 20 dc d2 08 28 60 c9 00
>3a1398		d0 05 c0 01 00 f0 05 09 30 97 14 c8 60 08 c2 30
>3a13a8		64 0c a5 23 10 1a 18 a5 21 49 ff ff 69 01 00 85
>3a13b8		21 a5 23 49 ff ff 69 00 00 85 23 a9 ff ff 85 0c
>3a13c8		64 10 64 12 a2 1f 00 f8 06 21 26 23 a5 10 65 10
>3a13d8		85 10 a5 12 65 12 85 12 ca 10 ed d8 e2 20 20 46
>3a13e8		13 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 14
>3a13f8		c8 a2 03 00 b5 10 29 f0 4a 4a 4a 4a 20 96 13 b5
>3a1408		10 29 0f 20 96 13 ca 10 eb c0 01 00 d0 0c a9 20
>3a1418		87 14 a0 01 00 a9 30 97 14 c8 a9 00 97 14 28 60
>3a1428		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>3a1438		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1448		28 e2 20 c2 10 a0 00 00 b7 21 d0 04 b7 27 f0 25
>3a1458		b7 21 d7 27 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>3a1468		85 21 e2 20 64 23 80 15 c2 20 a9 ff ff 85 21 e2
>3a1478		20 85 23 80 08 c2 20 64 21 e2 20 64 23 e2 20 a9
>3a1488		00 85 25 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1498		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23 48
>3a14a8		ab c2 20 68 28 a6 21 20 2a 14 84 0c 08 c2 20 48
>3a14b8		e2 20 a5 29 48 ab c2 20 68 28 a6 27 20 2a 14 c2
>3a14c8		20 98 38 65 0c aa e2 20 a9 02 20 06 0f c2 20 a5
>3a14d8		b5 85 08 e2 20 a5 b7 85 0a a0 00 00 08 c2 20 48
>3a14e8		e2 20 a5 23 48 ab c2 20 68 28 a6 21 bd 00 00 f0
>3a14f8		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>3a1508		29 48 ab c2 20 68 28 a6 27 bd 00 00 97 08 f0 04
>3a1518		e8 c8 80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85 23
>3a1528		a9 02 85 25 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>3a1538		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>3a1548		30 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6
>3a1558		21 20 2a 14 98 aa e8 e2 20 a9 02 20 06 0f c2 20
>3a1568		a5 be 85 08 a5 c0 85 0a a0 00 00 e2 20 b7 21 97
>3a1578		08 f0 03 c8 80 f7 c2 20 a5 08 85 21 a5 0a 85 23
>3a1588		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>3a1598		20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9 84 90 c2
>3a15a8		30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b c4 8d b0
>3a15b8		12 a5 27 d0 0e 4c 14 16 20 46 13 e2 20 a9 00 87
>3a15c8		14 80 39 20 46 13 c2 30 18 a5 21 65 27 85 21 a5
>3a15d8		23 69 00 00 85 23 a0 00 00 e2 20 a7 21 97 14 f0
>3a15e8		1b c2 20 18 a5 21 69 01 00 85 21 a5 23 69 00 00
>3a15f8		85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2 20 a5 14
>3a1608		85 21 a5 16 85 23 e2 20 a9 02 85 25 28 60 48 5a
>3a1618		0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00
>3a1628		00 85 00 85 18 a9 36 00 85 02 85 1a ad 8a 0f 30
>3a1638		20 a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57 f0 02
>3a1648		b0 05 20 78 16 80 e5 28 2b 7a 68 60 20 53 1f 80
>3a1658		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a1668		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a1678		08 c2 30 85 21 64 23 20 a5 13 a5 14 1a 85 21 a5
>3a1688		16 85 23 20 df 40 18 a5 18 69 04 00 85 00 a5 1a
>3a1698		69 00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20 b7
>3a16a8		16 90 fb e2 20 a9 0d 20 18 00 20 53 1f 28 60 08
>3a16b8		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a16c8		a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30 05
>3a16d8		20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69 96
>3a16e8		0b 85 08 a9 1a 00 69 00 00 85 0a 08 e2 20 48 a9
>3a16f8		1a 48 ab 68 28 a0 02 00 b7 08 aa 20 ac 03 c2 20
>3a1708		20 76 1e ab 2b 28 18 60 ab 2b 28 38 60 08 c2 20
>3a1718		a9 ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21 85
>3a1728		23 85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b 8b
>3a1738		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a1748		48 ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00 bd
>3a1758		02 00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20 38
>3a1768		98 e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08 c2
>3a1778		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1788		68 28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9 00
>3a1798		00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00 9d
>3a17a8		04 00 bd 00 00 7a ab 2b 28 60 08 c2 20 18 a5 1d
>3a17b8		69 05 00 85 1d 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a17c8		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a17d8		c2 10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b 28 60
>3a17e8		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a17f8		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f c8 84
>3a1808		1f b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2
>3a1818		20 a9 01 20 bf 17 28 60 5a 08 8b 08 e2 20 48 a9
>3a1828		00 48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01 d0 08
>3a1838		c2 20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00 08 5b
>3a1848		68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a1858		a3 1b e2 20 dc d2 08 08 0b 8b c2 20 48 08 c2 20
>3a1868		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1878		28 e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 1f 0b 85
>3a1888		0c b9 01 00 20 1f 0b c5 0c f0 02 90 08 c2 20 68
>3a1898		ab 2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c c3 07
>3a18a8		08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 51 1a 20
>3a18b8		31 06 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00
>3a18c8		1a 30 3e 8f 00 4d 00 e8 e8 20 97 1e e2 20 a7 00
>3a18d8		c9 8d f0 09 c9 2c d0 0a 20 76 1e 80 cf 20 76 1e
>3a18e8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a18f8		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a1908		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a1918		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a1928		08 20 fb 4c 90 23 e2 20 a5 e8 29 80 d0 06 20 47
>3a1938		4b 4c 4f 19 e2 20 a9 8c 20 83 1f 20 16 18 20 a8
>3a1948		18 20 11 58 20 20 18 28 60 08 c2 20 48 a9 00 08
>3a1958		5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1968		20 a3 1b e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00
>3a1978		08 5b 68 28 e2 20 c2 10 20 76 1e a0 00 00 b7 00
>3a1988		f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9 02 a6
>3a1998		0c e8 20 46 13 a0 00 00 c4 0c f0 29 a7 00 97 14
>3a19a8		c8 20 76 1e 80 f2 08 c2 20 48 a9 00 08 5b 68 28
>3a19b8		e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a19c8		e2 20 dc d2 08 a9 00 97 14 c2 20 a5 14 85 21 a5
>3a19d8		16 85 23 a9 02 00 85 25 20 76 1e 2b 28 60 08 e2
>3a19e8		20 a7 00 c2 20 29 ff 00 20 49 0b 85 2d 20 16 18
>3a19f8		08 e2 20 48 a9 00 48 ab 68 28 20 0a 1a 20 20 18
>3a1a08		28 60 20 76 1e 6c 2d 08 08 0b 8b c2 20 48 08 c2
>3a1a18		20 48 a9 00 08 5b 68 28 c2 30 a2 27 08 20 73 17
>3a1a28		a2 21 08 20 73 17 20 e8 17 20 49 0b 85 2d 08 e2
>3a1a38		20 48 a9 00 48 ab 68 28 20 4e 1a a2 21 08 20 35
>3a1a48		17 68 ab 2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00
>3a1a58		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10
>3a1a68		da e2 20 a7 00 d0 03 4c 14 1b 30 33 c9 20 d0 03
>3a1a78		4c 0e 1b c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9
>3a1a88		22 d0 03 4c 27 1b c9 5b b0 07 c9 41 90 03 4c 33
>3a1a98		1b c9 7b b0 07 c9 61 90 03 4c 33 1b 4c 14 1b c9
>3a1aa8		8c f0 40 c9 8d f0 41 20 6c 0b c9 30 d0 0c 20 e6
>3a1ab8		19 a2 21 08 20 35 17 4c 69 1a c9 00 d0 4e a7 00
>3a1ac8		a6 1f e0 ff 7f f0 05 20 5f 18 b0 12 20 bf 17 80
>3a1ad8		35 c2 20 20 f1 51 a2 21 08 20 35 17 80 83 20 10
>3a1ae8		1a 80 dd 20 bf 17 80 1e e2 20 a4 1f c0 ff 7f f0
>3a1af8		46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0 05 20 10
>3a1b08		1a 80 ee 20 e8 17 20 76 1e 4c 69 1a a6 1f e0 ff
>3a1b18		7f b0 24 bd 01 00 c9 01 f0 1d 20 10 1a 80 ed 20
>3a1b28		70 19 a2 21 08 20 35 17 4c 69 1a 20 28 19 a2 21
>3a1b38		08 20 35 17 4c 69 1a a2 21 08 20 73 17 fa 28 60
>3a1b48		08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a1b58		48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b
>3a1b68		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1b78		92 31 c6 31 c6 31 2b 28 60 08 c2 30 29 ff 00 20
>3a1b88		6a 1b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1b98		c2 30 e6 31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2
>3a1ba8		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1bb8		68 28 c2 20 85 21 a9 00 00 85 23 e2 20 a9 00 85
>3a1bc8		25 85 e8 a9 1a 85 e7 c2 20 a9 fd 1b 85 e5 20 95
>3a1bd8		4c c2 20 a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85
>3a1be8		25 85 e8 a9 1a 85 e7 c2 20 a9 01 1c 85 e5 20 95
>3a1bf8		4c 28 2b ab 60 45 52 52 00 45 52 4c 00 e2 20 c2
>3a1c08		10 20 1f 03 af d1 08 00 0a c2 20 29 ff 00 a8 08
>3a1c18		e2 20 48 a9 1a 48 ab 68 28 be 57 1c 20 ac 03 c2
>3a1c28		20 a5 d5 f0 27 a2 85 1c 20 ac 03 08 e2 20 48 a9
>3a1c38		00 48 ab 68 28 c2 20 af d5 08 00 8f 21 08 00 a9
>3a1c48		00 00 8f 23 08 00 20 ff 40 20 1f 03 4c 13 25 89
>3a1c58		1c 8c 1c 92 1c 9f 1c ad 1c bb 1c ce 1c e4 1c f4
>3a1c68		1c 03 1d 10 1d 21 1d 30 1d 3d 1d 4b 1d 5a 1d 6b
>3a1c78		1d 84 1d 98 1d ac 1d c2 1d d6 1d f1 1d 20 61 74
>3a1c88		00 4f 4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78
>3a1c98		20 65 72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65
>3a1ca8		6d 6f 72 79 00 54 79 70 65 20 6d 69 73 6d 61 74
>3a1cb8		63 68 00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20
>3a1cc8		66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65
>3a1cd8		72 20 6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63
>3a1ce8		6b 20 75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63
>3a1cf8		6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f
>3a1d08		66 20 72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20
>3a1d18		61 72 67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f
>3a1d28		74 20 66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75
>3a1d38		6d 62 65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c
>3a1d48		6f 77 00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f
>3a1d58		77 00 44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65
>3a1d68		72 6f 00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61
>3a1d78		64 20 64 69 72 65 63 74 6f 72 79 00 55 6e 61 62
>3a1d88		6c 65 20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00
>3a1d98		55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66
>3a1da8		69 6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65
>3a1db8		6c 65 74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20
>3a1dc8		6e 6f 74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f
>3a1dd8		75 6c 64 20 6e 6f 74 20 75 70 64 61 74 65 20 64
>3a1de8		69 72 65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e
>3a1df8		6f 74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65
>3a1e08		00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1e18		80 85 d0 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1e28		68 28 e2 20 a9 00 85 d0 2b 28 60 08 0b 08 c2 20
>3a1e38		48 a9 00 08 5b 68 28 20 1e 1e c2 20 64 d5 20 7a
>3a1e48		49 2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1e58		08 c2 20 a9 05 1c 8f d2 08 00 e2 20 a9 1a 8f d4
>3a1e68		08 00 28 20 a4 3f 20 e5 3a 64 2f 28 2b 60 08 0b
>3a1e78		08 c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69
>3a1e88		01 00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08
>3a1e98		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0
>3a1ea8		0f c9 20 f0 06 c9 09 f0 02 80 05 20 76 1e 80 ed
>3a1eb8		2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 76
>3a1ec8		1e 80 f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35
>3a1ed8		f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d
>3a1ee8		f0 16 20 76 1e 80 e3 20 53 1f c2 20 a5 d5 f0 1d
>3a1ef8		e2 20 80 d6 e6 34 80 ea c6 34 30 30 80 e4 a5 33
>3a1f08		30 06 a5 34 f0 02 80 da 20 76 1e 28 60 08 c2 20
>3a1f18		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a1f28		20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48
>3a1f38		a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1f48		29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 30 a0 00
>3a1f58		00 b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00
>3a1f68		00 85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00
>3a1f78		85 00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20
>3a1f88		97 1e 68 e2 20 c7 00 d0 08 20 76 1e 20 97 1e 28
>3a1f98		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1fa8		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a1fb8		08 e2 20 20 97 1e e2 20 a7 00 f0 10 c9 3a f0 0c
>3a1fc8		c5 35 f0 05 20 76 1e 80 ef 28 38 60 28 18 60 5a
>3a1fd8		08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20
>3a1fe8		d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20
>3a1ff8		48 a9 00 08 5b 68 28 20 15 17 e2 20 a9 00 85 da
>3a2008		ad 8a 0f 30 4b a7 00 c9 3a d0 03 20 76 1e 20 97
>3a2018		1e a7 00 d0 03 4c a2 20 20 2a 04 b0 52 a7 00 10
>3a2028		10 20 6c 0b 85 0c c9 20 d0 03 4c 90 20 a5 d0 f0
>3a2038		51 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2048		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a2058		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1
>3a2068		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 20
>3a2078		ae 3f 4c a2 20 08 e2 20 48 a9 00 48 ab 68 28 6c
>3a2088		2d 08 a5 0c c9 10 d0 a9 a7 00 20 49 0b c2 20 85
>3a2098		2d 20 15 17 20 76 1e 20 7d 20 ab 2b 28 60 08 58
>3a20a8		20 1e 1e 20 48 1b e2 20 9c 8a 0f c2 20 a5 18 85
>3a20b8		00 a5 1a 85 02 4c e7 20 08 c2 20 a0 02 00 b7 18
>3a20c8		85 d5 20 3d 13 e2 20 a5 da c9 03 f0 12 c2 20 18
>3a20d8		a5 18 69 04 00 85 00 e2 20 a5 1a 69 00 85 02 c2
>3a20e8		20 20 f2 1f e2 20 a5 da c9 03 f0 f3 c9 00 d0 31
>3a20f8		e2 20 20 97 1e a7 00 f0 28 c9 3a f0 1f 08 c2 20
>3a2108		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2118		20 29 ff 00 20 a3 1b e2 20 dc d2 08 20 76 1e 80
>3a2128		be 28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f 20 48
>3a2138		1b c2 30 64 2f a0 02 00 b7 18 f0 29 20 c0 20 e2
>3a2148		20 a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2
>3a2158		20 a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69
>3a2168		00 85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2 30
>3a2178		c2 20 a9 00 00 85 08 a9 36 00 85 0a c2 20 a0 02
>3a2188		00 b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00
>3a2198		18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2
>3a21a8		20 a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5
>3a21b8		0a 85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08
>3a21c8		c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26
>3a21d8		c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00
>3a21e8		85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a
>3a21f8		69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2
>3a2208		20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38
>3a2218		a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2
>3a2228		20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85
>3a2238		0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08
>3a2248		85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7 69
>3a2258		04 00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00 c2
>3a2268		20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9
>3a2278		20 c1 21 20 a4 3f 28 60 08 08 c2 20 48 a9 00 08
>3a2288		5b 68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04 00
>3a2298		85 08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00 b7
>3a22a8		18 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85
>3a22b8		0c c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7 65
>3a22c8		0c 85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c 85
>3a22d8		d7 c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00 d0
>3a22e8		f8 20 a4 3f 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a22f8		68 28 c2 30 a9 00 00 85 08 a9 36 00 85 0a a0 02
>3a2308		00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18 a5
>3a2318		08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08
>3a2328		80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02
>3a2338		00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2
>3a2348		20 b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08
>3a2358		85 00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5 d9
>3a2368		69 00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69 00
>3a2378		00 85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00 00
>3a2388		85 0a 20 00 22 c2 20 a5 10 a0 00 00 97 00 a5 d5
>3a2398		a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69
>3a23a8		00 00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8
>3a23b8		80 f7 20 a4 3f 28 60 08 c2 30 85 d5 20 ee 22 c9
>3a23c8		00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a
>3a23d8		48 20 3d 22 68 85 0a 68 85 08 a5 18 85 00 a5 1a
>3a23e8		85 02 20 97 1e e2 20 a7 00 f0 0a 20 3c 23 80 05
>3a23f8		a5 d5 20 80 22 28 60 0b 08 08 c2 20 48 a9 00 08
>3a2408		5b 68 28 e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8
>3a2418		80 f8 86 0c c2 30 8a c9 02 00 90 12 3a 18 69 00
>3a2428		4f aa 18 65 8d a8 a5 0c 3a 8b 44 00 00 ab c2 20
>3a2438		a6 53 a0 00 4f a5 8d 8b 54 00 1a ab e2 20 a5 0c
>3a2448		c9 02 90 18 a6 8d a9 22 9d 00 4f e8 bd 00 4f d0
>3a2458		fa a9 22 9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da
>3a2468		5a 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2478		c2 10 ad 00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab
>3a2488		7a fa 60 c2 20 a9 03 00 85 8d a9 ad 24 85 53 20
>3a2498		ff 23 80 e9 c2 20 a9 04 00 85 8d a9 b1 24 85 53
>3a24a8		20 ff 23 80 d8 44 49 52 00 42 52 55 4e 00 8b 08
>3a24b8		08 e2 20 48 a9 1a 48 ab 68 28 a2 34 d2 20 ac 03
>3a24c8		28 ab 60 08 e2 30 a9 01 20 1c 00 20 5b 01 f0 06
>3a24d8		c9 0d f0 02 80 f5 28 60 0b 08 08 c2 20 48 a9 00
>3a24e8		08 5b 68 28 c2 30 64 d5 a9 00 4f 85 18 a9 00 00
>3a24f8		85 1a 20 83 08 c2 20 a5 d5 d0 05 20 a6 20 80 07
>3a2508		20 bf 23 28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe
>3a2518		9a 20 b6 24 20 08 00 20 0c 00 a9 00 00 20 1c 00
>3a2528		20 67 24 20 e0 24 b0 ec 80 e7 e2 20 a5 25 c5 2b
>3a2538		d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20 48 a9 00
>3a2548		08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a2558		00 20 a3 1b e2 20 dc d2 08 08 e2 20 a5 25 c9 02
>3a2568		d0 2a a5 2b c9 02 d0 05 20 8e 14 80 34 08 c2 20
>3a2578		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a2588		20 29 ff 00 20 a3 1b e2 20 dc d2 08 20 79 07 a5
>3a2598		25 c9 00 d0 05 20 4d 4d 80 07 c9 01 d0 cf 20 92
>3a25a8		4e 28 60 08 20 79 07 e2 20 a5 25 c9 00 d0 05 20
>3a25b8		5f 4d 80 07 c9 01 d0 05 20 87 4e 28 60 08 c2 20
>3a25c8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a25d8		20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 20 79 07
>3a25e8		e2 20 a5 25 c9 00 d0 05 20 71 4d 80 07 c9 01 d0
>3a25f8		05 20 28 4f 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2608		e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a2618		e2 20 dc d2 08 20 e3 06 20 14 07 20 dd 4e 60 a5
>3a2628		21 8f 1a 01 00 a5 27 8f 18 01 00 af 1e 01 00 85
>3a2638		21 60 20 75 05 20 a6 05 c2 20 a5 21 25 27 85 21
>3a2648		a5 23 25 29 85 23 60 20 75 05 20 a6 05 c2 20 a5
>3a2658		21 05 27 85 21 a5 23 05 29 85 23 60 20 75 05 c2
>3a2668		20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23 60
>3a2678		c2 20 a5 23 c5 29 90 0b a5 21 c5 27 90 05 64 21
>3a2688		64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5
>3a2698		23 90 0b a5 27 c5 21 90 05 64 21 64 23 60 a9 ff
>3a26a8		ff 85 21 85 23 60 c2 20 a5 29 c5 23 d0 0e a5 27
>3a26b8		c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23
>3a26c8		60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9
>3a26d8		ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 23
>3a26e8		c5 29 90 10 d0 06 a5 21 c5 27 90 08 a9 ff ff 85
>3a26f8		21 85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90
>3a2708		0f f0 05 64 21 64 23 60 a5 21 c5 27 f0 02 b0 f3
>3a2718		a9 ff ff 85 21 85 23 60 08 e2 20 20 51 1a 20 87
>3a2728		06 20 f6 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20
>3a2738		83 1f 20 51 1a 20 87 06 20 f6 04 a5 21 0a 0a 0a
>3a2748		0a 05 27 48 a9 2c 20 83 1f 20 51 1a 20 87 06 20
>3a2758		f6 04 a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09
>3a2768		0c 8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68
>3a2778		8f 04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 bb
>3a2788		1e 28 60 08 e2 20 20 51 1a 20 87 06 20 f6 04 a5
>3a2798		21 0a 0a 0a 0a 05 27 48 a9 2c 20 83 1f 20 51 1a
>3a27a8		20 87 06 20 f6 04 a5 21 0a 0a 0a 0a 05 27 48 a9
>3a27b8		2c 20 83 1f 20 51 1a 20 75 05 20 2c 05 c2 20 a5
>3a27c8		21 85 90 a5 27 85 21 20 f6 04 e2 20 a5 21 0a 0a
>3a27d8		0a 0a 05 27 48 c2 20 a5 90 85 21 20 f6 04 e2 20
>3a27e8		a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f
>3a27f8		0e 08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09
>3a2808		08 af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08
>3a2818		af 20 bb 1e 28 60 08 20 51 1a 20 87 06 e2 20 a5
>3a2828		21 29 0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 83 1f
>3a2838		20 51 1a 20 87 06 a5 21 29 0f 0f 53 08 00 8f 1e
>3a2848		00 00 28 60 08 e2 20 20 51 1a 20 87 06 a5 21 48
>3a2858		a9 2c 20 83 1f 20 51 1a 20 87 06 a5 21 48 a9 2c
>3a2868		20 83 1f 20 51 1a 20 87 06 a5 21 8f 0d 00 af 68
>3a2878		8f 0e 00 af 68 8f 0f 00 af 28 60 08 e2 20 20 51
>3a2888		1a 20 75 05 a5 21 f0 16 a9 01 8f 04 00 af a9 20
>3a2898		8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a a9 00
>3a28a8		8f 04 00 af 22 2c 11 00 a9 2c 85 35 20 b8 1f 90
>3a28b8		35 20 76 1e 20 51 1a 20 87 06 a5 21 48 a9 2c 20
>3a28c8		83 1f 20 51 1a 20 87 06 a5 21 48 a9 2c 20 83 1f
>3a28d8		20 51 1a 20 87 06 a5 21 8f 05 00 af 68 8f 06 00
>3a28e8		af 68 8f 07 00 af 28 60 08 c2 20 20 51 1a 20 87
>3a28f8		06 a9 af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa bf
>3a2908		80 29 1a 85 9c a9 2c 00 20 83 1f 20 51 1a 20 87
>3a2918		06 a5 21 0a 0a 18 65 9c 85 9c a9 2c 00 20 83 1f
>3a2928		20 51 1a 20 87 06 a0 02 00 a5 21 e2 20 97 9c a9
>3a2938		2c 20 83 1f 20 51 1a 20 87 06 a0 01 00 a5 21 e2
>3a2948		20 97 9c a9 2c 20 83 1f 20 51 1a 20 87 06 a0 00
>3a2958		00 a5 21 e2 20 97 9c 28 60 08 c2 20 48 a9 00 08
>3a2968		5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a2978		20 a3 1b e2 20 dc d2 08 00 20 00 24 00 28 00 2c
>3a2988		00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08 20
>3a2998		51 1a 20 75 05 c2 20 a5 21 89 00 01 d0 17 af 00
>3a29a8		00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af a9
>3a29b8		01 8f 01 00 af c2 20 a5 21 8f 00 00 af e2 20 a5
>3a29c8		22 c2 20 29 03 00 0a aa c2 20 bf 1b 2a 1a 8f 10
>3a29d8		f0 1a bf 23 2a 1a 8f 12 f0 1a af 10 f0 1a 8f 08
>3a29e8		01 00 af 12 f0 1a 8f 0a 01 00 af 0c 01 00 8f 14
>3a29f8		f0 1a e2 20 af 0e 01 00 8f 16 f0 1a 22 2c 11 00
>3a2a08		c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00 28
>3a2a18		7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02 f0
>3a2a28		00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00 1e
>3a2a38		00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00 16
>3a2a48		00 34 00 da 08 c2 30 a5 21 c9 02 00 b0 1c 0a 0a
>3a2a58		aa bf 00 f0 1a 85 9c bf 02 f0 1a 85 9e c9 f0 00
>3a2a68		b0 08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00
>3a2a78		08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2a88		00 20 a3 1b e2 20 dc d2 08 da 08 c2 30 a5 21 c9
>3a2a98		02 00 b0 17 0a 0a aa bf 08 f0 1a 85 9c bf 0a f0
>3a2aa8		1a 85 9e c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9
>3a2ab8		00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a2ac8		ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 20 51 1a
>3a2ad8		20 87 06 c2 20 a5 21 c9 02 00 b0 5d 85 53 a9 2c
>3a2ae8		00 20 83 1f 20 51 1a 20 87 06 c2 20 a5 21 85 57
>3a2af8		a9 2c 00 20 83 1f 20 51 1a 20 87 06 a5 53 0a 0a
>3a2b08		0a aa e2 20 a5 57 d0 05 a5 21 0a 80 04 a5 21 38
>3a2b18		2a 9f 00 01 af c2 20 a9 2c 00 85 35 20 b8 1f b0
>3a2b28		37 c2 20 08 c2 20 a9 00 00 85 21 a9 b0 00 85 23
>3a2b38		e2 20 a9 00 85 25 28 80 27 08 c2 20 48 a9 00 08
>3a2b48		5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2b58		20 a3 1b e2 20 dc d2 08 c2 20 20 76 1e 20 51 1a
>3a2b68		c2 20 a5 53 0a 0a aa a5 21 9f 00 f0 1a 9f 08 f0
>3a2b78		1a 85 5b a5 23 9f 02 f0 1a 38 e9 b0 00 9f 0a f0
>3a2b88		1a 85 5d a5 53 0a 0a 0a aa e2 20 a5 5b 9f 01 01
>3a2b98		af a5 5c 9f 02 01 af a5 5d 9f 03 01 af a9 00 9f
>3a2ba8		04 01 af 9f 05 01 af 28 60 08 c2 20 48 a9 00 08
>3a2bb8		5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a2bc8		20 a3 1b e2 20 dc d2 08 08 c2 20 20 51 1a 20 87
>3a2bd8		06 20 91 2a c2 20 a5 9c 8f 05 04 af af 14 f0 1a
>3a2be8		8f 08 04 af e2 20 a5 9e 8f 07 04 af af 16 f0 1a
>3a2bf8		8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04 af
>3a2c08		af 01 04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2
>3a2c18		20 a5 5b 8f 08 01 00 af 10 f0 1a 8f 0a 01 00 18
>3a2c28		af 0c 01 00 65 57 85 0c af 0e 01 00 69 00 00 85
>3a2c38		0e 18 a5 0c 65 9c 85 0c a5 0e 65 9e 85 0e e2 20
>3a2c48		a5 53 87 0c 28 60 c2 20 a9 01 00 85 db 38 a5 5f
>3a2c58		e5 57 85 67 10 0b 49 ff ff 1a 85 67 a9 ff ff 85
>3a2c68		db a9 01 00 85 dd 38 a5 63 e5 5b 85 6b 10 0b 49
>3a2c78		ff ff 1a 85 6b a9 ff ff 85 dd a5 6b c5 67 b0 04
>3a2c88		a5 67 80 06 a5 6b 49 ff ff 1a 48 0a 68 6a 85 6f
>3a2c98		20 16 2c a5 57 c5 5f d0 06 a5 5b c5 63 f0 36 a5
>3a2ca8		6f 85 73 a5 67 49 ff ff 1a c5 73 10 10 f0 0e 38
>3a2cb8		a5 6f e5 6b 85 6f 18 a5 57 65 db 85 57 a5 73 c5
>3a2cc8		6b 10 cd f0 cb 18 a5 6f 65 67 85 6f 18 a5 5b 65
>3a2cd8		dd 85 5b 80 bb 60 08 a9 00 00 8f 00 04 af c2 20
>3a2ce8		a5 5b 8f 08 01 00 af 10 f0 1a 8f 0a 01 00 18 af
>3a2cf8		0c 01 00 65 57 85 0c e2 20 af 0e 01 00 69 00 85
>3a2d08		0e c2 20 18 a5 9c 65 0c 8f 05 04 af e2 20 a5 9e
>3a2d18		65 0e 8f 07 04 af c2 20 38 a5 5f e5 57 85 0c 8f
>3a2d28		08 04 af 38 af 10 f0 1a 8f 0e 04 af 38 a5 63 e5
>3a2d38		5b 8f 0a 04 af a9 01 00 8f 0c 04 af e2 20 af 53
>3a2d48		08 00 8f 01 04 af a9 87 8f 00 04 af af 01 04 af
>3a2d58		30 fa a9 00 8f 00 04 af 28 60 08 08 c2 20 48 a9
>3a2d68		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a2d78		30 20 51 1a 20 87 06 20 4b 2a a9 2c 00 20 83 1f
>3a2d88		20 51 1a 20 75 05 a5 21 85 57 a9 2c 00 20 83 1f
>3a2d98		20 51 1a 20 75 05 a5 21 85 5b a9 2c 00 20 83 1f
>3a2da8		20 51 1a 20 87 06 a5 21 85 53 20 16 2c 28 60 08
>3a2db8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a2dc8		48 ab 68 28 c2 30 20 51 1a 20 87 06 20 4b 2a a9
>3a2dd8		2c 00 20 83 1f 20 51 1a 20 75 05 a5 21 85 57 a9
>3a2de8		2c 00 20 83 1f 20 51 1a 20 75 05 a5 21 85 5b a9
>3a2df8		2c 00 20 83 1f 20 51 1a 20 75 05 a5 21 85 5f a9
>3a2e08		2c 00 20 83 1f 20 51 1a 20 75 05 a5 21 85 63 a9
>3a2e18		2c 00 20 83 1f 20 51 1a 20 87 06 a5 21 85 53 20
>3a2e28		4e 2c 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a2e38		e2 20 48 a9 00 48 ab 68 28 c2 30 20 51 1a 20 87
>3a2e48		06 20 91 2a a9 2c 00 20 83 1f 20 51 1a 20 75 05
>3a2e58		a5 21 85 57 a9 2c 00 20 83 1f 20 51 1a 20 75 05
>3a2e68		a5 21 85 5b a9 2c 00 20 83 1f 20 51 1a 20 75 05
>3a2e78		a5 21 85 5f a9 2c 00 20 83 1f 20 51 1a 20 75 05
>3a2e88		a5 21 85 63 a9 2c 00 20 83 1f 20 51 1a 20 87 06
>3a2e98		a5 21 85 53 20 de 2c 28 60 08 e2 20 a5 21 c9 40
>3a2ea8		b0 18 0a 0a 0a 18 69 00 85 9c a9 0c 69 00 85 9d
>3a2eb8		a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48 a9 00
>3a2ec8		08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2ed8		00 20 a3 1b e2 20 dc d2 08 08 e2 20 20 51 1a 20
>3a2ee8		87 06 20 a1 2e a5 21 8f 16 f0 1a a9 2c 20 83 1f
>3a2ef8		20 51 1a 20 87 06 a5 21 c9 08 b0 4b 48 a9 2c 20
>3a2f08		83 1f 20 51 1a 20 75 05 c2 20 38 a5 21 e9 00 00
>3a2f18		85 21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5 21 a0
>3a2f28		01 00 97 9c e2 20 a5 23 c8 c8 97 9c af 16 f0 1a
>3a2f38		aa bf 18 f0 1a 29 f1 85 0c 68 0a 29 0e 05 0c 87
>3a2f48		9c 9f 18 f0 1a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2f58		28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 a3
>3a2f68		1b e2 20 dc d2 08 08 c2 20 20 51 1a 20 87 06 20
>3a2f78		a1 2e a9 2c 00 20 83 1f 20 51 1a 20 75 05 a5 21
>3a2f88		a0 04 00 97 9c a9 2c 00 20 83 1f 20 51 1a 20 75
>3a2f98		05 a5 21 a0 06 00 97 9c 28 60 08 c2 20 20 51 1a
>3a2fa8		20 87 06 20 a1 2e a5 21 8f 16 f0 1a a9 2c 00 20
>3a2fb8		83 1f 20 51 1a 20 75 05 a5 21 48 a9 2c 00 85 35
>3a2fc8		20 b8 1f b0 1e af 16 f0 1a aa bf 18 f0 1a 29 fe
>3a2fd8		00 85 0c 68 29 01 00 05 0c 9f 18 f0 1a e2 20 87
>3a2fe8		9c 80 35 c2 20 20 76 1e 20 51 1a 20 87 06 a5 21
>3a2ff8		c9 08 00 b0 25 0a 0a 0a 0a 85 0c 68 29 01 00 05
>3a3008		0c 85 0c af 16 f0 1a aa e2 20 bf 18 f0 1a 29 8e
>3a3018		05 0c 87 9c 9f 18 f0 1a 28 60 08 c2 20 48 a9 00
>3a3028		08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3038		00 20 a3 1b e2 20 dc d2 08 08 c2 20 a5 21 c9 04
>3a3048		00 b0 19 8d 00 01 a9 04 00 8d 02 01 18 ad 04 01
>3a3058		69 80 02 85 9c a9 af 00 85 9e 28 60 08 c2 20 48
>3a3068		a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a3078		29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 a5 21
>3a3088		c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02 01 18 ad
>3a3098		04 01 69 00 02 85 9c a9 af 00 85 9e 28 60 08 c2
>3a30a8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a30b8		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20
>3a30c8		20 51 1a 20 87 06 20 41 30 c2 20 a5 9e 48 a5 9c
>3a30d8		48 a9 2c 00 20 83 1f 20 51 1a 20 87 06 c2 20 a5
>3a30e8		21 48 a9 2c 00 20 83 1f 20 51 1a 20 87 06 c2 20
>3a30f8		a5 21 48 a9 2c 00 20 83 1f 20 51 1a 20 75 05 c2
>3a3108		20 a5 21 85 5b a5 23 85 5d 68 85 57 68 85 53 68
>3a3118		85 9c 68 85 9e a5 5b 87 9c e2 20 38 a5 5d e9 b0
>3a3128		a0 02 00 97 9c c2 20 a5 57 d0 11 a5 59 d0 0d e2
>3a3138		20 a5 53 29 07 a0 03 00 97 9c 80 0d e2 20 a5 53
>3a3148		29 07 09 08 a0 03 00 97 9c 28 60 08 c2 20 20 51
>3a3158		1a 20 87 06 20 83 30 c2 20 a5 9e 48 a5 9c 48 a9
>3a3168		2c 00 20 83 1f 20 51 1a 20 75 05 c2 20 a5 21 48
>3a3178		a9 2c 00 20 83 1f 20 51 1a 20 75 05 c2 20 a5 21
>3a3188		48 a9 2c 00 20 83 1f 20 51 1a 20 75 05 c2 20 a5
>3a3198		21 85 5b a5 23 85 5d 68 85 57 68 85 53 68 85 9c
>3a31a8		68 85 9e a5 5b a0 01 00 97 9c e2 20 38 a5 5d e9
>3a31b8		b0 c8 c8 97 9c c2 20 a5 53 a0 04 00 97 9c a5 57
>3a31c8		a0 06 00 97 9c 28 60 08 c2 20 20 51 1a 20 87 06
>3a31d8		20 83 30 c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 83
>3a31e8		1f 20 51 1a 20 75 05 c2 20 68 85 9c 68 85 9e a5
>3a31f8		21 d0 06 e2 20 a9 00 80 04 e2 20 a9 01 e2 20 a0
>3a3208		00 00 97 9c 28 60 08 c2 20 20 51 1a 20 87 06 20
>3a3218		83 30 a5 9e 48 a5 9c 48 a9 2c 00 20 83 1f 20 51
>3a3228		1a 20 75 05 a5 21 48 a9 2c 00 20 83 1f 20 51 1a
>3a3238		20 75 05 a5 21 85 57 68 85 53 68 85 9c 68 85 9e
>3a3248		a5 53 a0 08 00 97 9c a5 57 a0 0a 00 97 9c 28 60
>3a3258		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>3a3268		8f 58 f0 1a af 5c f0 1a c9 b0 b0 1c 8f 24 04 af
>3a3278		af 5b f0 1a 8f 23 04 af af 5a f0 1a 8f 22 04 af
>3a3288		a9 10 8f 58 f0 1a 80 17 38 e9 b0 8f 04 04 af af
>3a3298		5b f0 1a 8f 03 04 af af 5a f0 1a 8f 02 04 af af
>3a32a8		59 f0 1a d0 3c af 58 f0 1a f0 1b af 5d f0 1a 8f
>3a32b8		28 04 af af 5e f0 1a 8f 29 04 af af 5f f0 1a 8f
>3a32c8		2a 04 af 82 8b 00 af 5d f0 1a 8f 08 04 af af 5e
>3a32d8		f0 1a 8f 09 04 af af 5f f0 1a 8f 0a 04 af 82 70
>3a32e8		00 af 58 f0 1a 09 01 8f 58 f0 1a 89 10 f0 32 af
>3a32f8		60 f0 1a 8f 28 04 af af 61 f0 1a 8f 29 04 af af
>3a3308		62 f0 1a 8f 2a 04 af af 63 f0 1a 8f 2b 04 af af
>3a3318		64 f0 1a 8f 2c 04 af af 65 f0 1a 8f 2d 04 af 80
>3a3328		30 af 60 f0 1a 8f 08 04 af af 61 f0 1a 8f 09 04
>3a3338		af af 62 f0 1a 8f 0a 04 af af 63 f0 1a 8f 0b 04
>3a3348		af af 64 f0 1a 8f 0c 04 af af 65 f0 1a 8f 0d 04
>3a3358		af e2 20 af 69 f0 1a c9 b0 b0 20 8f 27 04 af af
>3a3368		68 f0 1a 8f 26 04 af af 67 f0 1a 8f 25 04 af af
>3a3378		58 f0 1a 09 20 8f 58 f0 1a 80 17 38 e9 b0 8f 07
>3a3388		04 af af 68 f0 1a 8f 06 04 af af 67 f0 1a 8f 05
>3a3398		04 af af 66 f0 1a d0 3e af 58 f0 1a 89 20 f0 1b
>3a33a8		af 6a f0 1a 8f 28 04 af af 6b f0 1a 8f 29 04 af
>3a33b8		af 6c f0 1a 8f 2a 04 af 82 8b 00 af 6a f0 1a 8f
>3a33c8		08 04 af af 6b f0 1a 8f 09 04 af af 6c f0 1a 8f
>3a33d8		0a 04 af 82 70 00 af 58 f0 1a 09 02 8f 58 f0 1a
>3a33e8		89 20 f0 32 af 6d f0 1a 8f 28 04 af af 6e f0 1a
>3a33f8		8f 29 04 af af 6f f0 1a 8f 2a 04 af af 70 f0 1a
>3a3408		8f 2b 04 af af 71 f0 1a 8f 2e 04 af af 72 f0 1a
>3a3418		8f 2f 04 af 80 30 af 6d f0 1a 8f 08 04 af af 6e
>3a3428		f0 1a 8f 09 04 af af 6f f0 1a 8f 0a 04 af af 70
>3a3438		f0 1a 8f 0b 04 af af 71 f0 1a 8f 0e 04 af af 72
>3a3448		f0 1a 8f 0f 04 af af 58 f0 1a 29 30 f0 43 c9 10
>3a3458		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 1a 29 03 f0
>3a3468		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3478		20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2
>3a3488		20 dc d2 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>3a3498		00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20
>3a34a8		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a34b8		20 29 ff 00 20 a3 1b e2 20 dc d2 08 a9 01 80 02
>3a34c8		a9 03 8f 00 04 af 80 34 af 58 f0 1a 29 01 0a 09
>3a34d8		11 8f 20 04 af af 58 f0 1a 29 02 09 11 8f 00 04
>3a34e8		af 80 19 af 58 f0 1a 29 02 09 21 8f 20 04 af af
>3a34f8		58 f0 1a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>3a3508		09 80 8f 00 04 af af 58 f0 1a 29 30 f0 0f af 20
>3a3518		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>3a3528		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>3a3538		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>3a3548		1a e8 e0 1a 00 d0 f6 20 d7 1f c9 e6 f0 23 c9 e7
>3a3558		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3568		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a3578		08 20 83 1f 20 51 1a 20 75 05 c2 20 a5 21 8f 5a
>3a3588		f0 1a e2 20 a5 23 8f 5c f0 1a a9 2c 20 83 1f 20
>3a3598		51 1a 20 75 05 c2 20 a5 21 8f 5d f0 1a e2 20 a5
>3a35a8		23 8f 5f f0 1a e2 20 a9 00 8f 59 f0 1a 82 74 00
>3a35b8		20 83 1f 20 51 1a 20 75 05 c2 20 a5 21 8f 5a f0
>3a35c8		1a e2 20 a5 23 8f 5c f0 1a a9 2c 20 83 1f 20 51
>3a35d8		1a 20 31 06 c2 20 a5 21 8f 60 f0 1a 8d 00 01 a9
>3a35e8		2c 00 20 83 1f 20 51 1a 20 31 06 c2 20 a5 21 8f
>3a35f8		62 f0 1a 8d 02 01 a9 2c 00 20 83 1f 20 51 1a 20
>3a3608		31 06 c2 20 a5 21 8f 64 f0 1a c2 20 ad 04 01 8f
>3a3618		5d f0 1a e2 20 ad 06 01 8f 5f f0 1a e2 20 a9 01
>3a3628		8f 59 f0 1a e2 20 a9 99 20 83 1f 20 d7 1f c9 e6
>3a3638		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a3648		e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a3658		e2 20 dc d2 08 20 83 1f 20 51 1a 20 75 05 c2 20
>3a3668		a5 21 8f 67 f0 1a e2 20 a5 23 8f 69 f0 1a a9 2c
>3a3678		20 83 1f 20 51 1a 20 75 05 c2 20 a5 21 8f 6a f0
>3a3688		1a e2 20 a5 23 8f 6c f0 1a e2 20 a9 00 8f 66 f0
>3a3698		1a 82 74 00 20 83 1f 20 51 1a 20 75 05 c2 20 a5
>3a36a8		21 8f 67 f0 1a e2 20 a5 23 8f 69 f0 1a a9 2c 20
>3a36b8		83 1f 20 51 1a 20 31 06 c2 20 a5 21 8f 6d f0 1a
>3a36c8		8d 00 01 a9 2c 00 20 83 1f 20 51 1a 20 31 06 c2
>3a36d8		20 a5 21 8f 6f f0 1a 8d 02 01 a9 2c 00 20 83 1f
>3a36e8		20 51 1a 20 31 06 c2 20 a5 21 8f 71 f0 1a c2 20
>3a36f8		ad 04 01 8f 6a f0 1a e2 20 ad 06 01 8f 6c f0 1a
>3a3708		e2 20 a9 01 8f 66 f0 1a c2 20 af 5d f0 1a cf 6a
>3a3718		f0 1a d0 14 e2 20 af 5f f0 1a cf 6c f0 1a d0 08
>3a3728		c2 20 20 58 32 28 2b 60 08 c2 20 48 a9 00 08 5b
>3a3738		68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a3748		a3 1b e2 20 dc d2 08 08 20 97 1e e2 20 a7 00 d0
>3a3758		03 4c f4 37 c9 3a d0 03 4c f4 37 c9 22 d0 0b 20
>3a3768		70 19 20 df 40 a9 3b 20 83 1f 20 2a 04 90 41 20
>3a3778		fb 4c 90 3c a9 3f 20 18 00 a9 20 20 18 00 20 10
>3a3788		00 e2 20 a5 e8 c9 02 f0 46 c9 00 f0 62 c9 01 f0
>3a3798		5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a37a8		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a37b8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a37c8		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 c2
>3a37d8		20 a9 00 4c 85 21 a9 00 00 85 23 e2 20 a9 02 85
>3a37e8		25 c2 20 20 95 4c a9 0d 00 20 18 00 28 60 ea c2
>3a37f8		20 a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00
>3a3808		00 85 02 20 c3 07 c2 20 a5 3e 85 00 a5 40 85 02
>3a3818		80 cf 08 20 97 1e e2 20 a7 00 f0 46 c9 3a f0 42
>3a3828		20 2a 04 90 3f 20 fb 4c 90 3a 20 14 00 e2 20 8f
>3a3838		00 4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21
>3a3848		a9 00 00 85 23 e2 20 a9 02 85 25 20 95 4c 20 97
>3a3858		1e a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 76 1e
>3a3868		80 b1 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3878		a9 02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20
>3a3888		dc d2 08 08 20 51 1a 20 75 05 e2 20 a9 5c 85 a0
>3a3898		c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20 a9 2c
>3a38a8		85 35 20 b8 1f 90 41 20 76 1e 20 51 1a 20 31 06
>3a38b8		c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 b8 1f 90
>3a38c8		27 20 76 1e 20 51 1a 20 31 06 c2 20 a5 21 85 57
>3a38d8		e2 20 a9 2c 85 35 20 b8 1f 90 0d 20 76 1e 20 51
>3a38e8		1a 20 31 06 c2 20 a4 21 a6 57 a5 53 0b 8b 08 22
>3a38f8		a0 08 00 28 ab 2b 20 bb 1e 28 60 08 c2 20 48 a9
>3a3908		00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3918		ff 00 20 a3 1b e2 20 dc d2 08 08 e2 20 20 97 1e
>3a3928		20 fb 4c 90 64 a9 8c 20 83 1f a9 01 20 bf 17 a2
>3a3938		01 00 a9 00 8f 00 4d 00 20 51 1a 20 31 06 c2 20
>3a3948		a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00 4d
>3a3958		00 30 55 e8 e8 20 97 1e a7 00 c9 2c f0 25 c9 8d
>3a3968		d0 27 20 76 1e 20 d8 55 c2 20 a5 be 85 21 e2 20
>3a3978		a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25 20 95
>3a3988		4c 28 60 20 76 1e 4c 40 39 08 c2 20 48 a9 00 08
>3a3998		5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a39a8		20 a3 1b e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a39b8		68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a39c8		a3 1b e2 20 dc d2 08 08 20 97 1e e2 20 a7 00 f0
>3a39d8		28 c9 3a f0 24 20 2a 04 90 21 20 fb 4c 90 1c 20
>3a39e8		22 3a 20 95 4c 20 97 1e a7 00 f0 0d c9 3a f0 09
>3a39f8		c9 2c d0 07 20 76 1e 80 cf 28 60 08 c2 20 48 a9
>3a3a08		00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3a18		ff 00 20 a3 1b e2 20 dc d2 08 08 a5 02 85 40 a5
>3a3a28		00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5 38 d0
>3a3a38		04 a5 36 f0 4e a5 36 85 00 a5 38 85 02 a5 3a 85
>3a3a48		18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a f0 4f c9
>3a3a58		2c d0 03 20 76 1e 20 97 1e a7 00 c9 22 f0 4e 20
>3a3a68		43 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3a78		a9 02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20
>3a3a88		dc d2 08 c2 20 a9 00 00 85 18 a9 36 00 85 1a 18
>3a3a98		a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20
>3a3aa8		a9 80 85 33 a9 a8 85 35 20 cd 1e 80 a9 20 70 19
>3a3ab8		80 03 20 a5 18 c2 20 a5 00 85 36 a5 02 85 38 a5
>3a3ac8		18 85 3a a5 1a 85 3c a5 42 85 18 a5 44 85 1a a5
>3a3ad8		3e 85 00 a5 40 85 02 28 60 20 bb 1e 60 64 36 64
>3a3ae8		38 64 3a 64 3c 60 20 24 00 60 20 51 1a c2 20 a5
>3a3af8		23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22 20 76 1e
>3a3b08		20 51 1a c2 20 a5 24 d0 35 68 85 08 68 85 0a c2
>3a3b18		20 a5 21 87 08 e2 20 a0 02 00 a5 23 97 08 60 08
>3a3b28		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3b38		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2
>3a3b48		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a3b58		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 20 51 1a
>3a3b68		c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 19
>3a3b78		20 76 1e 20 51 1a c2 20 a5 23 d0 2c 68 85 08 68
>3a3b88		85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9 00 08
>3a3b98		5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3ba8		20 a3 1b e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3bb8		68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3bc8		a3 1b e2 20 dc d2 08 20 51 1a c2 20 a5 23 48 a5
>3a3bd8		21 48 e2 20 a7 00 c9 2c d0 1f 20 76 1e 20 51 1a
>3a3be8		e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68 85 08 68
>3a3bf8		85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9 00 08
>3a3c08		5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3c18		20 a3 1b e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3c28		68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3c38		a3 1b e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3c48		28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 a3
>3a3c58		1b e2 20 dc d2 08 08 e2 20 a7 00 f0 05 20 76 1e
>3a3c68		80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2 20
>3a3c78		a5 1a 20 6a 1b a5 18 20 6a 1b a5 02 48 a5 00 48
>3a3c88		20 bb 1e a5 02 20 6a 1b a5 00 20 6a 1b 68 85 00
>3a3c98		68 85 02 20 97 1e 20 fb 4c b0 1f 08 c2 20 48 a9
>3a3ca8		00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29
>3a3cb8		ff 00 20 a3 1b e2 20 dc d2 08 e2 20 a5 e8 20 81
>3a3cc8		1b a5 e7 20 81 1b c2 20 a5 e5 20 6a 1b 20 97 1e
>3a3cd8		e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0 04 c9 01
>3a3ce8		f0 00 20 76 1e 20 51 1a 20 95 4c e2 20 a9 99 20
>3a3cf8		83 1f 20 51 1a c2 20 a5 25 20 6a 1b a5 23 20 6a
>3a3d08		1b a5 21 20 6a 1b e2 20 a9 9a 85 35 20 b8 1f 90
>3a3d18		1b 20 76 1e 20 51 1a e2 20 a5 25 20 6a 1b c2 20
>3a3d28		a5 23 20 6a 1b a5 21 20 6a 1b 80 14 c2 20 a9 00
>3a3d38		00 20 6a 1b a9 00 00 20 6a 1b a9 01 00 20 6a 1b
>3a3d48		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3d58		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a3d68		08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a3d78		48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9
>3a3d88		0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00 85 e8
>3a3d98		c2 20 5a 20 47 4b 7a c2 20 b9 00 00 85 27 b9 02
>3a3da8		00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20 61 25
>3a3db8		20 95 4c 7a c2 20 b9 06 00 85 27 b9 08 00 85 29
>3a3dc8		e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a 20 01
>3a3dd8		27 20 62 05 f0 28 80 08 20 e4 26 20 62 05 f0 1e
>3a3de8		c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00 85
>3a3df8		18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17 a2 21
>3a3e08		08 20 73 17 c2 20 18 a5 31 69 1a 00 85 31 a5 33
>3a3e18		69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a 48 20
>3a3e28		97 1e 20 c3 07 a5 21 f0 26 20 75 21 90 42 e2 20
>3a3e38		a9 02 85 da 20 bb 1e c2 20 68 20 6a 1b 68 20 6a
>3a3e48		1b a5 02 20 6a 1b a5 00 20 6a 1b e6 2f 28 60 68
>3a3e58		68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3e68		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a3e78		68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06
>3a3e88		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a3e98		08 08 c2 30 a5 2f f0 1e 20 8c 1b 85 00 20 8c 1b
>3a3ea8		85 02 20 8c 1b 85 18 20 8c 1b 85 1a c6 2f e2 20
>3a3eb8		a9 03 85 da 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3ec8		e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a3ed8		e2 20 dc d2 08 08 20 51 1a 20 62 05 f0 1c e2 20
>3a3ee8		a9 94 20 83 1f 20 c3 07 20 62 05 f0 12 20 75 21
>3a3ef8		90 2c e2 20 a9 02 85 da 80 03 20 bb 1e 28 60 08
>3a3f08		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3f18		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2
>3a3f28		20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00
>3a3f38		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 e2 20
>3a3f48		a9 01 85 da 28 60 08 20 97 1e 20 c3 07 a5 21 f0
>3a3f58		0d 20 75 21 90 27 e2 20 a9 02 85 da 28 60 08 c2
>3a3f68		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3f78		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20
>3a3f88		48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2
>3a3f98		20 29 ff 00 20 a3 1b e2 20 dc d2 08 20 15 17 20
>3a3fa8		de 0e 20 46 4a 60 08 a7 00 10 03 20 76 1e 20 fb
>3a3fb8		4c b0 03 4c 25 40 e2 20 20 d7 1f c9 8c d0 0e a9
>3a3fc8		8c 20 83 1f a9 00 8f 00 4d 00 20 a8 18 20 97 1e
>3a3fd8		e2 20 a7 00 c9 87 f0 03 4c 25 40 20 76 1e a5 e8
>3a3fe8		48 a5 e7 48 a5 e6 48 a5 e5 48 20 51 1a 68 85 e5
>3a3ff8		68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b 20 b9 4a
>3a4008		90 3a c2 20 a0 09 00 b7 08 85 be e2 20 c8 c8 b7
>3a4018		08 85 c0 20 b9 57 80 03 20 95 4c 28 60 08 c2 20
>3a4028		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a4038		20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48
>3a4048		a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20
>3a4058		29 ff 00 20 a3 1b e2 20 dc d2 08 08 e2 20 20 d7
>3a4068		1f c9 00 f0 6d 20 51 1a e2 20 a5 25 c9 ff f0 1b
>3a4078		c9 02 d0 05 20 df 40 80 12 c9 00 d0 05 20 ff 40
>3a4088		80 09 c9 01 d0 4f 20 12 41 80 00 20 97 1e a7 00
>3a4098		f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08 c2
>3a40a8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a40b8		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 a9 09 20
>3a40c8		18 00 20 76 1e 20 97 1e a7 00 f0 09 c9 3a f0 05
>3a40d8		80 93 20 1f 03 28 60 08 8b 08 c2 20 48 a9 00 08
>3a40e8		5b 68 28 e2 20 c2 10 a0 00 00 b7 21 f0 06 20 18
>3a40f8		00 c8 80 f6 ab 28 60 08 c2 20 20 a5 13 a5 14 85
>3a4108		21 a5 16 85 23 20 df 40 28 60 08 20 c7 54 c2 20
>3a4118		a5 14 85 21 a5 16 85 23 20 df 40 28 60 08 e2 20
>3a4128		85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8 a5 b3
>3a4138		29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c 20 83
>3a4148		1f 08 20 51 1a e2 20 c2 10 af 0e 08 af 09 08 8f
>3a4158		0e 08 af 20 46 13 a0 00 00 af 06 08 af 20 25 41
>3a4168		a9 2f 97 14 c8 af 09 08 af 20 25 41 a9 2f 97 14
>3a4178		c8 af 0f 08 af 20 25 41 af 0a 08 af 20 25 41 a9
>3a4188		00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a4198		14 85 21 a5 16 85 23 e2 20 a9 02 85 25 28 e2 20
>3a41a8		20 76 1e 60 e2 20 a9 8c 20 83 1f 08 20 51 1a e2
>3a41b8		20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 46 13
>3a41c8		a0 00 00 af 04 08 af 29 7f 20 25 41 a9 3a 97 14
>3a41d8		c8 af 02 08 af 20 25 41 a9 3a 97 14 c8 af 00 08
>3a41e8		af 20 25 41 a9 00 97 14 af 0e 08 af 29 f7 8f 0e
>3a41f8		08 af c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a4208		85 25 28 e2 20 20 76 1e 60 08 c2 20 20 51 1a 20
>3a4218		75 05 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff
>3a4228		85 23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20
>3a4238		83 1f 08 c2 30 20 51 1a 20 07 06 c2 20 a5 23 48
>3a4248		a5 21 48 20 97 1e e2 20 a7 00 c9 2c f0 03 4c aa
>3a4258		42 20 76 1e 20 51 1a 20 31 06 c2 20 a5 21 48 20
>3a4268		97 1e e2 20 a7 00 c9 2c f0 03 4c aa 42 20 76 1e
>3a4278		20 51 1a 20 31 06 c2 20 a5 21 85 8d e2 20 a5 23
>3a4288		85 8f c2 20 68 85 27 a9 00 00 85 29 68 85 21 68
>3a4298		85 23 e2 20 a9 02 85 25 20 96 15 e2 20 20 76 1e
>3a42a8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a42b8		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a42c8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a42d8		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a42e8		e2 20 a9 8c 20 83 1f 08 c2 30 20 51 1a e2 20 a5
>3a42f8		25 c9 02 f0 03 4c 6c 43 c2 20 a5 23 48 a5 21 48
>3a4308		20 97 1e e2 20 a7 00 c9 2c f0 03 4c 8b 43 20 76
>3a4318		1e 20 51 1a e2 20 a5 25 c9 00 d0 48 c2 20 a5 21
>3a4328		85 8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a4338		e2 20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38
>3a4348		e5 8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00
>3a4358		85 27 85 29 e2 20 a9 00 85 2b 20 96 15 e2 20 20
>3a4368		76 1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4378		a9 04 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20
>3a4388		dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4398		02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc
>3a43a8		d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a43b8		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a43c8		08 e2 20 a9 8c 20 83 1f 08 c2 30 20 51 1a e2 20
>3a43d8		a5 25 c9 02 f0 03 4c 35 44 c2 20 a5 23 48 a5 21
>3a43e8		48 20 97 1e e2 20 a7 00 c9 2c f0 03 4c 54 44 20
>3a43f8		76 1e 20 51 1a e2 20 a5 25 c9 00 d0 30 c2 20 a5
>3a4408		21 85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2
>3a4418		20 a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9
>3a4428		02 85 25 20 96 15 e2 20 20 76 1e 28 60 08 c2 20
>3a4438		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a4448		20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48
>3a4458		a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a4468		29 ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48 a9
>3a4478		00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a4488		ff 00 20 a3 1b e2 20 dc d2 08 e2 20 a9 8c 20 83
>3a4498		1f 20 51 1a c2 10 e2 20 a5 25 c9 02 d0 23 c2 20
>3a44a8		a5 00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02
>3a44b8		20 c3 07 a5 3e 85 00 a5 40 85 02 e2 20 20 76 1e
>3a44c8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a44d8		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a44e8		e2 20 a9 8c 20 83 1f 08 20 51 1a c2 10 e2 20 a5
>3a44f8		25 c9 00 d0 1a 20 a5 13 c2 20 a5 14 85 21 a5 16
>3a4508		85 23 e2 20 a9 02 85 25 28 e2 20 20 76 1e 60 08
>3a4518		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a4528		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20
>3a4538		a9 8c 20 83 1f 08 20 51 1a 20 07 06 c2 20 64 0c
>3a4548		64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0 03
>3a4558		c8 80 f3 b7 21 20 54 04 90 1e c2 20 06 0c 26 0e
>3a4568		06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 75
>3a4578		04 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5 0e
>3a4588		85 23 e2 20 a9 00 85 25 28 e2 20 20 76 1e 60 e2
>3a4598		20 a9 8c 20 83 1f 08 20 51 1a 20 75 05 20 46 13
>3a45a8		e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf 00
>3a45b8		d0 1a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf 00
>3a45c8		d0 1a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24 85
>3a45d8		23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23 d0
>3a45e8		c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23 a5
>3a45f8		17 85 24 a9 02 85 25 28 e2 20 20 76 1e 60 08 c2
>3a4608		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4618		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20 a9
>3a4628		8c 20 83 1f 20 51 1a e2 20 a5 25 c9 02 d0 1f 8b
>3a4638		a5 23 48 ab c2 10 a6 21 20 2a 14 ab 84 21 c2 20
>3a4648		64 23 e2 20 a9 00 85 25 e2 20 20 76 1e 60 08 c2
>3a4658		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4668		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20 a9
>3a4678		8c 20 83 1f 20 51 1a e2 20 a5 25 c9 00 d0 12 e2
>3a4688		20 a7 21 85 21 64 22 64 23 64 2e e2 20 20 76 1e
>3a4698		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a46a8		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a46b8		e2 20 a9 8c 20 83 1f 20 51 1a e2 20 a5 25 c9 00
>3a46c8		d0 1d c2 20 a7 21 85 0c e2 20 a0 02 00 b7 21 85
>3a46d8		23 64 24 c2 20 a5 0c 85 21 e2 20 20 76 1e 60 08
>3a46e8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a46f8		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20
>3a4708		a9 8c 20 83 1f 20 51 1a e2 20 a5 25 c9 00 d0 0e
>3a4718		c2 20 a7 21 85 21 64 23 e2 20 20 76 1e 60 08 c2
>3a4728		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4738		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20 a9
>3a4748		8c 20 83 1f 20 51 1a e2 20 a5 25 c9 00 d0 24 20
>3a4758		46 13 a5 21 87 14 a9 00 a0 01 00 97 14 c2 20 a5
>3a4768		14 85 21 a5 16 85 23 e2 20 a9 02 85 25 e2 20 20
>3a4778		76 1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4788		04 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc
>3a4798		d2 08 e2 20 a9 8c 20 83 1f 20 51 1a e2 20 a5 25
>3a47a8		c9 02 d0 14 a7 21 85 21 64 22 64 23 64 24 a9 00
>3a47b8		85 25 e2 20 20 76 1e 60 08 c2 20 48 a9 00 08 5b
>3a47c8		68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a47d8		a3 1b e2 20 dc d2 08 e2 20 a9 8c 20 83 1f 20 51
>3a47e8		1a e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5
>3a47f8		23 d0 4e a5 22 d0 4a c2 10 20 46 13 a4 21 e2 20
>3a4808		a9 00 97 14 88 30 07 a9 20 97 14 88 10 fb a9 02
>3a4818		85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 76
>3a4828		1e 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4838		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a4848		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a4858		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a4868		e2 20 a9 8c 20 83 1f 20 51 1a e2 20 a5 25 c9 00
>3a4878		d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a
>3a4888		c2 10 20 46 13 a4 21 e2 20 a9 00 97 14 88 30 07
>3a4898		a9 09 97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85
>3a48a8		21 a5 16 85 23 e2 20 20 76 1e 60 08 c2 20 48 a9
>3a48b8		00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a48c8		ff 00 20 a3 1b e2 20 dc d2 08 08 c2 20 48 a9 00
>3a48d8		08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a48e8		00 20 a3 1b e2 20 dc d2 08 e2 20 a9 8c 20 83 1f
>3a48f8		20 51 1a 20 75 05 c2 20 a5 23 10 17 49 ff ff 85
>3a4908		23 a5 21 49 ff ff 18 69 01 00 85 21 a5 23 69 00
>3a4918		00 85 23 e2 20 20 76 1e 60 e2 20 a9 8c 20 83 1f
>3a4928		20 51 1a e2 20 a5 25 c9 00 d0 25 c2 20 a5 23 30
>3a4938		12 d0 04 a5 21 f0 13 a9 00 00 85 23 a9 01 00 85
>3a4948		21 80 07 a9 ff ff 85 23 85 21 e2 20 20 76 1e 60
>3a4958		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a4968		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 00
>3a4978		ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a4988		c2 20 a9 00 00 85 d7 e2 20 a9 36 85 d9 c2 30 a9
>3a4998		00 00 a0 00 00 97 d7 a0 02 00 97 d7 a0 04 00 97
>3a49a8		d7 20 4c 1e 2b 28 60 8b 08 c2 20 a9 00 00 85 18
>3a49b8		a9 36 00 85 1a 20 4c 1e 20 2b 21 28 ab 60 08 c2
>3a49c8		20 64 53 a9 ff 7f 85 57 20 1f 03 20 d7 1f 29 ff
>3a49d8		00 c9 00 00 f0 2c c9 81 00 f0 1a 20 97 1e 20 c3
>3a49e8		07 a5 21 85 53 20 d7 1f 29 ff 00 c9 00 00 f0 12
>3a49f8		c9 81 00 d0 2a 20 83 1f 20 97 1e 20 c3 07 a5 21
>3a4a08		85 57 a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 16
>3a4a18		16 68 85 00 68 85 02 68 85 18 68 85 1a 28 60 08
>3a4a28		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a4a38		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 08 08
>3a4a48		c2 20 48 a9 00 08 5b 68 28 c2 20 64 e2 64 e5 e2
>3a4a58		20 64 e4 64 e7 64 e8 c2 20 38 a5 d7 69 04 00 85
>3a4a68		df e2 20 a5 d9 69 00 85 e1 28 60 c9 5f f0 1a c9
>3a4a78		3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9
>3a4a88		7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10
>3a4a98		a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0
>3a4aa8		f2 b7 e5 20 9e 04 20 73 4a b0 03 28 38 60 28 18
>3a4ab8		60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b
>3a4ac8		20 9e 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e
>3a4ad8		00 c2 20 a9 00 4e 85 e5 e2 20 a9 00 85 e7 c2 20
>3a4ae8		a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4
>3a4af8		85 0a a5 e8 a0 00 00 d7 08 d0 17 c2 20 18 a5 08
>3a4b08		69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 93 4a
>3a4b18		b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7
>3a4b28		08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85
>3a4b38		08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08
>3a4b48		20 b9 4a b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4b58		20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2
>3a4b68		20 dc d2 08 c2 30 a0 09 00 b7 08 85 21 c8 c8 b7
>3a4b78		08 85 23 e2 20 a0 00 00 b7 08 85 25 28 60 08 c2
>3a4b88		20 18 a5 df 69 10 00 85 08 e2 20 a5 e1 69 00 85
>3a4b98		0a c5 ba 90 27 c2 20 a5 08 c5 b8 90 1f 08 c2 20
>3a4ba8		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a4bb8		20 29 ff 00 20 a3 1b e2 20 dc d2 08 c2 20 a5 df
>3a4bc8		85 be e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2 20
>3a4bd8		a5 0a 85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 1f 08
>3a4be8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a4bf8		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 c9 02
>3a4c08		d0 03 20 30 15 c2 10 20 86 4b c2 30 18 a5 be 69
>3a4c18		01 00 85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9
>3a4c28		00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10
>3a4c38		20 9e 04 20 73 4a 90 08 97 08 c8 c0 08 00 d0 ec
>3a4c48		c2 20 a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5
>3a4c58		e2 a0 0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20
>3a4c68		a5 be 85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5
>3a4c78		25 97 be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2
>3a4c88		20 a5 23 85 c0 20 54 11 20 69 11 80 ea 08 c2 30
>3a4c98		a5 e2 d0 06 e2 20 a5 e4 f0 05 20 b9 4a b0 05 20
>3a4ca8		de 4b 80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09
>3a4cb8		00 a5 21 97 08 c8 c8 a5 23 97 08 28 60 20 30 15
>3a4cc8		a0 09 00 b7 08 85 be c8 c8 e2 20 b7 08 85 c0 20
>3a4cd8		54 11 20 88 11 e2 20 a5 25 c9 02 f0 02 80 cd c2
>3a4ce8		20 a5 21 85 be e2 20 a5 23 85 c0 20 54 11 20 69
>3a4cf8		11 80 b9 08 20 97 1e e2 20 a7 00 20 2a 04 90 42
>3a4d08		c2 20 a5 00 85 e5 e2 20 a5 02 85 e7 20 76 1e a7
>3a4d18		00 f0 0d c9 24 f0 14 c9 25 f0 09 20 73 4a b0 ec
>3a4d28		a9 01 80 0c 20 76 1e a9 00 80 05 20 76 1e a9 02
>3a4d38		85 e8 20 d7 1f c9 8c d0 06 a5 e8 09 80 85 e8 28
>3a4d48		38 60 28 18 60 08 c2 20 18 a5 21 65 27 85 21 a5
>3a4d58		23 65 29 85 23 28 60 08 c2 20 38 a5 21 e5 27 85
>3a4d68		21 a5 23 e5 29 85 23 28 60 08 c2 30 64 0c 64 0e
>3a4d78		a6 21 d0 04 a6 23 f0 1a 18 66 23 46 21 90 0d 18
>3a4d88		a5 0c 65 27 85 0c a5 0e 65 29 85 0e 06 27 26 29
>3a4d98		80 de a5 0c 85 21 a5 0e 85 23 28 60 08 28 60 08
>3a4da8		c2 20 a5 23 c5 29 90 0b a5 21 c5 27 90 05 64 21
>3a4db8		64 23 60 a9 ff ff 85 21 85 23 28 60 08 c2 20 a5
>3a4dc8		29 c5 23 90 0b a5 27 c5 21 90 05 64 21 64 23 60
>3a4dd8		a9 ff ff 85 21 85 23 28 60 08 c2 20 8f 12 01 00
>3a4de8		8a 8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60
>3a4df8		08 c2 20 8f 1a 01 00 8a 8f 18 01 00 af 1e 01 00
>3a4e08		aa af 1c 01 00 28 60 08 e2 20 a9 49 8f 00 e2 af
>3a4e18		a9 02 8f 01 e2 af c2 20 a9 00 00 8f 08 e2 af 8f
>3a4e28		0a e2 af a5 21 8f 0c e2 af a5 23 8f 0e e2 af ea
>3a4e38		ea ea ea ea ea af 0c e2 af 85 21 af 0e e2 af 85
>3a4e48		23 e2 20 a5 22 85 21 a5 23 85 22 a5 24 85 23 30
>3a4e58		04 64 24 80 04 a9 ff 85 24 c2 20 a5 23 0a 66 23
>3a4e68		66 21 a5 23 0a 66 23 66 21 a5 23 0a 66 23 66 21
>3a4e78		a5 23 0a 66 23 66 21 e2 20 a9 00 85 25 28 60 08
>3a4e88		e2 20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f
>3a4e98		00 e2 af a9 02 8f 01 e2 af c2 20 a5 21 8f 08 e2
>3a4ea8		af a5 23 8f 0a e2 af a5 27 8f 0c e2 af a5 29 8f
>3a4eb8		0e e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10
>3a4ec8		c2 20 af 08 e2 af 85 21 af 0a e2 af 85 23 28 60
>3a4ed8		20 73 4f 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00
>3a4ee8		8f 00 e2 af c2 20 a5 21 8f 08 e2 af a5 23 8f 0a
>3a4ef8		e2 af a5 27 8f 0c e2 af a5 29 8f 0e e2 af ea ea
>3a4f08		ea e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2
>3a4f18		af 85 21 af 0a e2 af 85 23 28 60 20 73 4f 80 f9
>3a4f28		08 e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2
>3a4f38		20 a5 21 8f 08 e2 af a5 23 8f 0a e2 af a5 27 8f
>3a4f48		0c e2 af a5 29 8f 0e e2 af ea ea ea e2 20 af 04
>3a4f58		e2 af 29 07 d0 10 c2 20 af 08 e2 af 85 21 af 0a
>3a4f68		e2 af 85 23 28 60 20 73 4f 80 f9 89 01 00 f0 1f
>3a4f78		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f d1
>3a4f88		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 89
>3a4f98		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4fa8		0d 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc
>3a4fb8		d2 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a4fc8		e2 20 a9 0e 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a4fd8		e2 20 dc d2 08 60 08 e2 20 a9 00 8f 01 e2 af a9
>3a4fe8		02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00
>3a4ff8		00 8f 0e e2 af a5 21 8f 08 e2 af a5 23 8f 0a e2
>3a5008		af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00 c2
>3a5018		20 af 08 e2 af 85 21 af 0a e2 af 85 23 28 60 08
>3a5028		e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2 20
>3a5038		a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 21
>3a5048		8f 08 e2 af a5 23 8f 0a e2 af ea ea ea af 08 e2
>3a5058		af 85 21 af 0a e2 af 85 23 28 60 08 c2 20 a5 21
>3a5068		d0 0a a5 23 29 ff 7f d0 03 28 38 60 28 18 60 08
>3a5078		e2 20 38 e9 30 20 c2 04 c2 20 29 ff 00 18 65 21
>3a5088		85 21 a5 23 69 00 00 85 23 28 60 08 e2 20 c9 30
>3a5098		90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9 41
>3a50a8		90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9 37
>3a50b8		80 03 38 e9 30 06 21 26 22 26 23 26 24 06 21 26
>3a50c8		22 26 23 26 24 06 21 26 22 26 23 26 24 06 21 26
>3a50d8		22 26 23 26 24 05 21 85 21 28 60 08 e2 20 c9 30
>3a50e8		f0 06 c9 31 f0 0a 80 0f c2 20 06 21 26 23 80 07
>3a50f8		c2 20 38 26 21 26 23 28 60 08 e2 30 a5 5f f0 0d
>3a5108		aa a5 67 d0 15 a9 00 8f 01 e2 af 80 15 e2 20 a9
>3a5118		03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f 01
>3a5128		e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10 8f
>3a5138		08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0 8f
>3a5148		0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0 2c
>3a5158		af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08 00
>3a5168		e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f 08
>3a5178		e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af 08
>3a5188		e2 af 85 21 af 0a e2 af 85 23 e2 20 a9 01 85 25
>3a5198		28 60 08 c2 20 a5 5b 85 21 a5 5d 85 23 20 96 53
>3a51a8		c2 20 a5 21 85 27 a5 23 85 29 c2 20 a5 57 85 21
>3a51b8		a5 59 85 23 20 dd 4e c2 20 a5 53 85 27 a5 55 85
>3a51c8		29 20 92 4e c2 20 a5 21 85 27 a5 23 85 29 20 01
>3a51d8		51 20 28 4f c2 20 a5 63 f0 07 a5 23 09 00 80 85
>3a51e8		23 e2 20 a9 01 85 25 28 60 5a 08 c2 30 64 21 64
>3a51f8		23 64 53 64 55 64 63 64 57 64 59 a9 01 00 85 5b
>3a5208		64 5d 64 5f 64 61 64 67 e2 20 a0 00 00 b7 00 c9
>3a5218		2b f0 33 c9 2d f0 2b c9 26 f0 39 20 43 04 90 03
>3a5228		82 ab 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a5238		02 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc
>3a5248		d2 08 a9 01 85 63 c8 b7 00 c9 26 f0 07 20 43 04
>3a5258		b0 7c 80 cf c8 b7 00 c9 68 f0 0e c9 48 f0 0a c9
>3a5268		62 f0 4c c9 42 f0 48 80 ba c8 b7 00 20 54 04 b0
>3a5278		02 80 b0 20 93 50 c8 b7 00 20 54 04 b0 f5 e2 20
>3a5288		a5 63 f0 11 c2 20 38 a9 00 00 e5 21 85 21 a9 00
>3a5298		00 e5 23 85 23 e2 20 a9 00 85 25 c2 20 18 98 65
>3a52a8		00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a 60 c8
>3a52b8		b7 00 c9 30 f0 07 c9 31 f0 03 82 66 ff 20 e3 50
>3a52c8		c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff 20 77
>3a52d8		50 c8 b7 00 c9 2e f0 08 20 43 04 b0 f1 82 9e ff
>3a52e8		c2 20 20 96 53 c2 20 a5 21 85 53 a5 23 85 55 64
>3a52f8		21 64 23 e2 20 80 1a 20 77 50 c2 20 a5 5b 8f 00
>3a5308		01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85 5b e2
>3a5318		20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20 43 04 b0
>3a5328		d6 c2 20 20 96 53 c2 20 a5 21 85 57 a5 23 85 59
>3a5338		64 21 64 23 20 9a 51 e2 20 82 5f ff c2 20 20 96
>3a5348		53 c2 20 a5 21 85 57 a5 23 85 59 64 21 64 23 e2
>3a5358		20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20 43 04 b0
>3a5368		12 82 bf fe a9 01 85 67 c8 b7 00 20 43 04 b0 03
>3a5378		82 b0 fe 20 77 50 c8 b7 00 20 43 04 b0 f5 c2 20
>3a5388		a5 21 85 5f a5 23 85 61 20 9a 51 82 0d ff 08 e2
>3a5398		20 a9 96 85 0c a9 00 85 0d c2 30 a5 21 d0 0d a5
>3a53a8		23 d0 09 e2 20 a9 01 85 25 82 6c 00 10 17 c2 20
>3a53b8		38 a9 00 00 e5 21 85 21 a9 00 00 e5 23 85 23 e2
>3a53c8		20 a9 80 85 0d c2 20 a5 23 29 80 ff f0 1c c9 80
>3a53d8		00 f0 2b 46 23 66 21 e2 20 e6 0c c2 20 a5 23 29
>3a53e8		80 ff c9 80 00 d0 ec 82 14 00 06 21 26 23 e2 20
>3a53f8		c6 0c c2 20 a5 23 29 80 ff c9 80 00 d0 ec e2 20
>3a5408		a5 23 29 7f 85 23 a5 0c 4a 05 0d 85 24 a9 00 6a
>3a5418		05 23 85 23 a9 01 85 25 28 60 c2 20 20 63 50 90
>3a5428		0a e2 20 a9 00 85 25 64 26 80 05 c2 20 20 0f 4e
>3a5438		60 da 08 c2 20 a5 23 48 a5 21 48 20 87 4e 20 63
>3a5448		50 b0 11 a5 23 89 00 80 d0 05 a9 01 00 80 08 a9
>3a5458		ff ff 80 03 a9 00 00 fa 86 21 fa 86 23 28 fa 60
>3a5468		08 e2 20 97 21 c8 a9 00 97 21 28 60 da 08 e2 20
>3a5478		c9 80 90 0a 48 a9 2d 20 68 54 68 49 ff 1a c2 30
>3a5488		29 ff 00 c9 64 00 90 0e a2 64 00 20 e1 4d 18 69
>3a5498		30 00 20 68 54 8a a2 0a 00 20 e1 4d 18 69 30 00
>3a54a8		20 68 54 8a 18 69 30 00 20 68 54 28 fa 60 08 e2
>3a54b8		20 c2 10 a0 00 00 b7 21 f0 03 c8 80 f9 28 60 08
>3a54c8		e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20 63 50
>3a54d8		90 11 20 46 13 e2 20 a9 30 97 14 c8 a9 00 97 14
>3a54e8		82 cf 00 e2 20 a5 24 10 08 29 7f 85 24 a9 01 83
>3a54f8		01 c2 20 a9 00 00 83 03 c2 20 af d4 55 1a 85 27
>3a5508		af d6 55 1a 85 29 20 39 54 89 00 80 d0 13 20 27
>3a5518		50 a3 03 1a 83 03 20 39 54 c9 00 00 b0 f0 82 10
>3a5528		00 20 de 4f a3 03 3a 83 03 20 39 54 c9 ff ff f0
>3a5538		f0 e2 30 a5 23 0a a5 24 2a 83 05 38 a9 96 e3 05
>3a5548		aa f0 0f a5 23 09 80 85 23 46 23 66 22 66 21 ca
>3a5558		d0 f7 c2 10 e2 20 64 24 a9 00 85 25 a3 01 f0 11
>3a5568		c2 20 38 a9 00 00 e5 21 85 21 a9 00 00 e5 23 85
>3a5578		23 20 a5 13 c2 20 a5 14 85 21 a5 16 85 23 20 b6
>3a5588		54 e2 20 c8 a9 00 97 21 88 88 b7 21 c8 97 21 c0
>3a5598		02 00 d0 f4 a9 2e 97 21 e2 20 18 a3 03 69 05 83
>3a55a8		06 f0 19 20 b6 54 a9 45 20 68 54 a3 06 20 74 54
>3a55b8		80 0a c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a55c8		85 25 c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47
>3a55d8		08 20 54 11 c2 20 a9 01 00 85 21 a9 00 00 85 23
>3a55e8		e2 20 af 00 4d 00 c2 20 29 ff 00 85 8d a8 a2 01
>3a55f8		00 c2 20 bf 00 4d 00 85 27 a9 00 00 85 29 20 e4
>3a5608		25 e8 e8 88 d0 eb c2 20 a9 04 00 85 27 a9 00 00
>3a5618		85 29 20 e4 25 e2 20 af 00 4d 00 85 0c a9 00 85
>3a5628		0d c2 20 06 0c 38 a5 21 65 0c 85 21 a5 23 69 00
>3a5638		00 85 23 d0 29 e2 20 a5 e8 09 80 a6 21 20 06 0f
>3a5648		e2 20 af 00 4d 00 87 be a0 01 00 a2 00 00 e2 20
>3a5658		bf 01 4d 00 97 be e4 8d f0 23 e8 c8 80 f0 08 c2
>3a5668		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a5678		c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2 20 38
>3a5688		a5 be 67 be 85 08 a5 bf 69 00 85 09 a5 c0 69 00
>3a5698		85 0a 64 0b c2 20 a0 05 00 b7 c1 85 0c e2 20 c8
>3a56a8		c8 b7 c1 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18
>3a56b8		a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e
>3a56c8		d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64
>3a56d8		0a e2 20 af 00 4d 00 85 8d 64 8e a2 01 00 e2 20
>3a56e8		a7 be c5 8d f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a56f8		e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 a3 1b
>3a5708		e2 20 dc d2 08 c9 01 f0 3a a0 01 00 e2 20 bf 00
>3a5718		4d 00 85 21 64 22 64 23 64 24 b7 be 85 27 64 28
>3a5728		64 29 64 2a a5 21 c5 27 b0 68 20 e4 25 c2 20 18
>3a5738		a5 08 65 21 85 08 a5 0a 65 23 85 0a e8 e8 c8 c4
>3a5748		8d d0 c9 e2 20 18 bf 00 4d 00 85 8e 65 08 85 08
>3a5758		a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a c2
>3a5768		20 06 08 26 0a 06 08 26 0a e2 20 38 a5 08 65 8d
>3a5778		85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85
>3a5788		0a 18 a5 08 65 be 85 08 e2 20 a5 0a 65 c0 85 0a
>3a5798		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a57a8		8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2
>3a57b8		08 08 20 54 11 e2 20 a0 00 00 b7 c1 29 7f c5 25
>3a57c8		d0 28 a5 25 48 c2 20 a5 23 48 a5 21 48 20 d2 56
>3a57d8		68 85 21 68 85 23 e2 20 68 85 25 c2 20 a5 21 87
>3a57e8		08 a0 02 00 a5 23 97 08 28 60 08 c2 20 48 a9 00
>3a57f8		08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a5808		00 20 a3 1b e2 20 dc d2 08 08 20 54 11 f4 00 00
>3a5818		f4 00 00 e2 20 48 20 d2 56 e2 20 68 c2 20 68 68
>3a5828		c2 20 a7 08 85 21 a0 02 00 b7 08 85 23 e2 20 a0
>3a5838		00 00 b7 c1 29 7f 85 25 28 60 da 0b 08 08 c2 20
>3a5848		48 a9 00 08 5b 68 28 c2 30 a5 23 89 f0 ff d0 29
>3a5858		89 0f 00 d0 0c a5 21 89 00 fc d0 05 20 ff 40 80
>3a5868		2e a2 0a 00 46 23 66 21 ca d0 f9 20 ff 40 e2 20
>3a5878		a9 4b 20 18 00 c2 20 80 16 a2 14 00 46 23 66 21
>3a5888		ca d0 f9 20 ff 40 e2 20 a9 4d 20 18 00 c2 20 28
>3a5898		2b fa 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a58a8		20 20 a5 13 20 bd 58 a5 14 85 21 a5 16 85 23 20
>3a58b8		df 40 28 2b 60 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a58c8		68 28 e2 20 a7 14 c9 20 d0 1c a0 02 00 b7 14 d0
>3a58d8		06 a9 30 87 14 80 0f a0 01 00 b7 14 87 14 c2 20
>3a58e8		e6 14 d0 02 e6 16 28 2b 7a 60 0b 08 08 c2 20 48
>3a58f8		a9 00 08 5b 68 28 c2 20 8f 44 02 00 a2 09 00 4a
>3a5908		ca d0 fc 18 69 bc 07 85 21 64 23 e2 20 a9 00 85
>3a5918		25 c2 20 20 ff 40 a9 2d 00 20 18 00 c2 20 af 44
>3a5928		02 00 a2 05 00 4a ca d0 fc 29 0f 00 85 21 64 23
>3a5938		e2 20 a9 00 85 25 c2 20 20 9b 58 a9 2d 00 20 18
>3a5948		00 c2 20 af 44 02 00 29 1f 00 85 21 64 23 e2 20
>3a5958		a9 00 85 25 c2 20 20 9b 58 28 2b 60 0b 08 08 c2
>3a5968		20 48 a9 00 08 5b 68 28 c2 20 8f 44 02 00 a2 0b
>3a5978		00 4a ca d0 fc 85 21 64 23 e2 20 a9 00 85 25 c2
>3a5988		20 20 ff 40 a9 3a 00 20 18 00 c2 20 af 44 02 00
>3a5998		a2 05 00 4a ca d0 fc 29 0f 00 85 21 64 23 e2 20
>3a59a8		a9 00 85 25 c2 20 20 9b 58 a9 3a 00 20 18 00 c2
>3a59b8		20 af 44 02 00 29 1f 00 85 21 64 23 e2 20 a9 00
>3a59c8		85 25 c2 20 20 9b 58 28 2b 60 0b 08 c2 30 a9 00
>3a59d8		00 8f b4 08 00 8f b6 08 00 e2 20 20 d7 1f c9 00
>3a59e8		f0 08 20 51 1a 20 07 06 80 11 c2 20 a9 00 00 85
>3a59f8		21 85 23 e2 20 a9 02 85 25 c2 20 20 33 5b 22 08
>3a5a08		11 00 b0 22 20 e4 5b 08 c2 20 48 a9 00 08 5b 68
>3a5a18		28 e2 20 a9 10 8f d1 08 00 c2 20 29 ff 00 20 a3
>3a5a28		1b e2 20 dc d2 08 20 1f 03 08 c2 20 48 a9 20 03
>3a5a38		5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9 00 c9
>3a5a48		e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0 03 82
>3a5a58		a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0 03 82
>3a5a68		7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00 d0 f5
>3a5a78		a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8 c0 0b
>3a5a88		00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89 10 d0
>3a5a98		1e c2 20 a0 1c 00 b7 18 8f 21 08 00 c8 c8 b7 18
>3a5aa8		8f 23 08 00 e2 20 a9 00 8f 25 08 00 20 42 58 a9
>3a5ab8		09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89 01 f0
>3a5ac8		05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18 00 89
>3a5ad8		10 f0 05 a9 44 20 18 00 ea 20 1f 03 20 36 03 22
>3a5ae8		0c 11 00 90 03 82 41 ff 20 e4 5b 08 c2 20 48 a9
>3a5af8		00 08 5b 68 28 20 bb 1e 28 2b 60 08 c2 20 48 a9
>3a5b08		20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9 5b 20
>3a5b18		18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8 c0
>3a5b28		08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08 c2 20
>3a5b38		48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20 a9 1a
>3a5b48		00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e 00
>3a5b58		d0 f8 c2 20 a9 73 f0 8f 81 f2 1a a9 1a 00 8f 83
>3a5b68		f2 1a af 21 08 00 8f 75 f2 1a af 23 08 00 8f 77
>3a5b78		f2 1a 28 2b 60 08 c2 30 20 97 1e 20 51 1a 20 07
>3a5b88		06 20 33 5b e2 20 a9 2c 85 35 20 b8 1f b0 0f c2
>3a5b98		20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17 20 76
>3a5ba8		1e 20 51 1a 20 75 05 c2 20 a5 21 8f 54 03 00 a5
>3a5bb8		23 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20 48 a9
>3a5bc8		00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29
>3a5bd8		ff 00 20 a3 1b e2 20 dc d2 08 28 60 8b 0b 08 08
>3a5be8		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a5bf8		ab 68 28 e2 20 af 2e 03 00 85 21 a9 00 85 22 85
>3a5c08		23 85 24 a9 00 85 25 85 e8 a9 1a 85 e7 c2 20 a9
>3a5c18		47 5c 85 e5 20 95 4c e2 20 af 20 03 00 85 21 a9
>3a5c28		00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9 1a 85
>3a5c38		e7 c2 20 a9 4f 5c 85 e5 20 95 4c 28 2b ab 60 44
>3a5c48		4f 53 53 54 41 54 00 42 49 4f 53 53 54 41 54 00
>3a5c58		08 c2 30 20 97 1e 20 51 1a 20 07 06 a5 21 8f 60
>3a5c68		03 00 a5 23 8f 62 03 00 a9 ff ff 8f 54 03 00 8f
>3a5c78		56 03 00 22 24 11 00 b0 25 20 a3 1b 20 e4 5b 08
>3a5c88		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08
>3a5c98		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 20 a3
>3a5ca8		1b 28 60 08 c2 30 20 97 1e 20 51 1a 20 07 06 20
>3a5cb8		33 5b a9 00 00 8f 54 03 00 a9 01 00 8f 56 03 00
>3a5cc8		20 7a 49 22 18 11 00 b0 22 20 e4 5b 08 c2 20 48
>3a5cd8		a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20
>3a5ce8		29 ff 00 20 a3 1b e2 20 dc d2 08 20 e4 5b c2 20
>3a5cf8		a2 12 00 18 bf 73 f2 1a 69 00 00 85 90 bf 75 f2
>3a5d08		1a 69 01 00 85 92 e2 20 a9 00 87 90 c2 20 a9 00
>3a5d18		00 85 78 a9 01 00 85 7a a2 00 00 e2 20 a7 78 f0
>3a5d28		2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20 e6
>3a5d38		78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d 00 4f 20 e0
>3a5d48		24 c2 20 e6 78 d0 d1 e6 7a 80 cd e0 00 00 f0 0a
>3a5d58		e2 20 a9 00 9d 00 4f 20 e0 24 28 60 08 c2 30 20
>3a5d68		97 1e 20 51 1a 20 07 06 20 33 5b e2 20 a9 2c 20
>3a5d78		83 1f c2 20 20 51 1a 20 75 05 a5 21 8f 50 03 00
>3a5d88		a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 83 1f 20
>3a5d98		51 1a 20 75 05 a5 21 8f 58 03 00 a5 23 8f 5a 03
>3a5da8		00 22 1c 11 00 b0 22 20 e4 5b 08 c2 20 48 a9 00
>3a5db8		08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff
>3a5dc8		00 20 a3 1b e2 20 dc d2 08 20 e4 5b 28 60 da 5a
>3a5dd8		08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00 04 f0 04
>3a5de8		e8 c8 80 f5 28 7a fa 60 08 c2 30 20 97 1e 20 51
>3a5df8		1a 20 07 06 20 33 5b a9 00 00 85 a4 e2 20 a9 01
>3a5e08		85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9 a9 ff ff
>3a5e18		85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff ff 85 57
>3a5e28		a9 ff 7f 85 59 20 16 16 e2 20 a9 80 85 b2 c2 20
>3a5e38		c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f 58 03 00
>3a5e48		a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00 22 1c
>3a5e58		11 00 b0 22 20 e4 5b 08 c2 20 48 a9 00 08 5b 68
>3a5e68		28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00 20 a3
>3a5e78		1b e2 20 dc d2 08 20 e4 5b 28 60 08 c2 30 20 97
>3a5e88		1e 20 51 1a 20 07 06 20 d6 5d 22 04 11 00 b0 22
>3a5e98		20 e4 5b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a5ea8		13 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc
>3a5eb8		d2 08 20 e4 5b 28 60 da 08 e2 20 c9 61 90 08 c9
>3a5ec8		7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df ea
>3a5ed8		5e 1a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18
>3a5ee8		fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c
>3a5ef8		22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 51
>3a5f08		1a 20 07 06 20 d6 5d 22 10 11 00 b0 22 20 e4 5b
>3a5f18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14 8f d1
>3a5f28		08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 e2
>3a5f38		20 a9 2c 20 83 1f c2 20 20 51 1a 20 07 06 ad 38
>3a5f48		03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9 20 95
>3a5f58		7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7 21 f0
>3a5f68		76 c9 2e f0 39 22 bf 5e 1a b0 1f 08 c2 20 48 a9
>3a5f78		00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29
>3a5f88		ff 00 20 a3 1b e2 20 dc d2 08 95 7c c8 e8 c0 08
>3a5f98		00 d0 ca b7 21 f0 40 c9 2e f0 03 c8 80 f5 c8 a2
>3a5fa8		08 00 b7 21 f0 31 22 bf 5e 1a b0 22 20 e4 5b 08
>3a5fb8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a5fc8		00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08 95 7c
>3a5fd8		c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5 7c 97
>3a5fe8		08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20 e4
>3a5ff8		5b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15 8f
>3a6008		d1 08 00 c2 20 29 ff 00 20 a3 1b e2 20 dc d2 08
>3a6018		20 e4 5b 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a6028		c2 30 20 51 1a 20 07 06 a5 21 8f 64 03 00 a5 23
>3a6038		8f 66 03 00 e2 20 a9 2c 20 83 1f c2 20 20 51 1a
>3a6048		20 07 06 a5 21 8f 68 03 00 a5 23 8f 6a 03 00 22
>3a6058		30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a6068		20 a9 16 8f d1 08 00 c2 20 29 ff 00 20 a3 1b e2
>3a6078		20 dc d2 08 28 60 5c 74 7a 1a 5c c5 78 1a 5c 75
>3a6088		7a 1a 5c b8 69 1a 5c 15 6a 1a 5c 48 69 1a 5c ce
>3a6098		68 1a 5c 4b 6e 1a 5c 39 65 1a 5c 66 68 1a 5c 21
>3a60a8		68 1a 5c ab 67 1a 5c 83 79 1a 5c 47 66 1a 5c 9d
>3a60b8		64 1a 5c fe 79 1a 5c 75 65 1a 5c 77 7a 1a 5c 70
>3a60c8		7a 1a 5c 64 67 1a 5c 78 7a 1a 18 fb c2 20 a9 ff
>3a60d8		fe 1b 58 5c df 60 1a c2 30 22 9d 64 1a 20 08 00
>3a60e8		20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 ad 04
>3a60f8		ab 22 82 60 1a 22 8a 60 1a 80 e2 08 8b e2 20 a9
>3a6108		1a 48 ab c2 10 a2 16 61 20 ac 03 ab 28 6b 41 20
>3a6118		3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62 6c
>3a6128		79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61 20
>3a6138		70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61 72
>3a6148		74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65
>3a6158		6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>3a6168		20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65 63
>3a6178		74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79 0d
>3a6188		0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d
>3a6198		0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20 61
>3a61a8		20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74 61
>3a61b8		72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e
>3a61c8		0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b 20
>3a61d8		6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20 61
>3a61e8		20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65 73
>3a61f8		73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63 75
>3a6208		74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74 69
>3a6218		6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d 20
>3a6228		2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a6238		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 20
>3a6248		20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61 74
>3a6258		69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 48
>3a6268		20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a6278		62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d 20
>3a6288		20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65 73
>3a6298		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20 20
>3a62a8		20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20 22
>3a62b8		46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74 69
>3a62c8		6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65
>3a62d8		6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20 76
>3a62e8		61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a62f8		52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65 20
>3a6308		76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72 65
>3a6318		67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20
>3a6328		3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e
>3a6338		20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d
>3a6348		58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65 20
>3a6358		74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20
>3a6368		74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d 53
>3a6378		20 20 20 20 20 53 41 56 45 20 20 20 20 20 20 20
>3a6388		20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74 3e
>3a6398		20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74 3e
>3a63a8		20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61 74
>3a63b8		69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72 20
>3a63c8		28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74 68
>3a63d8		69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62 79
>3a63e8		74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72 65
>3a63f8		67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c 61
>3a6408		67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61 73
>3a6418		73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65 74
>3a6428		75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e 20
>3a6438		3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20 5b
>3a6448		62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74 20
>3a6458		64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a6468		3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73 68
>3a6478		6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e 0d
>3a6488		0d 00 08 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a6498		0d 85 4e 28 6b 08 e2 20 48 a9 1a 48 ab 68 28 a2
>3a64a8		b5 7a 20 ac 03 e2 20 a9 3b 20 18 00 a9 20 20 18
>3a64b8		00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00
>3a64c8		a2 42 02 20 2f 03 c2 20 a9 20 00 20 18 00 af 44
>3a64d8		02 00 20 bc 03 a9 20 00 20 18 00 af 46 02 00 20
>3a64e8		bc 03 a9 20 00 20 18 00 af 48 02 00 20 bc 03 a9
>3a64f8		20 00 20 18 00 af 4a 02 00 20 bc 03 a9 20 00 20
>3a6508		18 00 af 4e 02 00 20 d6 03 a9 20 00 20 18 00 20
>3a6518		18 00 af 4c 02 00 20 bc 03 a9 20 00 20 18 00 08
>3a6528		e2 20 ad 4f 02 22 b3 77 1a 28 20 1f 03 20 1f 03
>3a6538		6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a6548		15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5 0d c5
>3a6558		11 d0 06 20 1f 03 2b 28 6b c2 20 18 a5 0d 69 01
>3a6568		00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08 0b 08
>3a6578		c2 20 48 a9 46 08 5b 68 28 e2 20 a5 0f c5 17 90
>3a6588		45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87 15 a5
>3a6598		0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c 2c 66
>3a65a8		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>3a65b8		85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20 a5 16
>3a65c8		69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85 19 e2
>3a65d8		20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15 85 15
>3a65e8		e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15 a5 13
>3a65f8		c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26 c2 20
>3a6608		38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00 85 12
>3a6618		c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16 e9 00
>3a6628		85 16 80 c4 20 1f 03 2b 28 6b 08 e2 20 c9 21 90
>3a6638		0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18 6b 08
>3a6648		8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00
>3a6658		8f b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20
>3a6668		18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13
>3a6678		c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20
>3a6688		18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13
>3a6698		e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34 85
>3a66a8		1b e2 20 a7 19 22 32 66 1a b0 02 a9 3f 99 7c 08
>3a66b8		c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69 00
>3a66c8		85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9 3e 20
>3a66d8		18 00 a9 20 20 18 00 e2 20 a5 34 20 d6 03 a9 3a
>3a66e8		20 18 00 c2 20 a5 32 20 bc 03 c2 20 a9 08 00 85
>3a66f8		47 e2 20 a9 20 20 18 00 a7 32 20 d6 03 22 74 77
>3a6708		1a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20 18
>3a6718		00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08 20 ac
>3a6728		03 20 1f 03 20 36 03 a5 34 c5 13 90 0f c2 20 a5
>3a6738		32 c5 11 90 07 20 1f 03 2b ab 28 6b 4c 98 66 08
>3a6748		8d 90 08 e2 20 bd 00 00 99 00 00 ad 90 08 f0 0a
>3a6758		c8 e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b 8b 08
>3a6768		c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48
>3a6778		ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20 a5
>3a6788		31 3a 85 47 a2 57 08 a0 7c 08 22 47 67 1a a0 00
>3a6798		00 b9 7c 08 87 32 22 74 77 1a c8 c4 47 d0 f2 ab
>3a67a8		2b 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28
>3a67b8		08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5 31
>3a67c8		3a 3a 85 47 a2 5b 08 a0 7c 08 22 47 67 1a c2 20
>3a67d8		a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0 06
>3a67e8		a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7c 08
>3a67f8		d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34 85
>3a6808		4c 22 1e 72 1a e2 20 a9 20 20 18 00 22 74 77 1a
>3a6818		80 c6 20 1f 03 ab 2b 28 6b 08 c2 20 48 a9 46 08
>3a6828		5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40 02
>3a6838		00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00
>3a6848		a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 1a 48
>3a6858		a9 68 48 a9 61 48 4c 98 68 ea 5c 04 00 1a 08 c2
>3a6868		20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9 c2 30
>3a6878		a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00
>3a6888		aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b
>3a6898		e2 20 af 4e 02 00 48 ab a9 5c 8f a0 08 00 af 42
>3a68a8		02 00 8f a3 08 00 af 41 02 00 8f a2 08 00 af 40
>3a68b8		02 00 8f a1 08 00 af 4f 02 00 48 c2 20 af 44 02
>3a68c8		00 28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9 1a 48
>3a68d8		ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2
>3a68e8		20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15 85
>3a68f8		47 80 11 c2 20 a9 01 00 85 47 80 08 a2 79 7a 20
>3a6908		ac 03 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00 e2
>3a6918		20 a7 4a d7 11 f0 09 22 1e 72 1a a9 20 20 18 00
>3a6928		c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00 85
>3a6938		4c c8 c4 47 d0 d9 20 1f 03 20 1f 03 ab 2b 28 6b
>3a6948		08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a6958		48 a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e
>3a6968		40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44 02
>3a6978		c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19 8e
>3a6988		48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2
>3a6998		10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c
>3a69a8		02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b
>3a69b8		08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2
>3a69c8		10 a2 00 00 bf e6 7a 1a f0 18 c7 08 f0 03 e8 80
>3a69d8		f3 c2 20 8a 0a aa bf ee 69 1a 8f 2d 08 00 22 12
>3a69e8		6a 1a ab 2b 28 6b 8e 60 96 60 9a 60 9e 60 a2 60
>3a69f8		a6 60 aa 60 ae 60 b2 60 b6 60 92 60 ba 60 be 60
>3a6a08		c2 60 8a 64 c6 60 ca 60 03 61 6c 2d 08 08 8b 0b
>3a6a18		08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 c9 02
>3a6a28		b0 03 4c bb 6b c2 20 a5 0d 85 32 a5 0f 85 34 c2
>3a6a38		20 22 bd 6d 1a c9 ff ff f0 10 85 54 e2 20 a5 31
>3a6a48		c9 03 f0 36 a9 13 85 4f 80 4c 20 1f 03 08 e2 20
>3a6a58		48 a9 1a 48 ab 68 28 c2 10 a2 f2 6b 20 ac 03 4c
>3a6a68		bb 6b 20 1f 03 08 e2 20 48 a9 1a 48 ab 68 28 c2
>3a6a78		10 a2 01 6c 20 ac 03 4c bb 6b e2 20 22 f3 6d 1a
>3a6a88		c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9 13
>3a6a98		f0 04 c9 08 f0 00 22 eb 6c 1a b0 03 4c 84 6b 87
>3a6aa8		32 22 74 77 1a 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a6ab8		20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12 f0
>3a6ac8		6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03 4c
>3a6ad8		b2 6b c2 20 29 ff 00 aa e2 20 bf ba 76 1a c9 03
>3a6ae8		f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5 54
>3a6af8		c9 32 73 f0 26 c9 96 73 f0 2a c9 16 73 f0 1c c9
>3a6b08		1a 73 f0 17 c9 22 73 f0 12 c9 0a 73 f0 0d c9 1e
>3a6b18		73 f0 08 c9 06 73 f0 03 4c 9e 6a e2 20 a9 12 85
>3a6b28		4f 4c 9e 6a e2 20 a9 16 85 4f 4c 9e 6a 22 2e 6c
>3a6b38		1a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96 08 97
>3a6b48		56 22 74 77 1a a0 01 00 b9 96 08 97 56 22 74 77
>3a6b58		1a a0 00 00 b9 96 08 97 56 22 74 77 1a e2 20 a9
>3a6b68		41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34 86
>3a6b78		4c 22 1e 72 1a a9 20 20 18 00 80 37 20 1f 03 08
>3a6b88		e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 bf 6b 20 ac
>3a6b98		03 80 20 20 1f 03 08 e2 20 48 a9 1a 48 ab 68 28
>3a6ba8		c2 10 a2 0f 6c 20 ac 03 80 09 a5 4f 29 c0 d0 95
>3a6bb8		4c 59 6b 2b ab 28 6b 41 64 64 72 65 73 73 69 6e
>3a6bc8		67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69 6e
>3a6bd8		65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73 74
>3a6be8		72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d 6e
>3a6bf8		65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70 65
>3a6c08		72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65 20
>3a6c18		6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c 61
>3a6c28		72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46 08 5b
>3a6c38		68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32 69
>3a6c48		02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5 34
>3a6c58		69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c
>3a6c68		85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5 51
>3a6c78		d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0 1c
>3a6c88		a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0 0c
>3a6c98		80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18 6b
>3a6ca8		2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 46 08
>3a6cb8		5b 68 28 e2 20 a2 00 00 df 00 d0 1a f0 08 e8 e0
>3a6cc8		10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26 52
>3a6cd8		06 50 26 52 06 50 26 52 e2 20 8a 05 50 85 50 fa
>3a6ce8		2b 28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08
>3a6cf8		e2 20 48 a9 1a 48 ab 68 28 e2 20 a5 4f 29 3f 85
>3a6d08		4a c2 30 a2 00 00 a0 00 00 bd b8 73 f0 1b c5 54
>3a6d18		d0 0d e2 20 b9 ba 75 29 3f c5 4a f0 07 c2 20 e8
>3a6d28		e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08
>3a6d38		c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0 00 00
>3a6d48		64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36 85
>3a6d58		4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28 38
>3a6d68		6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30 b0
>3a6d78		14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0
>3a6d88		02 80 de 29 df 22 ac 6c 1a 80 cb 0b 08 c2 20 48
>3a6d98		a9 46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03 c8
>3a6da8		80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69 00
>3a6db8		00 85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a6dc8		c2 20 a5 11 85 36 a5 13 85 38 a9 46 72 85 03 a9
>3a6dd8		1a 00 85 05 22 35 6d 1a b0 0d 22 93 6d 1a a7 03
>3a6de8		d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2 20
>3a6df8		48 a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5 17 85
>3a6e08		38 a9 d2 76 85 03 a9 1a 00 85 05 22 35 6d 1a b0
>3a6e18		22 22 93 6d 1a c2 20 18 a5 03 69 01 00 85 03 a5
>3a6e28		05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9 ff
>3a6e38		ff 80 0d 22 93 6d 1a e2 20 a7 03 c2 20 29 ff 00
>3a6e48		2b 28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a6e58		e2 20 a9 00 8f b4 08 00 a5 31 c9 02 b0 16 c9 01
>3a6e68		90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f
>3a6e78		69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34
>3a6e88		80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34
>3a6e98		69 00 85 13 22 b7 6e 1a e2 20 a5 34 c5 13 90 f4
>3a6ea8		c2 20 a5 32 c5 11 90 ec 20 1f 03 2b ab 28 6b 08
>3a6eb8		0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08 c2 20
>3a6ec8		48 a9 78 08 5b 68 28 c2 20 a5 00 85 18 e2 20 a5
>3a6ed8		02 85 1a 22 1e 72 1a a9 20 20 18 00 c2 20 18 a5
>3a6ee8		00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a e2 20
>3a6ef8		c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f 94 08
>3a6f08		00 80 0b c9 e2 d0 0c 48 a7 18 0f 94 08 00 8f 94
>3a6f18		08 00 68 c2 20 29 ff 00 0a aa bf b8 73 1a aa 22
>3a6f28		98 71 1a e2 20 a7 00 aa bf ba 75 1a 22 74 77 1a
>3a6f38		22 45 6f 1a 20 1f 03 20 36 03 2b 28 6b 08 e2 20
>3a6f48		48 29 3f 0a c2 10 aa 68 7c 53 6f 83 6f 9e 6f a5
>3a6f58		6f ca 6f d1 6f ec 6f 0e 70 1f 70 5c 70 64 70 75
>3a6f68		70 86 70 8d 70 b2 70 df 70 4b 70 30 70 fd 6f d2
>3a6f78		70 dc 70 f0 70 1f 71 cd 70 30 71 a9 28 20 18 00
>3a6f88		22 47 71 1a a9 2c 20 18 00 a9 58 20 18 00 a9 29
>3a6f98		20 18 00 4c 41 71 22 47 71 1a 4c 41 71 e2 20 48
>3a6fa8		a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a 2f 94
>3a6fb8		08 00 d0 07 22 51 71 1a 4c 41 71 22 47 71 1a 4c
>3a6fc8		41 71 22 51 71 1a 4c 41 71 a9 28 20 18 00 22 47
>3a6fd8		71 1a a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18
>3a6fe8		00 4c 41 71 22 47 71 1a a9 2c 20 18 00 a9 58 20
>3a6ff8		18 00 4c 41 71 22 47 71 1a a9 2c 20 18 00 a9 59
>3a7008		20 18 00 4c 41 71 22 51 71 1a a9 2c 20 18 00 a9
>3a7018		59 20 18 00 4c 41 71 22 51 71 1a a9 2c 20 18 00
>3a7028		a9 58 20 18 00 4c 41 71 a9 28 20 18 00 22 51 71
>3a7038		1a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20 18 00
>3a7048		4c 41 71 a9 28 20 18 00 22 47 71 1a a9 29 20 18
>3a7058		00 4c 41 71 a9 41 20 18 00 4c 45 71 22 47 71 1a
>3a7068		a9 2c 20 18 00 a9 53 20 18 00 4c 41 71 a9 5b 20
>3a7078		18 00 22 47 71 1a a9 5d 20 18 00 4c 41 71 22 5f
>3a7088		71 1a 4c 45 71 a9 28 20 18 00 22 47 71 1a a9 2c
>3a7098		20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9 2c 20
>3a70a8		18 00 a9 59 20 18 00 4c 41 71 a9 5b 20 18 00 22
>3a70b8		47 71 1a a9 5d 20 18 00 a9 2c 20 18 00 a9 59 20
>3a70c8		18 00 4c 41 71 a0 02 00 80 03 a0 01 00 22 c5 71
>3a70d8		1a 4c 45 71 4c 45 71 22 5f 71 1a a9 2c 20 18 00
>3a70e8		a9 58 20 18 00 4c 45 71 a9 23 20 18 00 8b a5 02
>3a70f8		48 ab a6 00 e8 a0 01 00 22 2f 03 1a a9 2c 20 18
>3a7108		00 a9 23 20 18 00 a6 00 a0 01 00 22 2f 03 1a ab
>3a7118		22 74 77 1a 4c 41 71 a9 28 20 18 00 22 51 71 1a
>3a7128		a9 29 20 18 00 4c 41 71 a9 5b 20 18 00 22 51 71
>3a7138		1a a9 5d 20 18 00 4c 41 71 22 74 77 1a 28 6b 08
>3a7148		e2 20 a7 00 20 d6 03 28 6b 08 c2 30 a7 00 20 bc
>3a7158		03 22 74 77 1a 28 6b 08 8b 0b c2 30 5a 08 c2 20
>3a7168		48 a9 78 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a7178		28 e2 20 a0 00 00 a7 00 99 90 08 22 74 77 1a c8
>3a7188		c0 03 00 d0 f1 22 1e 72 1a c2 30 7a 2b ab 28 6b
>3a7198		08 8b e2 20 c2 10 08 e2 20 48 a9 1a 48 ab 68 28
>3a71a8		bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 bd 00
>3a71b8		00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08 0b 08
>3a71c8		c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02 00 f0 14
>3a71d8		a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff 85 19
>3a71e8		85 1a 80 16 a7 00 85 18 22 74 77 1a a7 00 85 19
>3a71f8		30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5 00 65
>3a7208		18 85 18 e2 20 a5 02 65 1a 85 1a 22 1e 72 1a 22
>3a7218		74 77 1a 2b 28 6b 08 0b c2 20 48 08 c2 20 48 a9
>3a7228		46 08 5b 68 28 e2 20 a5 4c 20 d6 03 e2 20 a9 3a
>3a7238		20 18 00 c2 20 a5 4a 20 bc 03 68 2b 28 6b 4f 52
>3a7248		41 00 41 4e 44 00 45 4f 52 00 41 44 43 00 53 54
>3a7258		41 00 4c 44 41 00 43 4d 50 00 53 42 43 00 41 53
>3a7268		4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00 53 54
>3a7278		58 00 4c 44 58 00 44 45 43 00 49 4e 43 00 42 49
>3a7288		54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00 43 50
>3a7298		59 00 43 50 58 00 42 52 4b 00 4a 53 52 00 52 54
>3a72a8		49 00 52 54 53 00 50 48 50 00 50 4c 50 00 50 48
>3a72b8		41 00 50 4c 41 00 44 45 59 00 54 41 59 00 49 4e
>3a72c8		59 00 49 4e 58 00 43 4c 43 00 53 45 43 00 43 4c
>3a72d8		49 00 53 45 49 00 54 59 41 00 43 4c 56 00 43 4c
>3a72e8		44 00 53 45 44 00 54 58 41 00 54 58 53 00 54 41
>3a72f8		58 00 54 53 58 00 44 45 58 00 4e 4f 50 00 42 50
>3a7308		4c 00 42 4d 49 00 42 56 43 00 42 56 53 00 42 43
>3a7318		43 00 42 43 53 00 42 4e 45 00 42 45 51 00 54 53
>3a7328		42 00 54 52 42 00 53 54 5a 00 42 52 41 00 50 48
>3a7338		59 00 50 4c 59 00 50 48 58 00 50 4c 58 00 50 48
>3a7348		44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00 50 48
>3a7358		42 00 50 4c 42 00 57 41 49 00 58 42 41 00 54 43
>3a7368		53 00 54 53 43 00 54 43 44 00 54 44 43 00 54 58
>3a7378		59 00 54 59 58 00 53 54 50 00 58 43 45 00 43 4f
>3a7388		50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00 42 52
>3a7398		4c 00 52 45 50 00 53 45 50 00 4d 56 50 00 4d 56
>3a73a8		4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00 00 00
>3a73b8		9e 72 46 72 86 73 46 72 26 73 46 72 66 72 46 72
>3a73c8		ae 72 46 72 66 72 46 73 26 73 46 72 66 72 46 72
>3a73d8		06 73 46 72 46 72 46 72 2a 73 46 72 66 72 46 72
>3a73e8		ce 72 46 72 82 72 66 73 2a 73 46 72 66 72 46 72
>3a73f8		a2 72 4a 72 8a 73 4a 72 86 72 4a 72 6a 72 4a 72
>3a7408		b2 72 4a 72 6a 72 4a 73 86 72 4a 72 6a 72 4a 72
>3a7418		0a 73 4a 72 4a 72 4a 72 86 72 4a 72 6a 72 4a 72
>3a7428		d2 72 4a 72 7e 72 6a 73 86 72 4a 72 6a 72 4a 72
>3a7438		a6 72 4e 72 8e 73 4e 72 a2 73 4e 72 6e 72 4e 72
>3a7448		b6 72 4e 72 6e 72 4e 73 8a 72 4e 72 6e 72 4e 72
>3a7458		0e 73 4e 72 4e 72 4e 72 a6 73 4e 72 6e 72 4e 72
>3a7468		d6 72 4e 72 36 73 6e 73 b2 73 4e 72 6e 72 4e 72
>3a7478		aa 72 52 72 92 73 52 72 2e 73 52 72 72 72 52 72
>3a7488		ba 72 52 72 72 72 52 73 8a 72 52 72 72 72 52 72
>3a7498		12 73 52 72 52 72 52 72 2e 73 52 72 72 72 52 72
>3a74a8		da 72 52 72 3a 73 72 73 8a 72 52 72 72 72 52 72
>3a74b8		32 73 56 72 96 73 56 72 8e 72 56 72 76 72 56 72
>3a74c8		be 72 86 72 ee 72 56 73 8e 72 56 72 76 72 56 72
>3a74d8		16 73 56 72 56 72 56 72 8e 72 56 72 76 72 56 72
>3a74e8		de 72 56 72 f2 72 76 73 2e 73 56 72 2e 73 56 72
>3a74f8		92 72 5a 72 7a 72 5a 72 92 72 5a 72 7a 72 5a 72
>3a7508		c2 72 5a 72 f6 72 5a 73 92 72 5a 72 7a 72 5a 72
>3a7518		1a 73 5a 72 5a 72 5a 72 92 72 5a 72 7a 72 5a 72
>3a7528		e2 72 5a 72 fa 72 7a 73 92 72 5a 72 7a 72 5a 72
>3a7538		96 72 5e 72 9a 73 5e 72 96 72 5e 72 7e 72 5e 72
>3a7548		c6 72 5e 72 fe 72 5e 73 96 72 5e 72 7e 72 5e 72
>3a7558		1e 73 5e 72 5e 72 5e 72 aa 73 5e 72 7e 72 5e 72
>3a7568		e6 72 5e 72 3e 73 7e 73 b2 73 5e 72 7e 72 5e 72
>3a7578		9a 72 62 72 9e 73 62 72 9a 72 62 72 82 72 62 72
>3a7588		ca 72 62 72 02 73 62 73 9a 72 62 72 82 72 62 72
>3a7598		22 73 62 72 62 72 62 72 ae 73 62 72 82 72 62 72
>3a75a8		ea 72 62 72 42 73 82 73 a2 72 62 72 82 72 62 72
>3a75b8		00 00 13 00 02 09 01 01 01 0a 13 82 08 13 03 03
>3a75c8		03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13 03 07
>3a75d8		07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13 03 03
>3a75e8		03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13 07 07
>3a75f8		07 0e 13 00 13 09 14 01 01 0a 13 82 08 13 03 03
>3a7608		03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13 0b 07
>3a7618		07 0b 13 00 16 09 01 01 01 0a 13 82 08 13 15 03
>3a7628		03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13 10 07
>3a7638		07 0e 12 00 16 09 01 01 01 0a 13 82 13 13 03 03
>3a7648		03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 03 07
>3a7658		07 0e 82 00 42 09 01 01 01 0a 13 82 13 13 03 03
>3a7668		03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 07 07
>3a7678		06 0e 42 00 02 09 01 01 01 0a 13 82 13 13 03 03
>3a7688		03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13 17 07
>3a7698		07 0e 42 00 02 09 01 01 01 0f 13 82 13 13 03 03
>3a76a8		03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13 10 07
>3a76b8		07 0e 01 01 01 02 01 01 02 02 00 01 01 03 01 01
>3a76c8		03 01 02 01 01 00 02 02 02 02 41 00 08 64 64 3a
>3a76d8		64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64 64 00
>3a76e8		0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c 59 00
>3a76f8		06 64 64 64 64 00 03 64 64 2c 58 00 05 64 64 2c
>3a7708		59 00 11 64 64 2c 53 00 09 64 64 00 01 23 64 64
>3a7718		64 64 00 c2 23 64 64 2c 23 64 64 00 14 23 64 64
>3a7728		00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64 64 64
>3a7738		64 2c 58 29 00 10 28 64 64 64 64 29 00 10 28 64
>3a7748		64 2c 58 29 00 00 28 64 64 29 2c 59 00 04 28 64
>3a7758		64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64 64 5d
>3a7768		2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2 20 48
>3a7778		18 af 78 08 00 69 01 00 8f 78 08 00 e2 20 af 7a
>3a7788		08 00 69 00 8f 7a 08 00 c2 20 68 28 6b 08 c2 10
>3a7798		da e2 20 bd 00 00 f0 10 c9 7b b0 09 c9 61 90 05
>3a77a8		29 df 9d 00 00 e8 80 eb fa 28 6b 08 c2 10 e2 20
>3a77b8		da a2 08 00 0a b0 08 48 a9 30 20 18 00 80 06 48
>3a77c8		a9 31 20 18 00 68 ca d0 eb fa 28 6b 08 c2 20 48
>3a77d8		a9 46 08 5b 68 28 e2 20 a7 32 f0 0a c9 20 d0 06
>3a77e8		22 74 77 1a 80 f2 6b 08 c2 20 48 a9 46 08 5b 68
>3a77f8		28 e2 20 a7 32 f0 0a c9 20 f0 06 22 74 77 1a 80
>3a7808		f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 74 77
>3a7818		1a 22 d4 77 1a c2 30 a5 31 c2 20 29 ff 00 0a 0a
>3a7828		aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9
>3a7838		22 f0 06 22 74 77 1a 80 f2 a9 00 87 32 22 74 77
>3a7848		1a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a7858		20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0
>3a7868		0d 20 54 04 90 0e 22 ac 6c 1a a9 01 85 4a 22 74
>3a7878		77 1a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a
>3a7888		0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2
>3a7898		20 64 31 22 d4 77 1a a7 32 f0 21 c9 22 d0 06 22
>3a78a8		0a 78 1a 80 0a 22 4d 78 1a a5 31 c9 09 b0 0d a7
>3a78b8		32 f0 09 c9 20 f0 dc 20 54 04 b0 d7 6b 08 0b 08
>3a78c8		c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00
>3a78d8		74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f
>3a78e8		85 00 85 32 e2 20 22 d4 77 1a c9 00 f0 38 c2 20
>3a78f8		a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 74 77
>3a7908		1a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8
>3a7918		80 eb 86 0b a9 00 87 32 22 74 77 1a a7 08 c9 41
>3a7928		f0 07 22 97 78 1a 2b 28 6b 22 d4 77 1a a7 32 f0
>3a7938		f5 22 4d 78 1a 22 d4 77 1a a7 32 f0 e9 c2 20 a5
>3a7948		32 85 11 e2 20 a5 34 85 13 22 74 77 1a a7 32 f0
>3a7958		26 c9 20 d0 f4 a9 00 87 32 e6 31 22 74 77 1a 22
>3a7968		d4 77 1a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5
>3a7978		34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20
>3a7988		a5 31 d0 0f a2 79 7a a9 1a 48 ab 20 ac 03 20 1f
>3a7998		03 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08
>3a79a8		00 20 33 5b e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff
>3a79b8		ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f
>3a79c8		54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2
>3a79d8		20 a2 9f 7a a9 1a 48 ab 20 ac 03 af 2e 03 00 20
>3a79e8		d6 03 a9 20 20 18 00 af 20 03 00 20 d6 03 20 1f
>3a79f8		03 20 1f 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03
>3a7a08		f0 0f a2 79 7a a9 1a 48 ab 20 ac 03 20 1f 03 80
>3a7a18		54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20
>3a7a28		33 5b a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15
>3a7a38		8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25
>3a7a48		e2 20 a2 89 7a a9 1a 48 ab 20 ac 03 af 2e 03 00
>3a7a58		20 d6 03 a9 20 20 18 00 af 20 03 00 20 d6 03 20
>3a7a68		1f 03 20 1f 03 28 ab 6b 5c 13 25 1a 6b 00 00 00
>3a7a78		00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d
>3a7a88		00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20
>3a7a98		66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f
>3a7aa8		20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20
>3a7ab8		50 43 20 20 20 20 20 41 20 20 20 20 58 20 20 20
>3a7ac8		20 59 20 20 20 20 53 50 20 20 20 44 42 52 20 44
>3a7ad8		50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43
>3a7ae8		44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f
>3a7af8		00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a7b08		48 a9 00 48 ab 68 28 c2 30 20 38 7b a9 ff fe 1b
>3a7b18		08 e2 20 48 a9 1a 48 ab 68 28 a2 3c d2 20 ac 03
>3a7b28		08 e2 20 48 a9 00 48 ab 68 28 4c 13 25 4c 35 7b
>3a7b38		08 20 35 02 20 7a 49 28 60 00 00 00 00 00 00 00
>3a7b48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1354 times (21664 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028		41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038		52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048		44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058		4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068		54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078		4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088		00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098		4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8		43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8		53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8		3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 0d 52 45 41
>3ad238		44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad248		42 41 53 49 43 38 31 36 20 76 30 2e 31 2e 30 2d
>3ad258		61 6c 70 68 61 2b 36 32 38 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008		74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018		65 6e 21
>3b001b		20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b0073		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080		49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088		6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098		65 20 61 63 61 64 65 6d 79 2e
>3b00a2		20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b00fa		20 20 20 20 20 20
>3b0100						                .text ""
>3b0100		20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 6 times (96 bytes)...
>3b0178		20 20 20 20 20 20 20 20
>3b0180		50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188		79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198		2e 2e 2e
>3b019b		20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 4 times (64 bytes)...
>3b01f3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200		20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 478 times (7648 bytes)...
>3b1ff8		20 20 20 20 20 20 20 20
>3b2000						.align 256
>3b2000		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 510 times (8160 bytes)...
>3b3ff8		f3 f3 f3 f3 f3 f3 f3 f3
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_BANK1
>3f0800		00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3f0808		7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3f0818		ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3f0828		ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3f0838		ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3f0848		00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3f0858		00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3f0868		00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3f0878		00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3f0888		ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3f0898		ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3f08a8		ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3f08b8		ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3f08c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3f0908		10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3f0918		24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3f0928		62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3f0938		10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3f0948		10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3f0958		00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3f0968		00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3f0978		04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3f0988		10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3f0998		38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3f09a8		7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3f09b8		7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3f09c8		38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3f09d8		00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3f09e8		00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3f09f8		38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3f0a08		10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3f0a18		38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3f0a28		7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3f0a38		38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3f0a48		38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3f0a58		24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3f0a68		44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3f0a78		38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3f0a88		38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3f0a98		3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3f0aa8		44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3f0ab8		82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3f0ac8		44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3f0ad8		38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3f0ae8		38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3f0af8		00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3f0b08		00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3f0b18		00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3f0b28		00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3f0b38		00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3f0b48		10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3f0b58		20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3f0b68		00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3f0b78		00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3f0b88		00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3f0b98		00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3f0ba8		00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3f0bb8		00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3f0bc8		00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3f0bd8		0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3f0be8		30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3f0bf8		00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3f0c08		00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3f0c18		00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3f0c28		00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3f0c38		0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3f0c48		02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3f0c58		00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3f0c68		18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3f0c78		24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3f0c88		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3f0c98		ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3f0ca8		ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3f0cb8		f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3f0cc8		fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3f0cd8		3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3f0ce8		0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3f0cf8		00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3f0d08		f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3f0d18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0d28		80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3f0d38		01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3f0d48		ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3f0d58		18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3f0d68		18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3f0d78		00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3f0d88		18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3f0d98		18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3f0da8		e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3f0db8		ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3f0dc8		00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3f0dd8		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3f0de8		18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3f0df8		f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3f0e08		08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3f0e18		00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3f0e28		00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3f0e38		30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3f0e48		00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3f0e58		18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3f0e68		c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3f0e78		ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3f0e88		00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3f0e98		36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3f0ea8		00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3f0eb8		00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3f0ec8		06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3f0ed8		18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3f0ee8		18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3f0ef8		ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3f0f08		00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3f0f18		00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3f0f28		24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3f0f38		24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3f0f48		24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3f0f58		0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3f0f68		80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3f0f78		cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3f0f88		0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3f0f98		ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3f0fa8		00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3f0fb8		00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3f0fc8		aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3f0fd8		00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3f0fe8		18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3f0ff8		00 00 00 00 00 00 00 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
